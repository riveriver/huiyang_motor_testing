
huiyang_motor_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017794  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08017a34  08017a34  00018a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017ea0  08017ea0  00018ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08017ea8  08017ea8  00018ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  08017eb0  08017eb0  00018eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  08017eb8  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005444  24000070  08017f28  00019070  2**2
                  ALLOC
  8 ._user_heap_stack 00006004  240054b4  08017f28  000194b4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00019070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038d74  00000000  00000000  0001909e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006c45  00000000  00000000  00051e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000023a8  00000000  00000000  00058a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001b9d  00000000  00000000  0005ae00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000dd02  00000000  00000000  0005c99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030d6f  00000000  00000000  0006a69f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017ede2  00000000  00000000  0009b40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021a1f0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009fdc  00000000  00000000  0021a234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000056  00000000  00000000  00224210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017a1c 	.word	0x08017a1c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	08017a1c 	.word	0x08017a1c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <_ZL10MPU_Configv>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void MPU_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80006ce:	f003 fc57 	bl	8003f80 <HAL_MPU_Disable>

  /* Configure the MPU attributes for the QSPI 256MB without instruction access */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 80006d2:	2301      	movs	r3, #1
 80006d4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 80006da:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 80006de:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_256MB;
 80006e0:	231b      	movs	r3, #27
 80006e2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80006e4:	2300      	movs	r3, #0
 80006e6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_NOT_BUFFERABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_NOT_CACHEABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_DISABLE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80006fc:	2300      	movs	r3, #0
 80006fe:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000700:	463b      	mov	r3, r7
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fc74 	bl	8003ff0 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes for the QSPI 8MB (QSPI Flash Size) to Cacheable WT */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000708:	2301      	movs	r3, #1
 800070a:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER1;
 800070c:	2301      	movs	r3, #1
 800070e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 8000710:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8000714:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_8MB;
 8000716:	2316      	movs	r3, #22
 8000718:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
 800071a:	2305      	movs	r3, #5
 800071c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 800071e:	2301      	movs	r3, #1
 8000720:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 8000722:	2301      	movs	r3, #1
 8000724:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 800072e:	2301      	movs	r3, #1
 8000730:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000732:	2300      	movs	r3, #0
 8000734:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000736:	463b      	mov	r3, r7
 8000738:	4618      	mov	r0, r3
 800073a:	f003 fc59 	bl	8003ff0 <HAL_MPU_ConfigRegion>

  /* Setup AXI SRAM in Cacheable WB */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 800073e:	2301      	movs	r3, #1
 8000740:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress      = D1_AXISRAM_BASE;
 8000742:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000746:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_512KB;
 8000748:	2312      	movs	r3, #18
 800074a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800074c:	2303      	movs	r3, #3
 800074e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 8000750:	2301      	movs	r3, #1
 8000752:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 8000754:	2301      	movs	r3, #1
 8000756:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_SHAREABLE;
 8000758:	2301      	movs	r3, #1
 800075a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER2;
 800075c:	2302      	movs	r3, #2
 800075e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 8000760:	2301      	movs	r3, #1
 8000762:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000764:	2300      	movs	r3, #0
 8000766:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	733b      	strb	r3, [r7, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800076c:	463b      	mov	r3, r7
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fc3e 	bl	8003ff0 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000774:	2004      	movs	r0, #4
 8000776:	f003 fc1b 	bl	8003fb0 <HAL_MPU_Enable>
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <_ZL16CPU_CACHE_Enablev>:

static void CPU_CACHE_Enable(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800078a:	4b3e      	ldr	r3, [pc, #248]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000792:	2b00      	cmp	r3, #0
 8000794:	bf14      	ite	ne
 8000796:	2301      	movne	r3, #1
 8000798:	2300      	moveq	r3, #0
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d11b      	bne.n	80007d8 <_ZL16CPU_CACHE_Enablev+0x54>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007a0:	f3bf 8f4f 	dsb	sy
}
 80007a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007a6:	f3bf 8f6f 	isb	sy
}
 80007aa:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007ac:	4b35      	ldr	r3, [pc, #212]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007b4:	f3bf 8f4f 	dsb	sy
}
 80007b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007ba:	f3bf 8f6f 	isb	sy
}
 80007be:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007c0:	4b30      	ldr	r3, [pc, #192]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	4a2f      	ldr	r2, [pc, #188]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007cc:	f3bf 8f4f 	dsb	sy
}
 80007d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007d2:	f3bf 8f6f 	isb	sy
}
 80007d6:	e000      	b.n	80007da <_ZL16CPU_CACHE_Enablev+0x56>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007d8:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007da:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	bf14      	ite	ne
 80007e6:	2301      	movne	r3, #1
 80007e8:	2300      	moveq	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d142      	bne.n	8000876 <_ZL16CPU_CACHE_Enablev+0xf2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80007f0:	4b24      	ldr	r3, [pc, #144]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007f8:	f3bf 8f4f 	dsb	sy
}
 80007fc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 8000800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000804:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	0b5b      	lsrs	r3, r3, #13
 800080a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800080e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	08db      	lsrs	r3, r3, #3
 8000814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000818:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	015a      	lsls	r2, r3, #5
 800081e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000822:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000828:	4916      	ldr	r1, [pc, #88]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 800082a:	4313      	orrs	r3, r2
 800082c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	1e5a      	subs	r2, r3, #1
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	bf14      	ite	ne
 800083a:	2301      	movne	r3, #1
 800083c:	2300      	moveq	r3, #0
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1ea      	bne.n	800081a <_ZL16CPU_CACHE_Enablev+0x96>
    } while(sets-- != 0U);
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	1e5a      	subs	r2, r3, #1
 8000848:	60ba      	str	r2, [r7, #8]
 800084a:	2b00      	cmp	r3, #0
 800084c:	bf14      	ite	ne
 800084e:	2301      	movne	r3, #1
 8000850:	2300      	moveq	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1db      	bne.n	8000810 <_ZL16CPU_CACHE_Enablev+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000858:	f3bf 8f4f 	dsb	sy
}
 800085c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4a08      	ldr	r2, [pc, #32]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 8000864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000868:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800086a:	f3bf 8f4f 	dsb	sy
}
 800086e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000870:	f3bf 8f6f 	isb	sy
}
 8000874:	e000      	b.n	8000878 <_ZL16CPU_CACHE_Enablev+0xf4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000876:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <_Z9LED_Blinkm>:

void LED_Blink(uint32_t delay)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PE3_GPIO_Port,PE3_Pin,GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2108      	movs	r1, #8
 8000894:	480a      	ldr	r0, [pc, #40]	@ (80008c0 <_Z9LED_Blinkm+0x38>)
 8000896:	f004 fb03 	bl	8004ea0 <HAL_GPIO_WritePin>
	HAL_Delay(delay - 1);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3b01      	subs	r3, #1
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 fa5e 	bl	8003d60 <HAL_Delay>
	HAL_GPIO_WritePin(PE3_GPIO_Port,PE3_Pin,GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2108      	movs	r1, #8
 80008a8:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <_Z9LED_Blinkm+0x38>)
 80008aa:	f004 faf9 	bl	8004ea0 <HAL_GPIO_WritePin>
	HAL_Delay(500-1);
 80008ae:	f240 10f3 	movw	r0, #499	@ 0x1f3
 80008b2:	f003 fa55 	bl	8003d60 <HAL_Delay>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	58021000 	.word	0x58021000

080008c4 <_Z9init_filev>:
    "hello word\r\n";
uint16_t file_memory=0;
uint32_t lastWriteTime = 0;     /* 上次写入时间 */
char timeStr[20];               /* 时间字符串缓冲区 */

void init_file(){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  // mount SD card
  f_res = f_mount(&fs, "0:", 1);
 80008c8:	2201      	movs	r2, #1
 80008ca:	491e      	ldr	r1, [pc, #120]	@ (8000944 <_Z9init_filev+0x80>)
 80008cc:	481e      	ldr	r0, [pc, #120]	@ (8000948 <_Z9init_filev+0x84>)
 80008ce:	f010 fa23 	bl	8010d18 <f_mount>
 80008d2:	4603      	mov	r3, r0
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <_Z9init_filev+0x88>)
 80008d8:	701a      	strb	r2, [r3, #0]
	if(f_res != FR_OK){
 80008da:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <_Z9init_filev+0x88>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d006      	beq.n	80008f0 <_Z9init_filev+0x2c>
    printf("f_mount error: %d\r\n", f_res);
 80008e2:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <_Z9init_filev+0x88>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4619      	mov	r1, r3
 80008e8:	4819      	ldr	r0, [pc, #100]	@ (8000950 <_Z9init_filev+0x8c>)
 80008ea:	f015 ff91 	bl	8016810 <iprintf>
    return;
 80008ee:	e027      	b.n	8000940 <_Z9init_filev+0x7c>
  }
	printf("sd mount ok\r\n");
 80008f0:	4818      	ldr	r0, [pc, #96]	@ (8000954 <_Z9init_filev+0x90>)
 80008f2:	f015 fff5 	bl	80168e0 <puts>

  // open or create file
	f_res = f_open(&file, "testing.csv", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 80008f6:	2213      	movs	r2, #19
 80008f8:	4917      	ldr	r1, [pc, #92]	@ (8000958 <_Z9init_filev+0x94>)
 80008fa:	4818      	ldr	r0, [pc, #96]	@ (800095c <_Z9init_filev+0x98>)
 80008fc:	f010 fa70 	bl	8010de0 <f_open>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <_Z9init_filev+0x88>)
 8000906:	701a      	strb	r2, [r3, #0]
	if(f_res != FR_OK){
 8000908:	4b10      	ldr	r3, [pc, #64]	@ (800094c <_Z9init_filev+0x88>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d006      	beq.n	800091e <_Z9init_filev+0x5a>
    printf("f_open error: %d\r\n", f_res);
 8000910:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <_Z9init_filev+0x88>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	4812      	ldr	r0, [pc, #72]	@ (8000960 <_Z9init_filev+0x9c>)
 8000918:	f015 ff7a 	bl	8016810 <iprintf>
    return;
 800091c:	e010      	b.n	8000940 <_Z9init_filev+0x7c>
  }
  printf("testing.csv open ok\r\n");
 800091e:	4811      	ldr	r0, [pc, #68]	@ (8000964 <_Z9init_filev+0xa0>)
 8000920:	f015 ffde 	bl	80168e0 <puts>
  f_lseek(&file, f_size(&file));
 8000924:	4b0d      	ldr	r3, [pc, #52]	@ (800095c <_Z9init_filev+0x98>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	4619      	mov	r1, r3
 800092a:	480c      	ldr	r0, [pc, #48]	@ (800095c <_Z9init_filev+0x98>)
 800092c:	f010 fe46 	bl	80115bc <f_lseek>
  if(f_size(&file) == 0) {
 8000930:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <_Z9init_filev+0x98>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d103      	bne.n	8000940 <_Z9init_filev+0x7c>
    f_printf(&file, "Time(hh:mm:ss:msms)\r\n");
 8000938:	490b      	ldr	r1, [pc, #44]	@ (8000968 <_Z9init_filev+0xa4>)
 800093a:	4808      	ldr	r0, [pc, #32]	@ (800095c <_Z9init_filev+0x98>)
 800093c:	f011 f908 	bl	8011b50 <f_printf>
  }
}
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	08017a40 	.word	0x08017a40
 8000948:	24000280 	.word	0x24000280
 800094c:	240006e4 	.word	0x240006e4
 8000950:	08017a44 	.word	0x08017a44
 8000954:	08017a58 	.word	0x08017a58
 8000958:	08017a68 	.word	0x08017a68
 800095c:	240004b4 	.word	0x240004b4
 8000960:	08017a74 	.word	0x08017a74
 8000964:	08017a88 	.word	0x08017a88
 8000968:	08017aa0 	.word	0x08017aa0

0800096c <_ZNK21ModbusAbsoluteEncoder13isInitializedEv>:
    explicit ModbusAbsoluteEncoder(TIM_HandleTypeDef *htim = nullptr, uint8_t unit_id = 1);
    virtual ~ModbusAbsoluteEncoder() = default;
    // Initialization
    void init();

    bool isInitialized() const{return encoder_initialized;};
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 800097a:	4618      	mov	r0, r3
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
	...

08000988 <_Z19angleUpdateCallbackm>:

Encoder485 encoder485(&htim3, 1, &huart2);
EventGroupHandle_t encoderEventGroup = NULL; // 事件组用于编码器任务同步
#define ENCODER_TICK_EVENT_BIT (1 << 0)
uint32_t oid_encoder = 0;
void angleUpdateCallback(uint32_t position){
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  oid_encoder = position;
 8000990:	4a04      	ldr	r2, [pc, #16]	@ (80009a4 <_Z19angleUpdateCallbackm+0x1c>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
  //   f_sync(&file);  // 确保数据写入到磁盘
  // } else {
  //   printf("data write failed\r\n");
  // }
  // printf("angleUpdateCallback: %lu\n", position);
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	240008c4 	.word	0x240008c4

080009a8 <_Z16StartDefaultTaskPv>:

#endif

void StartDefaultTask(void *argument)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08e      	sub	sp, #56	@ 0x38
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

#ifdef USE_SD_LOG
  MX_FATFS_Init();
 80009b0:	f00e fa1c 	bl	800edec <MX_FATFS_Init>
  init_file();
 80009b4:	f7ff ff86 	bl	80008c4 <_Z9init_filev>
#endif

#ifdef USE_MOBUSRTU_ENCODER
  encoder485.setAngleUpdateCallback(angleUpdateCallback);
 80009b8:	4964      	ldr	r1, [pc, #400]	@ (8000b4c <_Z16StartDefaultTaskPv+0x1a4>)
 80009ba:	4865      	ldr	r0, [pc, #404]	@ (8000b50 <_Z16StartDefaultTaskPv+0x1a8>)
 80009bc:	f002 ff4a 	bl	8003854 <_ZN21ModbusAbsoluteEncoder22setAngleUpdateCallbackEPFvmE>
  // 初始化编码器
  while(!encoder485.isInitialized()){
 80009c0:	e012      	b.n	80009e8 <_Z16StartDefaultTaskPv+0x40>
    encoder485.init();
 80009c2:	4863      	ldr	r0, [pc, #396]	@ (8000b50 <_Z16StartDefaultTaskPv+0x1a8>)
 80009c4:	f001 f832 	bl	8001a2c <_ZN10Encoder4854initEv>
    if(!encoder485.isInitialized()){
 80009c8:	4861      	ldr	r0, [pc, #388]	@ (8000b50 <_Z16StartDefaultTaskPv+0x1a8>)
 80009ca:	f7ff ffcf 	bl	800096c <_ZNK21ModbusAbsoluteEncoder13isInitializedEv>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f083 0301 	eor.w	r3, r3, #1
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d006      	beq.n	80009e8 <_Z16StartDefaultTaskPv+0x40>
      printf("Encoder initialization failed, retrying in 10s...");
 80009da:	485e      	ldr	r0, [pc, #376]	@ (8000b54 <_Z16StartDefaultTaskPv+0x1ac>)
 80009dc:	f015 ff18 	bl	8016810 <iprintf>
      osDelay(10000);
 80009e0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80009e4:	f011 fcd6 	bl	8012394 <osDelay>
  while(!encoder485.isInitialized()){
 80009e8:	4859      	ldr	r0, [pc, #356]	@ (8000b50 <_Z16StartDefaultTaskPv+0x1a8>)
 80009ea:	f7ff ffbf 	bl	800096c <_ZNK21ModbusAbsoluteEncoder13isInitializedEv>
 80009ee:	4603      	mov	r3, r0
 80009f0:	f083 0301 	eor.w	r3, r3, #1
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d1e3      	bne.n	80009c2 <_Z16StartDefaultTaskPv+0x1a>
    }
  }
  // 创建事件组（若尚未创建）
  if(encoderEventGroup == NULL){
 80009fa:	4b57      	ldr	r3, [pc, #348]	@ (8000b58 <_Z16StartDefaultTaskPv+0x1b0>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d104      	bne.n	8000a0c <_Z16StartDefaultTaskPv+0x64>
      encoderEventGroup = xEventGroupCreate();
 8000a02:	f011 ff8b 	bl	801291c <xEventGroupCreate>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a53      	ldr	r2, [pc, #332]	@ (8000b58 <_Z16StartDefaultTaskPv+0x1b0>)
 8000a0a:	6013      	str	r3, [r2, #0]
  }
  encoder485.startAsyncReading(10);
 8000a0c:	210a      	movs	r1, #10
 8000a0e:	4850      	ldr	r0, [pc, #320]	@ (8000b50 <_Z16StartDefaultTaskPv+0x1a8>)
 8000a10:	f002 fdb6 	bl	8003580 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm>
  printf("Encoder task ready, waiting for TIM3 notifications...\r\n");
 8000a14:	4851      	ldr	r0, [pc, #324]	@ (8000b5c <_Z16StartDefaultTaskPv+0x1b4>)
 8000a16:	f015 ff63 	bl	80168e0 <puts>
#endif

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 8000a1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a1e:	f011 fcb9 	bl	8012394 <osDelay>
    uint32_t currentTime = osKernelGetTickCount();
 8000a22:	f011 fc05 	bl	8012230 <osKernelGetTickCount>
 8000a26:	62f8      	str	r0, [r7, #44]	@ 0x2c

#ifdef USE_HEARTBEAT_LED
   static uint32_t led_flash_time = 0;
   if(currentTime - led_flash_time >= 1000)
 8000a28:	4b4d      	ldr	r3, [pc, #308]	@ (8000b60 <_Z16StartDefaultTaskPv+0x1b8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a34:	d306      	bcc.n	8000a44 <_Z16StartDefaultTaskPv+0x9c>
   {
	  HAL_GPIO_TogglePin(PE3_GPIO_Port,PE3_Pin);
 8000a36:	2108      	movs	r1, #8
 8000a38:	484a      	ldr	r0, [pc, #296]	@ (8000b64 <_Z16StartDefaultTaskPv+0x1bc>)
 8000a3a:	f004 fa4a 	bl	8004ed2 <HAL_GPIO_TogglePin>
    led_flash_time = currentTime;
 8000a3e:	4a48      	ldr	r2, [pc, #288]	@ (8000b60 <_Z16StartDefaultTaskPv+0x1b8>)
 8000a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a42:	6013      	str	r3, [r2, #0]
   }
#endif

#ifdef USE_MOBUSRTU_ENCODER
    xEventGroupWaitBits(encoderEventGroup, ENCODER_TICK_EVENT_BIT, pdTRUE, pdFALSE, portMAX_DELAY);
 8000a44:	4b44      	ldr	r3, [pc, #272]	@ (8000b58 <_Z16StartDefaultTaskPv+0x1b0>)
 8000a46:	6818      	ldr	r0, [r3, #0]
 8000a48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	2201      	movs	r2, #1
 8000a52:	2101      	movs	r1, #1
 8000a54:	f011 ff7c 	bl	8012950 <xEventGroupWaitBits>
    encoder485.asyncUpdateCallback();
 8000a58:	483d      	ldr	r0, [pc, #244]	@ (8000b50 <_Z16StartDefaultTaskPv+0x1a8>)
 8000a5a:	f002 fe79 	bl	8003750 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv>
    printf("oid_encoder: %lu\n", oid_encoder);
 8000a5e:	4b42      	ldr	r3, [pc, #264]	@ (8000b68 <_Z16StartDefaultTaskPv+0x1c0>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4619      	mov	r1, r3
 8000a64:	4841      	ldr	r0, [pc, #260]	@ (8000b6c <_Z16StartDefaultTaskPv+0x1c4>)
 8000a66:	f015 fed3 	bl	8016810 <iprintf>
#endif
    
#ifdef USE_SD_LOG
   static uint32_t log_write_time = 0;
   if(currentTime - log_write_time >= 6000)
 8000a6a:	4b41      	ldr	r3, [pc, #260]	@ (8000b70 <_Z16StartDefaultTaskPv+0x1c8>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	f241 726f 	movw	r2, #5999	@ 0x176f
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d95d      	bls.n	8000b36 <_Z16StartDefaultTaskPv+0x18e>
   {
     uint32_t totalMs = currentTime;
 8000a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
     uint32_t ms = totalMs % 1000;
 8000a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a80:	4a3c      	ldr	r2, [pc, #240]	@ (8000b74 <_Z16StartDefaultTaskPv+0x1cc>)
 8000a82:	fba2 1203 	umull	r1, r2, r2, r3
 8000a86:	0992      	lsrs	r2, r2, #6
 8000a88:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a8c:	fb01 f202 	mul.w	r2, r1, r2
 8000a90:	1a9b      	subs	r3, r3, r2
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
     uint32_t totalSec = totalMs / 1000;
 8000a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a96:	4a37      	ldr	r2, [pc, #220]	@ (8000b74 <_Z16StartDefaultTaskPv+0x1cc>)
 8000a98:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9c:	099b      	lsrs	r3, r3, #6
 8000a9e:	623b      	str	r3, [r7, #32]
     uint32_t sec = totalSec % 60;
 8000aa0:	6a3a      	ldr	r2, [r7, #32]
 8000aa2:	4b35      	ldr	r3, [pc, #212]	@ (8000b78 <_Z16StartDefaultTaskPv+0x1d0>)
 8000aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8000aa8:	0959      	lsrs	r1, r3, #5
 8000aaa:	460b      	mov	r3, r1
 8000aac:	011b      	lsls	r3, r3, #4
 8000aae:	1a5b      	subs	r3, r3, r1
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	61fb      	str	r3, [r7, #28]
     uint32_t totalMin = totalSec / 60;
 8000ab6:	6a3b      	ldr	r3, [r7, #32]
 8000ab8:	4a2f      	ldr	r2, [pc, #188]	@ (8000b78 <_Z16StartDefaultTaskPv+0x1d0>)
 8000aba:	fba2 2303 	umull	r2, r3, r2, r3
 8000abe:	095b      	lsrs	r3, r3, #5
 8000ac0:	61bb      	str	r3, [r7, #24]
     uint32_t min = totalMin % 60;
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	4b2c      	ldr	r3, [pc, #176]	@ (8000b78 <_Z16StartDefaultTaskPv+0x1d0>)
 8000ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8000aca:	0959      	lsrs	r1, r3, #5
 8000acc:	460b      	mov	r3, r1
 8000ace:	011b      	lsls	r3, r3, #4
 8000ad0:	1a5b      	subs	r3, r3, r1
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	617b      	str	r3, [r7, #20]
     uint32_t hour = totalMin / 60;
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	4a27      	ldr	r2, [pc, #156]	@ (8000b78 <_Z16StartDefaultTaskPv+0x1d0>)
 8000adc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae0:	095b      	lsrs	r3, r3, #5
 8000ae2:	613b      	str	r3, [r7, #16]
     sprintf(timeStr, "%02lu:%02lu:%02lu:%03lu\r\n", hour, min, sec, ms);
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4922      	ldr	r1, [pc, #136]	@ (8000b7c <_Z16StartDefaultTaskPv+0x1d4>)
 8000af2:	4823      	ldr	r0, [pc, #140]	@ (8000b80 <_Z16StartDefaultTaskPv+0x1d8>)
 8000af4:	f015 ffb0 	bl	8016a58 <siprintf>
     if(f_write(&file, timeStr, strlen(timeStr), &fnum) == FR_OK){
 8000af8:	4821      	ldr	r0, [pc, #132]	@ (8000b80 <_Z16StartDefaultTaskPv+0x1d8>)
 8000afa:	f7ff fbf1 	bl	80002e0 <strlen>
 8000afe:	4602      	mov	r2, r0
 8000b00:	4b20      	ldr	r3, [pc, #128]	@ (8000b84 <_Z16StartDefaultTaskPv+0x1dc>)
 8000b02:	491f      	ldr	r1, [pc, #124]	@ (8000b80 <_Z16StartDefaultTaskPv+0x1d8>)
 8000b04:	4820      	ldr	r0, [pc, #128]	@ (8000b88 <_Z16StartDefaultTaskPv+0x1e0>)
 8000b06:	f010 fb2c 	bl	8011162 <f_write>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	bf0c      	ite	eq
 8000b10:	2301      	moveq	r3, #1
 8000b12:	2300      	movne	r3, #0
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d007      	beq.n	8000b2a <_Z16StartDefaultTaskPv+0x182>
       f_sync(&file);
 8000b1a:	481b      	ldr	r0, [pc, #108]	@ (8000b88 <_Z16StartDefaultTaskPv+0x1e0>)
 8000b1c:	f010 fcc5 	bl	80114aa <f_sync>
       printf("write: %s", timeStr);
 8000b20:	4917      	ldr	r1, [pc, #92]	@ (8000b80 <_Z16StartDefaultTaskPv+0x1d8>)
 8000b22:	481a      	ldr	r0, [pc, #104]	@ (8000b8c <_Z16StartDefaultTaskPv+0x1e4>)
 8000b24:	f015 fe74 	bl	8016810 <iprintf>
 8000b28:	e002      	b.n	8000b30 <_Z16StartDefaultTaskPv+0x188>
     }
     else
     {
       printf("write failed\r\n");
 8000b2a:	4819      	ldr	r0, [pc, #100]	@ (8000b90 <_Z16StartDefaultTaskPv+0x1e8>)
 8000b2c:	f015 fed8 	bl	80168e0 <puts>
     }
     log_write_time = currentTime;
 8000b30:	4a0f      	ldr	r2, [pc, #60]	@ (8000b70 <_Z16StartDefaultTaskPv+0x1c8>)
 8000b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b34:	6013      	str	r3, [r2, #0]
   }
#endif

#ifdef ENABLE_STACK_WATERMARK
   // 获取并打印任务栈最小剩余空间
   UBaseType_t stackHighWaterMark = uxTaskGetStackHighWaterMark(NULL);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f014 f85e 	bl	8014bf8 <uxTaskGetStackHighWaterMark>
 8000b3c:	60f8      	str	r0, [r7, #12]
   printf("Stack High Water Mark: %lu bytes\r\n", stackHighWaterMark * sizeof(StackType_t));
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	4619      	mov	r1, r3
 8000b44:	4813      	ldr	r0, [pc, #76]	@ (8000b94 <_Z16StartDefaultTaskPv+0x1ec>)
 8000b46:	f015 fe63 	bl	8016810 <iprintf>
#endif
  }
 8000b4a:	e766      	b.n	8000a1a <_Z16StartDefaultTaskPv+0x72>
 8000b4c:	08000989 	.word	0x08000989
 8000b50:	24000700 	.word	0x24000700
 8000b54:	08017ab8 	.word	0x08017ab8
 8000b58:	240008c0 	.word	0x240008c0
 8000b5c:	08017aec 	.word	0x08017aec
 8000b60:	240008c8 	.word	0x240008c8
 8000b64:	58021000 	.word	0x58021000
 8000b68:	240008c4 	.word	0x240008c4
 8000b6c:	08017b24 	.word	0x08017b24
 8000b70:	240008cc 	.word	0x240008cc
 8000b74:	10624dd3 	.word	0x10624dd3
 8000b78:	88888889 	.word	0x88888889
 8000b7c:	08017b38 	.word	0x08017b38
 8000b80:	240006ec 	.word	0x240006ec
 8000b84:	240006e8 	.word	0x240006e8
 8000b88:	240004b4 	.word	0x240004b4
 8000b8c:	08017b54 	.word	0x08017b54
 8000b90:	08017b60 	.word	0x08017b60
 8000b94:	08017b70 	.word	0x08017b70

08000b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	#ifdef W25Qxx
	  SCB->VTOR = QSPI_BASE;
		#endif
	MPU_Config();
 8000b9c:	f7ff fd8e 	bl	80006bc <_ZL10MPU_Configv>
	CPU_CACHE_Enable();
 8000ba0:	f7ff fdf0 	bl	8000784 <_ZL16CPU_CACHE_Enablev>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba4:	f003 f880 	bl	8003ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba8:	f000 f826 	bl	8000bf8 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000bac:	f000 f8ae 	bl	8000d0c <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb0:	f000 fa28 	bl	8001004 <_ZL12MX_GPIO_Initv>
  MX_SDMMC1_SD_Init();
 8000bb4:	f000 f8e2 	bl	8000d7c <_ZL17MX_SDMMC1_SD_Initv>
  MX_USART2_UART_Init();
 8000bb8:	f000 f964 	bl	8000e84 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 8000bbc:	f000 f9c2 	bl	8000f44 <_ZL19MX_USART3_UART_Initv>
  MX_TIM3_Init();
 8000bc0:	f000 f8fa 	bl	8000db8 <_ZL12MX_TIM3_Initv>
  // MX_FATFS_Init();
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 8000bc4:	4808      	ldr	r0, [pc, #32]	@ (8000be8 <main+0x50>)
 8000bc6:	f000 fb25 	bl	8001214 <RetargetInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bca:	f011 fac5 	bl	8012158 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000bce:	4a07      	ldr	r2, [pc, #28]	@ (8000bec <main+0x54>)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4807      	ldr	r0, [pc, #28]	@ (8000bf0 <main+0x58>)
 8000bd4:	f011 fb41 	bl	801225a <osThreadNew>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	4a06      	ldr	r2, [pc, #24]	@ (8000bf4 <main+0x5c>)
 8000bdc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bde:	f011 fb01 	bl	80121e4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000be2:	bf00      	nop
 8000be4:	e7fd      	b.n	8000be2 <main+0x4a>
 8000be6:	bf00      	nop
 8000be8:	240001e8 	.word	0x240001e8
 8000bec:	08017c68 	.word	0x08017c68
 8000bf0:	080009a9 	.word	0x080009a9
 8000bf4:	2400027c 	.word	0x2400027c

08000bf8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b09c      	sub	sp, #112	@ 0x70
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c02:	224c      	movs	r2, #76	@ 0x4c
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f016 f820 	bl	8016c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2220      	movs	r2, #32
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f016 f81a 	bl	8016c4c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f004 f975 	bl	8004f08 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	4b38      	ldr	r3, [pc, #224]	@ (8000d04 <_Z18SystemClock_Configv+0x10c>)
 8000c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c26:	4a37      	ldr	r2, [pc, #220]	@ (8000d04 <_Z18SystemClock_Configv+0x10c>)
 8000c28:	f023 0301 	bic.w	r3, r3, #1
 8000c2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c2e:	4b35      	ldr	r3, [pc, #212]	@ (8000d04 <_Z18SystemClock_Configv+0x10c>)
 8000c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	4b33      	ldr	r3, [pc, #204]	@ (8000d08 <_Z18SystemClock_Configv+0x110>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c40:	4a31      	ldr	r2, [pc, #196]	@ (8000d08 <_Z18SystemClock_Configv+0x110>)
 8000c42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b2f      	ldr	r3, [pc, #188]	@ (8000d08 <_Z18SystemClock_Configv+0x110>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c54:	bf00      	nop
 8000c56:	4b2c      	ldr	r3, [pc, #176]	@ (8000d08 <_Z18SystemClock_Configv+0x110>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c62:	bf14      	ite	ne
 8000c64:	2301      	movne	r3, #1
 8000c66:	2300      	moveq	r3, #0
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d1f3      	bne.n	8000c56 <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c76:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c80:	2305      	movs	r3, #5
 8000c82:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000c84:	2360      	movs	r3, #96	@ 0x60
 8000c86:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c94:	2308      	movs	r3, #8
 8000c96:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f004 f969 	bl	8004f7c <HAL_RCC_OscConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	bf14      	ite	ne
 8000cb0:	2301      	movne	r3, #1
 8000cb2:	2300      	moveq	r3, #0
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 8000cba:	f000 fa39 	bl	8001130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cbe:	233f      	movs	r3, #63	@ 0x3f
 8000cc0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cca:	2308      	movs	r3, #8
 8000ccc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f004 fda4 	bl	8005830 <HAL_RCC_ClockConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	bf14      	ite	ne
 8000cee:	2301      	movne	r3, #1
 8000cf0:	2300      	moveq	r3, #0
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000cf8:	f000 fa1a 	bl	8001130 <Error_Handler>
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	3770      	adds	r7, #112	@ 0x70
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	58000400 	.word	0x58000400
 8000d08:	58024800 	.word	0x58024800

08000d0c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b0b0      	sub	sp, #192	@ 0xc0
 8000d10:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d12:	463b      	mov	r3, r7
 8000d14:	22c0      	movs	r2, #192	@ 0xc0
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f015 ff97 	bl	8016c4c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USART2
 8000d1e:	4a16      	ldr	r2, [pc, #88]	@ (8000d78 <_Z24PeriphCommonClock_Configv+0x6c>)
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000d2c:	230c      	movs	r3, #12
 8000d2e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d30:	2302      	movs	r3, #2
 8000d32:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d3c:	23c0      	movs	r3, #192	@ 0xc0
 8000d3e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000d40:	2320      	movs	r3, #32
 8000d42:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000d48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d4c:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	4618      	mov	r0, r3
 8000d56:	f005 f939 	bl	8005fcc <HAL_RCCEx_PeriphCLKConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	bf14      	ite	ne
 8000d60:	2301      	movne	r3, #1
 8000d62:	2300      	moveq	r3, #0
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <_Z24PeriphCommonClock_Configv+0x62>
  {
    Error_Handler();
 8000d6a:	f000 f9e1 	bl	8001130 <Error_Handler>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	37c0      	adds	r7, #192	@ 0xc0
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	00010002 	.word	0x00010002

08000d7c <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d80:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000d82:	4a0c      	ldr	r2, [pc, #48]	@ (8000db4 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8000d84:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d86:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000d92:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000d94:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d98:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d9a:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000da0:	4b03      	ldr	r3, [pc, #12]	@ (8000db0 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	2400008c 	.word	0x2400008c
 8000db4:	52007000 	.word	0x52007000

08000db8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	@ 0x28
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
 8000dd8:	615a      	str	r2, [r3, #20]
 8000dda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ddc:	4b27      	ldr	r3, [pc, #156]	@ (8000e7c <_ZL12MX_TIM3_Initv+0xc4>)
 8000dde:	4a28      	ldr	r2, [pc, #160]	@ (8000e80 <_ZL12MX_TIM3_Initv+0xc8>)
 8000de0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2399;
 8000de2:	4b26      	ldr	r3, [pc, #152]	@ (8000e7c <_ZL12MX_TIM3_Initv+0xc4>)
 8000de4:	f640 125f 	movw	r2, #2399	@ 0x95f
 8000de8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b24      	ldr	r3, [pc, #144]	@ (8000e7c <_ZL12MX_TIM3_Initv+0xc4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000df0:	4b22      	ldr	r3, [pc, #136]	@ (8000e7c <_ZL12MX_TIM3_Initv+0xc4>)
 8000df2:	2263      	movs	r2, #99	@ 0x63
 8000df4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df6:	4b21      	ldr	r3, [pc, #132]	@ (8000e7c <_ZL12MX_TIM3_Initv+0xc4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e7c <_ZL12MX_TIM3_Initv+0xc4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000e02:	481e      	ldr	r0, [pc, #120]	@ (8000e7c <_ZL12MX_TIM3_Initv+0xc4>)
 8000e04:	f009 fb1e 	bl	800a444 <HAL_TIM_OC_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	bf14      	ite	ne
 8000e0e:	2301      	movne	r3, #1
 8000e10:	2300      	moveq	r3, #0
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <_ZL12MX_TIM3_Initv+0x64>
  {
    Error_Handler();
 8000e18:	f000 f98a 	bl	8001130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4814      	ldr	r0, [pc, #80]	@ (8000e7c <_ZL12MX_TIM3_Initv+0xc4>)
 8000e2c:	f00a f892 	bl	800af54 <HAL_TIMEx_MasterConfigSynchronization>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	bf14      	ite	ne
 8000e36:	2301      	movne	r3, #1
 8000e38:	2300      	moveq	r3, #0
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <_ZL12MX_TIM3_Initv+0x8c>
  {
    Error_Handler();
 8000e40:	f000 f976 	bl	8001130 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e44:	2300      	movs	r3, #0
 8000e46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4808      	ldr	r0, [pc, #32]	@ (8000e7c <_ZL12MX_TIM3_Initv+0xc4>)
 8000e5c:	f009 fc68 	bl	800a730 <HAL_TIM_OC_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	bf14      	ite	ne
 8000e66:	2301      	movne	r3, #1
 8000e68:	2300      	moveq	r3, #0
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <_ZL12MX_TIM3_Initv+0xbc>
  {
    Error_Handler();
 8000e70:	f000 f95e 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	3728      	adds	r7, #40	@ 0x28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	24000108 	.word	0x24000108
 8000e80:	40000400 	.word	0x40000400

08000e84 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e88:	4b2c      	ldr	r3, [pc, #176]	@ (8000f3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000e8a:	4a2d      	ldr	r2, [pc, #180]	@ (8000f40 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000e90:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000e94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b29      	ldr	r3, [pc, #164]	@ (8000f3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b27      	ldr	r3, [pc, #156]	@ (8000f3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b26      	ldr	r3, [pc, #152]	@ (8000f3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b24      	ldr	r3, [pc, #144]	@ (8000f3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b23      	ldr	r3, [pc, #140]	@ (8000f3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b21      	ldr	r3, [pc, #132]	@ (8000f3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eba:	4b20      	ldr	r3, [pc, #128]	@ (8000f3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ecc:	481b      	ldr	r0, [pc, #108]	@ (8000f3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ece:	f00a f8ed 	bl	800b0ac <HAL_UART_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	bf14      	ite	ne
 8000ed8:	2301      	movne	r3, #1
 8000eda:	2300      	moveq	r3, #0
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8000ee2:	f000 f925 	bl	8001130 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4814      	ldr	r0, [pc, #80]	@ (8000f3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000eea:	f00d f8ea 	bl	800e0c2 <HAL_UARTEx_SetTxFifoThreshold>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	bf14      	ite	ne
 8000ef4:	2301      	movne	r3, #1
 8000ef6:	2300      	moveq	r3, #0
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8000efe:	f000 f917 	bl	8001130 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f02:	2100      	movs	r1, #0
 8000f04:	480d      	ldr	r0, [pc, #52]	@ (8000f3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f06:	f00d f91a 	bl	800e13e <HAL_UARTEx_SetRxFifoThreshold>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	bf14      	ite	ne
 8000f10:	2301      	movne	r3, #1
 8000f12:	2300      	moveq	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8000f1a:	f000 f909 	bl	8001130 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f1e:	4807      	ldr	r0, [pc, #28]	@ (8000f3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f20:	f00d f896 	bl	800e050 <HAL_UARTEx_DisableFifoMode>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	bf14      	ite	ne
 8000f2a:	2301      	movne	r3, #1
 8000f2c:	2300      	moveq	r3, #0
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8000f34:	f000 f8fc 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	24000154 	.word	0x24000154
 8000f40:	40004400 	.word	0x40004400

08000f44 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f48:	4b2c      	ldr	r3, [pc, #176]	@ (8000ffc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f4a:	4a2d      	ldr	r2, [pc, #180]	@ (8001000 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000f4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ffc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f56:	4b29      	ldr	r3, [pc, #164]	@ (8000ffc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f5c:	4b27      	ldr	r3, [pc, #156]	@ (8000ffc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f62:	4b26      	ldr	r3, [pc, #152]	@ (8000ffc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f68:	4b24      	ldr	r3, [pc, #144]	@ (8000ffc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6e:	4b23      	ldr	r3, [pc, #140]	@ (8000ffc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f74:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f7a:	4b20      	ldr	r3, [pc, #128]	@ (8000ffc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f80:	4b1e      	ldr	r3, [pc, #120]	@ (8000ffc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f86:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f8c:	481b      	ldr	r0, [pc, #108]	@ (8000ffc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f8e:	f00a f88d 	bl	800b0ac <HAL_UART_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	bf14      	ite	ne
 8000f98:	2301      	movne	r3, #1
 8000f9a:	2300      	moveq	r3, #0
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8000fa2:	f000 f8c5 	bl	8001130 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4814      	ldr	r0, [pc, #80]	@ (8000ffc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000faa:	f00d f88a 	bl	800e0c2 <HAL_UARTEx_SetTxFifoThreshold>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	bf14      	ite	ne
 8000fb4:	2301      	movne	r3, #1
 8000fb6:	2300      	moveq	r3, #0
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8000fbe:	f000 f8b7 	bl	8001130 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	480d      	ldr	r0, [pc, #52]	@ (8000ffc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fc6:	f00d f8ba 	bl	800e13e <HAL_UARTEx_SetRxFifoThreshold>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	bf14      	ite	ne
 8000fd0:	2301      	movne	r3, #1
 8000fd2:	2300      	moveq	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8000fda:	f000 f8a9 	bl	8001130 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fde:	4807      	ldr	r0, [pc, #28]	@ (8000ffc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fe0:	f00d f836 	bl	800e050 <HAL_UARTEx_DisableFifoMode>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	bf14      	ite	ne
 8000fea:	2301      	movne	r3, #1
 8000fec:	2300      	moveq	r3, #0
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000ff4:	f000 f89c 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	240001e8 	.word	0x240001e8
 8001000:	40004800 	.word	0x40004800

08001004 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	@ 0x28
 8001008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800101a:	4b39      	ldr	r3, [pc, #228]	@ (8001100 <_ZL12MX_GPIO_Initv+0xfc>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001020:	4a37      	ldr	r2, [pc, #220]	@ (8001100 <_ZL12MX_GPIO_Initv+0xfc>)
 8001022:	f043 0310 	orr.w	r3, r3, #16
 8001026:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800102a:	4b35      	ldr	r3, [pc, #212]	@ (8001100 <_ZL12MX_GPIO_Initv+0xfc>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001030:	f003 0310 	and.w	r3, r3, #16
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001038:	4b31      	ldr	r3, [pc, #196]	@ (8001100 <_ZL12MX_GPIO_Initv+0xfc>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103e:	4a30      	ldr	r2, [pc, #192]	@ (8001100 <_ZL12MX_GPIO_Initv+0xfc>)
 8001040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001044:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001048:	4b2d      	ldr	r3, [pc, #180]	@ (8001100 <_ZL12MX_GPIO_Initv+0xfc>)
 800104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001056:	4b2a      	ldr	r3, [pc, #168]	@ (8001100 <_ZL12MX_GPIO_Initv+0xfc>)
 8001058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105c:	4a28      	ldr	r2, [pc, #160]	@ (8001100 <_ZL12MX_GPIO_Initv+0xfc>)
 800105e:	f043 0308 	orr.w	r3, r3, #8
 8001062:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001066:	4b26      	ldr	r3, [pc, #152]	@ (8001100 <_ZL12MX_GPIO_Initv+0xfc>)
 8001068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001074:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <_ZL12MX_GPIO_Initv+0xfc>)
 8001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107a:	4a21      	ldr	r2, [pc, #132]	@ (8001100 <_ZL12MX_GPIO_Initv+0xfc>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001084:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <_ZL12MX_GPIO_Initv+0xfc>)
 8001086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <_ZL12MX_GPIO_Initv+0xfc>)
 8001094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001098:	4a19      	ldr	r2, [pc, #100]	@ (8001100 <_ZL12MX_GPIO_Initv+0xfc>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a2:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <_ZL12MX_GPIO_Initv+0xfc>)
 80010a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2108      	movs	r1, #8
 80010b4:	4813      	ldr	r0, [pc, #76]	@ (8001104 <_ZL12MX_GPIO_Initv+0x100>)
 80010b6:	f003 fef3 	bl	8004ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3_Pin */
  GPIO_InitStruct.Pin = PE3_Pin;
 80010ba:	2308      	movs	r3, #8
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PE3_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	480c      	ldr	r0, [pc, #48]	@ (8001104 <_ZL12MX_GPIO_Initv+0x100>)
 80010d2:	f003 fd35 	bl	8004b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010d6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 80010e8:	2306      	movs	r3, #6
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	4805      	ldr	r0, [pc, #20]	@ (8001108 <_ZL12MX_GPIO_Initv+0x104>)
 80010f4:	f003 fd24 	bl	8004b40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	@ 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	58024400 	.word	0x58024400
 8001104:	58021000 	.word	0x58021000
 8001108:	58020000 	.word	0x58020000

0800110c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a04      	ldr	r2, [pc, #16]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800111e:	f002 fdff 	bl	8003d20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40001000 	.word	0x40001000

08001130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
  {
		LED_Blink(500);
 8001134:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001138:	f7ff fba6 	bl	8000888 <_Z9LED_Blinkm>
 800113c:	e7fa      	b.n	8001134 <Error_Handler+0x4>
	...

08001140 <_Z41__static_initialization_and_destruction_0v>:
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
Encoder485 encoder485(&htim3, 1, &huart2);
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <_Z41__static_initialization_and_destruction_0v+0x14>)
 8001146:	2201      	movs	r2, #1
 8001148:	4903      	ldr	r1, [pc, #12]	@ (8001158 <_Z41__static_initialization_and_destruction_0v+0x18>)
 800114a:	4804      	ldr	r0, [pc, #16]	@ (800115c <_Z41__static_initialization_and_destruction_0v+0x1c>)
 800114c:	f000 fc52 	bl	80019f4 <_ZN10Encoder485C1EP17TIM_HandleTypeDefhP20__UART_HandleTypeDef>
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	24000154 	.word	0x24000154
 8001158:	24000108 	.word	0x24000108
 800115c:	24000700 	.word	0x24000700

08001160 <_ZN21ModbusAbsoluteEncoderD1Ev>:
    virtual ~ModbusAbsoluteEncoder() = default;
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	4a04      	ldr	r2, [pc, #16]	@ (800117c <_ZN21ModbusAbsoluteEncoderD1Ev+0x1c>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	08017d54 	.word	0x08017d54

08001180 <_ZN21ModbusAbsoluteEncoderD0Ev>:
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ffe9 	bl	8001160 <_ZN21ModbusAbsoluteEncoderD1Ev>
 800118e:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f015 f9b8 	bl	8016508 <_ZdlPvj>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <_ZN10Encoder485D1Ev>:

#include "ModbusAbsoluteEncoder.h"
#include "main.h"
#include <stdint.h>

class Encoder485 : public ModbusAbsoluteEncoder {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	4a05      	ldr	r2, [pc, #20]	@ (80011c4 <_ZN10Encoder485D1Ev+0x20>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ffd3 	bl	8001160 <_ZN21ModbusAbsoluteEncoderD1Ev>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	08017ca4 	.word	0x08017ca4

080011c8 <_ZN10Encoder485D0Ev>:
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ffe7 	bl	80011a4 <_ZN10Encoder485D1Ev>
 80011d6:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f015 f994 	bl	8016508 <_ZdlPvj>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <_Z41__static_initialization_and_destruction_1v>:
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
Encoder485 encoder485(&htim3, 1, &huart2);
 80011f0:	4802      	ldr	r0, [pc, #8]	@ (80011fc <_Z41__static_initialization_and_destruction_1v+0x10>)
 80011f2:	f7ff ffd7 	bl	80011a4 <_ZN10Encoder485D1Ev>
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	24000700 	.word	0x24000700

08001200 <_GLOBAL__sub_I_hsd1>:
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
 8001204:	f7ff ff9c 	bl	8001140 <_Z41__static_initialization_and_destruction_0v>
 8001208:	bd80      	pop	{r7, pc}

0800120a <_GLOBAL__sub_D_hsd1>:
 800120a:	b580      	push	{r7, lr}
 800120c:	af00      	add	r7, sp, #0
 800120e:	f7ff ffed 	bl	80011ec <_Z41__static_initialization_and_destruction_1v>
 8001212:	bd80      	pop	{r7, pc}

08001214 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800121c:	4a07      	ldr	r2, [pc, #28]	@ (800123c <RetargetInit+0x28>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001222:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <RetargetInit+0x2c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6898      	ldr	r0, [r3, #8]
 8001228:	2300      	movs	r3, #0
 800122a:	2202      	movs	r2, #2
 800122c:	2100      	movs	r1, #0
 800122e:	f015 fb5f 	bl	80168f0 <setvbuf>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	240008d0 	.word	0x240008d0
 8001240:	24000020 	.word	0x24000020

08001244 <_isatty>:

int _isatty(int fd) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	db04      	blt.n	800125c <_isatty+0x18>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b02      	cmp	r3, #2
 8001256:	dc01      	bgt.n	800125c <_isatty+0x18>
    return 1;
 8001258:	2301      	movs	r3, #1
 800125a:	e005      	b.n	8001268 <_isatty+0x24>

  errno = EBADF;
 800125c:	f015 fdb2 	bl	8016dc4 <__errno>
 8001260:	4603      	mov	r3, r0
 8001262:	2209      	movs	r2, #9
 8001264:	601a      	str	r2, [r3, #0]
  return 0;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <_write>:

int _write(int fd, char* ptr, int len) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 HAL_StatusTypeDef hstatus;

 if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d002      	beq.n	8001288 <_write+0x18>
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d111      	bne.n	80012ac <_write+0x3c>
   hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001288:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <_write+0x54>)
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	b29a      	uxth	r2, r3
 8001290:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	f009 ff59 	bl	800b14c <HAL_UART_Transmit>
 800129a:	4603      	mov	r3, r0
 800129c:	75fb      	strb	r3, [r7, #23]
   if (hstatus == HAL_OK)
 800129e:	7dfb      	ldrb	r3, [r7, #23]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <_write+0x38>
     return len;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	e008      	b.n	80012ba <_write+0x4a>
   else
     return EIO;
 80012a8:	2305      	movs	r3, #5
 80012aa:	e006      	b.n	80012ba <_write+0x4a>
 }
 errno = EBADF;
 80012ac:	f015 fd8a 	bl	8016dc4 <__errno>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2209      	movs	r2, #9
 80012b4:	601a      	str	r2, [r3, #0]
 return -1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	240008d0 	.word	0x240008d0

080012c8 <_close>:
//         ITM_SendChar(*ptr++);
//     }
//     return len;
// }

int _close(int fd) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db04      	blt.n	80012e0 <_close+0x18>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	dc01      	bgt.n	80012e0 <_close+0x18>
    return 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	e006      	b.n	80012ee <_close+0x26>

  errno = EBADF;
 80012e0:	f015 fd70 	bl	8016dc4 <__errno>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2209      	movs	r2, #9
 80012e8:	601a      	str	r2, [r3, #0]
  return -1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001302:	f015 fd5f 	bl	8016dc4 <__errno>
 8001306:	4603      	mov	r3, r0
 8001308:	2209      	movs	r2, #9
 800130a:	601a      	str	r2, [r3, #0]
  return -1;
 800130c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <_read>:

int _read(int fd, char* ptr, int len) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d110      	bne.n	800134c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800132a:	4b0e      	ldr	r3, [pc, #56]	@ (8001364 <_read+0x4c>)
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001332:	2201      	movs	r2, #1
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	f009 ff97 	bl	800b268 <HAL_UART_Receive>
 800133a:	4603      	mov	r3, r0
 800133c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800133e:	7dfb      	ldrb	r3, [r7, #23]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <_read+0x30>
      return 1;
 8001344:	2301      	movs	r3, #1
 8001346:	e008      	b.n	800135a <_read+0x42>
    else
      return EIO;
 8001348:	2305      	movs	r3, #5
 800134a:	e006      	b.n	800135a <_read+0x42>
  }
  errno = EBADF;
 800134c:	f015 fd3a 	bl	8016dc4 <__errno>
 8001350:	4603      	mov	r3, r0
 8001352:	2209      	movs	r2, #9
 8001354:	601a      	str	r2, [r3, #0]
  return -1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	240008d0 	.word	0x240008d0

08001368 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db08      	blt.n	800138a <_fstat+0x22>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b02      	cmp	r3, #2
 800137c:	dc05      	bgt.n	800138a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001384:	605a      	str	r2, [r3, #4]
    return 0;
 8001386:	2300      	movs	r3, #0
 8001388:	e005      	b.n	8001396 <_fstat+0x2e>
  }

  errno = EBADF;
 800138a:	f015 fd1b 	bl	8016dc4 <__errno>
 800138e:	4603      	mov	r3, r0
 8001390:	2209      	movs	r2, #9
 8001392:	601a      	str	r2, [r3, #0]
  return 0;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <HAL_MspInit+0x38>)
 80013a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013ac:	4a0a      	ldr	r2, [pc, #40]	@ (80013d8 <HAL_MspInit+0x38>)
 80013ae:	f043 0302 	orr.w	r3, r3, #2
 80013b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013b6:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <HAL_MspInit+0x38>)
 80013b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	210f      	movs	r1, #15
 80013c8:	f06f 0001 	mvn.w	r0, #1
 80013cc:	f002 fdb0 	bl	8003f30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	58024400 	.word	0x58024400

080013dc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	@ 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a2e      	ldr	r2, [pc, #184]	@ (80014b4 <HAL_SD_MspInit+0xd8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d155      	bne.n	80014aa <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013fe:	4b2e      	ldr	r3, [pc, #184]	@ (80014b8 <HAL_SD_MspInit+0xdc>)
 8001400:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001404:	4a2c      	ldr	r2, [pc, #176]	@ (80014b8 <HAL_SD_MspInit+0xdc>)
 8001406:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800140a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800140e:	4b2a      	ldr	r3, [pc, #168]	@ (80014b8 <HAL_SD_MspInit+0xdc>)
 8001410:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141c:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <HAL_SD_MspInit+0xdc>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001422:	4a25      	ldr	r2, [pc, #148]	@ (80014b8 <HAL_SD_MspInit+0xdc>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800142c:	4b22      	ldr	r3, [pc, #136]	@ (80014b8 <HAL_SD_MspInit+0xdc>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800143a:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <HAL_SD_MspInit+0xdc>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001440:	4a1d      	ldr	r2, [pc, #116]	@ (80014b8 <HAL_SD_MspInit+0xdc>)
 8001442:	f043 0308 	orr.w	r3, r3, #8
 8001446:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800144a:	4b1b      	ldr	r3, [pc, #108]	@ (80014b8 <HAL_SD_MspInit+0xdc>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001458:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800145c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800146a:	230c      	movs	r3, #12
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	4811      	ldr	r0, [pc, #68]	@ (80014bc <HAL_SD_MspInit+0xe0>)
 8001476:	f003 fb63 	bl	8004b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800147a:	2304      	movs	r3, #4
 800147c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800148a:	230c      	movs	r3, #12
 800148c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	480a      	ldr	r0, [pc, #40]	@ (80014c0 <HAL_SD_MspInit+0xe4>)
 8001496:	f003 fb53 	bl	8004b40 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2105      	movs	r1, #5
 800149e:	2031      	movs	r0, #49	@ 0x31
 80014a0:	f002 fd46 	bl	8003f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80014a4:	2031      	movs	r0, #49	@ 0x31
 80014a6:	f002 fd5d 	bl	8003f64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	@ 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	52007000 	.word	0x52007000
 80014b8:	58024400 	.word	0x58024400
 80014bc:	58020800 	.word	0x58020800
 80014c0:	58020c00 	.word	0x58020c00

080014c4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0e      	ldr	r2, [pc, #56]	@ (800150c <HAL_TIM_OC_MspInit+0x48>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d116      	bne.n	8001504 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <HAL_TIM_OC_MspInit+0x4c>)
 80014d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001510 <HAL_TIM_OC_MspInit+0x4c>)
 80014de:	f043 0302 	orr.w	r3, r3, #2
 80014e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <HAL_TIM_OC_MspInit+0x4c>)
 80014e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2105      	movs	r1, #5
 80014f8:	201d      	movs	r0, #29
 80014fa:	f002 fd19 	bl	8003f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014fe:	201d      	movs	r0, #29
 8001500:	f002 fd30 	bl	8003f64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40000400 	.word	0x40000400
 8001510:	58024400 	.word	0x58024400

08001514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	@ 0x30
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a3c      	ldr	r2, [pc, #240]	@ (8001624 <HAL_UART_MspInit+0x110>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d136      	bne.n	80015a4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001536:	4b3c      	ldr	r3, [pc, #240]	@ (8001628 <HAL_UART_MspInit+0x114>)
 8001538:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800153c:	4a3a      	ldr	r2, [pc, #232]	@ (8001628 <HAL_UART_MspInit+0x114>)
 800153e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001542:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001546:	4b38      	ldr	r3, [pc, #224]	@ (8001628 <HAL_UART_MspInit+0x114>)
 8001548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800154c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001550:	61bb      	str	r3, [r7, #24]
 8001552:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001554:	4b34      	ldr	r3, [pc, #208]	@ (8001628 <HAL_UART_MspInit+0x114>)
 8001556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800155a:	4a33      	ldr	r2, [pc, #204]	@ (8001628 <HAL_UART_MspInit+0x114>)
 800155c:	f043 0308 	orr.w	r3, r3, #8
 8001560:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001564:	4b30      	ldr	r3, [pc, #192]	@ (8001628 <HAL_UART_MspInit+0x114>)
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001572:	2360      	movs	r3, #96	@ 0x60
 8001574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001582:	2307      	movs	r3, #7
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	4619      	mov	r1, r3
 800158c:	4827      	ldr	r0, [pc, #156]	@ (800162c <HAL_UART_MspInit+0x118>)
 800158e:	f003 fad7 	bl	8004b40 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2105      	movs	r1, #5
 8001596:	2026      	movs	r0, #38	@ 0x26
 8001598:	f002 fcca 	bl	8003f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800159c:	2026      	movs	r0, #38	@ 0x26
 800159e:	f002 fce1 	bl	8003f64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015a2:	e03b      	b.n	800161c <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART3)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a21      	ldr	r2, [pc, #132]	@ (8001630 <HAL_UART_MspInit+0x11c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d136      	bne.n	800161c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001628 <HAL_UART_MspInit+0x114>)
 80015b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001628 <HAL_UART_MspInit+0x114>)
 80015b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015be:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <HAL_UART_MspInit+0x114>)
 80015c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <HAL_UART_MspInit+0x114>)
 80015ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015d2:	4a15      	ldr	r2, [pc, #84]	@ (8001628 <HAL_UART_MspInit+0x114>)
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <HAL_UART_MspInit+0x114>)
 80015de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015fc:	2307      	movs	r3, #7
 80015fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	4809      	ldr	r0, [pc, #36]	@ (800162c <HAL_UART_MspInit+0x118>)
 8001608:	f003 fa9a 	bl	8004b40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2105      	movs	r1, #5
 8001610:	2027      	movs	r0, #39	@ 0x27
 8001612:	f002 fc8d 	bl	8003f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001616:	2027      	movs	r0, #39	@ 0x27
 8001618:	f002 fca4 	bl	8003f64 <HAL_NVIC_EnableIRQ>
}
 800161c:	bf00      	nop
 800161e:	3730      	adds	r7, #48	@ 0x30
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40004400 	.word	0x40004400
 8001628:	58024400 	.word	0x58024400
 800162c:	58020c00 	.word	0x58020c00
 8001630:	40004800 	.word	0x40004800

08001634 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b090      	sub	sp, #64	@ 0x40
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b0f      	cmp	r3, #15
 8001640:	d827      	bhi.n	8001692 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001642:	2200      	movs	r2, #0
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	2036      	movs	r0, #54	@ 0x36
 8001648:	f002 fc72 	bl	8003f30 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800164c:	2036      	movs	r0, #54	@ 0x36
 800164e:	f002 fc89 	bl	8003f64 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001652:	4a29      	ldr	r2, [pc, #164]	@ (80016f8 <HAL_InitTick+0xc4>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001658:	4b28      	ldr	r3, [pc, #160]	@ (80016fc <HAL_InitTick+0xc8>)
 800165a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800165e:	4a27      	ldr	r2, [pc, #156]	@ (80016fc <HAL_InitTick+0xc8>)
 8001660:	f043 0310 	orr.w	r3, r3, #16
 8001664:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001668:	4b24      	ldr	r3, [pc, #144]	@ (80016fc <HAL_InitTick+0xc8>)
 800166a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001676:	f107 0210 	add.w	r2, r7, #16
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f004 fc61 	bl	8005f48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001688:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800168a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800168c:	2b00      	cmp	r3, #0
 800168e:	d106      	bne.n	800169e <HAL_InitTick+0x6a>
 8001690:	e001      	b.n	8001696 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e02b      	b.n	80016ee <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001696:	f004 fc2b 	bl	8005ef0 <HAL_RCC_GetPCLK1Freq>
 800169a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800169c:	e004      	b.n	80016a8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800169e:	f004 fc27 	bl	8005ef0 <HAL_RCC_GetPCLK1Freq>
 80016a2:	4603      	mov	r3, r0
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016aa:	4a15      	ldr	r2, [pc, #84]	@ (8001700 <HAL_InitTick+0xcc>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	0c9b      	lsrs	r3, r3, #18
 80016b2:	3b01      	subs	r3, #1
 80016b4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016b6:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <HAL_InitTick+0xd0>)
 80016b8:	4a13      	ldr	r2, [pc, #76]	@ (8001708 <HAL_InitTick+0xd4>)
 80016ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016bc:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <HAL_InitTick+0xd0>)
 80016be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001704 <HAL_InitTick+0xd0>)
 80016c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001704 <HAL_InitTick+0xd0>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <HAL_InitTick+0xd0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80016d6:	480b      	ldr	r0, [pc, #44]	@ (8001704 <HAL_InitTick+0xd0>)
 80016d8:	f008 fdda 	bl	800a290 <HAL_TIM_Base_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d104      	bne.n	80016ec <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80016e2:	4808      	ldr	r0, [pc, #32]	@ (8001704 <HAL_InitTick+0xd0>)
 80016e4:	f008 fe36 	bl	800a354 <HAL_TIM_Base_Start_IT>
 80016e8:	4603      	mov	r3, r0
 80016ea:	e000      	b.n	80016ee <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3740      	adds	r7, #64	@ 0x40
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	24000008 	.word	0x24000008
 80016fc:	58024400 	.word	0x58024400
 8001700:	431bde83 	.word	0x431bde83
 8001704:	240008d4 	.word	0x240008d4
 8001708:	40001000 	.word	0x40001000

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <NMI_Handler+0x4>

08001714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <MemManage_Handler+0x4>

08001724 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <UsageFault_Handler+0x4>

08001734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800174a:	481c      	ldr	r0, [pc, #112]	@ (80017bc <TIM3_IRQHandler+0x78>)
 800174c:	f008 fed1 	bl	800a4f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
#ifdef USE_MOBUSRTU_ENCODER
  // 使用任务通知替代直接调用编码器更新函数
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001750:	2300      	movs	r3, #0
 8001752:	603b      	str	r3, [r7, #0]

  // 发送任务通知给编码器任务
  if (encoderEventGroup != NULL) {
 8001754:	4b1a      	ldr	r3, [pc, #104]	@ (80017c0 <TIM3_IRQHandler+0x7c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d006      	beq.n	800176a <TIM3_IRQHandler+0x26>
    xEventGroupSetBitsFromISR(encoderEventGroup, ENCODER_TICK_EVENT_BIT, &xHigherPriorityTaskWoken);
 800175c:	4b18      	ldr	r3, [pc, #96]	@ (80017c0 <TIM3_IRQHandler+0x7c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	463a      	mov	r2, r7
 8001762:	2101      	movs	r1, #1
 8001764:	4618      	mov	r0, r3
 8001766:	f011 fa81 	bl	8012c6c <xEventGroupSetBitsFromISR>
  }

  // 中断频率统计
  tim3_irq_count++;
 800176a:	4b16      	ldr	r3, [pc, #88]	@ (80017c4 <TIM3_IRQHandler+0x80>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	3301      	adds	r3, #1
 8001770:	4a14      	ldr	r2, [pc, #80]	@ (80017c4 <TIM3_IRQHandler+0x80>)
 8001772:	6013      	str	r3, [r2, #0]
  uint32_t current_tick = HAL_GetTick();
 8001774:	f002 fae8 	bl	8003d48 <HAL_GetTick>
 8001778:	6078      	str	r0, [r7, #4]

  // 每1000毫秒（1秒）统计一次频率
  if (current_tick - tim3_last_tick >= 1000) {
 800177a:	4b13      	ldr	r3, [pc, #76]	@ (80017c8 <TIM3_IRQHandler+0x84>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001786:	d309      	bcc.n	800179c <TIM3_IRQHandler+0x58>
    tim3_frequency = tim3_irq_count;
 8001788:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <TIM3_IRQHandler+0x80>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0f      	ldr	r2, [pc, #60]	@ (80017cc <TIM3_IRQHandler+0x88>)
 800178e:	6013      	str	r3, [r2, #0]

    // 重置计数器和时间戳
    tim3_irq_count = 0;
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <TIM3_IRQHandler+0x80>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
    tim3_last_tick = current_tick;
 8001796:	4a0c      	ldr	r2, [pc, #48]	@ (80017c8 <TIM3_IRQHandler+0x84>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6013      	str	r3, [r2, #0]
  }

  // 如果需要进行任务切换，则执行
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d007      	beq.n	80017b2 <TIM3_IRQHandler+0x6e>
 80017a2:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <TIM3_IRQHandler+0x8c>)
 80017a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f3bf 8f4f 	dsb	sy
 80017ae:	f3bf 8f6f 	isb	sy
#endif
  /* USER CODE END TIM3_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	24000108 	.word	0x24000108
 80017c0:	240008c0 	.word	0x240008c0
 80017c4:	24000920 	.word	0x24000920
 80017c8:	24000924 	.word	0x24000924
 80017cc:	24000928 	.word	0x24000928
 80017d0:	e000ed04 	.word	0xe000ed04

080017d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <USART2_IRQHandler+0x10>)
 80017da:	f009 ffbb 	bl	800b754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	24000154 	.word	0x24000154

080017e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <USART3_IRQHandler+0x10>)
 80017ee:	f009 ffb1 	bl	800b754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	240001e8 	.word	0x240001e8

080017fc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <SDMMC1_IRQHandler+0x10>)
 8001802:	f007 fb51 	bl	8008ea8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2400008c 	.word	0x2400008c

08001810 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001814:	4802      	ldr	r0, [pc, #8]	@ (8001820 <TIM6_DAC_IRQHandler+0x10>)
 8001816:	f008 fe6c 	bl	800a4f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	240008d4 	.word	0x240008d4

08001824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800182c:	4a14      	ldr	r2, [pc, #80]	@ (8001880 <_sbrk+0x5c>)
 800182e:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <_sbrk+0x60>)
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001838:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <_sbrk+0x64>)
 8001842:	4a12      	ldr	r2, [pc, #72]	@ (800188c <_sbrk+0x68>)
 8001844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001846:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	429a      	cmp	r2, r3
 8001852:	d207      	bcs.n	8001864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001854:	f015 fab6 	bl	8016dc4 <__errno>
 8001858:	4603      	mov	r3, r0
 800185a:	220c      	movs	r2, #12
 800185c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001862:	e009      	b.n	8001878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001864:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186a:	4b07      	ldr	r3, [pc, #28]	@ (8001888 <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	4a05      	ldr	r2, [pc, #20]	@ (8001888 <_sbrk+0x64>)
 8001874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	24080000 	.word	0x24080000
 8001884:	00003000 	.word	0x00003000
 8001888:	2400092c 	.word	0x2400092c
 800188c:	240054b8 	.word	0x240054b8

08001890 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001894:	4b37      	ldr	r3, [pc, #220]	@ (8001974 <SystemInit+0xe4>)
 8001896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800189a:	4a36      	ldr	r2, [pc, #216]	@ (8001974 <SystemInit+0xe4>)
 800189c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018a4:	4b34      	ldr	r3, [pc, #208]	@ (8001978 <SystemInit+0xe8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	2b06      	cmp	r3, #6
 80018ae:	d807      	bhi.n	80018c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018b0:	4b31      	ldr	r3, [pc, #196]	@ (8001978 <SystemInit+0xe8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f023 030f 	bic.w	r3, r3, #15
 80018b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001978 <SystemInit+0xe8>)
 80018ba:	f043 0307 	orr.w	r3, r3, #7
 80018be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018c0:	4b2e      	ldr	r3, [pc, #184]	@ (800197c <SystemInit+0xec>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a2d      	ldr	r2, [pc, #180]	@ (800197c <SystemInit+0xec>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018cc:	4b2b      	ldr	r3, [pc, #172]	@ (800197c <SystemInit+0xec>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018d2:	4b2a      	ldr	r3, [pc, #168]	@ (800197c <SystemInit+0xec>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4929      	ldr	r1, [pc, #164]	@ (800197c <SystemInit+0xec>)
 80018d8:	4b29      	ldr	r3, [pc, #164]	@ (8001980 <SystemInit+0xf0>)
 80018da:	4013      	ands	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018de:	4b26      	ldr	r3, [pc, #152]	@ (8001978 <SystemInit+0xe8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d007      	beq.n	80018fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018ea:	4b23      	ldr	r3, [pc, #140]	@ (8001978 <SystemInit+0xe8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 030f 	bic.w	r3, r3, #15
 80018f2:	4a21      	ldr	r2, [pc, #132]	@ (8001978 <SystemInit+0xe8>)
 80018f4:	f043 0307 	orr.w	r3, r3, #7
 80018f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80018fa:	4b20      	ldr	r3, [pc, #128]	@ (800197c <SystemInit+0xec>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001900:	4b1e      	ldr	r3, [pc, #120]	@ (800197c <SystemInit+0xec>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001906:	4b1d      	ldr	r3, [pc, #116]	@ (800197c <SystemInit+0xec>)
 8001908:	2200      	movs	r2, #0
 800190a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800190c:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <SystemInit+0xec>)
 800190e:	4a1d      	ldr	r2, [pc, #116]	@ (8001984 <SystemInit+0xf4>)
 8001910:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001912:	4b1a      	ldr	r3, [pc, #104]	@ (800197c <SystemInit+0xec>)
 8001914:	4a1c      	ldr	r2, [pc, #112]	@ (8001988 <SystemInit+0xf8>)
 8001916:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001918:	4b18      	ldr	r3, [pc, #96]	@ (800197c <SystemInit+0xec>)
 800191a:	4a1c      	ldr	r2, [pc, #112]	@ (800198c <SystemInit+0xfc>)
 800191c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800191e:	4b17      	ldr	r3, [pc, #92]	@ (800197c <SystemInit+0xec>)
 8001920:	2200      	movs	r2, #0
 8001922:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001924:	4b15      	ldr	r3, [pc, #84]	@ (800197c <SystemInit+0xec>)
 8001926:	4a19      	ldr	r2, [pc, #100]	@ (800198c <SystemInit+0xfc>)
 8001928:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800192a:	4b14      	ldr	r3, [pc, #80]	@ (800197c <SystemInit+0xec>)
 800192c:	2200      	movs	r2, #0
 800192e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001930:	4b12      	ldr	r3, [pc, #72]	@ (800197c <SystemInit+0xec>)
 8001932:	4a16      	ldr	r2, [pc, #88]	@ (800198c <SystemInit+0xfc>)
 8001934:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001936:	4b11      	ldr	r3, [pc, #68]	@ (800197c <SystemInit+0xec>)
 8001938:	2200      	movs	r2, #0
 800193a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800193c:	4b0f      	ldr	r3, [pc, #60]	@ (800197c <SystemInit+0xec>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0e      	ldr	r2, [pc, #56]	@ (800197c <SystemInit+0xec>)
 8001942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001946:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <SystemInit+0xec>)
 800194a:	2200      	movs	r2, #0
 800194c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <SystemInit+0x100>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <SystemInit+0x104>)
 8001954:	4013      	ands	r3, r2
 8001956:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800195a:	d202      	bcs.n	8001962 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800195c:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <SystemInit+0x108>)
 800195e:	2201      	movs	r2, #1
 8001960:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001962:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <SystemInit+0x10c>)
 8001964:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001968:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00
 8001978:	52002000 	.word	0x52002000
 800197c:	58024400 	.word	0x58024400
 8001980:	eaf6ed7f 	.word	0xeaf6ed7f
 8001984:	02020200 	.word	0x02020200
 8001988:	01ff0000 	.word	0x01ff0000
 800198c:	01010280 	.word	0x01010280
 8001990:	5c001000 	.word	0x5c001000
 8001994:	ffff0000 	.word	0xffff0000
 8001998:	51008108 	.word	0x51008108
 800199c:	52004000 	.word	0x52004000

080019a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019a4:	f7ff ff74 	bl	8001890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a8:	480c      	ldr	r0, [pc, #48]	@ (80019dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019aa:	490d      	ldr	r1, [pc, #52]	@ (80019e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019ac:	4a0d      	ldr	r2, [pc, #52]	@ (80019e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019c0:	4c0a      	ldr	r4, [pc, #40]	@ (80019ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ce:	f015 f9ff 	bl	8016dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019d2:	f7ff f8e1 	bl	8000b98 <main>
  bx  lr
 80019d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019d8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019e0:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 80019e4:	08017eb8 	.word	0x08017eb8
  ldr r2, =_sbss
 80019e8:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 80019ec:	240054b4 	.word	0x240054b4

080019f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC3_IRQHandler>
	...

080019f4 <_ZN10Encoder485C1EP17TIM_HandleTypeDefhP20__UART_HandleTypeDef>:

#include "Encoder485.h"
#include <cmath>


Encoder485::Encoder485(TIM_HandleTypeDef *htim, uint8_t unit_id, UART_HandleTypeDef *huart)
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	4613      	mov	r3, r2
 8001a02:	71fb      	strb	r3, [r7, #7]
  : ModbusAbsoluteEncoder(htim, unit_id),
    huart(huart)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	79fa      	ldrb	r2, [r7, #7]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f001 fcde 	bl	80033cc <_ZN21ModbusAbsoluteEncoderC1EP17TIM_HandleTypeDefh>
 8001a10:	4a05      	ldr	r2, [pc, #20]	@ (8001a28 <_ZN10Encoder485C1EP17TIM_HandleTypeDefhP20__UART_HandleTypeDef+0x34>)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
{
}
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	08017ca4 	.word	0x08017ca4

08001a2c <_ZN10Encoder4854initEv>:

void Encoder485::init(){
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
    /* Modbus Master initialization */
  ModbusH.uModbusType = MB_MASTER;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2204      	movs	r2, #4
 8001a38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ModbusH.port = huart; 
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f8d3 21bc 	ldr.w	r2, [r3, #444]	@ 0x1bc
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	629a      	str	r2, [r3, #40]	@ 0x28
  ModbusH.u8id = 0; //master ID
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  ModbusH.u16timeOut = 1000;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a54:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
  ModbusH.EN_Port = NULL; // No RS485
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	631a      	str	r2, [r3, #48]	@ 0x30
  ModbusH.u16regs = ModbusDATA;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f503 72b6 	add.w	r2, r3, #364	@ 0x16c
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  ModbusH.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2208      	movs	r2, #8
 8001a6e:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
  ModbusH.xTypeHW = USART_HW;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
  
  ModbusAbsoluteEncoder::init();
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f001 fcff 	bl	8003480 <_ZN21ModbusAbsoluteEncoder4initEv>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <_ZN10Encoder48514constructQueryEP8modbus_t>:

bool Encoder485::constructQuery(modbus_t* modbusQuary) {
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	6039      	str	r1, [r7, #0]
    modbusQuary->u8id = unit_id;                      // 从站地址03
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 217c 	ldrb.w	r2, [r3, #380]	@ 0x17c
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	701a      	strb	r2, [r3, #0]
    modbusQuary->u8fct = MB_FC_READ_REGISTERS;  // 功能码03：读取保持寄存器
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	705a      	strb	r2, [r3, #1]
    modbusQuary->u16RegAdd = 0x0000;            // 寄存器起始地址0x00
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	805a      	strh	r2, [r3, #2]
    modbusQuary->u16CoilsNo = 2;                // 读取2个寄存器（0x00和0x01）
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	2202      	movs	r2, #2
 8001aae:	809a      	strh	r2, [r3, #4]
    modbusQuary->u16reg = ModbusDATA;           // 数据存储缓冲区
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f503 72b6 	add.w	r2, r3, #364	@ 0x16c
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	609a      	str	r2, [r3, #8]
    return true;
 8001aba:	2301      	movs	r3, #1
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <RingAdd>:
#endif

/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001ada:	4619      	mov	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	78fa      	ldrb	r2, [r7, #3]
 8001ae0:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001ae8:	3301      	adds	r3, #1
 8001aea:	425a      	negs	r2, r3
 8001aec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001af0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001af4:	bf58      	it	pl
 8001af6:	4253      	negpl	r3, r2
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001b06:	2b80      	cmp	r3, #128	@ 0x80
 8001b08:	d113      	bne.n	8001b32 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001b18:	3301      	adds	r3, #1
 8001b1a:	425a      	negs	r2, r3
 8001b1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b24:	bf58      	it	pl
 8001b26:	4253      	negpl	r3, r2
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8001b30:	e00b      	b.n	8001b4a <RingAdd+0x82>
		xRingBuffer->overflow = false;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
		xRingBuffer->u8available++;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001b40:	3301      	adds	r3, #1
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001b66:	461a      	mov	r2, r3
 8001b68:	6839      	ldr	r1, [r7, #0]
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f805 	bl	8001b7a <RingGetNBytes>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	4613      	mov	r3, r2
 8001b86:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <RingGetNBytes+0x1e>
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <RingGetNBytes+0x22>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e03e      	b.n	8001c1a <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	2b80      	cmp	r3, #128	@ 0x80
 8001ba0:	d901      	bls.n	8001ba6 <RingGetNBytes+0x2c>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e039      	b.n	8001c1a <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	75fb      	strb	r3, [r7, #23]
 8001baa:	e01b      	b.n	8001be4 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	7dfb      	ldrb	r3, [r7, #23]
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	4413      	add	r3, r2
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	5c52      	ldrb	r2, [r2, r1]
 8001bbe:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	425a      	negs	r2, r3
 8001bca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001bce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001bd2:	bf58      	it	pl
 8001bd4:	4253      	negpl	r3, r2
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8001bde:	7dfb      	ldrb	r3, [r7, #23]
 8001be0:	3301      	adds	r3, #1
 8001be2:	75fb      	strb	r3, [r7, #23]
 8001be4:	7dfa      	ldrb	r2, [r7, #23]
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d205      	bcs.n	8001bf8 <RingGetNBytes+0x7e>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001bf2:	7dfa      	ldrb	r2, [r7, #23]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d3d9      	bcc.n	8001bac <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	xRingBuffer->overflow = false;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
	RingClear(xRingBuffer);
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f805 	bl	8001c22 <RingClear>

	return uCounter;
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
xRingBuffer->u8end = 0;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
xRingBuffer->u8available = 0;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
xRingBuffer->overflow = false;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af02      	add	r7, sp, #8
 8001c5e:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8001c60:	4b45      	ldr	r3, [pc, #276]	@ (8001d78 <ModbusInit+0x120>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	f200 8083 	bhi.w	8001d70 <ModbusInit+0x118>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	33c0      	adds	r3, #192	@ 0xc0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ffd7 	bl	8001c22 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d109      	bne.n	8001c90 <ModbusInit+0x38>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8001c7c:	4a3f      	ldr	r2, [pc, #252]	@ (8001d7c <ModbusInit+0x124>)
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	483f      	ldr	r0, [pc, #252]	@ (8001d80 <ModbusInit+0x128>)
 8001c82:	f010 faea 	bl	801225a <osThreadNew>
 8001c86:	4602      	mov	r2, r0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001c8e:	e035      	b.n	8001cfc <ModbusInit+0xa4>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d130      	bne.n	8001cfa <ModbusInit+0xa2>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8001c98:	4a3a      	ldr	r2, [pc, #232]	@ (8001d84 <ModbusInit+0x12c>)
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	483a      	ldr	r0, [pc, #232]	@ (8001d88 <ModbusInit+0x130>)
 8001c9e:	f010 fadc 	bl	801225a <osThreadNew>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8001cb0:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8001cb8:	4a34      	ldr	r2, [pc, #208]	@ (8001d8c <ModbusInit+0x134>)
 8001cba:	9200      	str	r2, [sp, #0]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	4834      	ldr	r0, [pc, #208]	@ (8001d90 <ModbusInit+0x138>)
 8001cc0:	f013 fc54 	bl	801556c <xTimerCreate>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <ModbusInit+0x82>
		  {
			  while(1); //error creating timer, check heap and stack size
 8001cd6:	bf00      	nop
 8001cd8:	e7fd      	b.n	8001cd6 <ModbusInit+0x7e>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8001cda:	4a2e      	ldr	r2, [pc, #184]	@ (8001d94 <ModbusInit+0x13c>)
 8001cdc:	2110      	movs	r1, #16
 8001cde:	2002      	movs	r0, #2
 8001ce0:	f010 fcb6 	bl	8012650 <osMessageQueueNew>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

		  if(modH->QueueTelegramHandle == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d102      	bne.n	8001cfc <ModbusInit+0xa4>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 8001cf6:	bf00      	nop
 8001cf8:	e7fd      	b.n	8001cf6 <ModbusInit+0x9e>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8001cfa:	e7fe      	b.n	8001cfa <ModbusInit+0xa2>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <ModbusInit+0xb2>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8001d06:	bf00      	nop
 8001d08:	e7fd      	b.n	8001d06 <ModbusInit+0xae>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8001d10:	4a21      	ldr	r2, [pc, #132]	@ (8001d98 <ModbusInit+0x140>)
 8001d12:	9200      	str	r2, [sp, #0]
 8001d14:	2200      	movs	r2, #0
 8001d16:	2105      	movs	r1, #5
 8001d18:	4820      	ldr	r0, [pc, #128]	@ (8001d9c <ModbusInit+0x144>)
 8001d1a:	f013 fc27 	bl	801556c <xTimerCreate>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <ModbusInit+0xdc>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <ModbusInit+0xd8>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8001d34:	4a1a      	ldr	r2, [pc, #104]	@ (8001da0 <ModbusInit+0x148>)
 8001d36:	2101      	movs	r1, #1
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f010 fb46 	bl	80123ca <osSemaphoreNew>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	  if(modH->ModBusSphrHandle == NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <ModbusInit+0xfc>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <ModbusInit+0xf8>
	  }

	  mHandlers[numberHandlers] = modH;
 8001d54:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <ModbusInit+0x120>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4a12      	ldr	r2, [pc, #72]	@ (8001da4 <ModbusInit+0x14c>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8001d62:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <ModbusInit+0x120>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	3301      	adds	r3, #1
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4b03      	ldr	r3, [pc, #12]	@ (8001d78 <ModbusInit+0x120>)
 8001d6c:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8001d6e:	e000      	b.n	8001d72 <ModbusInit+0x11a>
	  while(1); //error no more Modbus handlers supported
 8001d70:	e7fe      	b.n	8001d70 <ModbusInit+0x118>
}
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	24000938 	.word	0x24000938
 8001d7c:	08017cec 	.word	0x08017cec
 8001d80:	08001f9d 	.word	0x08001f9d
 8001d84:	08017d10 	.word	0x08017d10
 8001d88:	08002531 	.word	0x08002531
 8001d8c:	08001f41 	.word	0x08001f41
 8001d90:	08017bd8 	.word	0x08017bd8
 8001d94:	08017cd4 	.word	0x08017cd4
 8001d98:	08001ebd 	.word	0x08001ebd
 8001d9c:	08017be8 	.word	0x08017be8
 8001da0:	08017d34 	.word	0x08017d34
 8001da4:	24000930 	.word	0x24000930

08001da8 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d010      	beq.n	8001ddc <ModbusStart+0x34>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d00b      	beq.n	8001ddc <ModbusStart+0x34>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d006      	beq.n	8001ddc <ModbusStart+0x34>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d001      	beq.n	8001ddc <ModbusStart+0x34>
	{

		while(1); //ERROR select the type of hardware
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <ModbusStart+0x30>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d101      	bne.n	8001dea <ModbusStart+0x42>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 8001de6:	bf00      	nop
 8001de8:	e7fd      	b.n	8001de6 <ModbusStart+0x3e>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d004      	beq.n	8001dfe <ModbusStart+0x56>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d140      	bne.n	8001e80 <ModbusStart+0xd8>
	{

	      if (modH->EN_Port != NULL )
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d007      	beq.n	8001e16 <ModbusStart+0x6e>
          {
              // return RS485 transceiver to receive mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68d8      	ldr	r0, [r3, #12]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	8a1b      	ldrh	r3, [r3, #16]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	4619      	mov	r1, r3
 8001e12:	f003 f845 	bl	8004ea0 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d106      	bne.n	8001e2c <ModbusStart+0x84>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <ModbusStart+0x84>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <ModbusStart+0x80>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8001e2c:	bf00      	nop
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f00a f910 	bl	800c058 <HAL_UART_GetState>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	d1f7      	bne.n	8001e2e <ModbusStart+0x86>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6858      	ldr	r0, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	33a6      	adds	r3, #166	@ 0xa6
 8001e46:	2201      	movs	r2, #1
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f009 fb69 	bl	800b520 <HAL_UART_Receive_IT>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <ModbusStart+0xb0>
          {
                while(1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <ModbusStart+0xac>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7a1b      	ldrb	r3, [r3, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <ModbusStart+0xc4>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d101      	bne.n	8001e6c <ModbusStart+0xc4>
          {
        	  while(1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <ModbusStart+0xc0>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	7a1b      	ldrb	r3, [r3, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <ModbusStart+0xd8>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d101      	bne.n	8001e80 <ModbusStart+0xd8>
          {
             	  while(1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <ModbusStart+0xd4>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 2093 	ldrb.w	r2, [r3, #147]	@ 0x93
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f8b3 209e 	ldrh.w	r2, [r3, #158]	@ 0x9e
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af02      	add	r7, sp, #8
 8001ec2:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	e02a      	b.n	8001f20 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 8001eca:	4a1b      	ldr	r2, [pc, #108]	@ (8001f38 <vTimerCallbackT35+0x7c>)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d11e      	bne.n	8001f1a <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 8001edc:	4a16      	ldr	r2, [pc, #88]	@ (8001f38 <vTimerCallbackT35+0x7c>)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d10c      	bne.n	8001f04 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8001eea:	4a13      	ldr	r2, [pc, #76]	@ (8001f38 <vTimerCallbackT35+0x7c>)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef2:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	2300      	movs	r3, #0
 8001efc:	2200      	movs	r2, #0
 8001efe:	2103      	movs	r1, #3
 8001f00:	f013 fb92 	bl	8015628 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8001f04:	4a0c      	ldr	r2, [pc, #48]	@ (8001f38 <vTimerCallbackT35+0x7c>)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0c:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8001f10:	2300      	movs	r3, #0
 8001f12:	2203      	movs	r2, #3
 8001f14:	2100      	movs	r1, #0
 8001f16:	f013 f8e3 	bl	80150e0 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <vTimerCallbackT35+0x80>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	dbce      	blt.n	8001eca <vTimerCallbackT35+0xe>
		}

	}
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	24000930 	.word	0x24000930
 8001f3c:	24000938 	.word	0x24000938

08001f40 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	e016      	b.n	8001f7c <vTimerCallbackTimeout+0x3c>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 8001f4e:	4a11      	ldr	r2, [pc, #68]	@ (8001f94 <vTimerCallbackTimeout+0x54>)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f56:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d10a      	bne.n	8001f76 <vTimerCallbackTimeout+0x36>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 8001f60:	4a0c      	ldr	r2, [pc, #48]	@ (8001f94 <vTimerCallbackTimeout+0x54>)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f68:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2203      	movs	r2, #3
 8001f70:	2111      	movs	r1, #17
 8001f72:	f013 f8b5 	bl	80150e0 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <vTimerCallbackTimeout+0x58>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	461a      	mov	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4293      	cmp	r3, r2
 8001f86:	dbe2      	blt.n	8001f4e <vTimerCallbackTimeout+0xe>
		}

	}

}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	24000930 	.word	0x24000930
 8001f98:	24000938 	.word	0x24000938

08001f9c <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d004      	beq.n	8001fc2 <StartTaskModbusSlave+0x26>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d116      	bne.n	8001ff0 <StartTaskModbusSlave+0x54>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 8001fc2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f013 f83e 	bl	8015048 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 fc8f 	bl	80028f0 <getRxBuffer>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b0c      	cmp	r3, #12
 8001fd6:	d10b      	bne.n	8001ff0 <StartTaskModbusSlave+0x54>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	220c      	movs	r2, #12
 8001fdc:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		  continue;
 8001fee:	e0c2      	b.n	8002176 <StartTaskModbusSlave+0x1da>
	  }

   }

   if (modH->u8BufferSize < 7)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d80b      	bhi.n	8002012 <StartTaskModbusSlave+0x76>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002006:	3301      	adds	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0

	  continue;
 8002010:	e0b1      	b.n	8002176 <StartTaskModbusSlave+0x1da>
    }

    //check broadcast mode
    modH->u8AddressMode = ADDRESS_NORMAL;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    if (modH->u8Buffer[ID] == ADDRESS_BROADCAST)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	7cdb      	ldrb	r3, [r3, #19]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d103      	bne.n	800202a <StartTaskModbusSlave+0x8e>
    {
        modH->u8AddressMode = ADDRESS_BROADCAST;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    }

   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id && modH->u8AddressMode != ADDRESS_BROADCAST)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	7cda      	ldrb	r2, [r3, #19]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	7a1b      	ldrb	r3, [r3, #8]
 8002032:	429a      	cmp	r2, r3
 8002034:	d005      	beq.n	8002042 <StartTaskModbusSlave+0xa6>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800203c:	2b00      	cmp	r3, #0
 800203e:	f040 8099 	bne.w	8002174 <StartTaskModbusSlave+0x1d8>
    	}
#endif
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 fc9c 	bl	8002980 <validateRequest>
 8002048:	4603      	mov	r3, r0
 800204a:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 800204c:	7afb      	ldrb	r3, [r7, #11]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00e      	beq.n	8002070 <StartTaskModbusSlave+0xd4>
	{
	    if (u8exception != ERR_TIME_OUT)
 8002052:	7afb      	ldrb	r3, [r7, #11]
 8002054:	2b11      	cmp	r3, #17
 8002056:	d007      	beq.n	8002068 <StartTaskModbusSlave+0xcc>
		{
		    buildException( u8exception, modH);
 8002058:	7afb      	ldrb	r3, [r7, #11]
 800205a:	68f9      	ldr	r1, [r7, #12]
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fe32 	bl	8002cc6 <buildException>
			sendTxBuffer(modH);
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fe4e 	bl	8002d04 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	7afa      	ldrb	r2, [r7, #11]
 800206c:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 800206e:	e082      	b.n	8002176 <StartTaskModbusSlave+0x1da>
	 }

	 modH->i8lastError = 0;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800207c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002080:	4618      	mov	r0, r3
 8002082:	f011 fb81 	bl	8013788 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	7d1b      	ldrb	r3, [r3, #20]
 800208a:	3b01      	subs	r3, #1
 800208c:	2b0f      	cmp	r3, #15
 800208e:	d863      	bhi.n	8002158 <StartTaskModbusSlave+0x1bc>
 8002090:	a201      	add	r2, pc, #4	@ (adr r2, 8002098 <StartTaskModbusSlave+0xfc>)
 8002092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002096:	bf00      	nop
 8002098:	080020d9 	.word	0x080020d9
 800209c:	080020d9 	.word	0x080020d9
 80020a0:	080020f5 	.word	0x080020f5
 80020a4:	080020f5 	.word	0x080020f5
 80020a8:	08002111 	.word	0x08002111
 80020ac:	08002123 	.word	0x08002123
 80020b0:	08002159 	.word	0x08002159
 80020b4:	08002159 	.word	0x08002159
 80020b8:	08002159 	.word	0x08002159
 80020bc:	08002159 	.word	0x08002159
 80020c0:	08002159 	.word	0x08002159
 80020c4:	08002159 	.word	0x08002159
 80020c8:	08002159 	.word	0x08002159
 80020cc:	08002159 	.word	0x08002159
 80020d0:	08002135 	.word	0x08002135
 80020d4:	08002147 	.word	0x08002147
	 {
		case MB_FC_READ_COILS:
		case MB_FC_READ_DISCRETE_INPUT:
			if (modH->u8AddressMode == ADDRESS_BROADCAST)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d03c      	beq.n	800215c <StartTaskModbusSlave+0x1c0>
			{
				/* broadcast mode should ignore read function */
				break;
			}
			modH->i8state = process_FC1(modH);
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 feb2 	bl	8002e4c <process_FC1>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 80020f2:	e036      	b.n	8002162 <StartTaskModbusSlave+0x1c6>
		case MB_FC_READ_INPUT_REGISTER:
		case MB_FC_READ_REGISTERS :
			if (modH->u8AddressMode == ADDRESS_BROADCAST)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d030      	beq.n	8002160 <StartTaskModbusSlave+0x1c4>
			{
				/* broadcast mode should ignore read function */
				break;
			}
			modH->i8state = process_FC3(modH);
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 ff59 	bl	8002fb6 <process_FC3>
 8002104:	4603      	mov	r3, r0
 8002106:	461a      	mov	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 800210e:	e028      	b.n	8002162 <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_COIL:
			modH->i8state = process_FC5(modH);
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 ffbb 	bl	800308c <process_FC5>
 8002116:	4603      	mov	r3, r0
 8002118:	461a      	mov	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002120:	e01f      	b.n	8002162 <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_REGISTER :
			modH->i8state = process_FC6(modH);
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f001 f80b 	bl	800313e <process_FC6>
 8002128:	4603      	mov	r3, r0
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002132:	e016      	b.n	8002162 <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_MULTIPLE_COILS:
			modH->i8state = process_FC15(modH);
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f001 f834 	bl	80031a2 <process_FC15>
 800213a:	4603      	mov	r3, r0
 800213c:	461a      	mov	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002144:	e00d      	b.n	8002162 <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_MULTIPLE_REGISTERS :
			modH->i8state = process_FC16(modH);
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f001 f8b9 	bl	80032be <process_FC16>
 800214c:	4603      	mov	r3, r0
 800214e:	461a      	mov	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002156:	e004      	b.n	8002162 <StartTaskModbusSlave+0x1c6>
		default:
			break;
 8002158:	bf00      	nop
 800215a:	e002      	b.n	8002162 <StartTaskModbusSlave+0x1c6>
				break;
 800215c:	bf00      	nop
 800215e:	e000      	b.n	8002162 <StartTaskModbusSlave+0x1c6>
				break;
 8002160:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 8002168:	2300      	movs	r3, #0
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	f010 fff9 	bl	8013164 <xQueueGenericSend>

	 continue;
 8002172:	e000      	b.n	8002176 <StartTaskModbusSlave+0x1da>
    	continue; // continue this is not for us
 8002174:	bf00      	nop
  {
 8002176:	e717      	b.n	8001fa8 <StartTaskModbusSlave+0xc>

08002178 <ModbusQuery>:
}



void ModbusQuery(modbusHandler_t * modH, modbus_t telegram )
{
 8002178:	b084      	sub	sp, #16
 800217a:	b580      	push	{r7, lr}
 800217c:	b084      	sub	sp, #16
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	f107 001c 	add.w	r0, r7, #28
 8002186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX tail Queue of Modbus
	if (modH->uModbusType == MB_MASTER)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b04      	cmp	r3, #4
 8002190:	d12b      	bne.n	80021ea <ModbusQuery+0x72>
	{
	telegram.u32CurrentTask = (uint32_t *) osThreadGetId();
 8002192:	f010 f8f4 	bl	801237e <osThreadGetId>
 8002196:	4603      	mov	r3, r0
 8002198:	62bb      	str	r3, [r7, #40]	@ 0x28
	// 检查是否在中断中运行
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
	if (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) {
 800219e:	4b17      	ldr	r3, [pc, #92]	@ (80021fc <ModbusQuery+0x84>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d015      	beq.n	80021d6 <ModbusQuery+0x5e>
		// 在中断中，使用FromISR版本
		xQueueSendToBackFromISR(modH->QueueTelegramHandle, &telegram, &xHigherPriorityTaskWoken);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 80021b0:	f107 020c 	add.w	r2, r7, #12
 80021b4:	f107 011c 	add.w	r1, r7, #28
 80021b8:	2300      	movs	r3, #0
 80021ba:	f011 f8d5 	bl	8013368 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d013      	beq.n	80021ec <ModbusQuery+0x74>
 80021c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <ModbusQuery+0x88>)
 80021c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	f3bf 8f4f 	dsb	sy
 80021d0:	f3bf 8f6f 	isb	sy
	}
	else{
//		LED_Toggle("red");
		while(1);// error a slave cannot send queries as a master
	}
}
 80021d4:	e00a      	b.n	80021ec <ModbusQuery+0x74>
		xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 80021dc:	f107 011c 	add.w	r1, r7, #28
 80021e0:	2300      	movs	r3, #0
 80021e2:	2200      	movs	r2, #0
 80021e4:	f010 ffbe 	bl	8013164 <xQueueGenericSend>
}
 80021e8:	e000      	b.n	80021ec <ModbusQuery+0x74>
		while(1);// error a slave cannot send queries as a master
 80021ea:	e7fe      	b.n	80021ea <ModbusQuery+0x72>
}
 80021ec:	bf00      	nop
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021f6:	b004      	add	sp, #16
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000ed00 	.word	0xe000ed00
 8002200:	e000ed04 	.word	0xe000ed04

08002204 <ModbusQueryV2>:

uint32_t ModbusQueryV2(modbusHandler_t * modH, modbus_t telegram )
{
 8002204:	b084      	sub	sp, #16
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	f107 0014 	add.w	r0, r7, #20
 8002212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX tail Queue of Modbus
	if (modH->uModbusType == MB_MASTER)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b04      	cmp	r3, #4
 800221c:	d113      	bne.n	8002246 <ModbusQueryV2+0x42>
	{
	telegram.u32CurrentTask = (uint32_t *) osThreadGetId();
 800221e:	f010 f8ae 	bl	801237e <osThreadGetId>
 8002222:	4603      	mov	r3, r0
 8002224:	623b      	str	r3, [r7, #32]
	xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 800222c:	f107 0114 	add.w	r1, r7, #20
 8002230:	2300      	movs	r3, #0
 8002232:	2200      	movs	r2, #0
 8002234:	f010 ff96 	bl	8013164 <xQueueGenericSend>

	return ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002238:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800223c:	2001      	movs	r0, #1
 800223e:	f012 ff03 	bl	8015048 <ulTaskNotifyTake>
 8002242:	4603      	mov	r3, r0
 8002244:	e000      	b.n	8002248 <ModbusQueryV2+0x44>

	}
	else{
//		LED_Toggle("red");
		while(1);// error a slave cannot send queries as a master
 8002246:	e7fe      	b.n	8002246 <ModbusQueryV2+0x42>
	}
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002252:	b004      	add	sp, #16
 8002254:	4770      	bx	lr
	...

08002258 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8002258:	b084      	sub	sp, #16
 800225a:	b580      	push	{r7, lr}
 800225c:	b084      	sub	sp, #16
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	f107 001c 	add.w	r0, r7, #28
 8002266:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002274:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002278:	4618      	mov	r0, r3
 800227a:	f011 fa85 	bl	8013788 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	7a1b      	ldrb	r3, [r3, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <SendQuery+0x32>
 8002286:	230a      	movs	r3, #10
 8002288:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f993 30a7 	ldrsb.w	r3, [r3, #167]	@ 0xa7
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <SendQuery+0x40>
 8002294:	230b      	movs	r3, #11
 8002296:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8002298:	7f3b      	ldrb	r3, [r7, #28]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <SendQuery+0x4c>
 800229e:	7f3b      	ldrb	r3, [r7, #28]
 80022a0:	2bf7      	cmp	r3, #247	@ 0xf7
 80022a2:	d901      	bls.n	80022a8 <SendQuery+0x50>
 80022a4:	2312      	movs	r3, #18
 80022a6:	73bb      	strb	r3, [r7, #14]


	if(error)
 80022a8:	7bbb      	ldrb	r3, [r7, #14]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00d      	beq.n	80022ca <SendQuery+0x72>
	{
		 modH->i8lastError = error;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7bba      	ldrb	r2, [r7, #14]
 80022b2:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 80022ba:	2300      	movs	r3, #0
 80022bc:	2200      	movs	r2, #0
 80022be:	2100      	movs	r1, #0
 80022c0:	f010 ff50 	bl	8013164 <xQueueGenericSend>
		 return error;
 80022c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022c8:	e12a      	b.n	8002520 <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 80022ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 80022d2:	7f3a      	ldrb	r2, [r7, #28]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 80022d8:	7f7a      	ldrb	r2, [r7, #29]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 80022de:	8bfb      	ldrh	r3, [r7, #30]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 80022ea:	8bfb      	ldrh	r3, [r7, #30]
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 80022f2:	7f7b      	ldrb	r3, [r7, #29]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	2b0f      	cmp	r3, #15
 80022f8:	f200 80ff 	bhi.w	80024fa <SendQuery+0x2a2>
 80022fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002304 <SendQuery+0xac>)
 80022fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002302:	bf00      	nop
 8002304:	08002345 	.word	0x08002345
 8002308:	08002345 	.word	0x08002345
 800230c:	08002345 	.word	0x08002345
 8002310:	08002345 	.word	0x08002345
 8002314:	08002363 	.word	0x08002363
 8002318:	08002385 	.word	0x08002385
 800231c:	080024fb 	.word	0x080024fb
 8002320:	080024fb 	.word	0x080024fb
 8002324:	080024fb 	.word	0x080024fb
 8002328:	080024fb 	.word	0x080024fb
 800232c:	080024fb 	.word	0x080024fb
 8002330:	080024fb 	.word	0x080024fb
 8002334:	080024fb 	.word	0x080024fb
 8002338:	080024fb 	.word	0x080024fb
 800233c:	080023a7 	.word	0x080023a7
 8002340:	08002465 	.word	0x08002465
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8002344:	8c3b      	ldrh	r3, [r7, #32]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	b29b      	uxth	r3, r3
 800234a:	b2da      	uxtb	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8002350:	8c3b      	ldrh	r3, [r7, #32]
 8002352:	b2da      	uxtb	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2206      	movs	r2, #6
 800235c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 8002360:	e0cb      	b.n	80024fa <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 8002362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <SendQuery+0x116>
 800236a:	22ff      	movs	r2, #255	@ 0xff
 800236c:	e000      	b.n	8002370 <SendQuery+0x118>
 800236e:	2200      	movs	r2, #0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2206      	movs	r2, #6
 800237e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 8002382:	e0ba      	b.n	80024fa <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	b29b      	uxth	r3, r3
 800238c:	b2da      	uxtb	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	b2da      	uxtb	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2206      	movs	r2, #6
 80023a0:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 80023a4:	e0a9      	b.n	80024fa <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 80023a6:	8c3b      	ldrh	r3, [r7, #32]
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 80023ae:	7a7b      	ldrb	r3, [r7, #9]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 80023b4:	8c3b      	ldrh	r3, [r7, #32]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <SendQuery+0x174>
	    {
	        u8bytesno++;
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	3301      	adds	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 80023c6:	7a7b      	ldrb	r3, [r7, #9]
 80023c8:	3301      	adds	r3, #1
 80023ca:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80023cc:	8c3b      	ldrh	r3, [r7, #32]
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80023d8:	8c3b      	ldrh	r3, [r7, #32]
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2207      	movs	r2, #7
 80023ea:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	81bb      	strh	r3, [r7, #12]
 80023f2:	e031      	b.n	8002458 <SendQuery+0x200>
	    {
	        if(i%2)
 80023f4:	89bb      	ldrh	r3, [r7, #12]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00f      	beq.n	8002420 <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 8002400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002402:	89bb      	ldrh	r3, [r7, #12]
 8002404:	085b      	lsrs	r3, r3, #1
 8002406:	b29b      	uxth	r3, r3
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	881a      	ldrh	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002414:	4619      	mov	r1, r3
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	440b      	add	r3, r1
 800241c:	74da      	strb	r2, [r3, #19]
 800241e:	e010      	b.n	8002442 <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 8002420:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002422:	89bb      	ldrh	r3, [r7, #12]
 8002424:	085b      	lsrs	r3, r3, #1
 8002426:	b29b      	uxth	r3, r3
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4413      	add	r3, r2
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	b29a      	uxth	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002438:	4619      	mov	r1, r3
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	440b      	add	r3, r1
 8002440:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002448:	3301      	adds	r3, #1
 800244a:	b2da      	uxtb	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8002452:	89bb      	ldrh	r3, [r7, #12]
 8002454:	3301      	adds	r3, #1
 8002456:	81bb      	strh	r3, [r7, #12]
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	b29b      	uxth	r3, r3
 800245c:	89ba      	ldrh	r2, [r7, #12]
 800245e:	429a      	cmp	r2, r3
 8002460:	d3c8      	bcc.n	80023f4 <SendQuery+0x19c>
	    }
	    break;
 8002462:	e04a      	b.n	80024fa <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8002464:	8c3b      	ldrh	r3, [r7, #32]
 8002466:	0a1b      	lsrs	r3, r3, #8
 8002468:	b29b      	uxth	r3, r3
 800246a:	b2da      	uxtb	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8002470:	8c3b      	ldrh	r3, [r7, #32]
 8002472:	b2da      	uxtb	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8002478:	8c3b      	ldrh	r3, [r7, #32]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	b2da      	uxtb	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2207      	movs	r2, #7
 8002488:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800248c:	2300      	movs	r3, #0
 800248e:	817b      	strh	r3, [r7, #10]
 8002490:	e02e      	b.n	80024f0 <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 8002492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002494:	897b      	ldrh	r3, [r7, #10]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4413      	add	r3, r2
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	b29a      	uxth	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80024a6:	4619      	mov	r1, r3
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	440b      	add	r3, r1
 80024ae:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80024b6:	3301      	adds	r3, #1
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 80024c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c2:	897b      	ldrh	r3, [r7, #10]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4413      	add	r3, r2
 80024c8:	881a      	ldrh	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80024d0:	4619      	mov	r1, r3
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	440b      	add	r3, r1
 80024d8:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80024e0:	3301      	adds	r3, #1
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 80024ea:	897b      	ldrh	r3, [r7, #10]
 80024ec:	3301      	adds	r3, #1
 80024ee:	817b      	strh	r3, [r7, #10]
 80024f0:	8c3b      	ldrh	r3, [r7, #32]
 80024f2:	897a      	ldrh	r2, [r7, #10]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d3cc      	bcc.n	8002492 <SendQuery+0x23a>
	    }
	    break;
 80024f8:	bf00      	nop
	}


	sendTxBuffer(modH);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fc02 	bl	8002d04 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 8002506:	2300      	movs	r3, #0
 8002508:	2200      	movs	r2, #0
 800250a:	2100      	movs	r1, #0
 800250c:	f010 fe2a 	bl	8013164 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
	modH->i8lastError = 0;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	749a      	strb	r2, [r3, #18]
	return 0;
 800251e:	2300      	movs	r3, #0


}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800252a:	b004      	add	sp, #16
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop

08002530 <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	@ 0x30
 8002534:	af02      	add	r7, sp, #8
 8002536:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	627b      	str	r3, [r7, #36]	@ 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002542:	f107 010c 	add.w	r1, r7, #12
 8002546:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800254a:	4618      	mov	r0, r3
 800254c:	f011 f83a 	bl	80135c4 <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     /*Wait period of silence between modbus frame */
	 if(modH->port->Init.BaudRate <= 19200)
 8002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 800255a:	d80b      	bhi.n	8002574 <StartTaskModbusMaster+0x44>
	 	osDelay((int)(35000/modH->port->Init.BaudRate) + 2);
 800255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f648 02b8 	movw	r2, #35000	@ 0x88b8
 8002566:	fbb2 f3f3 	udiv	r3, r2, r3
 800256a:	3302      	adds	r3, #2
 800256c:	4618      	mov	r0, r3
 800256e:	f00f ff11 	bl	8012394 <osDelay>
 8002572:	e002      	b.n	800257a <StartTaskModbusMaster+0x4a>
	 else
	 	osDelay(3);
 8002574:	2003      	movs	r0, #3
 8002576:	f00f ff0d 	bl	8012394 <osDelay>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	f107 030c 	add.w	r3, r7, #12
 8002582:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002584:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002586:	f7ff fe67 	bl	8002258 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800258a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800258e:	2001      	movs	r0, #1
 8002590:	f012 fd5a 	bl	8015048 <ulTaskNotifyTake>
 8002594:	6238      	str	r0, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 8002596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002598:	2200      	movs	r2, #0
 800259a:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d017      	beq.n	80025d2 <StartTaskModbusMaster+0xa2>
      {
    	  modH->i8state = COM_IDLE;
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 80025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ac:	2211      	movs	r2, #17
 80025ae:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 80025b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80025b6:	3301      	adds	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80025c0:	69b8      	ldr	r0, [r7, #24]
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	7c9b      	ldrb	r3, [r3, #18]
 80025c6:	4619      	mov	r1, r3
 80025c8:	2300      	movs	r3, #0
 80025ca:	2203      	movs	r2, #3
 80025cc:	f012 fd88 	bl	80150e0 <xTaskGenericNotify>
    	  continue;
 80025d0:	e096      	b.n	8002700 <StartTaskModbusMaster+0x1d0>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 80025d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025d4:	f000 f98c 	bl	80028f0 <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80025de:	2b05      	cmp	r3, #5
 80025e0:	d817      	bhi.n	8002612 <StartTaskModbusMaster+0xe2>

		  modH->i8state = COM_IDLE;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	220f      	movs	r2, #15
 80025ee:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80025f6:	3301      	adds	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fc:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8002600:	69b8      	ldr	r0, [r7, #24]
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	7c9b      	ldrb	r3, [r3, #18]
 8002606:	4619      	mov	r1, r3
 8002608:	2300      	movs	r3, #0
 800260a:	2203      	movs	r2, #3
 800260c:	f012 fd68 	bl	80150e0 <xTaskGenericNotify>
		  continue;
 8002610:	e076      	b.n	8002700 <StartTaskModbusMaster+0x1d0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8002612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002614:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 8002618:	2300      	movs	r3, #0
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	2300      	movs	r3, #0
 800261e:	2200      	movs	r2, #0
 8002620:	2103      	movs	r1, #3
 8002622:	f013 f801 	bl	8015628 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 8002626:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002628:	f000 f8f2 	bl	8002810 <validateAnswer>
 800262c:	4603      	mov	r3, r0
 800262e:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 8002630:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00f      	beq.n	8002658 <StartTaskModbusMaster+0x128>
	  {
		 modH->i8state = COM_IDLE;
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	2200      	movs	r2, #0
 800263c:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
         modH->i8lastError = u8exception;
 8002640:	7ffa      	ldrb	r2, [r7, #31]
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8002646:	69b8      	ldr	r0, [r7, #24]
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	7c9b      	ldrb	r3, [r3, #18]
 800264c:	4619      	mov	r1, r3
 800264e:	2300      	movs	r3, #0
 8002650:	2203      	movs	r2, #3
 8002652:	f012 fd45 	bl	80150e0 <xTaskGenericNotify>
	     continue;
 8002656:	e053      	b.n	8002700 <StartTaskModbusMaster+0x1d0>
	  }

	  modH->i8lastError = u8exception;
 8002658:	7ffa      	ldrb	r2, [r7, #31]
 800265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265c:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002664:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002668:	4618      	mov	r0, r3
 800266a:	f011 f88d 	bl	8013788 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	7d1b      	ldrb	r3, [r3, #20]
 8002672:	3b01      	subs	r3, #1
 8002674:	2b0f      	cmp	r3, #15
 8002676:	d82b      	bhi.n	80026d0 <StartTaskModbusMaster+0x1a0>
 8002678:	a201      	add	r2, pc, #4	@ (adr r2, 8002680 <StartTaskModbusMaster+0x150>)
 800267a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267e:	bf00      	nop
 8002680:	080026c1 	.word	0x080026c1
 8002684:	080026c1 	.word	0x080026c1
 8002688:	080026c9 	.word	0x080026c9
 800268c:	080026c9 	.word	0x080026c9
 8002690:	080026d1 	.word	0x080026d1
 8002694:	080026d1 	.word	0x080026d1
 8002698:	080026d1 	.word	0x080026d1
 800269c:	080026d1 	.word	0x080026d1
 80026a0:	080026d1 	.word	0x080026d1
 80026a4:	080026d1 	.word	0x080026d1
 80026a8:	080026d1 	.word	0x080026d1
 80026ac:	080026d1 	.word	0x080026d1
 80026b0:	080026d1 	.word	0x080026d1
 80026b4:	080026d1 	.word	0x080026d1
 80026b8:	080026d1 	.word	0x080026d1
 80026bc:	080026d1 	.word	0x080026d1
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 80026c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026c2:	f000 f81f 	bl	8002704 <get_FC1>
	      break;
 80026c6:	e004      	b.n	80026d2 <StartTaskModbusMaster+0x1a2>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 80026c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026ca:	f000 f872 	bl	80027b2 <get_FC3>
	      break;
 80026ce:	e000      	b.n	80026d2 <StartTaskModbusMaster+0x1a2>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 80026d0:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 80026d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7

	  if (modH->i8lastError ==0) // no error, we use OP_OK_QUERY, since we need to use a different value than 0 to detect the timeout
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	7c9b      	ldrb	r3, [r3, #18]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10d      	bne.n	80026fe <StartTaskModbusMaster+0x1ce>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 80026e8:	2300      	movs	r3, #0
 80026ea:	2200      	movs	r2, #0
 80026ec:	2100      	movs	r1, #0
 80026ee:	f010 fd39 	bl	8013164 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, OP_OK_QUERY, eSetValueWithOverwrite);
 80026f2:	69b8      	ldr	r0, [r7, #24]
 80026f4:	2300      	movs	r3, #0
 80026f6:	2203      	movs	r2, #3
 80026f8:	2114      	movs	r1, #20
 80026fa:	f012 fcf1 	bl	80150e0 <xTaskGenericNotify>
	  }


	  continue;
 80026fe:	bf00      	nop
  {
 8002700:	e71c      	b.n	800253c <StartTaskModbusMaster+0xc>
 8002702:	bf00      	nop

08002704 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800270c:	2303      	movs	r3, #3
 800270e:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	e043      	b.n	800279e <get_FC1+0x9a>

        if(i%2)
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d01c      	beq.n	800275c <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	7bbb      	ldrb	r3, [r7, #14]
 8002726:	4413      	add	r3, r2
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	4413      	add	r3, r2
 800272c:	7cd8      	ldrb	r0, [r3, #19]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	085b      	lsrs	r3, r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4413      	add	r3, r2
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	b2d9      	uxtb	r1, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	085b      	lsrs	r3, r3, #1
 800274c:	b2db      	uxtb	r3, r3
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	18d4      	adds	r4, r2, r3
 8002752:	f000 fa5f 	bl	8002c14 <word>
 8002756:	4603      	mov	r3, r0
 8002758:	8023      	strh	r3, [r4, #0]
 800275a:	e01d      	b.n	8002798 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	085b      	lsrs	r3, r3, #1
 8002766:	b2db      	uxtb	r3, r3
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4413      	add	r3, r2
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	0a1b      	lsrs	r3, r3, #8
 8002770:	b29b      	uxth	r3, r3
 8002772:	b2d8      	uxtb	r0, r3
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	7bbb      	ldrb	r3, [r7, #14]
 8002778:	4413      	add	r3, r2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	7cd9      	ldrb	r1, [r3, #19]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	085b      	lsrs	r3, r3, #1
 800278a:	b2db      	uxtb	r3, r3
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	18d4      	adds	r4, r2, r3
 8002790:	f000 fa40 	bl	8002c14 <word>
 8002794:	4603      	mov	r3, r0
 8002796:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	3301      	adds	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	7d5b      	ldrb	r3, [r3, #21]
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d3b6      	bcc.n	8002716 <get_FC1+0x12>
        }

     }
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd90      	pop	{r4, r7, pc}

080027b2 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 80027b2:	b590      	push	{r4, r7, lr}
 80027b4:	b085      	sub	sp, #20
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 80027ba:	2303      	movs	r3, #3
 80027bc:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 80027be:	2300      	movs	r3, #0
 80027c0:	73bb      	strb	r3, [r7, #14]
 80027c2:	e018      	b.n	80027f6 <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	7cd8      	ldrb	r0, [r3, #19]
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	3301      	adds	r3, #1
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	4413      	add	r3, r2
 80027d4:	7cd9      	ldrb	r1, [r3, #19]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80027dc:	7bbb      	ldrb	r3, [r7, #14]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	18d4      	adds	r4, r2, r3
 80027e2:	f000 fa17 	bl	8002c14 <word>
 80027e6:	4603      	mov	r3, r0
 80027e8:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	3302      	adds	r3, #2
 80027ee:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 80027f0:	7bbb      	ldrb	r3, [r7, #14]
 80027f2:	3301      	adds	r3, #1
 80027f4:	73bb      	strb	r3, [r7, #14]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	7d5b      	ldrb	r3, [r3, #21]
 80027fa:	085b      	lsrs	r3, r3, #1
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	7bba      	ldrb	r2, [r7, #14]
 8002800:	429a      	cmp	r2, r3
 8002802:	d3df      	bcc.n	80027c4 <get_FC3+0x12>
    }
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	bd90      	pop	{r4, r7, pc}
	...

08002810 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800281e:	3b02      	subs	r3, #2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	4413      	add	r3, r2
 8002824:	7cdb      	ldrb	r3, [r3, #19]
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8002826:	b21b      	sxth	r3, r3
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	b21a      	sxth	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002832:	3b01      	subs	r3, #1
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	440b      	add	r3, r1
 8002838:	7cdb      	ldrb	r3, [r3, #19]
 800283a:	b21b      	sxth	r3, r3
 800283c:	4313      	orrs	r3, r2
 800283e:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 8002840:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f103 0213 	add.w	r2, r3, #19
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800284e:	3b02      	subs	r3, #2
 8002850:	b2db      	uxtb	r3, r3
 8002852:	4619      	mov	r1, r3
 8002854:	4610      	mov	r0, r2
 8002856:	f000 f9f0 	bl	8002c3a <calcCRC>
 800285a:	4603      	mov	r3, r0
 800285c:	461a      	mov	r2, r3
 800285e:	89bb      	ldrh	r3, [r7, #12]
 8002860:	4293      	cmp	r3, r2
 8002862:	d009      	beq.n	8002878 <validateAnswer+0x68>
    {
    	modH->u16errCnt ++;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800286a:	3301      	adds	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return ERR_BAD_CRC;
 8002874:	230d      	movs	r3, #13
 8002876:	e034      	b.n	80028e2 <validateAnswer+0xd2>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	7d1b      	ldrb	r3, [r3, #20]
 800287c:	b25b      	sxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	da09      	bge.n	8002896 <validateAnswer+0x86>
    {
    	modH->u16errCnt ++;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002888:	3301      	adds	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return ERR_EXCEPTION;
 8002892:	230e      	movs	r3, #14
 8002894:	e025      	b.n	80028e2 <validateAnswer+0xd2>
    }

    // check fct code
    bool isSupported = false;
 8002896:	2300      	movs	r3, #0
 8002898:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800289a:	2300      	movs	r3, #0
 800289c:	73bb      	strb	r3, [r7, #14]
 800289e:	e00c      	b.n	80028ba <validateAnswer+0xaa>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 80028a0:	7bbb      	ldrb	r3, [r7, #14]
 80028a2:	4a12      	ldr	r2, [pc, #72]	@ (80028ec <validateAnswer+0xdc>)
 80028a4:	5cd2      	ldrb	r2, [r2, r3]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	7d1b      	ldrb	r3, [r3, #20]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d102      	bne.n	80028b4 <validateAnswer+0xa4>
        {
            isSupported = 1;
 80028ae:	2301      	movs	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
            break;
 80028b2:	e005      	b.n	80028c0 <validateAnswer+0xb0>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80028b4:	7bbb      	ldrb	r3, [r7, #14]
 80028b6:	3301      	adds	r3, #1
 80028b8:	73bb      	strb	r3, [r7, #14]
 80028ba:	7bbb      	ldrb	r3, [r7, #14]
 80028bc:	2b07      	cmp	r3, #7
 80028be:	d9ef      	bls.n	80028a0 <validateAnswer+0x90>
        }
    }
    if (!isSupported)
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	f083 0301 	eor.w	r3, r3, #1
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d009      	beq.n	80028e0 <validateAnswer+0xd0>
    {
    	modH->u16errCnt ++;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80028d2:	3301      	adds	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return EXC_FUNC_CODE;
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <validateAnswer+0xd2>
    }

    return 0; // OK, no exception code thrown
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	08017d44 	.word	0x08017d44

080028f0 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d104      	bne.n	800290c <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4618      	mov	r0, r3
 8002908:	f008 fe56 	bl	800b5b8 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 8002912:	2b00      	cmp	r3, #0
 8002914:	d007      	beq.n	8002926 <getRxBuffer+0x36>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	33c0      	adds	r3, #192	@ 0xc0
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff f981 	bl	8001c22 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 8002920:	230c      	movs	r3, #12
 8002922:	81fb      	strh	r3, [r7, #14]
 8002924:	e019      	b.n	800295a <getRxBuffer+0x6a>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3313      	adds	r3, #19
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f7ff f90f 	bl	8001b56 <RingGetAllBytes>
 8002938:	4603      	mov	r3, r0
 800293a:	461a      	mov	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
		modH->u16InCnt++;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8002948:	3301      	adds	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
		i16result = modH->u8BufferSize;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002958:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8002960:	2b01      	cmp	r3, #1
 8002962:	d107      	bne.n	8002974 <getRxBuffer+0x84>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6858      	ldr	r0, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	33a6      	adds	r3, #166	@ 0xa6
 800296c:	2201      	movs	r2, #1
 800296e:	4619      	mov	r1, r3
 8002970:	f008 fdd6 	bl	800b520 <HAL_UART_Receive_IT>
	}

    return i16result;
 8002974:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800298e:	3b02      	subs	r3, #2
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	4413      	add	r3, r2
 8002994:	7cdb      	ldrb	r3, [r3, #19]
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8002996:	b21b      	sxth	r3, r3
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	b21a      	sxth	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80029a2:	3b01      	subs	r3, #1
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	440b      	add	r3, r1
 80029a8:	7cdb      	ldrb	r3, [r3, #19]
 80029aa:	b21b      	sxth	r3, r3
 80029ac:	4313      	orrs	r3, r2
 80029ae:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80029b0:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f103 0213 	add.w	r2, r3, #19
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80029be:	3b02      	subs	r3, #2
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	4619      	mov	r1, r3
 80029c4:	4610      	mov	r0, r2
 80029c6:	f000 f938 	bl	8002c3a <calcCRC>
 80029ca:	4603      	mov	r3, r0
 80029cc:	461a      	mov	r2, r3
 80029ce:	893b      	ldrh	r3, [r7, #8]
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d009      	beq.n	80029e8 <validateRequest+0x68>
	    {
	       		modH->u16errCnt ++;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80029da:	3301      	adds	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	       		return ERR_BAD_CRC;
 80029e4:	230d      	movs	r3, #13
 80029e6:	e10e      	b.n	8002c06 <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80029ec:	2300      	movs	r3, #0
 80029ee:	73bb      	strb	r3, [r7, #14]
 80029f0:	e00c      	b.n	8002a0c <validateRequest+0x8c>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 80029f2:	7bbb      	ldrb	r3, [r7, #14]
 80029f4:	4a86      	ldr	r2, [pc, #536]	@ (8002c10 <validateRequest+0x290>)
 80029f6:	5cd2      	ldrb	r2, [r2, r3]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	7d1b      	ldrb	r3, [r3, #20]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d102      	bne.n	8002a06 <validateRequest+0x86>
	        {
	            isSupported = 1;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
	            break;
 8002a04:	e005      	b.n	8002a12 <validateRequest+0x92>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8002a06:	7bbb      	ldrb	r3, [r7, #14]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	73bb      	strb	r3, [r7, #14]
 8002a0c:	7bbb      	ldrb	r3, [r7, #14]
 8002a0e:	2b07      	cmp	r3, #7
 8002a10:	d9ef      	bls.n	80029f2 <validateRequest+0x72>
	        }
	    }
	    if (!isSupported)
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	f083 0301 	eor.w	r3, r3, #1
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d009      	beq.n	8002a32 <validateRequest+0xb2>
	    {
	    	modH->u16errCnt ++;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002a24:	3301      	adds	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	        return EXC_FUNC_CODE;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0e9      	b.n	8002c06 <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	7d1b      	ldrb	r3, [r3, #20]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	2b0f      	cmp	r3, #15
 8002a42:	f200 80df 	bhi.w	8002c04 <validateRequest+0x284>
 8002a46:	a201      	add	r2, pc, #4	@ (adr r2, 8002a4c <validateRequest+0xcc>)
 8002a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4c:	08002a8d 	.word	0x08002a8d
 8002a50:	08002a8d 	.word	0x08002a8d
 8002a54:	08002ba5 	.word	0x08002ba5
 8002a58:	08002ba5 	.word	0x08002ba5
 8002a5c:	08002b39 	.word	0x08002b39
 8002a60:	08002b81 	.word	0x08002b81
 8002a64:	08002c05 	.word	0x08002c05
 8002a68:	08002c05 	.word	0x08002c05
 8002a6c:	08002c05 	.word	0x08002c05
 8002a70:	08002c05 	.word	0x08002c05
 8002a74:	08002c05 	.word	0x08002c05
 8002a78:	08002c05 	.word	0x08002c05
 8002a7c:	08002c05 	.word	0x08002c05
 8002a80:	08002c05 	.word	0x08002c05
 8002a84:	08002a8d 	.word	0x08002a8d
 8002a88:	08002ba5 	.word	0x08002ba5
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	7d5a      	ldrb	r2, [r3, #21]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	7d9b      	ldrb	r3, [r3, #22]
 8002a94:	4619      	mov	r1, r3
 8002a96:	4610      	mov	r0, r2
 8002a98:	f000 f8bc 	bl	8002c14 <word>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	091b      	lsrs	r3, r3, #4
 8002aa0:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	7dda      	ldrb	r2, [r3, #23]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	7e1b      	ldrb	r3, [r3, #24]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4610      	mov	r0, r2
 8002aae:	f000 f8b1 	bl	8002c14 <word>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	7dda      	ldrb	r2, [r3, #23]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	7e1b      	ldrb	r3, [r3, #24]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	f000 f8a6 	bl	8002c14 <word>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <validateRequest+0x15a>
 8002ad4:	897b      	ldrh	r3, [r7, #10]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 8002ada:	89ba      	ldrh	r2, [r7, #12]
 8002adc:	897b      	ldrh	r3, [r7, #10]
 8002ade:	4413      	add	r3, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	@ 0xa4
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	dd01      	ble.n	8002aee <validateRequest+0x16e>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e08b      	b.n	8002c06 <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	7dda      	ldrb	r2, [r3, #23]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	7e1b      	ldrb	r3, [r3, #24]
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f000 f88b 	bl	8002c14 <word>
 8002afe:	4603      	mov	r3, r0
 8002b00:	08db      	lsrs	r3, r3, #3
 8002b02:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	7dda      	ldrb	r2, [r3, #23]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7e1b      	ldrb	r3, [r3, #24]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4610      	mov	r0, r2
 8002b10:	f000 f880 	bl	8002c14 <word>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <validateRequest+0x1a6>
 8002b20:	897b      	ldrh	r3, [r7, #10]
 8002b22:	3301      	adds	r3, #1
 8002b24:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 8002b26:	897b      	ldrh	r3, [r7, #10]
 8002b28:	3305      	adds	r3, #5
 8002b2a:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8002b2c:	897b      	ldrh	r3, [r7, #10]
 8002b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b32:	d960      	bls.n	8002bf6 <validateRequest+0x276>
 8002b34:	2303      	movs	r3, #3
 8002b36:	e066      	b.n	8002c06 <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	7d5a      	ldrb	r2, [r3, #21]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7d9b      	ldrb	r3, [r3, #22]
 8002b40:	4619      	mov	r1, r3
 8002b42:	4610      	mov	r0, r2
 8002b44:	f000 f866 	bl	8002c14 <word>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	7d5a      	ldrb	r2, [r3, #21]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	7d9b      	ldrb	r3, [r3, #22]
 8002b56:	4619      	mov	r1, r3
 8002b58:	4610      	mov	r0, r2
 8002b5a:	f000 f85b 	bl	8002c14 <word>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <validateRequest+0x1f0>
 8002b6a:	89bb      	ldrh	r3, [r7, #12]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs >= modH->u16regsize) return EXC_ADDR_RANGE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8002b76:	89ba      	ldrh	r2, [r7, #12]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d33e      	bcc.n	8002bfa <validateRequest+0x27a>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e042      	b.n	8002c06 <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	7d5a      	ldrb	r2, [r3, #21]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	7d9b      	ldrb	r3, [r3, #22]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	f000 f842 	bl	8002c14 <word>
 8002b90:	4603      	mov	r3, r0
 8002b92:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs >= modH-> u16regsize) return EXC_ADDR_RANGE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8002b9a:	89ba      	ldrh	r2, [r7, #12]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d32e      	bcc.n	8002bfe <validateRequest+0x27e>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e030      	b.n	8002c06 <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	7d5a      	ldrb	r2, [r3, #21]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7d9b      	ldrb	r3, [r3, #22]
 8002bac:	4619      	mov	r1, r3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	f000 f830 	bl	8002c14 <word>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	7dda      	ldrb	r2, [r3, #23]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	7e1b      	ldrb	r3, [r3, #24]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4610      	mov	r0, r2
 8002bc4:	f000 f826 	bl	8002c14 <word>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8002bcc:	89ba      	ldrh	r2, [r7, #12]
 8002bce:	897b      	ldrh	r3, [r7, #10]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	@ 0xa4
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	dd01      	ble.n	8002be0 <validateRequest+0x260>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e012      	b.n	8002c06 <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8002be0:	897b      	ldrh	r3, [r7, #10]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3305      	adds	r3, #5
 8002be8:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8002bea:	897b      	ldrh	r3, [r7, #10]
 8002bec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bf0:	d907      	bls.n	8002c02 <validateRequest+0x282>
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e007      	b.n	8002c06 <validateRequest+0x286>
	        break;
 8002bf6:	bf00      	nop
 8002bf8:	e004      	b.n	8002c04 <validateRequest+0x284>
	        break;
 8002bfa:	bf00      	nop
 8002bfc:	e002      	b.n	8002c04 <validateRequest+0x284>
	        break;
 8002bfe:	bf00      	nop
 8002c00:	e000      	b.n	8002c04 <validateRequest+0x284>
	        break;
 8002c02:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8002c04:	2300      	movs	r3, #0

}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	08017d44 	.word	0x08017d44

08002c14 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	460a      	mov	r2, r1
 8002c1e:	71fb      	strb	r3, [r7, #7]
 8002c20:	4613      	mov	r3, r2
 8002c22:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8002c24:	79bb      	ldrb	r3, [r7, #6]
 8002c26:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8002c2c:	89bb      	ldrh	r3, [r7, #12]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b087      	sub	sp, #28
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	460b      	mov	r3, r1
 8002c44:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8002c46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c4a:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	74fb      	strb	r3, [r7, #19]
 8002c50:	e022      	b.n	8002c98 <calcCRC+0x5e>
    {
        temp = temp ^ Buffer[i];
 8002c52:	7cfb      	ldrb	r3, [r7, #19]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	4413      	add	r3, r2
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	4053      	eors	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8002c62:	2301      	movs	r3, #1
 8002c64:	74bb      	strb	r3, [r7, #18]
 8002c66:	e011      	b.n	8002c8c <calcCRC+0x52>
        {
            flag = temp & 0x0001;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	085b      	lsrs	r3, r3, #1
 8002c74:	617b      	str	r3, [r7, #20]
            if (flag)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d004      	beq.n	8002c86 <calcCRC+0x4c>
                temp ^= 0xA001;
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	f24a 0301 	movw	r3, #40961	@ 0xa001
 8002c82:	4053      	eors	r3, r2
 8002c84:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8002c86:	7cbb      	ldrb	r3, [r7, #18]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	74bb      	strb	r3, [r7, #18]
 8002c8c:	7cbb      	ldrb	r3, [r7, #18]
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d9ea      	bls.n	8002c68 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8002c92:	7cfb      	ldrb	r3, [r7, #19]
 8002c94:	3301      	adds	r3, #1
 8002c96:	74fb      	strb	r3, [r7, #19]
 8002c98:	7cfa      	ldrb	r2, [r7, #19]
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d3d8      	bcc.n	8002c52 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	0a1b      	lsrs	r3, r3, #8
 8002ca4:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	b29b      	uxth	r3, r3

}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	6039      	str	r1, [r7, #0]
 8002cd0:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	7d1b      	ldrb	r3, [r3, #20]
 8002cd6:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	7a1a      	ldrb	r2, [r3, #8]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	3b80      	subs	r3, #128	@ 0x80
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	79fa      	ldrb	r2, [r7, #7]
 8002cee:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	6078      	str	r0, [r7, #4]
    // when in slaveType and u8AddressMode == ADDRESS_BROADCAST, do not send anything
    if (modH->uModbusType == MB_SLAVE && modH->u8AddressMode == ADDRESS_BROADCAST)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d111      	bne.n	8002d38 <sendTxBuffer+0x34>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10c      	bne.n	8002d38 <sendTxBuffer+0x34>
    {
        modH->u8BufferSize = 0;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
        // increase message counter
        modH->u16OutCnt++;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
        return;
 8002d36:	e086      	b.n	8002e46 <sendTxBuffer+0x142>
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f103 0213 	add.w	r2, r3, #19
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002d44:	4619      	mov	r1, r3
 8002d46:	4610      	mov	r0, r2
 8002d48:	f7ff ff77 	bl	8002c3a <calcCRC>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8002d50:	89fb      	ldrh	r3, [r7, #14]
 8002d52:	0a1b      	lsrs	r3, r3, #8
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	440b      	add	r3, r1
 8002d64:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	89fb      	ldrh	r3, [r7, #14]
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	440b      	add	r3, r1
 8002d86:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002d8e:	3301      	adds	r3, #1
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00c      	beq.n	8002dba <sendTxBuffer+0xb6>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f009 f8af 	bl	800bf08 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68d8      	ldr	r0, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	8a1b      	ldrh	r3, [r3, #16]
 8002db2:	2201      	movs	r2, #1
 8002db4:	4619      	mov	r1, r3
 8002db6:	f002 f873 	bl	8004ea0 <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6858      	ldr	r0, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f103 0113 	add.w	r1, r3, #19
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f008 fb14 	bl	800b3f8 <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8002dd0:	21fa      	movs	r1, #250	@ 0xfa
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	f012 f938 	bl	8015048 <ulTaskNotifyTake>
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx) || defined(STM32F7) || defined(STM32WB) || defined(STM32G070xx) || defined(STM32F0) || defined(STM32G431xx) || defined(STM32H5)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 8002dd8:	bf00      	nop
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f7      	beq.n	8002dda <sendTxBuffer+0xd6>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00c      	beq.n	8002e0c <sendTxBuffer+0x108>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68d8      	ldr	r0, [r3, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	8a1b      	ldrh	r3, [r3, #16]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f002 f84f 	bl	8004ea0 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f009 f8d2 	bl	800bfb0 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d10c      	bne.n	8002e2e <sendTxBuffer+0x12a>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8d3 40b8 	ldr.w	r4, [r3, #184]	@ 0xb8
 8002e1a:	f011 fb2b 	bl	8014474 <xTaskGetTickCount>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	2300      	movs	r3, #0
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	2300      	movs	r3, #0
 8002e26:	2102      	movs	r1, #2
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f012 fbfd 	bl	8015628 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
     // increase message counter
     modH->u16OutCnt++;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e


}
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd90      	pop	{r4, r7, pc}

08002e4c <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	7d5a      	ldrb	r2, [r3, #21]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	7d9b      	ldrb	r3, [r3, #22]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	f7ff fed8 	bl	8002c14 <word>
 8002e64:	4603      	mov	r3, r0
 8002e66:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	7dda      	ldrb	r2, [r3, #23]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	7e1b      	ldrb	r3, [r3, #24]
 8002e70:	4619      	mov	r1, r3
 8002e72:	4610      	mov	r0, r2
 8002e74:	f7ff fece 	bl	8002c14 <word>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8002e7c:	8a3b      	ldrh	r3, [r7, #16]
 8002e7e:	08db      	lsrs	r3, r3, #3
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8002e84:	8a3b      	ldrh	r3, [r7, #16]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <process_FC1+0x4a>
 8002e90:	7dfb      	ldrb	r3, [r7, #23]
 8002e92:	3301      	adds	r3, #1
 8002e94:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	7dfa      	ldrb	r2, [r7, #23]
 8002e9a:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002eaa:	461a      	mov	r2, r3
 8002eac:	7dfb      	ldrb	r3, [r7, #23]
 8002eae:	4413      	add	r3, r2
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	82bb      	strh	r3, [r7, #20]
 8002ec2:	e058      	b.n	8002f76 <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8002ec4:	8a7a      	ldrh	r2, [r7, #18]
 8002ec6:	8abb      	ldrh	r3, [r7, #20]
 8002ec8:	4413      	add	r3, r2
 8002eca:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 8002ecc:	89bb      	ldrh	r3, [r7, #12]
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8002ed2:	89bb      	ldrh	r3, [r7, #12]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	727b      	strb	r3, [r7, #9]

        bitWrite(
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002ee2:	897b      	ldrh	r3, [r7, #10]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4413      	add	r3, r2
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	7a7b      	ldrb	r3, [r7, #9]
 8002eee:	fa42 f303 	asr.w	r3, r2, r3
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d014      	beq.n	8002f24 <process_FC1+0xd8>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002f00:	461a      	mov	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	7cda      	ldrb	r2, [r3, #19]
 8002f08:	7dbb      	ldrb	r3, [r7, #22]
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	f891 1093 	ldrb.w	r1, [r1, #147]	@ 0x93
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	440b      	add	r3, r1
 8002f20:	74da      	strb	r2, [r3, #19]
 8002f22:	e015      	b.n	8002f50 <process_FC1+0x104>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	7cda      	ldrb	r2, [r3, #19]
 8002f32:	7dbb      	ldrb	r3, [r7, #22]
 8002f34:	2101      	movs	r1, #1
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	f891 1093 	ldrb.w	r1, [r1, #147]	@ 0x93
 8002f46:	4013      	ands	r3, r2
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	440b      	add	r3, r1
 8002f4e:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8002f50:	7dbb      	ldrb	r3, [r7, #22]
 8002f52:	3301      	adds	r3, #1
 8002f54:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8002f56:	7dbb      	ldrb	r3, [r7, #22]
 8002f58:	2b07      	cmp	r3, #7
 8002f5a:	d909      	bls.n	8002f70 <process_FC1+0x124>
        {
            u8bitsno = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002f66:	3301      	adds	r3, #1
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8002f70:	8abb      	ldrh	r3, [r7, #20]
 8002f72:	3301      	adds	r3, #1
 8002f74:	82bb      	strh	r3, [r7, #20]
 8002f76:	8aba      	ldrh	r2, [r7, #20]
 8002f78:	8a3b      	ldrh	r3, [r7, #16]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d3a2      	bcc.n	8002ec4 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8002f7e:	8a3b      	ldrh	r3, [r7, #16]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d007      	beq.n	8002f9a <process_FC1+0x14e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002f90:	3301      	adds	r3, #1
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff fead 	bl	8002d04 <sendTxBuffer>
    return u8CopyBufferSize;
 8002faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b084      	sub	sp, #16
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	7d5a      	ldrb	r2, [r3, #21]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	7d9b      	ldrb	r3, [r3, #22]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4610      	mov	r0, r2
 8002fca:	f7ff fe23 	bl	8002c14 <word>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	7dda      	ldrb	r2, [r3, #23]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	7e1b      	ldrb	r3, [r3, #24]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4610      	mov	r0, r2
 8002fde:	f7ff fe19 	bl	8002c14 <word>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 8002fe6:	7afb      	ldrb	r3, [r7, #11]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8002ff8:	89bb      	ldrh	r3, [r7, #12]
 8002ffa:	81fb      	strh	r3, [r7, #14]
 8002ffc:	e032      	b.n	8003064 <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003004:	89fb      	ldrh	r3, [r7, #14]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4413      	add	r3, r2
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	0a1b      	lsrs	r3, r3, #8
 800300e:	b29a      	uxth	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003016:	4619      	mov	r1, r3
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	440b      	add	r3, r1
 800301e:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003026:	3301      	adds	r3, #1
 8003028:	b2da      	uxtb	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003036:	89fb      	ldrh	r3, [r7, #14]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4413      	add	r3, r2
 800303c:	881a      	ldrh	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003044:	4619      	mov	r1, r3
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	440b      	add	r3, r1
 800304c:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003054:	3301      	adds	r3, #1
 8003056:	b2da      	uxtb	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800305e:	89fb      	ldrh	r3, [r7, #14]
 8003060:	3301      	adds	r3, #1
 8003062:	81fb      	strh	r3, [r7, #14]
 8003064:	89fa      	ldrh	r2, [r7, #14]
 8003066:	89b9      	ldrh	r1, [r7, #12]
 8003068:	7afb      	ldrb	r3, [r7, #11]
 800306a:	440b      	add	r3, r1
 800306c:	429a      	cmp	r2, r3
 800306e:	dbc6      	blt.n	8002ffe <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003076:	3302      	adds	r3, #2
 8003078:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff fe42 	bl	8002d04 <sendTxBuffer>

    return u8CopyBufferSize;
 8003080:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	7d5a      	ldrb	r2, [r3, #21]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	7d9b      	ldrb	r3, [r3, #22]
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f7ff fdb8 	bl	8002c14 <word>
 80030a4:	4603      	mov	r3, r0
 80030a6:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 80030a8:	89fb      	ldrh	r3, [r7, #14]
 80030aa:	091b      	lsrs	r3, r3, #4
 80030ac:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 80030ae:	89fb      	ldrh	r3, [r7, #14]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	7ddb      	ldrb	r3, [r3, #23]
 80030bc:	2bff      	cmp	r3, #255	@ 0xff
 80030be:	d115      	bne.n	80030ec <process_FC5+0x60>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80030c6:	89bb      	ldrh	r3, [r7, #12]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	4413      	add	r3, r2
 80030cc:	8819      	ldrh	r1, [r3, #0]
 80030ce:	7afb      	ldrb	r3, [r7, #11]
 80030d0:	2201      	movs	r2, #1
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 80030de:	89bb      	ldrh	r3, [r7, #12]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4403      	add	r3, r0
 80030e4:	430a      	orrs	r2, r1
 80030e6:	b292      	uxth	r2, r2
 80030e8:	801a      	strh	r2, [r3, #0]
 80030ea:	e016      	b.n	800311a <process_FC5+0x8e>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80030f2:	89bb      	ldrh	r3, [r7, #12]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	4413      	add	r3, r2
 80030f8:	8819      	ldrh	r1, [r3, #0]
 80030fa:	7afb      	ldrb	r3, [r7, #11]
 80030fc:	2201      	movs	r2, #1
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	b29b      	uxth	r3, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	b29a      	uxth	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 800310e:	89bb      	ldrh	r3, [r7, #12]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4403      	add	r3, r0
 8003114:	400a      	ands	r2, r1
 8003116:	b292      	uxth	r2, r2
 8003118:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2206      	movs	r2, #6
 800311e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003128:	3302      	adds	r3, #2
 800312a:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff fde9 	bl	8002d04 <sendTxBuffer>

    return u8CopyBufferSize;
 8003132:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	7d5a      	ldrb	r2, [r3, #21]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	7d9b      	ldrb	r3, [r3, #22]
 800314e:	4619      	mov	r1, r3
 8003150:	4610      	mov	r0, r2
 8003152:	f7ff fd5f 	bl	8002c14 <word>
 8003156:	4603      	mov	r3, r0
 8003158:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	7dda      	ldrb	r2, [r3, #23]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	7e1b      	ldrb	r3, [r3, #24]
 8003162:	4619      	mov	r1, r3
 8003164:	4610      	mov	r0, r2
 8003166:	f7ff fd55 	bl	8002c14 <word>
 800316a:	4603      	mov	r3, r0
 800316c:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003174:	89fb      	ldrh	r3, [r7, #14]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	4413      	add	r3, r2
 800317a:	89ba      	ldrh	r2, [r7, #12]
 800317c:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2206      	movs	r2, #6
 8003182:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800318c:	3302      	adds	r3, #2
 800318e:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff fdb7 	bl	8002d04 <sendTxBuffer>

    return u8CopyBufferSize;
 8003196:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b086      	sub	sp, #24
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	7d5a      	ldrb	r2, [r3, #21]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	7d9b      	ldrb	r3, [r3, #22]
 80031b2:	4619      	mov	r1, r3
 80031b4:	4610      	mov	r0, r2
 80031b6:	f7ff fd2d 	bl	8002c14 <word>
 80031ba:	4603      	mov	r3, r0
 80031bc:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	7dda      	ldrb	r2, [r3, #23]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	7e1b      	ldrb	r3, [r3, #24]
 80031c6:	4619      	mov	r1, r3
 80031c8:	4610      	mov	r0, r2
 80031ca:	f7ff fd23 	bl	8002c14 <word>
 80031ce:	4603      	mov	r3, r0
 80031d0:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 80031d6:	2307      	movs	r3, #7
 80031d8:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80031da:	2300      	movs	r3, #0
 80031dc:	82bb      	strh	r3, [r7, #20]
 80031de:	e058      	b.n	8003292 <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 80031e0:	8a7a      	ldrh	r2, [r7, #18]
 80031e2:	8abb      	ldrh	r3, [r7, #20]
 80031e4:	4413      	add	r3, r2
 80031e6:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 80031e8:	89bb      	ldrh	r3, [r7, #12]
 80031ea:	091b      	lsrs	r3, r3, #4
 80031ec:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 80031ee:	89bb      	ldrh	r3, [r7, #12]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 80031f8:	7dfb      	ldrb	r3, [r7, #23]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	7cdb      	ldrb	r3, [r3, #19]
 8003200:	461a      	mov	r2, r3
 8003202:	7dbb      	ldrb	r3, [r7, #22]
 8003204:	fa42 f303 	asr.w	r3, r2, r3
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	bf14      	ite	ne
 8003210:	2301      	movne	r3, #1
 8003212:	2300      	moveq	r3, #0
 8003214:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 8003216:	7a3b      	ldrb	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d015      	beq.n	8003248 <process_FC15+0xa6>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003222:	897b      	ldrh	r3, [r7, #10]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	8819      	ldrh	r1, [r3, #0]
 800322a:	7a7b      	ldrb	r3, [r7, #9]
 800322c:	2201      	movs	r2, #1
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	b29a      	uxth	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 800323a:	897b      	ldrh	r3, [r7, #10]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	4403      	add	r3, r0
 8003240:	430a      	orrs	r2, r1
 8003242:	b292      	uxth	r2, r2
 8003244:	801a      	strh	r2, [r3, #0]
 8003246:	e016      	b.n	8003276 <process_FC15+0xd4>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800324e:	897b      	ldrh	r3, [r7, #10]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	4413      	add	r3, r2
 8003254:	8819      	ldrh	r1, [r3, #0]
 8003256:	7a7b      	ldrb	r3, [r7, #9]
 8003258:	2201      	movs	r2, #1
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	b29b      	uxth	r3, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	b29a      	uxth	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 800326a:	897b      	ldrh	r3, [r7, #10]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4403      	add	r3, r0
 8003270:	400a      	ands	r2, r1
 8003272:	b292      	uxth	r2, r2
 8003274:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8003276:	7dbb      	ldrb	r3, [r7, #22]
 8003278:	3301      	adds	r3, #1
 800327a:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800327c:	7dbb      	ldrb	r3, [r7, #22]
 800327e:	2b07      	cmp	r3, #7
 8003280:	d904      	bls.n	800328c <process_FC15+0xea>
        {
            u8bitsno = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 8003286:	7dfb      	ldrb	r3, [r7, #23]
 8003288:	3301      	adds	r3, #1
 800328a:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800328c:	8abb      	ldrh	r3, [r7, #20]
 800328e:	3301      	adds	r3, #1
 8003290:	82bb      	strh	r3, [r7, #20]
 8003292:	8aba      	ldrh	r2, [r7, #20]
 8003294:	8a3b      	ldrh	r3, [r7, #16]
 8003296:	429a      	cmp	r2, r3
 8003298:	d3a2      	bcc.n	80031e0 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2206      	movs	r2, #6
 800329e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80032a8:	3302      	adds	r3, #2
 80032aa:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff fd29 	bl	8002d04 <sendTxBuffer>
    return u8CopyBufferSize;
 80032b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	7d5b      	ldrb	r3, [r3, #21]
 80032ca:	b21b      	sxth	r3, r3
 80032cc:	021b      	lsls	r3, r3, #8
 80032ce:	b21a      	sxth	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	7d9b      	ldrb	r3, [r3, #22]
 80032d4:	b21b      	sxth	r3, r3
 80032d6:	4313      	orrs	r3, r2
 80032d8:	b21b      	sxth	r3, r3
 80032da:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	7ddb      	ldrb	r3, [r3, #23]
 80032e0:	b21b      	sxth	r3, r3
 80032e2:	021b      	lsls	r3, r3, #8
 80032e4:	b21a      	sxth	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	7e1b      	ldrb	r3, [r3, #24]
 80032ea:	b21b      	sxth	r3, r3
 80032ec:	4313      	orrs	r3, r2
 80032ee:	b21b      	sxth	r3, r3
 80032f0:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 80032f8:	8a7b      	ldrh	r3, [r7, #18]
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2206      	movs	r2, #6
 8003304:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 8003308:	2300      	movs	r3, #0
 800330a:	82fb      	strh	r3, [r7, #22]
 800330c:	e01d      	b.n	800334a <process_FC16+0x8c>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 800330e:	8afb      	ldrh	r3, [r7, #22]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	3307      	adds	r3, #7
        temp = word(
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4413      	add	r3, r2
 8003318:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800331a:	8afb      	ldrh	r3, [r7, #22]
 800331c:	3304      	adds	r3, #4
 800331e:	005b      	lsls	r3, r3, #1
        temp = word(
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	4413      	add	r3, r2
 8003324:	7cdb      	ldrb	r3, [r3, #19]
 8003326:	4619      	mov	r1, r3
 8003328:	f7ff fc74 	bl	8002c14 <word>
 800332c:	4603      	mov	r3, r0
 800332e:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003336:	8ab9      	ldrh	r1, [r7, #20]
 8003338:	8afb      	ldrh	r3, [r7, #22]
 800333a:	440b      	add	r3, r1
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4413      	add	r3, r2
 8003340:	89fa      	ldrh	r2, [r7, #14]
 8003342:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 8003344:	8afb      	ldrh	r3, [r7, #22]
 8003346:	3301      	adds	r3, #1
 8003348:	82fb      	strh	r3, [r7, #22]
 800334a:	8afa      	ldrh	r2, [r7, #22]
 800334c:	8a7b      	ldrh	r3, [r7, #18]
 800334e:	429a      	cmp	r2, r3
 8003350:	d3dd      	bcc.n	800330e <process_FC16+0x50>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003358:	3302      	adds	r3, #2
 800335a:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff fcd1 	bl	8002d04 <sendTxBuffer>

    return u8CopyBufferSize;
 8003362:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <_ZN6SensorC1Ev>:
 * The Sensor base class provides an implementation of getVelocity(), and takes care of counting full
 * revolutions in a precise way, but if you wish you can additionally override these methods to provide more
 * optimal implementations for your hardware.
 * 
 */
class Sensor{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	4a12      	ldr	r2, [pc, #72]	@ (80033c4 <_ZN6SensorC1Ev+0x54>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a11      	ldr	r2, [pc, #68]	@ (80033c8 <_ZN6SensorC1Ev+0x58>)
 8003382:	605a      	str	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	609a      	str	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	60da      	str	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	611a      	str	r2, [r3, #16]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	615a      	str	r2, [r3, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	619a      	str	r2, [r3, #24]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	61da      	str	r2, [r3, #28]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	621a      	str	r2, [r3, #32]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	08017d8c 	.word	0x08017d8c
 80033c8:	38d1b717 	.word	0x38d1b717

080033cc <_ZN21ModbusAbsoluteEncoderC1EP17TIM_HandleTypeDefh>:
#include <cstdio>
#include "retarget.h"
// Define static constant
const float ModbusAbsoluteEncoder::RADIANS_PER_COUNT = 2.0f * M_PI / ModbusAbsoluteEncoder::ENCODER_RESOLUTION;

ModbusAbsoluteEncoder::ModbusAbsoluteEncoder(TIM_HandleTypeDef *htim, uint8_t unit_id)
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	4613      	mov	r3, r2
 80033d8:	71fb      	strb	r3, [r7, #7]
    last_position(0),
    full_rotations(0),
    zero_position(0),
    frequency_start_time(0),
    last_receive_count(0),
    encoder_initialized(false)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff ffc7 	bl	8003370 <_ZN6SensorC1Ev>
 80033e2:	4a26      	ldr	r2, [pc, #152]	@ (800347c <_ZN21ModbusAbsoluteEncoderC1EP17TIM_HandleTypeDefh+0xb0>)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	601a      	str	r2, [r3, #0]
  : unit_id(unit_id),
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	79fa      	ldrb	r2, [r7, #7]
 80033ec:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
    encoder_initialized(false)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    comm_ok(false),
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
    modbus_state(IDLE),
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
    cached_angle(0.0f),
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    async_enabled(false),
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
    last_update_time(0),
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    encoder_receive_count(0),
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
    query_start_time(0),
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
    first_read(true),
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
    htim(htim),
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
    last_position(0),
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
    full_rotations(0),
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
    zero_position(0),
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
    frequency_start_time(0),
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
    last_receive_count(0),
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
    encoder_initialized(false)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
{
}
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	08017d54 	.word	0x08017d54

08003480 <_ZN21ModbusAbsoluteEncoder4initEv>:

void ModbusAbsoluteEncoder::init() {
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
    // Initialise timer stats
    //Initialize Modbus library
    ModbusInit(&ModbusH);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3324      	adds	r3, #36	@ 0x24
 800348c:	4618      	mov	r0, r3
 800348e:	f7fe fbe3 	bl	8001c58 <ModbusInit>
    //Start capturing traffic on serial Port
    ModbusStart(&ModbusH);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3324      	adds	r3, #36	@ 0x24
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe fc86 	bl	8001da8 <ModbusStart>
    frequency_start_time = HAL_GetTick();
 800349c:	f000 fc54 	bl	8003d48 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
    last_receive_count = 0;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
    encoder_initialized = true;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 80034b8:	bf00      	nop
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <_ZN21ModbusAbsoluteEncoder15sendModbusQueryEv>:

bool ModbusAbsoluteEncoder::sendModbusQuery() {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	6078      	str	r0, [r7, #4]
    modbus_t telegram;
    constructQuery(&telegram);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	332c      	adds	r3, #44	@ 0x2c
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f107 0208 	add.w	r2, r7, #8
 80034d4:	4611      	mov	r1, r2
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	4798      	blx	r3
    // 发送Modbus查询（非阻塞）
    ModbusDATA[0] = ~ModbusDATA[0];
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 80034e0:	43db      	mvns	r3, r3
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8a3 216c 	strh.w	r2, [r3, #364]	@ 0x16c
    ModbusQuery(&ModbusH, telegram);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	f107 0308 	add.w	r3, r7, #8
 80034f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034fa:	f7fe fe3d 	bl	8002178 <ModbusQuery>

    modbus_state = QUERY_SENT;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
    query_start_time = HAL_GetTick();
 8003506:	f000 fc1f 	bl	8003d48 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
    return true;
 8003512:	2301      	movs	r3, #1
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv>:

bool ModbusAbsoluteEncoder::checkModbusResponse() {
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
    // 检查Modbus响应是否准备好
    // 这里需要根据具体的Modbus库实现来检查
    // 假设ModbusQueryV2是阻塞版本，我们需要非阻塞检查
    
    // 简化实现：检查Modbus状态
    uint32_t u32NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // block until query finishes or timeouts
 8003524:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003528:	2001      	movs	r0, #1
 800352a:	f011 fd8d 	bl	8015048 <ulTaskNotifyTake>
 800352e:	60f8      	str	r0, [r7, #12]
    if(u32NotificationValue != OP_OK_QUERY)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b14      	cmp	r3, #20
 8003534:	d001      	beq.n	800353a <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv+0x1e>
    {
        return false;
 8003536:	2300      	movs	r3, #0
 8003538:	e01e      	b.n	8003578 <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv+0x5c>
    } else {
        // 成功接收到响应
        encoder_receive_count++;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
        uint32_t current_position = ((uint32_t)ModbusDATA[0] << 16) | ModbusDATA[1];
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 800354e:	041b      	lsls	r3, r3, #16
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	f8b2 216e 	ldrh.w	r2, [r2, #366]	@ 0x16e
 8003556:	4313      	orrs	r3, r2
 8003558:	60bb      	str	r3, [r7, #8]
        updateAngleFromPosition(current_position);
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f947 	bl	80037f0 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm>
        comm_ok = true;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
        last_update_time = HAL_GetTick();
 800356a:	f000 fbed 	bl	8003d48 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
        // 通讯完成，检查结果
        return true;
 8003576:	2301      	movs	r3, #1
    }
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm>:

void ModbusAbsoluteEncoder::startAsyncReading(uint32_t update_frequency_hz) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
    if(!htim) {
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d104      	bne.n	800359e <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x1e>
        async_enabled = false;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
        return;
 800359c:	e058      	b.n	8003650 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0xd0>
    }

    // Configure TIM ARR based on requested frequency (assuming clock already set as in Encoder485)
    uint32_t arr_value = (100000 / update_frequency_hz) - 1;
 800359e:	4a2e      	ldr	r2, [pc, #184]	@ (8003658 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0xd8>)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a6:	3b01      	subs	r3, #1
 80035a8:	60fb      	str	r3, [r7, #12]
    if(arr_value > 65535) arr_value = 65535;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b0:	d302      	bcc.n	80035b8 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x38>
 80035b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035b6:	60fb      	str	r3, [r7, #12]
    if(arr_value < 10) arr_value = 10;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b09      	cmp	r3, #9
 80035bc:	d801      	bhi.n	80035c2 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x42>
 80035be:	230a      	movs	r3, #10
 80035c0:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_DISABLE(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6a1a      	ldr	r2, [r3, #32]
 80035cc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	bf0c      	ite	eq
 80035d6:	2301      	moveq	r3, #1
 80035d8:	2300      	movne	r3, #0
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01a      	beq.n	8003616 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x96>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6a1a      	ldr	r2, [r3, #32]
 80035ea:	f240 4344 	movw	r3, #1092	@ 0x444
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00b      	beq.n	8003616 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x96>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
    htim->Instance->ARR = arr_value;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_TIM_SET_COUNTER(htim, 0);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2200      	movs	r2, #0
 800362c:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start_IT(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8003634:	4618      	mov	r0, r3
 8003636:	f006 fe8d 	bl	800a354 <HAL_TIM_Base_Start_IT>

    async_enabled = true;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
    modbus_state = IDLE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185

    // Initial query so first value is available quickly
    sendModbusQuery();
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff ff38 	bl	80034c0 <_ZN21ModbusAbsoluteEncoder15sendModbusQueryEv>
}
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	000186a0 	.word	0x000186a0
 800365c:	00000000 	.word	0x00000000

08003660 <_ZN21ModbusAbsoluteEncoder8getAngleEv>:
        HAL_TIM_Base_Stop_IT(htim);
    }
}


float ModbusAbsoluteEncoder::getAngle() {
 8003660:	b580      	push	{r7, lr}
 8003662:	b08a      	sub	sp, #40	@ 0x28
 8003664:	af02      	add	r7, sp, #8
 8003666:	6078      	str	r0, [r7, #4]
    if(async_enabled) {
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 318c 	ldrb.w	r3, [r3, #396]	@ 0x18c
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <_ZN21ModbusAbsoluteEncoder8getAngleEv+0x1c>
        return cached_angle;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 800367a:	e059      	b.n	8003730 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xd0>
    }
    // 构建Modbus查询结构体
    modbus_t telegram;
    constructQuery(&telegram);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	332c      	adds	r3, #44	@ 0x2c
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f107 0208 	add.w	r2, r7, #8
 8003688:	4611      	mov	r1, r2
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
    // 发送Modbus查询（非阻塞）
    ModbusDATA[0] = ~ModbusDATA[0];
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 8003694:	43db      	mvns	r3, r3
 8003696:	b29a      	uxth	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8a3 216c 	strh.w	r2, [r3, #364]	@ 0x16c
    
    uint32_t result = ModbusQueryV2(&ModbusH, telegram);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	f107 0308 	add.w	r3, r7, #8
 80036ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036ae:	f7fe fda9 	bl	8002204 <ModbusQueryV2>
 80036b2:	61f8      	str	r0, [r7, #28]
    
    if (result != OP_OK_QUERY) {
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	2b14      	cmp	r3, #20
 80036b8:	d02a      	beq.n	8003710 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xb0>
        if (first_read) {
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <_ZN21ModbusAbsoluteEncoder8getAngleEv+0x6a>
            return 0.0f;
 80036c4:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8003748 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xe8>
 80036c8:	e032      	b.n	8003730 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xd0>
        } else {
            return (float)(last_position % ENCODER_RESOLUTION) * RADIANS_PER_COUNT + 
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 80036d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036d4:	ee07 3a90 	vmov	s15, r3
 80036d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036dc:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800374c <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xec>
 80036e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036e4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
                    (float)full_rotations * 2.0f * M_PI;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 80036ee:	ee07 3a90 	vmov	s15, r3
 80036f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80036fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80036fe:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 8003740 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xe0>
 8003702:	ee27 7b05 	vmul.f64	d7, d7, d5
            return (float)(last_position % ENCODER_RESOLUTION) * RADIANS_PER_COUNT + 
 8003706:	ee36 7b07 	vadd.f64	d7, d6, d7
                    (float)full_rotations * 2.0f * M_PI;
 800370a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800370e:	e00f      	b.n	8003730 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xd0>
        }
    }
    
    uint32_t current_position = ((uint32_t)ModbusDATA[0] << 16) | ModbusDATA[1];
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 8003716:	041b      	lsls	r3, r3, #16
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	f8b2 216e 	ldrh.w	r2, [r2, #366]	@ 0x16e
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
    updateAngleFromPosition(current_position);
 8003722:	69b9      	ldr	r1, [r7, #24]
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f863 	bl	80037f0 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm>
    
    return cached_angle;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
}
 8003730:	eeb0 0a67 	vmov.f32	s0, s15
 8003734:	3720      	adds	r7, #32
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	f3af 8000 	nop.w
 8003740:	54442d18 	.word	0x54442d18
 8003744:	400921fb 	.word	0x400921fb
 8003748:	00000000 	.word	0x00000000
 800374c:	3a490fdb 	.word	0x3a490fdb

08003750 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv>:

void ModbusAbsoluteEncoder::asyncUpdateCallback() {
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
    if(!async_enabled) return;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 318c 	ldrb.w	r3, [r3, #396]	@ 0x18c
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f083 0301 	eor.w	r3, r3, #1
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d122      	bne.n	80037b0 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x60>

    switch(modbus_state) {
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x2a>
 8003774:	2b01      	cmp	r3, #1
 8003776:	d004      	beq.n	8003782 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x32>
 8003778:	e01b      	b.n	80037b2 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
        case IDLE:
            sendModbusQuery();
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff fea0 	bl	80034c0 <_ZN21ModbusAbsoluteEncoder15sendModbusQueryEv>
//             printf("Sending query...");
            break;
 8003780:	e017      	b.n	80037b2 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
        case QUERY_SENT:
            if(checkModbusResponse()) {
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff feca 	bl	800351c <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d004      	beq.n	8003798 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x48>
                modbus_state = IDLE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
                // timeout
                comm_ok = false;
                modbus_state = IDLE;
                printf("Timeout, retrying...");
            }
            break;
 8003796:	e00c      	b.n	80037b2 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
                comm_ok = false;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
                modbus_state = IDLE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
                printf("Timeout, retrying...");
 80037a8:	4803      	ldr	r0, [pc, #12]	@ (80037b8 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x68>)
 80037aa:	f013 f831 	bl	8016810 <iprintf>
            break;
 80037ae:	e000      	b.n	80037b2 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
    if(!async_enabled) return;
 80037b0:	bf00      	nop
    }
}
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	08017bf4 	.word	0x08017bf4

080037bc <_ZN21ModbusAbsoluteEncoder14getSensorAngleEv>:

float ModbusAbsoluteEncoder::getSensorAngle() {
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
    return (float)(last_position % ENCODER_RESOLUTION) * RADIANS_PER_COUNT;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 80037ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80037ec <_ZN21ModbusAbsoluteEncoder14getSensorAngleEv+0x30>
 80037da:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80037de:	eeb0 0a67 	vmov.f32	s0, s15
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	3a490fdb 	.word	0x3a490fdb

080037f0 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm>:

uint32_t ModbusAbsoluteEncoder::reg2u32(uint16_t reg) {
    return (uint32_t)reg + ENCODER_ZERO_POSITION;
}

void ModbusAbsoluteEncoder::updateAngleFromPosition(uint32_t current_position) {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
    if(first_read) {
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d007      	beq.n	8003814 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm+0x24>
        zero_position = current_position;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
        first_read = false;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
    }

    last_position = current_position;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
    cached_angle = current_position * RADIANS_PER_COUNT;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003826:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003850 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm+0x60>
 800382a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
    if(angleUpdateCallback) {
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800383a:	2b00      	cmp	r3, #0
 800383c:	d004      	beq.n	8003848 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm+0x58>
        angleUpdateCallback(current_position);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8003844:	6838      	ldr	r0, [r7, #0]
 8003846:	4798      	blx	r3
    }
}
 8003848:	bf00      	nop
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	3a490fdb 	.word	0x3a490fdb

08003854 <_ZN21ModbusAbsoluteEncoder22setAngleUpdateCallbackEPFvmE>:

void ModbusAbsoluteEncoder::setAngleUpdateCallback(void (*callback)(uint32_t position)) {
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
    angleUpdateCallback = callback;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	ed87 0a01 	vstr	s0, [r7, #4]
 800387c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003880:	eef0 7ae7 	vabs.f32	s15, s15
 8003884:	eeb0 0a67 	vmov.f32	s0, s15
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
	...

08003894 <_ZN6Sensor6updateEv>:
#include "main.h"
#include <cmath>
#include "cmsis_os.h"
#define _2PI 6.28318530718f

void Sensor::update() {
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
    float val = getSensorAngle();
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	331c      	adds	r3, #28
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4798      	blx	r3
 80038a8:	ed87 0a03 	vstr	s0, [r7, #12]
    if (val<0) // sensor angles are strictly non-negative. Negative values are used to signal errors.
 80038ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80038b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b8:	d434      	bmi.n	8003924 <_ZN6Sensor6updateEv+0x90>
        return; // TODO signal error, e.g. via a flag and counter
    angle_prev_ts = HAL_GetTick();
 80038ba:	f000 fa45 	bl	8003d48 <HAL_GetTick>
 80038be:	4603      	mov	r3, r0
 80038c0:	461a      	mov	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	611a      	str	r2, [r3, #16]
    float d_angle = val - angle_prev;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80038cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80038d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038d4:	edc7 7a02 	vstr	s15, [r7, #8]
    // if overflow happened track it as full rotation
    if(abs(d_angle) > (0.8f*_2PI) ) full_rotations += ( d_angle > 0 ) ? -1 : 1; 
 80038d8:	ed97 0a02 	vldr	s0, [r7, #8]
 80038dc:	f7ff ffc9 	bl	8003872 <_ZSt3absf>
 80038e0:	eef0 7a40 	vmov.f32	s15, s0
 80038e4:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800392c <_ZN6Sensor6updateEv+0x98>
 80038e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f0:	bfcc      	ite	gt
 80038f2:	2301      	movgt	r3, #1
 80038f4:	2300      	movle	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00f      	beq.n	800391c <_ZN6Sensor6updateEv+0x88>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	edd7 7a02 	vldr	s15, [r7, #8]
 8003904:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390c:	dd02      	ble.n	8003914 <_ZN6Sensor6updateEv+0x80>
 800390e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003912:	e000      	b.n	8003916 <_ZN6Sensor6updateEv+0x82>
 8003914:	2201      	movs	r2, #1
 8003916:	441a      	add	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	61da      	str	r2, [r3, #28]
    angle_prev = val;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	e000      	b.n	8003926 <_ZN6Sensor6updateEv+0x92>
        return; // TODO signal error, e.g. via a flag and counter
 8003924:	bf00      	nop
}
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40a0d97c 	.word	0x40a0d97c

08003930 <_ZN6Sensor11getVelocityEv>:


 /** get current angular velocity (rad/s) */
float Sensor::getVelocity() {
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
    // calculate sample time
    float Ts = (angle_prev_ts - vel_angle_prev_ts)*1e-6f;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800394a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8003a08 <_ZN6Sensor11getVelocityEv+0xd8>
 800394e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003952:	edc7 7a03 	vstr	s15, [r7, #12]
    if (Ts < 0.0f) {    // handle micros() overflow - we need to reset vel_angle_prev_ts
 8003956:	edd7 7a03 	vldr	s15, [r7, #12]
 800395a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800395e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003962:	d50e      	bpl.n	8003982 <_ZN6Sensor11getVelocityEv+0x52>
        vel_angle_prev = angle_prev;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	615a      	str	r2, [r3, #20]
        vel_full_rotations = full_rotations;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	621a      	str	r2, [r3, #32]
        vel_angle_prev_ts = angle_prev_ts;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	619a      	str	r2, [r3, #24]
        return velocity;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	e038      	b.n	80039f4 <_ZN6Sensor11getVelocityEv+0xc4>
    }
    if (Ts < min_elapsed_time) return velocity; // don't update velocity if deltaT is too small
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	edd3 7a01 	vldr	s15, [r3, #4]
 8003988:	ed97 7a03 	vldr	s14, [r7, #12]
 800398c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003994:	d502      	bpl.n	800399c <_ZN6Sensor11getVelocityEv+0x6c>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	e02b      	b.n	80039f4 <_ZN6Sensor11getVelocityEv+0xc4>

    velocity = ( (float)(full_rotations - vel_full_rotations)*_2PI + (angle_prev - vel_angle_prev) ) / Ts;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69da      	ldr	r2, [r3, #28]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	ee07 3a90 	vmov	s15, r3
 80039aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ae:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003a0c <_ZN6Sensor11getVelocityEv+0xdc>
 80039b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	edd3 6a03 	vldr	s13, [r3, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	edd3 7a05 	vldr	s15, [r3, #20]
 80039c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80039c6:	ee77 6a27 	vadd.f32	s13, s14, s15
 80039ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80039ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	edc3 7a02 	vstr	s15, [r3, #8]
    vel_angle_prev = angle_prev;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	615a      	str	r2, [r3, #20]
    vel_full_rotations = full_rotations;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69da      	ldr	r2, [r3, #28]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	621a      	str	r2, [r3, #32]
    vel_angle_prev_ts = angle_prev_ts;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	619a      	str	r2, [r3, #24]
    return velocity;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
}
 80039f4:	ee07 3a90 	vmov	s15, r3
 80039f8:	eeb0 0a67 	vmov.f32	s0, s15
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	358637bd 	.word	0x358637bd
 8003a0c:	40c90fdb 	.word	0x40c90fdb

08003a10 <_ZN6Sensor4initEv>:



void Sensor::init() {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
    // initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
    getSensorAngle(); // call once
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	331c      	adds	r3, #28
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4798      	blx	r3
    osDelay(1);
 8003a24:	2001      	movs	r0, #1
 8003a26:	f00e fcb5 	bl	8012394 <osDelay>
    vel_angle_prev = getSensorAngle(); // call again
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	331c      	adds	r3, #28
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	4798      	blx	r3
 8003a36:	eef0 7a40 	vmov.f32	s15, s0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	edc3 7a05 	vstr	s15, [r3, #20]
    vel_angle_prev_ts = HAL_GetTick();
 8003a40:	f000 f982 	bl	8003d48 <HAL_GetTick>
 8003a44:	4603      	mov	r3, r0
 8003a46:	461a      	mov	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	619a      	str	r2, [r3, #24]
    osDelay(1);
 8003a4c:	2001      	movs	r0, #1
 8003a4e:	f00e fca1 	bl	8012394 <osDelay>
    getSensorAngle(); // call once
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	331c      	adds	r3, #28
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	4798      	blx	r3
    osDelay(1);
 8003a5e:	2001      	movs	r0, #1
 8003a60:	f00e fc98 	bl	8012394 <osDelay>
    angle_prev = getSensorAngle(); // call again
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	331c      	adds	r3, #28
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	4798      	blx	r3
 8003a70:	eef0 7a40 	vmov.f32	s15, s0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	edc3 7a03 	vstr	s15, [r3, #12]
    angle_prev_ts = HAL_GetTick();
 8003a7a:	f000 f965 	bl	8003d48 <HAL_GetTick>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	461a      	mov	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	611a      	str	r2, [r3, #16]
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <_ZN6Sensor18getMechanicalAngleEv>:


float Sensor::getMechanicalAngle() {
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
    return angle_prev;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	ee07 3a90 	vmov	s15, r3
}
 8003a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <_ZN6Sensor8getAngleEv>:



float Sensor::getAngle(){
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
    return (float)full_rotations * _2PI + angle_prev;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	ee07 3a90 	vmov	s15, r3
 8003abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ac0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003ae0 <_ZN6Sensor8getAngleEv+0x34>
 8003ac4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ace:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	40c90fdb 	.word	0x40c90fdb
 8003ae4:	00000000 	.word	0x00000000

08003ae8 <_ZN6Sensor15getPreciseAngleEv>:



double Sensor::getPreciseAngle() {
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
    return (double)full_rotations * (double)_2PI + (double)angle_prev;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	ee07 3a90 	vmov	s15, r3
 8003af8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003afc:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8003b20 <_ZN6Sensor15getPreciseAngleEv+0x38>
 8003b00:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b0e:	ee36 7b07 	vadd.f64	d7, d6, d7
}
 8003b12:	eeb0 0b47 	vmov.f64	d0, d7
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	60000000 	.word	0x60000000
 8003b24:	401921fb 	.word	0x401921fb

08003b28 <_ZN6Sensor16getFullRotationsEv>:



int32_t Sensor::getFullRotations() {
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
    return full_rotations;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69db      	ldr	r3, [r3, #28]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <_ZN6Sensor11needsSearchEv>:



int Sensor::needsSearch() {
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
    return 0; // default false
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	e019      	b.n	8003b9e <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 8003b6a:	4a17      	ldr	r2, [pc, #92]	@ (8003bc8 <HAL_UART_TxCpltCallback+0x70>)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d10e      	bne.n	8003b98 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8003b7a:	4a13      	ldr	r2, [pc, #76]	@ (8003bc8 <HAL_UART_TxCpltCallback+0x70>)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b82:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8003b86:	f107 0308 	add.w	r3, r7, #8
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2100      	movs	r1, #0
 8003b92:	f011 fb67 	bl	8015264 <xTaskGenericNotifyFromISR>
	   		break;
 8003b96:	e008      	b.n	8003baa <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <HAL_UART_TxCpltCallback+0x74>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	dbdf      	blt.n	8003b6a <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d007      	beq.n	8003bc0 <HAL_UART_TxCpltCallback+0x68>
 8003bb0:	4b07      	ldr	r3, [pc, #28]	@ (8003bd0 <HAL_UART_TxCpltCallback+0x78>)
 8003bb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8003bc0:	bf00      	nop
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	24000930 	.word	0x24000930
 8003bcc:	24000938 	.word	0x24000938
 8003bd0:	e000ed04 	.word	0xe000ed04

08003bd4 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8003bd4:	b590      	push	{r4, r7, lr}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	e042      	b.n	8003c6c <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8003be6:	4a2d      	ldr	r2, [pc, #180]	@ (8003c9c <HAL_UART_RxCpltCallback+0xc8>)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d137      	bne.n	8003c66 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 8003bf6:	4a29      	ldr	r2, [pc, #164]	@ (8003c9c <HAL_UART_RxCpltCallback+0xc8>)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bfe:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d139      	bne.n	8003c7a <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8003c06:	4a25      	ldr	r2, [pc, #148]	@ (8003c9c <HAL_UART_RxCpltCallback+0xc8>)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0e:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8003c12:	4922      	ldr	r1, [pc, #136]	@ (8003c9c <HAL_UART_RxCpltCallback+0xc8>)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c1a:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4610      	mov	r0, r2
 8003c22:	f7fd ff51 	bl	8001ac8 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8003c26:	4a1d      	ldr	r2, [pc, #116]	@ (8003c9c <HAL_UART_RxCpltCallback+0xc8>)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2e:	6858      	ldr	r0, [r3, #4]
 8003c30:	4a1a      	ldr	r2, [pc, #104]	@ (8003c9c <HAL_UART_RxCpltCallback+0xc8>)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c38:	33a6      	adds	r3, #166	@ 0xa6
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	f007 fc6f 	bl	800b520 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8003c42:	4a16      	ldr	r2, [pc, #88]	@ (8003c9c <HAL_UART_RxCpltCallback+0xc8>)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c4a:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 8003c4e:	f010 fc21 	bl	8014494 <xTaskGetTickCountFromISR>
 8003c52:	4602      	mov	r2, r0
 8003c54:	f107 0308 	add.w	r3, r7, #8
 8003c58:	2100      	movs	r1, #0
 8003c5a:	9100      	str	r1, [sp, #0]
 8003c5c:	2107      	movs	r1, #7
 8003c5e:	4620      	mov	r0, r4
 8003c60:	f011 fce2 	bl	8015628 <xTimerGenericCommand>
    		}
    		break;
 8003c64:	e009      	b.n	8003c7a <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca0 <HAL_UART_RxCpltCallback+0xcc>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4293      	cmp	r3, r2
 8003c76:	dbb6      	blt.n	8003be6 <HAL_UART_RxCpltCallback+0x12>
 8003c78:	e000      	b.n	8003c7c <HAL_UART_RxCpltCallback+0xa8>
    		break;
 8003c7a:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <HAL_UART_RxCpltCallback+0xbe>
 8003c82:	4b08      	ldr	r3, [pc, #32]	@ (8003ca4 <HAL_UART_RxCpltCallback+0xd0>)
 8003c84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 8003c92:	bf00      	nop
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd90      	pop	{r4, r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	24000930 	.word	0x24000930
 8003ca0:	24000938 	.word	0x24000938
 8003ca4:	e000ed04 	.word	0xe000ed04

08003ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cae:	2003      	movs	r0, #3
 8003cb0:	f000 f933 	bl	8003f1a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cb4:	f001 ff72 	bl	8005b9c <HAL_RCC_GetSysClockFreq>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	4b15      	ldr	r3, [pc, #84]	@ (8003d10 <HAL_Init+0x68>)
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	0a1b      	lsrs	r3, r3, #8
 8003cc0:	f003 030f 	and.w	r3, r3, #15
 8003cc4:	4913      	ldr	r1, [pc, #76]	@ (8003d14 <HAL_Init+0x6c>)
 8003cc6:	5ccb      	ldrb	r3, [r1, r3]
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8003d10 <HAL_Init+0x68>)
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	4a0e      	ldr	r2, [pc, #56]	@ (8003d14 <HAL_Init+0x6c>)
 8003cdc:	5cd3      	ldrb	r3, [r2, r3]
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8003d18 <HAL_Init+0x70>)
 8003cea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cec:	4a0b      	ldr	r2, [pc, #44]	@ (8003d1c <HAL_Init+0x74>)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cf2:	200f      	movs	r0, #15
 8003cf4:	f7fd fc9e 	bl	8001634 <HAL_InitTick>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e002      	b.n	8003d08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003d02:	f7fd fb4d 	bl	80013a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	58024400 	.word	0x58024400
 8003d14:	08017c8c 	.word	0x08017c8c
 8003d18:	24000004 	.word	0x24000004
 8003d1c:	24000000 	.word	0x24000000

08003d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d24:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <HAL_IncTick+0x20>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4b06      	ldr	r3, [pc, #24]	@ (8003d44 <HAL_IncTick+0x24>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4413      	add	r3, r2
 8003d30:	4a04      	ldr	r2, [pc, #16]	@ (8003d44 <HAL_IncTick+0x24>)
 8003d32:	6013      	str	r3, [r2, #0]
}
 8003d34:	bf00      	nop
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	2400000c 	.word	0x2400000c
 8003d44:	2400093c 	.word	0x2400093c

08003d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d4c:	4b03      	ldr	r3, [pc, #12]	@ (8003d5c <HAL_GetTick+0x14>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	2400093c 	.word	0x2400093c

08003d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d68:	f7ff ffee 	bl	8003d48 <HAL_GetTick>
 8003d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d78:	d005      	beq.n	8003d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003da4 <HAL_Delay+0x44>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d86:	bf00      	nop
 8003d88:	f7ff ffde 	bl	8003d48 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d8f7      	bhi.n	8003d88 <HAL_Delay+0x28>
  {
  }
}
 8003d98:	bf00      	nop
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	2400000c 	.word	0x2400000c

08003da8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003dac:	4b03      	ldr	r3, [pc, #12]	@ (8003dbc <HAL_GetREVID+0x14>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	0c1b      	lsrs	r3, r3, #16
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	5c001000 	.word	0x5c001000

08003dc0 <__NVIC_SetPriorityGrouping>:
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e00 <__NVIC_SetPriorityGrouping+0x40>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003de8:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <__NVIC_SetPriorityGrouping+0x44>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dee:	4a04      	ldr	r2, [pc, #16]	@ (8003e00 <__NVIC_SetPriorityGrouping+0x40>)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	60d3      	str	r3, [r2, #12]
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	e000ed00 	.word	0xe000ed00
 8003e04:	05fa0000 	.word	0x05fa0000

08003e08 <__NVIC_GetPriorityGrouping>:
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e0c:	4b04      	ldr	r3, [pc, #16]	@ (8003e20 <__NVIC_GetPriorityGrouping+0x18>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	0a1b      	lsrs	r3, r3, #8
 8003e12:	f003 0307 	and.w	r3, r3, #7
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	e000ed00 	.word	0xe000ed00

08003e24 <__NVIC_EnableIRQ>:
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	db0b      	blt.n	8003e4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e36:	88fb      	ldrh	r3, [r7, #6]
 8003e38:	f003 021f 	and.w	r2, r3, #31
 8003e3c:	4907      	ldr	r1, [pc, #28]	@ (8003e5c <__NVIC_EnableIRQ+0x38>)
 8003e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	2001      	movs	r0, #1
 8003e46:	fa00 f202 	lsl.w	r2, r0, r2
 8003e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	e000e100 	.word	0xe000e100

08003e60 <__NVIC_SetPriority>:
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	6039      	str	r1, [r7, #0]
 8003e6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	db0a      	blt.n	8003e8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	490c      	ldr	r1, [pc, #48]	@ (8003eac <__NVIC_SetPriority+0x4c>)
 8003e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e7e:	0112      	lsls	r2, r2, #4
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	440b      	add	r3, r1
 8003e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003e88:	e00a      	b.n	8003ea0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	4908      	ldr	r1, [pc, #32]	@ (8003eb0 <__NVIC_SetPriority+0x50>)
 8003e90:	88fb      	ldrh	r3, [r7, #6]
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	3b04      	subs	r3, #4
 8003e98:	0112      	lsls	r2, r2, #4
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	761a      	strb	r2, [r3, #24]
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	e000e100 	.word	0xe000e100
 8003eb0:	e000ed00 	.word	0xe000ed00

08003eb4 <NVIC_EncodePriority>:
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b089      	sub	sp, #36	@ 0x24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f1c3 0307 	rsb	r3, r3, #7
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	bf28      	it	cs
 8003ed2:	2304      	movcs	r3, #4
 8003ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	2b06      	cmp	r3, #6
 8003edc:	d902      	bls.n	8003ee4 <NVIC_EncodePriority+0x30>
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	3b03      	subs	r3, #3
 8003ee2:	e000      	b.n	8003ee6 <NVIC_EncodePriority+0x32>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	43da      	mvns	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	401a      	ands	r2, r3
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003efc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	fa01 f303 	lsl.w	r3, r1, r3
 8003f06:	43d9      	mvns	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f0c:	4313      	orrs	r3, r2
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3724      	adds	r7, #36	@ 0x24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff ff4c 	bl	8003dc0 <__NVIC_SetPriorityGrouping>
}
 8003f28:	bf00      	nop
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f3e:	f7ff ff63 	bl	8003e08 <__NVIC_GetPriorityGrouping>
 8003f42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	6978      	ldr	r0, [r7, #20]
 8003f4a:	f7ff ffb3 	bl	8003eb4 <NVIC_EncodePriority>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f54:	4611      	mov	r1, r2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff ff82 	bl	8003e60 <__NVIC_SetPriority>
}
 8003f5c:	bf00      	nop
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff ff56 	bl	8003e24 <__NVIC_EnableIRQ>
}
 8003f78:	bf00      	nop
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003f84:	f3bf 8f5f 	dmb	sy
}
 8003f88:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003f8a:	4b07      	ldr	r3, [pc, #28]	@ (8003fa8 <HAL_MPU_Disable+0x28>)
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8e:	4a06      	ldr	r2, [pc, #24]	@ (8003fa8 <HAL_MPU_Disable+0x28>)
 8003f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f94:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003f96:	4b05      	ldr	r3, [pc, #20]	@ (8003fac <HAL_MPU_Disable+0x2c>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	605a      	str	r2, [r3, #4]
}
 8003f9c:	bf00      	nop
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	e000ed00 	.word	0xe000ed00
 8003fac:	e000ed90 	.word	0xe000ed90

08003fb0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003fb8:	4a0b      	ldr	r2, [pc, #44]	@ (8003fe8 <HAL_MPU_Enable+0x38>)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003fec <HAL_MPU_Enable+0x3c>)
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	4a09      	ldr	r2, [pc, #36]	@ (8003fec <HAL_MPU_Enable+0x3c>)
 8003fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fcc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003fce:	f3bf 8f4f 	dsb	sy
}
 8003fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003fd4:	f3bf 8f6f 	isb	sy
}
 8003fd8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	e000ed90 	.word	0xe000ed90
 8003fec:	e000ed00 	.word	0xe000ed00

08003ff0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	785a      	ldrb	r2, [r3, #1]
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8004074 <HAL_MPU_ConfigRegion+0x84>)
 8003ffe:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d029      	beq.n	800405c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004008:	4a1a      	ldr	r2, [pc, #104]	@ (8004074 <HAL_MPU_ConfigRegion+0x84>)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	7b1b      	ldrb	r3, [r3, #12]
 8004014:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	7adb      	ldrb	r3, [r3, #11]
 800401a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800401c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	7a9b      	ldrb	r3, [r3, #10]
 8004022:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004024:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	7b5b      	ldrb	r3, [r3, #13]
 800402a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800402c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	7b9b      	ldrb	r3, [r3, #14]
 8004032:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004034:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	7bdb      	ldrb	r3, [r3, #15]
 800403a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800403c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	7a5b      	ldrb	r3, [r3, #9]
 8004042:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004044:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	7a1b      	ldrb	r3, [r3, #8]
 800404a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800404c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	7812      	ldrb	r2, [r2, #0]
 8004052:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004054:	4a07      	ldr	r2, [pc, #28]	@ (8004074 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004056:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004058:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800405a:	e005      	b.n	8004068 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800405c:	4b05      	ldr	r3, [pc, #20]	@ (8004074 <HAL_MPU_ConfigRegion+0x84>)
 800405e:	2200      	movs	r2, #0
 8004060:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8004062:	4b04      	ldr	r3, [pc, #16]	@ (8004074 <HAL_MPU_ConfigRegion+0x84>)
 8004064:	2200      	movs	r2, #0
 8004066:	611a      	str	r2, [r3, #16]
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	e000ed90 	.word	0xe000ed90

08004078 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004080:	f7ff fe62 	bl	8003d48 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e2dc      	b.n	800464a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d008      	beq.n	80040ae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2280      	movs	r2, #128	@ 0x80
 80040a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e2cd      	b.n	800464a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a76      	ldr	r2, [pc, #472]	@ (800428c <HAL_DMA_Abort+0x214>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d04a      	beq.n	800414e <HAL_DMA_Abort+0xd6>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a74      	ldr	r2, [pc, #464]	@ (8004290 <HAL_DMA_Abort+0x218>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d045      	beq.n	800414e <HAL_DMA_Abort+0xd6>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a73      	ldr	r2, [pc, #460]	@ (8004294 <HAL_DMA_Abort+0x21c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d040      	beq.n	800414e <HAL_DMA_Abort+0xd6>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a71      	ldr	r2, [pc, #452]	@ (8004298 <HAL_DMA_Abort+0x220>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d03b      	beq.n	800414e <HAL_DMA_Abort+0xd6>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a70      	ldr	r2, [pc, #448]	@ (800429c <HAL_DMA_Abort+0x224>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d036      	beq.n	800414e <HAL_DMA_Abort+0xd6>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a6e      	ldr	r2, [pc, #440]	@ (80042a0 <HAL_DMA_Abort+0x228>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d031      	beq.n	800414e <HAL_DMA_Abort+0xd6>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a6d      	ldr	r2, [pc, #436]	@ (80042a4 <HAL_DMA_Abort+0x22c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d02c      	beq.n	800414e <HAL_DMA_Abort+0xd6>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a6b      	ldr	r2, [pc, #428]	@ (80042a8 <HAL_DMA_Abort+0x230>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d027      	beq.n	800414e <HAL_DMA_Abort+0xd6>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a6a      	ldr	r2, [pc, #424]	@ (80042ac <HAL_DMA_Abort+0x234>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d022      	beq.n	800414e <HAL_DMA_Abort+0xd6>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a68      	ldr	r2, [pc, #416]	@ (80042b0 <HAL_DMA_Abort+0x238>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01d      	beq.n	800414e <HAL_DMA_Abort+0xd6>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a67      	ldr	r2, [pc, #412]	@ (80042b4 <HAL_DMA_Abort+0x23c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d018      	beq.n	800414e <HAL_DMA_Abort+0xd6>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a65      	ldr	r2, [pc, #404]	@ (80042b8 <HAL_DMA_Abort+0x240>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <HAL_DMA_Abort+0xd6>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a64      	ldr	r2, [pc, #400]	@ (80042bc <HAL_DMA_Abort+0x244>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00e      	beq.n	800414e <HAL_DMA_Abort+0xd6>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a62      	ldr	r2, [pc, #392]	@ (80042c0 <HAL_DMA_Abort+0x248>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d009      	beq.n	800414e <HAL_DMA_Abort+0xd6>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a61      	ldr	r2, [pc, #388]	@ (80042c4 <HAL_DMA_Abort+0x24c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d004      	beq.n	800414e <HAL_DMA_Abort+0xd6>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a5f      	ldr	r2, [pc, #380]	@ (80042c8 <HAL_DMA_Abort+0x250>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d101      	bne.n	8004152 <HAL_DMA_Abort+0xda>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <HAL_DMA_Abort+0xdc>
 8004152:	2300      	movs	r3, #0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d013      	beq.n	8004180 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 021e 	bic.w	r2, r2, #30
 8004166:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004176:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	e00a      	b.n	8004196 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 020e 	bic.w	r2, r2, #14
 800418e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a3c      	ldr	r2, [pc, #240]	@ (800428c <HAL_DMA_Abort+0x214>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d072      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a3a      	ldr	r2, [pc, #232]	@ (8004290 <HAL_DMA_Abort+0x218>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d06d      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a39      	ldr	r2, [pc, #228]	@ (8004294 <HAL_DMA_Abort+0x21c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d068      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a37      	ldr	r2, [pc, #220]	@ (8004298 <HAL_DMA_Abort+0x220>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d063      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a36      	ldr	r2, [pc, #216]	@ (800429c <HAL_DMA_Abort+0x224>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d05e      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a34      	ldr	r2, [pc, #208]	@ (80042a0 <HAL_DMA_Abort+0x228>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d059      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a33      	ldr	r2, [pc, #204]	@ (80042a4 <HAL_DMA_Abort+0x22c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d054      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a31      	ldr	r2, [pc, #196]	@ (80042a8 <HAL_DMA_Abort+0x230>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d04f      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a30      	ldr	r2, [pc, #192]	@ (80042ac <HAL_DMA_Abort+0x234>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d04a      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a2e      	ldr	r2, [pc, #184]	@ (80042b0 <HAL_DMA_Abort+0x238>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d045      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a2d      	ldr	r2, [pc, #180]	@ (80042b4 <HAL_DMA_Abort+0x23c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d040      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a2b      	ldr	r2, [pc, #172]	@ (80042b8 <HAL_DMA_Abort+0x240>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d03b      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a2a      	ldr	r2, [pc, #168]	@ (80042bc <HAL_DMA_Abort+0x244>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d036      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a28      	ldr	r2, [pc, #160]	@ (80042c0 <HAL_DMA_Abort+0x248>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d031      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a27      	ldr	r2, [pc, #156]	@ (80042c4 <HAL_DMA_Abort+0x24c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d02c      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a25      	ldr	r2, [pc, #148]	@ (80042c8 <HAL_DMA_Abort+0x250>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d027      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a24      	ldr	r2, [pc, #144]	@ (80042cc <HAL_DMA_Abort+0x254>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d022      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a22      	ldr	r2, [pc, #136]	@ (80042d0 <HAL_DMA_Abort+0x258>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d01d      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a21      	ldr	r2, [pc, #132]	@ (80042d4 <HAL_DMA_Abort+0x25c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d018      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1f      	ldr	r2, [pc, #124]	@ (80042d8 <HAL_DMA_Abort+0x260>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d013      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a1e      	ldr	r2, [pc, #120]	@ (80042dc <HAL_DMA_Abort+0x264>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00e      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a1c      	ldr	r2, [pc, #112]	@ (80042e0 <HAL_DMA_Abort+0x268>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d009      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a1b      	ldr	r2, [pc, #108]	@ (80042e4 <HAL_DMA_Abort+0x26c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d004      	beq.n	8004286 <HAL_DMA_Abort+0x20e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a19      	ldr	r2, [pc, #100]	@ (80042e8 <HAL_DMA_Abort+0x270>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d132      	bne.n	80042ec <HAL_DMA_Abort+0x274>
 8004286:	2301      	movs	r3, #1
 8004288:	e031      	b.n	80042ee <HAL_DMA_Abort+0x276>
 800428a:	bf00      	nop
 800428c:	40020010 	.word	0x40020010
 8004290:	40020028 	.word	0x40020028
 8004294:	40020040 	.word	0x40020040
 8004298:	40020058 	.word	0x40020058
 800429c:	40020070 	.word	0x40020070
 80042a0:	40020088 	.word	0x40020088
 80042a4:	400200a0 	.word	0x400200a0
 80042a8:	400200b8 	.word	0x400200b8
 80042ac:	40020410 	.word	0x40020410
 80042b0:	40020428 	.word	0x40020428
 80042b4:	40020440 	.word	0x40020440
 80042b8:	40020458 	.word	0x40020458
 80042bc:	40020470 	.word	0x40020470
 80042c0:	40020488 	.word	0x40020488
 80042c4:	400204a0 	.word	0x400204a0
 80042c8:	400204b8 	.word	0x400204b8
 80042cc:	58025408 	.word	0x58025408
 80042d0:	5802541c 	.word	0x5802541c
 80042d4:	58025430 	.word	0x58025430
 80042d8:	58025444 	.word	0x58025444
 80042dc:	58025458 	.word	0x58025458
 80042e0:	5802546c 	.word	0x5802546c
 80042e4:	58025480 	.word	0x58025480
 80042e8:	58025494 	.word	0x58025494
 80042ec:	2300      	movs	r3, #0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d007      	beq.n	8004302 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004300:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a6d      	ldr	r2, [pc, #436]	@ (80044bc <HAL_DMA_Abort+0x444>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d04a      	beq.n	80043a2 <HAL_DMA_Abort+0x32a>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a6b      	ldr	r2, [pc, #428]	@ (80044c0 <HAL_DMA_Abort+0x448>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d045      	beq.n	80043a2 <HAL_DMA_Abort+0x32a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a6a      	ldr	r2, [pc, #424]	@ (80044c4 <HAL_DMA_Abort+0x44c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d040      	beq.n	80043a2 <HAL_DMA_Abort+0x32a>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a68      	ldr	r2, [pc, #416]	@ (80044c8 <HAL_DMA_Abort+0x450>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d03b      	beq.n	80043a2 <HAL_DMA_Abort+0x32a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a67      	ldr	r2, [pc, #412]	@ (80044cc <HAL_DMA_Abort+0x454>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d036      	beq.n	80043a2 <HAL_DMA_Abort+0x32a>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a65      	ldr	r2, [pc, #404]	@ (80044d0 <HAL_DMA_Abort+0x458>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d031      	beq.n	80043a2 <HAL_DMA_Abort+0x32a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a64      	ldr	r2, [pc, #400]	@ (80044d4 <HAL_DMA_Abort+0x45c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d02c      	beq.n	80043a2 <HAL_DMA_Abort+0x32a>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a62      	ldr	r2, [pc, #392]	@ (80044d8 <HAL_DMA_Abort+0x460>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d027      	beq.n	80043a2 <HAL_DMA_Abort+0x32a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a61      	ldr	r2, [pc, #388]	@ (80044dc <HAL_DMA_Abort+0x464>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d022      	beq.n	80043a2 <HAL_DMA_Abort+0x32a>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a5f      	ldr	r2, [pc, #380]	@ (80044e0 <HAL_DMA_Abort+0x468>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d01d      	beq.n	80043a2 <HAL_DMA_Abort+0x32a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a5e      	ldr	r2, [pc, #376]	@ (80044e4 <HAL_DMA_Abort+0x46c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d018      	beq.n	80043a2 <HAL_DMA_Abort+0x32a>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a5c      	ldr	r2, [pc, #368]	@ (80044e8 <HAL_DMA_Abort+0x470>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <HAL_DMA_Abort+0x32a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a5b      	ldr	r2, [pc, #364]	@ (80044ec <HAL_DMA_Abort+0x474>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00e      	beq.n	80043a2 <HAL_DMA_Abort+0x32a>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a59      	ldr	r2, [pc, #356]	@ (80044f0 <HAL_DMA_Abort+0x478>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d009      	beq.n	80043a2 <HAL_DMA_Abort+0x32a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a58      	ldr	r2, [pc, #352]	@ (80044f4 <HAL_DMA_Abort+0x47c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d004      	beq.n	80043a2 <HAL_DMA_Abort+0x32a>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a56      	ldr	r2, [pc, #344]	@ (80044f8 <HAL_DMA_Abort+0x480>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d108      	bne.n	80043b4 <HAL_DMA_Abort+0x33c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0201 	bic.w	r2, r2, #1
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	e007      	b.n	80043c4 <HAL_DMA_Abort+0x34c>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0201 	bic.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80043c4:	e013      	b.n	80043ee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043c6:	f7ff fcbf 	bl	8003d48 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b05      	cmp	r3, #5
 80043d2:	d90c      	bls.n	80043ee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2203      	movs	r2, #3
 80043de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e12d      	b.n	800464a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e5      	bne.n	80043c6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a2f      	ldr	r2, [pc, #188]	@ (80044bc <HAL_DMA_Abort+0x444>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d04a      	beq.n	800449a <HAL_DMA_Abort+0x422>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a2d      	ldr	r2, [pc, #180]	@ (80044c0 <HAL_DMA_Abort+0x448>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d045      	beq.n	800449a <HAL_DMA_Abort+0x422>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a2c      	ldr	r2, [pc, #176]	@ (80044c4 <HAL_DMA_Abort+0x44c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d040      	beq.n	800449a <HAL_DMA_Abort+0x422>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a2a      	ldr	r2, [pc, #168]	@ (80044c8 <HAL_DMA_Abort+0x450>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d03b      	beq.n	800449a <HAL_DMA_Abort+0x422>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a29      	ldr	r2, [pc, #164]	@ (80044cc <HAL_DMA_Abort+0x454>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d036      	beq.n	800449a <HAL_DMA_Abort+0x422>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a27      	ldr	r2, [pc, #156]	@ (80044d0 <HAL_DMA_Abort+0x458>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d031      	beq.n	800449a <HAL_DMA_Abort+0x422>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a26      	ldr	r2, [pc, #152]	@ (80044d4 <HAL_DMA_Abort+0x45c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d02c      	beq.n	800449a <HAL_DMA_Abort+0x422>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a24      	ldr	r2, [pc, #144]	@ (80044d8 <HAL_DMA_Abort+0x460>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d027      	beq.n	800449a <HAL_DMA_Abort+0x422>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a23      	ldr	r2, [pc, #140]	@ (80044dc <HAL_DMA_Abort+0x464>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d022      	beq.n	800449a <HAL_DMA_Abort+0x422>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a21      	ldr	r2, [pc, #132]	@ (80044e0 <HAL_DMA_Abort+0x468>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d01d      	beq.n	800449a <HAL_DMA_Abort+0x422>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a20      	ldr	r2, [pc, #128]	@ (80044e4 <HAL_DMA_Abort+0x46c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d018      	beq.n	800449a <HAL_DMA_Abort+0x422>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1e      	ldr	r2, [pc, #120]	@ (80044e8 <HAL_DMA_Abort+0x470>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d013      	beq.n	800449a <HAL_DMA_Abort+0x422>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1d      	ldr	r2, [pc, #116]	@ (80044ec <HAL_DMA_Abort+0x474>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00e      	beq.n	800449a <HAL_DMA_Abort+0x422>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a1b      	ldr	r2, [pc, #108]	@ (80044f0 <HAL_DMA_Abort+0x478>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d009      	beq.n	800449a <HAL_DMA_Abort+0x422>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1a      	ldr	r2, [pc, #104]	@ (80044f4 <HAL_DMA_Abort+0x47c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_DMA_Abort+0x422>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a18      	ldr	r2, [pc, #96]	@ (80044f8 <HAL_DMA_Abort+0x480>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d101      	bne.n	800449e <HAL_DMA_Abort+0x426>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <HAL_DMA_Abort+0x428>
 800449e:	2300      	movs	r3, #0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d02b      	beq.n	80044fc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ae:	f003 031f 	and.w	r3, r3, #31
 80044b2:	223f      	movs	r2, #63	@ 0x3f
 80044b4:	409a      	lsls	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	609a      	str	r2, [r3, #8]
 80044ba:	e02a      	b.n	8004512 <HAL_DMA_Abort+0x49a>
 80044bc:	40020010 	.word	0x40020010
 80044c0:	40020028 	.word	0x40020028
 80044c4:	40020040 	.word	0x40020040
 80044c8:	40020058 	.word	0x40020058
 80044cc:	40020070 	.word	0x40020070
 80044d0:	40020088 	.word	0x40020088
 80044d4:	400200a0 	.word	0x400200a0
 80044d8:	400200b8 	.word	0x400200b8
 80044dc:	40020410 	.word	0x40020410
 80044e0:	40020428 	.word	0x40020428
 80044e4:	40020440 	.word	0x40020440
 80044e8:	40020458 	.word	0x40020458
 80044ec:	40020470 	.word	0x40020470
 80044f0:	40020488 	.word	0x40020488
 80044f4:	400204a0 	.word	0x400204a0
 80044f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004500:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004506:	f003 031f 	and.w	r3, r3, #31
 800450a:	2201      	movs	r2, #1
 800450c:	409a      	lsls	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a4f      	ldr	r2, [pc, #316]	@ (8004654 <HAL_DMA_Abort+0x5dc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d072      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a4d      	ldr	r2, [pc, #308]	@ (8004658 <HAL_DMA_Abort+0x5e0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d06d      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a4c      	ldr	r2, [pc, #304]	@ (800465c <HAL_DMA_Abort+0x5e4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d068      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a4a      	ldr	r2, [pc, #296]	@ (8004660 <HAL_DMA_Abort+0x5e8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d063      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a49      	ldr	r2, [pc, #292]	@ (8004664 <HAL_DMA_Abort+0x5ec>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d05e      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a47      	ldr	r2, [pc, #284]	@ (8004668 <HAL_DMA_Abort+0x5f0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d059      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a46      	ldr	r2, [pc, #280]	@ (800466c <HAL_DMA_Abort+0x5f4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d054      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a44      	ldr	r2, [pc, #272]	@ (8004670 <HAL_DMA_Abort+0x5f8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d04f      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a43      	ldr	r2, [pc, #268]	@ (8004674 <HAL_DMA_Abort+0x5fc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d04a      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a41      	ldr	r2, [pc, #260]	@ (8004678 <HAL_DMA_Abort+0x600>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d045      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a40      	ldr	r2, [pc, #256]	@ (800467c <HAL_DMA_Abort+0x604>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d040      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a3e      	ldr	r2, [pc, #248]	@ (8004680 <HAL_DMA_Abort+0x608>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d03b      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a3d      	ldr	r2, [pc, #244]	@ (8004684 <HAL_DMA_Abort+0x60c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d036      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a3b      	ldr	r2, [pc, #236]	@ (8004688 <HAL_DMA_Abort+0x610>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d031      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a3a      	ldr	r2, [pc, #232]	@ (800468c <HAL_DMA_Abort+0x614>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d02c      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a38      	ldr	r2, [pc, #224]	@ (8004690 <HAL_DMA_Abort+0x618>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d027      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a37      	ldr	r2, [pc, #220]	@ (8004694 <HAL_DMA_Abort+0x61c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d022      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a35      	ldr	r2, [pc, #212]	@ (8004698 <HAL_DMA_Abort+0x620>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d01d      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a34      	ldr	r2, [pc, #208]	@ (800469c <HAL_DMA_Abort+0x624>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d018      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a32      	ldr	r2, [pc, #200]	@ (80046a0 <HAL_DMA_Abort+0x628>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d013      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a31      	ldr	r2, [pc, #196]	@ (80046a4 <HAL_DMA_Abort+0x62c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00e      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a2f      	ldr	r2, [pc, #188]	@ (80046a8 <HAL_DMA_Abort+0x630>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d009      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a2e      	ldr	r2, [pc, #184]	@ (80046ac <HAL_DMA_Abort+0x634>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_DMA_Abort+0x58a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a2c      	ldr	r2, [pc, #176]	@ (80046b0 <HAL_DMA_Abort+0x638>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d101      	bne.n	8004606 <HAL_DMA_Abort+0x58e>
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <HAL_DMA_Abort+0x590>
 8004606:	2300      	movs	r3, #0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d015      	beq.n	8004638 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004614:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00c      	beq.n	8004638 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004628:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800462c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004636:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40020010 	.word	0x40020010
 8004658:	40020028 	.word	0x40020028
 800465c:	40020040 	.word	0x40020040
 8004660:	40020058 	.word	0x40020058
 8004664:	40020070 	.word	0x40020070
 8004668:	40020088 	.word	0x40020088
 800466c:	400200a0 	.word	0x400200a0
 8004670:	400200b8 	.word	0x400200b8
 8004674:	40020410 	.word	0x40020410
 8004678:	40020428 	.word	0x40020428
 800467c:	40020440 	.word	0x40020440
 8004680:	40020458 	.word	0x40020458
 8004684:	40020470 	.word	0x40020470
 8004688:	40020488 	.word	0x40020488
 800468c:	400204a0 	.word	0x400204a0
 8004690:	400204b8 	.word	0x400204b8
 8004694:	58025408 	.word	0x58025408
 8004698:	5802541c 	.word	0x5802541c
 800469c:	58025430 	.word	0x58025430
 80046a0:	58025444 	.word	0x58025444
 80046a4:	58025458 	.word	0x58025458
 80046a8:	5802546c 	.word	0x5802546c
 80046ac:	58025480 	.word	0x58025480
 80046b0:	58025494 	.word	0x58025494

080046b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e237      	b.n	8004b36 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d004      	beq.n	80046dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2280      	movs	r2, #128	@ 0x80
 80046d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e22c      	b.n	8004b36 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a5c      	ldr	r2, [pc, #368]	@ (8004854 <HAL_DMA_Abort_IT+0x1a0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d04a      	beq.n	800477c <HAL_DMA_Abort_IT+0xc8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004858 <HAL_DMA_Abort_IT+0x1a4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d045      	beq.n	800477c <HAL_DMA_Abort_IT+0xc8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a59      	ldr	r2, [pc, #356]	@ (800485c <HAL_DMA_Abort_IT+0x1a8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d040      	beq.n	800477c <HAL_DMA_Abort_IT+0xc8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a58      	ldr	r2, [pc, #352]	@ (8004860 <HAL_DMA_Abort_IT+0x1ac>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d03b      	beq.n	800477c <HAL_DMA_Abort_IT+0xc8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a56      	ldr	r2, [pc, #344]	@ (8004864 <HAL_DMA_Abort_IT+0x1b0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d036      	beq.n	800477c <HAL_DMA_Abort_IT+0xc8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a55      	ldr	r2, [pc, #340]	@ (8004868 <HAL_DMA_Abort_IT+0x1b4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d031      	beq.n	800477c <HAL_DMA_Abort_IT+0xc8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a53      	ldr	r2, [pc, #332]	@ (800486c <HAL_DMA_Abort_IT+0x1b8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d02c      	beq.n	800477c <HAL_DMA_Abort_IT+0xc8>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a52      	ldr	r2, [pc, #328]	@ (8004870 <HAL_DMA_Abort_IT+0x1bc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d027      	beq.n	800477c <HAL_DMA_Abort_IT+0xc8>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a50      	ldr	r2, [pc, #320]	@ (8004874 <HAL_DMA_Abort_IT+0x1c0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d022      	beq.n	800477c <HAL_DMA_Abort_IT+0xc8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a4f      	ldr	r2, [pc, #316]	@ (8004878 <HAL_DMA_Abort_IT+0x1c4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d01d      	beq.n	800477c <HAL_DMA_Abort_IT+0xc8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a4d      	ldr	r2, [pc, #308]	@ (800487c <HAL_DMA_Abort_IT+0x1c8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d018      	beq.n	800477c <HAL_DMA_Abort_IT+0xc8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a4c      	ldr	r2, [pc, #304]	@ (8004880 <HAL_DMA_Abort_IT+0x1cc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d013      	beq.n	800477c <HAL_DMA_Abort_IT+0xc8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a4a      	ldr	r2, [pc, #296]	@ (8004884 <HAL_DMA_Abort_IT+0x1d0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00e      	beq.n	800477c <HAL_DMA_Abort_IT+0xc8>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a49      	ldr	r2, [pc, #292]	@ (8004888 <HAL_DMA_Abort_IT+0x1d4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d009      	beq.n	800477c <HAL_DMA_Abort_IT+0xc8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a47      	ldr	r2, [pc, #284]	@ (800488c <HAL_DMA_Abort_IT+0x1d8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_DMA_Abort_IT+0xc8>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a46      	ldr	r2, [pc, #280]	@ (8004890 <HAL_DMA_Abort_IT+0x1dc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d101      	bne.n	8004780 <HAL_DMA_Abort_IT+0xcc>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <HAL_DMA_Abort_IT+0xce>
 8004780:	2300      	movs	r3, #0
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 8086 	beq.w	8004894 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2204      	movs	r2, #4
 800478c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a2f      	ldr	r2, [pc, #188]	@ (8004854 <HAL_DMA_Abort_IT+0x1a0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d04a      	beq.n	8004830 <HAL_DMA_Abort_IT+0x17c>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a2e      	ldr	r2, [pc, #184]	@ (8004858 <HAL_DMA_Abort_IT+0x1a4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d045      	beq.n	8004830 <HAL_DMA_Abort_IT+0x17c>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a2c      	ldr	r2, [pc, #176]	@ (800485c <HAL_DMA_Abort_IT+0x1a8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d040      	beq.n	8004830 <HAL_DMA_Abort_IT+0x17c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004860 <HAL_DMA_Abort_IT+0x1ac>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d03b      	beq.n	8004830 <HAL_DMA_Abort_IT+0x17c>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a29      	ldr	r2, [pc, #164]	@ (8004864 <HAL_DMA_Abort_IT+0x1b0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d036      	beq.n	8004830 <HAL_DMA_Abort_IT+0x17c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a28      	ldr	r2, [pc, #160]	@ (8004868 <HAL_DMA_Abort_IT+0x1b4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d031      	beq.n	8004830 <HAL_DMA_Abort_IT+0x17c>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a26      	ldr	r2, [pc, #152]	@ (800486c <HAL_DMA_Abort_IT+0x1b8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d02c      	beq.n	8004830 <HAL_DMA_Abort_IT+0x17c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a25      	ldr	r2, [pc, #148]	@ (8004870 <HAL_DMA_Abort_IT+0x1bc>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d027      	beq.n	8004830 <HAL_DMA_Abort_IT+0x17c>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a23      	ldr	r2, [pc, #140]	@ (8004874 <HAL_DMA_Abort_IT+0x1c0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d022      	beq.n	8004830 <HAL_DMA_Abort_IT+0x17c>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a22      	ldr	r2, [pc, #136]	@ (8004878 <HAL_DMA_Abort_IT+0x1c4>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d01d      	beq.n	8004830 <HAL_DMA_Abort_IT+0x17c>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a20      	ldr	r2, [pc, #128]	@ (800487c <HAL_DMA_Abort_IT+0x1c8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d018      	beq.n	8004830 <HAL_DMA_Abort_IT+0x17c>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a1f      	ldr	r2, [pc, #124]	@ (8004880 <HAL_DMA_Abort_IT+0x1cc>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d013      	beq.n	8004830 <HAL_DMA_Abort_IT+0x17c>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1d      	ldr	r2, [pc, #116]	@ (8004884 <HAL_DMA_Abort_IT+0x1d0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00e      	beq.n	8004830 <HAL_DMA_Abort_IT+0x17c>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a1c      	ldr	r2, [pc, #112]	@ (8004888 <HAL_DMA_Abort_IT+0x1d4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d009      	beq.n	8004830 <HAL_DMA_Abort_IT+0x17c>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1a      	ldr	r2, [pc, #104]	@ (800488c <HAL_DMA_Abort_IT+0x1d8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d004      	beq.n	8004830 <HAL_DMA_Abort_IT+0x17c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a19      	ldr	r2, [pc, #100]	@ (8004890 <HAL_DMA_Abort_IT+0x1dc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d108      	bne.n	8004842 <HAL_DMA_Abort_IT+0x18e>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0201 	bic.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	e178      	b.n	8004b34 <HAL_DMA_Abort_IT+0x480>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0201 	bic.w	r2, r2, #1
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	e16f      	b.n	8004b34 <HAL_DMA_Abort_IT+0x480>
 8004854:	40020010 	.word	0x40020010
 8004858:	40020028 	.word	0x40020028
 800485c:	40020040 	.word	0x40020040
 8004860:	40020058 	.word	0x40020058
 8004864:	40020070 	.word	0x40020070
 8004868:	40020088 	.word	0x40020088
 800486c:	400200a0 	.word	0x400200a0
 8004870:	400200b8 	.word	0x400200b8
 8004874:	40020410 	.word	0x40020410
 8004878:	40020428 	.word	0x40020428
 800487c:	40020440 	.word	0x40020440
 8004880:	40020458 	.word	0x40020458
 8004884:	40020470 	.word	0x40020470
 8004888:	40020488 	.word	0x40020488
 800488c:	400204a0 	.word	0x400204a0
 8004890:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 020e 	bic.w	r2, r2, #14
 80048a2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a6c      	ldr	r2, [pc, #432]	@ (8004a5c <HAL_DMA_Abort_IT+0x3a8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d04a      	beq.n	8004944 <HAL_DMA_Abort_IT+0x290>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a6b      	ldr	r2, [pc, #428]	@ (8004a60 <HAL_DMA_Abort_IT+0x3ac>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d045      	beq.n	8004944 <HAL_DMA_Abort_IT+0x290>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a69      	ldr	r2, [pc, #420]	@ (8004a64 <HAL_DMA_Abort_IT+0x3b0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d040      	beq.n	8004944 <HAL_DMA_Abort_IT+0x290>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a68      	ldr	r2, [pc, #416]	@ (8004a68 <HAL_DMA_Abort_IT+0x3b4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d03b      	beq.n	8004944 <HAL_DMA_Abort_IT+0x290>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a66      	ldr	r2, [pc, #408]	@ (8004a6c <HAL_DMA_Abort_IT+0x3b8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d036      	beq.n	8004944 <HAL_DMA_Abort_IT+0x290>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a65      	ldr	r2, [pc, #404]	@ (8004a70 <HAL_DMA_Abort_IT+0x3bc>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d031      	beq.n	8004944 <HAL_DMA_Abort_IT+0x290>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a63      	ldr	r2, [pc, #396]	@ (8004a74 <HAL_DMA_Abort_IT+0x3c0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d02c      	beq.n	8004944 <HAL_DMA_Abort_IT+0x290>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a62      	ldr	r2, [pc, #392]	@ (8004a78 <HAL_DMA_Abort_IT+0x3c4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d027      	beq.n	8004944 <HAL_DMA_Abort_IT+0x290>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a60      	ldr	r2, [pc, #384]	@ (8004a7c <HAL_DMA_Abort_IT+0x3c8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d022      	beq.n	8004944 <HAL_DMA_Abort_IT+0x290>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a5f      	ldr	r2, [pc, #380]	@ (8004a80 <HAL_DMA_Abort_IT+0x3cc>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d01d      	beq.n	8004944 <HAL_DMA_Abort_IT+0x290>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a5d      	ldr	r2, [pc, #372]	@ (8004a84 <HAL_DMA_Abort_IT+0x3d0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d018      	beq.n	8004944 <HAL_DMA_Abort_IT+0x290>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a5c      	ldr	r2, [pc, #368]	@ (8004a88 <HAL_DMA_Abort_IT+0x3d4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d013      	beq.n	8004944 <HAL_DMA_Abort_IT+0x290>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a5a      	ldr	r2, [pc, #360]	@ (8004a8c <HAL_DMA_Abort_IT+0x3d8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00e      	beq.n	8004944 <HAL_DMA_Abort_IT+0x290>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a59      	ldr	r2, [pc, #356]	@ (8004a90 <HAL_DMA_Abort_IT+0x3dc>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d009      	beq.n	8004944 <HAL_DMA_Abort_IT+0x290>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a57      	ldr	r2, [pc, #348]	@ (8004a94 <HAL_DMA_Abort_IT+0x3e0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d004      	beq.n	8004944 <HAL_DMA_Abort_IT+0x290>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a56      	ldr	r2, [pc, #344]	@ (8004a98 <HAL_DMA_Abort_IT+0x3e4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d108      	bne.n	8004956 <HAL_DMA_Abort_IT+0x2a2>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0201 	bic.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	e007      	b.n	8004966 <HAL_DMA_Abort_IT+0x2b2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0201 	bic.w	r2, r2, #1
 8004964:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a3c      	ldr	r2, [pc, #240]	@ (8004a5c <HAL_DMA_Abort_IT+0x3a8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d072      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a3a      	ldr	r2, [pc, #232]	@ (8004a60 <HAL_DMA_Abort_IT+0x3ac>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d06d      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a39      	ldr	r2, [pc, #228]	@ (8004a64 <HAL_DMA_Abort_IT+0x3b0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d068      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a37      	ldr	r2, [pc, #220]	@ (8004a68 <HAL_DMA_Abort_IT+0x3b4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d063      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a36      	ldr	r2, [pc, #216]	@ (8004a6c <HAL_DMA_Abort_IT+0x3b8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d05e      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a34      	ldr	r2, [pc, #208]	@ (8004a70 <HAL_DMA_Abort_IT+0x3bc>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d059      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a33      	ldr	r2, [pc, #204]	@ (8004a74 <HAL_DMA_Abort_IT+0x3c0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d054      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a31      	ldr	r2, [pc, #196]	@ (8004a78 <HAL_DMA_Abort_IT+0x3c4>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d04f      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a30      	ldr	r2, [pc, #192]	@ (8004a7c <HAL_DMA_Abort_IT+0x3c8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d04a      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a2e      	ldr	r2, [pc, #184]	@ (8004a80 <HAL_DMA_Abort_IT+0x3cc>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d045      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a2d      	ldr	r2, [pc, #180]	@ (8004a84 <HAL_DMA_Abort_IT+0x3d0>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d040      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004a88 <HAL_DMA_Abort_IT+0x3d4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d03b      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a2a      	ldr	r2, [pc, #168]	@ (8004a8c <HAL_DMA_Abort_IT+0x3d8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d036      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a28      	ldr	r2, [pc, #160]	@ (8004a90 <HAL_DMA_Abort_IT+0x3dc>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d031      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a27      	ldr	r2, [pc, #156]	@ (8004a94 <HAL_DMA_Abort_IT+0x3e0>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d02c      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a25      	ldr	r2, [pc, #148]	@ (8004a98 <HAL_DMA_Abort_IT+0x3e4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d027      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a24      	ldr	r2, [pc, #144]	@ (8004a9c <HAL_DMA_Abort_IT+0x3e8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d022      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a22      	ldr	r2, [pc, #136]	@ (8004aa0 <HAL_DMA_Abort_IT+0x3ec>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d01d      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a21      	ldr	r2, [pc, #132]	@ (8004aa4 <HAL_DMA_Abort_IT+0x3f0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d018      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a1f      	ldr	r2, [pc, #124]	@ (8004aa8 <HAL_DMA_Abort_IT+0x3f4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d013      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a1e      	ldr	r2, [pc, #120]	@ (8004aac <HAL_DMA_Abort_IT+0x3f8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00e      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab0 <HAL_DMA_Abort_IT+0x3fc>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d009      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab4 <HAL_DMA_Abort_IT+0x400>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d004      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x3a2>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a19      	ldr	r2, [pc, #100]	@ (8004ab8 <HAL_DMA_Abort_IT+0x404>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d132      	bne.n	8004abc <HAL_DMA_Abort_IT+0x408>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e031      	b.n	8004abe <HAL_DMA_Abort_IT+0x40a>
 8004a5a:	bf00      	nop
 8004a5c:	40020010 	.word	0x40020010
 8004a60:	40020028 	.word	0x40020028
 8004a64:	40020040 	.word	0x40020040
 8004a68:	40020058 	.word	0x40020058
 8004a6c:	40020070 	.word	0x40020070
 8004a70:	40020088 	.word	0x40020088
 8004a74:	400200a0 	.word	0x400200a0
 8004a78:	400200b8 	.word	0x400200b8
 8004a7c:	40020410 	.word	0x40020410
 8004a80:	40020428 	.word	0x40020428
 8004a84:	40020440 	.word	0x40020440
 8004a88:	40020458 	.word	0x40020458
 8004a8c:	40020470 	.word	0x40020470
 8004a90:	40020488 	.word	0x40020488
 8004a94:	400204a0 	.word	0x400204a0
 8004a98:	400204b8 	.word	0x400204b8
 8004a9c:	58025408 	.word	0x58025408
 8004aa0:	5802541c 	.word	0x5802541c
 8004aa4:	58025430 	.word	0x58025430
 8004aa8:	58025444 	.word	0x58025444
 8004aac:	58025458 	.word	0x58025458
 8004ab0:	5802546c 	.word	0x5802546c
 8004ab4:	58025480 	.word	0x58025480
 8004ab8:	58025494 	.word	0x58025494
 8004abc:	2300      	movs	r3, #0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d028      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004acc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ad0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ad6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004adc:	f003 031f 	and.w	r3, r3, #31
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	409a      	lsls	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004af0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00c      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b08:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b12:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop

08004b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b089      	sub	sp, #36	@ 0x24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004b4e:	4b89      	ldr	r3, [pc, #548]	@ (8004d74 <HAL_GPIO_Init+0x234>)
 8004b50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b52:	e194      	b.n	8004e7e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	2101      	movs	r1, #1
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b60:	4013      	ands	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 8186 	beq.w	8004e78 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f003 0303 	and.w	r3, r3, #3
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d005      	beq.n	8004b84 <HAL_GPIO_Init+0x44>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f003 0303 	and.w	r3, r3, #3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d130      	bne.n	8004be6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	2203      	movs	r2, #3
 8004b90:	fa02 f303 	lsl.w	r3, r2, r3
 8004b94:	43db      	mvns	r3, r3
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	68da      	ldr	r2, [r3, #12]
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bba:	2201      	movs	r2, #1
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	091b      	lsrs	r3, r3, #4
 8004bd0:	f003 0201 	and.w	r2, r3, #1
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d017      	beq.n	8004c22 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	2203      	movs	r2, #3
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	43db      	mvns	r3, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4013      	ands	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d123      	bne.n	8004c76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	08da      	lsrs	r2, r3, #3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3208      	adds	r2, #8
 8004c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	220f      	movs	r2, #15
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	08da      	lsrs	r2, r3, #3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3208      	adds	r2, #8
 8004c70:	69b9      	ldr	r1, [r7, #24]
 8004c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	2203      	movs	r2, #3
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	43db      	mvns	r3, r3
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f003 0203 	and.w	r2, r3, #3
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 80e0 	beq.w	8004e78 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8004d78 <HAL_GPIO_Init+0x238>)
 8004cba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004cbe:	4a2e      	ldr	r2, [pc, #184]	@ (8004d78 <HAL_GPIO_Init+0x238>)
 8004cc0:	f043 0302 	orr.w	r3, r3, #2
 8004cc4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d78 <HAL_GPIO_Init+0x238>)
 8004cca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cd6:	4a29      	ldr	r2, [pc, #164]	@ (8004d7c <HAL_GPIO_Init+0x23c>)
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	089b      	lsrs	r3, r3, #2
 8004cdc:	3302      	adds	r3, #2
 8004cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	220f      	movs	r2, #15
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a20      	ldr	r2, [pc, #128]	@ (8004d80 <HAL_GPIO_Init+0x240>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d052      	beq.n	8004da8 <HAL_GPIO_Init+0x268>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a1f      	ldr	r2, [pc, #124]	@ (8004d84 <HAL_GPIO_Init+0x244>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d031      	beq.n	8004d6e <HAL_GPIO_Init+0x22e>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a1e      	ldr	r2, [pc, #120]	@ (8004d88 <HAL_GPIO_Init+0x248>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d02b      	beq.n	8004d6a <HAL_GPIO_Init+0x22a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a1d      	ldr	r2, [pc, #116]	@ (8004d8c <HAL_GPIO_Init+0x24c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d025      	beq.n	8004d66 <HAL_GPIO_Init+0x226>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a1c      	ldr	r2, [pc, #112]	@ (8004d90 <HAL_GPIO_Init+0x250>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d01f      	beq.n	8004d62 <HAL_GPIO_Init+0x222>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a1b      	ldr	r2, [pc, #108]	@ (8004d94 <HAL_GPIO_Init+0x254>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d019      	beq.n	8004d5e <HAL_GPIO_Init+0x21e>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a1a      	ldr	r2, [pc, #104]	@ (8004d98 <HAL_GPIO_Init+0x258>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d013      	beq.n	8004d5a <HAL_GPIO_Init+0x21a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a19      	ldr	r2, [pc, #100]	@ (8004d9c <HAL_GPIO_Init+0x25c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00d      	beq.n	8004d56 <HAL_GPIO_Init+0x216>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a18      	ldr	r2, [pc, #96]	@ (8004da0 <HAL_GPIO_Init+0x260>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d007      	beq.n	8004d52 <HAL_GPIO_Init+0x212>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a17      	ldr	r2, [pc, #92]	@ (8004da4 <HAL_GPIO_Init+0x264>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d101      	bne.n	8004d4e <HAL_GPIO_Init+0x20e>
 8004d4a:	2309      	movs	r3, #9
 8004d4c:	e02d      	b.n	8004daa <HAL_GPIO_Init+0x26a>
 8004d4e:	230a      	movs	r3, #10
 8004d50:	e02b      	b.n	8004daa <HAL_GPIO_Init+0x26a>
 8004d52:	2308      	movs	r3, #8
 8004d54:	e029      	b.n	8004daa <HAL_GPIO_Init+0x26a>
 8004d56:	2307      	movs	r3, #7
 8004d58:	e027      	b.n	8004daa <HAL_GPIO_Init+0x26a>
 8004d5a:	2306      	movs	r3, #6
 8004d5c:	e025      	b.n	8004daa <HAL_GPIO_Init+0x26a>
 8004d5e:	2305      	movs	r3, #5
 8004d60:	e023      	b.n	8004daa <HAL_GPIO_Init+0x26a>
 8004d62:	2304      	movs	r3, #4
 8004d64:	e021      	b.n	8004daa <HAL_GPIO_Init+0x26a>
 8004d66:	2303      	movs	r3, #3
 8004d68:	e01f      	b.n	8004daa <HAL_GPIO_Init+0x26a>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e01d      	b.n	8004daa <HAL_GPIO_Init+0x26a>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e01b      	b.n	8004daa <HAL_GPIO_Init+0x26a>
 8004d72:	bf00      	nop
 8004d74:	58000080 	.word	0x58000080
 8004d78:	58024400 	.word	0x58024400
 8004d7c:	58000400 	.word	0x58000400
 8004d80:	58020000 	.word	0x58020000
 8004d84:	58020400 	.word	0x58020400
 8004d88:	58020800 	.word	0x58020800
 8004d8c:	58020c00 	.word	0x58020c00
 8004d90:	58021000 	.word	0x58021000
 8004d94:	58021400 	.word	0x58021400
 8004d98:	58021800 	.word	0x58021800
 8004d9c:	58021c00 	.word	0x58021c00
 8004da0:	58022000 	.word	0x58022000
 8004da4:	58022400 	.word	0x58022400
 8004da8:	2300      	movs	r3, #0
 8004daa:	69fa      	ldr	r2, [r7, #28]
 8004dac:	f002 0203 	and.w	r2, r2, #3
 8004db0:	0092      	lsls	r2, r2, #2
 8004db2:	4093      	lsls	r3, r2
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dba:	4938      	ldr	r1, [pc, #224]	@ (8004e9c <HAL_GPIO_Init+0x35c>)
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	089b      	lsrs	r3, r3, #2
 8004dc0:	3302      	adds	r3, #2
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004dee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004df6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	43db      	mvns	r3, r3
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4013      	ands	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004e1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	4013      	ands	r3, r2
 8004e32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	43db      	mvns	r3, r3
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f47f ae63 	bne.w	8004b54 <HAL_GPIO_Init+0x14>
  }
}
 8004e8e:	bf00      	nop
 8004e90:	bf00      	nop
 8004e92:	3724      	adds	r7, #36	@ 0x24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	58000400 	.word	0x58000400

08004ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	807b      	strh	r3, [r7, #2]
 8004eac:	4613      	mov	r3, r2
 8004eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004eb0:	787b      	ldrb	r3, [r7, #1]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004eb6:	887a      	ldrh	r2, [r7, #2]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004ebc:	e003      	b.n	8004ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004ebe:	887b      	ldrh	r3, [r7, #2]
 8004ec0:	041a      	lsls	r2, r3, #16
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	619a      	str	r2, [r3, #24]
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b085      	sub	sp, #20
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	460b      	mov	r3, r1
 8004edc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ee4:	887a      	ldrh	r2, [r7, #2]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	041a      	lsls	r2, r3, #16
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	43d9      	mvns	r1, r3
 8004ef0:	887b      	ldrh	r3, [r7, #2]
 8004ef2:	400b      	ands	r3, r1
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	619a      	str	r2, [r3, #24]
}
 8004efa:	bf00      	nop
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
	...

08004f08 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004f10:	4b19      	ldr	r3, [pc, #100]	@ (8004f78 <HAL_PWREx_ConfigSupply+0x70>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d00a      	beq.n	8004f32 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f1c:	4b16      	ldr	r3, [pc, #88]	@ (8004f78 <HAL_PWREx_ConfigSupply+0x70>)
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d001      	beq.n	8004f2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e01f      	b.n	8004f6e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e01d      	b.n	8004f6e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f32:	4b11      	ldr	r3, [pc, #68]	@ (8004f78 <HAL_PWREx_ConfigSupply+0x70>)
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f023 0207 	bic.w	r2, r3, #7
 8004f3a:	490f      	ldr	r1, [pc, #60]	@ (8004f78 <HAL_PWREx_ConfigSupply+0x70>)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f42:	f7fe ff01 	bl	8003d48 <HAL_GetTick>
 8004f46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f48:	e009      	b.n	8004f5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f4a:	f7fe fefd 	bl	8003d48 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f58:	d901      	bls.n	8004f5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e007      	b.n	8004f6e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f5e:	4b06      	ldr	r3, [pc, #24]	@ (8004f78 <HAL_PWREx_ConfigSupply+0x70>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f6a:	d1ee      	bne.n	8004f4a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	58024800 	.word	0x58024800

08004f7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08c      	sub	sp, #48	@ 0x30
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d102      	bne.n	8004f90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f000 bc48 	b.w	8005820 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 8088 	beq.w	80050ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f9e:	4b99      	ldr	r3, [pc, #612]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004fa8:	4b96      	ldr	r3, [pc, #600]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 8004faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d007      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x48>
 8004fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb6:	2b18      	cmp	r3, #24
 8004fb8:	d111      	bne.n	8004fde <HAL_RCC_OscConfig+0x62>
 8004fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d10c      	bne.n	8004fde <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc4:	4b8f      	ldr	r3, [pc, #572]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d06d      	beq.n	80050ac <HAL_RCC_OscConfig+0x130>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d169      	bne.n	80050ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	f000 bc21 	b.w	8005820 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fe6:	d106      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x7a>
 8004fe8:	4b86      	ldr	r3, [pc, #536]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a85      	ldr	r2, [pc, #532]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 8004fee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff2:	6013      	str	r3, [r2, #0]
 8004ff4:	e02e      	b.n	8005054 <HAL_RCC_OscConfig+0xd8>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10c      	bne.n	8005018 <HAL_RCC_OscConfig+0x9c>
 8004ffe:	4b81      	ldr	r3, [pc, #516]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a80      	ldr	r2, [pc, #512]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 8005004:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	4b7e      	ldr	r3, [pc, #504]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a7d      	ldr	r2, [pc, #500]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 8005010:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	e01d      	b.n	8005054 <HAL_RCC_OscConfig+0xd8>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005020:	d10c      	bne.n	800503c <HAL_RCC_OscConfig+0xc0>
 8005022:	4b78      	ldr	r3, [pc, #480]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a77      	ldr	r2, [pc, #476]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 8005028:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	4b75      	ldr	r3, [pc, #468]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a74      	ldr	r2, [pc, #464]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 8005034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	e00b      	b.n	8005054 <HAL_RCC_OscConfig+0xd8>
 800503c:	4b71      	ldr	r3, [pc, #452]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a70      	ldr	r2, [pc, #448]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 8005042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	4b6e      	ldr	r3, [pc, #440]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a6d      	ldr	r2, [pc, #436]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 800504e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d013      	beq.n	8005084 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fe fe74 	bl	8003d48 <HAL_GetTick>
 8005060:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005064:	f7fe fe70 	bl	8003d48 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b64      	cmp	r3, #100	@ 0x64
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e3d4      	b.n	8005820 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005076:	4b63      	ldr	r3, [pc, #396]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0f0      	beq.n	8005064 <HAL_RCC_OscConfig+0xe8>
 8005082:	e014      	b.n	80050ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fe fe60 	bl	8003d48 <HAL_GetTick>
 8005088:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800508c:	f7fe fe5c 	bl	8003d48 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b64      	cmp	r3, #100	@ 0x64
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e3c0      	b.n	8005820 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800509e:	4b59      	ldr	r3, [pc, #356]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCC_OscConfig+0x110>
 80050aa:	e000      	b.n	80050ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 80ca 	beq.w	8005250 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050bc:	4b51      	ldr	r3, [pc, #324]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050c6:	4b4f      	ldr	r3, [pc, #316]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 80050c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d007      	beq.n	80050e2 <HAL_RCC_OscConfig+0x166>
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	2b18      	cmp	r3, #24
 80050d6:	d156      	bne.n	8005186 <HAL_RCC_OscConfig+0x20a>
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d151      	bne.n	8005186 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050e2:	4b48      	ldr	r3, [pc, #288]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d005      	beq.n	80050fa <HAL_RCC_OscConfig+0x17e>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e392      	b.n	8005820 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050fa:	4b42      	ldr	r3, [pc, #264]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f023 0219 	bic.w	r2, r3, #25
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	493f      	ldr	r1, [pc, #252]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 8005108:	4313      	orrs	r3, r2
 800510a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510c:	f7fe fe1c 	bl	8003d48 <HAL_GetTick>
 8005110:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005114:	f7fe fe18 	bl	8003d48 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e37c      	b.n	8005820 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005126:	4b37      	ldr	r3, [pc, #220]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005132:	f7fe fe39 	bl	8003da8 <HAL_GetREVID>
 8005136:	4603      	mov	r3, r0
 8005138:	f241 0203 	movw	r2, #4099	@ 0x1003
 800513c:	4293      	cmp	r3, r2
 800513e:	d817      	bhi.n	8005170 <HAL_RCC_OscConfig+0x1f4>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	2b40      	cmp	r3, #64	@ 0x40
 8005146:	d108      	bne.n	800515a <HAL_RCC_OscConfig+0x1de>
 8005148:	4b2e      	ldr	r3, [pc, #184]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005150:	4a2c      	ldr	r2, [pc, #176]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 8005152:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005156:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005158:	e07a      	b.n	8005250 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800515a:	4b2a      	ldr	r3, [pc, #168]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	031b      	lsls	r3, r3, #12
 8005168:	4926      	ldr	r1, [pc, #152]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 800516a:	4313      	orrs	r3, r2
 800516c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800516e:	e06f      	b.n	8005250 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005170:	4b24      	ldr	r3, [pc, #144]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	061b      	lsls	r3, r3, #24
 800517e:	4921      	ldr	r1, [pc, #132]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 8005180:	4313      	orrs	r3, r2
 8005182:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005184:	e064      	b.n	8005250 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d047      	beq.n	800521e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800518e:	4b1d      	ldr	r3, [pc, #116]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f023 0219 	bic.w	r2, r3, #25
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	491a      	ldr	r1, [pc, #104]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 800519c:	4313      	orrs	r3, r2
 800519e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a0:	f7fe fdd2 	bl	8003d48 <HAL_GetTick>
 80051a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051a8:	f7fe fdce 	bl	8003d48 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e332      	b.n	8005820 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051ba:	4b12      	ldr	r3, [pc, #72]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0304 	and.w	r3, r3, #4
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0f0      	beq.n	80051a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c6:	f7fe fdef 	bl	8003da8 <HAL_GetREVID>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d819      	bhi.n	8005208 <HAL_RCC_OscConfig+0x28c>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	2b40      	cmp	r3, #64	@ 0x40
 80051da:	d108      	bne.n	80051ee <HAL_RCC_OscConfig+0x272>
 80051dc:	4b09      	ldr	r3, [pc, #36]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80051e4:	4a07      	ldr	r2, [pc, #28]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 80051e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051ea:	6053      	str	r3, [r2, #4]
 80051ec:	e030      	b.n	8005250 <HAL_RCC_OscConfig+0x2d4>
 80051ee:	4b05      	ldr	r3, [pc, #20]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	031b      	lsls	r3, r3, #12
 80051fc:	4901      	ldr	r1, [pc, #4]	@ (8005204 <HAL_RCC_OscConfig+0x288>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	604b      	str	r3, [r1, #4]
 8005202:	e025      	b.n	8005250 <HAL_RCC_OscConfig+0x2d4>
 8005204:	58024400 	.word	0x58024400
 8005208:	4b9a      	ldr	r3, [pc, #616]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	061b      	lsls	r3, r3, #24
 8005216:	4997      	ldr	r1, [pc, #604]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005218:	4313      	orrs	r3, r2
 800521a:	604b      	str	r3, [r1, #4]
 800521c:	e018      	b.n	8005250 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800521e:	4b95      	ldr	r3, [pc, #596]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a94      	ldr	r2, [pc, #592]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005224:	f023 0301 	bic.w	r3, r3, #1
 8005228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522a:	f7fe fd8d 	bl	8003d48 <HAL_GetTick>
 800522e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005230:	e008      	b.n	8005244 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005232:	f7fe fd89 	bl	8003d48 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e2ed      	b.n	8005820 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005244:	4b8b      	ldr	r3, [pc, #556]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1f0      	bne.n	8005232 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 80a9 	beq.w	80053b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800525e:	4b85      	ldr	r3, [pc, #532]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005266:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005268:	4b82      	ldr	r3, [pc, #520]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 800526a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	2b08      	cmp	r3, #8
 8005272:	d007      	beq.n	8005284 <HAL_RCC_OscConfig+0x308>
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	2b18      	cmp	r3, #24
 8005278:	d13a      	bne.n	80052f0 <HAL_RCC_OscConfig+0x374>
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	2b01      	cmp	r3, #1
 8005282:	d135      	bne.n	80052f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005284:	4b7b      	ldr	r3, [pc, #492]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <HAL_RCC_OscConfig+0x320>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	2b80      	cmp	r3, #128	@ 0x80
 8005296:	d001      	beq.n	800529c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e2c1      	b.n	8005820 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800529c:	f7fe fd84 	bl	8003da8 <HAL_GetREVID>
 80052a0:	4603      	mov	r3, r0
 80052a2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d817      	bhi.n	80052da <HAL_RCC_OscConfig+0x35e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	2b20      	cmp	r3, #32
 80052b0:	d108      	bne.n	80052c4 <HAL_RCC_OscConfig+0x348>
 80052b2:	4b70      	ldr	r3, [pc, #448]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80052ba:	4a6e      	ldr	r2, [pc, #440]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80052bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052c0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052c2:	e075      	b.n	80053b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052c4:	4b6b      	ldr	r3, [pc, #428]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	069b      	lsls	r3, r3, #26
 80052d2:	4968      	ldr	r1, [pc, #416]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052d8:	e06a      	b.n	80053b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052da:	4b66      	ldr	r3, [pc, #408]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	061b      	lsls	r3, r3, #24
 80052e8:	4962      	ldr	r1, [pc, #392]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052ee:	e05f      	b.n	80053b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d042      	beq.n	800537e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80052f8:	4b5e      	ldr	r3, [pc, #376]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a5d      	ldr	r2, [pc, #372]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80052fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005304:	f7fe fd20 	bl	8003d48 <HAL_GetTick>
 8005308:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800530c:	f7fe fd1c 	bl	8003d48 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e280      	b.n	8005820 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800531e:	4b55      	ldr	r3, [pc, #340]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0f0      	beq.n	800530c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800532a:	f7fe fd3d 	bl	8003da8 <HAL_GetREVID>
 800532e:	4603      	mov	r3, r0
 8005330:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005334:	4293      	cmp	r3, r2
 8005336:	d817      	bhi.n	8005368 <HAL_RCC_OscConfig+0x3ec>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	2b20      	cmp	r3, #32
 800533e:	d108      	bne.n	8005352 <HAL_RCC_OscConfig+0x3d6>
 8005340:	4b4c      	ldr	r3, [pc, #304]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005348:	4a4a      	ldr	r2, [pc, #296]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 800534a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800534e:	6053      	str	r3, [r2, #4]
 8005350:	e02e      	b.n	80053b0 <HAL_RCC_OscConfig+0x434>
 8005352:	4b48      	ldr	r3, [pc, #288]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	069b      	lsls	r3, r3, #26
 8005360:	4944      	ldr	r1, [pc, #272]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005362:	4313      	orrs	r3, r2
 8005364:	604b      	str	r3, [r1, #4]
 8005366:	e023      	b.n	80053b0 <HAL_RCC_OscConfig+0x434>
 8005368:	4b42      	ldr	r3, [pc, #264]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	061b      	lsls	r3, r3, #24
 8005376:	493f      	ldr	r1, [pc, #252]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005378:	4313      	orrs	r3, r2
 800537a:	60cb      	str	r3, [r1, #12]
 800537c:	e018      	b.n	80053b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800537e:	4b3d      	ldr	r3, [pc, #244]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a3c      	ldr	r2, [pc, #240]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005384:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538a:	f7fe fcdd 	bl	8003d48 <HAL_GetTick>
 800538e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005392:	f7fe fcd9 	bl	8003d48 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e23d      	b.n	8005820 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80053a4:	4b33      	ldr	r3, [pc, #204]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1f0      	bne.n	8005392 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d036      	beq.n	800542a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d019      	beq.n	80053f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80053c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053c8:	4a2a      	ldr	r2, [pc, #168]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80053ca:	f043 0301 	orr.w	r3, r3, #1
 80053ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d0:	f7fe fcba 	bl	8003d48 <HAL_GetTick>
 80053d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053d8:	f7fe fcb6 	bl	8003d48 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e21a      	b.n	8005820 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053ea:	4b22      	ldr	r3, [pc, #136]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80053ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0f0      	beq.n	80053d8 <HAL_RCC_OscConfig+0x45c>
 80053f6:	e018      	b.n	800542a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80053fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80053fe:	f023 0301 	bic.w	r3, r3, #1
 8005402:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005404:	f7fe fca0 	bl	8003d48 <HAL_GetTick>
 8005408:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800540c:	f7fe fc9c 	bl	8003d48 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e200      	b.n	8005820 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800541e:	4b15      	ldr	r3, [pc, #84]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1f0      	bne.n	800540c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d039      	beq.n	80054aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01c      	beq.n	8005478 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800543e:	4b0d      	ldr	r3, [pc, #52]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a0c      	ldr	r2, [pc, #48]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005444:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005448:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800544a:	f7fe fc7d 	bl	8003d48 <HAL_GetTick>
 800544e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005452:	f7fe fc79 	bl	8003d48 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e1dd      	b.n	8005820 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005464:	4b03      	ldr	r3, [pc, #12]	@ (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0f0      	beq.n	8005452 <HAL_RCC_OscConfig+0x4d6>
 8005470:	e01b      	b.n	80054aa <HAL_RCC_OscConfig+0x52e>
 8005472:	bf00      	nop
 8005474:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005478:	4b9b      	ldr	r3, [pc, #620]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a9a      	ldr	r2, [pc, #616]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800547e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005482:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005484:	f7fe fc60 	bl	8003d48 <HAL_GetTick>
 8005488:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800548c:	f7fe fc5c 	bl	8003d48 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e1c0      	b.n	8005820 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800549e:	4b92      	ldr	r3, [pc, #584]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1f0      	bne.n	800548c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0304 	and.w	r3, r3, #4
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 8081 	beq.w	80055ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80054b8:	4b8c      	ldr	r3, [pc, #560]	@ (80056ec <HAL_RCC_OscConfig+0x770>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a8b      	ldr	r2, [pc, #556]	@ (80056ec <HAL_RCC_OscConfig+0x770>)
 80054be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054c4:	f7fe fc40 	bl	8003d48 <HAL_GetTick>
 80054c8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054cc:	f7fe fc3c 	bl	8003d48 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b64      	cmp	r3, #100	@ 0x64
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e1a0      	b.n	8005820 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054de:	4b83      	ldr	r3, [pc, #524]	@ (80056ec <HAL_RCC_OscConfig+0x770>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d106      	bne.n	8005500 <HAL_RCC_OscConfig+0x584>
 80054f2:	4b7d      	ldr	r3, [pc, #500]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80054f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f6:	4a7c      	ldr	r2, [pc, #496]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80054f8:	f043 0301 	orr.w	r3, r3, #1
 80054fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80054fe:	e02d      	b.n	800555c <HAL_RCC_OscConfig+0x5e0>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10c      	bne.n	8005522 <HAL_RCC_OscConfig+0x5a6>
 8005508:	4b77      	ldr	r3, [pc, #476]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800550a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550c:	4a76      	ldr	r2, [pc, #472]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800550e:	f023 0301 	bic.w	r3, r3, #1
 8005512:	6713      	str	r3, [r2, #112]	@ 0x70
 8005514:	4b74      	ldr	r3, [pc, #464]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005518:	4a73      	ldr	r2, [pc, #460]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800551a:	f023 0304 	bic.w	r3, r3, #4
 800551e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005520:	e01c      	b.n	800555c <HAL_RCC_OscConfig+0x5e0>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	2b05      	cmp	r3, #5
 8005528:	d10c      	bne.n	8005544 <HAL_RCC_OscConfig+0x5c8>
 800552a:	4b6f      	ldr	r3, [pc, #444]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800552c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552e:	4a6e      	ldr	r2, [pc, #440]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005530:	f043 0304 	orr.w	r3, r3, #4
 8005534:	6713      	str	r3, [r2, #112]	@ 0x70
 8005536:	4b6c      	ldr	r3, [pc, #432]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553a:	4a6b      	ldr	r2, [pc, #428]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800553c:	f043 0301 	orr.w	r3, r3, #1
 8005540:	6713      	str	r3, [r2, #112]	@ 0x70
 8005542:	e00b      	b.n	800555c <HAL_RCC_OscConfig+0x5e0>
 8005544:	4b68      	ldr	r3, [pc, #416]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005548:	4a67      	ldr	r2, [pc, #412]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800554a:	f023 0301 	bic.w	r3, r3, #1
 800554e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005550:	4b65      	ldr	r3, [pc, #404]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005554:	4a64      	ldr	r2, [pc, #400]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005556:	f023 0304 	bic.w	r3, r3, #4
 800555a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d015      	beq.n	8005590 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005564:	f7fe fbf0 	bl	8003d48 <HAL_GetTick>
 8005568:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800556a:	e00a      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800556c:	f7fe fbec 	bl	8003d48 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800557a:	4293      	cmp	r3, r2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e14e      	b.n	8005820 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005582:	4b59      	ldr	r3, [pc, #356]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0ee      	beq.n	800556c <HAL_RCC_OscConfig+0x5f0>
 800558e:	e014      	b.n	80055ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005590:	f7fe fbda 	bl	8003d48 <HAL_GetTick>
 8005594:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005596:	e00a      	b.n	80055ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005598:	f7fe fbd6 	bl	8003d48 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e138      	b.n	8005820 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055ae:	4b4e      	ldr	r3, [pc, #312]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1ee      	bne.n	8005598 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 812d 	beq.w	800581e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80055c4:	4b48      	ldr	r3, [pc, #288]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055cc:	2b18      	cmp	r3, #24
 80055ce:	f000 80bd 	beq.w	800574c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	f040 809e 	bne.w	8005718 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055dc:	4b42      	ldr	r3, [pc, #264]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a41      	ldr	r2, [pc, #260]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80055e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e8:	f7fe fbae 	bl	8003d48 <HAL_GetTick>
 80055ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f0:	f7fe fbaa 	bl	8003d48 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e10e      	b.n	8005820 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005602:	4b39      	ldr	r3, [pc, #228]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1f0      	bne.n	80055f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800560e:	4b36      	ldr	r3, [pc, #216]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005610:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005612:	4b37      	ldr	r3, [pc, #220]	@ (80056f0 <HAL_RCC_OscConfig+0x774>)
 8005614:	4013      	ands	r3, r2
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800561e:	0112      	lsls	r2, r2, #4
 8005620:	430a      	orrs	r2, r1
 8005622:	4931      	ldr	r1, [pc, #196]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005624:	4313      	orrs	r3, r2
 8005626:	628b      	str	r3, [r1, #40]	@ 0x28
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562c:	3b01      	subs	r3, #1
 800562e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005636:	3b01      	subs	r3, #1
 8005638:	025b      	lsls	r3, r3, #9
 800563a:	b29b      	uxth	r3, r3
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005642:	3b01      	subs	r3, #1
 8005644:	041b      	lsls	r3, r3, #16
 8005646:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005650:	3b01      	subs	r3, #1
 8005652:	061b      	lsls	r3, r3, #24
 8005654:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005658:	4923      	ldr	r1, [pc, #140]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800565a:	4313      	orrs	r3, r2
 800565c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800565e:	4b22      	ldr	r3, [pc, #136]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005662:	4a21      	ldr	r2, [pc, #132]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005664:	f023 0301 	bic.w	r3, r3, #1
 8005668:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800566a:	4b1f      	ldr	r3, [pc, #124]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800566c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800566e:	4b21      	ldr	r3, [pc, #132]	@ (80056f4 <HAL_RCC_OscConfig+0x778>)
 8005670:	4013      	ands	r3, r2
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005676:	00d2      	lsls	r2, r2, #3
 8005678:	491b      	ldr	r1, [pc, #108]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800567a:	4313      	orrs	r3, r2
 800567c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800567e:	4b1a      	ldr	r3, [pc, #104]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005682:	f023 020c 	bic.w	r2, r3, #12
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568a:	4917      	ldr	r1, [pc, #92]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800568c:	4313      	orrs	r3, r2
 800568e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005690:	4b15      	ldr	r3, [pc, #84]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005694:	f023 0202 	bic.w	r2, r3, #2
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569c:	4912      	ldr	r1, [pc, #72]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80056a2:	4b11      	ldr	r3, [pc, #68]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80056a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a6:	4a10      	ldr	r2, [pc, #64]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80056a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ae:	4b0e      	ldr	r3, [pc, #56]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80056b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b2:	4a0d      	ldr	r2, [pc, #52]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80056b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80056ba:	4b0b      	ldr	r3, [pc, #44]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80056bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056be:	4a0a      	ldr	r2, [pc, #40]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80056c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80056c6:	4b08      	ldr	r3, [pc, #32]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80056c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ca:	4a07      	ldr	r2, [pc, #28]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80056cc:	f043 0301 	orr.w	r3, r3, #1
 80056d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056d2:	4b05      	ldr	r3, [pc, #20]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a04      	ldr	r2, [pc, #16]	@ (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80056d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056de:	f7fe fb33 	bl	8003d48 <HAL_GetTick>
 80056e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056e4:	e011      	b.n	800570a <HAL_RCC_OscConfig+0x78e>
 80056e6:	bf00      	nop
 80056e8:	58024400 	.word	0x58024400
 80056ec:	58024800 	.word	0x58024800
 80056f0:	fffffc0c 	.word	0xfffffc0c
 80056f4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f8:	f7fe fb26 	bl	8003d48 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e08a      	b.n	8005820 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800570a:	4b47      	ldr	r3, [pc, #284]	@ (8005828 <HAL_RCC_OscConfig+0x8ac>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0f0      	beq.n	80056f8 <HAL_RCC_OscConfig+0x77c>
 8005716:	e082      	b.n	800581e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005718:	4b43      	ldr	r3, [pc, #268]	@ (8005828 <HAL_RCC_OscConfig+0x8ac>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a42      	ldr	r2, [pc, #264]	@ (8005828 <HAL_RCC_OscConfig+0x8ac>)
 800571e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005724:	f7fe fb10 	bl	8003d48 <HAL_GetTick>
 8005728:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800572c:	f7fe fb0c 	bl	8003d48 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e070      	b.n	8005820 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800573e:	4b3a      	ldr	r3, [pc, #232]	@ (8005828 <HAL_RCC_OscConfig+0x8ac>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f0      	bne.n	800572c <HAL_RCC_OscConfig+0x7b0>
 800574a:	e068      	b.n	800581e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800574c:	4b36      	ldr	r3, [pc, #216]	@ (8005828 <HAL_RCC_OscConfig+0x8ac>)
 800574e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005750:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005752:	4b35      	ldr	r3, [pc, #212]	@ (8005828 <HAL_RCC_OscConfig+0x8ac>)
 8005754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005756:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575c:	2b01      	cmp	r3, #1
 800575e:	d031      	beq.n	80057c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f003 0203 	and.w	r2, r3, #3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800576a:	429a      	cmp	r2, r3
 800576c:	d12a      	bne.n	80057c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	091b      	lsrs	r3, r3, #4
 8005772:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800577a:	429a      	cmp	r2, r3
 800577c:	d122      	bne.n	80057c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005788:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800578a:	429a      	cmp	r2, r3
 800578c:	d11a      	bne.n	80057c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	0a5b      	lsrs	r3, r3, #9
 8005792:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800579a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800579c:	429a      	cmp	r2, r3
 800579e:	d111      	bne.n	80057c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	0c1b      	lsrs	r3, r3, #16
 80057a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d108      	bne.n	80057c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	0e1b      	lsrs	r3, r3, #24
 80057b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d001      	beq.n	80057c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e02b      	b.n	8005820 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80057c8:	4b17      	ldr	r3, [pc, #92]	@ (8005828 <HAL_RCC_OscConfig+0x8ac>)
 80057ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057cc:	08db      	lsrs	r3, r3, #3
 80057ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d01f      	beq.n	800581e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80057de:	4b12      	ldr	r3, [pc, #72]	@ (8005828 <HAL_RCC_OscConfig+0x8ac>)
 80057e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e2:	4a11      	ldr	r2, [pc, #68]	@ (8005828 <HAL_RCC_OscConfig+0x8ac>)
 80057e4:	f023 0301 	bic.w	r3, r3, #1
 80057e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057ea:	f7fe faad 	bl	8003d48 <HAL_GetTick>
 80057ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80057f0:	bf00      	nop
 80057f2:	f7fe faa9 	bl	8003d48 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d0f9      	beq.n	80057f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005828 <HAL_RCC_OscConfig+0x8ac>)
 8005800:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005802:	4b0a      	ldr	r3, [pc, #40]	@ (800582c <HAL_RCC_OscConfig+0x8b0>)
 8005804:	4013      	ands	r3, r2
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800580a:	00d2      	lsls	r2, r2, #3
 800580c:	4906      	ldr	r1, [pc, #24]	@ (8005828 <HAL_RCC_OscConfig+0x8ac>)
 800580e:	4313      	orrs	r3, r2
 8005810:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005812:	4b05      	ldr	r3, [pc, #20]	@ (8005828 <HAL_RCC_OscConfig+0x8ac>)
 8005814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005816:	4a04      	ldr	r2, [pc, #16]	@ (8005828 <HAL_RCC_OscConfig+0x8ac>)
 8005818:	f043 0301 	orr.w	r3, r3, #1
 800581c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3730      	adds	r7, #48	@ 0x30
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	58024400 	.word	0x58024400
 800582c:	ffff0007 	.word	0xffff0007

08005830 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e19c      	b.n	8005b7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005844:	4b8a      	ldr	r3, [pc, #552]	@ (8005a70 <HAL_RCC_ClockConfig+0x240>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 030f 	and.w	r3, r3, #15
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d910      	bls.n	8005874 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005852:	4b87      	ldr	r3, [pc, #540]	@ (8005a70 <HAL_RCC_ClockConfig+0x240>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f023 020f 	bic.w	r2, r3, #15
 800585a:	4985      	ldr	r1, [pc, #532]	@ (8005a70 <HAL_RCC_ClockConfig+0x240>)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	4313      	orrs	r3, r2
 8005860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005862:	4b83      	ldr	r3, [pc, #524]	@ (8005a70 <HAL_RCC_ClockConfig+0x240>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	429a      	cmp	r2, r3
 800586e:	d001      	beq.n	8005874 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e184      	b.n	8005b7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d010      	beq.n	80058a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	4b7b      	ldr	r3, [pc, #492]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800588c:	429a      	cmp	r2, r3
 800588e:	d908      	bls.n	80058a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005890:	4b78      	ldr	r3, [pc, #480]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	4975      	ldr	r1, [pc, #468]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0308 	and.w	r3, r3, #8
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d010      	beq.n	80058d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695a      	ldr	r2, [r3, #20]
 80058b2:	4b70      	ldr	r3, [pc, #448]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d908      	bls.n	80058d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80058be:	4b6d      	ldr	r3, [pc, #436]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	496a      	ldr	r1, [pc, #424]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0310 	and.w	r3, r3, #16
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d010      	beq.n	80058fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	699a      	ldr	r2, [r3, #24]
 80058e0:	4b64      	ldr	r3, [pc, #400]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d908      	bls.n	80058fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80058ec:	4b61      	ldr	r3, [pc, #388]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	495e      	ldr	r1, [pc, #376]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b00      	cmp	r3, #0
 8005908:	d010      	beq.n	800592c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69da      	ldr	r2, [r3, #28]
 800590e:	4b59      	ldr	r3, [pc, #356]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005916:	429a      	cmp	r2, r3
 8005918:	d908      	bls.n	800592c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800591a:	4b56      	ldr	r3, [pc, #344]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	4953      	ldr	r1, [pc, #332]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 8005928:	4313      	orrs	r3, r2
 800592a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d010      	beq.n	800595a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	4b4d      	ldr	r3, [pc, #308]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	429a      	cmp	r2, r3
 8005946:	d908      	bls.n	800595a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005948:	4b4a      	ldr	r3, [pc, #296]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	f023 020f 	bic.w	r2, r3, #15
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	4947      	ldr	r1, [pc, #284]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 8005956:	4313      	orrs	r3, r2
 8005958:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d055      	beq.n	8005a12 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005966:	4b43      	ldr	r3, [pc, #268]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	4940      	ldr	r1, [pc, #256]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 8005974:	4313      	orrs	r3, r2
 8005976:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b02      	cmp	r3, #2
 800597e:	d107      	bne.n	8005990 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005980:	4b3c      	ldr	r3, [pc, #240]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d121      	bne.n	80059d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e0f6      	b.n	8005b7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2b03      	cmp	r3, #3
 8005996:	d107      	bne.n	80059a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005998:	4b36      	ldr	r3, [pc, #216]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d115      	bne.n	80059d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e0ea      	b.n	8005b7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d107      	bne.n	80059c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059b0:	4b30      	ldr	r3, [pc, #192]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d109      	bne.n	80059d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e0de      	b.n	8005b7e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059c0:	4b2c      	ldr	r3, [pc, #176]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e0d6      	b.n	8005b7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059d0:	4b28      	ldr	r3, [pc, #160]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f023 0207 	bic.w	r2, r3, #7
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	4925      	ldr	r1, [pc, #148]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059e2:	f7fe f9b1 	bl	8003d48 <HAL_GetTick>
 80059e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e8:	e00a      	b.n	8005a00 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059ea:	f7fe f9ad 	bl	8003d48 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e0be      	b.n	8005b7e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a00:	4b1c      	ldr	r3, [pc, #112]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d1eb      	bne.n	80059ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d010      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	4b14      	ldr	r3, [pc, #80]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d208      	bcs.n	8005a40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a2e:	4b11      	ldr	r3, [pc, #68]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	f023 020f 	bic.w	r2, r3, #15
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	490e      	ldr	r1, [pc, #56]	@ (8005a74 <HAL_RCC_ClockConfig+0x244>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a40:	4b0b      	ldr	r3, [pc, #44]	@ (8005a70 <HAL_RCC_ClockConfig+0x240>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 030f 	and.w	r3, r3, #15
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d214      	bcs.n	8005a78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a4e:	4b08      	ldr	r3, [pc, #32]	@ (8005a70 <HAL_RCC_ClockConfig+0x240>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f023 020f 	bic.w	r2, r3, #15
 8005a56:	4906      	ldr	r1, [pc, #24]	@ (8005a70 <HAL_RCC_ClockConfig+0x240>)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a5e:	4b04      	ldr	r3, [pc, #16]	@ (8005a70 <HAL_RCC_ClockConfig+0x240>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d005      	beq.n	8005a78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e086      	b.n	8005b7e <HAL_RCC_ClockConfig+0x34e>
 8005a70:	52002000 	.word	0x52002000
 8005a74:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d010      	beq.n	8005aa6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	4b3f      	ldr	r3, [pc, #252]	@ (8005b88 <HAL_RCC_ClockConfig+0x358>)
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d208      	bcs.n	8005aa6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a94:	4b3c      	ldr	r3, [pc, #240]	@ (8005b88 <HAL_RCC_ClockConfig+0x358>)
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	4939      	ldr	r1, [pc, #228]	@ (8005b88 <HAL_RCC_ClockConfig+0x358>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d010      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	695a      	ldr	r2, [r3, #20]
 8005ab6:	4b34      	ldr	r3, [pc, #208]	@ (8005b88 <HAL_RCC_ClockConfig+0x358>)
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d208      	bcs.n	8005ad4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ac2:	4b31      	ldr	r3, [pc, #196]	@ (8005b88 <HAL_RCC_ClockConfig+0x358>)
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	492e      	ldr	r1, [pc, #184]	@ (8005b88 <HAL_RCC_ClockConfig+0x358>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d010      	beq.n	8005b02 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	699a      	ldr	r2, [r3, #24]
 8005ae4:	4b28      	ldr	r3, [pc, #160]	@ (8005b88 <HAL_RCC_ClockConfig+0x358>)
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d208      	bcs.n	8005b02 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005af0:	4b25      	ldr	r3, [pc, #148]	@ (8005b88 <HAL_RCC_ClockConfig+0x358>)
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	4922      	ldr	r1, [pc, #136]	@ (8005b88 <HAL_RCC_ClockConfig+0x358>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d010      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69da      	ldr	r2, [r3, #28]
 8005b12:	4b1d      	ldr	r3, [pc, #116]	@ (8005b88 <HAL_RCC_ClockConfig+0x358>)
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d208      	bcs.n	8005b30 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8005b88 <HAL_RCC_ClockConfig+0x358>)
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	4917      	ldr	r1, [pc, #92]	@ (8005b88 <HAL_RCC_ClockConfig+0x358>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b30:	f000 f834 	bl	8005b9c <HAL_RCC_GetSysClockFreq>
 8005b34:	4602      	mov	r2, r0
 8005b36:	4b14      	ldr	r3, [pc, #80]	@ (8005b88 <HAL_RCC_ClockConfig+0x358>)
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	0a1b      	lsrs	r3, r3, #8
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	4912      	ldr	r1, [pc, #72]	@ (8005b8c <HAL_RCC_ClockConfig+0x35c>)
 8005b42:	5ccb      	ldrb	r3, [r1, r3]
 8005b44:	f003 031f 	and.w	r3, r3, #31
 8005b48:	fa22 f303 	lsr.w	r3, r2, r3
 8005b4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b88 <HAL_RCC_ClockConfig+0x358>)
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	f003 030f 	and.w	r3, r3, #15
 8005b56:	4a0d      	ldr	r2, [pc, #52]	@ (8005b8c <HAL_RCC_ClockConfig+0x35c>)
 8005b58:	5cd3      	ldrb	r3, [r2, r3]
 8005b5a:	f003 031f 	and.w	r3, r3, #31
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	fa22 f303 	lsr.w	r3, r2, r3
 8005b64:	4a0a      	ldr	r2, [pc, #40]	@ (8005b90 <HAL_RCC_ClockConfig+0x360>)
 8005b66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b68:	4a0a      	ldr	r2, [pc, #40]	@ (8005b94 <HAL_RCC_ClockConfig+0x364>)
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b98 <HAL_RCC_ClockConfig+0x368>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fb fd5e 	bl	8001634 <HAL_InitTick>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	58024400 	.word	0x58024400
 8005b8c:	08017c8c 	.word	0x08017c8c
 8005b90:	24000004 	.word	0x24000004
 8005b94:	24000000 	.word	0x24000000
 8005b98:	24000008 	.word	0x24000008

08005b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b089      	sub	sp, #36	@ 0x24
 8005ba0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ba2:	4bb3      	ldr	r3, [pc, #716]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005baa:	2b18      	cmp	r3, #24
 8005bac:	f200 8155 	bhi.w	8005e5a <HAL_RCC_GetSysClockFreq+0x2be>
 8005bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb6:	bf00      	nop
 8005bb8:	08005c1d 	.word	0x08005c1d
 8005bbc:	08005e5b 	.word	0x08005e5b
 8005bc0:	08005e5b 	.word	0x08005e5b
 8005bc4:	08005e5b 	.word	0x08005e5b
 8005bc8:	08005e5b 	.word	0x08005e5b
 8005bcc:	08005e5b 	.word	0x08005e5b
 8005bd0:	08005e5b 	.word	0x08005e5b
 8005bd4:	08005e5b 	.word	0x08005e5b
 8005bd8:	08005c43 	.word	0x08005c43
 8005bdc:	08005e5b 	.word	0x08005e5b
 8005be0:	08005e5b 	.word	0x08005e5b
 8005be4:	08005e5b 	.word	0x08005e5b
 8005be8:	08005e5b 	.word	0x08005e5b
 8005bec:	08005e5b 	.word	0x08005e5b
 8005bf0:	08005e5b 	.word	0x08005e5b
 8005bf4:	08005e5b 	.word	0x08005e5b
 8005bf8:	08005c49 	.word	0x08005c49
 8005bfc:	08005e5b 	.word	0x08005e5b
 8005c00:	08005e5b 	.word	0x08005e5b
 8005c04:	08005e5b 	.word	0x08005e5b
 8005c08:	08005e5b 	.word	0x08005e5b
 8005c0c:	08005e5b 	.word	0x08005e5b
 8005c10:	08005e5b 	.word	0x08005e5b
 8005c14:	08005e5b 	.word	0x08005e5b
 8005c18:	08005c4f 	.word	0x08005c4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c1c:	4b94      	ldr	r3, [pc, #592]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0320 	and.w	r3, r3, #32
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d009      	beq.n	8005c3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c28:	4b91      	ldr	r3, [pc, #580]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	08db      	lsrs	r3, r3, #3
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	4a90      	ldr	r2, [pc, #576]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c34:	fa22 f303 	lsr.w	r3, r2, r3
 8005c38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005c3a:	e111      	b.n	8005e60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c3c:	4b8d      	ldr	r3, [pc, #564]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c3e:	61bb      	str	r3, [r7, #24]
      break;
 8005c40:	e10e      	b.n	8005e60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005c42:	4b8d      	ldr	r3, [pc, #564]	@ (8005e78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c44:	61bb      	str	r3, [r7, #24]
      break;
 8005c46:	e10b      	b.n	8005e60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005c48:	4b8c      	ldr	r3, [pc, #560]	@ (8005e7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005c4a:	61bb      	str	r3, [r7, #24]
      break;
 8005c4c:	e108      	b.n	8005e60 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c4e:	4b88      	ldr	r3, [pc, #544]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005c58:	4b85      	ldr	r3, [pc, #532]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5c:	091b      	lsrs	r3, r3, #4
 8005c5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c62:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005c64:	4b82      	ldr	r3, [pc, #520]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005c6e:	4b80      	ldr	r3, [pc, #512]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c72:	08db      	lsrs	r3, r3, #3
 8005c74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	fb02 f303 	mul.w	r3, r2, r3
 8005c7e:	ee07 3a90 	vmov	s15, r3
 8005c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c86:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 80e1 	beq.w	8005e54 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	f000 8083 	beq.w	8005da0 <HAL_RCC_GetSysClockFreq+0x204>
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	f200 80a1 	bhi.w	8005de4 <HAL_RCC_GetSysClockFreq+0x248>
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x114>
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d056      	beq.n	8005d5c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005cae:	e099      	b.n	8005de4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cb0:	4b6f      	ldr	r3, [pc, #444]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d02d      	beq.n	8005d18 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cbc:	4b6c      	ldr	r3, [pc, #432]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	08db      	lsrs	r3, r3, #3
 8005cc2:	f003 0303 	and.w	r3, r3, #3
 8005cc6:	4a6b      	ldr	r2, [pc, #428]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ccc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	ee07 3a90 	vmov	s15, r3
 8005cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ce6:	4b62      	ldr	r3, [pc, #392]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cee:	ee07 3a90 	vmov	s15, r3
 8005cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cfa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d12:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005d16:	e087      	b.n	8005e28 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	ee07 3a90 	vmov	s15, r3
 8005d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d22:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005e84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d2a:	4b51      	ldr	r3, [pc, #324]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d3e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d5a:	e065      	b.n	8005e28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d66:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005e88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d6e:	4b40      	ldr	r3, [pc, #256]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d76:	ee07 3a90 	vmov	s15, r3
 8005d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d82:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d9e:	e043      	b.n	8005e28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005daa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005e8c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db2:	4b2f      	ldr	r3, [pc, #188]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dba:	ee07 3a90 	vmov	s15, r3
 8005dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dc6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005de2:	e021      	b.n	8005e28 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005e88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005df6:	4b1e      	ldr	r3, [pc, #120]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e06:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e0a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e26:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005e28:	4b11      	ldr	r3, [pc, #68]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2c:	0a5b      	lsrs	r3, r3, #9
 8005e2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e32:	3301      	adds	r3, #1
 8005e34:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	ee07 3a90 	vmov	s15, r3
 8005e3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e40:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e4c:	ee17 3a90 	vmov	r3, s15
 8005e50:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005e52:	e005      	b.n	8005e60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	61bb      	str	r3, [r7, #24]
      break;
 8005e58:	e002      	b.n	8005e60 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005e5a:	4b07      	ldr	r3, [pc, #28]	@ (8005e78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e5c:	61bb      	str	r3, [r7, #24]
      break;
 8005e5e:	bf00      	nop
  }

  return sysclockfreq;
 8005e60:	69bb      	ldr	r3, [r7, #24]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3724      	adds	r7, #36	@ 0x24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	58024400 	.word	0x58024400
 8005e74:	03d09000 	.word	0x03d09000
 8005e78:	003d0900 	.word	0x003d0900
 8005e7c:	017d7840 	.word	0x017d7840
 8005e80:	46000000 	.word	0x46000000
 8005e84:	4c742400 	.word	0x4c742400
 8005e88:	4a742400 	.word	0x4a742400
 8005e8c:	4bbebc20 	.word	0x4bbebc20

08005e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005e96:	f7ff fe81 	bl	8005b9c <HAL_RCC_GetSysClockFreq>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	4b10      	ldr	r3, [pc, #64]	@ (8005ee0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	0a1b      	lsrs	r3, r3, #8
 8005ea2:	f003 030f 	and.w	r3, r3, #15
 8005ea6:	490f      	ldr	r1, [pc, #60]	@ (8005ee4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ea8:	5ccb      	ldrb	r3, [r1, r3]
 8005eaa:	f003 031f 	and.w	r3, r3, #31
 8005eae:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	f003 030f 	and.w	r3, r3, #15
 8005ebc:	4a09      	ldr	r2, [pc, #36]	@ (8005ee4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ebe:	5cd3      	ldrb	r3, [r2, r3]
 8005ec0:	f003 031f 	and.w	r3, r3, #31
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eca:	4a07      	ldr	r2, [pc, #28]	@ (8005ee8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ecc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ece:	4a07      	ldr	r2, [pc, #28]	@ (8005eec <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ed4:	4b04      	ldr	r3, [pc, #16]	@ (8005ee8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	58024400 	.word	0x58024400
 8005ee4:	08017c8c 	.word	0x08017c8c
 8005ee8:	24000004 	.word	0x24000004
 8005eec:	24000000 	.word	0x24000000

08005ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005ef4:	f7ff ffcc 	bl	8005e90 <HAL_RCC_GetHCLKFreq>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	4b06      	ldr	r3, [pc, #24]	@ (8005f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	091b      	lsrs	r3, r3, #4
 8005f00:	f003 0307 	and.w	r3, r3, #7
 8005f04:	4904      	ldr	r1, [pc, #16]	@ (8005f18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f06:	5ccb      	ldrb	r3, [r1, r3]
 8005f08:	f003 031f 	and.w	r3, r3, #31
 8005f0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	58024400 	.word	0x58024400
 8005f18:	08017c8c 	.word	0x08017c8c

08005f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005f20:	f7ff ffb6 	bl	8005e90 <HAL_RCC_GetHCLKFreq>
 8005f24:	4602      	mov	r2, r0
 8005f26:	4b06      	ldr	r3, [pc, #24]	@ (8005f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	0a1b      	lsrs	r3, r3, #8
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	4904      	ldr	r1, [pc, #16]	@ (8005f44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f32:	5ccb      	ldrb	r3, [r1, r3]
 8005f34:	f003 031f 	and.w	r3, r3, #31
 8005f38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	58024400 	.word	0x58024400
 8005f44:	08017c8c 	.word	0x08017c8c

08005f48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	223f      	movs	r2, #63	@ 0x3f
 8005f56:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005f58:	4b1a      	ldr	r3, [pc, #104]	@ (8005fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	f003 0207 	and.w	r2, r3, #7
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005f64:	4b17      	ldr	r3, [pc, #92]	@ (8005fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005f70:	4b14      	ldr	r3, [pc, #80]	@ (8005fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	f003 020f 	and.w	r2, r3, #15
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005f7c:	4b11      	ldr	r3, [pc, #68]	@ (8005fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005f88:	4b0e      	ldr	r3, [pc, #56]	@ (8005fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005f94:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005fa0:	4b08      	ldr	r3, [pc, #32]	@ (8005fc4 <HAL_RCC_GetClockConfig+0x7c>)
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005fac:	4b06      	ldr	r3, [pc, #24]	@ (8005fc8 <HAL_RCC_GetClockConfig+0x80>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 020f 	and.w	r2, r3, #15
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	601a      	str	r2, [r3, #0]
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	58024400 	.word	0x58024400
 8005fc8:	52002000 	.word	0x52002000

08005fcc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fd0:	b0ca      	sub	sp, #296	@ 0x128
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005ff0:	2500      	movs	r5, #0
 8005ff2:	ea54 0305 	orrs.w	r3, r4, r5
 8005ff6:	d049      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ffe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006002:	d02f      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006004:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006008:	d828      	bhi.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800600a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800600e:	d01a      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006010:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006014:	d822      	bhi.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800601a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800601e:	d007      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006020:	e01c      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006022:	4bb8      	ldr	r3, [pc, #736]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006026:	4ab7      	ldr	r2, [pc, #732]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800602c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800602e:	e01a      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006034:	3308      	adds	r3, #8
 8006036:	2102      	movs	r1, #2
 8006038:	4618      	mov	r0, r3
 800603a:	f002 fb61 	bl	8008700 <RCCEx_PLL2_Config>
 800603e:	4603      	mov	r3, r0
 8006040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006044:	e00f      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800604a:	3328      	adds	r3, #40	@ 0x28
 800604c:	2102      	movs	r1, #2
 800604e:	4618      	mov	r0, r3
 8006050:	f002 fc08 	bl	8008864 <RCCEx_PLL3_Config>
 8006054:	4603      	mov	r3, r0
 8006056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800605a:	e004      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006062:	e000      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10a      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800606e:	4ba5      	ldr	r3, [pc, #660]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006072:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800607c:	4aa1      	ldr	r2, [pc, #644]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800607e:	430b      	orrs	r3, r1
 8006080:	6513      	str	r3, [r2, #80]	@ 0x50
 8006082:	e003      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006088:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800608c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006094:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006098:	f04f 0900 	mov.w	r9, #0
 800609c:	ea58 0309 	orrs.w	r3, r8, r9
 80060a0:	d047      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80060a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a8:	2b04      	cmp	r3, #4
 80060aa:	d82a      	bhi.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80060ac:	a201      	add	r2, pc, #4	@ (adr r2, 80060b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80060ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b2:	bf00      	nop
 80060b4:	080060c9 	.word	0x080060c9
 80060b8:	080060d7 	.word	0x080060d7
 80060bc:	080060ed 	.word	0x080060ed
 80060c0:	0800610b 	.word	0x0800610b
 80060c4:	0800610b 	.word	0x0800610b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c8:	4b8e      	ldr	r3, [pc, #568]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060cc:	4a8d      	ldr	r2, [pc, #564]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060d4:	e01a      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060da:	3308      	adds	r3, #8
 80060dc:	2100      	movs	r1, #0
 80060de:	4618      	mov	r0, r3
 80060e0:	f002 fb0e 	bl	8008700 <RCCEx_PLL2_Config>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060ea:	e00f      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f0:	3328      	adds	r3, #40	@ 0x28
 80060f2:	2100      	movs	r1, #0
 80060f4:	4618      	mov	r0, r3
 80060f6:	f002 fbb5 	bl	8008864 <RCCEx_PLL3_Config>
 80060fa:	4603      	mov	r3, r0
 80060fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006100:	e004      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006108:	e000      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800610a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800610c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10a      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006114:	4b7b      	ldr	r3, [pc, #492]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006118:	f023 0107 	bic.w	r1, r3, #7
 800611c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006122:	4a78      	ldr	r2, [pc, #480]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006124:	430b      	orrs	r3, r1
 8006126:	6513      	str	r3, [r2, #80]	@ 0x50
 8006128:	e003      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800612e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800613e:	f04f 0b00 	mov.w	fp, #0
 8006142:	ea5a 030b 	orrs.w	r3, sl, fp
 8006146:	d04c      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800614e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006152:	d030      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006158:	d829      	bhi.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800615a:	2bc0      	cmp	r3, #192	@ 0xc0
 800615c:	d02d      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800615e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006160:	d825      	bhi.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006162:	2b80      	cmp	r3, #128	@ 0x80
 8006164:	d018      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006166:	2b80      	cmp	r3, #128	@ 0x80
 8006168:	d821      	bhi.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800616e:	2b40      	cmp	r3, #64	@ 0x40
 8006170:	d007      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006172:	e01c      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006174:	4b63      	ldr	r3, [pc, #396]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006178:	4a62      	ldr	r2, [pc, #392]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800617a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800617e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006180:	e01c      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006186:	3308      	adds	r3, #8
 8006188:	2100      	movs	r1, #0
 800618a:	4618      	mov	r0, r3
 800618c:	f002 fab8 	bl	8008700 <RCCEx_PLL2_Config>
 8006190:	4603      	mov	r3, r0
 8006192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006196:	e011      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619c:	3328      	adds	r3, #40	@ 0x28
 800619e:	2100      	movs	r1, #0
 80061a0:	4618      	mov	r0, r3
 80061a2:	f002 fb5f 	bl	8008864 <RCCEx_PLL3_Config>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80061ac:	e006      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061b4:	e002      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80061b6:	bf00      	nop
 80061b8:	e000      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80061ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10a      	bne.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80061c4:	4b4f      	ldr	r3, [pc, #316]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061c8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80061cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061d2:	4a4c      	ldr	r2, [pc, #304]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061d4:	430b      	orrs	r3, r1
 80061d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80061d8:	e003      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80061e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80061ee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80061f2:	2300      	movs	r3, #0
 80061f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80061f8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80061fc:	460b      	mov	r3, r1
 80061fe:	4313      	orrs	r3, r2
 8006200:	d053      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006206:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800620a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800620e:	d035      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006210:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006214:	d82e      	bhi.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006216:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800621a:	d031      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800621c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006220:	d828      	bhi.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006222:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006226:	d01a      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006228:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800622c:	d822      	bhi.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006232:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006236:	d007      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006238:	e01c      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800623a:	4b32      	ldr	r3, [pc, #200]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800623c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623e:	4a31      	ldr	r2, [pc, #196]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006244:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006246:	e01c      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800624c:	3308      	adds	r3, #8
 800624e:	2100      	movs	r1, #0
 8006250:	4618      	mov	r0, r3
 8006252:	f002 fa55 	bl	8008700 <RCCEx_PLL2_Config>
 8006256:	4603      	mov	r3, r0
 8006258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800625c:	e011      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800625e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006262:	3328      	adds	r3, #40	@ 0x28
 8006264:	2100      	movs	r1, #0
 8006266:	4618      	mov	r0, r3
 8006268:	f002 fafc 	bl	8008864 <RCCEx_PLL3_Config>
 800626c:	4603      	mov	r3, r0
 800626e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006272:	e006      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800627a:	e002      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800627c:	bf00      	nop
 800627e:	e000      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10b      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800628a:	4b1e      	ldr	r3, [pc, #120]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800628c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800628e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006296:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800629a:	4a1a      	ldr	r2, [pc, #104]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800629c:	430b      	orrs	r3, r1
 800629e:	6593      	str	r3, [r2, #88]	@ 0x58
 80062a0:	e003      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80062aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80062b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80062ba:	2300      	movs	r3, #0
 80062bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80062c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80062c4:	460b      	mov	r3, r1
 80062c6:	4313      	orrs	r3, r2
 80062c8:	d056      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80062ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80062d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062d6:	d038      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80062d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062dc:	d831      	bhi.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80062e2:	d034      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80062e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80062e8:	d82b      	bhi.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062ee:	d01d      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80062f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062f4:	d825      	bhi.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d006      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80062fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062fe:	d00a      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006300:	e01f      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006302:	bf00      	nop
 8006304:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006308:	4ba2      	ldr	r3, [pc, #648]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800630a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630c:	4aa1      	ldr	r2, [pc, #644]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800630e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006312:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006314:	e01c      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631a:	3308      	adds	r3, #8
 800631c:	2100      	movs	r1, #0
 800631e:	4618      	mov	r0, r3
 8006320:	f002 f9ee 	bl	8008700 <RCCEx_PLL2_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800632a:	e011      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800632c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006330:	3328      	adds	r3, #40	@ 0x28
 8006332:	2100      	movs	r1, #0
 8006334:	4618      	mov	r0, r3
 8006336:	f002 fa95 	bl	8008864 <RCCEx_PLL3_Config>
 800633a:	4603      	mov	r3, r0
 800633c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006340:	e006      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006348:	e002      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800634a:	bf00      	nop
 800634c:	e000      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800634e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10b      	bne.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006358:	4b8e      	ldr	r3, [pc, #568]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800635a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006364:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006368:	4a8a      	ldr	r2, [pc, #552]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800636a:	430b      	orrs	r3, r1
 800636c:	6593      	str	r3, [r2, #88]	@ 0x58
 800636e:	e003      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006370:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006374:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006384:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006388:	2300      	movs	r3, #0
 800638a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800638e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006392:	460b      	mov	r3, r1
 8006394:	4313      	orrs	r3, r2
 8006396:	d03a      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800639c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800639e:	2b30      	cmp	r3, #48	@ 0x30
 80063a0:	d01f      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80063a2:	2b30      	cmp	r3, #48	@ 0x30
 80063a4:	d819      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80063a6:	2b20      	cmp	r3, #32
 80063a8:	d00c      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80063aa:	2b20      	cmp	r3, #32
 80063ac:	d815      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d019      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80063b2:	2b10      	cmp	r3, #16
 80063b4:	d111      	bne.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b6:	4b77      	ldr	r3, [pc, #476]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ba:	4a76      	ldr	r2, [pc, #472]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80063c2:	e011      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c8:	3308      	adds	r3, #8
 80063ca:	2102      	movs	r1, #2
 80063cc:	4618      	mov	r0, r3
 80063ce:	f002 f997 	bl	8008700 <RCCEx_PLL2_Config>
 80063d2:	4603      	mov	r3, r0
 80063d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80063d8:	e006      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063e0:	e002      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80063e2:	bf00      	nop
 80063e4:	e000      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80063e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10a      	bne.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80063f0:	4b68      	ldr	r3, [pc, #416]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063f4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80063f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063fe:	4a65      	ldr	r2, [pc, #404]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006400:	430b      	orrs	r3, r1
 8006402:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006404:	e003      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800640a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800640e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800641a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800641e:	2300      	movs	r3, #0
 8006420:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006424:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006428:	460b      	mov	r3, r1
 800642a:	4313      	orrs	r3, r2
 800642c:	d051      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006434:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006438:	d035      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800643a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800643e:	d82e      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006440:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006444:	d031      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006446:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800644a:	d828      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800644c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006450:	d01a      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006456:	d822      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800645c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006460:	d007      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006462:	e01c      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006464:	4b4b      	ldr	r3, [pc, #300]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006468:	4a4a      	ldr	r2, [pc, #296]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800646a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800646e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006470:	e01c      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006476:	3308      	adds	r3, #8
 8006478:	2100      	movs	r1, #0
 800647a:	4618      	mov	r0, r3
 800647c:	f002 f940 	bl	8008700 <RCCEx_PLL2_Config>
 8006480:	4603      	mov	r3, r0
 8006482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006486:	e011      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648c:	3328      	adds	r3, #40	@ 0x28
 800648e:	2100      	movs	r1, #0
 8006490:	4618      	mov	r0, r3
 8006492:	f002 f9e7 	bl	8008864 <RCCEx_PLL3_Config>
 8006496:	4603      	mov	r3, r0
 8006498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800649c:	e006      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064a4:	e002      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80064a6:	bf00      	nop
 80064a8:	e000      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80064aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10a      	bne.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80064b4:	4b37      	ldr	r3, [pc, #220]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064b8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80064bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064c2:	4a34      	ldr	r2, [pc, #208]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064c4:	430b      	orrs	r3, r1
 80064c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80064c8:	e003      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80064d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064da:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80064de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80064e2:	2300      	movs	r3, #0
 80064e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80064e8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80064ec:	460b      	mov	r3, r1
 80064ee:	4313      	orrs	r3, r2
 80064f0:	d056      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80064f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064fc:	d033      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80064fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006502:	d82c      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006504:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006508:	d02f      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800650a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800650e:	d826      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006510:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006514:	d02b      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006516:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800651a:	d820      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800651c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006520:	d012      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006522:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006526:	d81a      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006528:	2b00      	cmp	r3, #0
 800652a:	d022      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800652c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006530:	d115      	bne.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006536:	3308      	adds	r3, #8
 8006538:	2101      	movs	r1, #1
 800653a:	4618      	mov	r0, r3
 800653c:	f002 f8e0 	bl	8008700 <RCCEx_PLL2_Config>
 8006540:	4603      	mov	r3, r0
 8006542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006546:	e015      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654c:	3328      	adds	r3, #40	@ 0x28
 800654e:	2101      	movs	r1, #1
 8006550:	4618      	mov	r0, r3
 8006552:	f002 f987 	bl	8008864 <RCCEx_PLL3_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800655c:	e00a      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006564:	e006      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006566:	bf00      	nop
 8006568:	e004      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800656a:	bf00      	nop
 800656c:	e002      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800656e:	bf00      	nop
 8006570:	e000      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006574:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10d      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800657c:	4b05      	ldr	r3, [pc, #20]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800657e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006580:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006588:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800658a:	4a02      	ldr	r2, [pc, #8]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800658c:	430b      	orrs	r3, r1
 800658e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006590:	e006      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006592:	bf00      	nop
 8006594:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006598:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800659c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80065a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80065ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065b0:	2300      	movs	r3, #0
 80065b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065b6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4313      	orrs	r3, r2
 80065be:	d055      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80065c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80065c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065cc:	d033      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80065ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065d2:	d82c      	bhi.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d8:	d02f      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80065da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065de:	d826      	bhi.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065e4:	d02b      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80065e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065ea:	d820      	bhi.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065f0:	d012      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80065f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065f6:	d81a      	bhi.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d022      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80065fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006600:	d115      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006606:	3308      	adds	r3, #8
 8006608:	2101      	movs	r1, #1
 800660a:	4618      	mov	r0, r3
 800660c:	f002 f878 	bl	8008700 <RCCEx_PLL2_Config>
 8006610:	4603      	mov	r3, r0
 8006612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006616:	e015      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661c:	3328      	adds	r3, #40	@ 0x28
 800661e:	2101      	movs	r1, #1
 8006620:	4618      	mov	r0, r3
 8006622:	f002 f91f 	bl	8008864 <RCCEx_PLL3_Config>
 8006626:	4603      	mov	r3, r0
 8006628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800662c:	e00a      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006634:	e006      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006636:	bf00      	nop
 8006638:	e004      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800663a:	bf00      	nop
 800663c:	e002      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800663e:	bf00      	nop
 8006640:	e000      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10b      	bne.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800664c:	4ba3      	ldr	r3, [pc, #652]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800664e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006650:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006658:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800665c:	4a9f      	ldr	r2, [pc, #636]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800665e:	430b      	orrs	r3, r1
 8006660:	6593      	str	r3, [r2, #88]	@ 0x58
 8006662:	e003      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006668:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800666c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006674:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006678:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800667c:	2300      	movs	r3, #0
 800667e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006682:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006686:	460b      	mov	r3, r1
 8006688:	4313      	orrs	r3, r2
 800668a:	d037      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800668c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006696:	d00e      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800669c:	d816      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d018      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80066a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066a6:	d111      	bne.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066a8:	4b8c      	ldr	r3, [pc, #560]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ac:	4a8b      	ldr	r2, [pc, #556]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066b4:	e00f      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ba:	3308      	adds	r3, #8
 80066bc:	2101      	movs	r1, #1
 80066be:	4618      	mov	r0, r3
 80066c0:	f002 f81e 	bl	8008700 <RCCEx_PLL2_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066ca:	e004      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066d2:	e000      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80066d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10a      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066de:	4b7f      	ldr	r3, [pc, #508]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80066e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ec:	4a7b      	ldr	r2, [pc, #492]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066ee:	430b      	orrs	r3, r1
 80066f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80066f2:	e003      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80066fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006704:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006708:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800670c:	2300      	movs	r3, #0
 800670e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006712:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006716:	460b      	mov	r3, r1
 8006718:	4313      	orrs	r3, r2
 800671a:	d039      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800671c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006722:	2b03      	cmp	r3, #3
 8006724:	d81c      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006726:	a201      	add	r2, pc, #4	@ (adr r2, 800672c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672c:	08006769 	.word	0x08006769
 8006730:	0800673d 	.word	0x0800673d
 8006734:	0800674b 	.word	0x0800674b
 8006738:	08006769 	.word	0x08006769
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800673c:	4b67      	ldr	r3, [pc, #412]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800673e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006740:	4a66      	ldr	r2, [pc, #408]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006742:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006746:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006748:	e00f      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800674a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674e:	3308      	adds	r3, #8
 8006750:	2102      	movs	r1, #2
 8006752:	4618      	mov	r0, r3
 8006754:	f001 ffd4 	bl	8008700 <RCCEx_PLL2_Config>
 8006758:	4603      	mov	r3, r0
 800675a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800675e:	e004      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006766:	e000      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800676a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10a      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006772:	4b5a      	ldr	r3, [pc, #360]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006776:	f023 0103 	bic.w	r1, r3, #3
 800677a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006780:	4a56      	ldr	r2, [pc, #344]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006782:	430b      	orrs	r3, r1
 8006784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006786:	e003      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006788:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800678c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800679c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067a0:	2300      	movs	r3, #0
 80067a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80067aa:	460b      	mov	r3, r1
 80067ac:	4313      	orrs	r3, r2
 80067ae:	f000 809f 	beq.w	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067b2:	4b4b      	ldr	r3, [pc, #300]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a4a      	ldr	r2, [pc, #296]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067be:	f7fd fac3 	bl	8003d48 <HAL_GetTick>
 80067c2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067c6:	e00b      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c8:	f7fd fabe 	bl	8003d48 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b64      	cmp	r3, #100	@ 0x64
 80067d6:	d903      	bls.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067de:	e005      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067e0:	4b3f      	ldr	r3, [pc, #252]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0ed      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80067ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d179      	bne.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80067f4:	4b39      	ldr	r3, [pc, #228]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80067f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006800:	4053      	eors	r3, r2
 8006802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006806:	2b00      	cmp	r3, #0
 8006808:	d015      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800680a:	4b34      	ldr	r3, [pc, #208]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800680c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800680e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006812:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006816:	4b31      	ldr	r3, [pc, #196]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800681a:	4a30      	ldr	r2, [pc, #192]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800681c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006820:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006822:	4b2e      	ldr	r3, [pc, #184]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006826:	4a2d      	ldr	r2, [pc, #180]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800682c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800682e:	4a2b      	ldr	r2, [pc, #172]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006830:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006834:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800683e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006842:	d118      	bne.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006844:	f7fd fa80 	bl	8003d48 <HAL_GetTick>
 8006848:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800684c:	e00d      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800684e:	f7fd fa7b 	bl	8003d48 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006858:	1ad2      	subs	r2, r2, r3
 800685a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800685e:	429a      	cmp	r2, r3
 8006860:	d903      	bls.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006868:	e005      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800686a:	4b1c      	ldr	r3, [pc, #112]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800686c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d0eb      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800687a:	2b00      	cmp	r3, #0
 800687c:	d129      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800687e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006882:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800688a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800688e:	d10e      	bne.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006890:	4b12      	ldr	r3, [pc, #72]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800689c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068a0:	091a      	lsrs	r2, r3, #4
 80068a2:	4b10      	ldr	r3, [pc, #64]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	4a0d      	ldr	r2, [pc, #52]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068a8:	430b      	orrs	r3, r1
 80068aa:	6113      	str	r3, [r2, #16]
 80068ac:	e005      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80068ae:	4b0b      	ldr	r3, [pc, #44]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	4a0a      	ldr	r2, [pc, #40]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80068b8:	6113      	str	r3, [r2, #16]
 80068ba:	4b08      	ldr	r3, [pc, #32]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80068be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ca:	4a04      	ldr	r2, [pc, #16]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068cc:	430b      	orrs	r3, r1
 80068ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80068d0:	e00e      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80068da:	e009      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80068dc:	58024400 	.word	0x58024400
 80068e0:	58024800 	.word	0x58024800
 80068e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80068f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	f002 0301 	and.w	r3, r2, #1
 80068fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006900:	2300      	movs	r3, #0
 8006902:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006906:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800690a:	460b      	mov	r3, r1
 800690c:	4313      	orrs	r3, r2
 800690e:	f000 8089 	beq.w	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006916:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006918:	2b28      	cmp	r3, #40	@ 0x28
 800691a:	d86b      	bhi.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800691c:	a201      	add	r2, pc, #4	@ (adr r2, 8006924 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800691e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006922:	bf00      	nop
 8006924:	080069fd 	.word	0x080069fd
 8006928:	080069f5 	.word	0x080069f5
 800692c:	080069f5 	.word	0x080069f5
 8006930:	080069f5 	.word	0x080069f5
 8006934:	080069f5 	.word	0x080069f5
 8006938:	080069f5 	.word	0x080069f5
 800693c:	080069f5 	.word	0x080069f5
 8006940:	080069f5 	.word	0x080069f5
 8006944:	080069c9 	.word	0x080069c9
 8006948:	080069f5 	.word	0x080069f5
 800694c:	080069f5 	.word	0x080069f5
 8006950:	080069f5 	.word	0x080069f5
 8006954:	080069f5 	.word	0x080069f5
 8006958:	080069f5 	.word	0x080069f5
 800695c:	080069f5 	.word	0x080069f5
 8006960:	080069f5 	.word	0x080069f5
 8006964:	080069df 	.word	0x080069df
 8006968:	080069f5 	.word	0x080069f5
 800696c:	080069f5 	.word	0x080069f5
 8006970:	080069f5 	.word	0x080069f5
 8006974:	080069f5 	.word	0x080069f5
 8006978:	080069f5 	.word	0x080069f5
 800697c:	080069f5 	.word	0x080069f5
 8006980:	080069f5 	.word	0x080069f5
 8006984:	080069fd 	.word	0x080069fd
 8006988:	080069f5 	.word	0x080069f5
 800698c:	080069f5 	.word	0x080069f5
 8006990:	080069f5 	.word	0x080069f5
 8006994:	080069f5 	.word	0x080069f5
 8006998:	080069f5 	.word	0x080069f5
 800699c:	080069f5 	.word	0x080069f5
 80069a0:	080069f5 	.word	0x080069f5
 80069a4:	080069fd 	.word	0x080069fd
 80069a8:	080069f5 	.word	0x080069f5
 80069ac:	080069f5 	.word	0x080069f5
 80069b0:	080069f5 	.word	0x080069f5
 80069b4:	080069f5 	.word	0x080069f5
 80069b8:	080069f5 	.word	0x080069f5
 80069bc:	080069f5 	.word	0x080069f5
 80069c0:	080069f5 	.word	0x080069f5
 80069c4:	080069fd 	.word	0x080069fd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069cc:	3308      	adds	r3, #8
 80069ce:	2101      	movs	r1, #1
 80069d0:	4618      	mov	r0, r3
 80069d2:	f001 fe95 	bl	8008700 <RCCEx_PLL2_Config>
 80069d6:	4603      	mov	r3, r0
 80069d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80069dc:	e00f      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e2:	3328      	adds	r3, #40	@ 0x28
 80069e4:	2101      	movs	r1, #1
 80069e6:	4618      	mov	r0, r3
 80069e8:	f001 ff3c 	bl	8008864 <RCCEx_PLL3_Config>
 80069ec:	4603      	mov	r3, r0
 80069ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80069f2:	e004      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069fa:	e000      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80069fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10a      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a06:	4bbf      	ldr	r3, [pc, #764]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a14:	4abb      	ldr	r2, [pc, #748]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a16:	430b      	orrs	r3, r1
 8006a18:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a1a:	e003      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2c:	f002 0302 	and.w	r3, r2, #2
 8006a30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a34:	2300      	movs	r3, #0
 8006a36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a3a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4313      	orrs	r3, r2
 8006a42:	d041      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a4a:	2b05      	cmp	r3, #5
 8006a4c:	d824      	bhi.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a54 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a54:	08006aa1 	.word	0x08006aa1
 8006a58:	08006a6d 	.word	0x08006a6d
 8006a5c:	08006a83 	.word	0x08006a83
 8006a60:	08006aa1 	.word	0x08006aa1
 8006a64:	08006aa1 	.word	0x08006aa1
 8006a68:	08006aa1 	.word	0x08006aa1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a70:	3308      	adds	r3, #8
 8006a72:	2101      	movs	r1, #1
 8006a74:	4618      	mov	r0, r3
 8006a76:	f001 fe43 	bl	8008700 <RCCEx_PLL2_Config>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a80:	e00f      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a86:	3328      	adds	r3, #40	@ 0x28
 8006a88:	2101      	movs	r1, #1
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f001 feea 	bl	8008864 <RCCEx_PLL3_Config>
 8006a90:	4603      	mov	r3, r0
 8006a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a96:	e004      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a9e:	e000      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10a      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006aaa:	4b96      	ldr	r3, [pc, #600]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aae:	f023 0107 	bic.w	r1, r3, #7
 8006ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ab8:	4a92      	ldr	r2, [pc, #584]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006aba:	430b      	orrs	r3, r1
 8006abc:	6553      	str	r3, [r2, #84]	@ 0x54
 8006abe:	e003      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ac4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad0:	f002 0304 	and.w	r3, r2, #4
 8006ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ad8:	2300      	movs	r3, #0
 8006ada:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ade:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	d044      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006af0:	2b05      	cmp	r3, #5
 8006af2:	d825      	bhi.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006af4:	a201      	add	r2, pc, #4	@ (adr r2, 8006afc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afa:	bf00      	nop
 8006afc:	08006b49 	.word	0x08006b49
 8006b00:	08006b15 	.word	0x08006b15
 8006b04:	08006b2b 	.word	0x08006b2b
 8006b08:	08006b49 	.word	0x08006b49
 8006b0c:	08006b49 	.word	0x08006b49
 8006b10:	08006b49 	.word	0x08006b49
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b18:	3308      	adds	r3, #8
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f001 fdef 	bl	8008700 <RCCEx_PLL2_Config>
 8006b22:	4603      	mov	r3, r0
 8006b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b28:	e00f      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b2e:	3328      	adds	r3, #40	@ 0x28
 8006b30:	2101      	movs	r1, #1
 8006b32:	4618      	mov	r0, r3
 8006b34:	f001 fe96 	bl	8008864 <RCCEx_PLL3_Config>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b3e:	e004      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b46:	e000      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10b      	bne.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b52:	4b6c      	ldr	r3, [pc, #432]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b56:	f023 0107 	bic.w	r1, r3, #7
 8006b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b62:	4a68      	ldr	r2, [pc, #416]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b64:	430b      	orrs	r3, r1
 8006b66:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b68:	e003      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	f002 0320 	and.w	r3, r2, #32
 8006b7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b82:	2300      	movs	r3, #0
 8006b84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	d055      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b9e:	d033      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ba4:	d82c      	bhi.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006baa:	d02f      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bb0:	d826      	bhi.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bb6:	d02b      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006bb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bbc:	d820      	bhi.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bc2:	d012      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bc8:	d81a      	bhi.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d022      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006bce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bd2:	d115      	bne.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd8:	3308      	adds	r3, #8
 8006bda:	2100      	movs	r1, #0
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f001 fd8f 	bl	8008700 <RCCEx_PLL2_Config>
 8006be2:	4603      	mov	r3, r0
 8006be4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006be8:	e015      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bee:	3328      	adds	r3, #40	@ 0x28
 8006bf0:	2102      	movs	r1, #2
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f001 fe36 	bl	8008864 <RCCEx_PLL3_Config>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006bfe:	e00a      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c06:	e006      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c08:	bf00      	nop
 8006c0a:	e004      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c0c:	bf00      	nop
 8006c0e:	e002      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c10:	bf00      	nop
 8006c12:	e000      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10b      	bne.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c1e:	4b39      	ldr	r3, [pc, #228]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c22:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c2e:	4a35      	ldr	r2, [pc, #212]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c30:	430b      	orrs	r3, r1
 8006c32:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c34:	e003      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c46:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c54:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	d058      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c66:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006c6a:	d033      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006c6c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006c70:	d82c      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c76:	d02f      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c7c:	d826      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c82:	d02b      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006c84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c88:	d820      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c8e:	d012      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006c90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c94:	d81a      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d022      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c9e:	d115      	bne.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f001 fd29 	bl	8008700 <RCCEx_PLL2_Config>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006cb4:	e015      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cba:	3328      	adds	r3, #40	@ 0x28
 8006cbc:	2102      	movs	r1, #2
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f001 fdd0 	bl	8008864 <RCCEx_PLL3_Config>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006cca:	e00a      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cd2:	e006      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cd4:	bf00      	nop
 8006cd6:	e004      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cd8:	bf00      	nop
 8006cda:	e002      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cdc:	bf00      	nop
 8006cde:	e000      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10e      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cea:	4b06      	ldr	r3, [pc, #24]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cfa:	4a02      	ldr	r2, [pc, #8]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cfc:	430b      	orrs	r3, r1
 8006cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d00:	e006      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006d02:	bf00      	nop
 8006d04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d18:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006d1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d20:	2300      	movs	r3, #0
 8006d22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d26:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	d055      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d38:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d3c:	d033      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006d3e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d42:	d82c      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d48:	d02f      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006d4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d4e:	d826      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d50:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d54:	d02b      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006d56:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d5a:	d820      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d60:	d012      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006d62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d66:	d81a      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d022      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006d6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d70:	d115      	bne.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d76:	3308      	adds	r3, #8
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f001 fcc0 	bl	8008700 <RCCEx_PLL2_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d86:	e015      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d8c:	3328      	adds	r3, #40	@ 0x28
 8006d8e:	2102      	movs	r1, #2
 8006d90:	4618      	mov	r0, r3
 8006d92:	f001 fd67 	bl	8008864 <RCCEx_PLL3_Config>
 8006d96:	4603      	mov	r3, r0
 8006d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d9c:	e00a      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006da4:	e006      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006da6:	bf00      	nop
 8006da8:	e004      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006daa:	bf00      	nop
 8006dac:	e002      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006dae:	bf00      	nop
 8006db0:	e000      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006db4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10b      	bne.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006dbc:	4ba1      	ldr	r3, [pc, #644]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006dcc:	4a9d      	ldr	r2, [pc, #628]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dd2:	e003      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	f002 0308 	and.w	r3, r2, #8
 8006de8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006dec:	2300      	movs	r3, #0
 8006dee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006df2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006df6:	460b      	mov	r3, r1
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	d01e      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e08:	d10c      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e0e:	3328      	adds	r3, #40	@ 0x28
 8006e10:	2102      	movs	r1, #2
 8006e12:	4618      	mov	r0, r3
 8006e14:	f001 fd26 	bl	8008864 <RCCEx_PLL3_Config>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e24:	4b87      	ldr	r3, [pc, #540]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e28:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e34:	4a83      	ldr	r2, [pc, #524]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e36:	430b      	orrs	r3, r1
 8006e38:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	f002 0310 	and.w	r3, r2, #16
 8006e46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e50:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006e54:	460b      	mov	r3, r1
 8006e56:	4313      	orrs	r3, r2
 8006e58:	d01e      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e66:	d10c      	bne.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6c:	3328      	adds	r3, #40	@ 0x28
 8006e6e:	2102      	movs	r1, #2
 8006e70:	4618      	mov	r0, r3
 8006e72:	f001 fcf7 	bl	8008864 <RCCEx_PLL3_Config>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e82:	4b70      	ldr	r3, [pc, #448]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e92:	4a6c      	ldr	r2, [pc, #432]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e94:	430b      	orrs	r3, r1
 8006e96:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006ea4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006eae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	d03e      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ebc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ec4:	d022      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006ec6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eca:	d81b      	bhi.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d003      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ed4:	d00b      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006ed6:	e015      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006edc:	3308      	adds	r3, #8
 8006ede:	2100      	movs	r1, #0
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f001 fc0d 	bl	8008700 <RCCEx_PLL2_Config>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006eec:	e00f      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef2:	3328      	adds	r3, #40	@ 0x28
 8006ef4:	2102      	movs	r1, #2
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f001 fcb4 	bl	8008864 <RCCEx_PLL3_Config>
 8006efc:	4603      	mov	r3, r0
 8006efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f02:	e004      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f0a:	e000      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10b      	bne.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f16:	4b4b      	ldr	r3, [pc, #300]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f1a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f26:	4a47      	ldr	r2, [pc, #284]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f28:	430b      	orrs	r3, r1
 8006f2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f2c:	e003      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006f42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f44:	2300      	movs	r3, #0
 8006f46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f48:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	d03b      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f5e:	d01f      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006f60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f64:	d818      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f6a:	d003      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006f6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f70:	d007      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006f72:	e011      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f74:	4b33      	ldr	r3, [pc, #204]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f78:	4a32      	ldr	r2, [pc, #200]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f80:	e00f      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f86:	3328      	adds	r3, #40	@ 0x28
 8006f88:	2101      	movs	r1, #1
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f001 fc6a 	bl	8008864 <RCCEx_PLL3_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f96:	e004      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f9e:	e000      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10b      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006faa:	4b26      	ldr	r3, [pc, #152]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fba:	4a22      	ldr	r2, [pc, #136]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fbc:	430b      	orrs	r3, r1
 8006fbe:	6553      	str	r3, [r2, #84]	@ 0x54
 8006fc0:	e003      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006fd6:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fd8:	2300      	movs	r3, #0
 8006fda:	677b      	str	r3, [r7, #116]	@ 0x74
 8006fdc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	d034      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ff4:	d007      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006ff6:	e011      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ff8:	4b12      	ldr	r3, [pc, #72]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffc:	4a11      	ldr	r2, [pc, #68]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ffe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007002:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007004:	e00e      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800700a:	3308      	adds	r3, #8
 800700c:	2102      	movs	r1, #2
 800700e:	4618      	mov	r0, r3
 8007010:	f001 fb76 	bl	8008700 <RCCEx_PLL2_Config>
 8007014:	4603      	mov	r3, r0
 8007016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800701a:	e003      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007022:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007024:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10d      	bne.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800702c:	4b05      	ldr	r3, [pc, #20]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800702e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007030:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800703a:	4a02      	ldr	r2, [pc, #8]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800703c:	430b      	orrs	r3, r1
 800703e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007040:	e006      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007042:	bf00      	nop
 8007044:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800704c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800705c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800705e:	2300      	movs	r3, #0
 8007060:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007062:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007066:	460b      	mov	r3, r1
 8007068:	4313      	orrs	r3, r2
 800706a:	d00c      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800706c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007070:	3328      	adds	r3, #40	@ 0x28
 8007072:	2102      	movs	r1, #2
 8007074:	4618      	mov	r0, r3
 8007076:	f001 fbf5 	bl	8008864 <RCCEx_PLL3_Config>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007092:	663b      	str	r3, [r7, #96]	@ 0x60
 8007094:	2300      	movs	r3, #0
 8007096:	667b      	str	r3, [r7, #100]	@ 0x64
 8007098:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800709c:	460b      	mov	r3, r1
 800709e:	4313      	orrs	r3, r2
 80070a0:	d038      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80070a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070ae:	d018      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80070b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070b4:	d811      	bhi.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80070b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070ba:	d014      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80070bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070c0:	d80b      	bhi.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d011      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80070c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070ca:	d106      	bne.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070cc:	4bc3      	ldr	r3, [pc, #780]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d0:	4ac2      	ldr	r2, [pc, #776]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80070d8:	e008      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070e0:	e004      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80070e2:	bf00      	nop
 80070e4:	e002      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80070e6:	bf00      	nop
 80070e8:	e000      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80070ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10b      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070f4:	4bb9      	ldr	r3, [pc, #740]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070f8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80070fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007100:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007104:	4ab5      	ldr	r2, [pc, #724]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007106:	430b      	orrs	r3, r1
 8007108:	6553      	str	r3, [r2, #84]	@ 0x54
 800710a:	e003      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007110:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007120:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007122:	2300      	movs	r3, #0
 8007124:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007126:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800712a:	460b      	mov	r3, r1
 800712c:	4313      	orrs	r3, r2
 800712e:	d009      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007130:	4baa      	ldr	r3, [pc, #680]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007134:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800713c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800713e:	4aa7      	ldr	r2, [pc, #668]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007140:	430b      	orrs	r3, r1
 8007142:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007150:	653b      	str	r3, [r7, #80]	@ 0x50
 8007152:	2300      	movs	r3, #0
 8007154:	657b      	str	r3, [r7, #84]	@ 0x54
 8007156:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800715a:	460b      	mov	r3, r1
 800715c:	4313      	orrs	r3, r2
 800715e:	d00a      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007160:	4b9e      	ldr	r3, [pc, #632]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007170:	4a9a      	ldr	r2, [pc, #616]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007172:	430b      	orrs	r3, r1
 8007174:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800717a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007182:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007184:	2300      	movs	r3, #0
 8007186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007188:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800718c:	460b      	mov	r3, r1
 800718e:	4313      	orrs	r3, r2
 8007190:	d009      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007192:	4b92      	ldr	r3, [pc, #584]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007196:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800719a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800719e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071a0:	4a8e      	ldr	r2, [pc, #568]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071a2:	430b      	orrs	r3, r1
 80071a4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80071a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80071b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80071b4:	2300      	movs	r3, #0
 80071b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80071b8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80071bc:	460b      	mov	r3, r1
 80071be:	4313      	orrs	r3, r2
 80071c0:	d00e      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071c2:	4b86      	ldr	r3, [pc, #536]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	4a85      	ldr	r2, [pc, #532]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071cc:	6113      	str	r3, [r2, #16]
 80071ce:	4b83      	ldr	r3, [pc, #524]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071d0:	6919      	ldr	r1, [r3, #16]
 80071d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80071da:	4a80      	ldr	r2, [pc, #512]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071dc:	430b      	orrs	r3, r1
 80071de:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80071e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80071ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071ee:	2300      	movs	r3, #0
 80071f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80071f6:	460b      	mov	r3, r1
 80071f8:	4313      	orrs	r3, r2
 80071fa:	d009      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80071fc:	4b77      	ldr	r3, [pc, #476]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007200:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800720a:	4a74      	ldr	r2, [pc, #464]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800720c:	430b      	orrs	r3, r1
 800720e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800721c:	633b      	str	r3, [r7, #48]	@ 0x30
 800721e:	2300      	movs	r3, #0
 8007220:	637b      	str	r3, [r7, #52]	@ 0x34
 8007222:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007226:	460b      	mov	r3, r1
 8007228:	4313      	orrs	r3, r2
 800722a:	d00a      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800722c:	4b6b      	ldr	r3, [pc, #428]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800722e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007230:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007238:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800723c:	4a67      	ldr	r2, [pc, #412]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800723e:	430b      	orrs	r3, r1
 8007240:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724a:	2100      	movs	r1, #0
 800724c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007254:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007258:	460b      	mov	r3, r1
 800725a:	4313      	orrs	r3, r2
 800725c:	d011      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800725e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007262:	3308      	adds	r3, #8
 8007264:	2100      	movs	r1, #0
 8007266:	4618      	mov	r0, r3
 8007268:	f001 fa4a 	bl	8008700 <RCCEx_PLL2_Config>
 800726c:	4603      	mov	r3, r0
 800726e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800727a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800727e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	2100      	movs	r1, #0
 800728c:	6239      	str	r1, [r7, #32]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	627b      	str	r3, [r7, #36]	@ 0x24
 8007294:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007298:	460b      	mov	r3, r1
 800729a:	4313      	orrs	r3, r2
 800729c:	d011      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800729e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a2:	3308      	adds	r3, #8
 80072a4:	2101      	movs	r1, #1
 80072a6:	4618      	mov	r0, r3
 80072a8:	f001 fa2a 	bl	8008700 <RCCEx_PLL2_Config>
 80072ac:	4603      	mov	r3, r0
 80072ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80072b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80072c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	2100      	movs	r1, #0
 80072cc:	61b9      	str	r1, [r7, #24]
 80072ce:	f003 0304 	and.w	r3, r3, #4
 80072d2:	61fb      	str	r3, [r7, #28]
 80072d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80072d8:	460b      	mov	r3, r1
 80072da:	4313      	orrs	r3, r2
 80072dc:	d011      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e2:	3308      	adds	r3, #8
 80072e4:	2102      	movs	r1, #2
 80072e6:	4618      	mov	r0, r3
 80072e8:	f001 fa0a 	bl	8008700 <RCCEx_PLL2_Config>
 80072ec:	4603      	mov	r3, r0
 80072ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80072f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730a:	2100      	movs	r1, #0
 800730c:	6139      	str	r1, [r7, #16]
 800730e:	f003 0308 	and.w	r3, r3, #8
 8007312:	617b      	str	r3, [r7, #20]
 8007314:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007318:	460b      	mov	r3, r1
 800731a:	4313      	orrs	r3, r2
 800731c:	d011      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800731e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007322:	3328      	adds	r3, #40	@ 0x28
 8007324:	2100      	movs	r1, #0
 8007326:	4618      	mov	r0, r3
 8007328:	f001 fa9c 	bl	8008864 <RCCEx_PLL3_Config>
 800732c:	4603      	mov	r3, r0
 800732e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800733e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734a:	2100      	movs	r1, #0
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	f003 0310 	and.w	r3, r3, #16
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007358:	460b      	mov	r3, r1
 800735a:	4313      	orrs	r3, r2
 800735c:	d011      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800735e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007362:	3328      	adds	r3, #40	@ 0x28
 8007364:	2101      	movs	r1, #1
 8007366:	4618      	mov	r0, r3
 8007368:	f001 fa7c 	bl	8008864 <RCCEx_PLL3_Config>
 800736c:	4603      	mov	r3, r0
 800736e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800737a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800737e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738a:	2100      	movs	r1, #0
 800738c:	6039      	str	r1, [r7, #0]
 800738e:	f003 0320 	and.w	r3, r3, #32
 8007392:	607b      	str	r3, [r7, #4]
 8007394:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007398:	460b      	mov	r3, r1
 800739a:	4313      	orrs	r3, r2
 800739c:	d011      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800739e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a2:	3328      	adds	r3, #40	@ 0x28
 80073a4:	2102      	movs	r1, #2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f001 fa5c 	bl	8008864 <RCCEx_PLL3_Config>
 80073ac:	4603      	mov	r3, r0
 80073ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80073b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80073c2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	e000      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80073d6:	46bd      	mov	sp, r7
 80073d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073dc:	58024400 	.word	0x58024400

080073e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b090      	sub	sp, #64	@ 0x40
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80073ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073ee:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80073f2:	430b      	orrs	r3, r1
 80073f4:	f040 8094 	bne.w	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80073f8:	4b9e      	ldr	r3, [pc, #632]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80073fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073fc:	f003 0307 	and.w	r3, r3, #7
 8007400:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007404:	2b04      	cmp	r3, #4
 8007406:	f200 8087 	bhi.w	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800740a:	a201      	add	r2, pc, #4	@ (adr r2, 8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800740c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007410:	08007425 	.word	0x08007425
 8007414:	0800744d 	.word	0x0800744d
 8007418:	08007475 	.word	0x08007475
 800741c:	08007511 	.word	0x08007511
 8007420:	0800749d 	.word	0x0800749d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007424:	4b93      	ldr	r3, [pc, #588]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800742c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007430:	d108      	bne.n	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007436:	4618      	mov	r0, r3
 8007438:	f001 f810 	bl	800845c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800743c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800743e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007440:	f000 bd45 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007448:	f000 bd41 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800744c:	4b89      	ldr	r3, [pc, #548]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007454:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007458:	d108      	bne.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800745a:	f107 0318 	add.w	r3, r7, #24
 800745e:	4618      	mov	r0, r3
 8007460:	f000 fd54 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007468:	f000 bd31 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800746c:	2300      	movs	r3, #0
 800746e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007470:	f000 bd2d 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007474:	4b7f      	ldr	r3, [pc, #508]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800747c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007480:	d108      	bne.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007482:	f107 030c 	add.w	r3, r7, #12
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fe94 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007490:	f000 bd1d 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007494:	2300      	movs	r3, #0
 8007496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007498:	f000 bd19 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800749c:	4b75      	ldr	r3, [pc, #468]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800749e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80074a4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074a6:	4b73      	ldr	r3, [pc, #460]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0304 	and.w	r3, r3, #4
 80074ae:	2b04      	cmp	r3, #4
 80074b0:	d10c      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80074b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d109      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074b8:	4b6e      	ldr	r3, [pc, #440]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	08db      	lsrs	r3, r3, #3
 80074be:	f003 0303 	and.w	r3, r3, #3
 80074c2:	4a6d      	ldr	r2, [pc, #436]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80074c4:	fa22 f303 	lsr.w	r3, r2, r3
 80074c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074ca:	e01f      	b.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074cc:	4b69      	ldr	r3, [pc, #420]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074d8:	d106      	bne.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80074da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074e0:	d102      	bne.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80074e2:	4b66      	ldr	r3, [pc, #408]	@ (800767c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80074e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074e6:	e011      	b.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074e8:	4b62      	ldr	r3, [pc, #392]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074f4:	d106      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80074f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074fc:	d102      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80074fe:	4b60      	ldr	r3, [pc, #384]	@ (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007502:	e003      	b.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007504:	2300      	movs	r3, #0
 8007506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007508:	f000 bce1 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800750c:	f000 bcdf 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007510:	4b5c      	ldr	r3, [pc, #368]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007514:	f000 bcdb 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007518:	2300      	movs	r3, #0
 800751a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800751c:	f000 bcd7 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007524:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007528:	430b      	orrs	r3, r1
 800752a:	f040 80ad 	bne.w	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800752e:	4b51      	ldr	r3, [pc, #324]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007532:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007536:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800753e:	d056      	beq.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007546:	f200 8090 	bhi.w	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800754a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754c:	2bc0      	cmp	r3, #192	@ 0xc0
 800754e:	f000 8088 	beq.w	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007554:	2bc0      	cmp	r3, #192	@ 0xc0
 8007556:	f200 8088 	bhi.w	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800755a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755c:	2b80      	cmp	r3, #128	@ 0x80
 800755e:	d032      	beq.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007562:	2b80      	cmp	r3, #128	@ 0x80
 8007564:	f200 8081 	bhi.w	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800756e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007570:	2b40      	cmp	r3, #64	@ 0x40
 8007572:	d014      	beq.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007574:	e079      	b.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007576:	4b3f      	ldr	r3, [pc, #252]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800757e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007582:	d108      	bne.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007584:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007588:	4618      	mov	r0, r3
 800758a:	f000 ff67 	bl	800845c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800758e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007592:	f000 bc9c 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007596:	2300      	movs	r3, #0
 8007598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800759a:	f000 bc98 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800759e:	4b35      	ldr	r3, [pc, #212]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075aa:	d108      	bne.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075ac:	f107 0318 	add.w	r3, r7, #24
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 fcab 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075ba:	f000 bc88 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075be:	2300      	movs	r3, #0
 80075c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075c2:	f000 bc84 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075c6:	4b2b      	ldr	r3, [pc, #172]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075d2:	d108      	bne.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075d4:	f107 030c 	add.w	r3, r7, #12
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 fdeb 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075e2:	f000 bc74 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075ea:	f000 bc70 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075ee:	4b21      	ldr	r3, [pc, #132]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80075f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075f8:	4b1e      	ldr	r3, [pc, #120]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	2b04      	cmp	r3, #4
 8007602:	d10c      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007606:	2b00      	cmp	r3, #0
 8007608:	d109      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800760a:	4b1a      	ldr	r3, [pc, #104]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	08db      	lsrs	r3, r3, #3
 8007610:	f003 0303 	and.w	r3, r3, #3
 8007614:	4a18      	ldr	r2, [pc, #96]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007616:	fa22 f303 	lsr.w	r3, r2, r3
 800761a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800761c:	e01f      	b.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800761e:	4b15      	ldr	r3, [pc, #84]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800762a:	d106      	bne.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800762c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800762e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007632:	d102      	bne.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007634:	4b11      	ldr	r3, [pc, #68]	@ (800767c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007636:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007638:	e011      	b.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800763a:	4b0e      	ldr	r3, [pc, #56]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007642:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007646:	d106      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800764a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800764e:	d102      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007650:	4b0b      	ldr	r3, [pc, #44]	@ (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007654:	e003      	b.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007656:	2300      	movs	r3, #0
 8007658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800765a:	f000 bc38 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800765e:	f000 bc36 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007662:	4b08      	ldr	r3, [pc, #32]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007666:	f000 bc32 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800766a:	2300      	movs	r3, #0
 800766c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800766e:	f000 bc2e 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007672:	bf00      	nop
 8007674:	58024400 	.word	0x58024400
 8007678:	03d09000 	.word	0x03d09000
 800767c:	003d0900 	.word	0x003d0900
 8007680:	017d7840 	.word	0x017d7840
 8007684:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800768c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007690:	430b      	orrs	r3, r1
 8007692:	f040 809c 	bne.w	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007696:	4b9e      	ldr	r3, [pc, #632]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800769a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800769e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80076a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076a6:	d054      	beq.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80076a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076ae:	f200 808b 	bhi.w	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80076b8:	f000 8083 	beq.w	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80076bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80076c2:	f200 8081 	bhi.w	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076cc:	d02f      	beq.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80076ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076d4:	d878      	bhi.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d004      	beq.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80076dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076e2:	d012      	beq.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80076e4:	e070      	b.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076e6:	4b8a      	ldr	r3, [pc, #552]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076f2:	d107      	bne.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 feaf 	bl	800845c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007702:	e3e4      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007704:	2300      	movs	r3, #0
 8007706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007708:	e3e1      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800770a:	4b81      	ldr	r3, [pc, #516]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007712:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007716:	d107      	bne.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007718:	f107 0318 	add.w	r3, r7, #24
 800771c:	4618      	mov	r0, r3
 800771e:	f000 fbf5 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007726:	e3d2      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007728:	2300      	movs	r3, #0
 800772a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800772c:	e3cf      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800772e:	4b78      	ldr	r3, [pc, #480]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007736:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800773a:	d107      	bne.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800773c:	f107 030c 	add.w	r3, r7, #12
 8007740:	4618      	mov	r0, r3
 8007742:	f000 fd37 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800774a:	e3c0      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800774c:	2300      	movs	r3, #0
 800774e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007750:	e3bd      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007752:	4b6f      	ldr	r3, [pc, #444]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007756:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800775a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800775c:	4b6c      	ldr	r3, [pc, #432]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0304 	and.w	r3, r3, #4
 8007764:	2b04      	cmp	r3, #4
 8007766:	d10c      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800776a:	2b00      	cmp	r3, #0
 800776c:	d109      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800776e:	4b68      	ldr	r3, [pc, #416]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	08db      	lsrs	r3, r3, #3
 8007774:	f003 0303 	and.w	r3, r3, #3
 8007778:	4a66      	ldr	r2, [pc, #408]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800777a:	fa22 f303 	lsr.w	r3, r2, r3
 800777e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007780:	e01e      	b.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007782:	4b63      	ldr	r3, [pc, #396]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800778a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800778e:	d106      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007792:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007796:	d102      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007798:	4b5f      	ldr	r3, [pc, #380]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800779a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800779c:	e010      	b.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800779e:	4b5c      	ldr	r3, [pc, #368]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077aa:	d106      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80077ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077b2:	d102      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80077b4:	4b59      	ldr	r3, [pc, #356]	@ (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80077b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077b8:	e002      	b.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80077be:	e386      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077c0:	e385      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80077c2:	4b57      	ldr	r3, [pc, #348]	@ (8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80077c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077c6:	e382      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077cc:	e37f      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80077ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077d2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80077d6:	430b      	orrs	r3, r1
 80077d8:	f040 80a7 	bne.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80077dc:	4b4c      	ldr	r3, [pc, #304]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077e0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80077e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80077e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077ec:	d055      	beq.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80077ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077f4:	f200 8096 	bhi.w	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80077f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80077fe:	f000 8084 	beq.w	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007804:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007808:	f200 808c 	bhi.w	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800780c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007812:	d030      	beq.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007816:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800781a:	f200 8083 	bhi.w	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800781e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007820:	2b00      	cmp	r3, #0
 8007822:	d004      	beq.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007826:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800782a:	d012      	beq.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800782c:	e07a      	b.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800782e:	4b38      	ldr	r3, [pc, #224]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007836:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800783a:	d107      	bne.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800783c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007840:	4618      	mov	r0, r3
 8007842:	f000 fe0b 	bl	800845c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800784a:	e340      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007850:	e33d      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007852:	4b2f      	ldr	r3, [pc, #188]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800785a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800785e:	d107      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007860:	f107 0318 	add.w	r3, r7, #24
 8007864:	4618      	mov	r0, r3
 8007866:	f000 fb51 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800786e:	e32e      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007870:	2300      	movs	r3, #0
 8007872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007874:	e32b      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007876:	4b26      	ldr	r3, [pc, #152]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800787e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007882:	d107      	bne.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007884:	f107 030c 	add.w	r3, r7, #12
 8007888:	4618      	mov	r0, r3
 800788a:	f000 fc93 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007892:	e31c      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007894:	2300      	movs	r3, #0
 8007896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007898:	e319      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800789a:	4b1d      	ldr	r3, [pc, #116]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800789c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800789e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d10c      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80078b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d109      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078b6:	4b16      	ldr	r3, [pc, #88]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	08db      	lsrs	r3, r3, #3
 80078bc:	f003 0303 	and.w	r3, r3, #3
 80078c0:	4a14      	ldr	r2, [pc, #80]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80078c2:	fa22 f303 	lsr.w	r3, r2, r3
 80078c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078c8:	e01e      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078ca:	4b11      	ldr	r3, [pc, #68]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078d6:	d106      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80078d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078de:	d102      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80078e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078e4:	e010      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078f2:	d106      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80078f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078fa:	d102      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80078fc:	4b07      	ldr	r3, [pc, #28]	@ (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80078fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007900:	e002      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007902:	2300      	movs	r3, #0
 8007904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007906:	e2e2      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007908:	e2e1      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800790a:	4b05      	ldr	r3, [pc, #20]	@ (8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800790c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800790e:	e2de      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007910:	58024400 	.word	0x58024400
 8007914:	03d09000 	.word	0x03d09000
 8007918:	003d0900 	.word	0x003d0900
 800791c:	017d7840 	.word	0x017d7840
 8007920:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007928:	e2d1      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800792a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800792e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007932:	430b      	orrs	r3, r1
 8007934:	f040 809c 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007938:	4b93      	ldr	r3, [pc, #588]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800793a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800793c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007940:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007944:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007948:	d054      	beq.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800794a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007950:	f200 808b 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007956:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800795a:	f000 8083 	beq.w	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800795e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007960:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007964:	f200 8081 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800796e:	d02f      	beq.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007972:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007976:	d878      	bhi.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797a:	2b00      	cmp	r3, #0
 800797c:	d004      	beq.n	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800797e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007984:	d012      	beq.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007986:	e070      	b.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007988:	4b7f      	ldr	r3, [pc, #508]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007990:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007994:	d107      	bne.n	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800799a:	4618      	mov	r0, r3
 800799c:	f000 fd5e 	bl	800845c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079a4:	e293      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079a6:	2300      	movs	r3, #0
 80079a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079aa:	e290      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079ac:	4b76      	ldr	r3, [pc, #472]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079b8:	d107      	bne.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079ba:	f107 0318 	add.w	r3, r7, #24
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 faa4 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079c8:	e281      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079ca:	2300      	movs	r3, #0
 80079cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079ce:	e27e      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079d0:	4b6d      	ldr	r3, [pc, #436]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079dc:	d107      	bne.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079de:	f107 030c 	add.w	r3, r7, #12
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 fbe6 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079ec:	e26f      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079f2:	e26c      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079f4:	4b64      	ldr	r3, [pc, #400]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80079fc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079fe:	4b62      	ldr	r3, [pc, #392]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0304 	and.w	r3, r3, #4
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	d10c      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d109      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a10:	4b5d      	ldr	r3, [pc, #372]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	08db      	lsrs	r3, r3, #3
 8007a16:	f003 0303 	and.w	r3, r3, #3
 8007a1a:	4a5c      	ldr	r2, [pc, #368]	@ (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a22:	e01e      	b.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a24:	4b58      	ldr	r3, [pc, #352]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a30:	d106      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a38:	d102      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a3a:	4b55      	ldr	r3, [pc, #340]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a3e:	e010      	b.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a40:	4b51      	ldr	r3, [pc, #324]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a4c:	d106      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a54:	d102      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a56:	4b4f      	ldr	r3, [pc, #316]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a5a:	e002      	b.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007a60:	e235      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a62:	e234      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a64:	4b4c      	ldr	r3, [pc, #304]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a68:	e231      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a6e:	e22e      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a74:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007a78:	430b      	orrs	r3, r1
 8007a7a:	f040 808f 	bne.w	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007a7e:	4b42      	ldr	r3, [pc, #264]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a82:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007a86:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a8e:	d06b      	beq.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a96:	d874      	bhi.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a9e:	d056      	beq.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007aa6:	d86c      	bhi.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aaa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007aae:	d03b      	beq.n	8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ab6:	d864      	bhi.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007abe:	d021      	beq.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ac6:	d85c      	bhi.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d004      	beq.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ad4:	d004      	beq.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007ad6:	e054      	b.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007ad8:	f7fe fa0a 	bl	8005ef0 <HAL_RCC_GetPCLK1Freq>
 8007adc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ade:	e1f6      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ae0:	4b29      	ldr	r3, [pc, #164]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ae8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007aec:	d107      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aee:	f107 0318 	add.w	r3, r7, #24
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 fa0a 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007afc:	e1e7      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007afe:	2300      	movs	r3, #0
 8007b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b02:	e1e4      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b04:	4b20      	ldr	r3, [pc, #128]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b10:	d107      	bne.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b12:	f107 030c 	add.w	r3, r7, #12
 8007b16:	4618      	mov	r0, r3
 8007b18:	f000 fb4c 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b20:	e1d5      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b26:	e1d2      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b28:	4b17      	ldr	r3, [pc, #92]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0304 	and.w	r3, r3, #4
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d109      	bne.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b34:	4b14      	ldr	r3, [pc, #80]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	08db      	lsrs	r3, r3, #3
 8007b3a:	f003 0303 	and.w	r3, r3, #3
 8007b3e:	4a13      	ldr	r2, [pc, #76]	@ (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007b40:	fa22 f303 	lsr.w	r3, r2, r3
 8007b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b46:	e1c2      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b4c:	e1bf      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b5a:	d102      	bne.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b60:	e1b5      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b66:	e1b2      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007b68:	4b07      	ldr	r3, [pc, #28]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b74:	d102      	bne.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007b76:	4b07      	ldr	r3, [pc, #28]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b7a:	e1a8      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b80:	e1a5      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007b82:	2300      	movs	r3, #0
 8007b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b86:	e1a2      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b88:	58024400 	.word	0x58024400
 8007b8c:	03d09000 	.word	0x03d09000
 8007b90:	003d0900 	.word	0x003d0900
 8007b94:	017d7840 	.word	0x017d7840
 8007b98:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ba0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007ba4:	430b      	orrs	r3, r1
 8007ba6:	d173      	bne.n	8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007ba8:	4b9c      	ldr	r3, [pc, #624]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007bb0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bb8:	d02f      	beq.n	8007c1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bc0:	d863      	bhi.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d004      	beq.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bce:	d012      	beq.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007bd0:	e05b      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bd2:	4b92      	ldr	r3, [pc, #584]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bde:	d107      	bne.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007be0:	f107 0318 	add.w	r3, r7, #24
 8007be4:	4618      	mov	r0, r3
 8007be6:	f000 f991 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bee:	e16e      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bf4:	e16b      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bf6:	4b89      	ldr	r3, [pc, #548]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c02:	d107      	bne.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c04:	f107 030c 	add.w	r3, r7, #12
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 fad3 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c12:	e15c      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c14:	2300      	movs	r3, #0
 8007c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c18:	e159      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c1a:	4b80      	ldr	r3, [pc, #512]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c22:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c24:	4b7d      	ldr	r3, [pc, #500]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0304 	and.w	r3, r3, #4
 8007c2c:	2b04      	cmp	r3, #4
 8007c2e:	d10c      	bne.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d109      	bne.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c36:	4b79      	ldr	r3, [pc, #484]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	08db      	lsrs	r3, r3, #3
 8007c3c:	f003 0303 	and.w	r3, r3, #3
 8007c40:	4a77      	ldr	r2, [pc, #476]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007c42:	fa22 f303 	lsr.w	r3, r2, r3
 8007c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c48:	e01e      	b.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c4a:	4b74      	ldr	r3, [pc, #464]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c56:	d106      	bne.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c5e:	d102      	bne.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c60:	4b70      	ldr	r3, [pc, #448]	@ (8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c64:	e010      	b.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c66:	4b6d      	ldr	r3, [pc, #436]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c72:	d106      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c7a:	d102      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c7c:	4b6a      	ldr	r3, [pc, #424]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c80:	e002      	b.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c82:	2300      	movs	r3, #0
 8007c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007c86:	e122      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c88:	e121      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c8e:	e11e      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c94:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007c98:	430b      	orrs	r3, r1
 8007c9a:	d133      	bne.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007c9c:	4b5f      	ldr	r3, [pc, #380]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ca4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d004      	beq.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cb2:	d012      	beq.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007cb4:	e023      	b.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cb6:	4b59      	ldr	r3, [pc, #356]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cc2:	d107      	bne.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 fbc7 	bl	800845c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cd2:	e0fc      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cd8:	e0f9      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cda:	4b50      	ldr	r3, [pc, #320]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ce2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ce6:	d107      	bne.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ce8:	f107 0318 	add.w	r3, r7, #24
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 f90d 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cf6:	e0ea      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cfc:	e0e7      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d02:	e0e4      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d08:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007d0c:	430b      	orrs	r3, r1
 8007d0e:	f040 808d 	bne.w	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007d12:	4b42      	ldr	r3, [pc, #264]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d16:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007d1a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d22:	d06b      	beq.n	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d2a:	d874      	bhi.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d32:	d056      	beq.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d3a:	d86c      	bhi.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d42:	d03b      	beq.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d4a:	d864      	bhi.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d52:	d021      	beq.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d5a:	d85c      	bhi.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d004      	beq.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d68:	d004      	beq.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007d6a:	e054      	b.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007d6c:	f000 f8b8 	bl	8007ee0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007d70:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d72:	e0ac      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d74:	4b29      	ldr	r3, [pc, #164]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d80:	d107      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d82:	f107 0318 	add.w	r3, r7, #24
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 f8c0 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d90:	e09d      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d96:	e09a      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d98:	4b20      	ldr	r3, [pc, #128]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007da0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007da4:	d107      	bne.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007da6:	f107 030c 	add.w	r3, r7, #12
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 fa02 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007db4:	e08b      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007db6:	2300      	movs	r3, #0
 8007db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dba:	e088      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007dbc:	4b17      	ldr	r3, [pc, #92]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	d109      	bne.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007dc8:	4b14      	ldr	r3, [pc, #80]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	08db      	lsrs	r3, r3, #3
 8007dce:	f003 0303 	and.w	r3, r3, #3
 8007dd2:	4a13      	ldr	r2, [pc, #76]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8007dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dda:	e078      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007de0:	e075      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007de2:	4b0e      	ldr	r3, [pc, #56]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dee:	d102      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007df0:	4b0c      	ldr	r3, [pc, #48]	@ (8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007df4:	e06b      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dfa:	e068      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007dfc:	4b07      	ldr	r3, [pc, #28]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e08:	d102      	bne.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007e0a:	4b07      	ldr	r3, [pc, #28]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e0e:	e05e      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e14:	e05b      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e1a:	e058      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e1c:	58024400 	.word	0x58024400
 8007e20:	03d09000 	.word	0x03d09000
 8007e24:	003d0900 	.word	0x003d0900
 8007e28:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007e2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e30:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007e34:	430b      	orrs	r3, r1
 8007e36:	d148      	bne.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007e38:	4b27      	ldr	r3, [pc, #156]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e40:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e48:	d02a      	beq.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e50:	d838      	bhi.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d004      	beq.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e5e:	d00d      	beq.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007e60:	e030      	b.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e62:	4b1d      	ldr	r3, [pc, #116]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e6e:	d102      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007e70:	4b1a      	ldr	r3, [pc, #104]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e74:	e02b      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e76:	2300      	movs	r3, #0
 8007e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e7a:	e028      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e7c:	4b16      	ldr	r3, [pc, #88]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e88:	d107      	bne.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 fae4 	bl	800845c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e98:	e019      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e9e:	e016      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ea8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007eac:	d107      	bne.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eae:	f107 0318 	add.w	r3, r7, #24
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 f82a 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ebc:	e007      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec2:	e004      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec8:	e001      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3740      	adds	r7, #64	@ 0x40
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	58024400 	.word	0x58024400
 8007edc:	017d7840 	.word	0x017d7840

08007ee0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007ee4:	f7fd ffd4 	bl	8005e90 <HAL_RCC_GetHCLKFreq>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	4b06      	ldr	r3, [pc, #24]	@ (8007f04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	091b      	lsrs	r3, r3, #4
 8007ef0:	f003 0307 	and.w	r3, r3, #7
 8007ef4:	4904      	ldr	r1, [pc, #16]	@ (8007f08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007ef6:	5ccb      	ldrb	r3, [r1, r3]
 8007ef8:	f003 031f 	and.w	r3, r3, #31
 8007efc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	58024400 	.word	0x58024400
 8007f08:	08017c8c 	.word	0x08017c8c

08007f0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b089      	sub	sp, #36	@ 0x24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f14:	4ba1      	ldr	r3, [pc, #644]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f18:	f003 0303 	and.w	r3, r3, #3
 8007f1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007f1e:	4b9f      	ldr	r3, [pc, #636]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f22:	0b1b      	lsrs	r3, r3, #12
 8007f24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f2a:	4b9c      	ldr	r3, [pc, #624]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2e:	091b      	lsrs	r3, r3, #4
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007f36:	4b99      	ldr	r3, [pc, #612]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f3a:	08db      	lsrs	r3, r3, #3
 8007f3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	fb02 f303 	mul.w	r3, r2, r3
 8007f46:	ee07 3a90 	vmov	s15, r3
 8007f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f000 8111 	beq.w	800817c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	f000 8083 	beq.w	8008068 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	f200 80a1 	bhi.w	80080ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d003      	beq.n	8007f78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d056      	beq.n	8008024 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007f76:	e099      	b.n	80080ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f78:	4b88      	ldr	r3, [pc, #544]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0320 	and.w	r3, r3, #32
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d02d      	beq.n	8007fe0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f84:	4b85      	ldr	r3, [pc, #532]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	08db      	lsrs	r3, r3, #3
 8007f8a:	f003 0303 	and.w	r3, r3, #3
 8007f8e:	4a84      	ldr	r2, [pc, #528]	@ (80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007f90:	fa22 f303 	lsr.w	r3, r2, r3
 8007f94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	ee07 3a90 	vmov	s15, r3
 8007f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	ee07 3a90 	vmov	s15, r3
 8007fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fae:	4b7b      	ldr	r3, [pc, #492]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb6:	ee07 3a90 	vmov	s15, r3
 8007fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fc2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007fde:	e087      	b.n	80080f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	ee07 3a90 	vmov	s15, r3
 8007fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80081a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ff2:	4b6a      	ldr	r3, [pc, #424]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ffa:	ee07 3a90 	vmov	s15, r3
 8007ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008002:	ed97 6a03 	vldr	s12, [r7, #12]
 8008006:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800800a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800800e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800801a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800801e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008022:	e065      	b.n	80080f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	ee07 3a90 	vmov	s15, r3
 800802a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80081ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008036:	4b59      	ldr	r3, [pc, #356]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800803a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800803e:	ee07 3a90 	vmov	s15, r3
 8008042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008046:	ed97 6a03 	vldr	s12, [r7, #12]
 800804a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800804e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800805a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800805e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008066:	e043      	b.n	80080f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	ee07 3a90 	vmov	s15, r3
 800806e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008072:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80081b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800807a:	4b48      	ldr	r3, [pc, #288]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800807c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800807e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008082:	ee07 3a90 	vmov	s15, r3
 8008086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800808a:	ed97 6a03 	vldr	s12, [r7, #12]
 800808e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800809a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800809e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080aa:	e021      	b.n	80080f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	ee07 3a90 	vmov	s15, r3
 80080b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80081ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080be:	4b37      	ldr	r3, [pc, #220]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c6:	ee07 3a90 	vmov	s15, r3
 80080ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80080d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80080f0:	4b2a      	ldr	r3, [pc, #168]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f4:	0a5b      	lsrs	r3, r3, #9
 80080f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080fa:	ee07 3a90 	vmov	s15, r3
 80080fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008102:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008106:	ee37 7a87 	vadd.f32	s14, s15, s14
 800810a:	edd7 6a07 	vldr	s13, [r7, #28]
 800810e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008116:	ee17 2a90 	vmov	r2, s15
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800811e:	4b1f      	ldr	r3, [pc, #124]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008122:	0c1b      	lsrs	r3, r3, #16
 8008124:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008128:	ee07 3a90 	vmov	s15, r3
 800812c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008130:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008134:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008138:	edd7 6a07 	vldr	s13, [r7, #28]
 800813c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008144:	ee17 2a90 	vmov	r2, s15
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800814c:	4b13      	ldr	r3, [pc, #76]	@ (800819c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800814e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008150:	0e1b      	lsrs	r3, r3, #24
 8008152:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008156:	ee07 3a90 	vmov	s15, r3
 800815a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800815e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008162:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008166:	edd7 6a07 	vldr	s13, [r7, #28]
 800816a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800816e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008172:	ee17 2a90 	vmov	r2, s15
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800817a:	e008      	b.n	800818e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	609a      	str	r2, [r3, #8]
}
 800818e:	bf00      	nop
 8008190:	3724      	adds	r7, #36	@ 0x24
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	58024400 	.word	0x58024400
 80081a0:	03d09000 	.word	0x03d09000
 80081a4:	46000000 	.word	0x46000000
 80081a8:	4c742400 	.word	0x4c742400
 80081ac:	4a742400 	.word	0x4a742400
 80081b0:	4bbebc20 	.word	0x4bbebc20

080081b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b089      	sub	sp, #36	@ 0x24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081bc:	4ba1      	ldr	r3, [pc, #644]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c0:	f003 0303 	and.w	r3, r3, #3
 80081c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80081c6:	4b9f      	ldr	r3, [pc, #636]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ca:	0d1b      	lsrs	r3, r3, #20
 80081cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80081d2:	4b9c      	ldr	r3, [pc, #624]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d6:	0a1b      	lsrs	r3, r3, #8
 80081d8:	f003 0301 	and.w	r3, r3, #1
 80081dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80081de:	4b99      	ldr	r3, [pc, #612]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081e2:	08db      	lsrs	r3, r3, #3
 80081e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	fb02 f303 	mul.w	r3, r2, r3
 80081ee:	ee07 3a90 	vmov	s15, r3
 80081f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 8111 	beq.w	8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	2b02      	cmp	r3, #2
 8008206:	f000 8083 	beq.w	8008310 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	2b02      	cmp	r3, #2
 800820e:	f200 80a1 	bhi.w	8008354 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d056      	beq.n	80082cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800821e:	e099      	b.n	8008354 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008220:	4b88      	ldr	r3, [pc, #544]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 0320 	and.w	r3, r3, #32
 8008228:	2b00      	cmp	r3, #0
 800822a:	d02d      	beq.n	8008288 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800822c:	4b85      	ldr	r3, [pc, #532]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	08db      	lsrs	r3, r3, #3
 8008232:	f003 0303 	and.w	r3, r3, #3
 8008236:	4a84      	ldr	r2, [pc, #528]	@ (8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008238:	fa22 f303 	lsr.w	r3, r2, r3
 800823c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	ee07 3a90 	vmov	s15, r3
 8008244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	ee07 3a90 	vmov	s15, r3
 800824e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008256:	4b7b      	ldr	r3, [pc, #492]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800825a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800825e:	ee07 3a90 	vmov	s15, r3
 8008262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008266:	ed97 6a03 	vldr	s12, [r7, #12]
 800826a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800844c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800826e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800827a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800827e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008282:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008286:	e087      	b.n	8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	ee07 3a90 	vmov	s15, r3
 800828e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008292:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800829a:	4b6a      	ldr	r3, [pc, #424]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800829c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800829e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082a2:	ee07 3a90 	vmov	s15, r3
 80082a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800844c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082ca:	e065      	b.n	8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	ee07 3a90 	vmov	s15, r3
 80082d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082de:	4b59      	ldr	r3, [pc, #356]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e6:	ee07 3a90 	vmov	s15, r3
 80082ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80082f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800844c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800830a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800830e:	e043      	b.n	8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	ee07 3a90 	vmov	s15, r3
 8008316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800831a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008458 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800831e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008322:	4b48      	ldr	r3, [pc, #288]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800832a:	ee07 3a90 	vmov	s15, r3
 800832e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008332:	ed97 6a03 	vldr	s12, [r7, #12]
 8008336:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800844c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800833a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800833e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800834a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800834e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008352:	e021      	b.n	8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	ee07 3a90 	vmov	s15, r3
 800835a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800835e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008366:	4b37      	ldr	r3, [pc, #220]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800836a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836e:	ee07 3a90 	vmov	s15, r3
 8008372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008376:	ed97 6a03 	vldr	s12, [r7, #12]
 800837a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800844c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800837e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800838a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800838e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008396:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008398:	4b2a      	ldr	r3, [pc, #168]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800839a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800839c:	0a5b      	lsrs	r3, r3, #9
 800839e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083a2:	ee07 3a90 	vmov	s15, r3
 80083a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80083b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083be:	ee17 2a90 	vmov	r2, s15
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80083c6:	4b1f      	ldr	r3, [pc, #124]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ca:	0c1b      	lsrs	r3, r3, #16
 80083cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083d0:	ee07 3a90 	vmov	s15, r3
 80083d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80083e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083ec:	ee17 2a90 	vmov	r2, s15
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80083f4:	4b13      	ldr	r3, [pc, #76]	@ (8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f8:	0e1b      	lsrs	r3, r3, #24
 80083fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083fe:	ee07 3a90 	vmov	s15, r3
 8008402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008406:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800840a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800840e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800841a:	ee17 2a90 	vmov	r2, s15
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008422:	e008      	b.n	8008436 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	609a      	str	r2, [r3, #8]
}
 8008436:	bf00      	nop
 8008438:	3724      	adds	r7, #36	@ 0x24
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	58024400 	.word	0x58024400
 8008448:	03d09000 	.word	0x03d09000
 800844c:	46000000 	.word	0x46000000
 8008450:	4c742400 	.word	0x4c742400
 8008454:	4a742400 	.word	0x4a742400
 8008458:	4bbebc20 	.word	0x4bbebc20

0800845c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800845c:	b480      	push	{r7}
 800845e:	b089      	sub	sp, #36	@ 0x24
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008464:	4ba0      	ldr	r3, [pc, #640]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008468:	f003 0303 	and.w	r3, r3, #3
 800846c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800846e:	4b9e      	ldr	r3, [pc, #632]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008472:	091b      	lsrs	r3, r3, #4
 8008474:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008478:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800847a:	4b9b      	ldr	r3, [pc, #620]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800847c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008484:	4b98      	ldr	r3, [pc, #608]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008488:	08db      	lsrs	r3, r3, #3
 800848a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	fb02 f303 	mul.w	r3, r2, r3
 8008494:	ee07 3a90 	vmov	s15, r3
 8008498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800849c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f000 8111 	beq.w	80086ca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	f000 8083 	beq.w	80085b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	f200 80a1 	bhi.w	80085fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d056      	beq.n	8008572 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80084c4:	e099      	b.n	80085fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084c6:	4b88      	ldr	r3, [pc, #544]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0320 	and.w	r3, r3, #32
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d02d      	beq.n	800852e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084d2:	4b85      	ldr	r3, [pc, #532]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	08db      	lsrs	r3, r3, #3
 80084d8:	f003 0303 	and.w	r3, r3, #3
 80084dc:	4a83      	ldr	r2, [pc, #524]	@ (80086ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80084de:	fa22 f303 	lsr.w	r3, r2, r3
 80084e2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	ee07 3a90 	vmov	s15, r3
 80084ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	ee07 3a90 	vmov	s15, r3
 80084f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084fc:	4b7a      	ldr	r3, [pc, #488]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008504:	ee07 3a90 	vmov	s15, r3
 8008508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800850c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008510:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80086f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008514:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008518:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800851c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008520:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008528:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800852c:	e087      	b.n	800863e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	ee07 3a90 	vmov	s15, r3
 8008534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008538:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80086f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800853c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008540:	4b69      	ldr	r3, [pc, #420]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008548:	ee07 3a90 	vmov	s15, r3
 800854c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008550:	ed97 6a03 	vldr	s12, [r7, #12]
 8008554:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80086f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008558:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800855c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008560:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008564:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008570:	e065      	b.n	800863e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	ee07 3a90 	vmov	s15, r3
 8008578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80086f8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008584:	4b58      	ldr	r3, [pc, #352]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800858c:	ee07 3a90 	vmov	s15, r3
 8008590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008594:	ed97 6a03 	vldr	s12, [r7, #12]
 8008598:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80086f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800859c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085b4:	e043      	b.n	800863e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	ee07 3a90 	vmov	s15, r3
 80085bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80086fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80085c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c8:	4b47      	ldr	r3, [pc, #284]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d0:	ee07 3a90 	vmov	s15, r3
 80085d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80085dc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80086f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085f8:	e021      	b.n	800863e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	ee07 3a90 	vmov	s15, r3
 8008600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008604:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80086f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800860c:	4b36      	ldr	r3, [pc, #216]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800860e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008614:	ee07 3a90 	vmov	s15, r3
 8008618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800861c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008620:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80086f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008624:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008628:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800862c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008630:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008638:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800863c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800863e:	4b2a      	ldr	r3, [pc, #168]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008642:	0a5b      	lsrs	r3, r3, #9
 8008644:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008648:	ee07 3a90 	vmov	s15, r3
 800864c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008650:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008654:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008658:	edd7 6a07 	vldr	s13, [r7, #28]
 800865c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008664:	ee17 2a90 	vmov	r2, s15
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800866c:	4b1e      	ldr	r3, [pc, #120]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800866e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008670:	0c1b      	lsrs	r3, r3, #16
 8008672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008676:	ee07 3a90 	vmov	s15, r3
 800867a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008682:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008686:	edd7 6a07 	vldr	s13, [r7, #28]
 800868a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800868e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008692:	ee17 2a90 	vmov	r2, s15
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800869a:	4b13      	ldr	r3, [pc, #76]	@ (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800869c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800869e:	0e1b      	lsrs	r3, r3, #24
 80086a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086a4:	ee07 3a90 	vmov	s15, r3
 80086a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80086b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086c0:	ee17 2a90 	vmov	r2, s15
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80086c8:	e008      	b.n	80086dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	609a      	str	r2, [r3, #8]
}
 80086dc:	bf00      	nop
 80086de:	3724      	adds	r7, #36	@ 0x24
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	58024400 	.word	0x58024400
 80086ec:	03d09000 	.word	0x03d09000
 80086f0:	46000000 	.word	0x46000000
 80086f4:	4c742400 	.word	0x4c742400
 80086f8:	4a742400 	.word	0x4a742400
 80086fc:	4bbebc20 	.word	0x4bbebc20

08008700 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800870e:	4b53      	ldr	r3, [pc, #332]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008712:	f003 0303 	and.w	r3, r3, #3
 8008716:	2b03      	cmp	r3, #3
 8008718:	d101      	bne.n	800871e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e099      	b.n	8008852 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800871e:	4b4f      	ldr	r3, [pc, #316]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a4e      	ldr	r2, [pc, #312]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008724:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800872a:	f7fb fb0d 	bl	8003d48 <HAL_GetTick>
 800872e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008730:	e008      	b.n	8008744 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008732:	f7fb fb09 	bl	8003d48 <HAL_GetTick>
 8008736:	4602      	mov	r2, r0
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	2b02      	cmp	r3, #2
 800873e:	d901      	bls.n	8008744 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e086      	b.n	8008852 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008744:	4b45      	ldr	r3, [pc, #276]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1f0      	bne.n	8008732 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008750:	4b42      	ldr	r3, [pc, #264]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008754:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	031b      	lsls	r3, r3, #12
 800875e:	493f      	ldr	r1, [pc, #252]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008760:	4313      	orrs	r3, r2
 8008762:	628b      	str	r3, [r1, #40]	@ 0x28
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	3b01      	subs	r3, #1
 800876a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	3b01      	subs	r3, #1
 8008774:	025b      	lsls	r3, r3, #9
 8008776:	b29b      	uxth	r3, r3
 8008778:	431a      	orrs	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	3b01      	subs	r3, #1
 8008780:	041b      	lsls	r3, r3, #16
 8008782:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008786:	431a      	orrs	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	3b01      	subs	r3, #1
 800878e:	061b      	lsls	r3, r3, #24
 8008790:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008794:	4931      	ldr	r1, [pc, #196]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008796:	4313      	orrs	r3, r2
 8008798:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800879a:	4b30      	ldr	r3, [pc, #192]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 800879c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	492d      	ldr	r1, [pc, #180]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087a8:	4313      	orrs	r3, r2
 80087aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80087ac:	4b2b      	ldr	r3, [pc, #172]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b0:	f023 0220 	bic.w	r2, r3, #32
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	4928      	ldr	r1, [pc, #160]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80087be:	4b27      	ldr	r3, [pc, #156]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c2:	4a26      	ldr	r2, [pc, #152]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087c4:	f023 0310 	bic.w	r3, r3, #16
 80087c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80087ca:	4b24      	ldr	r3, [pc, #144]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087ce:	4b24      	ldr	r3, [pc, #144]	@ (8008860 <RCCEx_PLL2_Config+0x160>)
 80087d0:	4013      	ands	r3, r2
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	69d2      	ldr	r2, [r2, #28]
 80087d6:	00d2      	lsls	r2, r2, #3
 80087d8:	4920      	ldr	r1, [pc, #128]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80087de:	4b1f      	ldr	r3, [pc, #124]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e2:	4a1e      	ldr	r2, [pc, #120]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087e4:	f043 0310 	orr.w	r3, r3, #16
 80087e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d106      	bne.n	80087fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80087f0:	4b1a      	ldr	r3, [pc, #104]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f4:	4a19      	ldr	r2, [pc, #100]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 80087f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80087fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80087fc:	e00f      	b.n	800881e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d106      	bne.n	8008812 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008804:	4b15      	ldr	r3, [pc, #84]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008808:	4a14      	ldr	r2, [pc, #80]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 800880a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800880e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008810:	e005      	b.n	800881e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008812:	4b12      	ldr	r3, [pc, #72]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008816:	4a11      	ldr	r2, [pc, #68]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008818:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800881c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800881e:	4b0f      	ldr	r3, [pc, #60]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a0e      	ldr	r2, [pc, #56]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008824:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800882a:	f7fb fa8d 	bl	8003d48 <HAL_GetTick>
 800882e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008830:	e008      	b.n	8008844 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008832:	f7fb fa89 	bl	8003d48 <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	2b02      	cmp	r3, #2
 800883e:	d901      	bls.n	8008844 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e006      	b.n	8008852 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008844:	4b05      	ldr	r3, [pc, #20]	@ (800885c <RCCEx_PLL2_Config+0x15c>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d0f0      	beq.n	8008832 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008850:	7bfb      	ldrb	r3, [r7, #15]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	58024400 	.word	0x58024400
 8008860:	ffff0007 	.word	0xffff0007

08008864 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008872:	4b53      	ldr	r3, [pc, #332]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008876:	f003 0303 	and.w	r3, r3, #3
 800887a:	2b03      	cmp	r3, #3
 800887c:	d101      	bne.n	8008882 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e099      	b.n	80089b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008882:	4b4f      	ldr	r3, [pc, #316]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a4e      	ldr	r2, [pc, #312]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008888:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800888c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800888e:	f7fb fa5b 	bl	8003d48 <HAL_GetTick>
 8008892:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008894:	e008      	b.n	80088a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008896:	f7fb fa57 	bl	8003d48 <HAL_GetTick>
 800889a:	4602      	mov	r2, r0
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d901      	bls.n	80088a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e086      	b.n	80089b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088a8:	4b45      	ldr	r3, [pc, #276]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1f0      	bne.n	8008896 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80088b4:	4b42      	ldr	r3, [pc, #264]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 80088b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	051b      	lsls	r3, r3, #20
 80088c2:	493f      	ldr	r1, [pc, #252]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 80088c4:	4313      	orrs	r3, r2
 80088c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	3b01      	subs	r3, #1
 80088ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	025b      	lsls	r3, r3, #9
 80088da:	b29b      	uxth	r3, r3
 80088dc:	431a      	orrs	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	3b01      	subs	r3, #1
 80088e4:	041b      	lsls	r3, r3, #16
 80088e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80088ea:	431a      	orrs	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	061b      	lsls	r3, r3, #24
 80088f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80088f8:	4931      	ldr	r1, [pc, #196]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 80088fa:	4313      	orrs	r3, r2
 80088fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80088fe:	4b30      	ldr	r3, [pc, #192]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008902:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	492d      	ldr	r1, [pc, #180]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800890c:	4313      	orrs	r3, r2
 800890e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008910:	4b2b      	ldr	r3, [pc, #172]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008914:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	4928      	ldr	r1, [pc, #160]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800891e:	4313      	orrs	r3, r2
 8008920:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008922:	4b27      	ldr	r3, [pc, #156]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008926:	4a26      	ldr	r2, [pc, #152]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800892c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800892e:	4b24      	ldr	r3, [pc, #144]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008930:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008932:	4b24      	ldr	r3, [pc, #144]	@ (80089c4 <RCCEx_PLL3_Config+0x160>)
 8008934:	4013      	ands	r3, r2
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	69d2      	ldr	r2, [r2, #28]
 800893a:	00d2      	lsls	r2, r2, #3
 800893c:	4920      	ldr	r1, [pc, #128]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800893e:	4313      	orrs	r3, r2
 8008940:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008942:	4b1f      	ldr	r3, [pc, #124]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008946:	4a1e      	ldr	r2, [pc, #120]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800894c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d106      	bne.n	8008962 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008954:	4b1a      	ldr	r3, [pc, #104]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008958:	4a19      	ldr	r2, [pc, #100]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800895a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800895e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008960:	e00f      	b.n	8008982 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d106      	bne.n	8008976 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008968:	4b15      	ldr	r3, [pc, #84]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800896a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896c:	4a14      	ldr	r2, [pc, #80]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800896e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008972:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008974:	e005      	b.n	8008982 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008976:	4b12      	ldr	r3, [pc, #72]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800897a:	4a11      	ldr	r2, [pc, #68]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800897c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008980:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008982:	4b0f      	ldr	r3, [pc, #60]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a0e      	ldr	r2, [pc, #56]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800898c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800898e:	f7fb f9db 	bl	8003d48 <HAL_GetTick>
 8008992:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008994:	e008      	b.n	80089a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008996:	f7fb f9d7 	bl	8003d48 <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d901      	bls.n	80089a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e006      	b.n	80089b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089a8:	4b05      	ldr	r3, [pc, #20]	@ (80089c0 <RCCEx_PLL3_Config+0x15c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d0f0      	beq.n	8008996 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	58024400 	.word	0x58024400
 80089c4:	ffff0007 	.word	0xffff0007

080089c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b08a      	sub	sp, #40	@ 0x28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e075      	b.n	8008ac6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d105      	bne.n	80089f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7f8 fcf5 	bl	80013dc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2204      	movs	r2, #4
 80089f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f868 	bl	8008ad0 <HAL_SD_InitCard>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e05d      	b.n	8008ac6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008a0a:	f107 0308 	add.w	r3, r7, #8
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fdaf 	bl	8009574 <HAL_SD_GetCardStatus>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d001      	beq.n	8008a20 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e052      	b.n	8008ac6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008a20:	7e3b      	ldrb	r3, [r7, #24]
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008a26:	7e7b      	ldrb	r3, [r7, #25]
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d10a      	bne.n	8008a4a <HAL_SD_Init+0x82>
 8008a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d102      	bne.n	8008a40 <HAL_SD_Init+0x78>
 8008a3a:	6a3b      	ldr	r3, [r7, #32]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d004      	beq.n	8008a4a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a46:	659a      	str	r2, [r3, #88]	@ 0x58
 8008a48:	e00b      	b.n	8008a62 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d104      	bne.n	8008a5c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a58:	659a      	str	r2, [r3, #88]	@ 0x58
 8008a5a:	e002      	b.n	8008a62 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fe6d 	bl	8009748 <HAL_SD_ConfigWideBusOperation>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e026      	b.n	8008ac6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008a78:	f7fb f966 	bl	8003d48 <HAL_GetTick>
 8008a7c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008a7e:	e011      	b.n	8008aa4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a80:	f7fb f962 	bl	8003d48 <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a8e:	d109      	bne.n	8008aa4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008a96:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e010      	b.n	8008ac6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 ff61 	bl	800996c <HAL_SD_GetCardState>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b04      	cmp	r3, #4
 8008aae:	d1e7      	bne.n	8008a80 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3728      	adds	r7, #40	@ 0x28
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
	...

08008ad0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008ad0:	b590      	push	{r4, r7, lr}
 8008ad2:	b08d      	sub	sp, #52	@ 0x34
 8008ad4:	af02      	add	r7, sp, #8
 8008ad6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008adc:	2300      	movs	r3, #0
 8008ade:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008ae8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008aec:	f04f 0100 	mov.w	r1, #0
 8008af0:	f7fe fc76 	bl	80073e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008af4:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8008af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d109      	bne.n	8008b10 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008b0a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e070      	b.n	8008bf2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b12:	0a1b      	lsrs	r3, r3, #8
 8008b14:	4a39      	ldr	r2, [pc, #228]	@ (8008bfc <HAL_SD_InitCard+0x12c>)
 8008b16:	fba2 2303 	umull	r2, r3, r2, r3
 8008b1a:	091b      	lsrs	r3, r3, #4
 8008b1c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681c      	ldr	r4, [r3, #0]
 8008b22:	466a      	mov	r2, sp
 8008b24:	f107 0318 	add.w	r3, r7, #24
 8008b28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b2c:	e882 0003 	stmia.w	r2, {r0, r1}
 8008b30:	f107 030c 	add.w	r3, r7, #12
 8008b34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b36:	4620      	mov	r0, r4
 8008b38:	f005 fb8e 	bl	800e258 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f005 fbd1 	bl	800e2e8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d005      	beq.n	8008b58 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	005b      	lsls	r3, r3, #1
 8008b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b56:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d007      	beq.n	8008b6e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008b5e:	4a28      	ldr	r2, [pc, #160]	@ (8008c00 <HAL_SD_InitCard+0x130>)
 8008b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b66:	3301      	adds	r3, #1
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7fb f8f9 	bl	8003d60 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 ffea 	bl	8009b48 <SD_PowerON>
 8008b74:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00b      	beq.n	8008b94 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e02e      	b.n	8008bf2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 ff09 	bl	80099ac <SD_InitCard>
 8008b9a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00b      	beq.n	8008bba <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bae:	6a3b      	ldr	r3, [r7, #32]
 8008bb0:	431a      	orrs	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e01b      	b.n	8008bf2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f005 fc26 	bl	800e414 <SDMMC_CmdBlockLength>
 8008bc8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bca:	6a3b      	ldr	r3, [r7, #32]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d00f      	beq.n	8008bf0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8008c04 <HAL_SD_InitCard+0x134>)
 8008bd6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	431a      	orrs	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e000      	b.n	8008bf2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	372c      	adds	r7, #44	@ 0x2c
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd90      	pop	{r4, r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	014f8b59 	.word	0x014f8b59
 8008c00:	00012110 	.word	0x00012110
 8008c04:	1fe00fff 	.word	0x1fe00fff

08008c08 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b08c      	sub	sp, #48	@ 0x30
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	607a      	str	r2, [r7, #4]
 8008c14:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d107      	bne.n	8008c30 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c24:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e08d      	b.n	8008d4c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	f040 8086 	bne.w	8008d4a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008c44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	441a      	add	r2, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d907      	bls.n	8008c62 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c56:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e074      	b.n	8008d4c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2203      	movs	r2, #3
 8008c66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	025a      	lsls	r2, r3, #9
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d002      	beq.n	8008c8e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8008c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c8a:	025b      	lsls	r3, r3, #9
 8008c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c92:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	025b      	lsls	r3, r3, #9
 8008c98:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008c9a:	2390      	movs	r3, #144	@ 0x90
 8008c9c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008c9e:	2302      	movs	r3, #2
 8008ca0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f107 0210 	add.w	r2, r7, #16
 8008cb2:	4611      	mov	r1, r2
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f005 fb81 	bl	800e3bc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68da      	ldr	r2, [r3, #12]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cc8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d90a      	bls.n	8008cf6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2282      	movs	r2, #130	@ 0x82
 8008ce4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cec:	4618      	mov	r0, r3
 8008cee:	f005 fbd7 	bl	800e4a0 <SDMMC_CmdReadMultiBlock>
 8008cf2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008cf4:	e009      	b.n	8008d0a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2281      	movs	r2, #129	@ 0x81
 8008cfa:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d02:	4618      	mov	r0, r3
 8008d04:	f005 fba9 	bl	800e45a <SDMMC_CmdReadSingleBlock>
 8008d08:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d012      	beq.n	8008d36 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a0f      	ldr	r2, [pc, #60]	@ (8008d54 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8008d16:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d1e:	431a      	orrs	r2, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e00a      	b.n	8008d4c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8008d44:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	e000      	b.n	8008d4c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008d4a:	2302      	movs	r3, #2
  }
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3730      	adds	r7, #48	@ 0x30
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	1fe00fff 	.word	0x1fe00fff

08008d58 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08c      	sub	sp, #48	@ 0x30
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
 8008d64:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d107      	bne.n	8008d80 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d74:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e08d      	b.n	8008e9c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	f040 8086 	bne.w	8008e9a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008d94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	441a      	add	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d907      	bls.n	8008db2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008da6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e074      	b.n	8008e9c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2203      	movs	r2, #3
 8008db6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	025a      	lsls	r2, r3, #9
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d002      	beq.n	8008dde <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dda:	025b      	lsls	r3, r3, #9
 8008ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008dde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008de2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	025b      	lsls	r3, r3, #9
 8008de8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008dea:	2390      	movs	r3, #144	@ 0x90
 8008dec:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008dee:	2300      	movs	r3, #0
 8008df0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008df6:	2300      	movs	r3, #0
 8008df8:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f107 0210 	add.w	r2, r7, #16
 8008e02:	4611      	mov	r1, r2
 8008e04:	4618      	mov	r0, r3
 8008e06:	f005 fad9 	bl	800e3bc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68da      	ldr	r2, [r3, #12]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e18:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2201      	movs	r2, #1
 8008e28:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d90a      	bls.n	8008e46 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	22a0      	movs	r2, #160	@ 0xa0
 8008e34:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f005 fb75 	bl	800e52c <SDMMC_CmdWriteMultiBlock>
 8008e42:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008e44:	e009      	b.n	8008e5a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2290      	movs	r2, #144	@ 0x90
 8008e4a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e52:	4618      	mov	r0, r3
 8008e54:	f005 fb47 	bl	800e4e6 <SDMMC_CmdWriteSingleBlock>
 8008e58:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d012      	beq.n	8008e86 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a0f      	ldr	r2, [pc, #60]	@ (8008ea4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8008e66:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e6e:	431a      	orrs	r2, r3
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e00a      	b.n	8008e9c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8008e94:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	e000      	b.n	8008e9c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008e9a:	2302      	movs	r3, #2
  }
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3730      	adds	r7, #48	@ 0x30
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	1fe00fff 	.word	0x1fe00fff

08008ea8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ebc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d008      	beq.n	8008ed6 <HAL_SD_IRQHandler+0x2e>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f003 0308 	and.w	r3, r3, #8
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d003      	beq.n	8008ed6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f001 f926 	bl	800a120 <SD_Read_IT>
 8008ed4:	e19a      	b.n	800920c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f000 80ac 	beq.w	800903e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008eee:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	4b59      	ldr	r3, [pc, #356]	@ (8009060 <HAL_SD_IRQHandler+0x1b8>)
 8008efc:	400b      	ands	r3, r1
 8008efe:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8008f0e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68da      	ldr	r2, [r3, #12]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f1e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f003 0308 	and.w	r3, r3, #8
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d038      	beq.n	8008f9c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f003 0302 	and.w	r3, r3, #2
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d104      	bne.n	8008f3e <HAL_SD_IRQHandler+0x96>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f003 0320 	and.w	r3, r3, #32
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d011      	beq.n	8008f62 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f005 fb16 	bl	800e574 <SDMMC_CmdStopTransfer>
 8008f48:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d008      	beq.n	8008f62 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	431a      	orrs	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f95b 	bl	8009218 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a3f      	ldr	r2, [pc, #252]	@ (8009064 <HAL_SD_IRQHandler+0x1bc>)
 8008f68:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d104      	bne.n	8008f8c <HAL_SD_IRQHandler+0xe4>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f003 0302 	and.w	r3, r3, #2
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d003      	beq.n	8008f94 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f005 ffc9 	bl	800ef24 <HAL_SD_RxCpltCallback>
 8008f92:	e13b      	b.n	800920c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f005 ffbb 	bl	800ef10 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008f9a:	e137      	b.n	800920c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f000 8132 	beq.w	800920c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2200      	movs	r2, #0
 8008fae:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f003 0302 	and.w	r3, r3, #2
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d104      	bne.n	8008fd4 <HAL_SD_IRQHandler+0x12c>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f003 0320 	and.w	r3, r3, #32
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d011      	beq.n	8008ff8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f005 facb 	bl	800e574 <SDMMC_CmdStopTransfer>
 8008fde:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d008      	beq.n	8008ff8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	431a      	orrs	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f910 	bl	8009218 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f003 0310 	and.w	r3, r3, #16
 800900c:	2b00      	cmp	r3, #0
 800900e:	d104      	bne.n	800901a <HAL_SD_IRQHandler+0x172>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f003 0320 	and.w	r3, r3, #32
 8009016:	2b00      	cmp	r3, #0
 8009018:	d002      	beq.n	8009020 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f005 ff78 	bl	800ef10 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f003 0301 	and.w	r3, r3, #1
 8009026:	2b00      	cmp	r3, #0
 8009028:	d105      	bne.n	8009036 <HAL_SD_IRQHandler+0x18e>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f003 0302 	and.w	r3, r3, #2
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 80eb 	beq.w	800920c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f005 ff74 	bl	800ef24 <HAL_SD_RxCpltCallback>
}
 800903c:	e0e6      	b.n	800920c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009044:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00d      	beq.n	8009068 <HAL_SD_IRQHandler+0x1c0>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f003 0308 	and.w	r3, r3, #8
 8009052:	2b00      	cmp	r3, #0
 8009054:	d008      	beq.n	8009068 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f001 f8a8 	bl	800a1ac <SD_Write_IT>
 800905c:	e0d6      	b.n	800920c <HAL_SD_IRQHandler+0x364>
 800905e:	bf00      	nop
 8009060:	ffff3ec5 	.word	0xffff3ec5
 8009064:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800906e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8009072:	2b00      	cmp	r3, #0
 8009074:	f000 809d 	beq.w	80091b2 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800907e:	f003 0302 	and.w	r3, r3, #2
 8009082:	2b00      	cmp	r3, #0
 8009084:	d005      	beq.n	8009092 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800908a:	f043 0202 	orr.w	r2, r3, #2
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009098:	f003 0308 	and.w	r3, r3, #8
 800909c:	2b00      	cmp	r3, #0
 800909e:	d005      	beq.n	80090ac <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090a4:	f043 0208 	orr.w	r2, r3, #8
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090b2:	f003 0320 	and.w	r3, r3, #32
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d005      	beq.n	80090c6 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090be:	f043 0220 	orr.w	r2, r3, #32
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090cc:	f003 0310 	and.w	r3, r3, #16
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d005      	beq.n	80090e0 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090d8:	f043 0210 	orr.w	r2, r3, #16
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a4b      	ldr	r2, [pc, #300]	@ (8009214 <HAL_SD_IRQHandler+0x36c>)
 80090e6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80090f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	68da      	ldr	r2, [r3, #12]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009106:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009116:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68da      	ldr	r2, [r3, #12]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009126:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4618      	mov	r0, r3
 800912e:	f005 fa21 	bl	800e574 <SDMMC_CmdStopTransfer>
 8009132:	4602      	mov	r2, r0
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009138:	431a      	orrs	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68da      	ldr	r2, [r3, #12]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800914c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009156:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f003 0308 	and.w	r3, r3, #8
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00a      	beq.n	8009178 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2201      	movs	r2, #1
 8009166:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 f851 	bl	8009218 <HAL_SD_ErrorCallback>
}
 8009176:	e049      	b.n	800920c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800917e:	2b00      	cmp	r3, #0
 8009180:	d044      	beq.n	800920c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009186:	2b00      	cmp	r3, #0
 8009188:	d040      	beq.n	800920c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8009198:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2200      	movs	r2, #0
 80091a0:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f834 	bl	8009218 <HAL_SD_ErrorCallback>
}
 80091b0:	e02c      	b.n	800920c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d025      	beq.n	800920c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091c8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091d0:	f003 0304 	and.w	r3, r3, #4
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10c      	bne.n	80091f2 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f003 0320 	and.w	r3, r3, #32
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d003      	beq.n	80091ea <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f001 f84a 	bl	800a27c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80091e8:	e010      	b.n	800920c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f001 f832 	bl	800a254 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80091f0:	e00c      	b.n	800920c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f003 0320 	and.w	r3, r3, #32
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d003      	beq.n	8009204 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f001 f833 	bl	800a268 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8009202:	e003      	b.n	800920c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f001 f81b 	bl	800a240 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800920a:	e7ff      	b.n	800920c <HAL_SD_IRQHandler+0x364>
 800920c:	bf00      	nop
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	18000f3a 	.word	0x18000f3a

08009218 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800923a:	0f9b      	lsrs	r3, r3, #30
 800923c:	b2da      	uxtb	r2, r3
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009246:	0e9b      	lsrs	r3, r3, #26
 8009248:	b2db      	uxtb	r3, r3
 800924a:	f003 030f 	and.w	r3, r3, #15
 800924e:	b2da      	uxtb	r2, r3
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009258:	0e1b      	lsrs	r3, r3, #24
 800925a:	b2db      	uxtb	r3, r3
 800925c:	f003 0303 	and.w	r3, r3, #3
 8009260:	b2da      	uxtb	r2, r3
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800926a:	0c1b      	lsrs	r3, r3, #16
 800926c:	b2da      	uxtb	r2, r3
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009276:	0a1b      	lsrs	r3, r3, #8
 8009278:	b2da      	uxtb	r2, r3
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009282:	b2da      	uxtb	r2, r3
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800928c:	0d1b      	lsrs	r3, r3, #20
 800928e:	b29a      	uxth	r2, r3
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009298:	0c1b      	lsrs	r3, r3, #16
 800929a:	b2db      	uxtb	r3, r3
 800929c:	f003 030f 	and.w	r3, r3, #15
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092aa:	0bdb      	lsrs	r3, r3, #15
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	f003 0301 	and.w	r3, r3, #1
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092bc:	0b9b      	lsrs	r3, r3, #14
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092ce:	0b5b      	lsrs	r3, r3, #13
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	b2da      	uxtb	r2, r3
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092e0:	0b1b      	lsrs	r3, r3, #12
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	f003 0301 	and.w	r3, r3, #1
 80092e8:	b2da      	uxtb	r2, r3
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	2200      	movs	r2, #0
 80092f2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d163      	bne.n	80093c4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009300:	009a      	lsls	r2, r3, #2
 8009302:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009306:	4013      	ands	r3, r2
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800930c:	0f92      	lsrs	r2, r2, #30
 800930e:	431a      	orrs	r2, r3
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009318:	0edb      	lsrs	r3, r3, #27
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 0307 	and.w	r3, r3, #7
 8009320:	b2da      	uxtb	r2, r3
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800932a:	0e1b      	lsrs	r3, r3, #24
 800932c:	b2db      	uxtb	r3, r3
 800932e:	f003 0307 	and.w	r3, r3, #7
 8009332:	b2da      	uxtb	r2, r3
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800933c:	0d5b      	lsrs	r3, r3, #21
 800933e:	b2db      	uxtb	r3, r3
 8009340:	f003 0307 	and.w	r3, r3, #7
 8009344:	b2da      	uxtb	r2, r3
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800934e:	0c9b      	lsrs	r3, r3, #18
 8009350:	b2db      	uxtb	r3, r3
 8009352:	f003 0307 	and.w	r3, r3, #7
 8009356:	b2da      	uxtb	r2, r3
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009360:	0bdb      	lsrs	r3, r3, #15
 8009362:	b2db      	uxtb	r3, r3
 8009364:	f003 0307 	and.w	r3, r3, #7
 8009368:	b2da      	uxtb	r2, r3
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	1c5a      	adds	r2, r3, #1
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	7e1b      	ldrb	r3, [r3, #24]
 800937c:	b2db      	uxtb	r3, r3
 800937e:	f003 0307 	and.w	r3, r3, #7
 8009382:	3302      	adds	r3, #2
 8009384:	2201      	movs	r2, #1
 8009386:	fa02 f303 	lsl.w	r3, r2, r3
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800938e:	fb03 f202 	mul.w	r2, r3, r2
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	7a1b      	ldrb	r3, [r3, #8]
 800939a:	b2db      	uxtb	r3, r3
 800939c:	f003 030f 	and.w	r3, r3, #15
 80093a0:	2201      	movs	r2, #1
 80093a2:	409a      	lsls	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80093b0:	0a52      	lsrs	r2, r2, #9
 80093b2:	fb03 f202 	mul.w	r2, r3, r2
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093c0:	655a      	str	r2, [r3, #84]	@ 0x54
 80093c2:	e031      	b.n	8009428 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d11d      	bne.n	8009408 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093d0:	041b      	lsls	r3, r3, #16
 80093d2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093da:	0c1b      	lsrs	r3, r3, #16
 80093dc:	431a      	orrs	r2, r3
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	3301      	adds	r3, #1
 80093e8:	029a      	lsls	r2, r3, #10
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	655a      	str	r2, [r3, #84]	@ 0x54
 8009406:	e00f      	b.n	8009428 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a58      	ldr	r2, [pc, #352]	@ (8009570 <HAL_SD_GetCardCSD+0x344>)
 800940e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009414:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	e09d      	b.n	8009564 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800942c:	0b9b      	lsrs	r3, r3, #14
 800942e:	b2db      	uxtb	r3, r3
 8009430:	f003 0301 	and.w	r3, r3, #1
 8009434:	b2da      	uxtb	r2, r3
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800943e:	09db      	lsrs	r3, r3, #7
 8009440:	b2db      	uxtb	r3, r3
 8009442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009446:	b2da      	uxtb	r2, r3
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009450:	b2db      	uxtb	r3, r3
 8009452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009456:	b2da      	uxtb	r2, r3
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009460:	0fdb      	lsrs	r3, r3, #31
 8009462:	b2da      	uxtb	r2, r3
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800946c:	0f5b      	lsrs	r3, r3, #29
 800946e:	b2db      	uxtb	r3, r3
 8009470:	f003 0303 	and.w	r3, r3, #3
 8009474:	b2da      	uxtb	r2, r3
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800947e:	0e9b      	lsrs	r3, r3, #26
 8009480:	b2db      	uxtb	r3, r3
 8009482:	f003 0307 	and.w	r3, r3, #7
 8009486:	b2da      	uxtb	r2, r3
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009490:	0d9b      	lsrs	r3, r3, #22
 8009492:	b2db      	uxtb	r3, r3
 8009494:	f003 030f 	and.w	r3, r3, #15
 8009498:	b2da      	uxtb	r2, r3
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094a2:	0d5b      	lsrs	r3, r3, #21
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	b2da      	uxtb	r2, r3
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094be:	0c1b      	lsrs	r3, r3, #16
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094d2:	0bdb      	lsrs	r3, r3, #15
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094e6:	0b9b      	lsrs	r3, r3, #14
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094fa:	0b5b      	lsrs	r3, r3, #13
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	b2da      	uxtb	r2, r3
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800950e:	0b1b      	lsrs	r3, r3, #12
 8009510:	b2db      	uxtb	r3, r3
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	b2da      	uxtb	r2, r3
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009522:	0a9b      	lsrs	r3, r3, #10
 8009524:	b2db      	uxtb	r3, r3
 8009526:	f003 0303 	and.w	r3, r3, #3
 800952a:	b2da      	uxtb	r2, r3
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009536:	0a1b      	lsrs	r3, r3, #8
 8009538:	b2db      	uxtb	r3, r3
 800953a:	f003 0303 	and.w	r3, r3, #3
 800953e:	b2da      	uxtb	r2, r3
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800954a:	085b      	lsrs	r3, r3, #1
 800954c:	b2db      	uxtb	r3, r3
 800954e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009552:	b2da      	uxtb	r2, r3
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	1fe00fff 	.word	0x1fe00fff

08009574 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b094      	sub	sp, #80	@ 0x50
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b03      	cmp	r3, #3
 800958e:	d101      	bne.n	8009594 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	e0a7      	b.n	80096e4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009594:	f107 0308 	add.w	r3, r7, #8
 8009598:	4619      	mov	r1, r3
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fb62 	bl	8009c64 <SD_SendSDStatus>
 80095a0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80095a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d011      	beq.n	80095cc <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a4f      	ldr	r2, [pc, #316]	@ (80096ec <HAL_SD_GetCardStatus+0x178>)
 80095ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095b6:	431a      	orrs	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80095ca:	e070      	b.n	80096ae <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	099b      	lsrs	r3, r3, #6
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	f003 0303 	and.w	r3, r3, #3
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	095b      	lsrs	r3, r3, #5
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	f003 0301 	and.w	r3, r3, #1
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	0a1b      	lsrs	r3, r3, #8
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	0e1b      	lsrs	r3, r3, #24
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	4313      	orrs	r3, r2
 8009600:	b29a      	uxth	r2, r3
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	061a      	lsls	r2, r3, #24
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	021b      	lsls	r3, r3, #8
 800960e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009612:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	0a1b      	lsrs	r3, r3, #8
 8009618:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800961c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	0e1b      	lsrs	r3, r3, #24
 8009622:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	b2da      	uxtb	r2, r3
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	0a1b      	lsrs	r3, r3, #8
 8009634:	b2da      	uxtb	r2, r3
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	0d1b      	lsrs	r3, r3, #20
 800963e:	b2db      	uxtb	r3, r3
 8009640:	f003 030f 	and.w	r3, r3, #15
 8009644:	b2da      	uxtb	r2, r3
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	0c1b      	lsrs	r3, r3, #16
 800964e:	b29b      	uxth	r3, r3
 8009650:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009654:	b29a      	uxth	r2, r3
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	b29b      	uxth	r3, r3
 800965a:	b2db      	uxtb	r3, r3
 800965c:	b29b      	uxth	r3, r3
 800965e:	4313      	orrs	r3, r2
 8009660:	b29a      	uxth	r2, r3
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	0a9b      	lsrs	r3, r3, #10
 800966a:	b2db      	uxtb	r3, r3
 800966c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009670:	b2da      	uxtb	r2, r3
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	0a1b      	lsrs	r3, r3, #8
 800967a:	b2db      	uxtb	r3, r3
 800967c:	f003 0303 	and.w	r3, r3, #3
 8009680:	b2da      	uxtb	r2, r3
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	091b      	lsrs	r3, r3, #4
 800968a:	b2db      	uxtb	r3, r3
 800968c:	f003 030f 	and.w	r3, r3, #15
 8009690:	b2da      	uxtb	r2, r3
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	b2db      	uxtb	r3, r3
 800969a:	f003 030f 	and.w	r3, r3, #15
 800969e:	b2da      	uxtb	r2, r3
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	0e1b      	lsrs	r3, r3, #24
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80096b6:	4618      	mov	r0, r3
 80096b8:	f004 feac 	bl	800e414 <SDMMC_CmdBlockLength>
 80096bc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80096be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00d      	beq.n	80096e0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a08      	ldr	r2, [pc, #32]	@ (80096ec <HAL_SD_GetCardStatus+0x178>)
 80096ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096d0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 80096e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3750      	adds	r7, #80	@ 0x50
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	1fe00fff 	.word	0x1fe00fff

080096f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800973a:	2300      	movs	r3, #0
}
 800973c:	4618      	mov	r0, r3
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009748:	b590      	push	{r4, r7, lr}
 800974a:	b08d      	sub	sp, #52	@ 0x34
 800974c:	af02      	add	r7, sp, #8
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2203      	movs	r2, #3
 800975c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009764:	2b03      	cmp	r3, #3
 8009766:	d02e      	beq.n	80097c6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800976e:	d106      	bne.n	800977e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009774:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	635a      	str	r2, [r3, #52]	@ 0x34
 800977c:	e029      	b.n	80097d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009784:	d10a      	bne.n	800979c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fb64 	bl	8009e54 <SD_WideBus_Enable>
 800978c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009792:	6a3b      	ldr	r3, [r7, #32]
 8009794:	431a      	orrs	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	635a      	str	r2, [r3, #52]	@ 0x34
 800979a:	e01a      	b.n	80097d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10a      	bne.n	80097b8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fba1 	bl	8009eea <SD_WideBus_Disable>
 80097a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097ae:	6a3b      	ldr	r3, [r7, #32]
 80097b0:	431a      	orrs	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80097b6:	e00c      	b.n	80097d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097bc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80097c4:	e005      	b.n	80097d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097ca:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d007      	beq.n	80097ea <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a5f      	ldr	r2, [pc, #380]	@ (800995c <HAL_SD_ConfigWideBusOperation+0x214>)
 80097e0:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80097e8:	e096      	b.n	8009918 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80097ea:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80097ee:	f04f 0100 	mov.w	r1, #0
 80097f2:	f7fd fdf5 	bl	80073e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80097f6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f000 8083 	beq.w	8009906 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	695a      	ldr	r2, [r3, #20]
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	4950      	ldr	r1, [pc, #320]	@ (8009960 <HAL_SD_ConfigWideBusOperation+0x218>)
 800981e:	fba1 1303 	umull	r1, r3, r1, r3
 8009822:	0e1b      	lsrs	r3, r3, #24
 8009824:	429a      	cmp	r2, r3
 8009826:	d303      	bcc.n	8009830 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	61bb      	str	r3, [r7, #24]
 800982e:	e05a      	b.n	80098e6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009838:	d103      	bne.n	8009842 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	61bb      	str	r3, [r7, #24]
 8009840:	e051      	b.n	80098e6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800984a:	d126      	bne.n	800989a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	695b      	ldr	r3, [r3, #20]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10e      	bne.n	8009872 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	4a43      	ldr	r2, [pc, #268]	@ (8009964 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d906      	bls.n	800986a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	4a40      	ldr	r2, [pc, #256]	@ (8009960 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009860:	fba2 2303 	umull	r2, r3, r2, r3
 8009864:	0e5b      	lsrs	r3, r3, #25
 8009866:	61bb      	str	r3, [r7, #24]
 8009868:	e03d      	b.n	80098e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	695b      	ldr	r3, [r3, #20]
 800986e:	61bb      	str	r3, [r7, #24]
 8009870:	e039      	b.n	80098e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	005b      	lsls	r3, r3, #1
 8009878:	69fa      	ldr	r2, [r7, #28]
 800987a:	fbb2 f3f3 	udiv	r3, r2, r3
 800987e:	4a39      	ldr	r2, [pc, #228]	@ (8009964 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d906      	bls.n	8009892 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	4a36      	ldr	r2, [pc, #216]	@ (8009960 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009888:	fba2 2303 	umull	r2, r3, r2, r3
 800988c:	0e5b      	lsrs	r3, r3, #25
 800988e:	61bb      	str	r3, [r7, #24]
 8009890:	e029      	b.n	80098e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	695b      	ldr	r3, [r3, #20]
 8009896:	61bb      	str	r3, [r7, #24]
 8009898:	e025      	b.n	80098e6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10e      	bne.n	80098c0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	4a30      	ldr	r2, [pc, #192]	@ (8009968 <HAL_SD_ConfigWideBusOperation+0x220>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d906      	bls.n	80098b8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	4a2c      	ldr	r2, [pc, #176]	@ (8009960 <HAL_SD_ConfigWideBusOperation+0x218>)
 80098ae:	fba2 2303 	umull	r2, r3, r2, r3
 80098b2:	0e1b      	lsrs	r3, r3, #24
 80098b4:	61bb      	str	r3, [r7, #24]
 80098b6:	e016      	b.n	80098e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	61bb      	str	r3, [r7, #24]
 80098be:	e012      	b.n	80098e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	695b      	ldr	r3, [r3, #20]
 80098c4:	005b      	lsls	r3, r3, #1
 80098c6:	69fa      	ldr	r2, [r7, #28]
 80098c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098cc:	4a26      	ldr	r2, [pc, #152]	@ (8009968 <HAL_SD_ConfigWideBusOperation+0x220>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d906      	bls.n	80098e0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	4a22      	ldr	r2, [pc, #136]	@ (8009960 <HAL_SD_ConfigWideBusOperation+0x218>)
 80098d6:	fba2 2303 	umull	r2, r3, r2, r3
 80098da:	0e1b      	lsrs	r3, r3, #24
 80098dc:	61bb      	str	r3, [r7, #24]
 80098de:	e002      	b.n	80098e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	695b      	ldr	r3, [r3, #20]
 80098e4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681c      	ldr	r4, [r3, #0]
 80098ea:	466a      	mov	r2, sp
 80098ec:	f107 0314 	add.w	r3, r7, #20
 80098f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80098f4:	e882 0003 	stmia.w	r2, {r0, r1}
 80098f8:	f107 0308 	add.w	r3, r7, #8
 80098fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098fe:	4620      	mov	r0, r4
 8009900:	f004 fcaa 	bl	800e258 <SDMMC_Init>
 8009904:	e008      	b.n	8009918 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800990a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009920:	4618      	mov	r0, r3
 8009922:	f004 fd77 	bl	800e414 <SDMMC_CmdBlockLength>
 8009926:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009928:	6a3b      	ldr	r3, [r7, #32]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00c      	beq.n	8009948 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a0a      	ldr	r2, [pc, #40]	@ (800995c <HAL_SD_ConfigWideBusOperation+0x214>)
 8009934:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800993a:	6a3b      	ldr	r3, [r7, #32]
 800993c:	431a      	orrs	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8009950:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009954:	4618      	mov	r0, r3
 8009956:	372c      	adds	r7, #44	@ 0x2c
 8009958:	46bd      	mov	sp, r7
 800995a:	bd90      	pop	{r4, r7, pc}
 800995c:	1fe00fff 	.word	0x1fe00fff
 8009960:	55e63b89 	.word	0x55e63b89
 8009964:	02faf080 	.word	0x02faf080
 8009968:	017d7840 	.word	0x017d7840

0800996c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009974:	2300      	movs	r3, #0
 8009976:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009978:	f107 030c 	add.w	r3, r7, #12
 800997c:	4619      	mov	r1, r3
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 fa40 	bl	8009e04 <SD_SendStatus>
 8009984:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d005      	beq.n	8009998 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	431a      	orrs	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	0a5b      	lsrs	r3, r3, #9
 800999c:	f003 030f 	and.w	r3, r3, #15
 80099a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80099a2:	693b      	ldr	r3, [r7, #16]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3718      	adds	r7, #24
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b090      	sub	sp, #64	@ 0x40
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80099b4:	2300      	movs	r3, #0
 80099b6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80099b8:	f7fa f9c6 	bl	8003d48 <HAL_GetTick>
 80099bc:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f004 fca1 	bl	800e30a <SDMMC_GetPowerState>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d102      	bne.n	80099d4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80099ce:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80099d2:	e0b5      	b.n	8009b40 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d8:	2b03      	cmp	r3, #3
 80099da:	d02e      	beq.n	8009a3a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4618      	mov	r0, r3
 80099e2:	f004 feec 	bl	800e7be <SDMMC_CmdSendCID>
 80099e6:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80099e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <SD_InitCard+0x46>
    {
      return errorstate;
 80099ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f0:	e0a6      	b.n	8009b40 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2100      	movs	r1, #0
 80099f8:	4618      	mov	r0, r3
 80099fa:	f004 fccc 	bl	800e396 <SDMMC_GetResponse>
 80099fe:	4602      	mov	r2, r0
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2104      	movs	r1, #4
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f004 fcc3 	bl	800e396 <SDMMC_GetResponse>
 8009a10:	4602      	mov	r2, r0
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2108      	movs	r1, #8
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f004 fcba 	bl	800e396 <SDMMC_GetResponse>
 8009a22:	4602      	mov	r2, r0
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	210c      	movs	r1, #12
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f004 fcb1 	bl	800e396 <SDMMC_GetResponse>
 8009a34:	4602      	mov	r2, r0
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a3e:	2b03      	cmp	r3, #3
 8009a40:	d01d      	beq.n	8009a7e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009a42:	e019      	b.n	8009a78 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f107 020a 	add.w	r2, r7, #10
 8009a4c:	4611      	mov	r1, r2
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f004 fef4 	bl	800e83c <SDMMC_CmdSetRelAdd>
 8009a54:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a5e:	e06f      	b.n	8009b40 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009a60:	f7fa f972 	bl	8003d48 <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d902      	bls.n	8009a78 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009a72:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009a76:	e063      	b.n	8009b40 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009a78:	897b      	ldrh	r3, [r7, #10]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d0e2      	beq.n	8009a44 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	d036      	beq.n	8009af4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009a86:	897b      	ldrh	r3, [r7, #10]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a96:	041b      	lsls	r3, r3, #16
 8009a98:	4619      	mov	r1, r3
 8009a9a:	4610      	mov	r0, r2
 8009a9c:	f004 feae 	bl	800e7fc <SDMMC_CmdSendCSD>
 8009aa0:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d001      	beq.n	8009aac <SD_InitCard+0x100>
    {
      return errorstate;
 8009aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aaa:	e049      	b.n	8009b40 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f004 fc6f 	bl	800e396 <SDMMC_GetResponse>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2104      	movs	r1, #4
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f004 fc66 	bl	800e396 <SDMMC_GetResponse>
 8009aca:	4602      	mov	r2, r0
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2108      	movs	r1, #8
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f004 fc5d 	bl	800e396 <SDMMC_GetResponse>
 8009adc:	4602      	mov	r2, r0
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	210c      	movs	r1, #12
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f004 fc54 	bl	800e396 <SDMMC_GetResponse>
 8009aee:	4602      	mov	r2, r0
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2104      	movs	r1, #4
 8009afa:	4618      	mov	r0, r3
 8009afc:	f004 fc4b 	bl	800e396 <SDMMC_GetResponse>
 8009b00:	4603      	mov	r3, r0
 8009b02:	0d1a      	lsrs	r2, r3, #20
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009b08:	f107 030c 	add.w	r3, r7, #12
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7ff fb8c 	bl	800922c <HAL_SD_GetCardCSD>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d002      	beq.n	8009b20 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b1a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009b1e:	e00f      	b.n	8009b40 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b28:	041b      	lsls	r3, r3, #16
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	4610      	mov	r0, r2
 8009b2e:	f004 fd5d 	bl	800e5ec <SDMMC_CmdSelDesel>
 8009b32:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <SD_InitCard+0x192>
  {
    return errorstate;
 8009b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3c:	e000      	b.n	8009b40 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3740      	adds	r7, #64	@ 0x40
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b50:	2300      	movs	r3, #0
 8009b52:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009b54:	2300      	movs	r3, #0
 8009b56:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4618      	mov	r0, r3
 8009b62:	f004 fd66 	bl	800e632 <SDMMC_CmdGoIdleState>
 8009b66:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d001      	beq.n	8009b72 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	e072      	b.n	8009c58 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4618      	mov	r0, r3
 8009b78:	f004 fd79 	bl	800e66e <SDMMC_CmdOperCond>
 8009b7c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b84:	d10d      	bne.n	8009ba2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f004 fd4e 	bl	800e632 <SDMMC_CmdGoIdleState>
 8009b96:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d004      	beq.n	8009ba8 <SD_PowerON+0x60>
    {
      return errorstate;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	e05a      	b.n	8009c58 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d137      	bne.n	8009c20 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f004 fd79 	bl	800e6ae <SDMMC_CmdAppCommand>
 8009bbc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d02d      	beq.n	8009c20 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bc4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009bc8:	e046      	b.n	8009c58 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2100      	movs	r1, #0
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f004 fd6c 	bl	800e6ae <SDMMC_CmdAppCommand>
 8009bd6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d001      	beq.n	8009be2 <SD_PowerON+0x9a>
    {
      return errorstate;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	e03a      	b.n	8009c58 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	491e      	ldr	r1, [pc, #120]	@ (8009c60 <SD_PowerON+0x118>)
 8009be8:	4618      	mov	r0, r3
 8009bea:	f004 fd83 	bl	800e6f4 <SDMMC_CmdAppOperCommand>
 8009bee:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d002      	beq.n	8009bfc <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bf6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009bfa:	e02d      	b.n	8009c58 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2100      	movs	r1, #0
 8009c02:	4618      	mov	r0, r3
 8009c04:	f004 fbc7 	bl	800e396 <SDMMC_GetResponse>
 8009c08:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	0fdb      	lsrs	r3, r3, #31
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d101      	bne.n	8009c16 <SD_PowerON+0xce>
 8009c12:	2301      	movs	r3, #1
 8009c14:	e000      	b.n	8009c18 <SD_PowerON+0xd0>
 8009c16:	2300      	movs	r3, #0
 8009c18:	613b      	str	r3, [r7, #16]

    count++;
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d802      	bhi.n	8009c30 <SD_PowerON+0xe8>
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d0cc      	beq.n	8009bca <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d902      	bls.n	8009c40 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009c3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009c3e:	e00b      	b.n	8009c58 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d002      	beq.n	8009c56 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3718      	adds	r7, #24
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	c1100000 	.word	0xc1100000

08009c64 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b08c      	sub	sp, #48	@ 0x30
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009c6e:	f7fa f86b 	bl	8003d48 <HAL_GetTick>
 8009c72:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f004 fb89 	bl	800e396 <SDMMC_GetResponse>
 8009c84:	4603      	mov	r3, r0
 8009c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c8e:	d102      	bne.n	8009c96 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009c90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009c94:	e0b0      	b.n	8009df8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2140      	movs	r1, #64	@ 0x40
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f004 fbb9 	bl	800e414 <SDMMC_CmdBlockLength>
 8009ca2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d005      	beq.n	8009cb6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009cb2:	6a3b      	ldr	r3, [r7, #32]
 8009cb4:	e0a0      	b.n	8009df8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cbe:	041b      	lsls	r3, r3, #16
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	4610      	mov	r0, r2
 8009cc4:	f004 fcf3 	bl	800e6ae <SDMMC_CmdAppCommand>
 8009cc8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cca:	6a3b      	ldr	r3, [r7, #32]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d005      	beq.n	8009cdc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	e08d      	b.n	8009df8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009cdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009ce0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009ce2:	2340      	movs	r3, #64	@ 0x40
 8009ce4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009ce6:	2360      	movs	r3, #96	@ 0x60
 8009ce8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009cea:	2302      	movs	r3, #2
 8009cec:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f107 0208 	add.w	r2, r7, #8
 8009cfe:	4611      	mov	r1, r2
 8009d00:	4618      	mov	r0, r3
 8009d02:	f004 fb5b 	bl	800e3bc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f004 fddb 	bl	800e8c6 <SDMMC_CmdStatusRegister>
 8009d10:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d12:	6a3b      	ldr	r3, [r7, #32]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d02b      	beq.n	8009d70 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009d20:	6a3b      	ldr	r3, [r7, #32]
 8009d22:	e069      	b.n	8009df8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d013      	beq.n	8009d5a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009d32:	2300      	movs	r3, #0
 8009d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d36:	e00d      	b.n	8009d54 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f004 fab5 	bl	800e2ac <SDMMC_ReadFIFO>
 8009d42:	4602      	mov	r2, r0
 8009d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d46:	601a      	str	r2, [r3, #0]
        pData++;
 8009d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d4a:	3304      	adds	r3, #4
 8009d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8009d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d50:	3301      	adds	r3, #1
 8009d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d56:	2b07      	cmp	r3, #7
 8009d58:	d9ee      	bls.n	8009d38 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d5a:	f7f9 fff5 	bl	8003d48 <HAL_GetTick>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d68:	d102      	bne.n	8009d70 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009d6a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009d6e:	e043      	b.n	8009df8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d76:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d0d2      	beq.n	8009d24 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d84:	f003 0308 	and.w	r3, r3, #8
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d001      	beq.n	8009d90 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009d8c:	2308      	movs	r3, #8
 8009d8e:	e033      	b.n	8009df8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d96:	f003 0302 	and.w	r3, r3, #2
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d001      	beq.n	8009da2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009d9e:	2302      	movs	r3, #2
 8009da0:	e02a      	b.n	8009df8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009da8:	f003 0320 	and.w	r3, r3, #32
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d017      	beq.n	8009de0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009db0:	2320      	movs	r3, #32
 8009db2:	e021      	b.n	8009df8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f004 fa77 	bl	800e2ac <SDMMC_ReadFIFO>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc2:	601a      	str	r2, [r3, #0]
    pData++;
 8009dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc6:	3304      	adds	r3, #4
 8009dc8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009dca:	f7f9 ffbd 	bl	8003d48 <HAL_GetTick>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009dd8:	d102      	bne.n	8009de0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009dda:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009dde:	e00b      	b.n	8009df8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009de6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1e2      	bne.n	8009db4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a03      	ldr	r2, [pc, #12]	@ (8009e00 <SD_SendSDStatus+0x19c>)
 8009df4:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3730      	adds	r7, #48	@ 0x30
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	18000f3a 	.word	0x18000f3a

08009e04 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d102      	bne.n	8009e1a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009e14:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009e18:	e018      	b.n	8009e4c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e22:	041b      	lsls	r3, r3, #16
 8009e24:	4619      	mov	r1, r3
 8009e26:	4610      	mov	r0, r2
 8009e28:	f004 fd2a 	bl	800e880 <SDMMC_CmdSendStatus>
 8009e2c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d001      	beq.n	8009e38 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	e009      	b.n	8009e4c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f004 faa9 	bl	800e396 <SDMMC_GetResponse>
 8009e44:	4602      	mov	r2, r0
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	60fb      	str	r3, [r7, #12]
 8009e60:	2300      	movs	r3, #0
 8009e62:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2100      	movs	r1, #0
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f004 fa93 	bl	800e396 <SDMMC_GetResponse>
 8009e70:	4603      	mov	r3, r0
 8009e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e7a:	d102      	bne.n	8009e82 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009e7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009e80:	e02f      	b.n	8009ee2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009e82:	f107 030c 	add.w	r3, r7, #12
 8009e86:	4619      	mov	r1, r3
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f879 	bl	8009f80 <SD_FindSCR>
 8009e8e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	e023      	b.n	8009ee2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d01c      	beq.n	8009ede <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eac:	041b      	lsls	r3, r3, #16
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	f004 fbfc 	bl	800e6ae <SDMMC_CmdAppCommand>
 8009eb6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d001      	beq.n	8009ec2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	e00f      	b.n	8009ee2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2102      	movs	r1, #2
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f004 fc33 	bl	800e734 <SDMMC_CmdBusWidth>
 8009ece:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	e003      	b.n	8009ee2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009eda:	2300      	movs	r3, #0
 8009edc:	e001      	b.n	8009ee2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009ede:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3718      	adds	r7, #24
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b086      	sub	sp, #24
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	60fb      	str	r3, [r7, #12]
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2100      	movs	r1, #0
 8009f00:	4618      	mov	r0, r3
 8009f02:	f004 fa48 	bl	800e396 <SDMMC_GetResponse>
 8009f06:	4603      	mov	r3, r0
 8009f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f10:	d102      	bne.n	8009f18 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009f12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009f16:	e02f      	b.n	8009f78 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009f18:	f107 030c 	add.w	r3, r7, #12
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f82e 	bl	8009f80 <SD_FindSCR>
 8009f24:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d001      	beq.n	8009f30 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	e023      	b.n	8009f78 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d01c      	beq.n	8009f74 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f42:	041b      	lsls	r3, r3, #16
 8009f44:	4619      	mov	r1, r3
 8009f46:	4610      	mov	r0, r2
 8009f48:	f004 fbb1 	bl	800e6ae <SDMMC_CmdAppCommand>
 8009f4c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d001      	beq.n	8009f58 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	e00f      	b.n	8009f78 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f004 fbe8 	bl	800e734 <SDMMC_CmdBusWidth>
 8009f64:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d001      	beq.n	8009f70 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	e003      	b.n	8009f78 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f70:	2300      	movs	r3, #0
 8009f72:	e001      	b.n	8009f78 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f74:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3718      	adds	r7, #24
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b08e      	sub	sp, #56	@ 0x38
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009f8a:	f7f9 fedd 	bl	8003d48 <HAL_GetTick>
 8009f8e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009f90:	2300      	movs	r3, #0
 8009f92:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009f94:	2300      	movs	r3, #0
 8009f96:	60bb      	str	r3, [r7, #8]
 8009f98:	2300      	movs	r3, #0
 8009f9a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2108      	movs	r1, #8
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f004 fa34 	bl	800e414 <SDMMC_CmdBlockLength>
 8009fac:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d001      	beq.n	8009fb8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb6:	e0ad      	b.n	800a114 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fc0:	041b      	lsls	r3, r3, #16
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	f004 fb72 	bl	800e6ae <SDMMC_CmdAppCommand>
 8009fca:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd4:	e09e      	b.n	800a114 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009fd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009fda:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009fdc:	2308      	movs	r3, #8
 8009fde:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009fe0:	2330      	movs	r3, #48	@ 0x30
 8009fe2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009fec:	2301      	movs	r3, #1
 8009fee:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f107 0210 	add.w	r2, r7, #16
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f004 f9de 	bl	800e3bc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4618      	mov	r0, r3
 800a006:	f004 fbb8 	bl	800e77a <SDMMC_CmdSendSCR>
 800a00a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d027      	beq.n	800a062 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a014:	e07e      	b.n	800a114 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a01c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a020:	2b00      	cmp	r3, #0
 800a022:	d113      	bne.n	800a04c <SD_FindSCR+0xcc>
 800a024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a026:	2b00      	cmp	r3, #0
 800a028:	d110      	bne.n	800a04c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4618      	mov	r0, r3
 800a030:	f004 f93c 	bl	800e2ac <SDMMC_ReadFIFO>
 800a034:	4603      	mov	r3, r0
 800a036:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4618      	mov	r0, r3
 800a03e:	f004 f935 	bl	800e2ac <SDMMC_ReadFIFO>
 800a042:	4603      	mov	r3, r0
 800a044:	60fb      	str	r3, [r7, #12]
      index++;
 800a046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a048:	3301      	adds	r3, #1
 800a04a:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a04c:	f7f9 fe7c 	bl	8003d48 <HAL_GetTick>
 800a050:	4602      	mov	r2, r0
 800a052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a05a:	d102      	bne.n	800a062 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a05c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a060:	e058      	b.n	800a114 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a068:	f240 532a 	movw	r3, #1322	@ 0x52a
 800a06c:	4013      	ands	r3, r2
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d0d1      	beq.n	800a016 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a078:	f003 0308 	and.w	r3, r3, #8
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d005      	beq.n	800a08c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2208      	movs	r2, #8
 800a086:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a088:	2308      	movs	r3, #8
 800a08a:	e043      	b.n	800a114 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a092:	f003 0302 	and.w	r3, r3, #2
 800a096:	2b00      	cmp	r3, #0
 800a098:	d005      	beq.n	800a0a6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2202      	movs	r2, #2
 800a0a0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	e036      	b.n	800a114 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0ac:	f003 0320 	and.w	r3, r3, #32
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d005      	beq.n	800a0c0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2220      	movs	r2, #32
 800a0ba:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a0bc:	2320      	movs	r3, #32
 800a0be:	e029      	b.n	800a114 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a15      	ldr	r2, [pc, #84]	@ (800a11c <SD_FindSCR+0x19c>)
 800a0c6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	061a      	lsls	r2, r3, #24
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	021b      	lsls	r3, r3, #8
 800a0d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a0d4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	0a1b      	lsrs	r3, r3, #8
 800a0da:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a0de:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	0e1b      	lsrs	r3, r3, #24
 800a0e4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e8:	601a      	str	r2, [r3, #0]
    scr++;
 800a0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ec:	3304      	adds	r3, #4
 800a0ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	061a      	lsls	r2, r3, #24
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	021b      	lsls	r3, r3, #8
 800a0f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a0fc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	0a1b      	lsrs	r3, r3, #8
 800a102:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a106:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	0e1b      	lsrs	r3, r3, #24
 800a10c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a10e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a110:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	3738      	adds	r7, #56	@ 0x38
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	18000f3a 	.word	0x18000f3a

0800a120 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a12c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a132:	2b1f      	cmp	r3, #31
 800a134:	d936      	bls.n	800a1a4 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800a136:	2300      	movs	r3, #0
 800a138:	617b      	str	r3, [r7, #20]
 800a13a:	e027      	b.n	800a18c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4618      	mov	r0, r3
 800a142:	f004 f8b3 	bl	800e2ac <SDMMC_ReadFIFO>
 800a146:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	3301      	adds	r3, #1
 800a154:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	0a1b      	lsrs	r3, r3, #8
 800a15a:	b2da      	uxtb	r2, r3
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	3301      	adds	r3, #1
 800a164:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	0c1b      	lsrs	r3, r3, #16
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	3301      	adds	r3, #1
 800a174:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	0e1b      	lsrs	r3, r3, #24
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	3301      	adds	r3, #1
 800a184:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	3301      	adds	r3, #1
 800a18a:	617b      	str	r3, [r7, #20]
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	2b07      	cmp	r3, #7
 800a190:	d9d4      	bls.n	800a13c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a19c:	f1a3 0220 	sub.w	r2, r3, #32
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800a1a4:	bf00      	nop
 800a1a6:	3718      	adds	r7, #24
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b086      	sub	sp, #24
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	69db      	ldr	r3, [r3, #28]
 800a1b8:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a1b      	ldr	r3, [r3, #32]
 800a1be:	2b1f      	cmp	r3, #31
 800a1c0:	d93a      	bls.n	800a238 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	617b      	str	r3, [r7, #20]
 800a1c6:	e02b      	b.n	800a220 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	021a      	lsls	r2, r3, #8
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	041a      	lsls	r2, r3, #16
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	061a      	lsls	r2, r3, #24
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	4313      	orrs	r3, r2
 800a202:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	3301      	adds	r3, #1
 800a208:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f107 020c 	add.w	r2, r7, #12
 800a212:	4611      	mov	r1, r2
 800a214:	4618      	mov	r0, r3
 800a216:	f004 f856 	bl	800e2c6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	3301      	adds	r3, #1
 800a21e:	617b      	str	r3, [r7, #20]
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	2b07      	cmp	r3, #7
 800a224:	d9d0      	bls.n	800a1c8 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	693a      	ldr	r2, [r7, #16]
 800a22a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6a1b      	ldr	r3, [r3, #32]
 800a230:	f1a3 0220 	sub.w	r2, r3, #32
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	621a      	str	r2, [r3, #32]
  }
}
 800a238:	bf00      	nop
 800a23a:	3718      	adds	r7, #24
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a248:	bf00      	nop
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a284:	bf00      	nop
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d101      	bne.n	800a2a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e049      	b.n	800a336 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d106      	bne.n	800a2bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 f841 	bl	800a33e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2202      	movs	r2, #2
 800a2c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	3304      	adds	r3, #4
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	4610      	mov	r0, r2
 800a2d0:	f000 fad0 	bl	800a874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a33e:	b480      	push	{r7}
 800a340:	b083      	sub	sp, #12
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a346:	bf00      	nop
 800a348:	370c      	adds	r7, #12
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr
	...

0800a354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b01      	cmp	r3, #1
 800a366:	d001      	beq.n	800a36c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	e054      	b.n	800a416 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2202      	movs	r2, #2
 800a370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68da      	ldr	r2, [r3, #12]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f042 0201 	orr.w	r2, r2, #1
 800a382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a26      	ldr	r2, [pc, #152]	@ (800a424 <HAL_TIM_Base_Start_IT+0xd0>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d022      	beq.n	800a3d4 <HAL_TIM_Base_Start_IT+0x80>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a396:	d01d      	beq.n	800a3d4 <HAL_TIM_Base_Start_IT+0x80>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a22      	ldr	r2, [pc, #136]	@ (800a428 <HAL_TIM_Base_Start_IT+0xd4>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d018      	beq.n	800a3d4 <HAL_TIM_Base_Start_IT+0x80>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a21      	ldr	r2, [pc, #132]	@ (800a42c <HAL_TIM_Base_Start_IT+0xd8>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d013      	beq.n	800a3d4 <HAL_TIM_Base_Start_IT+0x80>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a1f      	ldr	r2, [pc, #124]	@ (800a430 <HAL_TIM_Base_Start_IT+0xdc>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d00e      	beq.n	800a3d4 <HAL_TIM_Base_Start_IT+0x80>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a1e      	ldr	r2, [pc, #120]	@ (800a434 <HAL_TIM_Base_Start_IT+0xe0>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d009      	beq.n	800a3d4 <HAL_TIM_Base_Start_IT+0x80>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a1c      	ldr	r2, [pc, #112]	@ (800a438 <HAL_TIM_Base_Start_IT+0xe4>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d004      	beq.n	800a3d4 <HAL_TIM_Base_Start_IT+0x80>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a1b      	ldr	r2, [pc, #108]	@ (800a43c <HAL_TIM_Base_Start_IT+0xe8>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d115      	bne.n	800a400 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	689a      	ldr	r2, [r3, #8]
 800a3da:	4b19      	ldr	r3, [pc, #100]	@ (800a440 <HAL_TIM_Base_Start_IT+0xec>)
 800a3dc:	4013      	ands	r3, r2
 800a3de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2b06      	cmp	r3, #6
 800a3e4:	d015      	beq.n	800a412 <HAL_TIM_Base_Start_IT+0xbe>
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3ec:	d011      	beq.n	800a412 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f042 0201 	orr.w	r2, r2, #1
 800a3fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3fe:	e008      	b.n	800a412 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f042 0201 	orr.w	r2, r2, #1
 800a40e:	601a      	str	r2, [r3, #0]
 800a410:	e000      	b.n	800a414 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a412:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	3714      	adds	r7, #20
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	40010000 	.word	0x40010000
 800a428:	40000400 	.word	0x40000400
 800a42c:	40000800 	.word	0x40000800
 800a430:	40000c00 	.word	0x40000c00
 800a434:	40010400 	.word	0x40010400
 800a438:	40001800 	.word	0x40001800
 800a43c:	40014000 	.word	0x40014000
 800a440:	00010007 	.word	0x00010007

0800a444 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d101      	bne.n	800a456 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	e049      	b.n	800a4ea <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d106      	bne.n	800a470 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7f7 f82a 	bl	80014c4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2202      	movs	r2, #2
 800a474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	3304      	adds	r3, #4
 800a480:	4619      	mov	r1, r3
 800a482:	4610      	mov	r0, r2
 800a484:	f000 f9f6 	bl	800a874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3708      	adds	r7, #8
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b082      	sub	sp, #8
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	f003 0302 	and.w	r3, r3, #2
 800a504:	2b02      	cmp	r3, #2
 800a506:	d122      	bne.n	800a54e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	f003 0302 	and.w	r3, r3, #2
 800a512:	2b02      	cmp	r3, #2
 800a514:	d11b      	bne.n	800a54e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f06f 0202 	mvn.w	r2, #2
 800a51e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	699b      	ldr	r3, [r3, #24]
 800a52c:	f003 0303 	and.w	r3, r3, #3
 800a530:	2b00      	cmp	r3, #0
 800a532:	d003      	beq.n	800a53c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 f97f 	bl	800a838 <HAL_TIM_IC_CaptureCallback>
 800a53a:	e005      	b.n	800a548 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f971 	bl	800a824 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 f982 	bl	800a84c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	691b      	ldr	r3, [r3, #16]
 800a554:	f003 0304 	and.w	r3, r3, #4
 800a558:	2b04      	cmp	r3, #4
 800a55a:	d122      	bne.n	800a5a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	f003 0304 	and.w	r3, r3, #4
 800a566:	2b04      	cmp	r3, #4
 800a568:	d11b      	bne.n	800a5a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f06f 0204 	mvn.w	r2, #4
 800a572:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2202      	movs	r2, #2
 800a578:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	699b      	ldr	r3, [r3, #24]
 800a580:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a584:	2b00      	cmp	r3, #0
 800a586:	d003      	beq.n	800a590 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 f955 	bl	800a838 <HAL_TIM_IC_CaptureCallback>
 800a58e:	e005      	b.n	800a59c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 f947 	bl	800a824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 f958 	bl	800a84c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	f003 0308 	and.w	r3, r3, #8
 800a5ac:	2b08      	cmp	r3, #8
 800a5ae:	d122      	bne.n	800a5f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	f003 0308 	and.w	r3, r3, #8
 800a5ba:	2b08      	cmp	r3, #8
 800a5bc:	d11b      	bne.n	800a5f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f06f 0208 	mvn.w	r2, #8
 800a5c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2204      	movs	r2, #4
 800a5cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	69db      	ldr	r3, [r3, #28]
 800a5d4:	f003 0303 	and.w	r3, r3, #3
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d003      	beq.n	800a5e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 f92b 	bl	800a838 <HAL_TIM_IC_CaptureCallback>
 800a5e2:	e005      	b.n	800a5f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 f91d 	bl	800a824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 f92e 	bl	800a84c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	691b      	ldr	r3, [r3, #16]
 800a5fc:	f003 0310 	and.w	r3, r3, #16
 800a600:	2b10      	cmp	r3, #16
 800a602:	d122      	bne.n	800a64a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	f003 0310 	and.w	r3, r3, #16
 800a60e:	2b10      	cmp	r3, #16
 800a610:	d11b      	bne.n	800a64a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f06f 0210 	mvn.w	r2, #16
 800a61a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2208      	movs	r2, #8
 800a620:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	69db      	ldr	r3, [r3, #28]
 800a628:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d003      	beq.n	800a638 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 f901 	bl	800a838 <HAL_TIM_IC_CaptureCallback>
 800a636:	e005      	b.n	800a644 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 f8f3 	bl	800a824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f904 	bl	800a84c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	f003 0301 	and.w	r3, r3, #1
 800a654:	2b01      	cmp	r3, #1
 800a656:	d10e      	bne.n	800a676 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	f003 0301 	and.w	r3, r3, #1
 800a662:	2b01      	cmp	r3, #1
 800a664:	d107      	bne.n	800a676 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f06f 0201 	mvn.w	r2, #1
 800a66e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7f6 fd4b 	bl	800110c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a680:	2b80      	cmp	r3, #128	@ 0x80
 800a682:	d10e      	bne.n	800a6a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a68e:	2b80      	cmp	r3, #128	@ 0x80
 800a690:	d107      	bne.n	800a6a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a69a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 fcf1 	bl	800b084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6b0:	d10e      	bne.n	800a6d0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6bc:	2b80      	cmp	r3, #128	@ 0x80
 800a6be:	d107      	bne.n	800a6d0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a6c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 fce4 	bl	800b098 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	691b      	ldr	r3, [r3, #16]
 800a6d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6da:	2b40      	cmp	r3, #64	@ 0x40
 800a6dc:	d10e      	bne.n	800a6fc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6e8:	2b40      	cmp	r3, #64	@ 0x40
 800a6ea:	d107      	bne.n	800a6fc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a6f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 f8b2 	bl	800a860 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	691b      	ldr	r3, [r3, #16]
 800a702:	f003 0320 	and.w	r3, r3, #32
 800a706:	2b20      	cmp	r3, #32
 800a708:	d10e      	bne.n	800a728 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	f003 0320 	and.w	r3, r3, #32
 800a714:	2b20      	cmp	r3, #32
 800a716:	d107      	bne.n	800a728 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f06f 0220 	mvn.w	r2, #32
 800a720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 fca4 	bl	800b070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a728:	bf00      	nop
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a746:	2b01      	cmp	r3, #1
 800a748:	d101      	bne.n	800a74e <HAL_TIM_OC_ConfigChannel+0x1e>
 800a74a:	2302      	movs	r3, #2
 800a74c:	e066      	b.n	800a81c <HAL_TIM_OC_ConfigChannel+0xec>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2201      	movs	r2, #1
 800a752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2b14      	cmp	r3, #20
 800a75a:	d857      	bhi.n	800a80c <HAL_TIM_OC_ConfigChannel+0xdc>
 800a75c:	a201      	add	r2, pc, #4	@ (adr r2, 800a764 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a762:	bf00      	nop
 800a764:	0800a7b9 	.word	0x0800a7b9
 800a768:	0800a80d 	.word	0x0800a80d
 800a76c:	0800a80d 	.word	0x0800a80d
 800a770:	0800a80d 	.word	0x0800a80d
 800a774:	0800a7c7 	.word	0x0800a7c7
 800a778:	0800a80d 	.word	0x0800a80d
 800a77c:	0800a80d 	.word	0x0800a80d
 800a780:	0800a80d 	.word	0x0800a80d
 800a784:	0800a7d5 	.word	0x0800a7d5
 800a788:	0800a80d 	.word	0x0800a80d
 800a78c:	0800a80d 	.word	0x0800a80d
 800a790:	0800a80d 	.word	0x0800a80d
 800a794:	0800a7e3 	.word	0x0800a7e3
 800a798:	0800a80d 	.word	0x0800a80d
 800a79c:	0800a80d 	.word	0x0800a80d
 800a7a0:	0800a80d 	.word	0x0800a80d
 800a7a4:	0800a7f1 	.word	0x0800a7f1
 800a7a8:	0800a80d 	.word	0x0800a80d
 800a7ac:	0800a80d 	.word	0x0800a80d
 800a7b0:	0800a80d 	.word	0x0800a80d
 800a7b4:	0800a7ff 	.word	0x0800a7ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68b9      	ldr	r1, [r7, #8]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 f8f2 	bl	800a9a8 <TIM_OC1_SetConfig>
      break;
 800a7c4:	e025      	b.n	800a812 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	68b9      	ldr	r1, [r7, #8]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 f97b 	bl	800aac8 <TIM_OC2_SetConfig>
      break;
 800a7d2:	e01e      	b.n	800a812 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68b9      	ldr	r1, [r7, #8]
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f000 f9fe 	bl	800abdc <TIM_OC3_SetConfig>
      break;
 800a7e0:	e017      	b.n	800a812 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68b9      	ldr	r1, [r7, #8]
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f000 fa7f 	bl	800acec <TIM_OC4_SetConfig>
      break;
 800a7ee:	e010      	b.n	800a812 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	68b9      	ldr	r1, [r7, #8]
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f000 fae2 	bl	800adc0 <TIM_OC5_SetConfig>
      break;
 800a7fc:	e009      	b.n	800a812 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68b9      	ldr	r1, [r7, #8]
 800a804:	4618      	mov	r0, r3
 800a806:	f000 fb3f 	bl	800ae88 <TIM_OC6_SetConfig>
      break;
 800a80a:	e002      	b.n	800a812 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	75fb      	strb	r3, [r7, #23]
      break;
 800a810:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2200      	movs	r2, #0
 800a816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a81a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3718      	adds	r7, #24
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a854:	bf00      	nop
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	4a40      	ldr	r2, [pc, #256]	@ (800a988 <TIM_Base_SetConfig+0x114>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d013      	beq.n	800a8b4 <TIM_Base_SetConfig+0x40>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a892:	d00f      	beq.n	800a8b4 <TIM_Base_SetConfig+0x40>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	4a3d      	ldr	r2, [pc, #244]	@ (800a98c <TIM_Base_SetConfig+0x118>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d00b      	beq.n	800a8b4 <TIM_Base_SetConfig+0x40>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4a3c      	ldr	r2, [pc, #240]	@ (800a990 <TIM_Base_SetConfig+0x11c>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d007      	beq.n	800a8b4 <TIM_Base_SetConfig+0x40>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a3b      	ldr	r2, [pc, #236]	@ (800a994 <TIM_Base_SetConfig+0x120>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d003      	beq.n	800a8b4 <TIM_Base_SetConfig+0x40>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	4a3a      	ldr	r2, [pc, #232]	@ (800a998 <TIM_Base_SetConfig+0x124>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d108      	bne.n	800a8c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a2f      	ldr	r2, [pc, #188]	@ (800a988 <TIM_Base_SetConfig+0x114>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d01f      	beq.n	800a90e <TIM_Base_SetConfig+0x9a>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8d4:	d01b      	beq.n	800a90e <TIM_Base_SetConfig+0x9a>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4a2c      	ldr	r2, [pc, #176]	@ (800a98c <TIM_Base_SetConfig+0x118>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d017      	beq.n	800a90e <TIM_Base_SetConfig+0x9a>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4a2b      	ldr	r2, [pc, #172]	@ (800a990 <TIM_Base_SetConfig+0x11c>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d013      	beq.n	800a90e <TIM_Base_SetConfig+0x9a>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4a2a      	ldr	r2, [pc, #168]	@ (800a994 <TIM_Base_SetConfig+0x120>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d00f      	beq.n	800a90e <TIM_Base_SetConfig+0x9a>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4a29      	ldr	r2, [pc, #164]	@ (800a998 <TIM_Base_SetConfig+0x124>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d00b      	beq.n	800a90e <TIM_Base_SetConfig+0x9a>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a28      	ldr	r2, [pc, #160]	@ (800a99c <TIM_Base_SetConfig+0x128>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d007      	beq.n	800a90e <TIM_Base_SetConfig+0x9a>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a27      	ldr	r2, [pc, #156]	@ (800a9a0 <TIM_Base_SetConfig+0x12c>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d003      	beq.n	800a90e <TIM_Base_SetConfig+0x9a>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a26      	ldr	r2, [pc, #152]	@ (800a9a4 <TIM_Base_SetConfig+0x130>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d108      	bne.n	800a920 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	4313      	orrs	r3, r2
 800a91e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	695b      	ldr	r3, [r3, #20]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	689a      	ldr	r2, [r3, #8]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4a10      	ldr	r2, [pc, #64]	@ (800a988 <TIM_Base_SetConfig+0x114>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d00f      	beq.n	800a96c <TIM_Base_SetConfig+0xf8>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4a12      	ldr	r2, [pc, #72]	@ (800a998 <TIM_Base_SetConfig+0x124>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d00b      	beq.n	800a96c <TIM_Base_SetConfig+0xf8>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	4a11      	ldr	r2, [pc, #68]	@ (800a99c <TIM_Base_SetConfig+0x128>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d007      	beq.n	800a96c <TIM_Base_SetConfig+0xf8>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4a10      	ldr	r2, [pc, #64]	@ (800a9a0 <TIM_Base_SetConfig+0x12c>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d003      	beq.n	800a96c <TIM_Base_SetConfig+0xf8>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a0f      	ldr	r2, [pc, #60]	@ (800a9a4 <TIM_Base_SetConfig+0x130>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d103      	bne.n	800a974 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	691a      	ldr	r2, [r3, #16]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2201      	movs	r2, #1
 800a978:	615a      	str	r2, [r3, #20]
}
 800a97a:	bf00      	nop
 800a97c:	3714      	adds	r7, #20
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	40010000 	.word	0x40010000
 800a98c:	40000400 	.word	0x40000400
 800a990:	40000800 	.word	0x40000800
 800a994:	40000c00 	.word	0x40000c00
 800a998:	40010400 	.word	0x40010400
 800a99c:	40014000 	.word	0x40014000
 800a9a0:	40014400 	.word	0x40014400
 800a9a4:	40014800 	.word	0x40014800

0800a9a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b087      	sub	sp, #28
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a1b      	ldr	r3, [r3, #32]
 800a9b6:	f023 0201 	bic.w	r2, r3, #1
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
 800a9c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	699b      	ldr	r3, [r3, #24]
 800a9ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	4b37      	ldr	r3, [pc, #220]	@ (800aab0 <TIM_OC1_SetConfig+0x108>)
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f023 0303 	bic.w	r3, r3, #3
 800a9de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	f023 0302 	bic.w	r3, r3, #2
 800a9f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	689b      	ldr	r3, [r3, #8]
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a2d      	ldr	r2, [pc, #180]	@ (800aab4 <TIM_OC1_SetConfig+0x10c>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d00f      	beq.n	800aa24 <TIM_OC1_SetConfig+0x7c>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a2c      	ldr	r2, [pc, #176]	@ (800aab8 <TIM_OC1_SetConfig+0x110>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d00b      	beq.n	800aa24 <TIM_OC1_SetConfig+0x7c>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a2b      	ldr	r2, [pc, #172]	@ (800aabc <TIM_OC1_SetConfig+0x114>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d007      	beq.n	800aa24 <TIM_OC1_SetConfig+0x7c>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a2a      	ldr	r2, [pc, #168]	@ (800aac0 <TIM_OC1_SetConfig+0x118>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d003      	beq.n	800aa24 <TIM_OC1_SetConfig+0x7c>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4a29      	ldr	r2, [pc, #164]	@ (800aac4 <TIM_OC1_SetConfig+0x11c>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d10c      	bne.n	800aa3e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	f023 0308 	bic.w	r3, r3, #8
 800aa2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	697a      	ldr	r2, [r7, #20]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	f023 0304 	bic.w	r3, r3, #4
 800aa3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a1c      	ldr	r2, [pc, #112]	@ (800aab4 <TIM_OC1_SetConfig+0x10c>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d00f      	beq.n	800aa66 <TIM_OC1_SetConfig+0xbe>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a1b      	ldr	r2, [pc, #108]	@ (800aab8 <TIM_OC1_SetConfig+0x110>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d00b      	beq.n	800aa66 <TIM_OC1_SetConfig+0xbe>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a1a      	ldr	r2, [pc, #104]	@ (800aabc <TIM_OC1_SetConfig+0x114>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d007      	beq.n	800aa66 <TIM_OC1_SetConfig+0xbe>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a19      	ldr	r2, [pc, #100]	@ (800aac0 <TIM_OC1_SetConfig+0x118>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d003      	beq.n	800aa66 <TIM_OC1_SetConfig+0xbe>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a18      	ldr	r2, [pc, #96]	@ (800aac4 <TIM_OC1_SetConfig+0x11c>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d111      	bne.n	800aa8a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aa74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	695b      	ldr	r3, [r3, #20]
 800aa7a:	693a      	ldr	r2, [r7, #16]
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	699b      	ldr	r3, [r3, #24]
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	693a      	ldr	r2, [r7, #16]
 800aa8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	685a      	ldr	r2, [r3, #4]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	697a      	ldr	r2, [r7, #20]
 800aaa2:	621a      	str	r2, [r3, #32]
}
 800aaa4:	bf00      	nop
 800aaa6:	371c      	adds	r7, #28
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr
 800aab0:	fffeff8f 	.word	0xfffeff8f
 800aab4:	40010000 	.word	0x40010000
 800aab8:	40010400 	.word	0x40010400
 800aabc:	40014000 	.word	0x40014000
 800aac0:	40014400 	.word	0x40014400
 800aac4:	40014800 	.word	0x40014800

0800aac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b087      	sub	sp, #28
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	f023 0210 	bic.w	r2, r3, #16
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	699b      	ldr	r3, [r3, #24]
 800aaee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	4b34      	ldr	r3, [pc, #208]	@ (800abc4 <TIM_OC2_SetConfig+0xfc>)
 800aaf4:	4013      	ands	r3, r2
 800aaf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aafe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	021b      	lsls	r3, r3, #8
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	f023 0320 	bic.w	r3, r3, #32
 800ab12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	011b      	lsls	r3, r3, #4
 800ab1a:	697a      	ldr	r2, [r7, #20]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a29      	ldr	r2, [pc, #164]	@ (800abc8 <TIM_OC2_SetConfig+0x100>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d003      	beq.n	800ab30 <TIM_OC2_SetConfig+0x68>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a28      	ldr	r2, [pc, #160]	@ (800abcc <TIM_OC2_SetConfig+0x104>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d10d      	bne.n	800ab4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	011b      	lsls	r3, r3, #4
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	4313      	orrs	r3, r2
 800ab42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a1e      	ldr	r2, [pc, #120]	@ (800abc8 <TIM_OC2_SetConfig+0x100>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d00f      	beq.n	800ab74 <TIM_OC2_SetConfig+0xac>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a1d      	ldr	r2, [pc, #116]	@ (800abcc <TIM_OC2_SetConfig+0x104>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d00b      	beq.n	800ab74 <TIM_OC2_SetConfig+0xac>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a1c      	ldr	r2, [pc, #112]	@ (800abd0 <TIM_OC2_SetConfig+0x108>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d007      	beq.n	800ab74 <TIM_OC2_SetConfig+0xac>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a1b      	ldr	r2, [pc, #108]	@ (800abd4 <TIM_OC2_SetConfig+0x10c>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d003      	beq.n	800ab74 <TIM_OC2_SetConfig+0xac>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a1a      	ldr	r2, [pc, #104]	@ (800abd8 <TIM_OC2_SetConfig+0x110>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d113      	bne.n	800ab9c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ab7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ab82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	695b      	ldr	r3, [r3, #20]
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	693a      	ldr	r2, [r7, #16]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	693a      	ldr	r2, [r7, #16]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	693a      	ldr	r2, [r7, #16]
 800aba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	685a      	ldr	r2, [r3, #4]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	697a      	ldr	r2, [r7, #20]
 800abb4:	621a      	str	r2, [r3, #32]
}
 800abb6:	bf00      	nop
 800abb8:	371c      	adds	r7, #28
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	feff8fff 	.word	0xfeff8fff
 800abc8:	40010000 	.word	0x40010000
 800abcc:	40010400 	.word	0x40010400
 800abd0:	40014000 	.word	0x40014000
 800abd4:	40014400 	.word	0x40014400
 800abd8:	40014800 	.word	0x40014800

0800abdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abdc:	b480      	push	{r7}
 800abde:	b087      	sub	sp, #28
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a1b      	ldr	r3, [r3, #32]
 800abea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a1b      	ldr	r3, [r3, #32]
 800abf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	69db      	ldr	r3, [r3, #28]
 800ac02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	4b33      	ldr	r3, [pc, #204]	@ (800acd4 <TIM_OC3_SetConfig+0xf8>)
 800ac08:	4013      	ands	r3, r2
 800ac0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f023 0303 	bic.w	r3, r3, #3
 800ac12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ac24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	021b      	lsls	r3, r3, #8
 800ac2c:	697a      	ldr	r2, [r7, #20]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a28      	ldr	r2, [pc, #160]	@ (800acd8 <TIM_OC3_SetConfig+0xfc>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d003      	beq.n	800ac42 <TIM_OC3_SetConfig+0x66>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4a27      	ldr	r2, [pc, #156]	@ (800acdc <TIM_OC3_SetConfig+0x100>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d10d      	bne.n	800ac5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ac48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	68db      	ldr	r3, [r3, #12]
 800ac4e:	021b      	lsls	r3, r3, #8
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	4313      	orrs	r3, r2
 800ac54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ac5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a1d      	ldr	r2, [pc, #116]	@ (800acd8 <TIM_OC3_SetConfig+0xfc>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d00f      	beq.n	800ac86 <TIM_OC3_SetConfig+0xaa>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4a1c      	ldr	r2, [pc, #112]	@ (800acdc <TIM_OC3_SetConfig+0x100>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d00b      	beq.n	800ac86 <TIM_OC3_SetConfig+0xaa>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	4a1b      	ldr	r2, [pc, #108]	@ (800ace0 <TIM_OC3_SetConfig+0x104>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d007      	beq.n	800ac86 <TIM_OC3_SetConfig+0xaa>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4a1a      	ldr	r2, [pc, #104]	@ (800ace4 <TIM_OC3_SetConfig+0x108>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d003      	beq.n	800ac86 <TIM_OC3_SetConfig+0xaa>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4a19      	ldr	r2, [pc, #100]	@ (800ace8 <TIM_OC3_SetConfig+0x10c>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d113      	bne.n	800acae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ac94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	695b      	ldr	r3, [r3, #20]
 800ac9a:	011b      	lsls	r3, r3, #4
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	011b      	lsls	r3, r3, #4
 800aca8:	693a      	ldr	r2, [r7, #16]
 800acaa:	4313      	orrs	r3, r2
 800acac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	693a      	ldr	r2, [r7, #16]
 800acb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	685a      	ldr	r2, [r3, #4]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	697a      	ldr	r2, [r7, #20]
 800acc6:	621a      	str	r2, [r3, #32]
}
 800acc8:	bf00      	nop
 800acca:	371c      	adds	r7, #28
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr
 800acd4:	fffeff8f 	.word	0xfffeff8f
 800acd8:	40010000 	.word	0x40010000
 800acdc:	40010400 	.word	0x40010400
 800ace0:	40014000 	.word	0x40014000
 800ace4:	40014400 	.word	0x40014400
 800ace8:	40014800 	.word	0x40014800

0800acec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800acec:	b480      	push	{r7}
 800acee:	b087      	sub	sp, #28
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a1b      	ldr	r3, [r3, #32]
 800acfa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6a1b      	ldr	r3, [r3, #32]
 800ad06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	69db      	ldr	r3, [r3, #28]
 800ad12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	4b24      	ldr	r3, [pc, #144]	@ (800ada8 <TIM_OC4_SetConfig+0xbc>)
 800ad18:	4013      	ands	r3, r2
 800ad1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	021b      	lsls	r3, r3, #8
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ad36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	031b      	lsls	r3, r3, #12
 800ad3e:	693a      	ldr	r2, [r7, #16]
 800ad40:	4313      	orrs	r3, r2
 800ad42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a19      	ldr	r2, [pc, #100]	@ (800adac <TIM_OC4_SetConfig+0xc0>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d00f      	beq.n	800ad6c <TIM_OC4_SetConfig+0x80>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a18      	ldr	r2, [pc, #96]	@ (800adb0 <TIM_OC4_SetConfig+0xc4>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d00b      	beq.n	800ad6c <TIM_OC4_SetConfig+0x80>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a17      	ldr	r2, [pc, #92]	@ (800adb4 <TIM_OC4_SetConfig+0xc8>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d007      	beq.n	800ad6c <TIM_OC4_SetConfig+0x80>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4a16      	ldr	r2, [pc, #88]	@ (800adb8 <TIM_OC4_SetConfig+0xcc>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d003      	beq.n	800ad6c <TIM_OC4_SetConfig+0x80>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4a15      	ldr	r2, [pc, #84]	@ (800adbc <TIM_OC4_SetConfig+0xd0>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d109      	bne.n	800ad80 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	695b      	ldr	r3, [r3, #20]
 800ad78:	019b      	lsls	r3, r3, #6
 800ad7a:	697a      	ldr	r2, [r7, #20]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	685a      	ldr	r2, [r3, #4]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	621a      	str	r2, [r3, #32]
}
 800ad9a:	bf00      	nop
 800ad9c:	371c      	adds	r7, #28
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	feff8fff 	.word	0xfeff8fff
 800adac:	40010000 	.word	0x40010000
 800adb0:	40010400 	.word	0x40010400
 800adb4:	40014000 	.word	0x40014000
 800adb8:	40014400 	.word	0x40014400
 800adbc:	40014800 	.word	0x40014800

0800adc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b087      	sub	sp, #28
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a1b      	ldr	r3, [r3, #32]
 800adce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6a1b      	ldr	r3, [r3, #32]
 800adda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ade6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	4b21      	ldr	r3, [pc, #132]	@ (800ae70 <TIM_OC5_SetConfig+0xb0>)
 800adec:	4013      	ands	r3, r2
 800adee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ae00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	041b      	lsls	r3, r3, #16
 800ae08:	693a      	ldr	r2, [r7, #16]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a18      	ldr	r2, [pc, #96]	@ (800ae74 <TIM_OC5_SetConfig+0xb4>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d00f      	beq.n	800ae36 <TIM_OC5_SetConfig+0x76>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4a17      	ldr	r2, [pc, #92]	@ (800ae78 <TIM_OC5_SetConfig+0xb8>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d00b      	beq.n	800ae36 <TIM_OC5_SetConfig+0x76>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4a16      	ldr	r2, [pc, #88]	@ (800ae7c <TIM_OC5_SetConfig+0xbc>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d007      	beq.n	800ae36 <TIM_OC5_SetConfig+0x76>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a15      	ldr	r2, [pc, #84]	@ (800ae80 <TIM_OC5_SetConfig+0xc0>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d003      	beq.n	800ae36 <TIM_OC5_SetConfig+0x76>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4a14      	ldr	r2, [pc, #80]	@ (800ae84 <TIM_OC5_SetConfig+0xc4>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d109      	bne.n	800ae4a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	695b      	ldr	r3, [r3, #20]
 800ae42:	021b      	lsls	r3, r3, #8
 800ae44:	697a      	ldr	r2, [r7, #20]
 800ae46:	4313      	orrs	r3, r2
 800ae48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	697a      	ldr	r2, [r7, #20]
 800ae4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	68fa      	ldr	r2, [r7, #12]
 800ae54:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	685a      	ldr	r2, [r3, #4]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	693a      	ldr	r2, [r7, #16]
 800ae62:	621a      	str	r2, [r3, #32]
}
 800ae64:	bf00      	nop
 800ae66:	371c      	adds	r7, #28
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	fffeff8f 	.word	0xfffeff8f
 800ae74:	40010000 	.word	0x40010000
 800ae78:	40010400 	.word	0x40010400
 800ae7c:	40014000 	.word	0x40014000
 800ae80:	40014400 	.word	0x40014400
 800ae84:	40014800 	.word	0x40014800

0800ae88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b087      	sub	sp, #28
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a1b      	ldr	r3, [r3, #32]
 800ae96:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a1b      	ldr	r3, [r3, #32]
 800aea2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aeb0:	68fa      	ldr	r2, [r7, #12]
 800aeb2:	4b22      	ldr	r3, [pc, #136]	@ (800af3c <TIM_OC6_SetConfig+0xb4>)
 800aeb4:	4013      	ands	r3, r2
 800aeb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	021b      	lsls	r3, r3, #8
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aeca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	051b      	lsls	r3, r3, #20
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	4313      	orrs	r3, r2
 800aed6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4a19      	ldr	r2, [pc, #100]	@ (800af40 <TIM_OC6_SetConfig+0xb8>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d00f      	beq.n	800af00 <TIM_OC6_SetConfig+0x78>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4a18      	ldr	r2, [pc, #96]	@ (800af44 <TIM_OC6_SetConfig+0xbc>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d00b      	beq.n	800af00 <TIM_OC6_SetConfig+0x78>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	4a17      	ldr	r2, [pc, #92]	@ (800af48 <TIM_OC6_SetConfig+0xc0>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d007      	beq.n	800af00 <TIM_OC6_SetConfig+0x78>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4a16      	ldr	r2, [pc, #88]	@ (800af4c <TIM_OC6_SetConfig+0xc4>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d003      	beq.n	800af00 <TIM_OC6_SetConfig+0x78>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	4a15      	ldr	r2, [pc, #84]	@ (800af50 <TIM_OC6_SetConfig+0xc8>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d109      	bne.n	800af14 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800af06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	695b      	ldr	r3, [r3, #20]
 800af0c:	029b      	lsls	r3, r3, #10
 800af0e:	697a      	ldr	r2, [r7, #20]
 800af10:	4313      	orrs	r3, r2
 800af12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	697a      	ldr	r2, [r7, #20]
 800af18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	68fa      	ldr	r2, [r7, #12]
 800af1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	685a      	ldr	r2, [r3, #4]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	693a      	ldr	r2, [r7, #16]
 800af2c:	621a      	str	r2, [r3, #32]
}
 800af2e:	bf00      	nop
 800af30:	371c      	adds	r7, #28
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop
 800af3c:	feff8fff 	.word	0xfeff8fff
 800af40:	40010000 	.word	0x40010000
 800af44:	40010400 	.word	0x40010400
 800af48:	40014000 	.word	0x40014000
 800af4c:	40014400 	.word	0x40014400
 800af50:	40014800 	.word	0x40014800

0800af54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af64:	2b01      	cmp	r3, #1
 800af66:	d101      	bne.n	800af6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af68:	2302      	movs	r3, #2
 800af6a:	e06d      	b.n	800b048 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2201      	movs	r2, #1
 800af70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2202      	movs	r2, #2
 800af78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a30      	ldr	r2, [pc, #192]	@ (800b054 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d004      	beq.n	800afa0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a2f      	ldr	r2, [pc, #188]	@ (800b058 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d108      	bne.n	800afb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800afa6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	4313      	orrs	r3, r2
 800afb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	4313      	orrs	r3, r2
 800afc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a20      	ldr	r2, [pc, #128]	@ (800b054 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d022      	beq.n	800b01c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afde:	d01d      	beq.n	800b01c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4a1d      	ldr	r2, [pc, #116]	@ (800b05c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d018      	beq.n	800b01c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4a1c      	ldr	r2, [pc, #112]	@ (800b060 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d013      	beq.n	800b01c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a1a      	ldr	r2, [pc, #104]	@ (800b064 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d00e      	beq.n	800b01c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a15      	ldr	r2, [pc, #84]	@ (800b058 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d009      	beq.n	800b01c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a16      	ldr	r2, [pc, #88]	@ (800b068 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d004      	beq.n	800b01c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a15      	ldr	r2, [pc, #84]	@ (800b06c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d10c      	bne.n	800b036 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b022:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	68ba      	ldr	r2, [r7, #8]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	68ba      	ldr	r2, [r7, #8]
 800b034:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2201      	movs	r2, #1
 800b03a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3714      	adds	r7, #20
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr
 800b054:	40010000 	.word	0x40010000
 800b058:	40010400 	.word	0x40010400
 800b05c:	40000400 	.word	0x40000400
 800b060:	40000800 	.word	0x40000800
 800b064:	40000c00 	.word	0x40000c00
 800b068:	40001800 	.word	0x40001800
 800b06c:	40014000 	.word	0x40014000

0800b070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b078:	bf00      	nop
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d101      	bne.n	800b0be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e042      	b.n	800b144 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d106      	bne.n	800b0d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f7f6 fa1f 	bl	8001514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2224      	movs	r2, #36	@ 0x24
 800b0da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f022 0201 	bic.w	r2, r2, #1
 800b0ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 ffc8 	bl	800c084 <UART_SetConfig>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d101      	bne.n	800b0fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e022      	b.n	800b144 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b102:	2b00      	cmp	r3, #0
 800b104:	d002      	beq.n	800b10c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f001 fd24 	bl	800cb54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	685a      	ldr	r2, [r3, #4]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b11a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	689a      	ldr	r2, [r3, #8]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b12a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f042 0201 	orr.w	r2, r2, #1
 800b13a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f001 fdab 	bl	800cc98 <UART_CheckIdleState>
 800b142:	4603      	mov	r3, r0
}
 800b144:	4618      	mov	r0, r3
 800b146:	3708      	adds	r7, #8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b08a      	sub	sp, #40	@ 0x28
 800b150:	af02      	add	r7, sp, #8
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	603b      	str	r3, [r7, #0]
 800b158:	4613      	mov	r3, r2
 800b15a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b162:	2b20      	cmp	r3, #32
 800b164:	d17b      	bne.n	800b25e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d002      	beq.n	800b172 <HAL_UART_Transmit+0x26>
 800b16c:	88fb      	ldrh	r3, [r7, #6]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d101      	bne.n	800b176 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b172:	2301      	movs	r3, #1
 800b174:	e074      	b.n	800b260 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2200      	movs	r2, #0
 800b17a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2221      	movs	r2, #33	@ 0x21
 800b182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b186:	f7f8 fddf 	bl	8003d48 <HAL_GetTick>
 800b18a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	88fa      	ldrh	r2, [r7, #6]
 800b190:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	88fa      	ldrh	r2, [r7, #6]
 800b198:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1a4:	d108      	bne.n	800b1b8 <HAL_UART_Transmit+0x6c>
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d104      	bne.n	800b1b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	61bb      	str	r3, [r7, #24]
 800b1b6:	e003      	b.n	800b1c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b1c0:	e030      	b.n	800b224 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	9300      	str	r3, [sp, #0]
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	2180      	movs	r1, #128	@ 0x80
 800b1cc:	68f8      	ldr	r0, [r7, #12]
 800b1ce:	f001 fe0d 	bl	800cdec <UART_WaitOnFlagUntilTimeout>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d005      	beq.n	800b1e4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2220      	movs	r2, #32
 800b1dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b1e0:	2303      	movs	r3, #3
 800b1e2:	e03d      	b.n	800b260 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10b      	bne.n	800b202 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	881b      	ldrh	r3, [r3, #0]
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	3302      	adds	r3, #2
 800b1fe:	61bb      	str	r3, [r7, #24]
 800b200:	e007      	b.n	800b212 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	781a      	ldrb	r2, [r3, #0]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	3301      	adds	r3, #1
 800b210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b218:	b29b      	uxth	r3, r3
 800b21a:	3b01      	subs	r3, #1
 800b21c:	b29a      	uxth	r2, r3
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d1c8      	bne.n	800b1c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	9300      	str	r3, [sp, #0]
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	2200      	movs	r2, #0
 800b238:	2140      	movs	r1, #64	@ 0x40
 800b23a:	68f8      	ldr	r0, [r7, #12]
 800b23c:	f001 fdd6 	bl	800cdec <UART_WaitOnFlagUntilTimeout>
 800b240:	4603      	mov	r3, r0
 800b242:	2b00      	cmp	r3, #0
 800b244:	d005      	beq.n	800b252 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2220      	movs	r2, #32
 800b24a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b24e:	2303      	movs	r3, #3
 800b250:	e006      	b.n	800b260 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2220      	movs	r2, #32
 800b256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b25a:	2300      	movs	r3, #0
 800b25c:	e000      	b.n	800b260 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b25e:	2302      	movs	r3, #2
  }
}
 800b260:	4618      	mov	r0, r3
 800b262:	3720      	adds	r7, #32
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b08a      	sub	sp, #40	@ 0x28
 800b26c:	af02      	add	r7, sp, #8
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	603b      	str	r3, [r7, #0]
 800b274:	4613      	mov	r3, r2
 800b276:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b27e:	2b20      	cmp	r3, #32
 800b280:	f040 80b5 	bne.w	800b3ee <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d002      	beq.n	800b290 <HAL_UART_Receive+0x28>
 800b28a:	88fb      	ldrh	r3, [r7, #6]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d101      	bne.n	800b294 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800b290:	2301      	movs	r3, #1
 800b292:	e0ad      	b.n	800b3f0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2200      	movs	r2, #0
 800b298:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2222      	movs	r2, #34	@ 0x22
 800b2a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b2aa:	f7f8 fd4d 	bl	8003d48 <HAL_GetTick>
 800b2ae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	88fa      	ldrh	r2, [r7, #6]
 800b2b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	88fa      	ldrh	r2, [r7, #6]
 800b2bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2c8:	d10e      	bne.n	800b2e8 <HAL_UART_Receive+0x80>
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d105      	bne.n	800b2de <HAL_UART_Receive+0x76>
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b2d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b2dc:	e02d      	b.n	800b33a <HAL_UART_Receive+0xd2>
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	22ff      	movs	r2, #255	@ 0xff
 800b2e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b2e6:	e028      	b.n	800b33a <HAL_UART_Receive+0xd2>
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d10d      	bne.n	800b30c <HAL_UART_Receive+0xa4>
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	691b      	ldr	r3, [r3, #16]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d104      	bne.n	800b302 <HAL_UART_Receive+0x9a>
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	22ff      	movs	r2, #255	@ 0xff
 800b2fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b300:	e01b      	b.n	800b33a <HAL_UART_Receive+0xd2>
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	227f      	movs	r2, #127	@ 0x7f
 800b306:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b30a:	e016      	b.n	800b33a <HAL_UART_Receive+0xd2>
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b314:	d10d      	bne.n	800b332 <HAL_UART_Receive+0xca>
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	691b      	ldr	r3, [r3, #16]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d104      	bne.n	800b328 <HAL_UART_Receive+0xc0>
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	227f      	movs	r2, #127	@ 0x7f
 800b322:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b326:	e008      	b.n	800b33a <HAL_UART_Receive+0xd2>
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	223f      	movs	r2, #63	@ 0x3f
 800b32c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b330:	e003      	b.n	800b33a <HAL_UART_Receive+0xd2>
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b340:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b34a:	d108      	bne.n	800b35e <HAL_UART_Receive+0xf6>
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	691b      	ldr	r3, [r3, #16]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d104      	bne.n	800b35e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800b354:	2300      	movs	r3, #0
 800b356:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	61bb      	str	r3, [r7, #24]
 800b35c:	e003      	b.n	800b366 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b362:	2300      	movs	r3, #0
 800b364:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b366:	e036      	b.n	800b3d6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	9300      	str	r3, [sp, #0]
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	2200      	movs	r2, #0
 800b370:	2120      	movs	r1, #32
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f001 fd3a 	bl	800cdec <UART_WaitOnFlagUntilTimeout>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d005      	beq.n	800b38a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2220      	movs	r2, #32
 800b382:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800b386:	2303      	movs	r3, #3
 800b388:	e032      	b.n	800b3f0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d10c      	bne.n	800b3aa <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b396:	b29a      	uxth	r2, r3
 800b398:	8a7b      	ldrh	r3, [r7, #18]
 800b39a:	4013      	ands	r3, r2
 800b39c:	b29a      	uxth	r2, r3
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	3302      	adds	r3, #2
 800b3a6:	61bb      	str	r3, [r7, #24]
 800b3a8:	e00c      	b.n	800b3c4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3b0:	b2da      	uxtb	r2, r3
 800b3b2:	8a7b      	ldrh	r3, [r7, #18]
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	4013      	ands	r3, r2
 800b3b8:	b2da      	uxtb	r2, r3
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d1c2      	bne.n	800b368 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2220      	movs	r2, #32
 800b3e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	e000      	b.n	800b3f0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800b3ee:	2302      	movs	r3, #2
  }
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3720      	adds	r7, #32
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b091      	sub	sp, #68	@ 0x44
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	4613      	mov	r3, r2
 800b404:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b40c:	2b20      	cmp	r3, #32
 800b40e:	d178      	bne.n	800b502 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d002      	beq.n	800b41c <HAL_UART_Transmit_IT+0x24>
 800b416:	88fb      	ldrh	r3, [r7, #6]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d101      	bne.n	800b420 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800b41c:	2301      	movs	r3, #1
 800b41e:	e071      	b.n	800b504 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	68ba      	ldr	r2, [r7, #8]
 800b424:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	88fa      	ldrh	r2, [r7, #6]
 800b42a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	88fa      	ldrh	r2, [r7, #6]
 800b432:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2200      	movs	r2, #0
 800b43a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2221      	movs	r2, #33	@ 0x21
 800b448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b450:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b454:	d12a      	bne.n	800b4ac <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b45e:	d107      	bne.n	800b470 <HAL_UART_Transmit_IT+0x78>
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	691b      	ldr	r3, [r3, #16]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d103      	bne.n	800b470 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	4a29      	ldr	r2, [pc, #164]	@ (800b510 <HAL_UART_Transmit_IT+0x118>)
 800b46c:	679a      	str	r2, [r3, #120]	@ 0x78
 800b46e:	e002      	b.n	800b476 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	4a28      	ldr	r2, [pc, #160]	@ (800b514 <HAL_UART_Transmit_IT+0x11c>)
 800b474:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	3308      	adds	r3, #8
 800b47c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b480:	e853 3f00 	ldrex	r3, [r3]
 800b484:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b488:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b48c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	3308      	adds	r3, #8
 800b494:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b496:	637a      	str	r2, [r7, #52]	@ 0x34
 800b498:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b49a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b49c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b49e:	e841 2300 	strex	r3, r2, [r1]
 800b4a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1e5      	bne.n	800b476 <HAL_UART_Transmit_IT+0x7e>
 800b4aa:	e028      	b.n	800b4fe <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4b4:	d107      	bne.n	800b4c6 <HAL_UART_Transmit_IT+0xce>
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d103      	bne.n	800b4c6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	4a15      	ldr	r2, [pc, #84]	@ (800b518 <HAL_UART_Transmit_IT+0x120>)
 800b4c2:	679a      	str	r2, [r3, #120]	@ 0x78
 800b4c4:	e002      	b.n	800b4cc <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	4a14      	ldr	r2, [pc, #80]	@ (800b51c <HAL_UART_Transmit_IT+0x124>)
 800b4ca:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	e853 3f00 	ldrex	r3, [r3]
 800b4d8:	613b      	str	r3, [r7, #16]
   return(result);
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ea:	623b      	str	r3, [r7, #32]
 800b4ec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ee:	69f9      	ldr	r1, [r7, #28]
 800b4f0:	6a3a      	ldr	r2, [r7, #32]
 800b4f2:	e841 2300 	strex	r3, r2, [r1]
 800b4f6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d1e6      	bne.n	800b4cc <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800b4fe:	2300      	movs	r3, #0
 800b500:	e000      	b.n	800b504 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800b502:	2302      	movs	r3, #2
  }
}
 800b504:	4618      	mov	r0, r3
 800b506:	3744      	adds	r7, #68	@ 0x44
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr
 800b510:	0800d49d 	.word	0x0800d49d
 800b514:	0800d3bd 	.word	0x0800d3bd
 800b518:	0800d2fb 	.word	0x0800d2fb
 800b51c:	0800d243 	.word	0x0800d243

0800b520 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b08a      	sub	sp, #40	@ 0x28
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	4613      	mov	r3, r2
 800b52c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b534:	2b20      	cmp	r3, #32
 800b536:	d137      	bne.n	800b5a8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d002      	beq.n	800b544 <HAL_UART_Receive_IT+0x24>
 800b53e:	88fb      	ldrh	r3, [r7, #6]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d101      	bne.n	800b548 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b544:	2301      	movs	r3, #1
 800b546:	e030      	b.n	800b5aa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2200      	movs	r2, #0
 800b54c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a18      	ldr	r2, [pc, #96]	@ (800b5b4 <HAL_UART_Receive_IT+0x94>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d01f      	beq.n	800b598 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b562:	2b00      	cmp	r3, #0
 800b564:	d018      	beq.n	800b598 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	e853 3f00 	ldrex	r3, [r3]
 800b572:	613b      	str	r3, [r7, #16]
   return(result);
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b57a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	461a      	mov	r2, r3
 800b582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b584:	623b      	str	r3, [r7, #32]
 800b586:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b588:	69f9      	ldr	r1, [r7, #28]
 800b58a:	6a3a      	ldr	r2, [r7, #32]
 800b58c:	e841 2300 	strex	r3, r2, [r1]
 800b590:	61bb      	str	r3, [r7, #24]
   return(result);
 800b592:	69bb      	ldr	r3, [r7, #24]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1e6      	bne.n	800b566 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b598:	88fb      	ldrh	r3, [r7, #6]
 800b59a:	461a      	mov	r2, r3
 800b59c:	68b9      	ldr	r1, [r7, #8]
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f001 fc8c 	bl	800cebc <UART_Start_Receive_IT>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	e000      	b.n	800b5aa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b5a8:	2302      	movs	r3, #2
  }
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3728      	adds	r7, #40	@ 0x28
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	58000c00 	.word	0x58000c00

0800b5b8 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b09a      	sub	sp, #104	@ 0x68
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5c8:	e853 3f00 	ldrex	r3, [r3]
 800b5cc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b5ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b5d4:	667b      	str	r3, [r7, #100]	@ 0x64
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b5de:	657b      	str	r3, [r7, #84]	@ 0x54
 800b5e0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b5e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b5e6:	e841 2300 	strex	r3, r2, [r1]
 800b5ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b5ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1e6      	bne.n	800b5c0 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	3308      	adds	r3, #8
 800b5f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5fc:	e853 3f00 	ldrex	r3, [r3]
 800b600:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b604:	4b51      	ldr	r3, [pc, #324]	@ (800b74c <HAL_UART_AbortReceive_IT+0x194>)
 800b606:	4013      	ands	r3, r2
 800b608:	663b      	str	r3, [r7, #96]	@ 0x60
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	3308      	adds	r3, #8
 800b610:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b612:	643a      	str	r2, [r7, #64]	@ 0x40
 800b614:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b616:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b618:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b61a:	e841 2300 	strex	r3, r2, [r1]
 800b61e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b622:	2b00      	cmp	r3, #0
 800b624:	d1e5      	bne.n	800b5f2 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d118      	bne.n	800b660 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b634:	6a3b      	ldr	r3, [r7, #32]
 800b636:	e853 3f00 	ldrex	r3, [r3]
 800b63a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	f023 0310 	bic.w	r3, r3, #16
 800b642:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	461a      	mov	r2, r3
 800b64a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b64c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b64e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b650:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b652:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b654:	e841 2300 	strex	r3, r2, [r1]
 800b658:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1e6      	bne.n	800b62e <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b66a:	2b40      	cmp	r3, #64	@ 0x40
 800b66c:	d154      	bne.n	800b718 <HAL_UART_AbortReceive_IT+0x160>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	3308      	adds	r3, #8
 800b674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	e853 3f00 	ldrex	r3, [r3]
 800b67c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b684:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	3308      	adds	r3, #8
 800b68c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b68e:	61ba      	str	r2, [r7, #24]
 800b690:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b692:	6979      	ldr	r1, [r7, #20]
 800b694:	69ba      	ldr	r2, [r7, #24]
 800b696:	e841 2300 	strex	r3, r2, [r1]
 800b69a:	613b      	str	r3, [r7, #16]
   return(result);
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d1e5      	bne.n	800b66e <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d017      	beq.n	800b6dc <HAL_UART_AbortReceive_IT+0x124>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6b2:	4a27      	ldr	r2, [pc, #156]	@ (800b750 <HAL_UART_AbortReceive_IT+0x198>)
 800b6b4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7f8 fff9 	bl	80046b4 <HAL_DMA_Abort_IT>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d03c      	beq.n	800b742 <HAL_UART_AbortReceive_IT+0x18a>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	4798      	blx	r3
 800b6da:	e032      	b.n	800b742 <HAL_UART_AbortReceive_IT+0x18a>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	220f      	movs	r2, #15
 800b6f0:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	699a      	ldr	r2, [r3, #24]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f042 0208 	orr.w	r2, r2, #8
 800b700:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2220      	movs	r2, #32
 800b706:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2200      	movs	r2, #0
 800b70e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 fbe3 	bl	800bedc <HAL_UART_AbortReceiveCpltCallback>
 800b716:	e014      	b.n	800b742 <HAL_UART_AbortReceive_IT+0x18a>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2200      	movs	r2, #0
 800b71c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	220f      	movs	r2, #15
 800b72c:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2220      	movs	r2, #32
 800b732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 fbcd 	bl	800bedc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b742:	2300      	movs	r3, #0
}
 800b744:	4618      	mov	r0, r3
 800b746:	3768      	adds	r7, #104	@ 0x68
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	effffffe 	.word	0xeffffffe
 800b750:	0800d1f9 	.word	0x0800d1f9

0800b754 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b0ba      	sub	sp, #232	@ 0xe8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	69db      	ldr	r3, [r3, #28]
 800b762:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b77a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b77e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b782:	4013      	ands	r3, r2
 800b784:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b788:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d11b      	bne.n	800b7c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b794:	f003 0320 	and.w	r3, r3, #32
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d015      	beq.n	800b7c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b79c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7a0:	f003 0320 	and.w	r3, r3, #32
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d105      	bne.n	800b7b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b7a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b7ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d009      	beq.n	800b7c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	f000 8377 	beq.w	800beac <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	4798      	blx	r3
      }
      return;
 800b7c6:	e371      	b.n	800beac <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b7c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 8123 	beq.w	800ba18 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b7d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b7d6:	4b8d      	ldr	r3, [pc, #564]	@ (800ba0c <HAL_UART_IRQHandler+0x2b8>)
 800b7d8:	4013      	ands	r3, r2
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d106      	bne.n	800b7ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b7de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b7e2:	4b8b      	ldr	r3, [pc, #556]	@ (800ba10 <HAL_UART_IRQHandler+0x2bc>)
 800b7e4:	4013      	ands	r3, r2
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	f000 8116 	beq.w	800ba18 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7f0:	f003 0301 	and.w	r3, r3, #1
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d011      	beq.n	800b81c <HAL_UART_IRQHandler+0xc8>
 800b7f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00b      	beq.n	800b81c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2201      	movs	r2, #1
 800b80a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b812:	f043 0201 	orr.w	r2, r3, #1
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b81c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b820:	f003 0302 	and.w	r3, r3, #2
 800b824:	2b00      	cmp	r3, #0
 800b826:	d011      	beq.n	800b84c <HAL_UART_IRQHandler+0xf8>
 800b828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b82c:	f003 0301 	and.w	r3, r3, #1
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00b      	beq.n	800b84c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2202      	movs	r2, #2
 800b83a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b842:	f043 0204 	orr.w	r2, r3, #4
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b84c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b850:	f003 0304 	and.w	r3, r3, #4
 800b854:	2b00      	cmp	r3, #0
 800b856:	d011      	beq.n	800b87c <HAL_UART_IRQHandler+0x128>
 800b858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b85c:	f003 0301 	and.w	r3, r3, #1
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00b      	beq.n	800b87c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2204      	movs	r2, #4
 800b86a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b872:	f043 0202 	orr.w	r2, r3, #2
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b87c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b880:	f003 0308 	and.w	r3, r3, #8
 800b884:	2b00      	cmp	r3, #0
 800b886:	d017      	beq.n	800b8b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b88c:	f003 0320 	and.w	r3, r3, #32
 800b890:	2b00      	cmp	r3, #0
 800b892:	d105      	bne.n	800b8a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b894:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b898:	4b5c      	ldr	r3, [pc, #368]	@ (800ba0c <HAL_UART_IRQHandler+0x2b8>)
 800b89a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d00b      	beq.n	800b8b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2208      	movs	r2, #8
 800b8a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8ae:	f043 0208 	orr.w	r2, r3, #8
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b8b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d012      	beq.n	800b8ea <HAL_UART_IRQHandler+0x196>
 800b8c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d00c      	beq.n	800b8ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b8d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8e0:	f043 0220 	orr.w	r2, r3, #32
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f000 82dd 	beq.w	800beb0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b8f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8fa:	f003 0320 	and.w	r3, r3, #32
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d013      	beq.n	800b92a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b906:	f003 0320 	and.w	r3, r3, #32
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d105      	bne.n	800b91a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b90e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b916:	2b00      	cmp	r3, #0
 800b918:	d007      	beq.n	800b92a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d003      	beq.n	800b92a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b930:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b93e:	2b40      	cmp	r3, #64	@ 0x40
 800b940:	d005      	beq.n	800b94e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b946:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d054      	beq.n	800b9f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f001 fbd6 	bl	800d100 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	689b      	ldr	r3, [r3, #8]
 800b95a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b95e:	2b40      	cmp	r3, #64	@ 0x40
 800b960:	d146      	bne.n	800b9f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	3308      	adds	r3, #8
 800b968:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b96c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b970:	e853 3f00 	ldrex	r3, [r3]
 800b974:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b978:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b97c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b980:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	3308      	adds	r3, #8
 800b98a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b98e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b992:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b996:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b99a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b99e:	e841 2300 	strex	r3, r2, [r1]
 800b9a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b9a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d1d9      	bne.n	800b962 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d017      	beq.n	800b9e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9be:	4a15      	ldr	r2, [pc, #84]	@ (800ba14 <HAL_UART_IRQHandler+0x2c0>)
 800b9c0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7f8 fe73 	bl	80046b4 <HAL_DMA_Abort_IT>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d019      	beq.n	800ba08 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b9e2:	4610      	mov	r0, r2
 800b9e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9e6:	e00f      	b.n	800ba08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 fa6d 	bl	800bec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9ee:	e00b      	b.n	800ba08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 fa69 	bl	800bec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9f6:	e007      	b.n	800ba08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 fa65 	bl	800bec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ba06:	e253      	b.n	800beb0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba08:	bf00      	nop
    return;
 800ba0a:	e251      	b.n	800beb0 <HAL_UART_IRQHandler+0x75c>
 800ba0c:	10000001 	.word	0x10000001
 800ba10:	04000120 	.word	0x04000120
 800ba14:	0800d1cd 	.word	0x0800d1cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	f040 81e7 	bne.w	800bdf0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ba22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba26:	f003 0310 	and.w	r3, r3, #16
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	f000 81e0 	beq.w	800bdf0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ba30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba34:	f003 0310 	and.w	r3, r3, #16
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	f000 81d9 	beq.w	800bdf0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2210      	movs	r2, #16
 800ba44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba50:	2b40      	cmp	r3, #64	@ 0x40
 800ba52:	f040 8151 	bne.w	800bcf8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a96      	ldr	r2, [pc, #600]	@ (800bcb8 <HAL_UART_IRQHandler+0x564>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d068      	beq.n	800bb36 <HAL_UART_IRQHandler+0x3e2>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a93      	ldr	r2, [pc, #588]	@ (800bcbc <HAL_UART_IRQHandler+0x568>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d061      	beq.n	800bb36 <HAL_UART_IRQHandler+0x3e2>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a91      	ldr	r2, [pc, #580]	@ (800bcc0 <HAL_UART_IRQHandler+0x56c>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d05a      	beq.n	800bb36 <HAL_UART_IRQHandler+0x3e2>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a8e      	ldr	r2, [pc, #568]	@ (800bcc4 <HAL_UART_IRQHandler+0x570>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d053      	beq.n	800bb36 <HAL_UART_IRQHandler+0x3e2>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a8c      	ldr	r2, [pc, #560]	@ (800bcc8 <HAL_UART_IRQHandler+0x574>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d04c      	beq.n	800bb36 <HAL_UART_IRQHandler+0x3e2>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a89      	ldr	r2, [pc, #548]	@ (800bccc <HAL_UART_IRQHandler+0x578>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d045      	beq.n	800bb36 <HAL_UART_IRQHandler+0x3e2>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a87      	ldr	r2, [pc, #540]	@ (800bcd0 <HAL_UART_IRQHandler+0x57c>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d03e      	beq.n	800bb36 <HAL_UART_IRQHandler+0x3e2>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a84      	ldr	r2, [pc, #528]	@ (800bcd4 <HAL_UART_IRQHandler+0x580>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d037      	beq.n	800bb36 <HAL_UART_IRQHandler+0x3e2>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4a82      	ldr	r2, [pc, #520]	@ (800bcd8 <HAL_UART_IRQHandler+0x584>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d030      	beq.n	800bb36 <HAL_UART_IRQHandler+0x3e2>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a7f      	ldr	r2, [pc, #508]	@ (800bcdc <HAL_UART_IRQHandler+0x588>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d029      	beq.n	800bb36 <HAL_UART_IRQHandler+0x3e2>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a7d      	ldr	r2, [pc, #500]	@ (800bce0 <HAL_UART_IRQHandler+0x58c>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d022      	beq.n	800bb36 <HAL_UART_IRQHandler+0x3e2>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4a7a      	ldr	r2, [pc, #488]	@ (800bce4 <HAL_UART_IRQHandler+0x590>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d01b      	beq.n	800bb36 <HAL_UART_IRQHandler+0x3e2>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4a78      	ldr	r2, [pc, #480]	@ (800bce8 <HAL_UART_IRQHandler+0x594>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d014      	beq.n	800bb36 <HAL_UART_IRQHandler+0x3e2>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a75      	ldr	r2, [pc, #468]	@ (800bcec <HAL_UART_IRQHandler+0x598>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d00d      	beq.n	800bb36 <HAL_UART_IRQHandler+0x3e2>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a73      	ldr	r2, [pc, #460]	@ (800bcf0 <HAL_UART_IRQHandler+0x59c>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d006      	beq.n	800bb36 <HAL_UART_IRQHandler+0x3e2>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a70      	ldr	r2, [pc, #448]	@ (800bcf4 <HAL_UART_IRQHandler+0x5a0>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d106      	bne.n	800bb44 <HAL_UART_IRQHandler+0x3f0>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	e005      	b.n	800bb50 <HAL_UART_IRQHandler+0x3fc>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bb54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	f000 81ab 	beq.w	800beb4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bb64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	f080 81a3 	bcs.w	800beb4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bb74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb7e:	69db      	ldr	r3, [r3, #28]
 800bb80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb84:	f000 8087 	beq.w	800bc96 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bb94:	e853 3f00 	ldrex	r3, [r3]
 800bb98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bb9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bba4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	461a      	mov	r2, r3
 800bbae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bbb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bbb6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bbbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bbc2:	e841 2300 	strex	r3, r2, [r1]
 800bbc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bbca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d1da      	bne.n	800bb88 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	3308      	adds	r3, #8
 800bbd8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bbdc:	e853 3f00 	ldrex	r3, [r3]
 800bbe0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bbe2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bbe4:	f023 0301 	bic.w	r3, r3, #1
 800bbe8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	3308      	adds	r3, #8
 800bbf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bbf6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bbfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbfc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bbfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bc02:	e841 2300 	strex	r3, r2, [r1]
 800bc06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bc08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d1e1      	bne.n	800bbd2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3308      	adds	r3, #8
 800bc14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc18:	e853 3f00 	ldrex	r3, [r3]
 800bc1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bc1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	3308      	adds	r3, #8
 800bc2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bc32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bc34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bc38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bc3a:	e841 2300 	strex	r3, r2, [r1]
 800bc3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bc40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d1e3      	bne.n	800bc0e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2220      	movs	r2, #32
 800bc4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc5c:	e853 3f00 	ldrex	r3, [r3]
 800bc60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bc62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc64:	f023 0310 	bic.w	r3, r3, #16
 800bc68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	461a      	mov	r2, r3
 800bc72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc76:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bc78:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bc7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc7e:	e841 2300 	strex	r3, r2, [r1]
 800bc82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bc84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d1e4      	bne.n	800bc54 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc90:	4618      	mov	r0, r3
 800bc92:	f7f8 f9f1 	bl	8004078 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2202      	movs	r2, #2
 800bc9a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	1ad3      	subs	r3, r2, r3
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	4619      	mov	r1, r3
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f000 f91d 	bl	800bef0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bcb6:	e0fd      	b.n	800beb4 <HAL_UART_IRQHandler+0x760>
 800bcb8:	40020010 	.word	0x40020010
 800bcbc:	40020028 	.word	0x40020028
 800bcc0:	40020040 	.word	0x40020040
 800bcc4:	40020058 	.word	0x40020058
 800bcc8:	40020070 	.word	0x40020070
 800bccc:	40020088 	.word	0x40020088
 800bcd0:	400200a0 	.word	0x400200a0
 800bcd4:	400200b8 	.word	0x400200b8
 800bcd8:	40020410 	.word	0x40020410
 800bcdc:	40020428 	.word	0x40020428
 800bce0:	40020440 	.word	0x40020440
 800bce4:	40020458 	.word	0x40020458
 800bce8:	40020470 	.word	0x40020470
 800bcec:	40020488 	.word	0x40020488
 800bcf0:	400204a0 	.word	0x400204a0
 800bcf4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	1ad3      	subs	r3, r2, r3
 800bd08:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f000 80cf 	beq.w	800beb8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bd1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	f000 80ca 	beq.w	800beb8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd2c:	e853 3f00 	ldrex	r3, [r3]
 800bd30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	461a      	mov	r2, r3
 800bd42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bd46:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd48:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd4e:	e841 2300 	strex	r3, r2, [r1]
 800bd52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d1e4      	bne.n	800bd24 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	3308      	adds	r3, #8
 800bd60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd64:	e853 3f00 	ldrex	r3, [r3]
 800bd68:	623b      	str	r3, [r7, #32]
   return(result);
 800bd6a:	6a3a      	ldr	r2, [r7, #32]
 800bd6c:	4b55      	ldr	r3, [pc, #340]	@ (800bec4 <HAL_UART_IRQHandler+0x770>)
 800bd6e:	4013      	ands	r3, r2
 800bd70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	3308      	adds	r3, #8
 800bd7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bd7e:	633a      	str	r2, [r7, #48]	@ 0x30
 800bd80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd86:	e841 2300 	strex	r3, r2, [r1]
 800bd8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d1e3      	bne.n	800bd5a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2220      	movs	r2, #32
 800bd96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	e853 3f00 	ldrex	r3, [r3]
 800bdb2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f023 0310 	bic.w	r3, r3, #16
 800bdba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bdc8:	61fb      	str	r3, [r7, #28]
 800bdca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdcc:	69b9      	ldr	r1, [r7, #24]
 800bdce:	69fa      	ldr	r2, [r7, #28]
 800bdd0:	e841 2300 	strex	r3, r2, [r1]
 800bdd4:	617b      	str	r3, [r7, #20]
   return(result);
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d1e4      	bne.n	800bda6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2202      	movs	r2, #2
 800bde0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bde2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bde6:	4619      	mov	r1, r3
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 f881 	bl	800bef0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bdee:	e063      	b.n	800beb8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bdf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d00e      	beq.n	800be1a <HAL_UART_IRQHandler+0x6c6>
 800bdfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be04:	2b00      	cmp	r3, #0
 800be06:	d008      	beq.n	800be1a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800be10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f002 f8fe 	bl	800e014 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be18:	e051      	b.n	800bebe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800be1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be22:	2b00      	cmp	r3, #0
 800be24:	d014      	beq.n	800be50 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800be26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d105      	bne.n	800be3e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800be32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d008      	beq.n	800be50 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be42:	2b00      	cmp	r3, #0
 800be44:	d03a      	beq.n	800bebc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	4798      	blx	r3
    }
    return;
 800be4e:	e035      	b.n	800bebc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800be50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d009      	beq.n	800be70 <HAL_UART_IRQHandler+0x71c>
 800be5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be64:	2b00      	cmp	r3, #0
 800be66:	d003      	beq.n	800be70 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f001 fb8c 	bl	800d586 <UART_EndTransmit_IT>
    return;
 800be6e:	e026      	b.n	800bebe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800be70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d009      	beq.n	800be90 <HAL_UART_IRQHandler+0x73c>
 800be7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be80:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800be84:	2b00      	cmp	r3, #0
 800be86:	d003      	beq.n	800be90 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f002 f8d7 	bl	800e03c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be8e:	e016      	b.n	800bebe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800be90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d010      	beq.n	800bebe <HAL_UART_IRQHandler+0x76a>
 800be9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	da0c      	bge.n	800bebe <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f002 f8bf 	bl	800e028 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800beaa:	e008      	b.n	800bebe <HAL_UART_IRQHandler+0x76a>
      return;
 800beac:	bf00      	nop
 800beae:	e006      	b.n	800bebe <HAL_UART_IRQHandler+0x76a>
    return;
 800beb0:	bf00      	nop
 800beb2:	e004      	b.n	800bebe <HAL_UART_IRQHandler+0x76a>
      return;
 800beb4:	bf00      	nop
 800beb6:	e002      	b.n	800bebe <HAL_UART_IRQHandler+0x76a>
      return;
 800beb8:	bf00      	nop
 800beba:	e000      	b.n	800bebe <HAL_UART_IRQHandler+0x76a>
    return;
 800bebc:	bf00      	nop
  }
}
 800bebe:	37e8      	adds	r7, #232	@ 0xe8
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	effffffe 	.word	0xeffffffe

0800bec8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bec8:	b480      	push	{r7}
 800beca:	b083      	sub	sp, #12
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bed0:	bf00      	nop
 800bed2:	370c      	adds	r7, #12
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr

0800bedc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bee4:	bf00      	nop
 800bee6:	370c      	adds	r7, #12
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b083      	sub	sp, #12
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	460b      	mov	r3, r1
 800befa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800befc:	bf00      	nop
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b08f      	sub	sp, #60	@ 0x3c
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d101      	bne.n	800bf1e <HAL_HalfDuplex_EnableTransmitter+0x16>
 800bf1a:	2302      	movs	r3, #2
 800bf1c:	e042      	b.n	800bfa4 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2201      	movs	r2, #1
 800bf22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2224      	movs	r2, #36	@ 0x24
 800bf2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf34:	6a3b      	ldr	r3, [r7, #32]
 800bf36:	e853 3f00 	ldrex	r3, [r3]
 800bf3a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	f023 030c 	bic.w	r3, r3, #12
 800bf42:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	461a      	mov	r2, r3
 800bf4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf4e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf54:	e841 2300 	strex	r3, r2, [r1]
 800bf58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d1e6      	bne.n	800bf2e <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	e853 3f00 	ldrex	r3, [r3]
 800bf6c:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	f043 0308 	orr.w	r3, r3, #8
 800bf74:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf7e:	61bb      	str	r3, [r7, #24]
 800bf80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf82:	6979      	ldr	r1, [r7, #20]
 800bf84:	69ba      	ldr	r2, [r7, #24]
 800bf86:	e841 2300 	strex	r3, r2, [r1]
 800bf8a:	613b      	str	r3, [r7, #16]
   return(result);
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d1e6      	bne.n	800bf60 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2220      	movs	r2, #32
 800bf96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	373c      	adds	r7, #60	@ 0x3c
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b08f      	sub	sp, #60	@ 0x3c
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d101      	bne.n	800bfc6 <HAL_HalfDuplex_EnableReceiver+0x16>
 800bfc2:	2302      	movs	r3, #2
 800bfc4:	e042      	b.n	800c04c <HAL_HalfDuplex_EnableReceiver+0x9c>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2201      	movs	r2, #1
 800bfca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2224      	movs	r2, #36	@ 0x24
 800bfd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfdc:	6a3b      	ldr	r3, [r7, #32]
 800bfde:	e853 3f00 	ldrex	r3, [r3]
 800bfe2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	f023 030c 	bic.w	r3, r3, #12
 800bfea:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	461a      	mov	r2, r3
 800bff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bff6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bffa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bffc:	e841 2300 	strex	r3, r2, [r1]
 800c000:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c004:	2b00      	cmp	r3, #0
 800c006:	d1e6      	bne.n	800bfd6 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	e853 3f00 	ldrex	r3, [r3]
 800c014:	60bb      	str	r3, [r7, #8]
   return(result);
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	f043 0304 	orr.w	r3, r3, #4
 800c01c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	461a      	mov	r2, r3
 800c024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c026:	61bb      	str	r3, [r7, #24]
 800c028:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c02a:	6979      	ldr	r1, [r7, #20]
 800c02c:	69ba      	ldr	r2, [r7, #24]
 800c02e:	e841 2300 	strex	r3, r2, [r1]
 800c032:	613b      	str	r3, [r7, #16]
   return(result);
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d1e6      	bne.n	800c008 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2220      	movs	r2, #32
 800c03e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	373c      	adds	r7, #60	@ 0x3c
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800c058:	b480      	push	{r7}
 800c05a:	b085      	sub	sp, #20
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c066:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c06e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800c070:	68fa      	ldr	r2, [r7, #12]
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	4313      	orrs	r3, r2
}
 800c076:	4618      	mov	r0, r3
 800c078:	3714      	adds	r7, #20
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr
	...

0800c084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c088:	b092      	sub	sp, #72	@ 0x48
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c08e:	2300      	movs	r3, #0
 800c090:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	689a      	ldr	r2, [r3, #8]
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	691b      	ldr	r3, [r3, #16]
 800c09c:	431a      	orrs	r2, r3
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	695b      	ldr	r3, [r3, #20]
 800c0a2:	431a      	orrs	r2, r3
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	69db      	ldr	r3, [r3, #28]
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	4bbe      	ldr	r3, [pc, #760]	@ (800c3ac <UART_SetConfig+0x328>)
 800c0b4:	4013      	ands	r3, r2
 800c0b6:	697a      	ldr	r2, [r7, #20]
 800c0b8:	6812      	ldr	r2, [r2, #0]
 800c0ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c0bc:	430b      	orrs	r3, r1
 800c0be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	68da      	ldr	r2, [r3, #12]
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	430a      	orrs	r2, r1
 800c0d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	699b      	ldr	r3, [r3, #24]
 800c0da:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4ab3      	ldr	r2, [pc, #716]	@ (800c3b0 <UART_SetConfig+0x32c>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d004      	beq.n	800c0f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	6a1b      	ldr	r3, [r3, #32]
 800c0ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	689a      	ldr	r2, [r3, #8]
 800c0f6:	4baf      	ldr	r3, [pc, #700]	@ (800c3b4 <UART_SetConfig+0x330>)
 800c0f8:	4013      	ands	r3, r2
 800c0fa:	697a      	ldr	r2, [r7, #20]
 800c0fc:	6812      	ldr	r2, [r2, #0]
 800c0fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c100:	430b      	orrs	r3, r1
 800c102:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c10a:	f023 010f 	bic.w	r1, r3, #15
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	430a      	orrs	r2, r1
 800c118:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4aa6      	ldr	r2, [pc, #664]	@ (800c3b8 <UART_SetConfig+0x334>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d177      	bne.n	800c214 <UART_SetConfig+0x190>
 800c124:	4ba5      	ldr	r3, [pc, #660]	@ (800c3bc <UART_SetConfig+0x338>)
 800c126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c128:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c12c:	2b28      	cmp	r3, #40	@ 0x28
 800c12e:	d86d      	bhi.n	800c20c <UART_SetConfig+0x188>
 800c130:	a201      	add	r2, pc, #4	@ (adr r2, 800c138 <UART_SetConfig+0xb4>)
 800c132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c136:	bf00      	nop
 800c138:	0800c1dd 	.word	0x0800c1dd
 800c13c:	0800c20d 	.word	0x0800c20d
 800c140:	0800c20d 	.word	0x0800c20d
 800c144:	0800c20d 	.word	0x0800c20d
 800c148:	0800c20d 	.word	0x0800c20d
 800c14c:	0800c20d 	.word	0x0800c20d
 800c150:	0800c20d 	.word	0x0800c20d
 800c154:	0800c20d 	.word	0x0800c20d
 800c158:	0800c1e5 	.word	0x0800c1e5
 800c15c:	0800c20d 	.word	0x0800c20d
 800c160:	0800c20d 	.word	0x0800c20d
 800c164:	0800c20d 	.word	0x0800c20d
 800c168:	0800c20d 	.word	0x0800c20d
 800c16c:	0800c20d 	.word	0x0800c20d
 800c170:	0800c20d 	.word	0x0800c20d
 800c174:	0800c20d 	.word	0x0800c20d
 800c178:	0800c1ed 	.word	0x0800c1ed
 800c17c:	0800c20d 	.word	0x0800c20d
 800c180:	0800c20d 	.word	0x0800c20d
 800c184:	0800c20d 	.word	0x0800c20d
 800c188:	0800c20d 	.word	0x0800c20d
 800c18c:	0800c20d 	.word	0x0800c20d
 800c190:	0800c20d 	.word	0x0800c20d
 800c194:	0800c20d 	.word	0x0800c20d
 800c198:	0800c1f5 	.word	0x0800c1f5
 800c19c:	0800c20d 	.word	0x0800c20d
 800c1a0:	0800c20d 	.word	0x0800c20d
 800c1a4:	0800c20d 	.word	0x0800c20d
 800c1a8:	0800c20d 	.word	0x0800c20d
 800c1ac:	0800c20d 	.word	0x0800c20d
 800c1b0:	0800c20d 	.word	0x0800c20d
 800c1b4:	0800c20d 	.word	0x0800c20d
 800c1b8:	0800c1fd 	.word	0x0800c1fd
 800c1bc:	0800c20d 	.word	0x0800c20d
 800c1c0:	0800c20d 	.word	0x0800c20d
 800c1c4:	0800c20d 	.word	0x0800c20d
 800c1c8:	0800c20d 	.word	0x0800c20d
 800c1cc:	0800c20d 	.word	0x0800c20d
 800c1d0:	0800c20d 	.word	0x0800c20d
 800c1d4:	0800c20d 	.word	0x0800c20d
 800c1d8:	0800c205 	.word	0x0800c205
 800c1dc:	2301      	movs	r3, #1
 800c1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1e2:	e222      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c1e4:	2304      	movs	r3, #4
 800c1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ea:	e21e      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c1ec:	2308      	movs	r3, #8
 800c1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1f2:	e21a      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c1f4:	2310      	movs	r3, #16
 800c1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1fa:	e216      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c1fc:	2320      	movs	r3, #32
 800c1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c202:	e212      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c204:	2340      	movs	r3, #64	@ 0x40
 800c206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c20a:	e20e      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c20c:	2380      	movs	r3, #128	@ 0x80
 800c20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c212:	e20a      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a69      	ldr	r2, [pc, #420]	@ (800c3c0 <UART_SetConfig+0x33c>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d130      	bne.n	800c280 <UART_SetConfig+0x1fc>
 800c21e:	4b67      	ldr	r3, [pc, #412]	@ (800c3bc <UART_SetConfig+0x338>)
 800c220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c222:	f003 0307 	and.w	r3, r3, #7
 800c226:	2b05      	cmp	r3, #5
 800c228:	d826      	bhi.n	800c278 <UART_SetConfig+0x1f4>
 800c22a:	a201      	add	r2, pc, #4	@ (adr r2, 800c230 <UART_SetConfig+0x1ac>)
 800c22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c230:	0800c249 	.word	0x0800c249
 800c234:	0800c251 	.word	0x0800c251
 800c238:	0800c259 	.word	0x0800c259
 800c23c:	0800c261 	.word	0x0800c261
 800c240:	0800c269 	.word	0x0800c269
 800c244:	0800c271 	.word	0x0800c271
 800c248:	2300      	movs	r3, #0
 800c24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c24e:	e1ec      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c250:	2304      	movs	r3, #4
 800c252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c256:	e1e8      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c258:	2308      	movs	r3, #8
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c25e:	e1e4      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c260:	2310      	movs	r3, #16
 800c262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c266:	e1e0      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c268:	2320      	movs	r3, #32
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c26e:	e1dc      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c270:	2340      	movs	r3, #64	@ 0x40
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c276:	e1d8      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c278:	2380      	movs	r3, #128	@ 0x80
 800c27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c27e:	e1d4      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a4f      	ldr	r2, [pc, #316]	@ (800c3c4 <UART_SetConfig+0x340>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d130      	bne.n	800c2ec <UART_SetConfig+0x268>
 800c28a:	4b4c      	ldr	r3, [pc, #304]	@ (800c3bc <UART_SetConfig+0x338>)
 800c28c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c28e:	f003 0307 	and.w	r3, r3, #7
 800c292:	2b05      	cmp	r3, #5
 800c294:	d826      	bhi.n	800c2e4 <UART_SetConfig+0x260>
 800c296:	a201      	add	r2, pc, #4	@ (adr r2, 800c29c <UART_SetConfig+0x218>)
 800c298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29c:	0800c2b5 	.word	0x0800c2b5
 800c2a0:	0800c2bd 	.word	0x0800c2bd
 800c2a4:	0800c2c5 	.word	0x0800c2c5
 800c2a8:	0800c2cd 	.word	0x0800c2cd
 800c2ac:	0800c2d5 	.word	0x0800c2d5
 800c2b0:	0800c2dd 	.word	0x0800c2dd
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ba:	e1b6      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c2bc:	2304      	movs	r3, #4
 800c2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2c2:	e1b2      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c2c4:	2308      	movs	r3, #8
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ca:	e1ae      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c2cc:	2310      	movs	r3, #16
 800c2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2d2:	e1aa      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c2d4:	2320      	movs	r3, #32
 800c2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2da:	e1a6      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c2dc:	2340      	movs	r3, #64	@ 0x40
 800c2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2e2:	e1a2      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c2e4:	2380      	movs	r3, #128	@ 0x80
 800c2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ea:	e19e      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a35      	ldr	r2, [pc, #212]	@ (800c3c8 <UART_SetConfig+0x344>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d130      	bne.n	800c358 <UART_SetConfig+0x2d4>
 800c2f6:	4b31      	ldr	r3, [pc, #196]	@ (800c3bc <UART_SetConfig+0x338>)
 800c2f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2fa:	f003 0307 	and.w	r3, r3, #7
 800c2fe:	2b05      	cmp	r3, #5
 800c300:	d826      	bhi.n	800c350 <UART_SetConfig+0x2cc>
 800c302:	a201      	add	r2, pc, #4	@ (adr r2, 800c308 <UART_SetConfig+0x284>)
 800c304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c308:	0800c321 	.word	0x0800c321
 800c30c:	0800c329 	.word	0x0800c329
 800c310:	0800c331 	.word	0x0800c331
 800c314:	0800c339 	.word	0x0800c339
 800c318:	0800c341 	.word	0x0800c341
 800c31c:	0800c349 	.word	0x0800c349
 800c320:	2300      	movs	r3, #0
 800c322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c326:	e180      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c328:	2304      	movs	r3, #4
 800c32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c32e:	e17c      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c330:	2308      	movs	r3, #8
 800c332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c336:	e178      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c338:	2310      	movs	r3, #16
 800c33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c33e:	e174      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c340:	2320      	movs	r3, #32
 800c342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c346:	e170      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c348:	2340      	movs	r3, #64	@ 0x40
 800c34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c34e:	e16c      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c350:	2380      	movs	r3, #128	@ 0x80
 800c352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c356:	e168      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a1b      	ldr	r2, [pc, #108]	@ (800c3cc <UART_SetConfig+0x348>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d142      	bne.n	800c3e8 <UART_SetConfig+0x364>
 800c362:	4b16      	ldr	r3, [pc, #88]	@ (800c3bc <UART_SetConfig+0x338>)
 800c364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c366:	f003 0307 	and.w	r3, r3, #7
 800c36a:	2b05      	cmp	r3, #5
 800c36c:	d838      	bhi.n	800c3e0 <UART_SetConfig+0x35c>
 800c36e:	a201      	add	r2, pc, #4	@ (adr r2, 800c374 <UART_SetConfig+0x2f0>)
 800c370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c374:	0800c38d 	.word	0x0800c38d
 800c378:	0800c395 	.word	0x0800c395
 800c37c:	0800c39d 	.word	0x0800c39d
 800c380:	0800c3a5 	.word	0x0800c3a5
 800c384:	0800c3d1 	.word	0x0800c3d1
 800c388:	0800c3d9 	.word	0x0800c3d9
 800c38c:	2300      	movs	r3, #0
 800c38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c392:	e14a      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c394:	2304      	movs	r3, #4
 800c396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c39a:	e146      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c39c:	2308      	movs	r3, #8
 800c39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3a2:	e142      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c3a4:	2310      	movs	r3, #16
 800c3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3aa:	e13e      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c3ac:	cfff69f3 	.word	0xcfff69f3
 800c3b0:	58000c00 	.word	0x58000c00
 800c3b4:	11fff4ff 	.word	0x11fff4ff
 800c3b8:	40011000 	.word	0x40011000
 800c3bc:	58024400 	.word	0x58024400
 800c3c0:	40004400 	.word	0x40004400
 800c3c4:	40004800 	.word	0x40004800
 800c3c8:	40004c00 	.word	0x40004c00
 800c3cc:	40005000 	.word	0x40005000
 800c3d0:	2320      	movs	r3, #32
 800c3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3d6:	e128      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c3d8:	2340      	movs	r3, #64	@ 0x40
 800c3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3de:	e124      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c3e0:	2380      	movs	r3, #128	@ 0x80
 800c3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3e6:	e120      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4acb      	ldr	r2, [pc, #812]	@ (800c71c <UART_SetConfig+0x698>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d176      	bne.n	800c4e0 <UART_SetConfig+0x45c>
 800c3f2:	4bcb      	ldr	r3, [pc, #812]	@ (800c720 <UART_SetConfig+0x69c>)
 800c3f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c3fa:	2b28      	cmp	r3, #40	@ 0x28
 800c3fc:	d86c      	bhi.n	800c4d8 <UART_SetConfig+0x454>
 800c3fe:	a201      	add	r2, pc, #4	@ (adr r2, 800c404 <UART_SetConfig+0x380>)
 800c400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c404:	0800c4a9 	.word	0x0800c4a9
 800c408:	0800c4d9 	.word	0x0800c4d9
 800c40c:	0800c4d9 	.word	0x0800c4d9
 800c410:	0800c4d9 	.word	0x0800c4d9
 800c414:	0800c4d9 	.word	0x0800c4d9
 800c418:	0800c4d9 	.word	0x0800c4d9
 800c41c:	0800c4d9 	.word	0x0800c4d9
 800c420:	0800c4d9 	.word	0x0800c4d9
 800c424:	0800c4b1 	.word	0x0800c4b1
 800c428:	0800c4d9 	.word	0x0800c4d9
 800c42c:	0800c4d9 	.word	0x0800c4d9
 800c430:	0800c4d9 	.word	0x0800c4d9
 800c434:	0800c4d9 	.word	0x0800c4d9
 800c438:	0800c4d9 	.word	0x0800c4d9
 800c43c:	0800c4d9 	.word	0x0800c4d9
 800c440:	0800c4d9 	.word	0x0800c4d9
 800c444:	0800c4b9 	.word	0x0800c4b9
 800c448:	0800c4d9 	.word	0x0800c4d9
 800c44c:	0800c4d9 	.word	0x0800c4d9
 800c450:	0800c4d9 	.word	0x0800c4d9
 800c454:	0800c4d9 	.word	0x0800c4d9
 800c458:	0800c4d9 	.word	0x0800c4d9
 800c45c:	0800c4d9 	.word	0x0800c4d9
 800c460:	0800c4d9 	.word	0x0800c4d9
 800c464:	0800c4c1 	.word	0x0800c4c1
 800c468:	0800c4d9 	.word	0x0800c4d9
 800c46c:	0800c4d9 	.word	0x0800c4d9
 800c470:	0800c4d9 	.word	0x0800c4d9
 800c474:	0800c4d9 	.word	0x0800c4d9
 800c478:	0800c4d9 	.word	0x0800c4d9
 800c47c:	0800c4d9 	.word	0x0800c4d9
 800c480:	0800c4d9 	.word	0x0800c4d9
 800c484:	0800c4c9 	.word	0x0800c4c9
 800c488:	0800c4d9 	.word	0x0800c4d9
 800c48c:	0800c4d9 	.word	0x0800c4d9
 800c490:	0800c4d9 	.word	0x0800c4d9
 800c494:	0800c4d9 	.word	0x0800c4d9
 800c498:	0800c4d9 	.word	0x0800c4d9
 800c49c:	0800c4d9 	.word	0x0800c4d9
 800c4a0:	0800c4d9 	.word	0x0800c4d9
 800c4a4:	0800c4d1 	.word	0x0800c4d1
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ae:	e0bc      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c4b0:	2304      	movs	r3, #4
 800c4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4b6:	e0b8      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c4b8:	2308      	movs	r3, #8
 800c4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4be:	e0b4      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c4c0:	2310      	movs	r3, #16
 800c4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4c6:	e0b0      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c4c8:	2320      	movs	r3, #32
 800c4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ce:	e0ac      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c4d0:	2340      	movs	r3, #64	@ 0x40
 800c4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4d6:	e0a8      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c4d8:	2380      	movs	r3, #128	@ 0x80
 800c4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4de:	e0a4      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4a8f      	ldr	r2, [pc, #572]	@ (800c724 <UART_SetConfig+0x6a0>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d130      	bne.n	800c54c <UART_SetConfig+0x4c8>
 800c4ea:	4b8d      	ldr	r3, [pc, #564]	@ (800c720 <UART_SetConfig+0x69c>)
 800c4ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4ee:	f003 0307 	and.w	r3, r3, #7
 800c4f2:	2b05      	cmp	r3, #5
 800c4f4:	d826      	bhi.n	800c544 <UART_SetConfig+0x4c0>
 800c4f6:	a201      	add	r2, pc, #4	@ (adr r2, 800c4fc <UART_SetConfig+0x478>)
 800c4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4fc:	0800c515 	.word	0x0800c515
 800c500:	0800c51d 	.word	0x0800c51d
 800c504:	0800c525 	.word	0x0800c525
 800c508:	0800c52d 	.word	0x0800c52d
 800c50c:	0800c535 	.word	0x0800c535
 800c510:	0800c53d 	.word	0x0800c53d
 800c514:	2300      	movs	r3, #0
 800c516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c51a:	e086      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c51c:	2304      	movs	r3, #4
 800c51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c522:	e082      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c524:	2308      	movs	r3, #8
 800c526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c52a:	e07e      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c52c:	2310      	movs	r3, #16
 800c52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c532:	e07a      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c534:	2320      	movs	r3, #32
 800c536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c53a:	e076      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c53c:	2340      	movs	r3, #64	@ 0x40
 800c53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c542:	e072      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c544:	2380      	movs	r3, #128	@ 0x80
 800c546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c54a:	e06e      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a75      	ldr	r2, [pc, #468]	@ (800c728 <UART_SetConfig+0x6a4>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d130      	bne.n	800c5b8 <UART_SetConfig+0x534>
 800c556:	4b72      	ldr	r3, [pc, #456]	@ (800c720 <UART_SetConfig+0x69c>)
 800c558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c55a:	f003 0307 	and.w	r3, r3, #7
 800c55e:	2b05      	cmp	r3, #5
 800c560:	d826      	bhi.n	800c5b0 <UART_SetConfig+0x52c>
 800c562:	a201      	add	r2, pc, #4	@ (adr r2, 800c568 <UART_SetConfig+0x4e4>)
 800c564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c568:	0800c581 	.word	0x0800c581
 800c56c:	0800c589 	.word	0x0800c589
 800c570:	0800c591 	.word	0x0800c591
 800c574:	0800c599 	.word	0x0800c599
 800c578:	0800c5a1 	.word	0x0800c5a1
 800c57c:	0800c5a9 	.word	0x0800c5a9
 800c580:	2300      	movs	r3, #0
 800c582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c586:	e050      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c588:	2304      	movs	r3, #4
 800c58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c58e:	e04c      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c590:	2308      	movs	r3, #8
 800c592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c596:	e048      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c598:	2310      	movs	r3, #16
 800c59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c59e:	e044      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c5a0:	2320      	movs	r3, #32
 800c5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5a6:	e040      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c5a8:	2340      	movs	r3, #64	@ 0x40
 800c5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ae:	e03c      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c5b0:	2380      	movs	r3, #128	@ 0x80
 800c5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5b6:	e038      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a5b      	ldr	r2, [pc, #364]	@ (800c72c <UART_SetConfig+0x6a8>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d130      	bne.n	800c624 <UART_SetConfig+0x5a0>
 800c5c2:	4b57      	ldr	r3, [pc, #348]	@ (800c720 <UART_SetConfig+0x69c>)
 800c5c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5c6:	f003 0307 	and.w	r3, r3, #7
 800c5ca:	2b05      	cmp	r3, #5
 800c5cc:	d826      	bhi.n	800c61c <UART_SetConfig+0x598>
 800c5ce:	a201      	add	r2, pc, #4	@ (adr r2, 800c5d4 <UART_SetConfig+0x550>)
 800c5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d4:	0800c5ed 	.word	0x0800c5ed
 800c5d8:	0800c5f5 	.word	0x0800c5f5
 800c5dc:	0800c5fd 	.word	0x0800c5fd
 800c5e0:	0800c605 	.word	0x0800c605
 800c5e4:	0800c60d 	.word	0x0800c60d
 800c5e8:	0800c615 	.word	0x0800c615
 800c5ec:	2302      	movs	r3, #2
 800c5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5f2:	e01a      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c5f4:	2304      	movs	r3, #4
 800c5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5fa:	e016      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c5fc:	2308      	movs	r3, #8
 800c5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c602:	e012      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c604:	2310      	movs	r3, #16
 800c606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c60a:	e00e      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c60c:	2320      	movs	r3, #32
 800c60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c612:	e00a      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c614:	2340      	movs	r3, #64	@ 0x40
 800c616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c61a:	e006      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c61c:	2380      	movs	r3, #128	@ 0x80
 800c61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c622:	e002      	b.n	800c62a <UART_SetConfig+0x5a6>
 800c624:	2380      	movs	r3, #128	@ 0x80
 800c626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4a3f      	ldr	r2, [pc, #252]	@ (800c72c <UART_SetConfig+0x6a8>)
 800c630:	4293      	cmp	r3, r2
 800c632:	f040 80f8 	bne.w	800c826 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c636:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c63a:	2b20      	cmp	r3, #32
 800c63c:	dc46      	bgt.n	800c6cc <UART_SetConfig+0x648>
 800c63e:	2b02      	cmp	r3, #2
 800c640:	f2c0 8082 	blt.w	800c748 <UART_SetConfig+0x6c4>
 800c644:	3b02      	subs	r3, #2
 800c646:	2b1e      	cmp	r3, #30
 800c648:	d87e      	bhi.n	800c748 <UART_SetConfig+0x6c4>
 800c64a:	a201      	add	r2, pc, #4	@ (adr r2, 800c650 <UART_SetConfig+0x5cc>)
 800c64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c650:	0800c6d3 	.word	0x0800c6d3
 800c654:	0800c749 	.word	0x0800c749
 800c658:	0800c6db 	.word	0x0800c6db
 800c65c:	0800c749 	.word	0x0800c749
 800c660:	0800c749 	.word	0x0800c749
 800c664:	0800c749 	.word	0x0800c749
 800c668:	0800c6eb 	.word	0x0800c6eb
 800c66c:	0800c749 	.word	0x0800c749
 800c670:	0800c749 	.word	0x0800c749
 800c674:	0800c749 	.word	0x0800c749
 800c678:	0800c749 	.word	0x0800c749
 800c67c:	0800c749 	.word	0x0800c749
 800c680:	0800c749 	.word	0x0800c749
 800c684:	0800c749 	.word	0x0800c749
 800c688:	0800c6fb 	.word	0x0800c6fb
 800c68c:	0800c749 	.word	0x0800c749
 800c690:	0800c749 	.word	0x0800c749
 800c694:	0800c749 	.word	0x0800c749
 800c698:	0800c749 	.word	0x0800c749
 800c69c:	0800c749 	.word	0x0800c749
 800c6a0:	0800c749 	.word	0x0800c749
 800c6a4:	0800c749 	.word	0x0800c749
 800c6a8:	0800c749 	.word	0x0800c749
 800c6ac:	0800c749 	.word	0x0800c749
 800c6b0:	0800c749 	.word	0x0800c749
 800c6b4:	0800c749 	.word	0x0800c749
 800c6b8:	0800c749 	.word	0x0800c749
 800c6bc:	0800c749 	.word	0x0800c749
 800c6c0:	0800c749 	.word	0x0800c749
 800c6c4:	0800c749 	.word	0x0800c749
 800c6c8:	0800c73b 	.word	0x0800c73b
 800c6cc:	2b40      	cmp	r3, #64	@ 0x40
 800c6ce:	d037      	beq.n	800c740 <UART_SetConfig+0x6bc>
 800c6d0:	e03a      	b.n	800c748 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c6d2:	f7fb fc05 	bl	8007ee0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c6d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c6d8:	e03c      	b.n	800c754 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7fb fc14 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6e8:	e034      	b.n	800c754 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6ea:	f107 0318 	add.w	r3, r7, #24
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7fb fd60 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c6f4:	69fb      	ldr	r3, [r7, #28]
 800c6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6f8:	e02c      	b.n	800c754 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6fa:	4b09      	ldr	r3, [pc, #36]	@ (800c720 <UART_SetConfig+0x69c>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f003 0320 	and.w	r3, r3, #32
 800c702:	2b00      	cmp	r3, #0
 800c704:	d016      	beq.n	800c734 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c706:	4b06      	ldr	r3, [pc, #24]	@ (800c720 <UART_SetConfig+0x69c>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	08db      	lsrs	r3, r3, #3
 800c70c:	f003 0303 	and.w	r3, r3, #3
 800c710:	4a07      	ldr	r2, [pc, #28]	@ (800c730 <UART_SetConfig+0x6ac>)
 800c712:	fa22 f303 	lsr.w	r3, r2, r3
 800c716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c718:	e01c      	b.n	800c754 <UART_SetConfig+0x6d0>
 800c71a:	bf00      	nop
 800c71c:	40011400 	.word	0x40011400
 800c720:	58024400 	.word	0x58024400
 800c724:	40007800 	.word	0x40007800
 800c728:	40007c00 	.word	0x40007c00
 800c72c:	58000c00 	.word	0x58000c00
 800c730:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c734:	4b9d      	ldr	r3, [pc, #628]	@ (800c9ac <UART_SetConfig+0x928>)
 800c736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c738:	e00c      	b.n	800c754 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c73a:	4b9d      	ldr	r3, [pc, #628]	@ (800c9b0 <UART_SetConfig+0x92c>)
 800c73c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c73e:	e009      	b.n	800c754 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c740:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c746:	e005      	b.n	800c754 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c748:	2300      	movs	r3, #0
 800c74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c74c:	2301      	movs	r3, #1
 800c74e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c752:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c756:	2b00      	cmp	r3, #0
 800c758:	f000 81de 	beq.w	800cb18 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c760:	4a94      	ldr	r2, [pc, #592]	@ (800c9b4 <UART_SetConfig+0x930>)
 800c762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c766:	461a      	mov	r2, r3
 800c768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c76a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c76e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	685a      	ldr	r2, [r3, #4]
 800c774:	4613      	mov	r3, r2
 800c776:	005b      	lsls	r3, r3, #1
 800c778:	4413      	add	r3, r2
 800c77a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d305      	bcc.n	800c78c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c788:	429a      	cmp	r2, r3
 800c78a:	d903      	bls.n	800c794 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c78c:	2301      	movs	r3, #1
 800c78e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c792:	e1c1      	b.n	800cb18 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c796:	2200      	movs	r2, #0
 800c798:	60bb      	str	r3, [r7, #8]
 800c79a:	60fa      	str	r2, [r7, #12]
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7a0:	4a84      	ldr	r2, [pc, #528]	@ (800c9b4 <UART_SetConfig+0x930>)
 800c7a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	603b      	str	r3, [r7, #0]
 800c7ac:	607a      	str	r2, [r7, #4]
 800c7ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c7b6:	f7f3 fdeb 	bl	8000390 <__aeabi_uldivmod>
 800c7ba:	4602      	mov	r2, r0
 800c7bc:	460b      	mov	r3, r1
 800c7be:	4610      	mov	r0, r2
 800c7c0:	4619      	mov	r1, r3
 800c7c2:	f04f 0200 	mov.w	r2, #0
 800c7c6:	f04f 0300 	mov.w	r3, #0
 800c7ca:	020b      	lsls	r3, r1, #8
 800c7cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c7d0:	0202      	lsls	r2, r0, #8
 800c7d2:	6979      	ldr	r1, [r7, #20]
 800c7d4:	6849      	ldr	r1, [r1, #4]
 800c7d6:	0849      	lsrs	r1, r1, #1
 800c7d8:	2000      	movs	r0, #0
 800c7da:	460c      	mov	r4, r1
 800c7dc:	4605      	mov	r5, r0
 800c7de:	eb12 0804 	adds.w	r8, r2, r4
 800c7e2:	eb43 0905 	adc.w	r9, r3, r5
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	469a      	mov	sl, r3
 800c7ee:	4693      	mov	fp, r2
 800c7f0:	4652      	mov	r2, sl
 800c7f2:	465b      	mov	r3, fp
 800c7f4:	4640      	mov	r0, r8
 800c7f6:	4649      	mov	r1, r9
 800c7f8:	f7f3 fdca 	bl	8000390 <__aeabi_uldivmod>
 800c7fc:	4602      	mov	r2, r0
 800c7fe:	460b      	mov	r3, r1
 800c800:	4613      	mov	r3, r2
 800c802:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c806:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c80a:	d308      	bcc.n	800c81e <UART_SetConfig+0x79a>
 800c80c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c80e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c812:	d204      	bcs.n	800c81e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c81a:	60da      	str	r2, [r3, #12]
 800c81c:	e17c      	b.n	800cb18 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c81e:	2301      	movs	r3, #1
 800c820:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c824:	e178      	b.n	800cb18 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	69db      	ldr	r3, [r3, #28]
 800c82a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c82e:	f040 80c5 	bne.w	800c9bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c832:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c836:	2b20      	cmp	r3, #32
 800c838:	dc48      	bgt.n	800c8cc <UART_SetConfig+0x848>
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	db7b      	blt.n	800c936 <UART_SetConfig+0x8b2>
 800c83e:	2b20      	cmp	r3, #32
 800c840:	d879      	bhi.n	800c936 <UART_SetConfig+0x8b2>
 800c842:	a201      	add	r2, pc, #4	@ (adr r2, 800c848 <UART_SetConfig+0x7c4>)
 800c844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c848:	0800c8d3 	.word	0x0800c8d3
 800c84c:	0800c8db 	.word	0x0800c8db
 800c850:	0800c937 	.word	0x0800c937
 800c854:	0800c937 	.word	0x0800c937
 800c858:	0800c8e3 	.word	0x0800c8e3
 800c85c:	0800c937 	.word	0x0800c937
 800c860:	0800c937 	.word	0x0800c937
 800c864:	0800c937 	.word	0x0800c937
 800c868:	0800c8f3 	.word	0x0800c8f3
 800c86c:	0800c937 	.word	0x0800c937
 800c870:	0800c937 	.word	0x0800c937
 800c874:	0800c937 	.word	0x0800c937
 800c878:	0800c937 	.word	0x0800c937
 800c87c:	0800c937 	.word	0x0800c937
 800c880:	0800c937 	.word	0x0800c937
 800c884:	0800c937 	.word	0x0800c937
 800c888:	0800c903 	.word	0x0800c903
 800c88c:	0800c937 	.word	0x0800c937
 800c890:	0800c937 	.word	0x0800c937
 800c894:	0800c937 	.word	0x0800c937
 800c898:	0800c937 	.word	0x0800c937
 800c89c:	0800c937 	.word	0x0800c937
 800c8a0:	0800c937 	.word	0x0800c937
 800c8a4:	0800c937 	.word	0x0800c937
 800c8a8:	0800c937 	.word	0x0800c937
 800c8ac:	0800c937 	.word	0x0800c937
 800c8b0:	0800c937 	.word	0x0800c937
 800c8b4:	0800c937 	.word	0x0800c937
 800c8b8:	0800c937 	.word	0x0800c937
 800c8bc:	0800c937 	.word	0x0800c937
 800c8c0:	0800c937 	.word	0x0800c937
 800c8c4:	0800c937 	.word	0x0800c937
 800c8c8:	0800c929 	.word	0x0800c929
 800c8cc:	2b40      	cmp	r3, #64	@ 0x40
 800c8ce:	d02e      	beq.n	800c92e <UART_SetConfig+0x8aa>
 800c8d0:	e031      	b.n	800c936 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8d2:	f7f9 fb0d 	bl	8005ef0 <HAL_RCC_GetPCLK1Freq>
 800c8d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c8d8:	e033      	b.n	800c942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c8da:	f7f9 fb1f 	bl	8005f1c <HAL_RCC_GetPCLK2Freq>
 800c8de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c8e0:	e02f      	b.n	800c942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7fb fb10 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8f0:	e027      	b.n	800c942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8f2:	f107 0318 	add.w	r3, r7, #24
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7fb fc5c 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c8fc:	69fb      	ldr	r3, [r7, #28]
 800c8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c900:	e01f      	b.n	800c942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c902:	4b2d      	ldr	r3, [pc, #180]	@ (800c9b8 <UART_SetConfig+0x934>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f003 0320 	and.w	r3, r3, #32
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d009      	beq.n	800c922 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c90e:	4b2a      	ldr	r3, [pc, #168]	@ (800c9b8 <UART_SetConfig+0x934>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	08db      	lsrs	r3, r3, #3
 800c914:	f003 0303 	and.w	r3, r3, #3
 800c918:	4a24      	ldr	r2, [pc, #144]	@ (800c9ac <UART_SetConfig+0x928>)
 800c91a:	fa22 f303 	lsr.w	r3, r2, r3
 800c91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c920:	e00f      	b.n	800c942 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c922:	4b22      	ldr	r3, [pc, #136]	@ (800c9ac <UART_SetConfig+0x928>)
 800c924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c926:	e00c      	b.n	800c942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c928:	4b21      	ldr	r3, [pc, #132]	@ (800c9b0 <UART_SetConfig+0x92c>)
 800c92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c92c:	e009      	b.n	800c942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c92e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c934:	e005      	b.n	800c942 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c936:	2300      	movs	r3, #0
 800c938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c93a:	2301      	movs	r3, #1
 800c93c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c940:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c944:	2b00      	cmp	r3, #0
 800c946:	f000 80e7 	beq.w	800cb18 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c94e:	4a19      	ldr	r2, [pc, #100]	@ (800c9b4 <UART_SetConfig+0x930>)
 800c950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c954:	461a      	mov	r2, r3
 800c956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c958:	fbb3 f3f2 	udiv	r3, r3, r2
 800c95c:	005a      	lsls	r2, r3, #1
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	085b      	lsrs	r3, r3, #1
 800c964:	441a      	add	r2, r3
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c96e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c972:	2b0f      	cmp	r3, #15
 800c974:	d916      	bls.n	800c9a4 <UART_SetConfig+0x920>
 800c976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c97c:	d212      	bcs.n	800c9a4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c980:	b29b      	uxth	r3, r3
 800c982:	f023 030f 	bic.w	r3, r3, #15
 800c986:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c98a:	085b      	lsrs	r3, r3, #1
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	f003 0307 	and.w	r3, r3, #7
 800c992:	b29a      	uxth	r2, r3
 800c994:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c996:	4313      	orrs	r3, r2
 800c998:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c9a0:	60da      	str	r2, [r3, #12]
 800c9a2:	e0b9      	b.n	800cb18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c9aa:	e0b5      	b.n	800cb18 <UART_SetConfig+0xa94>
 800c9ac:	03d09000 	.word	0x03d09000
 800c9b0:	003d0900 	.word	0x003d0900
 800c9b4:	08017db0 	.word	0x08017db0
 800c9b8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c9bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c9c0:	2b20      	cmp	r3, #32
 800c9c2:	dc49      	bgt.n	800ca58 <UART_SetConfig+0x9d4>
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	db7c      	blt.n	800cac2 <UART_SetConfig+0xa3e>
 800c9c8:	2b20      	cmp	r3, #32
 800c9ca:	d87a      	bhi.n	800cac2 <UART_SetConfig+0xa3e>
 800c9cc:	a201      	add	r2, pc, #4	@ (adr r2, 800c9d4 <UART_SetConfig+0x950>)
 800c9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d2:	bf00      	nop
 800c9d4:	0800ca5f 	.word	0x0800ca5f
 800c9d8:	0800ca67 	.word	0x0800ca67
 800c9dc:	0800cac3 	.word	0x0800cac3
 800c9e0:	0800cac3 	.word	0x0800cac3
 800c9e4:	0800ca6f 	.word	0x0800ca6f
 800c9e8:	0800cac3 	.word	0x0800cac3
 800c9ec:	0800cac3 	.word	0x0800cac3
 800c9f0:	0800cac3 	.word	0x0800cac3
 800c9f4:	0800ca7f 	.word	0x0800ca7f
 800c9f8:	0800cac3 	.word	0x0800cac3
 800c9fc:	0800cac3 	.word	0x0800cac3
 800ca00:	0800cac3 	.word	0x0800cac3
 800ca04:	0800cac3 	.word	0x0800cac3
 800ca08:	0800cac3 	.word	0x0800cac3
 800ca0c:	0800cac3 	.word	0x0800cac3
 800ca10:	0800cac3 	.word	0x0800cac3
 800ca14:	0800ca8f 	.word	0x0800ca8f
 800ca18:	0800cac3 	.word	0x0800cac3
 800ca1c:	0800cac3 	.word	0x0800cac3
 800ca20:	0800cac3 	.word	0x0800cac3
 800ca24:	0800cac3 	.word	0x0800cac3
 800ca28:	0800cac3 	.word	0x0800cac3
 800ca2c:	0800cac3 	.word	0x0800cac3
 800ca30:	0800cac3 	.word	0x0800cac3
 800ca34:	0800cac3 	.word	0x0800cac3
 800ca38:	0800cac3 	.word	0x0800cac3
 800ca3c:	0800cac3 	.word	0x0800cac3
 800ca40:	0800cac3 	.word	0x0800cac3
 800ca44:	0800cac3 	.word	0x0800cac3
 800ca48:	0800cac3 	.word	0x0800cac3
 800ca4c:	0800cac3 	.word	0x0800cac3
 800ca50:	0800cac3 	.word	0x0800cac3
 800ca54:	0800cab5 	.word	0x0800cab5
 800ca58:	2b40      	cmp	r3, #64	@ 0x40
 800ca5a:	d02e      	beq.n	800caba <UART_SetConfig+0xa36>
 800ca5c:	e031      	b.n	800cac2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca5e:	f7f9 fa47 	bl	8005ef0 <HAL_RCC_GetPCLK1Freq>
 800ca62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ca64:	e033      	b.n	800cace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca66:	f7f9 fa59 	bl	8005f1c <HAL_RCC_GetPCLK2Freq>
 800ca6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ca6c:	e02f      	b.n	800cace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7fb fa4a 	bl	8007f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca7c:	e027      	b.n	800cace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca7e:	f107 0318 	add.w	r3, r7, #24
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7fb fb96 	bl	80081b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca88:	69fb      	ldr	r3, [r7, #28]
 800ca8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca8c:	e01f      	b.n	800cace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca8e:	4b2d      	ldr	r3, [pc, #180]	@ (800cb44 <UART_SetConfig+0xac0>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f003 0320 	and.w	r3, r3, #32
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d009      	beq.n	800caae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca9a:	4b2a      	ldr	r3, [pc, #168]	@ (800cb44 <UART_SetConfig+0xac0>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	08db      	lsrs	r3, r3, #3
 800caa0:	f003 0303 	and.w	r3, r3, #3
 800caa4:	4a28      	ldr	r2, [pc, #160]	@ (800cb48 <UART_SetConfig+0xac4>)
 800caa6:	fa22 f303 	lsr.w	r3, r2, r3
 800caaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800caac:	e00f      	b.n	800cace <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800caae:	4b26      	ldr	r3, [pc, #152]	@ (800cb48 <UART_SetConfig+0xac4>)
 800cab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cab2:	e00c      	b.n	800cace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cab4:	4b25      	ldr	r3, [pc, #148]	@ (800cb4c <UART_SetConfig+0xac8>)
 800cab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cab8:	e009      	b.n	800cace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800caba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cabe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cac0:	e005      	b.n	800cace <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cac2:	2300      	movs	r3, #0
 800cac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cac6:	2301      	movs	r3, #1
 800cac8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cacc:	bf00      	nop
    }

    if (pclk != 0U)
 800cace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d021      	beq.n	800cb18 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cad8:	4a1d      	ldr	r2, [pc, #116]	@ (800cb50 <UART_SetConfig+0xacc>)
 800cada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cade:	461a      	mov	r2, r3
 800cae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cae2:	fbb3 f2f2 	udiv	r2, r3, r2
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	085b      	lsrs	r3, r3, #1
 800caec:	441a      	add	r2, r3
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800caf6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800caf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cafa:	2b0f      	cmp	r3, #15
 800cafc:	d909      	bls.n	800cb12 <UART_SetConfig+0xa8e>
 800cafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb04:	d205      	bcs.n	800cb12 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cb06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb08:	b29a      	uxth	r2, r3
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	60da      	str	r2, [r3, #12]
 800cb10:	e002      	b.n	800cb18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cb12:	2301      	movs	r3, #1
 800cb14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	2201      	movs	r2, #1
 800cb24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	2200      	movs	r2, #0
 800cb32:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cb34:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3748      	adds	r7, #72	@ 0x48
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb42:	bf00      	nop
 800cb44:	58024400 	.word	0x58024400
 800cb48:	03d09000 	.word	0x03d09000
 800cb4c:	003d0900 	.word	0x003d0900
 800cb50:	08017db0 	.word	0x08017db0

0800cb54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb60:	f003 0301 	and.w	r3, r3, #1
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d00a      	beq.n	800cb7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	430a      	orrs	r2, r1
 800cb7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb82:	f003 0302 	and.w	r3, r3, #2
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00a      	beq.n	800cba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	430a      	orrs	r2, r1
 800cb9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cba4:	f003 0304 	and.w	r3, r3, #4
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d00a      	beq.n	800cbc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	685b      	ldr	r3, [r3, #4]
 800cbb2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	430a      	orrs	r2, r1
 800cbc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbc6:	f003 0308 	and.w	r3, r3, #8
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00a      	beq.n	800cbe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	430a      	orrs	r2, r1
 800cbe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbe8:	f003 0310 	and.w	r3, r3, #16
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d00a      	beq.n	800cc06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	689b      	ldr	r3, [r3, #8]
 800cbf6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	430a      	orrs	r2, r1
 800cc04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc0a:	f003 0320 	and.w	r3, r3, #32
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d00a      	beq.n	800cc28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	430a      	orrs	r2, r1
 800cc26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d01a      	beq.n	800cc6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	430a      	orrs	r2, r1
 800cc48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc52:	d10a      	bne.n	800cc6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	430a      	orrs	r2, r1
 800cc68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d00a      	beq.n	800cc8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	430a      	orrs	r2, r1
 800cc8a:	605a      	str	r2, [r3, #4]
  }
}
 800cc8c:	bf00      	nop
 800cc8e:	370c      	adds	r7, #12
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b098      	sub	sp, #96	@ 0x60
 800cc9c:	af02      	add	r7, sp, #8
 800cc9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2200      	movs	r2, #0
 800cca4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cca8:	f7f7 f84e 	bl	8003d48 <HAL_GetTick>
 800ccac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f003 0308 	and.w	r3, r3, #8
 800ccb8:	2b08      	cmp	r3, #8
 800ccba:	d12f      	bne.n	800cd1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ccc0:	9300      	str	r3, [sp, #0]
 800ccc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 f88e 	bl	800cdec <UART_WaitOnFlagUntilTimeout>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d022      	beq.n	800cd1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccde:	e853 3f00 	ldrex	r3, [r3]
 800cce2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cce6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ccea:	653b      	str	r3, [r7, #80]	@ 0x50
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccf4:	647b      	str	r3, [r7, #68]	@ 0x44
 800ccf6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ccfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ccfc:	e841 2300 	strex	r3, r2, [r1]
 800cd00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cd02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1e6      	bne.n	800ccd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2220      	movs	r2, #32
 800cd0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd18:	2303      	movs	r3, #3
 800cd1a:	e063      	b.n	800cde4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f003 0304 	and.w	r3, r3, #4
 800cd26:	2b04      	cmp	r3, #4
 800cd28:	d149      	bne.n	800cdbe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd2a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cd2e:	9300      	str	r3, [sp, #0]
 800cd30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd32:	2200      	movs	r2, #0
 800cd34:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f000 f857 	bl	800cdec <UART_WaitOnFlagUntilTimeout>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d03c      	beq.n	800cdbe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd4c:	e853 3f00 	ldrex	r3, [r3]
 800cd50:	623b      	str	r3, [r7, #32]
   return(result);
 800cd52:	6a3b      	ldr	r3, [r7, #32]
 800cd54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	461a      	mov	r2, r3
 800cd60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd62:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd64:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd6a:	e841 2300 	strex	r3, r2, [r1]
 800cd6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d1e6      	bne.n	800cd44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	3308      	adds	r3, #8
 800cd7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	e853 3f00 	ldrex	r3, [r3]
 800cd84:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f023 0301 	bic.w	r3, r3, #1
 800cd8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	3308      	adds	r3, #8
 800cd94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd96:	61fa      	str	r2, [r7, #28]
 800cd98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd9a:	69b9      	ldr	r1, [r7, #24]
 800cd9c:	69fa      	ldr	r2, [r7, #28]
 800cd9e:	e841 2300 	strex	r3, r2, [r1]
 800cda2:	617b      	str	r3, [r7, #20]
   return(result);
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d1e5      	bne.n	800cd76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2220      	movs	r2, #32
 800cdae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cdba:	2303      	movs	r3, #3
 800cdbc:	e012      	b.n	800cde4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2220      	movs	r2, #32
 800cdc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2220      	movs	r2, #32
 800cdca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2200      	movs	r2, #0
 800cdde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cde2:	2300      	movs	r3, #0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3758      	adds	r7, #88	@ 0x58
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	603b      	str	r3, [r7, #0]
 800cdf8:	4613      	mov	r3, r2
 800cdfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdfc:	e049      	b.n	800ce92 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cdfe:	69bb      	ldr	r3, [r7, #24]
 800ce00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ce04:	d045      	beq.n	800ce92 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce06:	f7f6 ff9f 	bl	8003d48 <HAL_GetTick>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	1ad3      	subs	r3, r2, r3
 800ce10:	69ba      	ldr	r2, [r7, #24]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d302      	bcc.n	800ce1c <UART_WaitOnFlagUntilTimeout+0x30>
 800ce16:	69bb      	ldr	r3, [r7, #24]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d101      	bne.n	800ce20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ce1c:	2303      	movs	r3, #3
 800ce1e:	e048      	b.n	800ceb2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f003 0304 	and.w	r3, r3, #4
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d031      	beq.n	800ce92 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	69db      	ldr	r3, [r3, #28]
 800ce34:	f003 0308 	and.w	r3, r3, #8
 800ce38:	2b08      	cmp	r3, #8
 800ce3a:	d110      	bne.n	800ce5e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	2208      	movs	r2, #8
 800ce42:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ce44:	68f8      	ldr	r0, [r7, #12]
 800ce46:	f000 f95b 	bl	800d100 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2208      	movs	r2, #8
 800ce4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2200      	movs	r2, #0
 800ce56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	e029      	b.n	800ceb2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	69db      	ldr	r3, [r3, #28]
 800ce64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ce68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce6c:	d111      	bne.n	800ce92 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ce76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce78:	68f8      	ldr	r0, [r7, #12]
 800ce7a:	f000 f941 	bl	800d100 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2220      	movs	r2, #32
 800ce82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ce8e:	2303      	movs	r3, #3
 800ce90:	e00f      	b.n	800ceb2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	69da      	ldr	r2, [r3, #28]
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	4013      	ands	r3, r2
 800ce9c:	68ba      	ldr	r2, [r7, #8]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	bf0c      	ite	eq
 800cea2:	2301      	moveq	r3, #1
 800cea4:	2300      	movne	r3, #0
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	461a      	mov	r2, r3
 800ceaa:	79fb      	ldrb	r3, [r7, #7]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d0a6      	beq.n	800cdfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ceb0:	2300      	movs	r3, #0
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3710      	adds	r7, #16
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
	...

0800cebc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b0a3      	sub	sp, #140	@ 0x8c
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	4613      	mov	r3, r2
 800cec8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	68ba      	ldr	r2, [r7, #8]
 800cece:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	88fa      	ldrh	r2, [r7, #6]
 800ced4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	88fa      	ldrh	r2, [r7, #6]
 800cedc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2200      	movs	r2, #0
 800cee4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	689b      	ldr	r3, [r3, #8]
 800ceea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ceee:	d10e      	bne.n	800cf0e <UART_Start_Receive_IT+0x52>
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	691b      	ldr	r3, [r3, #16]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d105      	bne.n	800cf04 <UART_Start_Receive_IT+0x48>
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800cefe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cf02:	e02d      	b.n	800cf60 <UART_Start_Receive_IT+0xa4>
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	22ff      	movs	r2, #255	@ 0xff
 800cf08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cf0c:	e028      	b.n	800cf60 <UART_Start_Receive_IT+0xa4>
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	689b      	ldr	r3, [r3, #8]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d10d      	bne.n	800cf32 <UART_Start_Receive_IT+0x76>
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	691b      	ldr	r3, [r3, #16]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d104      	bne.n	800cf28 <UART_Start_Receive_IT+0x6c>
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	22ff      	movs	r2, #255	@ 0xff
 800cf22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cf26:	e01b      	b.n	800cf60 <UART_Start_Receive_IT+0xa4>
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	227f      	movs	r2, #127	@ 0x7f
 800cf2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cf30:	e016      	b.n	800cf60 <UART_Start_Receive_IT+0xa4>
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	689b      	ldr	r3, [r3, #8]
 800cf36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf3a:	d10d      	bne.n	800cf58 <UART_Start_Receive_IT+0x9c>
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	691b      	ldr	r3, [r3, #16]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d104      	bne.n	800cf4e <UART_Start_Receive_IT+0x92>
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	227f      	movs	r2, #127	@ 0x7f
 800cf48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cf4c:	e008      	b.n	800cf60 <UART_Start_Receive_IT+0xa4>
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	223f      	movs	r2, #63	@ 0x3f
 800cf52:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cf56:	e003      	b.n	800cf60 <UART_Start_Receive_IT+0xa4>
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2200      	movs	r2, #0
 800cf64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2222      	movs	r2, #34	@ 0x22
 800cf6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	3308      	adds	r3, #8
 800cf76:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf7a:	e853 3f00 	ldrex	r3, [r3]
 800cf7e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800cf80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf82:	f043 0301 	orr.w	r3, r3, #1
 800cf86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	3308      	adds	r3, #8
 800cf90:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800cf94:	673a      	str	r2, [r7, #112]	@ 0x70
 800cf96:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf98:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cf9a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800cf9c:	e841 2300 	strex	r3, r2, [r1]
 800cfa0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800cfa2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d1e3      	bne.n	800cf70 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfb0:	d14f      	bne.n	800d052 <UART_Start_Receive_IT+0x196>
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cfb8:	88fa      	ldrh	r2, [r7, #6]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d349      	bcc.n	800d052 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	689b      	ldr	r3, [r3, #8]
 800cfc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cfc6:	d107      	bne.n	800cfd8 <UART_Start_Receive_IT+0x11c>
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	691b      	ldr	r3, [r3, #16]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d103      	bne.n	800cfd8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	4a47      	ldr	r2, [pc, #284]	@ (800d0f0 <UART_Start_Receive_IT+0x234>)
 800cfd4:	675a      	str	r2, [r3, #116]	@ 0x74
 800cfd6:	e002      	b.n	800cfde <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	4a46      	ldr	r2, [pc, #280]	@ (800d0f4 <UART_Start_Receive_IT+0x238>)
 800cfdc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	691b      	ldr	r3, [r3, #16]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d01a      	beq.n	800d01c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfee:	e853 3f00 	ldrex	r3, [r3]
 800cff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cffa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	461a      	mov	r2, r3
 800d004:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d008:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d00a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d00c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d00e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d010:	e841 2300 	strex	r3, r2, [r1]
 800d014:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800d016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d1e4      	bne.n	800cfe6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	3308      	adds	r3, #8
 800d022:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d026:	e853 3f00 	ldrex	r3, [r3]
 800d02a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d02e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d032:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	3308      	adds	r3, #8
 800d03a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d03c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d03e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d040:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d042:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d044:	e841 2300 	strex	r3, r2, [r1]
 800d048:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d04a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d1e5      	bne.n	800d01c <UART_Start_Receive_IT+0x160>
 800d050:	e046      	b.n	800d0e0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	689b      	ldr	r3, [r3, #8]
 800d056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d05a:	d107      	bne.n	800d06c <UART_Start_Receive_IT+0x1b0>
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	691b      	ldr	r3, [r3, #16]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d103      	bne.n	800d06c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	4a24      	ldr	r2, [pc, #144]	@ (800d0f8 <UART_Start_Receive_IT+0x23c>)
 800d068:	675a      	str	r2, [r3, #116]	@ 0x74
 800d06a:	e002      	b.n	800d072 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	4a23      	ldr	r2, [pc, #140]	@ (800d0fc <UART_Start_Receive_IT+0x240>)
 800d070:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d019      	beq.n	800d0ae <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d082:	e853 3f00 	ldrex	r3, [r3]
 800d086:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d08a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800d08e:	677b      	str	r3, [r7, #116]	@ 0x74
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	461a      	mov	r2, r3
 800d096:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d098:	637b      	str	r3, [r7, #52]	@ 0x34
 800d09a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d09c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d09e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0a0:	e841 2300 	strex	r3, r2, [r1]
 800d0a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d1e6      	bne.n	800d07a <UART_Start_Receive_IT+0x1be>
 800d0ac:	e018      	b.n	800d0e0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	e853 3f00 	ldrex	r3, [r3]
 800d0ba:	613b      	str	r3, [r7, #16]
   return(result);
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	f043 0320 	orr.w	r3, r3, #32
 800d0c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d0cc:	623b      	str	r3, [r7, #32]
 800d0ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0d0:	69f9      	ldr	r1, [r7, #28]
 800d0d2:	6a3a      	ldr	r2, [r7, #32]
 800d0d4:	e841 2300 	strex	r3, r2, [r1]
 800d0d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d1e6      	bne.n	800d0ae <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d0e0:	2300      	movs	r3, #0
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	378c      	adds	r7, #140	@ 0x8c
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr
 800d0ee:	bf00      	nop
 800d0f0:	0800dcad 	.word	0x0800dcad
 800d0f4:	0800d94d 	.word	0x0800d94d
 800d0f8:	0800d795 	.word	0x0800d795
 800d0fc:	0800d5dd 	.word	0x0800d5dd

0800d100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d100:	b480      	push	{r7}
 800d102:	b095      	sub	sp, #84	@ 0x54
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d10e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d110:	e853 3f00 	ldrex	r3, [r3]
 800d114:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d118:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d11c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	461a      	mov	r2, r3
 800d124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d126:	643b      	str	r3, [r7, #64]	@ 0x40
 800d128:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d12a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d12c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d12e:	e841 2300 	strex	r3, r2, [r1]
 800d132:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1e6      	bne.n	800d108 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	3308      	adds	r3, #8
 800d140:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d142:	6a3b      	ldr	r3, [r7, #32]
 800d144:	e853 3f00 	ldrex	r3, [r3]
 800d148:	61fb      	str	r3, [r7, #28]
   return(result);
 800d14a:	69fa      	ldr	r2, [r7, #28]
 800d14c:	4b1e      	ldr	r3, [pc, #120]	@ (800d1c8 <UART_EndRxTransfer+0xc8>)
 800d14e:	4013      	ands	r3, r2
 800d150:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	3308      	adds	r3, #8
 800d158:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d15a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d15c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d15e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d160:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d162:	e841 2300 	strex	r3, r2, [r1]
 800d166:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d1e5      	bne.n	800d13a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d172:	2b01      	cmp	r3, #1
 800d174:	d118      	bne.n	800d1a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	e853 3f00 	ldrex	r3, [r3]
 800d182:	60bb      	str	r3, [r7, #8]
   return(result);
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	f023 0310 	bic.w	r3, r3, #16
 800d18a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	461a      	mov	r2, r3
 800d192:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d194:	61bb      	str	r3, [r7, #24]
 800d196:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d198:	6979      	ldr	r1, [r7, #20]
 800d19a:	69ba      	ldr	r2, [r7, #24]
 800d19c:	e841 2300 	strex	r3, r2, [r1]
 800d1a0:	613b      	str	r3, [r7, #16]
   return(result);
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d1e6      	bne.n	800d176 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2220      	movs	r2, #32
 800d1ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d1bc:	bf00      	nop
 800d1be:	3754      	adds	r7, #84	@ 0x54
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr
 800d1c8:	effffffe 	.word	0xeffffffe

0800d1cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d1ea:	68f8      	ldr	r0, [r7, #12]
 800d1ec:	f7fe fe6c 	bl	800bec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d1f0:	bf00      	nop
 800d1f2:	3710      	adds	r7, #16
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b084      	sub	sp, #16
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d204:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2200      	movs	r2, #0
 800d20a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	220f      	movs	r2, #15
 800d214:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	699a      	ldr	r2, [r3, #24]
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f042 0208 	orr.w	r2, r2, #8
 800d224:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2220      	movs	r2, #32
 800d22a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2200      	movs	r2, #0
 800d232:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800d234:	68f8      	ldr	r0, [r7, #12]
 800d236:	f7fe fe51 	bl	800bedc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d23a:	bf00      	nop
 800d23c:	3710      	adds	r7, #16
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}

0800d242 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d242:	b480      	push	{r7}
 800d244:	b08f      	sub	sp, #60	@ 0x3c
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d250:	2b21      	cmp	r3, #33	@ 0x21
 800d252:	d14c      	bne.n	800d2ee <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d132      	bne.n	800d2c6 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d266:	6a3b      	ldr	r3, [r7, #32]
 800d268:	e853 3f00 	ldrex	r3, [r3]
 800d26c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d274:	637b      	str	r3, [r7, #52]	@ 0x34
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	461a      	mov	r2, r3
 800d27c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d27e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d280:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d282:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d286:	e841 2300 	strex	r3, r2, [r1]
 800d28a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d1e6      	bne.n	800d260 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	e853 3f00 	ldrex	r3, [r3]
 800d29e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b0:	61bb      	str	r3, [r7, #24]
 800d2b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b4:	6979      	ldr	r1, [r7, #20]
 800d2b6:	69ba      	ldr	r2, [r7, #24]
 800d2b8:	e841 2300 	strex	r3, r2, [r1]
 800d2bc:	613b      	str	r3, [r7, #16]
   return(result);
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d1e6      	bne.n	800d292 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d2c4:	e013      	b.n	800d2ee <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2ca:	781a      	ldrb	r2, [r3, #0]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2d6:	1c5a      	adds	r2, r3, #1
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	b29a      	uxth	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800d2ee:	bf00      	nop
 800d2f0:	373c      	adds	r7, #60	@ 0x3c
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f8:	4770      	bx	lr

0800d2fa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d2fa:	b480      	push	{r7}
 800d2fc:	b091      	sub	sp, #68	@ 0x44
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d308:	2b21      	cmp	r3, #33	@ 0x21
 800d30a:	d151      	bne.n	800d3b0 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d312:	b29b      	uxth	r3, r3
 800d314:	2b00      	cmp	r3, #0
 800d316:	d132      	bne.n	800d37e <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d320:	e853 3f00 	ldrex	r3, [r3]
 800d324:	623b      	str	r3, [r7, #32]
   return(result);
 800d326:	6a3b      	ldr	r3, [r7, #32]
 800d328:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d32c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	461a      	mov	r2, r3
 800d334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d336:	633b      	str	r3, [r7, #48]	@ 0x30
 800d338:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d33a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d33c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d33e:	e841 2300 	strex	r3, r2, [r1]
 800d342:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d346:	2b00      	cmp	r3, #0
 800d348:	d1e6      	bne.n	800d318 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	e853 3f00 	ldrex	r3, [r3]
 800d356:	60fb      	str	r3, [r7, #12]
   return(result);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d35e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	461a      	mov	r2, r3
 800d366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d368:	61fb      	str	r3, [r7, #28]
 800d36a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d36c:	69b9      	ldr	r1, [r7, #24]
 800d36e:	69fa      	ldr	r2, [r7, #28]
 800d370:	e841 2300 	strex	r3, r2, [r1]
 800d374:	617b      	str	r3, [r7, #20]
   return(result);
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d1e6      	bne.n	800d34a <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d37c:	e018      	b.n	800d3b0 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d382:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d386:	881b      	ldrh	r3, [r3, #0]
 800d388:	461a      	mov	r2, r3
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d392:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d398:	1c9a      	adds	r2, r3, #2
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	3b01      	subs	r3, #1
 800d3a8:	b29a      	uxth	r2, r3
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800d3b0:	bf00      	nop
 800d3b2:	3744      	adds	r7, #68	@ 0x44
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr

0800d3bc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b091      	sub	sp, #68	@ 0x44
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d3ca:	2b21      	cmp	r3, #33	@ 0x21
 800d3cc:	d160      	bne.n	800d490 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d3d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d3d6:	e057      	b.n	800d488 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d3de:	b29b      	uxth	r3, r3
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d133      	bne.n	800d44c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	3308      	adds	r3, #8
 800d3ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ee:	e853 3f00 	ldrex	r3, [r3]
 800d3f2:	623b      	str	r3, [r7, #32]
   return(result);
 800d3f4:	6a3b      	ldr	r3, [r7, #32]
 800d3f6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d3fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	3308      	adds	r3, #8
 800d402:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d404:	633a      	str	r2, [r7, #48]	@ 0x30
 800d406:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d408:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d40a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d40c:	e841 2300 	strex	r3, r2, [r1]
 800d410:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d414:	2b00      	cmp	r3, #0
 800d416:	d1e5      	bne.n	800d3e4 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	e853 3f00 	ldrex	r3, [r3]
 800d424:	60fb      	str	r3, [r7, #12]
   return(result);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d42c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	461a      	mov	r2, r3
 800d434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d436:	61fb      	str	r3, [r7, #28]
 800d438:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d43a:	69b9      	ldr	r1, [r7, #24]
 800d43c:	69fa      	ldr	r2, [r7, #28]
 800d43e:	e841 2300 	strex	r3, r2, [r1]
 800d442:	617b      	str	r3, [r7, #20]
   return(result);
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d1e6      	bne.n	800d418 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800d44a:	e021      	b.n	800d490 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	69db      	ldr	r3, [r3, #28]
 800d452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d456:	2b00      	cmp	r3, #0
 800d458:	d013      	beq.n	800d482 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d45e:	781a      	ldrb	r2, [r3, #0]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d46a:	1c5a      	adds	r2, r3, #1
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d476:	b29b      	uxth	r3, r3
 800d478:	3b01      	subs	r3, #1
 800d47a:	b29a      	uxth	r2, r3
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d482:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d484:	3b01      	subs	r3, #1
 800d486:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d488:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d1a4      	bne.n	800d3d8 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d48e:	e7ff      	b.n	800d490 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800d490:	bf00      	nop
 800d492:	3744      	adds	r7, #68	@ 0x44
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b091      	sub	sp, #68	@ 0x44
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d4aa:	2b21      	cmp	r3, #33	@ 0x21
 800d4ac:	d165      	bne.n	800d57a <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d4b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d4b6:	e05c      	b.n	800d572 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d133      	bne.n	800d52c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	3308      	adds	r3, #8
 800d4ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4cc:	6a3b      	ldr	r3, [r7, #32]
 800d4ce:	e853 3f00 	ldrex	r3, [r3]
 800d4d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800d4d4:	69fb      	ldr	r3, [r7, #28]
 800d4d6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d4da:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	3308      	adds	r3, #8
 800d4e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d4e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d4e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d4ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4ec:	e841 2300 	strex	r3, r2, [r1]
 800d4f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d1e5      	bne.n	800d4c4 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	e853 3f00 	ldrex	r3, [r3]
 800d504:	60bb      	str	r3, [r7, #8]
   return(result);
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d50c:	633b      	str	r3, [r7, #48]	@ 0x30
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	461a      	mov	r2, r3
 800d514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d516:	61bb      	str	r3, [r7, #24]
 800d518:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51a:	6979      	ldr	r1, [r7, #20]
 800d51c:	69ba      	ldr	r2, [r7, #24]
 800d51e:	e841 2300 	strex	r3, r2, [r1]
 800d522:	613b      	str	r3, [r7, #16]
   return(result);
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d1e6      	bne.n	800d4f8 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800d52a:	e026      	b.n	800d57a <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	69db      	ldr	r3, [r3, #28]
 800d532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d536:	2b00      	cmp	r3, #0
 800d538:	d018      	beq.n	800d56c <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d53e:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d542:	881b      	ldrh	r3, [r3, #0]
 800d544:	461a      	mov	r2, r3
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d54e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d554:	1c9a      	adds	r2, r3, #2
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d560:	b29b      	uxth	r3, r3
 800d562:	3b01      	subs	r3, #1
 800d564:	b29a      	uxth	r2, r3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d56c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d56e:	3b01      	subs	r3, #1
 800d570:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d572:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d574:	2b00      	cmp	r3, #0
 800d576:	d19f      	bne.n	800d4b8 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d578:	e7ff      	b.n	800d57a <UART_TxISR_16BIT_FIFOEN+0xde>
 800d57a:	bf00      	nop
 800d57c:	3744      	adds	r7, #68	@ 0x44
 800d57e:	46bd      	mov	sp, r7
 800d580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d584:	4770      	bx	lr

0800d586 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d586:	b580      	push	{r7, lr}
 800d588:	b088      	sub	sp, #32
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	e853 3f00 	ldrex	r3, [r3]
 800d59a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d5a2:	61fb      	str	r3, [r7, #28]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	69fb      	ldr	r3, [r7, #28]
 800d5ac:	61bb      	str	r3, [r7, #24]
 800d5ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5b0:	6979      	ldr	r1, [r7, #20]
 800d5b2:	69ba      	ldr	r2, [r7, #24]
 800d5b4:	e841 2300 	strex	r3, r2, [r1]
 800d5b8:	613b      	str	r3, [r7, #16]
   return(result);
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d1e6      	bne.n	800d58e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2220      	movs	r2, #32
 800d5c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f7f6 fac2 	bl	8003b58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5d4:	bf00      	nop
 800d5d6:	3720      	adds	r7, #32
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}

0800d5dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b09c      	sub	sp, #112	@ 0x70
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d5ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d5f4:	2b22      	cmp	r3, #34	@ 0x22
 800d5f6:	f040 80be 	bne.w	800d776 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d600:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d604:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d608:	b2d9      	uxtb	r1, r3
 800d60a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d60e:	b2da      	uxtb	r2, r3
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d614:	400a      	ands	r2, r1
 800d616:	b2d2      	uxtb	r2, r2
 800d618:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d61e:	1c5a      	adds	r2, r3, #1
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	3b01      	subs	r3, #1
 800d62e:	b29a      	uxth	r2, r3
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d63c:	b29b      	uxth	r3, r3
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f040 80a1 	bne.w	800d786 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d64a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d64c:	e853 3f00 	ldrex	r3, [r3]
 800d650:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d652:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d654:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d658:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	461a      	mov	r2, r3
 800d660:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d662:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d664:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d666:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d668:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d66a:	e841 2300 	strex	r3, r2, [r1]
 800d66e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d672:	2b00      	cmp	r3, #0
 800d674:	d1e6      	bne.n	800d644 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	3308      	adds	r3, #8
 800d67c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d680:	e853 3f00 	ldrex	r3, [r3]
 800d684:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d688:	f023 0301 	bic.w	r3, r3, #1
 800d68c:	667b      	str	r3, [r7, #100]	@ 0x64
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	3308      	adds	r3, #8
 800d694:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d696:	647a      	str	r2, [r7, #68]	@ 0x44
 800d698:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d69a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d69c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d69e:	e841 2300 	strex	r3, r2, [r1]
 800d6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d6a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d1e5      	bne.n	800d676 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2220      	movs	r2, #32
 800d6ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4a33      	ldr	r2, [pc, #204]	@ (800d790 <UART_RxISR_8BIT+0x1b4>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d01f      	beq.n	800d708 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d018      	beq.n	800d708 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6de:	e853 3f00 	ldrex	r3, [r3]
 800d6e2:	623b      	str	r3, [r7, #32]
   return(result);
 800d6e4:	6a3b      	ldr	r3, [r7, #32]
 800d6e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d6ea:	663b      	str	r3, [r7, #96]	@ 0x60
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d6f4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d6fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6fc:	e841 2300 	strex	r3, r2, [r1]
 800d700:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d704:	2b00      	cmp	r3, #0
 800d706:	d1e6      	bne.n	800d6d6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d12e      	bne.n	800d76e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2200      	movs	r2, #0
 800d714:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	e853 3f00 	ldrex	r3, [r3]
 800d722:	60fb      	str	r3, [r7, #12]
   return(result);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f023 0310 	bic.w	r3, r3, #16
 800d72a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	461a      	mov	r2, r3
 800d732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d734:	61fb      	str	r3, [r7, #28]
 800d736:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d738:	69b9      	ldr	r1, [r7, #24]
 800d73a:	69fa      	ldr	r2, [r7, #28]
 800d73c:	e841 2300 	strex	r3, r2, [r1]
 800d740:	617b      	str	r3, [r7, #20]
   return(result);
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d1e6      	bne.n	800d716 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	69db      	ldr	r3, [r3, #28]
 800d74e:	f003 0310 	and.w	r3, r3, #16
 800d752:	2b10      	cmp	r3, #16
 800d754:	d103      	bne.n	800d75e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	2210      	movs	r2, #16
 800d75c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d764:	4619      	mov	r1, r3
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f7fe fbc2 	bl	800bef0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d76c:	e00b      	b.n	800d786 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f7f6 fa30 	bl	8003bd4 <HAL_UART_RxCpltCallback>
}
 800d774:	e007      	b.n	800d786 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	699a      	ldr	r2, [r3, #24]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f042 0208 	orr.w	r2, r2, #8
 800d784:	619a      	str	r2, [r3, #24]
}
 800d786:	bf00      	nop
 800d788:	3770      	adds	r7, #112	@ 0x70
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop
 800d790:	58000c00 	.word	0x58000c00

0800d794 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b09c      	sub	sp, #112	@ 0x70
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d7a2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d7ac:	2b22      	cmp	r3, #34	@ 0x22
 800d7ae:	f040 80be 	bne.w	800d92e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d7c0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d7c2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800d7c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d7ca:	4013      	ands	r3, r2
 800d7cc:	b29a      	uxth	r2, r3
 800d7ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d7d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d7d6:	1c9a      	adds	r2, r3, #2
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	3b01      	subs	r3, #1
 800d7e6:	b29a      	uxth	r2, r3
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d7f4:	b29b      	uxth	r3, r3
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	f040 80a1 	bne.w	800d93e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d802:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d804:	e853 3f00 	ldrex	r3, [r3]
 800d808:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d80a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d80c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d810:	667b      	str	r3, [r7, #100]	@ 0x64
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	461a      	mov	r2, r3
 800d818:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d81a:	657b      	str	r3, [r7, #84]	@ 0x54
 800d81c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d81e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d820:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d822:	e841 2300 	strex	r3, r2, [r1]
 800d826:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d828:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d1e6      	bne.n	800d7fc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	3308      	adds	r3, #8
 800d834:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d838:	e853 3f00 	ldrex	r3, [r3]
 800d83c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d840:	f023 0301 	bic.w	r3, r3, #1
 800d844:	663b      	str	r3, [r7, #96]	@ 0x60
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	3308      	adds	r3, #8
 800d84c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d84e:	643a      	str	r2, [r7, #64]	@ 0x40
 800d850:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d852:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d854:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d856:	e841 2300 	strex	r3, r2, [r1]
 800d85a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d1e5      	bne.n	800d82e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2220      	movs	r2, #32
 800d866:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2200      	movs	r2, #0
 800d86e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2200      	movs	r2, #0
 800d874:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	4a33      	ldr	r2, [pc, #204]	@ (800d948 <UART_RxISR_16BIT+0x1b4>)
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d01f      	beq.n	800d8c0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d018      	beq.n	800d8c0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d894:	6a3b      	ldr	r3, [r7, #32]
 800d896:	e853 3f00 	ldrex	r3, [r3]
 800d89a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d8a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	461a      	mov	r2, r3
 800d8aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d8ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d8ae:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d8b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8b4:	e841 2300 	strex	r3, r2, [r1]
 800d8b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d1e6      	bne.n	800d88e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d12e      	bne.n	800d926 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	e853 3f00 	ldrex	r3, [r3]
 800d8da:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	f023 0310 	bic.w	r3, r3, #16
 800d8e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8ec:	61bb      	str	r3, [r7, #24]
 800d8ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f0:	6979      	ldr	r1, [r7, #20]
 800d8f2:	69ba      	ldr	r2, [r7, #24]
 800d8f4:	e841 2300 	strex	r3, r2, [r1]
 800d8f8:	613b      	str	r3, [r7, #16]
   return(result);
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d1e6      	bne.n	800d8ce <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	69db      	ldr	r3, [r3, #28]
 800d906:	f003 0310 	and.w	r3, r3, #16
 800d90a:	2b10      	cmp	r3, #16
 800d90c:	d103      	bne.n	800d916 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	2210      	movs	r2, #16
 800d914:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d91c:	4619      	mov	r1, r3
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f7fe fae6 	bl	800bef0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d924:	e00b      	b.n	800d93e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f7f6 f954 	bl	8003bd4 <HAL_UART_RxCpltCallback>
}
 800d92c:	e007      	b.n	800d93e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	699a      	ldr	r2, [r3, #24]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f042 0208 	orr.w	r2, r2, #8
 800d93c:	619a      	str	r2, [r3, #24]
}
 800d93e:	bf00      	nop
 800d940:	3770      	adds	r7, #112	@ 0x70
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	58000c00 	.word	0x58000c00

0800d94c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b0ac      	sub	sp, #176	@ 0xb0
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d95a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	69db      	ldr	r3, [r3, #28]
 800d964:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	689b      	ldr	r3, [r3, #8]
 800d978:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d982:	2b22      	cmp	r3, #34	@ 0x22
 800d984:	f040 8180 	bne.w	800dc88 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d98e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d992:	e123      	b.n	800dbdc <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d99a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d99e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800d9a2:	b2d9      	uxtb	r1, r3
 800d9a4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800d9a8:	b2da      	uxtb	r2, r3
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9ae:	400a      	ands	r2, r1
 800d9b0:	b2d2      	uxtb	r2, r2
 800d9b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9b8:	1c5a      	adds	r2, r3, #1
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	3b01      	subs	r3, #1
 800d9c8:	b29a      	uxth	r2, r3
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	69db      	ldr	r3, [r3, #28]
 800d9d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d9da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9de:	f003 0307 	and.w	r3, r3, #7
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d053      	beq.n	800da8e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d9e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9ea:	f003 0301 	and.w	r3, r3, #1
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d011      	beq.n	800da16 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d9f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d9f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d00b      	beq.n	800da16 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	2201      	movs	r2, #1
 800da04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da0c:	f043 0201 	orr.w	r2, r3, #1
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da1a:	f003 0302 	and.w	r3, r3, #2
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d011      	beq.n	800da46 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800da22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800da26:	f003 0301 	and.w	r3, r3, #1
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d00b      	beq.n	800da46 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	2202      	movs	r2, #2
 800da34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da3c:	f043 0204 	orr.w	r2, r3, #4
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da4a:	f003 0304 	and.w	r3, r3, #4
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d011      	beq.n	800da76 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800da52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800da56:	f003 0301 	and.w	r3, r3, #1
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d00b      	beq.n	800da76 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2204      	movs	r2, #4
 800da64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da6c:	f043 0202 	orr.w	r2, r3, #2
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d006      	beq.n	800da8e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7fe fa21 	bl	800bec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2200      	movs	r2, #0
 800da8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800da94:	b29b      	uxth	r3, r3
 800da96:	2b00      	cmp	r3, #0
 800da98:	f040 80a0 	bne.w	800dbdc <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800daa4:	e853 3f00 	ldrex	r3, [r3]
 800daa8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800daaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800daac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dab0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	461a      	mov	r2, r3
 800daba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dabe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dac0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dac2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800dac4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800dac6:	e841 2300 	strex	r3, r2, [r1]
 800daca:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800dacc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d1e4      	bne.n	800da9c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	3308      	adds	r3, #8
 800dad8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dada:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dadc:	e853 3f00 	ldrex	r3, [r3]
 800dae0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800dae2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dae4:	4b6e      	ldr	r3, [pc, #440]	@ (800dca0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800dae6:	4013      	ands	r3, r2
 800dae8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	3308      	adds	r3, #8
 800daf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800daf6:	66ba      	str	r2, [r7, #104]	@ 0x68
 800daf8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dafa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800dafc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800dafe:	e841 2300 	strex	r3, r2, [r1]
 800db02:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800db04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800db06:	2b00      	cmp	r3, #0
 800db08:	d1e3      	bne.n	800dad2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2220      	movs	r2, #32
 800db0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2200      	movs	r2, #0
 800db1c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4a60      	ldr	r2, [pc, #384]	@ (800dca4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d021      	beq.n	800db6c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800db32:	2b00      	cmp	r3, #0
 800db34:	d01a      	beq.n	800db6c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db3e:	e853 3f00 	ldrex	r3, [r3]
 800db42:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800db44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800db4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	461a      	mov	r2, r3
 800db54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800db58:	657b      	str	r3, [r7, #84]	@ 0x54
 800db5a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db5c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800db5e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db60:	e841 2300 	strex	r3, r2, [r1]
 800db64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800db66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d1e4      	bne.n	800db36 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db70:	2b01      	cmp	r3, #1
 800db72:	d130      	bne.n	800dbd6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2200      	movs	r2, #0
 800db78:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db82:	e853 3f00 	ldrex	r3, [r3]
 800db86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800db88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db8a:	f023 0310 	bic.w	r3, r3, #16
 800db8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	461a      	mov	r2, r3
 800db98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db9c:	643b      	str	r3, [r7, #64]	@ 0x40
 800db9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dba0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dba2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dba4:	e841 2300 	strex	r3, r2, [r1]
 800dba8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dbaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d1e4      	bne.n	800db7a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	69db      	ldr	r3, [r3, #28]
 800dbb6:	f003 0310 	and.w	r3, r3, #16
 800dbba:	2b10      	cmp	r3, #16
 800dbbc:	d103      	bne.n	800dbc6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	2210      	movs	r2, #16
 800dbc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dbcc:	4619      	mov	r1, r3
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7fe f98e 	bl	800bef0 <HAL_UARTEx_RxEventCallback>
 800dbd4:	e002      	b.n	800dbdc <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f7f5 fffc 	bl	8003bd4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dbdc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d006      	beq.n	800dbf2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800dbe4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dbe8:	f003 0320 	and.w	r3, r3, #32
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	f47f aed1 	bne.w	800d994 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dbf8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dbfc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d049      	beq.n	800dc98 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dc0a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d242      	bcs.n	800dc98 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	3308      	adds	r3, #8
 800dc18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc1a:	6a3b      	ldr	r3, [r7, #32]
 800dc1c:	e853 3f00 	ldrex	r3, [r3]
 800dc20:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc22:	69fb      	ldr	r3, [r7, #28]
 800dc24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dc28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	3308      	adds	r3, #8
 800dc32:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800dc36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dc38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc3e:	e841 2300 	strex	r3, r2, [r1]
 800dc42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d1e3      	bne.n	800dc12 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	4a16      	ldr	r2, [pc, #88]	@ (800dca8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800dc4e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	e853 3f00 	ldrex	r3, [r3]
 800dc5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	f043 0320 	orr.w	r3, r3, #32
 800dc64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dc72:	61bb      	str	r3, [r7, #24]
 800dc74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc76:	6979      	ldr	r1, [r7, #20]
 800dc78:	69ba      	ldr	r2, [r7, #24]
 800dc7a:	e841 2300 	strex	r3, r2, [r1]
 800dc7e:	613b      	str	r3, [r7, #16]
   return(result);
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1e4      	bne.n	800dc50 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dc86:	e007      	b.n	800dc98 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	699a      	ldr	r2, [r3, #24]
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f042 0208 	orr.w	r2, r2, #8
 800dc96:	619a      	str	r2, [r3, #24]
}
 800dc98:	bf00      	nop
 800dc9a:	37b0      	adds	r7, #176	@ 0xb0
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	effffffe 	.word	0xeffffffe
 800dca4:	58000c00 	.word	0x58000c00
 800dca8:	0800d5dd 	.word	0x0800d5dd

0800dcac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b0ae      	sub	sp, #184	@ 0xb8
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dcba:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	69db      	ldr	r3, [r3, #28]
 800dcc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dce2:	2b22      	cmp	r3, #34	@ 0x22
 800dce4:	f040 8184 	bne.w	800dff0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dcee:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dcf2:	e127      	b.n	800df44 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcfa:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800dd06:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800dd0a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800dd0e:	4013      	ands	r3, r2
 800dd10:	b29a      	uxth	r2, r3
 800dd12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dd16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd1c:	1c9a      	adds	r2, r3, #2
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dd28:	b29b      	uxth	r3, r3
 800dd2a:	3b01      	subs	r3, #1
 800dd2c:	b29a      	uxth	r2, r3
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	69db      	ldr	r3, [r3, #28]
 800dd3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dd3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dd42:	f003 0307 	and.w	r3, r3, #7
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d053      	beq.n	800ddf2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dd4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dd4e:	f003 0301 	and.w	r3, r3, #1
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d011      	beq.n	800dd7a <UART_RxISR_16BIT_FIFOEN+0xce>
 800dd56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00b      	beq.n	800dd7a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	2201      	movs	r2, #1
 800dd68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd70:	f043 0201 	orr.w	r2, r3, #1
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dd7e:	f003 0302 	and.w	r3, r3, #2
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d011      	beq.n	800ddaa <UART_RxISR_16BIT_FIFOEN+0xfe>
 800dd86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dd8a:	f003 0301 	and.w	r3, r3, #1
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d00b      	beq.n	800ddaa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	2202      	movs	r2, #2
 800dd98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dda0:	f043 0204 	orr.w	r2, r3, #4
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ddaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ddae:	f003 0304 	and.w	r3, r3, #4
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d011      	beq.n	800ddda <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ddb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ddba:	f003 0301 	and.w	r3, r3, #1
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d00b      	beq.n	800ddda <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2204      	movs	r2, #4
 800ddc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ddd0:	f043 0202 	orr.w	r2, r3, #2
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d006      	beq.n	800ddf2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f7fe f86f 	bl	800bec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2200      	movs	r2, #0
 800ddee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ddf8:	b29b      	uxth	r3, r3
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	f040 80a2 	bne.w	800df44 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800de08:	e853 3f00 	ldrex	r3, [r3]
 800de0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800de0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800de10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	461a      	mov	r2, r3
 800de1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800de22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800de26:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800de2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800de2e:	e841 2300 	strex	r3, r2, [r1]
 800de32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800de34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de36:	2b00      	cmp	r3, #0
 800de38:	d1e2      	bne.n	800de00 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	3308      	adds	r3, #8
 800de40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800de44:	e853 3f00 	ldrex	r3, [r3]
 800de48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800de4a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800de4c:	4b6e      	ldr	r3, [pc, #440]	@ (800e008 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800de4e:	4013      	ands	r3, r2
 800de50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	3308      	adds	r3, #8
 800de5a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800de5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800de60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800de64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800de66:	e841 2300 	strex	r3, r2, [r1]
 800de6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800de6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d1e3      	bne.n	800de3a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2220      	movs	r2, #32
 800de76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2200      	movs	r2, #0
 800de7e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2200      	movs	r2, #0
 800de84:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4a60      	ldr	r2, [pc, #384]	@ (800e00c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d021      	beq.n	800ded4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d01a      	beq.n	800ded4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dea6:	e853 3f00 	ldrex	r3, [r3]
 800deaa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800deac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800deae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800deb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	461a      	mov	r2, r3
 800debc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800dec0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dec2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dec6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dec8:	e841 2300 	strex	r3, r2, [r1]
 800decc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dece:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d1e4      	bne.n	800de9e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d130      	bne.n	800df3e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2200      	movs	r2, #0
 800dee0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deea:	e853 3f00 	ldrex	r3, [r3]
 800deee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800def0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800def2:	f023 0310 	bic.w	r3, r3, #16
 800def6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	461a      	mov	r2, r3
 800df00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800df04:	647b      	str	r3, [r7, #68]	@ 0x44
 800df06:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800df0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800df0c:	e841 2300 	strex	r3, r2, [r1]
 800df10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800df12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df14:	2b00      	cmp	r3, #0
 800df16:	d1e4      	bne.n	800dee2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	69db      	ldr	r3, [r3, #28]
 800df1e:	f003 0310 	and.w	r3, r3, #16
 800df22:	2b10      	cmp	r3, #16
 800df24:	d103      	bne.n	800df2e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2210      	movs	r2, #16
 800df2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800df34:	4619      	mov	r1, r3
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f7fd ffda 	bl	800bef0 <HAL_UARTEx_RxEventCallback>
 800df3c:	e002      	b.n	800df44 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f7f5 fe48 	bl	8003bd4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800df44:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d006      	beq.n	800df5a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800df4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800df50:	f003 0320 	and.w	r3, r3, #32
 800df54:	2b00      	cmp	r3, #0
 800df56:	f47f aecd 	bne.w	800dcf4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800df60:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800df64:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d049      	beq.n	800e000 <UART_RxISR_16BIT_FIFOEN+0x354>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800df72:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800df76:	429a      	cmp	r2, r3
 800df78:	d242      	bcs.n	800e000 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	3308      	adds	r3, #8
 800df80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df84:	e853 3f00 	ldrex	r3, [r3]
 800df88:	623b      	str	r3, [r7, #32]
   return(result);
 800df8a:	6a3b      	ldr	r3, [r7, #32]
 800df8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800df90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	3308      	adds	r3, #8
 800df9a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800df9e:	633a      	str	r2, [r7, #48]	@ 0x30
 800dfa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dfa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfa6:	e841 2300 	strex	r3, r2, [r1]
 800dfaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dfac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d1e3      	bne.n	800df7a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	4a16      	ldr	r2, [pc, #88]	@ (800e010 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800dfb6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	e853 3f00 	ldrex	r3, [r3]
 800dfc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f043 0320 	orr.w	r3, r3, #32
 800dfcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dfda:	61fb      	str	r3, [r7, #28]
 800dfdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfde:	69b9      	ldr	r1, [r7, #24]
 800dfe0:	69fa      	ldr	r2, [r7, #28]
 800dfe2:	e841 2300 	strex	r3, r2, [r1]
 800dfe6:	617b      	str	r3, [r7, #20]
   return(result);
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d1e4      	bne.n	800dfb8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dfee:	e007      	b.n	800e000 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	699a      	ldr	r2, [r3, #24]
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f042 0208 	orr.w	r2, r2, #8
 800dffe:	619a      	str	r2, [r3, #24]
}
 800e000:	bf00      	nop
 800e002:	37b8      	adds	r7, #184	@ 0xb8
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}
 800e008:	effffffe 	.word	0xeffffffe
 800e00c:	58000c00 	.word	0x58000c00
 800e010:	0800d795 	.word	0x0800d795

0800e014 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e014:	b480      	push	{r7}
 800e016:	b083      	sub	sp, #12
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e01c:	bf00      	nop
 800e01e:	370c      	adds	r7, #12
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr

0800e028 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e028:	b480      	push	{r7}
 800e02a:	b083      	sub	sp, #12
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e030:	bf00      	nop
 800e032:	370c      	adds	r7, #12
 800e034:	46bd      	mov	sp, r7
 800e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03a:	4770      	bx	lr

0800e03c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e03c:	b480      	push	{r7}
 800e03e:	b083      	sub	sp, #12
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e044:	bf00      	nop
 800e046:	370c      	adds	r7, #12
 800e048:	46bd      	mov	sp, r7
 800e04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04e:	4770      	bx	lr

0800e050 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e050:	b480      	push	{r7}
 800e052:	b085      	sub	sp, #20
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d101      	bne.n	800e066 <HAL_UARTEx_DisableFifoMode+0x16>
 800e062:	2302      	movs	r3, #2
 800e064:	e027      	b.n	800e0b6 <HAL_UARTEx_DisableFifoMode+0x66>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2201      	movs	r2, #1
 800e06a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2224      	movs	r2, #36	@ 0x24
 800e072:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	681a      	ldr	r2, [r3, #0]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f022 0201 	bic.w	r2, r2, #1
 800e08c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e094:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2200      	movs	r2, #0
 800e09a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	68fa      	ldr	r2, [r7, #12]
 800e0a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2220      	movs	r2, #32
 800e0a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e0b4:	2300      	movs	r3, #0
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3714      	adds	r7, #20
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr

0800e0c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e0c2:	b580      	push	{r7, lr}
 800e0c4:	b084      	sub	sp, #16
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	6078      	str	r0, [r7, #4]
 800e0ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d101      	bne.n	800e0da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e0d6:	2302      	movs	r3, #2
 800e0d8:	e02d      	b.n	800e136 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2201      	movs	r2, #1
 800e0de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2224      	movs	r2, #36	@ 0x24
 800e0e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	681a      	ldr	r2, [r3, #0]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f022 0201 	bic.w	r2, r2, #1
 800e100:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	689b      	ldr	r3, [r3, #8]
 800e108:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	683a      	ldr	r2, [r7, #0]
 800e112:	430a      	orrs	r2, r1
 800e114:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f000 f850 	bl	800e1bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	68fa      	ldr	r2, [r7, #12]
 800e122:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2220      	movs	r2, #32
 800e128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2200      	movs	r2, #0
 800e130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e134:	2300      	movs	r3, #0
}
 800e136:	4618      	mov	r0, r3
 800e138:	3710      	adds	r7, #16
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}

0800e13e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e13e:	b580      	push	{r7, lr}
 800e140:	b084      	sub	sp, #16
 800e142:	af00      	add	r7, sp, #0
 800e144:	6078      	str	r0, [r7, #4]
 800e146:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e14e:	2b01      	cmp	r3, #1
 800e150:	d101      	bne.n	800e156 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e152:	2302      	movs	r3, #2
 800e154:	e02d      	b.n	800e1b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2201      	movs	r2, #1
 800e15a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2224      	movs	r2, #36	@ 0x24
 800e162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f022 0201 	bic.w	r2, r2, #1
 800e17c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	689b      	ldr	r3, [r3, #8]
 800e184:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	683a      	ldr	r2, [r7, #0]
 800e18e:	430a      	orrs	r2, r1
 800e190:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 f812 	bl	800e1bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	68fa      	ldr	r2, [r7, #12]
 800e19e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2220      	movs	r2, #32
 800e1a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e1b0:	2300      	movs	r3, #0
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3710      	adds	r7, #16
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
	...

0800e1bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b085      	sub	sp, #20
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d108      	bne.n	800e1de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2201      	movs	r2, #1
 800e1d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e1dc:	e031      	b.n	800e242 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e1de:	2310      	movs	r3, #16
 800e1e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e1e2:	2310      	movs	r3, #16
 800e1e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	689b      	ldr	r3, [r3, #8]
 800e1ec:	0e5b      	lsrs	r3, r3, #25
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	f003 0307 	and.w	r3, r3, #7
 800e1f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	0f5b      	lsrs	r3, r3, #29
 800e1fe:	b2db      	uxtb	r3, r3
 800e200:	f003 0307 	and.w	r3, r3, #7
 800e204:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e206:	7bbb      	ldrb	r3, [r7, #14]
 800e208:	7b3a      	ldrb	r2, [r7, #12]
 800e20a:	4911      	ldr	r1, [pc, #68]	@ (800e250 <UARTEx_SetNbDataToProcess+0x94>)
 800e20c:	5c8a      	ldrb	r2, [r1, r2]
 800e20e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e212:	7b3a      	ldrb	r2, [r7, #12]
 800e214:	490f      	ldr	r1, [pc, #60]	@ (800e254 <UARTEx_SetNbDataToProcess+0x98>)
 800e216:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e218:	fb93 f3f2 	sdiv	r3, r3, r2
 800e21c:	b29a      	uxth	r2, r3
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e224:	7bfb      	ldrb	r3, [r7, #15]
 800e226:	7b7a      	ldrb	r2, [r7, #13]
 800e228:	4909      	ldr	r1, [pc, #36]	@ (800e250 <UARTEx_SetNbDataToProcess+0x94>)
 800e22a:	5c8a      	ldrb	r2, [r1, r2]
 800e22c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e230:	7b7a      	ldrb	r2, [r7, #13]
 800e232:	4908      	ldr	r1, [pc, #32]	@ (800e254 <UARTEx_SetNbDataToProcess+0x98>)
 800e234:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e236:	fb93 f3f2 	sdiv	r3, r3, r2
 800e23a:	b29a      	uxth	r2, r3
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e242:	bf00      	nop
 800e244:	3714      	adds	r7, #20
 800e246:	46bd      	mov	sp, r7
 800e248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24c:	4770      	bx	lr
 800e24e:	bf00      	nop
 800e250:	08017dc8 	.word	0x08017dc8
 800e254:	08017dd0 	.word	0x08017dd0

0800e258 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e258:	b084      	sub	sp, #16
 800e25a:	b480      	push	{r7}
 800e25c:	b085      	sub	sp, #20
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]
 800e262:	f107 001c 	add.w	r0, r7, #28
 800e266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e26a:	2300      	movs	r3, #0
 800e26c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800e26e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800e270:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800e272:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800e274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800e276:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800e278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800e27a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800e27e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800e280:	68fa      	ldr	r2, [r7, #12]
 800e282:	4313      	orrs	r3, r2
 800e284:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	685a      	ldr	r2, [r3, #4]
 800e28a:	4b07      	ldr	r3, [pc, #28]	@ (800e2a8 <SDMMC_Init+0x50>)
 800e28c:	4013      	ands	r3, r2
 800e28e:	68fa      	ldr	r2, [r7, #12]
 800e290:	431a      	orrs	r2, r3
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e296:	2300      	movs	r3, #0
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3714      	adds	r7, #20
 800e29c:	46bd      	mov	sp, r7
 800e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a2:	b004      	add	sp, #16
 800e2a4:	4770      	bx	lr
 800e2a6:	bf00      	nop
 800e2a8:	ffc02c00 	.word	0xffc02c00

0800e2ac <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b083      	sub	sp, #12
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	370c      	adds	r7, #12
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr

0800e2c6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800e2c6:	b480      	push	{r7}
 800e2c8:	b083      	sub	sp, #12
 800e2ca:	af00      	add	r7, sp, #0
 800e2cc:	6078      	str	r0, [r7, #4]
 800e2ce:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	681a      	ldr	r2, [r3, #0]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800e2da:	2300      	movs	r3, #0
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	370c      	adds	r7, #12
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr

0800e2e8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	f043 0203 	orr.w	r2, r3, #3
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e2fc:	2300      	movs	r3, #0
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	370c      	adds	r7, #12
 800e302:	46bd      	mov	sp, r7
 800e304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e308:	4770      	bx	lr

0800e30a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800e30a:	b480      	push	{r7}
 800e30c:	b083      	sub	sp, #12
 800e30e:	af00      	add	r7, sp, #0
 800e310:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f003 0303 	and.w	r3, r3, #3
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	370c      	adds	r7, #12
 800e31e:	46bd      	mov	sp, r7
 800e320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e324:	4770      	bx	lr
	...

0800e328 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e332:	2300      	movs	r3, #0
 800e334:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	681a      	ldr	r2, [r3, #0]
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e346:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800e34c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800e352:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	4313      	orrs	r3, r2
 800e358:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	68da      	ldr	r2, [r3, #12]
 800e35e:	4b06      	ldr	r3, [pc, #24]	@ (800e378 <SDMMC_SendCommand+0x50>)
 800e360:	4013      	ands	r3, r2
 800e362:	68fa      	ldr	r2, [r7, #12]
 800e364:	431a      	orrs	r2, r3
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e36a:	2300      	movs	r3, #0
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3714      	adds	r7, #20
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr
 800e378:	fffee0c0 	.word	0xfffee0c0

0800e37c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e37c:	b480      	push	{r7}
 800e37e:	b083      	sub	sp, #12
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	691b      	ldr	r3, [r3, #16]
 800e388:	b2db      	uxtb	r3, r3
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	370c      	adds	r7, #12
 800e38e:	46bd      	mov	sp, r7
 800e390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e394:	4770      	bx	lr

0800e396 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e396:	b480      	push	{r7}
 800e398:	b085      	sub	sp, #20
 800e39a:	af00      	add	r7, sp, #0
 800e39c:	6078      	str	r0, [r7, #4]
 800e39e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	3314      	adds	r3, #20
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3714      	adds	r7, #20
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr

0800e3bc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b085      	sub	sp, #20
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	681a      	ldr	r2, [r3, #0]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	685a      	ldr	r2, [r3, #4]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e3e2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800e3e8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800e3ee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e3f0:	68fa      	ldr	r2, [r7, #12]
 800e3f2:	4313      	orrs	r3, r2
 800e3f4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	431a      	orrs	r2, r3
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e406:	2300      	movs	r3, #0

}
 800e408:	4618      	mov	r0, r3
 800e40a:	3714      	adds	r7, #20
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr

0800e414 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b088      	sub	sp, #32
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e422:	2310      	movs	r3, #16
 800e424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e426:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e42a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e42c:	2300      	movs	r3, #0
 800e42e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e430:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e434:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e436:	f107 0308 	add.w	r3, r7, #8
 800e43a:	4619      	mov	r1, r3
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f7ff ff73 	bl	800e328 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e442:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e446:	2110      	movs	r1, #16
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f000 fa5f 	bl	800e90c <SDMMC_GetCmdResp1>
 800e44e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e450:	69fb      	ldr	r3, [r7, #28]
}
 800e452:	4618      	mov	r0, r3
 800e454:	3720      	adds	r7, #32
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}

0800e45a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e45a:	b580      	push	{r7, lr}
 800e45c:	b088      	sub	sp, #32
 800e45e:	af00      	add	r7, sp, #0
 800e460:	6078      	str	r0, [r7, #4]
 800e462:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e468:	2311      	movs	r3, #17
 800e46a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e46c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e472:	2300      	movs	r3, #0
 800e474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e476:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e47a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e47c:	f107 0308 	add.w	r3, r7, #8
 800e480:	4619      	mov	r1, r3
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f7ff ff50 	bl	800e328 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e488:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e48c:	2111      	movs	r1, #17
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f000 fa3c 	bl	800e90c <SDMMC_GetCmdResp1>
 800e494:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e496:	69fb      	ldr	r3, [r7, #28]
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3720      	adds	r7, #32
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b088      	sub	sp, #32
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e4ae:	2312      	movs	r3, #18
 800e4b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e4b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e4c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4c2:	f107 0308 	add.w	r3, r7, #8
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f7ff ff2d 	bl	800e328 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e4ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e4d2:	2112      	movs	r1, #18
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f000 fa19 	bl	800e90c <SDMMC_GetCmdResp1>
 800e4da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4dc:	69fb      	ldr	r3, [r7, #28]
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3720      	adds	r7, #32
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}

0800e4e6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e4e6:	b580      	push	{r7, lr}
 800e4e8:	b088      	sub	sp, #32
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	6078      	str	r0, [r7, #4]
 800e4ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e4f4:	2318      	movs	r3, #24
 800e4f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e4fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4fe:	2300      	movs	r3, #0
 800e500:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e502:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e506:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e508:	f107 0308 	add.w	r3, r7, #8
 800e50c:	4619      	mov	r1, r3
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f7ff ff0a 	bl	800e328 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e514:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e518:	2118      	movs	r1, #24
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 f9f6 	bl	800e90c <SDMMC_GetCmdResp1>
 800e520:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e522:	69fb      	ldr	r3, [r7, #28]
}
 800e524:	4618      	mov	r0, r3
 800e526:	3720      	adds	r7, #32
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b088      	sub	sp, #32
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e53a:	2319      	movs	r3, #25
 800e53c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e53e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e542:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e544:	2300      	movs	r3, #0
 800e546:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e548:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e54c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e54e:	f107 0308 	add.w	r3, r7, #8
 800e552:	4619      	mov	r1, r3
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f7ff fee7 	bl	800e328 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e55a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e55e:	2119      	movs	r1, #25
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f000 f9d3 	bl	800e90c <SDMMC_GetCmdResp1>
 800e566:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e568:	69fb      	ldr	r3, [r7, #28]
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3720      	adds	r7, #32
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
	...

0800e574 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b088      	sub	sp, #32
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e57c:	2300      	movs	r3, #0
 800e57e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e580:	230c      	movs	r3, #12
 800e582:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e584:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e588:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e58a:	2300      	movs	r3, #0
 800e58c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e58e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e592:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	68db      	ldr	r3, [r3, #12]
 800e598:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	68db      	ldr	r3, [r3, #12]
 800e5a4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5ac:	f107 0308 	add.w	r3, r7, #8
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f7ff feb8 	bl	800e328 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e5b8:	4a0b      	ldr	r2, [pc, #44]	@ (800e5e8 <SDMMC_CmdStopTransfer+0x74>)
 800e5ba:	210c      	movs	r1, #12
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f000 f9a5 	bl	800e90c <SDMMC_GetCmdResp1>
 800e5c2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e5d6:	d101      	bne.n	800e5dc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800e5dc:	69fb      	ldr	r3, [r7, #28]
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3720      	adds	r7, #32
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	05f5e100 	.word	0x05f5e100

0800e5ec <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b088      	sub	sp, #32
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e5fa:	2307      	movs	r3, #7
 800e5fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e602:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e604:	2300      	movs	r3, #0
 800e606:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e60c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e60e:	f107 0308 	add.w	r3, r7, #8
 800e612:	4619      	mov	r1, r3
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f7ff fe87 	bl	800e328 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e61a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e61e:	2107      	movs	r1, #7
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f000 f973 	bl	800e90c <SDMMC_GetCmdResp1>
 800e626:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e628:	69fb      	ldr	r3, [r7, #28]
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	3720      	adds	r7, #32
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}

0800e632 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e632:	b580      	push	{r7, lr}
 800e634:	b088      	sub	sp, #32
 800e636:	af00      	add	r7, sp, #0
 800e638:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e63a:	2300      	movs	r3, #0
 800e63c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e63e:	2300      	movs	r3, #0
 800e640:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e642:	2300      	movs	r3, #0
 800e644:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e646:	2300      	movs	r3, #0
 800e648:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e64a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e64e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e650:	f107 0308 	add.w	r3, r7, #8
 800e654:	4619      	mov	r1, r3
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f7ff fe66 	bl	800e328 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f000 fb97 	bl	800ed90 <SDMMC_GetCmdError>
 800e662:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e664:	69fb      	ldr	r3, [r7, #28]
}
 800e666:	4618      	mov	r0, r3
 800e668:	3720      	adds	r7, #32
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}

0800e66e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e66e:	b580      	push	{r7, lr}
 800e670:	b088      	sub	sp, #32
 800e672:	af00      	add	r7, sp, #0
 800e674:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e676:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800e67a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e67c:	2308      	movs	r3, #8
 800e67e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e680:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e684:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e686:	2300      	movs	r3, #0
 800e688:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e68a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e68e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e690:	f107 0308 	add.w	r3, r7, #8
 800e694:	4619      	mov	r1, r3
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f7ff fe46 	bl	800e328 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f000 fb29 	bl	800ecf4 <SDMMC_GetCmdResp7>
 800e6a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6a4:	69fb      	ldr	r3, [r7, #28]
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3720      	adds	r7, #32
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}

0800e6ae <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e6ae:	b580      	push	{r7, lr}
 800e6b0:	b088      	sub	sp, #32
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	6078      	str	r0, [r7, #4]
 800e6b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e6bc:	2337      	movs	r3, #55	@ 0x37
 800e6be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e6c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e6ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6d0:	f107 0308 	add.w	r3, r7, #8
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f7ff fe26 	bl	800e328 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e6dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e6e0:	2137      	movs	r1, #55	@ 0x37
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f000 f912 	bl	800e90c <SDMMC_GetCmdResp1>
 800e6e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6ea:	69fb      	ldr	r3, [r7, #28]
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3720      	adds	r7, #32
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b088      	sub	sp, #32
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e702:	2329      	movs	r3, #41	@ 0x29
 800e704:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e706:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e70a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e70c:	2300      	movs	r3, #0
 800e70e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e714:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e716:	f107 0308 	add.w	r3, r7, #8
 800e71a:	4619      	mov	r1, r3
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f7ff fe03 	bl	800e328 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f000 fa2e 	bl	800eb84 <SDMMC_GetCmdResp3>
 800e728:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e72a:	69fb      	ldr	r3, [r7, #28]
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3720      	adds	r7, #32
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b088      	sub	sp, #32
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e742:	2306      	movs	r3, #6
 800e744:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e746:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e74a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e74c:	2300      	movs	r3, #0
 800e74e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e750:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e754:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e756:	f107 0308 	add.w	r3, r7, #8
 800e75a:	4619      	mov	r1, r3
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f7ff fde3 	bl	800e328 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e762:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e766:	2106      	movs	r1, #6
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f000 f8cf 	bl	800e90c <SDMMC_GetCmdResp1>
 800e76e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e770:	69fb      	ldr	r3, [r7, #28]
}
 800e772:	4618      	mov	r0, r3
 800e774:	3720      	adds	r7, #32
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}

0800e77a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e77a:	b580      	push	{r7, lr}
 800e77c:	b088      	sub	sp, #32
 800e77e:	af00      	add	r7, sp, #0
 800e780:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e782:	2300      	movs	r3, #0
 800e784:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e786:	2333      	movs	r3, #51	@ 0x33
 800e788:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e78a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e78e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e790:	2300      	movs	r3, #0
 800e792:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e794:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e798:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e79a:	f107 0308 	add.w	r3, r7, #8
 800e79e:	4619      	mov	r1, r3
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f7ff fdc1 	bl	800e328 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e7a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e7aa:	2133      	movs	r1, #51	@ 0x33
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f000 f8ad 	bl	800e90c <SDMMC_GetCmdResp1>
 800e7b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7b4:	69fb      	ldr	r3, [r7, #28]
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3720      	adds	r7, #32
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}

0800e7be <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e7be:	b580      	push	{r7, lr}
 800e7c0:	b088      	sub	sp, #32
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e7ca:	2302      	movs	r3, #2
 800e7cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e7ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e7d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e7d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e7dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e7de:	f107 0308 	add.w	r3, r7, #8
 800e7e2:	4619      	mov	r1, r3
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f7ff fd9f 	bl	800e328 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f000 f980 	bl	800eaf0 <SDMMC_GetCmdResp2>
 800e7f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7f2:	69fb      	ldr	r3, [r7, #28]
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3720      	adds	r7, #32
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}

0800e7fc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b088      	sub	sp, #32
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e80a:	2309      	movs	r3, #9
 800e80c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e80e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e812:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e814:	2300      	movs	r3, #0
 800e816:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e818:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e81c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e81e:	f107 0308 	add.w	r3, r7, #8
 800e822:	4619      	mov	r1, r3
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f7ff fd7f 	bl	800e328 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f000 f960 	bl	800eaf0 <SDMMC_GetCmdResp2>
 800e830:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e832:	69fb      	ldr	r3, [r7, #28]
}
 800e834:	4618      	mov	r0, r3
 800e836:	3720      	adds	r7, #32
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b088      	sub	sp, #32
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e846:	2300      	movs	r3, #0
 800e848:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e84a:	2303      	movs	r3, #3
 800e84c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e84e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e852:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e854:	2300      	movs	r3, #0
 800e856:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e858:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e85c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e85e:	f107 0308 	add.w	r3, r7, #8
 800e862:	4619      	mov	r1, r3
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f7ff fd5f 	bl	800e328 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e86a:	683a      	ldr	r2, [r7, #0]
 800e86c:	2103      	movs	r1, #3
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f000 f9c8 	bl	800ec04 <SDMMC_GetCmdResp6>
 800e874:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e876:	69fb      	ldr	r3, [r7, #28]
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3720      	adds	r7, #32
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}

0800e880 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b088      	sub	sp, #32
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e88e:	230d      	movs	r3, #13
 800e890:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e892:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e896:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e898:	2300      	movs	r3, #0
 800e89a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e89c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e8a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e8a2:	f107 0308 	add.w	r3, r7, #8
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f7ff fd3d 	bl	800e328 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e8ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e8b2:	210d      	movs	r1, #13
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f000 f829 	bl	800e90c <SDMMC_GetCmdResp1>
 800e8ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8bc:	69fb      	ldr	r3, [r7, #28]
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	3720      	adds	r7, #32
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}

0800e8c6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800e8c6:	b580      	push	{r7, lr}
 800e8c8:	b088      	sub	sp, #32
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800e8d2:	230d      	movs	r3, #13
 800e8d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e8d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e8da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e8e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e8e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e8e6:	f107 0308 	add.w	r3, r7, #8
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f7ff fd1b 	bl	800e328 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800e8f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e8f6:	210d      	movs	r1, #13
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f000 f807 	bl	800e90c <SDMMC_GetCmdResp1>
 800e8fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e900:	69fb      	ldr	r3, [r7, #28]
}
 800e902:	4618      	mov	r0, r3
 800e904:	3720      	adds	r7, #32
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
	...

0800e90c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b088      	sub	sp, #32
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	460b      	mov	r3, r1
 800e916:	607a      	str	r2, [r7, #4]
 800e918:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e91a:	4b70      	ldr	r3, [pc, #448]	@ (800eadc <SDMMC_GetCmdResp1+0x1d0>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	4a70      	ldr	r2, [pc, #448]	@ (800eae0 <SDMMC_GetCmdResp1+0x1d4>)
 800e920:	fba2 2303 	umull	r2, r3, r2, r3
 800e924:	0a5a      	lsrs	r2, r3, #9
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	fb02 f303 	mul.w	r3, r2, r3
 800e92c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	1e5a      	subs	r2, r3, #1
 800e932:	61fa      	str	r2, [r7, #28]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d102      	bne.n	800e93e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e938:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e93c:	e0c9      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e942:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e944:	69ba      	ldr	r2, [r7, #24]
 800e946:	4b67      	ldr	r3, [pc, #412]	@ (800eae4 <SDMMC_GetCmdResp1+0x1d8>)
 800e948:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d0ef      	beq.n	800e92e <SDMMC_GetCmdResp1+0x22>
 800e94e:	69bb      	ldr	r3, [r7, #24]
 800e950:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e954:	2b00      	cmp	r3, #0
 800e956:	d1ea      	bne.n	800e92e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e95c:	f003 0304 	and.w	r3, r3, #4
 800e960:	2b00      	cmp	r3, #0
 800e962:	d004      	beq.n	800e96e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	2204      	movs	r2, #4
 800e968:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e96a:	2304      	movs	r3, #4
 800e96c:	e0b1      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e972:	f003 0301 	and.w	r3, r3, #1
 800e976:	2b00      	cmp	r3, #0
 800e978:	d004      	beq.n	800e984 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2201      	movs	r2, #1
 800e97e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e980:	2301      	movs	r3, #1
 800e982:	e0a6      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	4a58      	ldr	r2, [pc, #352]	@ (800eae8 <SDMMC_GetCmdResp1+0x1dc>)
 800e988:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e98a:	68f8      	ldr	r0, [r7, #12]
 800e98c:	f7ff fcf6 	bl	800e37c <SDMMC_GetCommandResponse>
 800e990:	4603      	mov	r3, r0
 800e992:	461a      	mov	r2, r3
 800e994:	7afb      	ldrb	r3, [r7, #11]
 800e996:	4293      	cmp	r3, r2
 800e998:	d001      	beq.n	800e99e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e99a:	2301      	movs	r3, #1
 800e99c:	e099      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e99e:	2100      	movs	r1, #0
 800e9a0:	68f8      	ldr	r0, [r7, #12]
 800e9a2:	f7ff fcf8 	bl	800e396 <SDMMC_GetResponse>
 800e9a6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e9a8:	697a      	ldr	r2, [r7, #20]
 800e9aa:	4b50      	ldr	r3, [pc, #320]	@ (800eaec <SDMMC_GetCmdResp1+0x1e0>)
 800e9ac:	4013      	ands	r3, r2
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d101      	bne.n	800e9b6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	e08d      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	da02      	bge.n	800e9c2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e9bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e9c0:	e087      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d001      	beq.n	800e9d0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e9cc:	2340      	movs	r3, #64	@ 0x40
 800e9ce:	e080      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d001      	beq.n	800e9de <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e9da:	2380      	movs	r3, #128	@ 0x80
 800e9dc:	e079      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d002      	beq.n	800e9ee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e9e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e9ec:	e071      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d002      	beq.n	800e9fe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e9f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e9fc:	e069      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d002      	beq.n	800ea0e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ea08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ea0c:	e061      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d002      	beq.n	800ea1e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ea18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ea1c:	e059      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d002      	beq.n	800ea2e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ea28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ea2c:	e051      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d002      	beq.n	800ea3e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ea38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ea3c:	e049      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d002      	beq.n	800ea4e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ea48:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ea4c:	e041      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d002      	beq.n	800ea5e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ea58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ea5c:	e039      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d002      	beq.n	800ea6e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ea68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ea6c:	e031      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d002      	beq.n	800ea7e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ea78:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ea7c:	e029      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d002      	beq.n	800ea8e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ea88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ea8c:	e021      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d002      	beq.n	800ea9e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ea98:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ea9c:	e019      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d002      	beq.n	800eaae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800eaa8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800eaac:	e011      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d002      	beq.n	800eabe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800eab8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800eabc:	e009      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	f003 0308 	and.w	r3, r3, #8
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d002      	beq.n	800eace <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800eac8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800eacc:	e001      	b.n	800ead2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eace:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3720      	adds	r7, #32
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
 800eada:	bf00      	nop
 800eadc:	24000000 	.word	0x24000000
 800eae0:	10624dd3 	.word	0x10624dd3
 800eae4:	00200045 	.word	0x00200045
 800eae8:	002000c5 	.word	0x002000c5
 800eaec:	fdffe008 	.word	0xfdffe008

0800eaf0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b085      	sub	sp, #20
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eaf8:	4b1f      	ldr	r3, [pc, #124]	@ (800eb78 <SDMMC_GetCmdResp2+0x88>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4a1f      	ldr	r2, [pc, #124]	@ (800eb7c <SDMMC_GetCmdResp2+0x8c>)
 800eafe:	fba2 2303 	umull	r2, r3, r2, r3
 800eb02:	0a5b      	lsrs	r3, r3, #9
 800eb04:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb08:	fb02 f303 	mul.w	r3, r2, r3
 800eb0c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	1e5a      	subs	r2, r3, #1
 800eb12:	60fa      	str	r2, [r7, #12]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d102      	bne.n	800eb1e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb18:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800eb1c:	e026      	b.n	800eb6c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb22:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d0ef      	beq.n	800eb0e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d1ea      	bne.n	800eb0e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb3c:	f003 0304 	and.w	r3, r3, #4
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d004      	beq.n	800eb4e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2204      	movs	r2, #4
 800eb48:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eb4a:	2304      	movs	r3, #4
 800eb4c:	e00e      	b.n	800eb6c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb52:	f003 0301 	and.w	r3, r3, #1
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d004      	beq.n	800eb64 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eb60:	2301      	movs	r3, #1
 800eb62:	e003      	b.n	800eb6c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	4a06      	ldr	r2, [pc, #24]	@ (800eb80 <SDMMC_GetCmdResp2+0x90>)
 800eb68:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800eb6a:	2300      	movs	r3, #0
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3714      	adds	r7, #20
 800eb70:	46bd      	mov	sp, r7
 800eb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb76:	4770      	bx	lr
 800eb78:	24000000 	.word	0x24000000
 800eb7c:	10624dd3 	.word	0x10624dd3
 800eb80:	002000c5 	.word	0x002000c5

0800eb84 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b085      	sub	sp, #20
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eb8c:	4b1a      	ldr	r3, [pc, #104]	@ (800ebf8 <SDMMC_GetCmdResp3+0x74>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	4a1a      	ldr	r2, [pc, #104]	@ (800ebfc <SDMMC_GetCmdResp3+0x78>)
 800eb92:	fba2 2303 	umull	r2, r3, r2, r3
 800eb96:	0a5b      	lsrs	r3, r3, #9
 800eb98:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb9c:	fb02 f303 	mul.w	r3, r2, r3
 800eba0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	1e5a      	subs	r2, r3, #1
 800eba6:	60fa      	str	r2, [r7, #12]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d102      	bne.n	800ebb2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ebac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ebb0:	e01b      	b.n	800ebea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebb6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d0ef      	beq.n	800eba2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d1ea      	bne.n	800eba2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebd0:	f003 0304 	and.w	r3, r3, #4
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d004      	beq.n	800ebe2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2204      	movs	r2, #4
 800ebdc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ebde:	2304      	movs	r3, #4
 800ebe0:	e003      	b.n	800ebea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	4a06      	ldr	r2, [pc, #24]	@ (800ec00 <SDMMC_GetCmdResp3+0x7c>)
 800ebe6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ebe8:	2300      	movs	r3, #0
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3714      	adds	r7, #20
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf4:	4770      	bx	lr
 800ebf6:	bf00      	nop
 800ebf8:	24000000 	.word	0x24000000
 800ebfc:	10624dd3 	.word	0x10624dd3
 800ec00:	002000c5 	.word	0x002000c5

0800ec04 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b088      	sub	sp, #32
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	60f8      	str	r0, [r7, #12]
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	607a      	str	r2, [r7, #4]
 800ec10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ec12:	4b35      	ldr	r3, [pc, #212]	@ (800ece8 <SDMMC_GetCmdResp6+0xe4>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	4a35      	ldr	r2, [pc, #212]	@ (800ecec <SDMMC_GetCmdResp6+0xe8>)
 800ec18:	fba2 2303 	umull	r2, r3, r2, r3
 800ec1c:	0a5b      	lsrs	r3, r3, #9
 800ec1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec22:	fb02 f303 	mul.w	r3, r2, r3
 800ec26:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	1e5a      	subs	r2, r3, #1
 800ec2c:	61fa      	str	r2, [r7, #28]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d102      	bne.n	800ec38 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ec32:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ec36:	e052      	b.n	800ecde <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec3c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ec3e:	69bb      	ldr	r3, [r7, #24]
 800ec40:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d0ef      	beq.n	800ec28 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ec48:	69bb      	ldr	r3, [r7, #24]
 800ec4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d1ea      	bne.n	800ec28 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec56:	f003 0304 	and.w	r3, r3, #4
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d004      	beq.n	800ec68 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	2204      	movs	r2, #4
 800ec62:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec64:	2304      	movs	r3, #4
 800ec66:	e03a      	b.n	800ecde <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec6c:	f003 0301 	and.w	r3, r3, #1
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d004      	beq.n	800ec7e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2201      	movs	r2, #1
 800ec78:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	e02f      	b.n	800ecde <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ec7e:	68f8      	ldr	r0, [r7, #12]
 800ec80:	f7ff fb7c 	bl	800e37c <SDMMC_GetCommandResponse>
 800ec84:	4603      	mov	r3, r0
 800ec86:	461a      	mov	r2, r3
 800ec88:	7afb      	ldrb	r3, [r7, #11]
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d001      	beq.n	800ec92 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	e025      	b.n	800ecde <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	4a16      	ldr	r2, [pc, #88]	@ (800ecf0 <SDMMC_GetCmdResp6+0xec>)
 800ec96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ec98:	2100      	movs	r1, #0
 800ec9a:	68f8      	ldr	r0, [r7, #12]
 800ec9c:	f7ff fb7b 	bl	800e396 <SDMMC_GetResponse>
 800eca0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d106      	bne.n	800ecba <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	0c1b      	lsrs	r3, r3, #16
 800ecb0:	b29a      	uxth	r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	e011      	b.n	800ecde <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d002      	beq.n	800ecca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ecc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ecc8:	e009      	b.n	800ecde <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d002      	beq.n	800ecda <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ecd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ecd8:	e001      	b.n	800ecde <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ecda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3720      	adds	r7, #32
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	24000000 	.word	0x24000000
 800ecec:	10624dd3 	.word	0x10624dd3
 800ecf0:	002000c5 	.word	0x002000c5

0800ecf4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b085      	sub	sp, #20
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ecfc:	4b22      	ldr	r3, [pc, #136]	@ (800ed88 <SDMMC_GetCmdResp7+0x94>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	4a22      	ldr	r2, [pc, #136]	@ (800ed8c <SDMMC_GetCmdResp7+0x98>)
 800ed02:	fba2 2303 	umull	r2, r3, r2, r3
 800ed06:	0a5b      	lsrs	r3, r3, #9
 800ed08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed0c:	fb02 f303 	mul.w	r3, r2, r3
 800ed10:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	1e5a      	subs	r2, r3, #1
 800ed16:	60fa      	str	r2, [r7, #12]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d102      	bne.n	800ed22 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed1c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ed20:	e02c      	b.n	800ed7c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed26:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d0ef      	beq.n	800ed12 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d1ea      	bne.n	800ed12 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed40:	f003 0304 	and.w	r3, r3, #4
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d004      	beq.n	800ed52 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2204      	movs	r2, #4
 800ed4c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ed4e:	2304      	movs	r3, #4
 800ed50:	e014      	b.n	800ed7c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed56:	f003 0301 	and.w	r3, r3, #1
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d004      	beq.n	800ed68 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2201      	movs	r2, #1
 800ed62:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed64:	2301      	movs	r3, #1
 800ed66:	e009      	b.n	800ed7c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d002      	beq.n	800ed7a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2240      	movs	r2, #64	@ 0x40
 800ed78:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ed7a:	2300      	movs	r3, #0

}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3714      	adds	r7, #20
 800ed80:	46bd      	mov	sp, r7
 800ed82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed86:	4770      	bx	lr
 800ed88:	24000000 	.word	0x24000000
 800ed8c:	10624dd3 	.word	0x10624dd3

0800ed90 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b085      	sub	sp, #20
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ed98:	4b11      	ldr	r3, [pc, #68]	@ (800ede0 <SDMMC_GetCmdError+0x50>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4a11      	ldr	r2, [pc, #68]	@ (800ede4 <SDMMC_GetCmdError+0x54>)
 800ed9e:	fba2 2303 	umull	r2, r3, r2, r3
 800eda2:	0a5b      	lsrs	r3, r3, #9
 800eda4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eda8:	fb02 f303 	mul.w	r3, r2, r3
 800edac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	1e5a      	subs	r2, r3, #1
 800edb2:	60fa      	str	r2, [r7, #12]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d102      	bne.n	800edbe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800edb8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800edbc:	e009      	b.n	800edd2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d0f1      	beq.n	800edae <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	4a06      	ldr	r2, [pc, #24]	@ (800ede8 <SDMMC_GetCmdError+0x58>)
 800edce:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800edd0:	2300      	movs	r3, #0
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3714      	adds	r7, #20
 800edd6:	46bd      	mov	sp, r7
 800edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop
 800ede0:	24000000 	.word	0x24000000
 800ede4:	10624dd3 	.word	0x10624dd3
 800ede8:	002000c5 	.word	0x002000c5

0800edec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800edf0:	4904      	ldr	r1, [pc, #16]	@ (800ee04 <MX_FATFS_Init+0x18>)
 800edf2:	4805      	ldr	r0, [pc, #20]	@ (800ee08 <MX_FATFS_Init+0x1c>)
 800edf4:	f003 f916 	bl	8012024 <FATFS_LinkDriver>
 800edf8:	4603      	mov	r3, r0
 800edfa:	461a      	mov	r2, r3
 800edfc:	4b03      	ldr	r3, [pc, #12]	@ (800ee0c <MX_FATFS_Init+0x20>)
 800edfe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ee00:	bf00      	nop
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	24000944 	.word	0x24000944
 800ee08:	08017dd8 	.word	0x08017dd8
 800ee0c:	24000940 	.word	0x24000940

0800ee10 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ee10:	b480      	push	{r7}
 800ee12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ee14:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1e:	4770      	bx	lr

0800ee20 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ee26:	2300      	movs	r3, #0
 800ee28:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ee2a:	f000 f885 	bl	800ef38 <BSP_SD_IsDetected>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d001      	beq.n	800ee38 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ee34:	2302      	movs	r3, #2
 800ee36:	e012      	b.n	800ee5e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ee38:	480b      	ldr	r0, [pc, #44]	@ (800ee68 <BSP_SD_Init+0x48>)
 800ee3a:	f7f9 fdc5 	bl	80089c8 <HAL_SD_Init>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ee42:	79fb      	ldrb	r3, [r7, #7]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d109      	bne.n	800ee5c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ee48:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ee4c:	4806      	ldr	r0, [pc, #24]	@ (800ee68 <BSP_SD_Init+0x48>)
 800ee4e:	f7fa fc7b 	bl	8009748 <HAL_SD_ConfigWideBusOperation>
 800ee52:	4603      	mov	r3, r0
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d001      	beq.n	800ee5c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ee58:	2301      	movs	r3, #1
 800ee5a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ee5c:	79fb      	ldrb	r3, [r7, #7]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3708      	adds	r7, #8
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
 800ee66:	bf00      	nop
 800ee68:	2400008c 	.word	0x2400008c

0800ee6c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b086      	sub	sp, #24
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	60f8      	str	r0, [r7, #12]
 800ee74:	60b9      	str	r1, [r7, #8]
 800ee76:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	68ba      	ldr	r2, [r7, #8]
 800ee80:	68f9      	ldr	r1, [r7, #12]
 800ee82:	4806      	ldr	r0, [pc, #24]	@ (800ee9c <BSP_SD_ReadBlocks_DMA+0x30>)
 800ee84:	f7f9 fec0 	bl	8008c08 <HAL_SD_ReadBlocks_DMA>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d001      	beq.n	800ee92 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ee8e:	2301      	movs	r3, #1
 800ee90:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ee92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee94:	4618      	mov	r0, r3
 800ee96:	3718      	adds	r7, #24
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	2400008c 	.word	0x2400008c

0800eea0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b086      	sub	sp, #24
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	60f8      	str	r0, [r7, #12]
 800eea8:	60b9      	str	r1, [r7, #8]
 800eeaa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800eeac:	2300      	movs	r3, #0
 800eeae:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	68ba      	ldr	r2, [r7, #8]
 800eeb4:	68f9      	ldr	r1, [r7, #12]
 800eeb6:	4806      	ldr	r0, [pc, #24]	@ (800eed0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800eeb8:	f7f9 ff4e 	bl	8008d58 <HAL_SD_WriteBlocks_DMA>
 800eebc:	4603      	mov	r3, r0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d001      	beq.n	800eec6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800eec2:	2301      	movs	r3, #1
 800eec4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800eec6:	7dfb      	ldrb	r3, [r7, #23]
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3718      	adds	r7, #24
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	2400008c 	.word	0x2400008c

0800eed4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800eed8:	4805      	ldr	r0, [pc, #20]	@ (800eef0 <BSP_SD_GetCardState+0x1c>)
 800eeda:	f7fa fd47 	bl	800996c <HAL_SD_GetCardState>
 800eede:	4603      	mov	r3, r0
 800eee0:	2b04      	cmp	r3, #4
 800eee2:	bf14      	ite	ne
 800eee4:	2301      	movne	r3, #1
 800eee6:	2300      	moveq	r3, #0
 800eee8:	b2db      	uxtb	r3, r3
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	2400008c 	.word	0x2400008c

0800eef4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800eefc:	6879      	ldr	r1, [r7, #4]
 800eefe:	4803      	ldr	r0, [pc, #12]	@ (800ef0c <BSP_SD_GetCardInfo+0x18>)
 800ef00:	f7fa fbf6 	bl	80096f0 <HAL_SD_GetCardInfo>
}
 800ef04:	bf00      	nop
 800ef06:	3708      	adds	r7, #8
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}
 800ef0c:	2400008c 	.word	0x2400008c

0800ef10 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ef18:	f000 f990 	bl	800f23c <BSP_SD_WriteCpltCallback>
}
 800ef1c:	bf00      	nop
 800ef1e:	3708      	adds	r7, #8
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ef2c:	f000 f998 	bl	800f260 <BSP_SD_ReadCpltCallback>
}
 800ef30:	bf00      	nop
 800ef32:	3708      	adds	r7, #8
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b083      	sub	sp, #12
 800ef3c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800ef42:	79fb      	ldrb	r3, [r7, #7]
 800ef44:	b2db      	uxtb	r3, r3
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	370c      	adds	r7, #12
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef50:	4770      	bx	lr

0800ef52 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b084      	sub	sp, #16
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800ef5a:	f003 f969 	bl	8012230 <osKernelGetTickCount>
 800ef5e:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800ef60:	e006      	b.n	800ef70 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ef62:	f7ff ffb7 	bl	800eed4 <BSP_SD_GetCardState>
 800ef66:	4603      	mov	r3, r0
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d101      	bne.n	800ef70 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	e009      	b.n	800ef84 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800ef70:	f003 f95e 	bl	8012230 <osKernelGetTickCount>
 800ef74:	4602      	mov	r2, r0
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	1ad3      	subs	r3, r2, r3
 800ef7a:	687a      	ldr	r2, [r7, #4]
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d8f0      	bhi.n	800ef62 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ef80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3710      	adds	r7, #16
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	4603      	mov	r3, r0
 800ef94:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ef96:	4b0b      	ldr	r3, [pc, #44]	@ (800efc4 <SD_CheckStatus+0x38>)
 800ef98:	2201      	movs	r2, #1
 800ef9a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ef9c:	f7ff ff9a 	bl	800eed4 <BSP_SD_GetCardState>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d107      	bne.n	800efb6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800efa6:	4b07      	ldr	r3, [pc, #28]	@ (800efc4 <SD_CheckStatus+0x38>)
 800efa8:	781b      	ldrb	r3, [r3, #0]
 800efaa:	b2db      	uxtb	r3, r3
 800efac:	f023 0301 	bic.w	r3, r3, #1
 800efb0:	b2da      	uxtb	r2, r3
 800efb2:	4b04      	ldr	r3, [pc, #16]	@ (800efc4 <SD_CheckStatus+0x38>)
 800efb4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800efb6:	4b03      	ldr	r3, [pc, #12]	@ (800efc4 <SD_CheckStatus+0x38>)
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	b2db      	uxtb	r3, r3
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3708      	adds	r7, #8
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	2400000d 	.word	0x2400000d

0800efc8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	4603      	mov	r3, r0
 800efd0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800efd2:	4b1c      	ldr	r3, [pc, #112]	@ (800f044 <SD_initialize+0x7c>)
 800efd4:	2201      	movs	r2, #1
 800efd6:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800efd8:	f003 f8e2 	bl	80121a0 <osKernelGetState>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b02      	cmp	r3, #2
 800efe0:	d129      	bne.n	800f036 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800efe2:	f7ff ff1d 	bl	800ee20 <BSP_SD_Init>
 800efe6:	4603      	mov	r3, r0
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d107      	bne.n	800effc <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800efec:	79fb      	ldrb	r3, [r7, #7]
 800efee:	4618      	mov	r0, r3
 800eff0:	f7ff ffcc 	bl	800ef8c <SD_CheckStatus>
 800eff4:	4603      	mov	r3, r0
 800eff6:	461a      	mov	r2, r3
 800eff8:	4b12      	ldr	r3, [pc, #72]	@ (800f044 <SD_initialize+0x7c>)
 800effa:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800effc:	4b11      	ldr	r3, [pc, #68]	@ (800f044 <SD_initialize+0x7c>)
 800effe:	781b      	ldrb	r3, [r3, #0]
 800f000:	b2db      	uxtb	r3, r3
 800f002:	2b01      	cmp	r3, #1
 800f004:	d017      	beq.n	800f036 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800f006:	4b10      	ldr	r3, [pc, #64]	@ (800f048 <SD_initialize+0x80>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d107      	bne.n	800f01e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800f00e:	2200      	movs	r2, #0
 800f010:	2102      	movs	r1, #2
 800f012:	200a      	movs	r0, #10
 800f014:	f003 fb1c 	bl	8012650 <osMessageQueueNew>
 800f018:	4603      	mov	r3, r0
 800f01a:	4a0b      	ldr	r2, [pc, #44]	@ (800f048 <SD_initialize+0x80>)
 800f01c:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800f01e:	4b0a      	ldr	r3, [pc, #40]	@ (800f048 <SD_initialize+0x80>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d107      	bne.n	800f036 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800f026:	4b07      	ldr	r3, [pc, #28]	@ (800f044 <SD_initialize+0x7c>)
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	b2db      	uxtb	r3, r3
 800f02c:	f043 0301 	orr.w	r3, r3, #1
 800f030:	b2da      	uxtb	r2, r3
 800f032:	4b04      	ldr	r3, [pc, #16]	@ (800f044 <SD_initialize+0x7c>)
 800f034:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800f036:	4b03      	ldr	r3, [pc, #12]	@ (800f044 <SD_initialize+0x7c>)
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	b2db      	uxtb	r3, r3
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3708      	adds	r7, #8
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}
 800f044:	2400000d 	.word	0x2400000d
 800f048:	24000948 	.word	0x24000948

0800f04c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b082      	sub	sp, #8
 800f050:	af00      	add	r7, sp, #0
 800f052:	4603      	mov	r3, r0
 800f054:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f056:	79fb      	ldrb	r3, [r7, #7]
 800f058:	4618      	mov	r0, r3
 800f05a:	f7ff ff97 	bl	800ef8c <SD_CheckStatus>
 800f05e:	4603      	mov	r3, r0
}
 800f060:	4618      	mov	r0, r3
 800f062:	3708      	adds	r7, #8
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b088      	sub	sp, #32
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	60b9      	str	r1, [r7, #8]
 800f070:	607a      	str	r2, [r7, #4]
 800f072:	603b      	str	r3, [r7, #0]
 800f074:	4603      	mov	r3, r0
 800f076:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800f078:	2301      	movs	r3, #1
 800f07a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f07c:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f080:	f7ff ff67 	bl	800ef52 <SD_CheckStatusWithTimeout>
 800f084:	4603      	mov	r3, r0
 800f086:	2b00      	cmp	r3, #0
 800f088:	da01      	bge.n	800f08e <SD_read+0x26>
  {
    return res;
 800f08a:	7ffb      	ldrb	r3, [r7, #31]
 800f08c:	e02f      	b.n	800f0ee <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800f08e:	683a      	ldr	r2, [r7, #0]
 800f090:	6879      	ldr	r1, [r7, #4]
 800f092:	68b8      	ldr	r0, [r7, #8]
 800f094:	f7ff feea 	bl	800ee6c <BSP_SD_ReadBlocks_DMA>
 800f098:	4603      	mov	r3, r0
 800f09a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800f09c:	7fbb      	ldrb	r3, [r7, #30]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d124      	bne.n	800f0ec <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f0a2:	4b15      	ldr	r3, [pc, #84]	@ (800f0f8 <SD_read+0x90>)
 800f0a4:	6818      	ldr	r0, [r3, #0]
 800f0a6:	f107 0112 	add.w	r1, r7, #18
 800f0aa:	f247 5330 	movw	r3, #30000	@ 0x7530
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	f003 fba2 	bl	80127f8 <osMessageQueueGet>
 800f0b4:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800f0b6:	69bb      	ldr	r3, [r7, #24]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d117      	bne.n	800f0ec <SD_read+0x84>
 800f0bc:	8a7b      	ldrh	r3, [r7, #18]
 800f0be:	2b01      	cmp	r3, #1
 800f0c0:	d114      	bne.n	800f0ec <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800f0c2:	f003 f8b5 	bl	8012230 <osKernelGetTickCount>
 800f0c6:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f0c8:	e007      	b.n	800f0da <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f0ca:	f7ff ff03 	bl	800eed4 <BSP_SD_GetCardState>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d102      	bne.n	800f0da <SD_read+0x72>
              {
                res = RES_OK;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800f0d8:	e008      	b.n	800f0ec <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f0da:	f003 f8a9 	bl	8012230 <osKernelGetTickCount>
 800f0de:	4602      	mov	r2, r0
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	1ad3      	subs	r3, r2, r3
 800f0e4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f0e8:	4293      	cmp	r3, r2
 800f0ea:	d9ee      	bls.n	800f0ca <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800f0ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3720      	adds	r7, #32
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	24000948 	.word	0x24000948

0800f0fc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b088      	sub	sp, #32
 800f100:	af00      	add	r7, sp, #0
 800f102:	60b9      	str	r1, [r7, #8]
 800f104:	607a      	str	r2, [r7, #4]
 800f106:	603b      	str	r3, [r7, #0]
 800f108:	4603      	mov	r3, r0
 800f10a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f10c:	2301      	movs	r3, #1
 800f10e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f110:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f114:	f7ff ff1d 	bl	800ef52 <SD_CheckStatusWithTimeout>
 800f118:	4603      	mov	r3, r0
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	da01      	bge.n	800f122 <SD_write+0x26>
  {
    return res;
 800f11e:	7ffb      	ldrb	r3, [r7, #31]
 800f120:	e02d      	b.n	800f17e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f122:	683a      	ldr	r2, [r7, #0]
 800f124:	6879      	ldr	r1, [r7, #4]
 800f126:	68b8      	ldr	r0, [r7, #8]
 800f128:	f7ff feba 	bl	800eea0 <BSP_SD_WriteBlocks_DMA>
 800f12c:	4603      	mov	r3, r0
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d124      	bne.n	800f17c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f132:	4b15      	ldr	r3, [pc, #84]	@ (800f188 <SD_write+0x8c>)
 800f134:	6818      	ldr	r0, [r3, #0]
 800f136:	f107 0112 	add.w	r1, r7, #18
 800f13a:	f247 5330 	movw	r3, #30000	@ 0x7530
 800f13e:	2200      	movs	r2, #0
 800f140:	f003 fb5a 	bl	80127f8 <osMessageQueueGet>
 800f144:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800f146:	69bb      	ldr	r3, [r7, #24]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d117      	bne.n	800f17c <SD_write+0x80>
 800f14c:	8a7b      	ldrh	r3, [r7, #18]
 800f14e:	2b02      	cmp	r3, #2
 800f150:	d114      	bne.n	800f17c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800f152:	f003 f86d 	bl	8012230 <osKernelGetTickCount>
 800f156:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800f158:	e007      	b.n	800f16a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f15a:	f7ff febb 	bl	800eed4 <BSP_SD_GetCardState>
 800f15e:	4603      	mov	r3, r0
 800f160:	2b00      	cmp	r3, #0
 800f162:	d102      	bne.n	800f16a <SD_write+0x6e>
          {
            res = RES_OK;
 800f164:	2300      	movs	r3, #0
 800f166:	77fb      	strb	r3, [r7, #31]
            break;
 800f168:	e008      	b.n	800f17c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800f16a:	f003 f861 	bl	8012230 <osKernelGetTickCount>
 800f16e:	4602      	mov	r2, r0
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	1ad3      	subs	r3, r2, r3
 800f174:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f178:	4293      	cmp	r3, r2
 800f17a:	d9ee      	bls.n	800f15a <SD_write+0x5e>
    }

  }
#endif

  return res;
 800f17c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f17e:	4618      	mov	r0, r3
 800f180:	3720      	adds	r7, #32
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}
 800f186:	bf00      	nop
 800f188:	24000948 	.word	0x24000948

0800f18c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b08c      	sub	sp, #48	@ 0x30
 800f190:	af00      	add	r7, sp, #0
 800f192:	4603      	mov	r3, r0
 800f194:	603a      	str	r2, [r7, #0]
 800f196:	71fb      	strb	r3, [r7, #7]
 800f198:	460b      	mov	r3, r1
 800f19a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f19c:	2301      	movs	r3, #1
 800f19e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f1a2:	4b25      	ldr	r3, [pc, #148]	@ (800f238 <SD_ioctl+0xac>)
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	b2db      	uxtb	r3, r3
 800f1a8:	f003 0301 	and.w	r3, r3, #1
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d001      	beq.n	800f1b4 <SD_ioctl+0x28>
 800f1b0:	2303      	movs	r3, #3
 800f1b2:	e03c      	b.n	800f22e <SD_ioctl+0xa2>

  switch (cmd)
 800f1b4:	79bb      	ldrb	r3, [r7, #6]
 800f1b6:	2b03      	cmp	r3, #3
 800f1b8:	d834      	bhi.n	800f224 <SD_ioctl+0x98>
 800f1ba:	a201      	add	r2, pc, #4	@ (adr r2, 800f1c0 <SD_ioctl+0x34>)
 800f1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c0:	0800f1d1 	.word	0x0800f1d1
 800f1c4:	0800f1d9 	.word	0x0800f1d9
 800f1c8:	0800f1f1 	.word	0x0800f1f1
 800f1cc:	0800f20b 	.word	0x0800f20b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f1d6:	e028      	b.n	800f22a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f1d8:	f107 0308 	add.w	r3, r7, #8
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7ff fe89 	bl	800eef4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f1e2:	6a3a      	ldr	r2, [r7, #32]
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f1ee:	e01c      	b.n	800f22a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f1f0:	f107 0308 	add.w	r3, r7, #8
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7ff fe7d 	bl	800eef4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1fc:	b29a      	uxth	r2, r3
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f202:	2300      	movs	r3, #0
 800f204:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f208:	e00f      	b.n	800f22a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f20a:	f107 0308 	add.w	r3, r7, #8
 800f20e:	4618      	mov	r0, r3
 800f210:	f7ff fe70 	bl	800eef4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f216:	0a5a      	lsrs	r2, r3, #9
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f21c:	2300      	movs	r3, #0
 800f21e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f222:	e002      	b.n	800f22a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f224:	2304      	movs	r3, #4
 800f226:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f22a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3730      	adds	r7, #48	@ 0x30
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop
 800f238:	2400000d 	.word	0x2400000d

0800f23c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800f242:	2302      	movs	r3, #2
 800f244:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800f246:	4b05      	ldr	r3, [pc, #20]	@ (800f25c <BSP_SD_WriteCpltCallback+0x20>)
 800f248:	6818      	ldr	r0, [r3, #0]
 800f24a:	1db9      	adds	r1, r7, #6
 800f24c:	2300      	movs	r3, #0
 800f24e:	2200      	movs	r2, #0
 800f250:	f003 fa72 	bl	8012738 <osMessageQueuePut>
#endif
}
 800f254:	bf00      	nop
 800f256:	3708      	adds	r7, #8
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}
 800f25c:	24000948 	.word	0x24000948

0800f260 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b082      	sub	sp, #8
 800f264:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800f266:	2301      	movs	r3, #1
 800f268:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800f26a:	4b05      	ldr	r3, [pc, #20]	@ (800f280 <BSP_SD_ReadCpltCallback+0x20>)
 800f26c:	6818      	ldr	r0, [r3, #0]
 800f26e:	1db9      	adds	r1, r7, #6
 800f270:	2300      	movs	r3, #0
 800f272:	2200      	movs	r2, #0
 800f274:	f003 fa60 	bl	8012738 <osMessageQueuePut>
#endif
}
 800f278:	bf00      	nop
 800f27a:	3708      	adds	r7, #8
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	24000948 	.word	0x24000948

0800f284 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b084      	sub	sp, #16
 800f288:	af00      	add	r7, sp, #0
 800f28a:	4603      	mov	r3, r0
 800f28c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f28e:	79fb      	ldrb	r3, [r7, #7]
 800f290:	4a08      	ldr	r2, [pc, #32]	@ (800f2b4 <disk_status+0x30>)
 800f292:	009b      	lsls	r3, r3, #2
 800f294:	4413      	add	r3, r2
 800f296:	685b      	ldr	r3, [r3, #4]
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	79fa      	ldrb	r2, [r7, #7]
 800f29c:	4905      	ldr	r1, [pc, #20]	@ (800f2b4 <disk_status+0x30>)
 800f29e:	440a      	add	r2, r1
 800f2a0:	7a12      	ldrb	r2, [r2, #8]
 800f2a2:	4610      	mov	r0, r2
 800f2a4:	4798      	blx	r3
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3710      	adds	r7, #16
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}
 800f2b4:	24000974 	.word	0x24000974

0800f2b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	4603      	mov	r3, r0
 800f2c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f2c6:	79fb      	ldrb	r3, [r7, #7]
 800f2c8:	4a0d      	ldr	r2, [pc, #52]	@ (800f300 <disk_initialize+0x48>)
 800f2ca:	5cd3      	ldrb	r3, [r2, r3]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d111      	bne.n	800f2f4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f2d0:	79fb      	ldrb	r3, [r7, #7]
 800f2d2:	4a0b      	ldr	r2, [pc, #44]	@ (800f300 <disk_initialize+0x48>)
 800f2d4:	2101      	movs	r1, #1
 800f2d6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f2d8:	79fb      	ldrb	r3, [r7, #7]
 800f2da:	4a09      	ldr	r2, [pc, #36]	@ (800f300 <disk_initialize+0x48>)
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	4413      	add	r3, r2
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	79fa      	ldrb	r2, [r7, #7]
 800f2e6:	4906      	ldr	r1, [pc, #24]	@ (800f300 <disk_initialize+0x48>)
 800f2e8:	440a      	add	r2, r1
 800f2ea:	7a12      	ldrb	r2, [r2, #8]
 800f2ec:	4610      	mov	r0, r2
 800f2ee:	4798      	blx	r3
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3710      	adds	r7, #16
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	24000974 	.word	0x24000974

0800f304 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f304:	b590      	push	{r4, r7, lr}
 800f306:	b087      	sub	sp, #28
 800f308:	af00      	add	r7, sp, #0
 800f30a:	60b9      	str	r1, [r7, #8]
 800f30c:	607a      	str	r2, [r7, #4]
 800f30e:	603b      	str	r3, [r7, #0]
 800f310:	4603      	mov	r3, r0
 800f312:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f314:	7bfb      	ldrb	r3, [r7, #15]
 800f316:	4a0a      	ldr	r2, [pc, #40]	@ (800f340 <disk_read+0x3c>)
 800f318:	009b      	lsls	r3, r3, #2
 800f31a:	4413      	add	r3, r2
 800f31c:	685b      	ldr	r3, [r3, #4]
 800f31e:	689c      	ldr	r4, [r3, #8]
 800f320:	7bfb      	ldrb	r3, [r7, #15]
 800f322:	4a07      	ldr	r2, [pc, #28]	@ (800f340 <disk_read+0x3c>)
 800f324:	4413      	add	r3, r2
 800f326:	7a18      	ldrb	r0, [r3, #8]
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	687a      	ldr	r2, [r7, #4]
 800f32c:	68b9      	ldr	r1, [r7, #8]
 800f32e:	47a0      	blx	r4
 800f330:	4603      	mov	r3, r0
 800f332:	75fb      	strb	r3, [r7, #23]
  return res;
 800f334:	7dfb      	ldrb	r3, [r7, #23]
}
 800f336:	4618      	mov	r0, r3
 800f338:	371c      	adds	r7, #28
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd90      	pop	{r4, r7, pc}
 800f33e:	bf00      	nop
 800f340:	24000974 	.word	0x24000974

0800f344 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f344:	b590      	push	{r4, r7, lr}
 800f346:	b087      	sub	sp, #28
 800f348:	af00      	add	r7, sp, #0
 800f34a:	60b9      	str	r1, [r7, #8]
 800f34c:	607a      	str	r2, [r7, #4]
 800f34e:	603b      	str	r3, [r7, #0]
 800f350:	4603      	mov	r3, r0
 800f352:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f354:	7bfb      	ldrb	r3, [r7, #15]
 800f356:	4a0a      	ldr	r2, [pc, #40]	@ (800f380 <disk_write+0x3c>)
 800f358:	009b      	lsls	r3, r3, #2
 800f35a:	4413      	add	r3, r2
 800f35c:	685b      	ldr	r3, [r3, #4]
 800f35e:	68dc      	ldr	r4, [r3, #12]
 800f360:	7bfb      	ldrb	r3, [r7, #15]
 800f362:	4a07      	ldr	r2, [pc, #28]	@ (800f380 <disk_write+0x3c>)
 800f364:	4413      	add	r3, r2
 800f366:	7a18      	ldrb	r0, [r3, #8]
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	687a      	ldr	r2, [r7, #4]
 800f36c:	68b9      	ldr	r1, [r7, #8]
 800f36e:	47a0      	blx	r4
 800f370:	4603      	mov	r3, r0
 800f372:	75fb      	strb	r3, [r7, #23]
  return res;
 800f374:	7dfb      	ldrb	r3, [r7, #23]
}
 800f376:	4618      	mov	r0, r3
 800f378:	371c      	adds	r7, #28
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd90      	pop	{r4, r7, pc}
 800f37e:	bf00      	nop
 800f380:	24000974 	.word	0x24000974

0800f384 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b084      	sub	sp, #16
 800f388:	af00      	add	r7, sp, #0
 800f38a:	4603      	mov	r3, r0
 800f38c:	603a      	str	r2, [r7, #0]
 800f38e:	71fb      	strb	r3, [r7, #7]
 800f390:	460b      	mov	r3, r1
 800f392:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f394:	79fb      	ldrb	r3, [r7, #7]
 800f396:	4a09      	ldr	r2, [pc, #36]	@ (800f3bc <disk_ioctl+0x38>)
 800f398:	009b      	lsls	r3, r3, #2
 800f39a:	4413      	add	r3, r2
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	691b      	ldr	r3, [r3, #16]
 800f3a0:	79fa      	ldrb	r2, [r7, #7]
 800f3a2:	4906      	ldr	r1, [pc, #24]	@ (800f3bc <disk_ioctl+0x38>)
 800f3a4:	440a      	add	r2, r1
 800f3a6:	7a10      	ldrb	r0, [r2, #8]
 800f3a8:	79b9      	ldrb	r1, [r7, #6]
 800f3aa:	683a      	ldr	r2, [r7, #0]
 800f3ac:	4798      	blx	r3
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	73fb      	strb	r3, [r7, #15]
  return res;
 800f3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3710      	adds	r7, #16
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}
 800f3bc:	24000974 	.word	0x24000974

0800f3c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	b085      	sub	sp, #20
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	781b      	ldrb	r3, [r3, #0]
 800f3ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f3d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f3d4:	021b      	lsls	r3, r3, #8
 800f3d6:	b21a      	sxth	r2, r3
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	b21b      	sxth	r3, r3
 800f3de:	4313      	orrs	r3, r2
 800f3e0:	b21b      	sxth	r3, r3
 800f3e2:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f3e4:	89fb      	ldrh	r3, [r7, #14]
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3714      	adds	r7, #20
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f0:	4770      	bx	lr

0800f3f2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f3f2:	b480      	push	{r7}
 800f3f4:	b085      	sub	sp, #20
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	3303      	adds	r3, #3
 800f3fe:	781b      	ldrb	r3, [r3, #0]
 800f400:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	021b      	lsls	r3, r3, #8
 800f406:	687a      	ldr	r2, [r7, #4]
 800f408:	3202      	adds	r2, #2
 800f40a:	7812      	ldrb	r2, [r2, #0]
 800f40c:	4313      	orrs	r3, r2
 800f40e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	021b      	lsls	r3, r3, #8
 800f414:	687a      	ldr	r2, [r7, #4]
 800f416:	3201      	adds	r2, #1
 800f418:	7812      	ldrb	r2, [r2, #0]
 800f41a:	4313      	orrs	r3, r2
 800f41c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	021b      	lsls	r3, r3, #8
 800f422:	687a      	ldr	r2, [r7, #4]
 800f424:	7812      	ldrb	r2, [r2, #0]
 800f426:	4313      	orrs	r3, r2
 800f428:	60fb      	str	r3, [r7, #12]
	return rv;
 800f42a:	68fb      	ldr	r3, [r7, #12]
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	3714      	adds	r7, #20
 800f430:	46bd      	mov	sp, r7
 800f432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f436:	4770      	bx	lr

0800f438 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f438:	b480      	push	{r7}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	460b      	mov	r3, r1
 800f442:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	1c5a      	adds	r2, r3, #1
 800f448:	607a      	str	r2, [r7, #4]
 800f44a:	887a      	ldrh	r2, [r7, #2]
 800f44c:	b2d2      	uxtb	r2, r2
 800f44e:	701a      	strb	r2, [r3, #0]
 800f450:	887b      	ldrh	r3, [r7, #2]
 800f452:	0a1b      	lsrs	r3, r3, #8
 800f454:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	1c5a      	adds	r2, r3, #1
 800f45a:	607a      	str	r2, [r7, #4]
 800f45c:	887a      	ldrh	r2, [r7, #2]
 800f45e:	b2d2      	uxtb	r2, r2
 800f460:	701a      	strb	r2, [r3, #0]
}
 800f462:	bf00      	nop
 800f464:	370c      	adds	r7, #12
 800f466:	46bd      	mov	sp, r7
 800f468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46c:	4770      	bx	lr

0800f46e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f46e:	b480      	push	{r7}
 800f470:	b083      	sub	sp, #12
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
 800f476:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	1c5a      	adds	r2, r3, #1
 800f47c:	607a      	str	r2, [r7, #4]
 800f47e:	683a      	ldr	r2, [r7, #0]
 800f480:	b2d2      	uxtb	r2, r2
 800f482:	701a      	strb	r2, [r3, #0]
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	0a1b      	lsrs	r3, r3, #8
 800f488:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	1c5a      	adds	r2, r3, #1
 800f48e:	607a      	str	r2, [r7, #4]
 800f490:	683a      	ldr	r2, [r7, #0]
 800f492:	b2d2      	uxtb	r2, r2
 800f494:	701a      	strb	r2, [r3, #0]
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	0a1b      	lsrs	r3, r3, #8
 800f49a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	1c5a      	adds	r2, r3, #1
 800f4a0:	607a      	str	r2, [r7, #4]
 800f4a2:	683a      	ldr	r2, [r7, #0]
 800f4a4:	b2d2      	uxtb	r2, r2
 800f4a6:	701a      	strb	r2, [r3, #0]
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	0a1b      	lsrs	r3, r3, #8
 800f4ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	1c5a      	adds	r2, r3, #1
 800f4b2:	607a      	str	r2, [r7, #4]
 800f4b4:	683a      	ldr	r2, [r7, #0]
 800f4b6:	b2d2      	uxtb	r2, r2
 800f4b8:	701a      	strb	r2, [r3, #0]
}
 800f4ba:	bf00      	nop
 800f4bc:	370c      	adds	r7, #12
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c4:	4770      	bx	lr

0800f4c6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f4c6:	b480      	push	{r7}
 800f4c8:	b087      	sub	sp, #28
 800f4ca:	af00      	add	r7, sp, #0
 800f4cc:	60f8      	str	r0, [r7, #12]
 800f4ce:	60b9      	str	r1, [r7, #8]
 800f4d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d00d      	beq.n	800f4fc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f4e0:	693a      	ldr	r2, [r7, #16]
 800f4e2:	1c53      	adds	r3, r2, #1
 800f4e4:	613b      	str	r3, [r7, #16]
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	1c59      	adds	r1, r3, #1
 800f4ea:	6179      	str	r1, [r7, #20]
 800f4ec:	7812      	ldrb	r2, [r2, #0]
 800f4ee:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	3b01      	subs	r3, #1
 800f4f4:	607b      	str	r3, [r7, #4]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d1f1      	bne.n	800f4e0 <mem_cpy+0x1a>
	}
}
 800f4fc:	bf00      	nop
 800f4fe:	371c      	adds	r7, #28
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr

0800f508 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f508:	b480      	push	{r7}
 800f50a:	b087      	sub	sp, #28
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	60b9      	str	r1, [r7, #8]
 800f512:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	1c5a      	adds	r2, r3, #1
 800f51c:	617a      	str	r2, [r7, #20]
 800f51e:	68ba      	ldr	r2, [r7, #8]
 800f520:	b2d2      	uxtb	r2, r2
 800f522:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	3b01      	subs	r3, #1
 800f528:	607b      	str	r3, [r7, #4]
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d1f3      	bne.n	800f518 <mem_set+0x10>
}
 800f530:	bf00      	nop
 800f532:	bf00      	nop
 800f534:	371c      	adds	r7, #28
 800f536:	46bd      	mov	sp, r7
 800f538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53c:	4770      	bx	lr

0800f53e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f53e:	b480      	push	{r7}
 800f540:	b089      	sub	sp, #36	@ 0x24
 800f542:	af00      	add	r7, sp, #0
 800f544:	60f8      	str	r0, [r7, #12]
 800f546:	60b9      	str	r1, [r7, #8]
 800f548:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	61fb      	str	r3, [r7, #28]
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f552:	2300      	movs	r3, #0
 800f554:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f556:	69fb      	ldr	r3, [r7, #28]
 800f558:	1c5a      	adds	r2, r3, #1
 800f55a:	61fa      	str	r2, [r7, #28]
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	4619      	mov	r1, r3
 800f560:	69bb      	ldr	r3, [r7, #24]
 800f562:	1c5a      	adds	r2, r3, #1
 800f564:	61ba      	str	r2, [r7, #24]
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	1acb      	subs	r3, r1, r3
 800f56a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	3b01      	subs	r3, #1
 800f570:	607b      	str	r3, [r7, #4]
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d002      	beq.n	800f57e <mem_cmp+0x40>
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d0eb      	beq.n	800f556 <mem_cmp+0x18>

	return r;
 800f57e:	697b      	ldr	r3, [r7, #20]
}
 800f580:	4618      	mov	r0, r3
 800f582:	3724      	adds	r7, #36	@ 0x24
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr

0800f58c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f58c:	b480      	push	{r7}
 800f58e:	b083      	sub	sp, #12
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f596:	e002      	b.n	800f59e <chk_chr+0x12>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	3301      	adds	r3, #1
 800f59c:	607b      	str	r3, [r7, #4]
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d005      	beq.n	800f5b2 <chk_chr+0x26>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	d1f2      	bne.n	800f598 <chk_chr+0xc>
	return *str;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	781b      	ldrb	r3, [r3, #0]
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	370c      	adds	r7, #12
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr

0800f5c2 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800f5c2:	b580      	push	{r7, lr}
 800f5c4:	b082      	sub	sp, #8
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d009      	beq.n	800f5e4 <lock_fs+0x22>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	68db      	ldr	r3, [r3, #12]
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f002 fd5b 	bl	8012090 <ff_req_grant>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d001      	beq.n	800f5e4 <lock_fs+0x22>
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	e000      	b.n	800f5e6 <lock_fs+0x24>
 800f5e4:	2300      	movs	r3, #0
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3708      	adds	r7, #8
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}

0800f5ee <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800f5ee:	b580      	push	{r7, lr}
 800f5f0:	b082      	sub	sp, #8
 800f5f2:	af00      	add	r7, sp, #0
 800f5f4:	6078      	str	r0, [r7, #4]
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d00d      	beq.n	800f61c <unlock_fs+0x2e>
 800f600:	78fb      	ldrb	r3, [r7, #3]
 800f602:	2b0c      	cmp	r3, #12
 800f604:	d00a      	beq.n	800f61c <unlock_fs+0x2e>
 800f606:	78fb      	ldrb	r3, [r7, #3]
 800f608:	2b0b      	cmp	r3, #11
 800f60a:	d007      	beq.n	800f61c <unlock_fs+0x2e>
 800f60c:	78fb      	ldrb	r3, [r7, #3]
 800f60e:	2b0f      	cmp	r3, #15
 800f610:	d004      	beq.n	800f61c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	68db      	ldr	r3, [r3, #12]
 800f616:	4618      	mov	r0, r3
 800f618:	f002 fd4f 	bl	80120ba <ff_rel_grant>
	}
}
 800f61c:	bf00      	nop
 800f61e:	3708      	adds	r7, #8
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}

0800f624 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f624:	b480      	push	{r7}
 800f626:	b085      	sub	sp, #20
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f62e:	2300      	movs	r3, #0
 800f630:	60bb      	str	r3, [r7, #8]
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	60fb      	str	r3, [r7, #12]
 800f636:	e029      	b.n	800f68c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f638:	4a27      	ldr	r2, [pc, #156]	@ (800f6d8 <chk_lock+0xb4>)
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	011b      	lsls	r3, r3, #4
 800f63e:	4413      	add	r3, r2
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d01d      	beq.n	800f682 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f646:	4a24      	ldr	r2, [pc, #144]	@ (800f6d8 <chk_lock+0xb4>)
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	011b      	lsls	r3, r3, #4
 800f64c:	4413      	add	r3, r2
 800f64e:	681a      	ldr	r2, [r3, #0]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	429a      	cmp	r2, r3
 800f656:	d116      	bne.n	800f686 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f658:	4a1f      	ldr	r2, [pc, #124]	@ (800f6d8 <chk_lock+0xb4>)
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	011b      	lsls	r3, r3, #4
 800f65e:	4413      	add	r3, r2
 800f660:	3304      	adds	r3, #4
 800f662:	681a      	ldr	r2, [r3, #0]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f668:	429a      	cmp	r2, r3
 800f66a:	d10c      	bne.n	800f686 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f66c:	4a1a      	ldr	r2, [pc, #104]	@ (800f6d8 <chk_lock+0xb4>)
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	011b      	lsls	r3, r3, #4
 800f672:	4413      	add	r3, r2
 800f674:	3308      	adds	r3, #8
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f67c:	429a      	cmp	r2, r3
 800f67e:	d102      	bne.n	800f686 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f680:	e007      	b.n	800f692 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f682:	2301      	movs	r3, #1
 800f684:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	3301      	adds	r3, #1
 800f68a:	60fb      	str	r3, [r7, #12]
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d9d2      	bls.n	800f638 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2b02      	cmp	r3, #2
 800f696:	d109      	bne.n	800f6ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d102      	bne.n	800f6a4 <chk_lock+0x80>
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	2b02      	cmp	r3, #2
 800f6a2:	d101      	bne.n	800f6a8 <chk_lock+0x84>
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	e010      	b.n	800f6ca <chk_lock+0xa6>
 800f6a8:	2312      	movs	r3, #18
 800f6aa:	e00e      	b.n	800f6ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d108      	bne.n	800f6c4 <chk_lock+0xa0>
 800f6b2:	4a09      	ldr	r2, [pc, #36]	@ (800f6d8 <chk_lock+0xb4>)
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	011b      	lsls	r3, r3, #4
 800f6b8:	4413      	add	r3, r2
 800f6ba:	330c      	adds	r3, #12
 800f6bc:	881b      	ldrh	r3, [r3, #0]
 800f6be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f6c2:	d101      	bne.n	800f6c8 <chk_lock+0xa4>
 800f6c4:	2310      	movs	r3, #16
 800f6c6:	e000      	b.n	800f6ca <chk_lock+0xa6>
 800f6c8:	2300      	movs	r3, #0
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3714      	adds	r7, #20
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d4:	4770      	bx	lr
 800f6d6:	bf00      	nop
 800f6d8:	24000954 	.word	0x24000954

0800f6dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b083      	sub	sp, #12
 800f6e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	607b      	str	r3, [r7, #4]
 800f6e6:	e002      	b.n	800f6ee <enq_lock+0x12>
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	607b      	str	r3, [r7, #4]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	d806      	bhi.n	800f702 <enq_lock+0x26>
 800f6f4:	4a09      	ldr	r2, [pc, #36]	@ (800f71c <enq_lock+0x40>)
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	011b      	lsls	r3, r3, #4
 800f6fa:	4413      	add	r3, r2
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d1f2      	bne.n	800f6e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2b02      	cmp	r3, #2
 800f706:	bf14      	ite	ne
 800f708:	2301      	movne	r3, #1
 800f70a:	2300      	moveq	r3, #0
 800f70c:	b2db      	uxtb	r3, r3
}
 800f70e:	4618      	mov	r0, r3
 800f710:	370c      	adds	r7, #12
 800f712:	46bd      	mov	sp, r7
 800f714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f718:	4770      	bx	lr
 800f71a:	bf00      	nop
 800f71c:	24000954 	.word	0x24000954

0800f720 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f720:	b480      	push	{r7}
 800f722:	b085      	sub	sp, #20
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f72a:	2300      	movs	r3, #0
 800f72c:	60fb      	str	r3, [r7, #12]
 800f72e:	e01f      	b.n	800f770 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f730:	4a41      	ldr	r2, [pc, #260]	@ (800f838 <inc_lock+0x118>)
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	011b      	lsls	r3, r3, #4
 800f736:	4413      	add	r3, r2
 800f738:	681a      	ldr	r2, [r3, #0]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	429a      	cmp	r2, r3
 800f740:	d113      	bne.n	800f76a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f742:	4a3d      	ldr	r2, [pc, #244]	@ (800f838 <inc_lock+0x118>)
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	011b      	lsls	r3, r3, #4
 800f748:	4413      	add	r3, r2
 800f74a:	3304      	adds	r3, #4
 800f74c:	681a      	ldr	r2, [r3, #0]
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f752:	429a      	cmp	r2, r3
 800f754:	d109      	bne.n	800f76a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f756:	4a38      	ldr	r2, [pc, #224]	@ (800f838 <inc_lock+0x118>)
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	011b      	lsls	r3, r3, #4
 800f75c:	4413      	add	r3, r2
 800f75e:	3308      	adds	r3, #8
 800f760:	681a      	ldr	r2, [r3, #0]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f766:	429a      	cmp	r2, r3
 800f768:	d006      	beq.n	800f778 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	3301      	adds	r3, #1
 800f76e:	60fb      	str	r3, [r7, #12]
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	2b01      	cmp	r3, #1
 800f774:	d9dc      	bls.n	800f730 <inc_lock+0x10>
 800f776:	e000      	b.n	800f77a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f778:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	2b02      	cmp	r3, #2
 800f77e:	d132      	bne.n	800f7e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f780:	2300      	movs	r3, #0
 800f782:	60fb      	str	r3, [r7, #12]
 800f784:	e002      	b.n	800f78c <inc_lock+0x6c>
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	3301      	adds	r3, #1
 800f78a:	60fb      	str	r3, [r7, #12]
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2b01      	cmp	r3, #1
 800f790:	d806      	bhi.n	800f7a0 <inc_lock+0x80>
 800f792:	4a29      	ldr	r2, [pc, #164]	@ (800f838 <inc_lock+0x118>)
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	011b      	lsls	r3, r3, #4
 800f798:	4413      	add	r3, r2
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d1f2      	bne.n	800f786 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	2b02      	cmp	r3, #2
 800f7a4:	d101      	bne.n	800f7aa <inc_lock+0x8a>
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	e040      	b.n	800f82c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681a      	ldr	r2, [r3, #0]
 800f7ae:	4922      	ldr	r1, [pc, #136]	@ (800f838 <inc_lock+0x118>)
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	011b      	lsls	r3, r3, #4
 800f7b4:	440b      	add	r3, r1
 800f7b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	689a      	ldr	r2, [r3, #8]
 800f7bc:	491e      	ldr	r1, [pc, #120]	@ (800f838 <inc_lock+0x118>)
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	011b      	lsls	r3, r3, #4
 800f7c2:	440b      	add	r3, r1
 800f7c4:	3304      	adds	r3, #4
 800f7c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	695a      	ldr	r2, [r3, #20]
 800f7cc:	491a      	ldr	r1, [pc, #104]	@ (800f838 <inc_lock+0x118>)
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	011b      	lsls	r3, r3, #4
 800f7d2:	440b      	add	r3, r1
 800f7d4:	3308      	adds	r3, #8
 800f7d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f7d8:	4a17      	ldr	r2, [pc, #92]	@ (800f838 <inc_lock+0x118>)
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	011b      	lsls	r3, r3, #4
 800f7de:	4413      	add	r3, r2
 800f7e0:	330c      	adds	r3, #12
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d009      	beq.n	800f800 <inc_lock+0xe0>
 800f7ec:	4a12      	ldr	r2, [pc, #72]	@ (800f838 <inc_lock+0x118>)
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	011b      	lsls	r3, r3, #4
 800f7f2:	4413      	add	r3, r2
 800f7f4:	330c      	adds	r3, #12
 800f7f6:	881b      	ldrh	r3, [r3, #0]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d001      	beq.n	800f800 <inc_lock+0xe0>
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	e015      	b.n	800f82c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d108      	bne.n	800f818 <inc_lock+0xf8>
 800f806:	4a0c      	ldr	r2, [pc, #48]	@ (800f838 <inc_lock+0x118>)
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	011b      	lsls	r3, r3, #4
 800f80c:	4413      	add	r3, r2
 800f80e:	330c      	adds	r3, #12
 800f810:	881b      	ldrh	r3, [r3, #0]
 800f812:	3301      	adds	r3, #1
 800f814:	b29a      	uxth	r2, r3
 800f816:	e001      	b.n	800f81c <inc_lock+0xfc>
 800f818:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f81c:	4906      	ldr	r1, [pc, #24]	@ (800f838 <inc_lock+0x118>)
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	011b      	lsls	r3, r3, #4
 800f822:	440b      	add	r3, r1
 800f824:	330c      	adds	r3, #12
 800f826:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	3301      	adds	r3, #1
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3714      	adds	r7, #20
 800f830:	46bd      	mov	sp, r7
 800f832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f836:	4770      	bx	lr
 800f838:	24000954 	.word	0x24000954

0800f83c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f83c:	b480      	push	{r7}
 800f83e:	b085      	sub	sp, #20
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f844:	2300      	movs	r3, #0
 800f846:	60fb      	str	r3, [r7, #12]
 800f848:	e010      	b.n	800f86c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f84a:	4a0d      	ldr	r2, [pc, #52]	@ (800f880 <clear_lock+0x44>)
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	011b      	lsls	r3, r3, #4
 800f850:	4413      	add	r3, r2
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	687a      	ldr	r2, [r7, #4]
 800f856:	429a      	cmp	r2, r3
 800f858:	d105      	bne.n	800f866 <clear_lock+0x2a>
 800f85a:	4a09      	ldr	r2, [pc, #36]	@ (800f880 <clear_lock+0x44>)
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	011b      	lsls	r3, r3, #4
 800f860:	4413      	add	r3, r2
 800f862:	2200      	movs	r2, #0
 800f864:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	3301      	adds	r3, #1
 800f86a:	60fb      	str	r3, [r7, #12]
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2b01      	cmp	r3, #1
 800f870:	d9eb      	bls.n	800f84a <clear_lock+0xe>
	}
}
 800f872:	bf00      	nop
 800f874:	bf00      	nop
 800f876:	3714      	adds	r7, #20
 800f878:	46bd      	mov	sp, r7
 800f87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87e:	4770      	bx	lr
 800f880:	24000954 	.word	0x24000954

0800f884 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b086      	sub	sp, #24
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f88c:	2300      	movs	r3, #0
 800f88e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	78db      	ldrb	r3, [r3, #3]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d034      	beq.n	800f902 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f89c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	7858      	ldrb	r0, [r3, #1]
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	697a      	ldr	r2, [r7, #20]
 800f8ac:	f7ff fd4a 	bl	800f344 <disk_write>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d002      	beq.n	800f8bc <sync_window+0x38>
			res = FR_DISK_ERR;
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	73fb      	strb	r3, [r7, #15]
 800f8ba:	e022      	b.n	800f902 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8c6:	697a      	ldr	r2, [r7, #20]
 800f8c8:	1ad2      	subs	r2, r2, r3
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	69db      	ldr	r3, [r3, #28]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d217      	bcs.n	800f902 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	789b      	ldrb	r3, [r3, #2]
 800f8d6:	613b      	str	r3, [r7, #16]
 800f8d8:	e010      	b.n	800f8fc <sync_window+0x78>
					wsect += fs->fsize;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	69db      	ldr	r3, [r3, #28]
 800f8de:	697a      	ldr	r2, [r7, #20]
 800f8e0:	4413      	add	r3, r2
 800f8e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	7858      	ldrb	r0, [r3, #1]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f8ee:	2301      	movs	r3, #1
 800f8f0:	697a      	ldr	r2, [r7, #20]
 800f8f2:	f7ff fd27 	bl	800f344 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	3b01      	subs	r3, #1
 800f8fa:	613b      	str	r3, [r7, #16]
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	2b01      	cmp	r3, #1
 800f900:	d8eb      	bhi.n	800f8da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f902:	7bfb      	ldrb	r3, [r7, #15]
}
 800f904:	4618      	mov	r0, r3
 800f906:	3718      	adds	r7, #24
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}

0800f90c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b084      	sub	sp, #16
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f916:	2300      	movs	r3, #0
 800f918:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f91e:	683a      	ldr	r2, [r7, #0]
 800f920:	429a      	cmp	r2, r3
 800f922:	d01b      	beq.n	800f95c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f7ff ffad 	bl	800f884 <sync_window>
 800f92a:	4603      	mov	r3, r0
 800f92c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f92e:	7bfb      	ldrb	r3, [r7, #15]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d113      	bne.n	800f95c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	7858      	ldrb	r0, [r3, #1]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f93e:	2301      	movs	r3, #1
 800f940:	683a      	ldr	r2, [r7, #0]
 800f942:	f7ff fcdf 	bl	800f304 <disk_read>
 800f946:	4603      	mov	r3, r0
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d004      	beq.n	800f956 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f94c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f950:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f952:	2301      	movs	r3, #1
 800f954:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	683a      	ldr	r2, [r7, #0]
 800f95a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800f95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3710      	adds	r7, #16
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
	...

0800f968 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b084      	sub	sp, #16
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f7ff ff87 	bl	800f884 <sync_window>
 800f976:	4603      	mov	r3, r0
 800f978:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f97a:	7bfb      	ldrb	r3, [r7, #15]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d158      	bne.n	800fa32 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	2b03      	cmp	r3, #3
 800f986:	d148      	bne.n	800fa1a <sync_fs+0xb2>
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	791b      	ldrb	r3, [r3, #4]
 800f98c:	2b01      	cmp	r3, #1
 800f98e:	d144      	bne.n	800fa1a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	3334      	adds	r3, #52	@ 0x34
 800f994:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f998:	2100      	movs	r1, #0
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7ff fdb4 	bl	800f508 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	3334      	adds	r3, #52	@ 0x34
 800f9a4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f9a8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f7ff fd43 	bl	800f438 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	3334      	adds	r3, #52	@ 0x34
 800f9b6:	4921      	ldr	r1, [pc, #132]	@ (800fa3c <sync_fs+0xd4>)
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7ff fd58 	bl	800f46e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	3334      	adds	r3, #52	@ 0x34
 800f9c2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f9c6:	491e      	ldr	r1, [pc, #120]	@ (800fa40 <sync_fs+0xd8>)
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7ff fd50 	bl	800f46e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	3334      	adds	r3, #52	@ 0x34
 800f9d2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	695b      	ldr	r3, [r3, #20]
 800f9da:	4619      	mov	r1, r3
 800f9dc:	4610      	mov	r0, r2
 800f9de:	f7ff fd46 	bl	800f46e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	3334      	adds	r3, #52	@ 0x34
 800f9e6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	691b      	ldr	r3, [r3, #16]
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	4610      	mov	r0, r2
 800f9f2:	f7ff fd3c 	bl	800f46e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6a1b      	ldr	r3, [r3, #32]
 800f9fa:	1c5a      	adds	r2, r3, #1
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	7858      	ldrb	r0, [r3, #1]
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fa0e:	2301      	movs	r3, #1
 800fa10:	f7ff fc98 	bl	800f344 <disk_write>
			fs->fsi_flag = 0;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2200      	movs	r2, #0
 800fa18:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	785b      	ldrb	r3, [r3, #1]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	2100      	movs	r1, #0
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7ff fcae 	bl	800f384 <disk_ioctl>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d001      	beq.n	800fa32 <sync_fs+0xca>
 800fa2e:	2301      	movs	r3, #1
 800fa30:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fa32:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	3710      	adds	r7, #16
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}
 800fa3c:	41615252 	.word	0x41615252
 800fa40:	61417272 	.word	0x61417272

0800fa44 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fa44:	b480      	push	{r7}
 800fa46:	b083      	sub	sp, #12
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	3b02      	subs	r3, #2
 800fa52:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	699b      	ldr	r3, [r3, #24]
 800fa58:	3b02      	subs	r3, #2
 800fa5a:	683a      	ldr	r2, [r7, #0]
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d301      	bcc.n	800fa64 <clust2sect+0x20>
 800fa60:	2300      	movs	r3, #0
 800fa62:	e008      	b.n	800fa76 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	895b      	ldrh	r3, [r3, #10]
 800fa68:	461a      	mov	r2, r3
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	fb03 f202 	mul.w	r2, r3, r2
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa74:	4413      	add	r3, r2
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	370c      	adds	r7, #12
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa80:	4770      	bx	lr

0800fa82 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fa82:	b580      	push	{r7, lr}
 800fa84:	b086      	sub	sp, #24
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	6078      	str	r0, [r7, #4]
 800fa8a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	2b01      	cmp	r3, #1
 800fa96:	d904      	bls.n	800faa2 <get_fat+0x20>
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	699b      	ldr	r3, [r3, #24]
 800fa9c:	683a      	ldr	r2, [r7, #0]
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d302      	bcc.n	800faa8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800faa2:	2301      	movs	r3, #1
 800faa4:	617b      	str	r3, [r7, #20]
 800faa6:	e08e      	b.n	800fbc6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800faa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800faac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800faae:	693b      	ldr	r3, [r7, #16]
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	2b03      	cmp	r3, #3
 800fab4:	d061      	beq.n	800fb7a <get_fat+0xf8>
 800fab6:	2b03      	cmp	r3, #3
 800fab8:	dc7b      	bgt.n	800fbb2 <get_fat+0x130>
 800faba:	2b01      	cmp	r3, #1
 800fabc:	d002      	beq.n	800fac4 <get_fat+0x42>
 800fabe:	2b02      	cmp	r3, #2
 800fac0:	d041      	beq.n	800fb46 <get_fat+0xc4>
 800fac2:	e076      	b.n	800fbb2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	60fb      	str	r3, [r7, #12]
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	085b      	lsrs	r3, r3, #1
 800facc:	68fa      	ldr	r2, [r7, #12]
 800face:	4413      	add	r3, r2
 800fad0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	0a5b      	lsrs	r3, r3, #9
 800fada:	4413      	add	r3, r2
 800fadc:	4619      	mov	r1, r3
 800fade:	6938      	ldr	r0, [r7, #16]
 800fae0:	f7ff ff14 	bl	800f90c <move_window>
 800fae4:	4603      	mov	r3, r0
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d166      	bne.n	800fbb8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	1c5a      	adds	r2, r3, #1
 800faee:	60fa      	str	r2, [r7, #12]
 800faf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800faf4:	693a      	ldr	r2, [r7, #16]
 800faf6:	4413      	add	r3, r2
 800faf8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fafc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	0a5b      	lsrs	r3, r3, #9
 800fb06:	4413      	add	r3, r2
 800fb08:	4619      	mov	r1, r3
 800fb0a:	6938      	ldr	r0, [r7, #16]
 800fb0c:	f7ff fefe 	bl	800f90c <move_window>
 800fb10:	4603      	mov	r3, r0
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d152      	bne.n	800fbbc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb1c:	693a      	ldr	r2, [r7, #16]
 800fb1e:	4413      	add	r3, r2
 800fb20:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fb24:	021b      	lsls	r3, r3, #8
 800fb26:	68ba      	ldr	r2, [r7, #8]
 800fb28:	4313      	orrs	r3, r2
 800fb2a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	f003 0301 	and.w	r3, r3, #1
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d002      	beq.n	800fb3c <get_fat+0xba>
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	091b      	lsrs	r3, r3, #4
 800fb3a:	e002      	b.n	800fb42 <get_fat+0xc0>
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fb42:	617b      	str	r3, [r7, #20]
			break;
 800fb44:	e03f      	b.n	800fbc6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fb46:	693b      	ldr	r3, [r7, #16]
 800fb48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	0a1b      	lsrs	r3, r3, #8
 800fb4e:	4413      	add	r3, r2
 800fb50:	4619      	mov	r1, r3
 800fb52:	6938      	ldr	r0, [r7, #16]
 800fb54:	f7ff feda 	bl	800f90c <move_window>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d130      	bne.n	800fbc0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	005b      	lsls	r3, r3, #1
 800fb68:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fb6c:	4413      	add	r3, r2
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f7ff fc26 	bl	800f3c0 <ld_word>
 800fb74:	4603      	mov	r3, r0
 800fb76:	617b      	str	r3, [r7, #20]
			break;
 800fb78:	e025      	b.n	800fbc6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fb7a:	693b      	ldr	r3, [r7, #16]
 800fb7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	09db      	lsrs	r3, r3, #7
 800fb82:	4413      	add	r3, r2
 800fb84:	4619      	mov	r1, r3
 800fb86:	6938      	ldr	r0, [r7, #16]
 800fb88:	f7ff fec0 	bl	800f90c <move_window>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d118      	bne.n	800fbc4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fb92:	693b      	ldr	r3, [r7, #16]
 800fb94:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	009b      	lsls	r3, r3, #2
 800fb9c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fba0:	4413      	add	r3, r2
 800fba2:	4618      	mov	r0, r3
 800fba4:	f7ff fc25 	bl	800f3f2 <ld_dword>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800fbae:	617b      	str	r3, [r7, #20]
			break;
 800fbb0:	e009      	b.n	800fbc6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	617b      	str	r3, [r7, #20]
 800fbb6:	e006      	b.n	800fbc6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fbb8:	bf00      	nop
 800fbba:	e004      	b.n	800fbc6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fbbc:	bf00      	nop
 800fbbe:	e002      	b.n	800fbc6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fbc0:	bf00      	nop
 800fbc2:	e000      	b.n	800fbc6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fbc4:	bf00      	nop
		}
	}

	return val;
 800fbc6:	697b      	ldr	r3, [r7, #20]
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3718      	adds	r7, #24
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}

0800fbd0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fbd0:	b590      	push	{r4, r7, lr}
 800fbd2:	b089      	sub	sp, #36	@ 0x24
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	60f8      	str	r0, [r7, #12]
 800fbd8:	60b9      	str	r1, [r7, #8]
 800fbda:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fbdc:	2302      	movs	r3, #2
 800fbde:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	2b01      	cmp	r3, #1
 800fbe4:	f240 80d9 	bls.w	800fd9a <put_fat+0x1ca>
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	699b      	ldr	r3, [r3, #24]
 800fbec:	68ba      	ldr	r2, [r7, #8]
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	f080 80d3 	bcs.w	800fd9a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	781b      	ldrb	r3, [r3, #0]
 800fbf8:	2b03      	cmp	r3, #3
 800fbfa:	f000 8096 	beq.w	800fd2a <put_fat+0x15a>
 800fbfe:	2b03      	cmp	r3, #3
 800fc00:	f300 80cb 	bgt.w	800fd9a <put_fat+0x1ca>
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	d002      	beq.n	800fc0e <put_fat+0x3e>
 800fc08:	2b02      	cmp	r3, #2
 800fc0a:	d06e      	beq.n	800fcea <put_fat+0x11a>
 800fc0c:	e0c5      	b.n	800fd9a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	61bb      	str	r3, [r7, #24]
 800fc12:	69bb      	ldr	r3, [r7, #24]
 800fc14:	085b      	lsrs	r3, r3, #1
 800fc16:	69ba      	ldr	r2, [r7, #24]
 800fc18:	4413      	add	r3, r2
 800fc1a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc20:	69bb      	ldr	r3, [r7, #24]
 800fc22:	0a5b      	lsrs	r3, r3, #9
 800fc24:	4413      	add	r3, r2
 800fc26:	4619      	mov	r1, r3
 800fc28:	68f8      	ldr	r0, [r7, #12]
 800fc2a:	f7ff fe6f 	bl	800f90c <move_window>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fc32:	7ffb      	ldrb	r3, [r7, #31]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	f040 80a9 	bne.w	800fd8c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fc40:	69bb      	ldr	r3, [r7, #24]
 800fc42:	1c59      	adds	r1, r3, #1
 800fc44:	61b9      	str	r1, [r7, #24]
 800fc46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc4a:	4413      	add	r3, r2
 800fc4c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fc4e:	68bb      	ldr	r3, [r7, #8]
 800fc50:	f003 0301 	and.w	r3, r3, #1
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d00d      	beq.n	800fc74 <put_fat+0xa4>
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	b25b      	sxtb	r3, r3
 800fc5e:	f003 030f 	and.w	r3, r3, #15
 800fc62:	b25a      	sxtb	r2, r3
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	b25b      	sxtb	r3, r3
 800fc68:	011b      	lsls	r3, r3, #4
 800fc6a:	b25b      	sxtb	r3, r3
 800fc6c:	4313      	orrs	r3, r2
 800fc6e:	b25b      	sxtb	r3, r3
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	e001      	b.n	800fc78 <put_fat+0xa8>
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	b2db      	uxtb	r3, r3
 800fc78:	697a      	ldr	r2, [r7, #20]
 800fc7a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2201      	movs	r2, #1
 800fc80:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc86:	69bb      	ldr	r3, [r7, #24]
 800fc88:	0a5b      	lsrs	r3, r3, #9
 800fc8a:	4413      	add	r3, r2
 800fc8c:	4619      	mov	r1, r3
 800fc8e:	68f8      	ldr	r0, [r7, #12]
 800fc90:	f7ff fe3c 	bl	800f90c <move_window>
 800fc94:	4603      	mov	r3, r0
 800fc96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fc98:	7ffb      	ldrb	r3, [r7, #31]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d178      	bne.n	800fd90 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fca4:	69bb      	ldr	r3, [r7, #24]
 800fca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcaa:	4413      	add	r3, r2
 800fcac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	f003 0301 	and.w	r3, r3, #1
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d003      	beq.n	800fcc0 <put_fat+0xf0>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	091b      	lsrs	r3, r3, #4
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	e00e      	b.n	800fcde <put_fat+0x10e>
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	b25b      	sxtb	r3, r3
 800fcc6:	f023 030f 	bic.w	r3, r3, #15
 800fcca:	b25a      	sxtb	r2, r3
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	0a1b      	lsrs	r3, r3, #8
 800fcd0:	b25b      	sxtb	r3, r3
 800fcd2:	f003 030f 	and.w	r3, r3, #15
 800fcd6:	b25b      	sxtb	r3, r3
 800fcd8:	4313      	orrs	r3, r2
 800fcda:	b25b      	sxtb	r3, r3
 800fcdc:	b2db      	uxtb	r3, r3
 800fcde:	697a      	ldr	r2, [r7, #20]
 800fce0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	2201      	movs	r2, #1
 800fce6:	70da      	strb	r2, [r3, #3]
			break;
 800fce8:	e057      	b.n	800fd9a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	0a1b      	lsrs	r3, r3, #8
 800fcf2:	4413      	add	r3, r2
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	68f8      	ldr	r0, [r7, #12]
 800fcf8:	f7ff fe08 	bl	800f90c <move_window>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fd00:	7ffb      	ldrb	r3, [r7, #31]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d146      	bne.n	800fd94 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	005b      	lsls	r3, r3, #1
 800fd10:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fd14:	4413      	add	r3, r2
 800fd16:	687a      	ldr	r2, [r7, #4]
 800fd18:	b292      	uxth	r2, r2
 800fd1a:	4611      	mov	r1, r2
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f7ff fb8b 	bl	800f438 <st_word>
			fs->wflag = 1;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2201      	movs	r2, #1
 800fd26:	70da      	strb	r2, [r3, #3]
			break;
 800fd28:	e037      	b.n	800fd9a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	09db      	lsrs	r3, r3, #7
 800fd32:	4413      	add	r3, r2
 800fd34:	4619      	mov	r1, r3
 800fd36:	68f8      	ldr	r0, [r7, #12]
 800fd38:	f7ff fde8 	bl	800f90c <move_window>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fd40:	7ffb      	ldrb	r3, [r7, #31]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d128      	bne.n	800fd98 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	009b      	lsls	r3, r3, #2
 800fd56:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fd5a:	4413      	add	r3, r2
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7ff fb48 	bl	800f3f2 <ld_dword>
 800fd62:	4603      	mov	r3, r0
 800fd64:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800fd68:	4323      	orrs	r3, r4
 800fd6a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	009b      	lsls	r3, r3, #2
 800fd76:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fd7a:	4413      	add	r3, r2
 800fd7c:	6879      	ldr	r1, [r7, #4]
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7ff fb75 	bl	800f46e <st_dword>
			fs->wflag = 1;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	2201      	movs	r2, #1
 800fd88:	70da      	strb	r2, [r3, #3]
			break;
 800fd8a:	e006      	b.n	800fd9a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fd8c:	bf00      	nop
 800fd8e:	e004      	b.n	800fd9a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fd90:	bf00      	nop
 800fd92:	e002      	b.n	800fd9a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fd94:	bf00      	nop
 800fd96:	e000      	b.n	800fd9a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fd98:	bf00      	nop
		}
	}
	return res;
 800fd9a:	7ffb      	ldrb	r3, [r7, #31]
}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	3724      	adds	r7, #36	@ 0x24
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd90      	pop	{r4, r7, pc}

0800fda4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b088      	sub	sp, #32
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	60f8      	str	r0, [r7, #12]
 800fdac:	60b9      	str	r1, [r7, #8]
 800fdae:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	2b01      	cmp	r3, #1
 800fdbe:	d904      	bls.n	800fdca <remove_chain+0x26>
 800fdc0:	69bb      	ldr	r3, [r7, #24]
 800fdc2:	699b      	ldr	r3, [r3, #24]
 800fdc4:	68ba      	ldr	r2, [r7, #8]
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d301      	bcc.n	800fdce <remove_chain+0x2a>
 800fdca:	2302      	movs	r3, #2
 800fdcc:	e04b      	b.n	800fe66 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d00c      	beq.n	800fdee <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fdd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fdd8:	6879      	ldr	r1, [r7, #4]
 800fdda:	69b8      	ldr	r0, [r7, #24]
 800fddc:	f7ff fef8 	bl	800fbd0 <put_fat>
 800fde0:	4603      	mov	r3, r0
 800fde2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fde4:	7ffb      	ldrb	r3, [r7, #31]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d001      	beq.n	800fdee <remove_chain+0x4a>
 800fdea:	7ffb      	ldrb	r3, [r7, #31]
 800fdec:	e03b      	b.n	800fe66 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fdee:	68b9      	ldr	r1, [r7, #8]
 800fdf0:	68f8      	ldr	r0, [r7, #12]
 800fdf2:	f7ff fe46 	bl	800fa82 <get_fat>
 800fdf6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d031      	beq.n	800fe62 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	d101      	bne.n	800fe08 <remove_chain+0x64>
 800fe04:	2302      	movs	r3, #2
 800fe06:	e02e      	b.n	800fe66 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fe08:	697b      	ldr	r3, [r7, #20]
 800fe0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fe0e:	d101      	bne.n	800fe14 <remove_chain+0x70>
 800fe10:	2301      	movs	r3, #1
 800fe12:	e028      	b.n	800fe66 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fe14:	2200      	movs	r2, #0
 800fe16:	68b9      	ldr	r1, [r7, #8]
 800fe18:	69b8      	ldr	r0, [r7, #24]
 800fe1a:	f7ff fed9 	bl	800fbd0 <put_fat>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fe22:	7ffb      	ldrb	r3, [r7, #31]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d001      	beq.n	800fe2c <remove_chain+0x88>
 800fe28:	7ffb      	ldrb	r3, [r7, #31]
 800fe2a:	e01c      	b.n	800fe66 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fe2c:	69bb      	ldr	r3, [r7, #24]
 800fe2e:	695a      	ldr	r2, [r3, #20]
 800fe30:	69bb      	ldr	r3, [r7, #24]
 800fe32:	699b      	ldr	r3, [r3, #24]
 800fe34:	3b02      	subs	r3, #2
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d20b      	bcs.n	800fe52 <remove_chain+0xae>
			fs->free_clst++;
 800fe3a:	69bb      	ldr	r3, [r7, #24]
 800fe3c:	695b      	ldr	r3, [r3, #20]
 800fe3e:	1c5a      	adds	r2, r3, #1
 800fe40:	69bb      	ldr	r3, [r7, #24]
 800fe42:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800fe44:	69bb      	ldr	r3, [r7, #24]
 800fe46:	791b      	ldrb	r3, [r3, #4]
 800fe48:	f043 0301 	orr.w	r3, r3, #1
 800fe4c:	b2da      	uxtb	r2, r3
 800fe4e:	69bb      	ldr	r3, [r7, #24]
 800fe50:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fe56:	69bb      	ldr	r3, [r7, #24]
 800fe58:	699b      	ldr	r3, [r3, #24]
 800fe5a:	68ba      	ldr	r2, [r7, #8]
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d3c6      	bcc.n	800fdee <remove_chain+0x4a>
 800fe60:	e000      	b.n	800fe64 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fe62:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fe64:	2300      	movs	r3, #0
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3720      	adds	r7, #32
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}

0800fe6e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fe6e:	b580      	push	{r7, lr}
 800fe70:	b088      	sub	sp, #32
 800fe72:	af00      	add	r7, sp, #0
 800fe74:	6078      	str	r0, [r7, #4]
 800fe76:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d10d      	bne.n	800fea0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fe84:	693b      	ldr	r3, [r7, #16]
 800fe86:	691b      	ldr	r3, [r3, #16]
 800fe88:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fe8a:	69bb      	ldr	r3, [r7, #24]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d004      	beq.n	800fe9a <create_chain+0x2c>
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	699b      	ldr	r3, [r3, #24]
 800fe94:	69ba      	ldr	r2, [r7, #24]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d31b      	bcc.n	800fed2 <create_chain+0x64>
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	61bb      	str	r3, [r7, #24]
 800fe9e:	e018      	b.n	800fed2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fea0:	6839      	ldr	r1, [r7, #0]
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f7ff fded 	bl	800fa82 <get_fat>
 800fea8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	2b01      	cmp	r3, #1
 800feae:	d801      	bhi.n	800feb4 <create_chain+0x46>
 800feb0:	2301      	movs	r3, #1
 800feb2:	e070      	b.n	800ff96 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800feba:	d101      	bne.n	800fec0 <create_chain+0x52>
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	e06a      	b.n	800ff96 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	699b      	ldr	r3, [r3, #24]
 800fec4:	68fa      	ldr	r2, [r7, #12]
 800fec6:	429a      	cmp	r2, r3
 800fec8:	d201      	bcs.n	800fece <create_chain+0x60>
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	e063      	b.n	800ff96 <create_chain+0x128>
		scl = clst;
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fed2:	69bb      	ldr	r3, [r7, #24]
 800fed4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fed6:	69fb      	ldr	r3, [r7, #28]
 800fed8:	3301      	adds	r3, #1
 800feda:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fedc:	693b      	ldr	r3, [r7, #16]
 800fede:	699b      	ldr	r3, [r3, #24]
 800fee0:	69fa      	ldr	r2, [r7, #28]
 800fee2:	429a      	cmp	r2, r3
 800fee4:	d307      	bcc.n	800fef6 <create_chain+0x88>
				ncl = 2;
 800fee6:	2302      	movs	r3, #2
 800fee8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800feea:	69fa      	ldr	r2, [r7, #28]
 800feec:	69bb      	ldr	r3, [r7, #24]
 800feee:	429a      	cmp	r2, r3
 800fef0:	d901      	bls.n	800fef6 <create_chain+0x88>
 800fef2:	2300      	movs	r3, #0
 800fef4:	e04f      	b.n	800ff96 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fef6:	69f9      	ldr	r1, [r7, #28]
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f7ff fdc2 	bl	800fa82 <get_fat>
 800fefe:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d00e      	beq.n	800ff24 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	2b01      	cmp	r3, #1
 800ff0a:	d003      	beq.n	800ff14 <create_chain+0xa6>
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ff12:	d101      	bne.n	800ff18 <create_chain+0xaa>
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	e03e      	b.n	800ff96 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ff18:	69fa      	ldr	r2, [r7, #28]
 800ff1a:	69bb      	ldr	r3, [r7, #24]
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d1da      	bne.n	800fed6 <create_chain+0x68>
 800ff20:	2300      	movs	r3, #0
 800ff22:	e038      	b.n	800ff96 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ff24:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ff26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ff2a:	69f9      	ldr	r1, [r7, #28]
 800ff2c:	6938      	ldr	r0, [r7, #16]
 800ff2e:	f7ff fe4f 	bl	800fbd0 <put_fat>
 800ff32:	4603      	mov	r3, r0
 800ff34:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ff36:	7dfb      	ldrb	r3, [r7, #23]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d109      	bne.n	800ff50 <create_chain+0xe2>
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d006      	beq.n	800ff50 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ff42:	69fa      	ldr	r2, [r7, #28]
 800ff44:	6839      	ldr	r1, [r7, #0]
 800ff46:	6938      	ldr	r0, [r7, #16]
 800ff48:	f7ff fe42 	bl	800fbd0 <put_fat>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ff50:	7dfb      	ldrb	r3, [r7, #23]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d116      	bne.n	800ff84 <create_chain+0x116>
		fs->last_clst = ncl;
 800ff56:	693b      	ldr	r3, [r7, #16]
 800ff58:	69fa      	ldr	r2, [r7, #28]
 800ff5a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	695a      	ldr	r2, [r3, #20]
 800ff60:	693b      	ldr	r3, [r7, #16]
 800ff62:	699b      	ldr	r3, [r3, #24]
 800ff64:	3b02      	subs	r3, #2
 800ff66:	429a      	cmp	r2, r3
 800ff68:	d804      	bhi.n	800ff74 <create_chain+0x106>
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	695b      	ldr	r3, [r3, #20]
 800ff6e:	1e5a      	subs	r2, r3, #1
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	791b      	ldrb	r3, [r3, #4]
 800ff78:	f043 0301 	orr.w	r3, r3, #1
 800ff7c:	b2da      	uxtb	r2, r3
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	711a      	strb	r2, [r3, #4]
 800ff82:	e007      	b.n	800ff94 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ff84:	7dfb      	ldrb	r3, [r7, #23]
 800ff86:	2b01      	cmp	r3, #1
 800ff88:	d102      	bne.n	800ff90 <create_chain+0x122>
 800ff8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ff8e:	e000      	b.n	800ff92 <create_chain+0x124>
 800ff90:	2301      	movs	r3, #1
 800ff92:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ff94:	69fb      	ldr	r3, [r7, #28]
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3720      	adds	r7, #32
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ff9e:	b480      	push	{r7}
 800ffa0:	b087      	sub	sp, #28
 800ffa2:	af00      	add	r7, sp, #0
 800ffa4:	6078      	str	r0, [r7, #4]
 800ffa6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffb2:	3304      	adds	r3, #4
 800ffb4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	0a5b      	lsrs	r3, r3, #9
 800ffba:	68fa      	ldr	r2, [r7, #12]
 800ffbc:	8952      	ldrh	r2, [r2, #10]
 800ffbe:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffc2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	1d1a      	adds	r2, r3, #4
 800ffc8:	613a      	str	r2, [r7, #16]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d101      	bne.n	800ffd8 <clmt_clust+0x3a>
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	e010      	b.n	800fffa <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ffd8:	697a      	ldr	r2, [r7, #20]
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d307      	bcc.n	800fff0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ffe0:	697a      	ldr	r2, [r7, #20]
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	1ad3      	subs	r3, r2, r3
 800ffe6:	617b      	str	r3, [r7, #20]
 800ffe8:	693b      	ldr	r3, [r7, #16]
 800ffea:	3304      	adds	r3, #4
 800ffec:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ffee:	e7e9      	b.n	800ffc4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800fff0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	681a      	ldr	r2, [r3, #0]
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	4413      	add	r3, r2
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	371c      	adds	r7, #28
 800fffe:	46bd      	mov	sp, r7
 8010000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010004:	4770      	bx	lr

08010006 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010006:	b580      	push	{r7, lr}
 8010008:	b086      	sub	sp, #24
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
 801000e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801001c:	d204      	bcs.n	8010028 <dir_sdi+0x22>
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	f003 031f 	and.w	r3, r3, #31
 8010024:	2b00      	cmp	r3, #0
 8010026:	d001      	beq.n	801002c <dir_sdi+0x26>
		return FR_INT_ERR;
 8010028:	2302      	movs	r3, #2
 801002a:	e063      	b.n	80100f4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	683a      	ldr	r2, [r7, #0]
 8010030:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	689b      	ldr	r3, [r3, #8]
 8010036:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010038:	697b      	ldr	r3, [r7, #20]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d106      	bne.n	801004c <dir_sdi+0x46>
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	2b02      	cmp	r3, #2
 8010044:	d902      	bls.n	801004c <dir_sdi+0x46>
		clst = fs->dirbase;
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801004a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d10c      	bne.n	801006c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	095b      	lsrs	r3, r3, #5
 8010056:	693a      	ldr	r2, [r7, #16]
 8010058:	8912      	ldrh	r2, [r2, #8]
 801005a:	4293      	cmp	r3, r2
 801005c:	d301      	bcc.n	8010062 <dir_sdi+0x5c>
 801005e:	2302      	movs	r3, #2
 8010060:	e048      	b.n	80100f4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	61da      	str	r2, [r3, #28]
 801006a:	e029      	b.n	80100c0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	895b      	ldrh	r3, [r3, #10]
 8010070:	025b      	lsls	r3, r3, #9
 8010072:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010074:	e019      	b.n	80100aa <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6979      	ldr	r1, [r7, #20]
 801007a:	4618      	mov	r0, r3
 801007c:	f7ff fd01 	bl	800fa82 <get_fat>
 8010080:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010088:	d101      	bne.n	801008e <dir_sdi+0x88>
 801008a:	2301      	movs	r3, #1
 801008c:	e032      	b.n	80100f4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	2b01      	cmp	r3, #1
 8010092:	d904      	bls.n	801009e <dir_sdi+0x98>
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	699b      	ldr	r3, [r3, #24]
 8010098:	697a      	ldr	r2, [r7, #20]
 801009a:	429a      	cmp	r2, r3
 801009c:	d301      	bcc.n	80100a2 <dir_sdi+0x9c>
 801009e:	2302      	movs	r3, #2
 80100a0:	e028      	b.n	80100f4 <dir_sdi+0xee>
			ofs -= csz;
 80100a2:	683a      	ldr	r2, [r7, #0]
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	1ad3      	subs	r3, r2, r3
 80100a8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80100aa:	683a      	ldr	r2, [r7, #0]
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d2e1      	bcs.n	8010076 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80100b2:	6979      	ldr	r1, [r7, #20]
 80100b4:	6938      	ldr	r0, [r7, #16]
 80100b6:	f7ff fcc5 	bl	800fa44 <clust2sect>
 80100ba:	4602      	mov	r2, r0
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	697a      	ldr	r2, [r7, #20]
 80100c4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	69db      	ldr	r3, [r3, #28]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d101      	bne.n	80100d2 <dir_sdi+0xcc>
 80100ce:	2302      	movs	r3, #2
 80100d0:	e010      	b.n	80100f4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	69da      	ldr	r2, [r3, #28]
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	0a5b      	lsrs	r3, r3, #9
 80100da:	441a      	add	r2, r3
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100ec:	441a      	add	r2, r3
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80100f2:	2300      	movs	r3, #0
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	3718      	adds	r7, #24
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b086      	sub	sp, #24
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	695b      	ldr	r3, [r3, #20]
 8010110:	3320      	adds	r3, #32
 8010112:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	69db      	ldr	r3, [r3, #28]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d003      	beq.n	8010124 <dir_next+0x28>
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010122:	d301      	bcc.n	8010128 <dir_next+0x2c>
 8010124:	2304      	movs	r3, #4
 8010126:	e0aa      	b.n	801027e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801012e:	2b00      	cmp	r3, #0
 8010130:	f040 8098 	bne.w	8010264 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	69db      	ldr	r3, [r3, #28]
 8010138:	1c5a      	adds	r2, r3, #1
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	699b      	ldr	r3, [r3, #24]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d10b      	bne.n	801015e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	095b      	lsrs	r3, r3, #5
 801014a:	68fa      	ldr	r2, [r7, #12]
 801014c:	8912      	ldrh	r2, [r2, #8]
 801014e:	4293      	cmp	r3, r2
 8010150:	f0c0 8088 	bcc.w	8010264 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2200      	movs	r2, #0
 8010158:	61da      	str	r2, [r3, #28]
 801015a:	2304      	movs	r3, #4
 801015c:	e08f      	b.n	801027e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	0a5b      	lsrs	r3, r3, #9
 8010162:	68fa      	ldr	r2, [r7, #12]
 8010164:	8952      	ldrh	r2, [r2, #10]
 8010166:	3a01      	subs	r2, #1
 8010168:	4013      	ands	r3, r2
 801016a:	2b00      	cmp	r3, #0
 801016c:	d17a      	bne.n	8010264 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801016e:	687a      	ldr	r2, [r7, #4]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	699b      	ldr	r3, [r3, #24]
 8010174:	4619      	mov	r1, r3
 8010176:	4610      	mov	r0, r2
 8010178:	f7ff fc83 	bl	800fa82 <get_fat>
 801017c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801017e:	697b      	ldr	r3, [r7, #20]
 8010180:	2b01      	cmp	r3, #1
 8010182:	d801      	bhi.n	8010188 <dir_next+0x8c>
 8010184:	2302      	movs	r3, #2
 8010186:	e07a      	b.n	801027e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801018e:	d101      	bne.n	8010194 <dir_next+0x98>
 8010190:	2301      	movs	r3, #1
 8010192:	e074      	b.n	801027e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	699b      	ldr	r3, [r3, #24]
 8010198:	697a      	ldr	r2, [r7, #20]
 801019a:	429a      	cmp	r2, r3
 801019c:	d358      	bcc.n	8010250 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d104      	bne.n	80101ae <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2200      	movs	r2, #0
 80101a8:	61da      	str	r2, [r3, #28]
 80101aa:	2304      	movs	r3, #4
 80101ac:	e067      	b.n	801027e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80101ae:	687a      	ldr	r2, [r7, #4]
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	699b      	ldr	r3, [r3, #24]
 80101b4:	4619      	mov	r1, r3
 80101b6:	4610      	mov	r0, r2
 80101b8:	f7ff fe59 	bl	800fe6e <create_chain>
 80101bc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d101      	bne.n	80101c8 <dir_next+0xcc>
 80101c4:	2307      	movs	r3, #7
 80101c6:	e05a      	b.n	801027e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	2b01      	cmp	r3, #1
 80101cc:	d101      	bne.n	80101d2 <dir_next+0xd6>
 80101ce:	2302      	movs	r3, #2
 80101d0:	e055      	b.n	801027e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80101d8:	d101      	bne.n	80101de <dir_next+0xe2>
 80101da:	2301      	movs	r3, #1
 80101dc:	e04f      	b.n	801027e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80101de:	68f8      	ldr	r0, [r7, #12]
 80101e0:	f7ff fb50 	bl	800f884 <sync_window>
 80101e4:	4603      	mov	r3, r0
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d001      	beq.n	80101ee <dir_next+0xf2>
 80101ea:	2301      	movs	r3, #1
 80101ec:	e047      	b.n	801027e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	3334      	adds	r3, #52	@ 0x34
 80101f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80101f6:	2100      	movs	r1, #0
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7ff f985 	bl	800f508 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80101fe:	2300      	movs	r3, #0
 8010200:	613b      	str	r3, [r7, #16]
 8010202:	6979      	ldr	r1, [r7, #20]
 8010204:	68f8      	ldr	r0, [r7, #12]
 8010206:	f7ff fc1d 	bl	800fa44 <clust2sect>
 801020a:	4602      	mov	r2, r0
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	631a      	str	r2, [r3, #48]	@ 0x30
 8010210:	e012      	b.n	8010238 <dir_next+0x13c>
						fs->wflag = 1;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	2201      	movs	r2, #1
 8010216:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010218:	68f8      	ldr	r0, [r7, #12]
 801021a:	f7ff fb33 	bl	800f884 <sync_window>
 801021e:	4603      	mov	r3, r0
 8010220:	2b00      	cmp	r3, #0
 8010222:	d001      	beq.n	8010228 <dir_next+0x12c>
 8010224:	2301      	movs	r3, #1
 8010226:	e02a      	b.n	801027e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010228:	693b      	ldr	r3, [r7, #16]
 801022a:	3301      	adds	r3, #1
 801022c:	613b      	str	r3, [r7, #16]
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010232:	1c5a      	adds	r2, r3, #1
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	631a      	str	r2, [r3, #48]	@ 0x30
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	895b      	ldrh	r3, [r3, #10]
 801023c:	461a      	mov	r2, r3
 801023e:	693b      	ldr	r3, [r7, #16]
 8010240:	4293      	cmp	r3, r2
 8010242:	d3e6      	bcc.n	8010212 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010248:	693b      	ldr	r3, [r7, #16]
 801024a:	1ad2      	subs	r2, r2, r3
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	697a      	ldr	r2, [r7, #20]
 8010254:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010256:	6979      	ldr	r1, [r7, #20]
 8010258:	68f8      	ldr	r0, [r7, #12]
 801025a:	f7ff fbf3 	bl	800fa44 <clust2sect>
 801025e:	4602      	mov	r2, r0
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	68ba      	ldr	r2, [r7, #8]
 8010268:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010276:	441a      	add	r2, r3
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801027c:	2300      	movs	r3, #0
}
 801027e:	4618      	mov	r0, r3
 8010280:	3718      	adds	r7, #24
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}

08010286 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010286:	b580      	push	{r7, lr}
 8010288:	b086      	sub	sp, #24
 801028a:	af00      	add	r7, sp, #0
 801028c:	6078      	str	r0, [r7, #4]
 801028e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010296:	2100      	movs	r1, #0
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f7ff feb4 	bl	8010006 <dir_sdi>
 801029e:	4603      	mov	r3, r0
 80102a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80102a2:	7dfb      	ldrb	r3, [r7, #23]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d12b      	bne.n	8010300 <dir_alloc+0x7a>
		n = 0;
 80102a8:	2300      	movs	r3, #0
 80102aa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	69db      	ldr	r3, [r3, #28]
 80102b0:	4619      	mov	r1, r3
 80102b2:	68f8      	ldr	r0, [r7, #12]
 80102b4:	f7ff fb2a 	bl	800f90c <move_window>
 80102b8:	4603      	mov	r3, r0
 80102ba:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80102bc:	7dfb      	ldrb	r3, [r7, #23]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d11d      	bne.n	80102fe <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	6a1b      	ldr	r3, [r3, #32]
 80102c6:	781b      	ldrb	r3, [r3, #0]
 80102c8:	2be5      	cmp	r3, #229	@ 0xe5
 80102ca:	d004      	beq.n	80102d6 <dir_alloc+0x50>
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	6a1b      	ldr	r3, [r3, #32]
 80102d0:	781b      	ldrb	r3, [r3, #0]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d107      	bne.n	80102e6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80102d6:	693b      	ldr	r3, [r7, #16]
 80102d8:	3301      	adds	r3, #1
 80102da:	613b      	str	r3, [r7, #16]
 80102dc:	693a      	ldr	r2, [r7, #16]
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d102      	bne.n	80102ea <dir_alloc+0x64>
 80102e4:	e00c      	b.n	8010300 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80102e6:	2300      	movs	r3, #0
 80102e8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80102ea:	2101      	movs	r1, #1
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f7ff ff05 	bl	80100fc <dir_next>
 80102f2:	4603      	mov	r3, r0
 80102f4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80102f6:	7dfb      	ldrb	r3, [r7, #23]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d0d7      	beq.n	80102ac <dir_alloc+0x26>
 80102fc:	e000      	b.n	8010300 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80102fe:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010300:	7dfb      	ldrb	r3, [r7, #23]
 8010302:	2b04      	cmp	r3, #4
 8010304:	d101      	bne.n	801030a <dir_alloc+0x84>
 8010306:	2307      	movs	r3, #7
 8010308:	75fb      	strb	r3, [r7, #23]
	return res;
 801030a:	7dfb      	ldrb	r3, [r7, #23]
}
 801030c:	4618      	mov	r0, r3
 801030e:	3718      	adds	r7, #24
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	331a      	adds	r3, #26
 8010322:	4618      	mov	r0, r3
 8010324:	f7ff f84c 	bl	800f3c0 <ld_word>
 8010328:	4603      	mov	r3, r0
 801032a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	781b      	ldrb	r3, [r3, #0]
 8010330:	2b03      	cmp	r3, #3
 8010332:	d109      	bne.n	8010348 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	3314      	adds	r3, #20
 8010338:	4618      	mov	r0, r3
 801033a:	f7ff f841 	bl	800f3c0 <ld_word>
 801033e:	4603      	mov	r3, r0
 8010340:	041b      	lsls	r3, r3, #16
 8010342:	68fa      	ldr	r2, [r7, #12]
 8010344:	4313      	orrs	r3, r2
 8010346:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010348:	68fb      	ldr	r3, [r7, #12]
}
 801034a:	4618      	mov	r0, r3
 801034c:	3710      	adds	r7, #16
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}

08010352 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010352:	b580      	push	{r7, lr}
 8010354:	b084      	sub	sp, #16
 8010356:	af00      	add	r7, sp, #0
 8010358:	60f8      	str	r0, [r7, #12]
 801035a:	60b9      	str	r1, [r7, #8]
 801035c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	331a      	adds	r3, #26
 8010362:	687a      	ldr	r2, [r7, #4]
 8010364:	b292      	uxth	r2, r2
 8010366:	4611      	mov	r1, r2
 8010368:	4618      	mov	r0, r3
 801036a:	f7ff f865 	bl	800f438 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	781b      	ldrb	r3, [r3, #0]
 8010372:	2b03      	cmp	r3, #3
 8010374:	d109      	bne.n	801038a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	f103 0214 	add.w	r2, r3, #20
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	0c1b      	lsrs	r3, r3, #16
 8010380:	b29b      	uxth	r3, r3
 8010382:	4619      	mov	r1, r3
 8010384:	4610      	mov	r0, r2
 8010386:	f7ff f857 	bl	800f438 <st_word>
	}
}
 801038a:	bf00      	nop
 801038c:	3710      	adds	r7, #16
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}

08010392 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010392:	b580      	push	{r7, lr}
 8010394:	b086      	sub	sp, #24
 8010396:	af00      	add	r7, sp, #0
 8010398:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80103a0:	2100      	movs	r1, #0
 80103a2:	6878      	ldr	r0, [r7, #4]
 80103a4:	f7ff fe2f 	bl	8010006 <dir_sdi>
 80103a8:	4603      	mov	r3, r0
 80103aa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80103ac:	7dfb      	ldrb	r3, [r7, #23]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d001      	beq.n	80103b6 <dir_find+0x24>
 80103b2:	7dfb      	ldrb	r3, [r7, #23]
 80103b4:	e03e      	b.n	8010434 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	69db      	ldr	r3, [r3, #28]
 80103ba:	4619      	mov	r1, r3
 80103bc:	6938      	ldr	r0, [r7, #16]
 80103be:	f7ff faa5 	bl	800f90c <move_window>
 80103c2:	4603      	mov	r3, r0
 80103c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80103c6:	7dfb      	ldrb	r3, [r7, #23]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d12f      	bne.n	801042c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	6a1b      	ldr	r3, [r3, #32]
 80103d0:	781b      	ldrb	r3, [r3, #0]
 80103d2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80103d4:	7bfb      	ldrb	r3, [r7, #15]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d102      	bne.n	80103e0 <dir_find+0x4e>
 80103da:	2304      	movs	r3, #4
 80103dc:	75fb      	strb	r3, [r7, #23]
 80103de:	e028      	b.n	8010432 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6a1b      	ldr	r3, [r3, #32]
 80103e4:	330b      	adds	r3, #11
 80103e6:	781b      	ldrb	r3, [r3, #0]
 80103e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80103ec:	b2da      	uxtb	r2, r3
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6a1b      	ldr	r3, [r3, #32]
 80103f6:	330b      	adds	r3, #11
 80103f8:	781b      	ldrb	r3, [r3, #0]
 80103fa:	f003 0308 	and.w	r3, r3, #8
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d10a      	bne.n	8010418 <dir_find+0x86>
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6a18      	ldr	r0, [r3, #32]
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	3324      	adds	r3, #36	@ 0x24
 801040a:	220b      	movs	r2, #11
 801040c:	4619      	mov	r1, r3
 801040e:	f7ff f896 	bl	800f53e <mem_cmp>
 8010412:	4603      	mov	r3, r0
 8010414:	2b00      	cmp	r3, #0
 8010416:	d00b      	beq.n	8010430 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010418:	2100      	movs	r1, #0
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f7ff fe6e 	bl	80100fc <dir_next>
 8010420:	4603      	mov	r3, r0
 8010422:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010424:	7dfb      	ldrb	r3, [r7, #23]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d0c5      	beq.n	80103b6 <dir_find+0x24>
 801042a:	e002      	b.n	8010432 <dir_find+0xa0>
		if (res != FR_OK) break;
 801042c:	bf00      	nop
 801042e:	e000      	b.n	8010432 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010430:	bf00      	nop

	return res;
 8010432:	7dfb      	ldrb	r3, [r7, #23]
}
 8010434:	4618      	mov	r0, r3
 8010436:	3718      	adds	r7, #24
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}

0801043c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b084      	sub	sp, #16
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801044a:	2101      	movs	r1, #1
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f7ff ff1a 	bl	8010286 <dir_alloc>
 8010452:	4603      	mov	r3, r0
 8010454:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010456:	7bfb      	ldrb	r3, [r7, #15]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d11c      	bne.n	8010496 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	69db      	ldr	r3, [r3, #28]
 8010460:	4619      	mov	r1, r3
 8010462:	68b8      	ldr	r0, [r7, #8]
 8010464:	f7ff fa52 	bl	800f90c <move_window>
 8010468:	4603      	mov	r3, r0
 801046a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801046c:	7bfb      	ldrb	r3, [r7, #15]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d111      	bne.n	8010496 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6a1b      	ldr	r3, [r3, #32]
 8010476:	2220      	movs	r2, #32
 8010478:	2100      	movs	r1, #0
 801047a:	4618      	mov	r0, r3
 801047c:	f7ff f844 	bl	800f508 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6a18      	ldr	r0, [r3, #32]
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	3324      	adds	r3, #36	@ 0x24
 8010488:	220b      	movs	r2, #11
 801048a:	4619      	mov	r1, r3
 801048c:	f7ff f81b 	bl	800f4c6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	2201      	movs	r2, #1
 8010494:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010496:	7bfb      	ldrb	r3, [r7, #15]
}
 8010498:	4618      	mov	r0, r3
 801049a:	3710      	adds	r7, #16
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}

080104a0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b088      	sub	sp, #32
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	60fb      	str	r3, [r7, #12]
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	3324      	adds	r3, #36	@ 0x24
 80104b4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80104b6:	220b      	movs	r2, #11
 80104b8:	2120      	movs	r1, #32
 80104ba:	68b8      	ldr	r0, [r7, #8]
 80104bc:	f7ff f824 	bl	800f508 <mem_set>
	si = i = 0; ni = 8;
 80104c0:	2300      	movs	r3, #0
 80104c2:	613b      	str	r3, [r7, #16]
 80104c4:	693b      	ldr	r3, [r7, #16]
 80104c6:	61fb      	str	r3, [r7, #28]
 80104c8:	2308      	movs	r3, #8
 80104ca:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80104cc:	69fb      	ldr	r3, [r7, #28]
 80104ce:	1c5a      	adds	r2, r3, #1
 80104d0:	61fa      	str	r2, [r7, #28]
 80104d2:	68fa      	ldr	r2, [r7, #12]
 80104d4:	4413      	add	r3, r2
 80104d6:	781b      	ldrb	r3, [r3, #0]
 80104d8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80104da:	7efb      	ldrb	r3, [r7, #27]
 80104dc:	2b20      	cmp	r3, #32
 80104de:	d94e      	bls.n	801057e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80104e0:	7efb      	ldrb	r3, [r7, #27]
 80104e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80104e4:	d006      	beq.n	80104f4 <create_name+0x54>
 80104e6:	7efb      	ldrb	r3, [r7, #27]
 80104e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80104ea:	d110      	bne.n	801050e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80104ec:	e002      	b.n	80104f4 <create_name+0x54>
 80104ee:	69fb      	ldr	r3, [r7, #28]
 80104f0:	3301      	adds	r3, #1
 80104f2:	61fb      	str	r3, [r7, #28]
 80104f4:	68fa      	ldr	r2, [r7, #12]
 80104f6:	69fb      	ldr	r3, [r7, #28]
 80104f8:	4413      	add	r3, r2
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80104fe:	d0f6      	beq.n	80104ee <create_name+0x4e>
 8010500:	68fa      	ldr	r2, [r7, #12]
 8010502:	69fb      	ldr	r3, [r7, #28]
 8010504:	4413      	add	r3, r2
 8010506:	781b      	ldrb	r3, [r3, #0]
 8010508:	2b5c      	cmp	r3, #92	@ 0x5c
 801050a:	d0f0      	beq.n	80104ee <create_name+0x4e>
			break;
 801050c:	e038      	b.n	8010580 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801050e:	7efb      	ldrb	r3, [r7, #27]
 8010510:	2b2e      	cmp	r3, #46	@ 0x2e
 8010512:	d003      	beq.n	801051c <create_name+0x7c>
 8010514:	693a      	ldr	r2, [r7, #16]
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	429a      	cmp	r2, r3
 801051a:	d30c      	bcc.n	8010536 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801051c:	697b      	ldr	r3, [r7, #20]
 801051e:	2b0b      	cmp	r3, #11
 8010520:	d002      	beq.n	8010528 <create_name+0x88>
 8010522:	7efb      	ldrb	r3, [r7, #27]
 8010524:	2b2e      	cmp	r3, #46	@ 0x2e
 8010526:	d001      	beq.n	801052c <create_name+0x8c>
 8010528:	2306      	movs	r3, #6
 801052a:	e044      	b.n	80105b6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801052c:	2308      	movs	r3, #8
 801052e:	613b      	str	r3, [r7, #16]
 8010530:	230b      	movs	r3, #11
 8010532:	617b      	str	r3, [r7, #20]
			continue;
 8010534:	e022      	b.n	801057c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010536:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801053a:	2b00      	cmp	r3, #0
 801053c:	da04      	bge.n	8010548 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801053e:	7efb      	ldrb	r3, [r7, #27]
 8010540:	3b80      	subs	r3, #128	@ 0x80
 8010542:	4a1f      	ldr	r2, [pc, #124]	@ (80105c0 <create_name+0x120>)
 8010544:	5cd3      	ldrb	r3, [r2, r3]
 8010546:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010548:	7efb      	ldrb	r3, [r7, #27]
 801054a:	4619      	mov	r1, r3
 801054c:	481d      	ldr	r0, [pc, #116]	@ (80105c4 <create_name+0x124>)
 801054e:	f7ff f81d 	bl	800f58c <chk_chr>
 8010552:	4603      	mov	r3, r0
 8010554:	2b00      	cmp	r3, #0
 8010556:	d001      	beq.n	801055c <create_name+0xbc>
 8010558:	2306      	movs	r3, #6
 801055a:	e02c      	b.n	80105b6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801055c:	7efb      	ldrb	r3, [r7, #27]
 801055e:	2b60      	cmp	r3, #96	@ 0x60
 8010560:	d905      	bls.n	801056e <create_name+0xce>
 8010562:	7efb      	ldrb	r3, [r7, #27]
 8010564:	2b7a      	cmp	r3, #122	@ 0x7a
 8010566:	d802      	bhi.n	801056e <create_name+0xce>
 8010568:	7efb      	ldrb	r3, [r7, #27]
 801056a:	3b20      	subs	r3, #32
 801056c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	1c5a      	adds	r2, r3, #1
 8010572:	613a      	str	r2, [r7, #16]
 8010574:	68ba      	ldr	r2, [r7, #8]
 8010576:	4413      	add	r3, r2
 8010578:	7efa      	ldrb	r2, [r7, #27]
 801057a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801057c:	e7a6      	b.n	80104cc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801057e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010580:	68fa      	ldr	r2, [r7, #12]
 8010582:	69fb      	ldr	r3, [r7, #28]
 8010584:	441a      	add	r2, r3
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801058a:	693b      	ldr	r3, [r7, #16]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d101      	bne.n	8010594 <create_name+0xf4>
 8010590:	2306      	movs	r3, #6
 8010592:	e010      	b.n	80105b6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	781b      	ldrb	r3, [r3, #0]
 8010598:	2be5      	cmp	r3, #229	@ 0xe5
 801059a:	d102      	bne.n	80105a2 <create_name+0x102>
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	2205      	movs	r2, #5
 80105a0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80105a2:	7efb      	ldrb	r3, [r7, #27]
 80105a4:	2b20      	cmp	r3, #32
 80105a6:	d801      	bhi.n	80105ac <create_name+0x10c>
 80105a8:	2204      	movs	r2, #4
 80105aa:	e000      	b.n	80105ae <create_name+0x10e>
 80105ac:	2200      	movs	r2, #0
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	330b      	adds	r3, #11
 80105b2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80105b4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	3720      	adds	r7, #32
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}
 80105be:	bf00      	nop
 80105c0:	08017dec 	.word	0x08017dec
 80105c4:	08017c0c 	.word	0x08017c0c

080105c8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b086      	sub	sp, #24
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80105dc:	e002      	b.n	80105e4 <follow_path+0x1c>
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	3301      	adds	r3, #1
 80105e2:	603b      	str	r3, [r7, #0]
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	2b2f      	cmp	r3, #47	@ 0x2f
 80105ea:	d0f8      	beq.n	80105de <follow_path+0x16>
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	2b5c      	cmp	r3, #92	@ 0x5c
 80105f2:	d0f4      	beq.n	80105de <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	2200      	movs	r2, #0
 80105f8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	781b      	ldrb	r3, [r3, #0]
 80105fe:	2b1f      	cmp	r3, #31
 8010600:	d80a      	bhi.n	8010618 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	2280      	movs	r2, #128	@ 0x80
 8010606:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801060a:	2100      	movs	r1, #0
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f7ff fcfa 	bl	8010006 <dir_sdi>
 8010612:	4603      	mov	r3, r0
 8010614:	75fb      	strb	r3, [r7, #23]
 8010616:	e043      	b.n	80106a0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010618:	463b      	mov	r3, r7
 801061a:	4619      	mov	r1, r3
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	f7ff ff3f 	bl	80104a0 <create_name>
 8010622:	4603      	mov	r3, r0
 8010624:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010626:	7dfb      	ldrb	r3, [r7, #23]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d134      	bne.n	8010696 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f7ff feb0 	bl	8010392 <dir_find>
 8010632:	4603      	mov	r3, r0
 8010634:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801063c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801063e:	7dfb      	ldrb	r3, [r7, #23]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d00a      	beq.n	801065a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010644:	7dfb      	ldrb	r3, [r7, #23]
 8010646:	2b04      	cmp	r3, #4
 8010648:	d127      	bne.n	801069a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801064a:	7afb      	ldrb	r3, [r7, #11]
 801064c:	f003 0304 	and.w	r3, r3, #4
 8010650:	2b00      	cmp	r3, #0
 8010652:	d122      	bne.n	801069a <follow_path+0xd2>
 8010654:	2305      	movs	r3, #5
 8010656:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010658:	e01f      	b.n	801069a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801065a:	7afb      	ldrb	r3, [r7, #11]
 801065c:	f003 0304 	and.w	r3, r3, #4
 8010660:	2b00      	cmp	r3, #0
 8010662:	d11c      	bne.n	801069e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010664:	693b      	ldr	r3, [r7, #16]
 8010666:	799b      	ldrb	r3, [r3, #6]
 8010668:	f003 0310 	and.w	r3, r3, #16
 801066c:	2b00      	cmp	r3, #0
 801066e:	d102      	bne.n	8010676 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010670:	2305      	movs	r3, #5
 8010672:	75fb      	strb	r3, [r7, #23]
 8010674:	e014      	b.n	80106a0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	695b      	ldr	r3, [r3, #20]
 8010680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010684:	4413      	add	r3, r2
 8010686:	4619      	mov	r1, r3
 8010688:	68f8      	ldr	r0, [r7, #12]
 801068a:	f7ff fe43 	bl	8010314 <ld_clust>
 801068e:	4602      	mov	r2, r0
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010694:	e7c0      	b.n	8010618 <follow_path+0x50>
			if (res != FR_OK) break;
 8010696:	bf00      	nop
 8010698:	e002      	b.n	80106a0 <follow_path+0xd8>
				break;
 801069a:	bf00      	nop
 801069c:	e000      	b.n	80106a0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801069e:	bf00      	nop
			}
		}
	}

	return res;
 80106a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	3718      	adds	r7, #24
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}

080106aa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80106aa:	b480      	push	{r7}
 80106ac:	b087      	sub	sp, #28
 80106ae:	af00      	add	r7, sp, #0
 80106b0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80106b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80106b6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d031      	beq.n	8010724 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	617b      	str	r3, [r7, #20]
 80106c6:	e002      	b.n	80106ce <get_ldnumber+0x24>
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	3301      	adds	r3, #1
 80106cc:	617b      	str	r3, [r7, #20]
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	781b      	ldrb	r3, [r3, #0]
 80106d2:	2b20      	cmp	r3, #32
 80106d4:	d903      	bls.n	80106de <get_ldnumber+0x34>
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	781b      	ldrb	r3, [r3, #0]
 80106da:	2b3a      	cmp	r3, #58	@ 0x3a
 80106dc:	d1f4      	bne.n	80106c8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	781b      	ldrb	r3, [r3, #0]
 80106e2:	2b3a      	cmp	r3, #58	@ 0x3a
 80106e4:	d11c      	bne.n	8010720 <get_ldnumber+0x76>
			tp = *path;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	1c5a      	adds	r2, r3, #1
 80106f0:	60fa      	str	r2, [r7, #12]
 80106f2:	781b      	ldrb	r3, [r3, #0]
 80106f4:	3b30      	subs	r3, #48	@ 0x30
 80106f6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	2b09      	cmp	r3, #9
 80106fc:	d80e      	bhi.n	801071c <get_ldnumber+0x72>
 80106fe:	68fa      	ldr	r2, [r7, #12]
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	429a      	cmp	r2, r3
 8010704:	d10a      	bne.n	801071c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d107      	bne.n	801071c <get_ldnumber+0x72>
					vol = (int)i;
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	3301      	adds	r3, #1
 8010714:	617b      	str	r3, [r7, #20]
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	697a      	ldr	r2, [r7, #20]
 801071a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801071c:	693b      	ldr	r3, [r7, #16]
 801071e:	e002      	b.n	8010726 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010720:	2300      	movs	r3, #0
 8010722:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010724:	693b      	ldr	r3, [r7, #16]
}
 8010726:	4618      	mov	r0, r3
 8010728:	371c      	adds	r7, #28
 801072a:	46bd      	mov	sp, r7
 801072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010730:	4770      	bx	lr
	...

08010734 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b082      	sub	sp, #8
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2200      	movs	r2, #0
 8010742:	70da      	strb	r2, [r3, #3]
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801074a:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801074c:	6839      	ldr	r1, [r7, #0]
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f7ff f8dc 	bl	800f90c <move_window>
 8010754:	4603      	mov	r3, r0
 8010756:	2b00      	cmp	r3, #0
 8010758:	d001      	beq.n	801075e <check_fs+0x2a>
 801075a:	2304      	movs	r3, #4
 801075c:	e038      	b.n	80107d0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	3334      	adds	r3, #52	@ 0x34
 8010762:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010766:	4618      	mov	r0, r3
 8010768:	f7fe fe2a 	bl	800f3c0 <ld_word>
 801076c:	4603      	mov	r3, r0
 801076e:	461a      	mov	r2, r3
 8010770:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010774:	429a      	cmp	r2, r3
 8010776:	d001      	beq.n	801077c <check_fs+0x48>
 8010778:	2303      	movs	r3, #3
 801077a:	e029      	b.n	80107d0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010782:	2be9      	cmp	r3, #233	@ 0xe9
 8010784:	d009      	beq.n	801079a <check_fs+0x66>
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801078c:	2beb      	cmp	r3, #235	@ 0xeb
 801078e:	d11e      	bne.n	80107ce <check_fs+0x9a>
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8010796:	2b90      	cmp	r3, #144	@ 0x90
 8010798:	d119      	bne.n	80107ce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	3334      	adds	r3, #52	@ 0x34
 801079e:	3336      	adds	r3, #54	@ 0x36
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7fe fe26 	bl	800f3f2 <ld_dword>
 80107a6:	4603      	mov	r3, r0
 80107a8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80107ac:	4a0a      	ldr	r2, [pc, #40]	@ (80107d8 <check_fs+0xa4>)
 80107ae:	4293      	cmp	r3, r2
 80107b0:	d101      	bne.n	80107b6 <check_fs+0x82>
 80107b2:	2300      	movs	r3, #0
 80107b4:	e00c      	b.n	80107d0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	3334      	adds	r3, #52	@ 0x34
 80107ba:	3352      	adds	r3, #82	@ 0x52
 80107bc:	4618      	mov	r0, r3
 80107be:	f7fe fe18 	bl	800f3f2 <ld_dword>
 80107c2:	4603      	mov	r3, r0
 80107c4:	4a05      	ldr	r2, [pc, #20]	@ (80107dc <check_fs+0xa8>)
 80107c6:	4293      	cmp	r3, r2
 80107c8:	d101      	bne.n	80107ce <check_fs+0x9a>
 80107ca:	2300      	movs	r3, #0
 80107cc:	e000      	b.n	80107d0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80107ce:	2302      	movs	r3, #2
}
 80107d0:	4618      	mov	r0, r3
 80107d2:	3708      	adds	r7, #8
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}
 80107d8:	00544146 	.word	0x00544146
 80107dc:	33544146 	.word	0x33544146

080107e0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b096      	sub	sp, #88	@ 0x58
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	60f8      	str	r0, [r7, #12]
 80107e8:	60b9      	str	r1, [r7, #8]
 80107ea:	4613      	mov	r3, r2
 80107ec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	2200      	movs	r2, #0
 80107f2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80107f4:	68f8      	ldr	r0, [r7, #12]
 80107f6:	f7ff ff58 	bl	80106aa <get_ldnumber>
 80107fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80107fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107fe:	2b00      	cmp	r3, #0
 8010800:	da01      	bge.n	8010806 <find_volume+0x26>
 8010802:	230b      	movs	r3, #11
 8010804:	e235      	b.n	8010c72 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010806:	4aa5      	ldr	r2, [pc, #660]	@ (8010a9c <find_volume+0x2bc>)
 8010808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801080a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801080e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010812:	2b00      	cmp	r3, #0
 8010814:	d101      	bne.n	801081a <find_volume+0x3a>
 8010816:	230c      	movs	r3, #12
 8010818:	e22b      	b.n	8010c72 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 801081a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801081c:	f7fe fed1 	bl	800f5c2 <lock_fs>
 8010820:	4603      	mov	r3, r0
 8010822:	2b00      	cmp	r3, #0
 8010824:	d101      	bne.n	801082a <find_volume+0x4a>
 8010826:	230f      	movs	r3, #15
 8010828:	e223      	b.n	8010c72 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 801082a:	68bb      	ldr	r3, [r7, #8]
 801082c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801082e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010830:	79fb      	ldrb	r3, [r7, #7]
 8010832:	f023 0301 	bic.w	r3, r3, #1
 8010836:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d01a      	beq.n	8010876 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010842:	785b      	ldrb	r3, [r3, #1]
 8010844:	4618      	mov	r0, r3
 8010846:	f7fe fd1d 	bl	800f284 <disk_status>
 801084a:	4603      	mov	r3, r0
 801084c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010850:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010854:	f003 0301 	and.w	r3, r3, #1
 8010858:	2b00      	cmp	r3, #0
 801085a:	d10c      	bne.n	8010876 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801085c:	79fb      	ldrb	r3, [r7, #7]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d007      	beq.n	8010872 <find_volume+0x92>
 8010862:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010866:	f003 0304 	and.w	r3, r3, #4
 801086a:	2b00      	cmp	r3, #0
 801086c:	d001      	beq.n	8010872 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801086e:	230a      	movs	r3, #10
 8010870:	e1ff      	b.n	8010c72 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8010872:	2300      	movs	r3, #0
 8010874:	e1fd      	b.n	8010c72 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010878:	2200      	movs	r2, #0
 801087a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801087c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801087e:	b2da      	uxtb	r2, r3
 8010880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010882:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010886:	785b      	ldrb	r3, [r3, #1]
 8010888:	4618      	mov	r0, r3
 801088a:	f7fe fd15 	bl	800f2b8 <disk_initialize>
 801088e:	4603      	mov	r3, r0
 8010890:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010894:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010898:	f003 0301 	and.w	r3, r3, #1
 801089c:	2b00      	cmp	r3, #0
 801089e:	d001      	beq.n	80108a4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80108a0:	2303      	movs	r3, #3
 80108a2:	e1e6      	b.n	8010c72 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80108a4:	79fb      	ldrb	r3, [r7, #7]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d007      	beq.n	80108ba <find_volume+0xda>
 80108aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80108ae:	f003 0304 	and.w	r3, r3, #4
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d001      	beq.n	80108ba <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80108b6:	230a      	movs	r3, #10
 80108b8:	e1db      	b.n	8010c72 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80108ba:	2300      	movs	r3, #0
 80108bc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80108be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80108c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80108c2:	f7ff ff37 	bl	8010734 <check_fs>
 80108c6:	4603      	mov	r3, r0
 80108c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80108cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80108d0:	2b02      	cmp	r3, #2
 80108d2:	d149      	bne.n	8010968 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80108d4:	2300      	movs	r3, #0
 80108d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80108d8:	e01e      	b.n	8010918 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80108da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108dc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80108e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108e2:	011b      	lsls	r3, r3, #4
 80108e4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80108e8:	4413      	add	r3, r2
 80108ea:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80108ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ee:	3304      	adds	r3, #4
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d006      	beq.n	8010904 <find_volume+0x124>
 80108f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108f8:	3308      	adds	r3, #8
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7fe fd79 	bl	800f3f2 <ld_dword>
 8010900:	4602      	mov	r2, r0
 8010902:	e000      	b.n	8010906 <find_volume+0x126>
 8010904:	2200      	movs	r2, #0
 8010906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010908:	009b      	lsls	r3, r3, #2
 801090a:	3358      	adds	r3, #88	@ 0x58
 801090c:	443b      	add	r3, r7
 801090e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010914:	3301      	adds	r3, #1
 8010916:	643b      	str	r3, [r7, #64]	@ 0x40
 8010918:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801091a:	2b03      	cmp	r3, #3
 801091c:	d9dd      	bls.n	80108da <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801091e:	2300      	movs	r3, #0
 8010920:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8010922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010924:	2b00      	cmp	r3, #0
 8010926:	d002      	beq.n	801092e <find_volume+0x14e>
 8010928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801092a:	3b01      	subs	r3, #1
 801092c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801092e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010930:	009b      	lsls	r3, r3, #2
 8010932:	3358      	adds	r3, #88	@ 0x58
 8010934:	443b      	add	r3, r7
 8010936:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801093a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801093c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801093e:	2b00      	cmp	r3, #0
 8010940:	d005      	beq.n	801094e <find_volume+0x16e>
 8010942:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010944:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010946:	f7ff fef5 	bl	8010734 <check_fs>
 801094a:	4603      	mov	r3, r0
 801094c:	e000      	b.n	8010950 <find_volume+0x170>
 801094e:	2303      	movs	r3, #3
 8010950:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010954:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010958:	2b01      	cmp	r3, #1
 801095a:	d905      	bls.n	8010968 <find_volume+0x188>
 801095c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801095e:	3301      	adds	r3, #1
 8010960:	643b      	str	r3, [r7, #64]	@ 0x40
 8010962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010964:	2b03      	cmp	r3, #3
 8010966:	d9e2      	bls.n	801092e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010968:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801096c:	2b04      	cmp	r3, #4
 801096e:	d101      	bne.n	8010974 <find_volume+0x194>
 8010970:	2301      	movs	r3, #1
 8010972:	e17e      	b.n	8010c72 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010974:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010978:	2b01      	cmp	r3, #1
 801097a:	d901      	bls.n	8010980 <find_volume+0x1a0>
 801097c:	230d      	movs	r3, #13
 801097e:	e178      	b.n	8010c72 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010982:	3334      	adds	r3, #52	@ 0x34
 8010984:	330b      	adds	r3, #11
 8010986:	4618      	mov	r0, r3
 8010988:	f7fe fd1a 	bl	800f3c0 <ld_word>
 801098c:	4603      	mov	r3, r0
 801098e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010992:	d001      	beq.n	8010998 <find_volume+0x1b8>
 8010994:	230d      	movs	r3, #13
 8010996:	e16c      	b.n	8010c72 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801099a:	3334      	adds	r3, #52	@ 0x34
 801099c:	3316      	adds	r3, #22
 801099e:	4618      	mov	r0, r3
 80109a0:	f7fe fd0e 	bl	800f3c0 <ld_word>
 80109a4:	4603      	mov	r3, r0
 80109a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80109a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d106      	bne.n	80109bc <find_volume+0x1dc>
 80109ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109b0:	3334      	adds	r3, #52	@ 0x34
 80109b2:	3324      	adds	r3, #36	@ 0x24
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7fe fd1c 	bl	800f3f2 <ld_dword>
 80109ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80109bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80109c0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80109c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109c4:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80109c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80109cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109ce:	789b      	ldrb	r3, [r3, #2]
 80109d0:	2b01      	cmp	r3, #1
 80109d2:	d005      	beq.n	80109e0 <find_volume+0x200>
 80109d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109d6:	789b      	ldrb	r3, [r3, #2]
 80109d8:	2b02      	cmp	r3, #2
 80109da:	d001      	beq.n	80109e0 <find_volume+0x200>
 80109dc:	230d      	movs	r3, #13
 80109de:	e148      	b.n	8010c72 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80109e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109e2:	789b      	ldrb	r3, [r3, #2]
 80109e4:	461a      	mov	r2, r3
 80109e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109e8:	fb02 f303 	mul.w	r3, r2, r3
 80109ec:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80109ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80109f4:	461a      	mov	r2, r3
 80109f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80109fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109fc:	895b      	ldrh	r3, [r3, #10]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d008      	beq.n	8010a14 <find_volume+0x234>
 8010a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a04:	895b      	ldrh	r3, [r3, #10]
 8010a06:	461a      	mov	r2, r3
 8010a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a0a:	895b      	ldrh	r3, [r3, #10]
 8010a0c:	3b01      	subs	r3, #1
 8010a0e:	4013      	ands	r3, r2
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d001      	beq.n	8010a18 <find_volume+0x238>
 8010a14:	230d      	movs	r3, #13
 8010a16:	e12c      	b.n	8010c72 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a1a:	3334      	adds	r3, #52	@ 0x34
 8010a1c:	3311      	adds	r3, #17
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f7fe fcce 	bl	800f3c0 <ld_word>
 8010a24:	4603      	mov	r3, r0
 8010a26:	461a      	mov	r2, r3
 8010a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a2a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a2e:	891b      	ldrh	r3, [r3, #8]
 8010a30:	f003 030f 	and.w	r3, r3, #15
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d001      	beq.n	8010a3e <find_volume+0x25e>
 8010a3a:	230d      	movs	r3, #13
 8010a3c:	e119      	b.n	8010c72 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a40:	3334      	adds	r3, #52	@ 0x34
 8010a42:	3313      	adds	r3, #19
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7fe fcbb 	bl	800f3c0 <ld_word>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d106      	bne.n	8010a62 <find_volume+0x282>
 8010a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a56:	3334      	adds	r3, #52	@ 0x34
 8010a58:	3320      	adds	r3, #32
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7fe fcc9 	bl	800f3f2 <ld_dword>
 8010a60:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a64:	3334      	adds	r3, #52	@ 0x34
 8010a66:	330e      	adds	r3, #14
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7fe fca9 	bl	800f3c0 <ld_word>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010a72:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d101      	bne.n	8010a7c <find_volume+0x29c>
 8010a78:	230d      	movs	r3, #13
 8010a7a:	e0fa      	b.n	8010c72 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010a7c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a80:	4413      	add	r3, r2
 8010a82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010a84:	8912      	ldrh	r2, [r2, #8]
 8010a86:	0912      	lsrs	r2, r2, #4
 8010a88:	b292      	uxth	r2, r2
 8010a8a:	4413      	add	r3, r2
 8010a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010a8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d204      	bcs.n	8010aa0 <find_volume+0x2c0>
 8010a96:	230d      	movs	r3, #13
 8010a98:	e0eb      	b.n	8010c72 <find_volume+0x492>
 8010a9a:	bf00      	nop
 8010a9c:	2400094c 	.word	0x2400094c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010aa0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010aa4:	1ad3      	subs	r3, r2, r3
 8010aa6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010aa8:	8952      	ldrh	r2, [r2, #10]
 8010aaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8010aae:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d101      	bne.n	8010aba <find_volume+0x2da>
 8010ab6:	230d      	movs	r3, #13
 8010ab8:	e0db      	b.n	8010c72 <find_volume+0x492>
		fmt = FS_FAT32;
 8010aba:	2303      	movs	r3, #3
 8010abc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ac2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010ac6:	4293      	cmp	r3, r2
 8010ac8:	d802      	bhi.n	8010ad0 <find_volume+0x2f0>
 8010aca:	2302      	movs	r3, #2
 8010acc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ad2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010ad6:	4293      	cmp	r3, r2
 8010ad8:	d802      	bhi.n	8010ae0 <find_volume+0x300>
 8010ada:	2301      	movs	r3, #1
 8010adc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ae2:	1c9a      	adds	r2, r3, #2
 8010ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ae6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010aec:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010aee:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010af0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010af2:	441a      	add	r2, r3
 8010af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010af6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010af8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010afc:	441a      	add	r2, r3
 8010afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b00:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8010b02:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010b06:	2b03      	cmp	r3, #3
 8010b08:	d11e      	bne.n	8010b48 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b0c:	3334      	adds	r3, #52	@ 0x34
 8010b0e:	332a      	adds	r3, #42	@ 0x2a
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7fe fc55 	bl	800f3c0 <ld_word>
 8010b16:	4603      	mov	r3, r0
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d001      	beq.n	8010b20 <find_volume+0x340>
 8010b1c:	230d      	movs	r3, #13
 8010b1e:	e0a8      	b.n	8010c72 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b22:	891b      	ldrh	r3, [r3, #8]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d001      	beq.n	8010b2c <find_volume+0x34c>
 8010b28:	230d      	movs	r3, #13
 8010b2a:	e0a2      	b.n	8010c72 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b2e:	3334      	adds	r3, #52	@ 0x34
 8010b30:	332c      	adds	r3, #44	@ 0x2c
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7fe fc5d 	bl	800f3f2 <ld_dword>
 8010b38:	4602      	mov	r2, r0
 8010b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b3c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b40:	699b      	ldr	r3, [r3, #24]
 8010b42:	009b      	lsls	r3, r3, #2
 8010b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8010b46:	e01f      	b.n	8010b88 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b4a:	891b      	ldrh	r3, [r3, #8]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d101      	bne.n	8010b54 <find_volume+0x374>
 8010b50:	230d      	movs	r3, #13
 8010b52:	e08e      	b.n	8010c72 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b5a:	441a      	add	r2, r3
 8010b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b5e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010b60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010b64:	2b02      	cmp	r3, #2
 8010b66:	d103      	bne.n	8010b70 <find_volume+0x390>
 8010b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b6a:	699b      	ldr	r3, [r3, #24]
 8010b6c:	005b      	lsls	r3, r3, #1
 8010b6e:	e00a      	b.n	8010b86 <find_volume+0x3a6>
 8010b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b72:	699a      	ldr	r2, [r3, #24]
 8010b74:	4613      	mov	r3, r2
 8010b76:	005b      	lsls	r3, r3, #1
 8010b78:	4413      	add	r3, r2
 8010b7a:	085a      	lsrs	r2, r3, #1
 8010b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b7e:	699b      	ldr	r3, [r3, #24]
 8010b80:	f003 0301 	and.w	r3, r3, #1
 8010b84:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010b86:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b8a:	69da      	ldr	r2, [r3, #28]
 8010b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b8e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8010b92:	0a5b      	lsrs	r3, r3, #9
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d201      	bcs.n	8010b9c <find_volume+0x3bc>
 8010b98:	230d      	movs	r3, #13
 8010b9a:	e06a      	b.n	8010c72 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010ba2:	615a      	str	r2, [r3, #20]
 8010ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ba6:	695a      	ldr	r2, [r3, #20]
 8010ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010baa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bae:	2280      	movs	r2, #128	@ 0x80
 8010bb0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010bb2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010bb6:	2b03      	cmp	r3, #3
 8010bb8:	d149      	bne.n	8010c4e <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bbc:	3334      	adds	r3, #52	@ 0x34
 8010bbe:	3330      	adds	r3, #48	@ 0x30
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7fe fbfd 	bl	800f3c0 <ld_word>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	2b01      	cmp	r3, #1
 8010bca:	d140      	bne.n	8010c4e <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010bcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010bce:	3301      	adds	r3, #1
 8010bd0:	4619      	mov	r1, r3
 8010bd2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010bd4:	f7fe fe9a 	bl	800f90c <move_window>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d137      	bne.n	8010c4e <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8010bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010be0:	2200      	movs	r2, #0
 8010be2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010be6:	3334      	adds	r3, #52	@ 0x34
 8010be8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7fe fbe7 	bl	800f3c0 <ld_word>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	461a      	mov	r2, r3
 8010bf6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d127      	bne.n	8010c4e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c00:	3334      	adds	r3, #52	@ 0x34
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7fe fbf5 	bl	800f3f2 <ld_dword>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8010c7c <find_volume+0x49c>)
 8010c0c:	4293      	cmp	r3, r2
 8010c0e:	d11e      	bne.n	8010c4e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c12:	3334      	adds	r3, #52	@ 0x34
 8010c14:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7fe fbea 	bl	800f3f2 <ld_dword>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	4a17      	ldr	r2, [pc, #92]	@ (8010c80 <find_volume+0x4a0>)
 8010c22:	4293      	cmp	r3, r2
 8010c24:	d113      	bne.n	8010c4e <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c28:	3334      	adds	r3, #52	@ 0x34
 8010c2a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f7fe fbdf 	bl	800f3f2 <ld_dword>
 8010c34:	4602      	mov	r2, r0
 8010c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c38:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c3c:	3334      	adds	r3, #52	@ 0x34
 8010c3e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8010c42:	4618      	mov	r0, r3
 8010c44:	f7fe fbd5 	bl	800f3f2 <ld_dword>
 8010c48:	4602      	mov	r2, r0
 8010c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c4c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c50:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8010c54:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010c56:	4b0b      	ldr	r3, [pc, #44]	@ (8010c84 <find_volume+0x4a4>)
 8010c58:	881b      	ldrh	r3, [r3, #0]
 8010c5a:	3301      	adds	r3, #1
 8010c5c:	b29a      	uxth	r2, r3
 8010c5e:	4b09      	ldr	r3, [pc, #36]	@ (8010c84 <find_volume+0x4a4>)
 8010c60:	801a      	strh	r2, [r3, #0]
 8010c62:	4b08      	ldr	r3, [pc, #32]	@ (8010c84 <find_volume+0x4a4>)
 8010c64:	881a      	ldrh	r2, [r3, #0]
 8010c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c68:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010c6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010c6c:	f7fe fde6 	bl	800f83c <clear_lock>
#endif
	return FR_OK;
 8010c70:	2300      	movs	r3, #0
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3758      	adds	r7, #88	@ 0x58
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}
 8010c7a:	bf00      	nop
 8010c7c:	41615252 	.word	0x41615252
 8010c80:	61417272 	.word	0x61417272
 8010c84:	24000950 	.word	0x24000950

08010c88 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b084      	sub	sp, #16
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010c92:	2309      	movs	r3, #9
 8010c94:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d02e      	beq.n	8010cfa <validate+0x72>
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d02a      	beq.n	8010cfa <validate+0x72>
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	781b      	ldrb	r3, [r3, #0]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d025      	beq.n	8010cfa <validate+0x72>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	889a      	ldrh	r2, [r3, #4]
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	88db      	ldrh	r3, [r3, #6]
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	d11e      	bne.n	8010cfa <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7fe fc7e 	bl	800f5c2 <lock_fs>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d014      	beq.n	8010cf6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	785b      	ldrb	r3, [r3, #1]
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7fe fad6 	bl	800f284 <disk_status>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	f003 0301 	and.w	r3, r3, #1
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d102      	bne.n	8010ce8 <validate+0x60>
				res = FR_OK;
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	73fb      	strb	r3, [r7, #15]
 8010ce6:	e008      	b.n	8010cfa <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	2100      	movs	r1, #0
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f7fe fc7d 	bl	800f5ee <unlock_fs>
 8010cf4:	e001      	b.n	8010cfa <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010cf6:	230f      	movs	r3, #15
 8010cf8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010cfa:	7bfb      	ldrb	r3, [r7, #15]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d102      	bne.n	8010d06 <validate+0x7e>
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	e000      	b.n	8010d08 <validate+0x80>
 8010d06:	2300      	movs	r3, #0
 8010d08:	683a      	ldr	r2, [r7, #0]
 8010d0a:	6013      	str	r3, [r2, #0]
	return res;
 8010d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3710      	adds	r7, #16
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
	...

08010d18 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b088      	sub	sp, #32
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	60f8      	str	r0, [r7, #12]
 8010d20:	60b9      	str	r1, [r7, #8]
 8010d22:	4613      	mov	r3, r2
 8010d24:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010d2a:	f107 0310 	add.w	r3, r7, #16
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7ff fcbb 	bl	80106aa <get_ldnumber>
 8010d34:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010d36:	69fb      	ldr	r3, [r7, #28]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	da01      	bge.n	8010d40 <f_mount+0x28>
 8010d3c:	230b      	movs	r3, #11
 8010d3e:	e048      	b.n	8010dd2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010d40:	4a26      	ldr	r2, [pc, #152]	@ (8010ddc <f_mount+0xc4>)
 8010d42:	69fb      	ldr	r3, [r7, #28]
 8010d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d48:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010d4a:	69bb      	ldr	r3, [r7, #24]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d00f      	beq.n	8010d70 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010d50:	69b8      	ldr	r0, [r7, #24]
 8010d52:	f7fe fd73 	bl	800f83c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010d56:	69bb      	ldr	r3, [r7, #24]
 8010d58:	68db      	ldr	r3, [r3, #12]
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f001 f98c 	bl	8012078 <ff_del_syncobj>
 8010d60:	4603      	mov	r3, r0
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d101      	bne.n	8010d6a <f_mount+0x52>
 8010d66:	2302      	movs	r3, #2
 8010d68:	e033      	b.n	8010dd2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010d6a:	69bb      	ldr	r3, [r7, #24]
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d00f      	beq.n	8010d96 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	2200      	movs	r2, #0
 8010d7a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010d7c:	69fb      	ldr	r3, [r7, #28]
 8010d7e:	b2da      	uxtb	r2, r3
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	330c      	adds	r3, #12
 8010d84:	4619      	mov	r1, r3
 8010d86:	4610      	mov	r0, r2
 8010d88:	f001 f95b 	bl	8012042 <ff_cre_syncobj>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d101      	bne.n	8010d96 <f_mount+0x7e>
 8010d92:	2302      	movs	r3, #2
 8010d94:	e01d      	b.n	8010dd2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010d96:	68fa      	ldr	r2, [r7, #12]
 8010d98:	4910      	ldr	r1, [pc, #64]	@ (8010ddc <f_mount+0xc4>)
 8010d9a:	69fb      	ldr	r3, [r7, #28]
 8010d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d002      	beq.n	8010dac <f_mount+0x94>
 8010da6:	79fb      	ldrb	r3, [r7, #7]
 8010da8:	2b01      	cmp	r3, #1
 8010daa:	d001      	beq.n	8010db0 <f_mount+0x98>
 8010dac:	2300      	movs	r3, #0
 8010dae:	e010      	b.n	8010dd2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010db0:	f107 010c 	add.w	r1, r7, #12
 8010db4:	f107 0308 	add.w	r3, r7, #8
 8010db8:	2200      	movs	r2, #0
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7ff fd10 	bl	80107e0 <find_volume>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	7dfa      	ldrb	r2, [r7, #23]
 8010dc8:	4611      	mov	r1, r2
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f7fe fc0f 	bl	800f5ee <unlock_fs>
 8010dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3720      	adds	r7, #32
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}
 8010dda:	bf00      	nop
 8010ddc:	2400094c 	.word	0x2400094c

08010de0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b098      	sub	sp, #96	@ 0x60
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	60f8      	str	r0, [r7, #12]
 8010de8:	60b9      	str	r1, [r7, #8]
 8010dea:	4613      	mov	r3, r2
 8010dec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d101      	bne.n	8010df8 <f_open+0x18>
 8010df4:	2309      	movs	r3, #9
 8010df6:	e1b0      	b.n	801115a <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010df8:	79fb      	ldrb	r3, [r7, #7]
 8010dfa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010dfe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010e00:	79fa      	ldrb	r2, [r7, #7]
 8010e02:	f107 0110 	add.w	r1, r7, #16
 8010e06:	f107 0308 	add.w	r3, r7, #8
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f7ff fce8 	bl	80107e0 <find_volume>
 8010e10:	4603      	mov	r3, r0
 8010e12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8010e16:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	f040 818d 	bne.w	801113a <f_open+0x35a>
		dj.obj.fs = fs;
 8010e20:	693b      	ldr	r3, [r7, #16]
 8010e22:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010e24:	68ba      	ldr	r2, [r7, #8]
 8010e26:	f107 0314 	add.w	r3, r7, #20
 8010e2a:	4611      	mov	r1, r2
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7ff fbcb 	bl	80105c8 <follow_path>
 8010e32:	4603      	mov	r3, r0
 8010e34:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010e38:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d118      	bne.n	8010e72 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010e40:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010e44:	b25b      	sxtb	r3, r3
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	da03      	bge.n	8010e52 <f_open+0x72>
				res = FR_INVALID_NAME;
 8010e4a:	2306      	movs	r3, #6
 8010e4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010e50:	e00f      	b.n	8010e72 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010e52:	79fb      	ldrb	r3, [r7, #7]
 8010e54:	2b01      	cmp	r3, #1
 8010e56:	bf8c      	ite	hi
 8010e58:	2301      	movhi	r3, #1
 8010e5a:	2300      	movls	r3, #0
 8010e5c:	b2db      	uxtb	r3, r3
 8010e5e:	461a      	mov	r2, r3
 8010e60:	f107 0314 	add.w	r3, r7, #20
 8010e64:	4611      	mov	r1, r2
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7fe fbdc 	bl	800f624 <chk_lock>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010e72:	79fb      	ldrb	r3, [r7, #7]
 8010e74:	f003 031c 	and.w	r3, r3, #28
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d07f      	beq.n	8010f7c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8010e7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d017      	beq.n	8010eb4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010e84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010e88:	2b04      	cmp	r3, #4
 8010e8a:	d10e      	bne.n	8010eaa <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010e8c:	f7fe fc26 	bl	800f6dc <enq_lock>
 8010e90:	4603      	mov	r3, r0
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d006      	beq.n	8010ea4 <f_open+0xc4>
 8010e96:	f107 0314 	add.w	r3, r7, #20
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7ff face 	bl	801043c <dir_register>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	e000      	b.n	8010ea6 <f_open+0xc6>
 8010ea4:	2312      	movs	r3, #18
 8010ea6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010eaa:	79fb      	ldrb	r3, [r7, #7]
 8010eac:	f043 0308 	orr.w	r3, r3, #8
 8010eb0:	71fb      	strb	r3, [r7, #7]
 8010eb2:	e010      	b.n	8010ed6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010eb4:	7ebb      	ldrb	r3, [r7, #26]
 8010eb6:	f003 0311 	and.w	r3, r3, #17
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d003      	beq.n	8010ec6 <f_open+0xe6>
					res = FR_DENIED;
 8010ebe:	2307      	movs	r3, #7
 8010ec0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010ec4:	e007      	b.n	8010ed6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010ec6:	79fb      	ldrb	r3, [r7, #7]
 8010ec8:	f003 0304 	and.w	r3, r3, #4
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d002      	beq.n	8010ed6 <f_open+0xf6>
 8010ed0:	2308      	movs	r3, #8
 8010ed2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010ed6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d168      	bne.n	8010fb0 <f_open+0x1d0>
 8010ede:	79fb      	ldrb	r3, [r7, #7]
 8010ee0:	f003 0308 	and.w	r3, r3, #8
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d063      	beq.n	8010fb0 <f_open+0x1d0>
				dw = GET_FATTIME();
 8010ee8:	f7fd ff92 	bl	800ee10 <get_fattime>
 8010eec:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ef0:	330e      	adds	r3, #14
 8010ef2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7fe faba 	bl	800f46e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010efc:	3316      	adds	r3, #22
 8010efe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010f00:	4618      	mov	r0, r3
 8010f02:	f7fe fab4 	bl	800f46e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f08:	330b      	adds	r3, #11
 8010f0a:	2220      	movs	r2, #32
 8010f0c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010f0e:	693b      	ldr	r3, [r7, #16]
 8010f10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010f12:	4611      	mov	r1, r2
 8010f14:	4618      	mov	r0, r3
 8010f16:	f7ff f9fd 	bl	8010314 <ld_clust>
 8010f1a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010f1c:	693b      	ldr	r3, [r7, #16]
 8010f1e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010f20:	2200      	movs	r2, #0
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7ff fa15 	bl	8010352 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f2a:	331c      	adds	r3, #28
 8010f2c:	2100      	movs	r1, #0
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f7fe fa9d 	bl	800f46e <st_dword>
					fs->wflag = 1;
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	2201      	movs	r2, #1
 8010f38:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d037      	beq.n	8010fb0 <f_open+0x1d0>
						dw = fs->winsect;
 8010f40:	693b      	ldr	r3, [r7, #16]
 8010f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f44:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010f46:	f107 0314 	add.w	r3, r7, #20
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f7fe ff28 	bl	800fda4 <remove_chain>
 8010f54:	4603      	mov	r3, r0
 8010f56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8010f5a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d126      	bne.n	8010fb0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8010f62:	693b      	ldr	r3, [r7, #16]
 8010f64:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010f66:	4618      	mov	r0, r3
 8010f68:	f7fe fcd0 	bl	800f90c <move_window>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010f72:	693b      	ldr	r3, [r7, #16]
 8010f74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010f76:	3a01      	subs	r2, #1
 8010f78:	611a      	str	r2, [r3, #16]
 8010f7a:	e019      	b.n	8010fb0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010f7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d115      	bne.n	8010fb0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010f84:	7ebb      	ldrb	r3, [r7, #26]
 8010f86:	f003 0310 	and.w	r3, r3, #16
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d003      	beq.n	8010f96 <f_open+0x1b6>
					res = FR_NO_FILE;
 8010f8e:	2304      	movs	r3, #4
 8010f90:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010f94:	e00c      	b.n	8010fb0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010f96:	79fb      	ldrb	r3, [r7, #7]
 8010f98:	f003 0302 	and.w	r3, r3, #2
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d007      	beq.n	8010fb0 <f_open+0x1d0>
 8010fa0:	7ebb      	ldrb	r3, [r7, #26]
 8010fa2:	f003 0301 	and.w	r3, r3, #1
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d002      	beq.n	8010fb0 <f_open+0x1d0>
						res = FR_DENIED;
 8010faa:	2307      	movs	r3, #7
 8010fac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010fb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d126      	bne.n	8011006 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010fb8:	79fb      	ldrb	r3, [r7, #7]
 8010fba:	f003 0308 	and.w	r3, r3, #8
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d003      	beq.n	8010fca <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8010fc2:	79fb      	ldrb	r3, [r7, #7]
 8010fc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010fc8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010fca:	693b      	ldr	r3, [r7, #16]
 8010fcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8010fd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010fd8:	79fb      	ldrb	r3, [r7, #7]
 8010fda:	2b01      	cmp	r3, #1
 8010fdc:	bf8c      	ite	hi
 8010fde:	2301      	movhi	r3, #1
 8010fe0:	2300      	movls	r3, #0
 8010fe2:	b2db      	uxtb	r3, r3
 8010fe4:	461a      	mov	r2, r3
 8010fe6:	f107 0314 	add.w	r3, r7, #20
 8010fea:	4611      	mov	r1, r2
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7fe fb97 	bl	800f720 <inc_lock>
 8010ff2:	4602      	mov	r2, r0
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	691b      	ldr	r3, [r3, #16]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d102      	bne.n	8011006 <f_open+0x226>
 8011000:	2302      	movs	r3, #2
 8011002:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011006:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801100a:	2b00      	cmp	r3, #0
 801100c:	f040 8095 	bne.w	801113a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011014:	4611      	mov	r1, r2
 8011016:	4618      	mov	r0, r3
 8011018:	f7ff f97c 	bl	8010314 <ld_clust>
 801101c:	4602      	mov	r2, r0
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011024:	331c      	adds	r3, #28
 8011026:	4618      	mov	r0, r3
 8011028:	f7fe f9e3 	bl	800f3f2 <ld_dword>
 801102c:	4602      	mov	r2, r0
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2200      	movs	r2, #0
 8011036:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011038:	693a      	ldr	r2, [r7, #16]
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	88da      	ldrh	r2, [r3, #6]
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	79fa      	ldrb	r2, [r7, #7]
 801104a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	2200      	movs	r2, #0
 8011050:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	2200      	movs	r2, #0
 8011056:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	2200      	movs	r2, #0
 801105c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	3330      	adds	r3, #48	@ 0x30
 8011062:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011066:	2100      	movs	r1, #0
 8011068:	4618      	mov	r0, r3
 801106a:	f7fe fa4d 	bl	800f508 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801106e:	79fb      	ldrb	r3, [r7, #7]
 8011070:	f003 0320 	and.w	r3, r3, #32
 8011074:	2b00      	cmp	r3, #0
 8011076:	d060      	beq.n	801113a <f_open+0x35a>
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	68db      	ldr	r3, [r3, #12]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d05c      	beq.n	801113a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	68da      	ldr	r2, [r3, #12]
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011088:	693b      	ldr	r3, [r7, #16]
 801108a:	895b      	ldrh	r3, [r3, #10]
 801108c:	025b      	lsls	r3, r3, #9
 801108e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	689b      	ldr	r3, [r3, #8]
 8011094:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	68db      	ldr	r3, [r3, #12]
 801109a:	657b      	str	r3, [r7, #84]	@ 0x54
 801109c:	e016      	b.n	80110cc <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7fe fced 	bl	800fa82 <get_fat>
 80110a8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80110aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80110ac:	2b01      	cmp	r3, #1
 80110ae:	d802      	bhi.n	80110b6 <f_open+0x2d6>
 80110b0:	2302      	movs	r3, #2
 80110b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80110b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80110b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80110bc:	d102      	bne.n	80110c4 <f_open+0x2e4>
 80110be:	2301      	movs	r3, #1
 80110c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80110c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80110c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80110c8:	1ad3      	subs	r3, r2, r3
 80110ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80110cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d103      	bne.n	80110dc <f_open+0x2fc>
 80110d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80110d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80110d8:	429a      	cmp	r2, r3
 80110da:	d8e0      	bhi.n	801109e <f_open+0x2be>
				}
				fp->clust = clst;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80110e0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80110e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d127      	bne.n	801113a <f_open+0x35a>
 80110ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80110ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d022      	beq.n	801113a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80110f4:	693b      	ldr	r3, [r7, #16]
 80110f6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80110f8:	4618      	mov	r0, r3
 80110fa:	f7fe fca3 	bl	800fa44 <clust2sect>
 80110fe:	6478      	str	r0, [r7, #68]	@ 0x44
 8011100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011102:	2b00      	cmp	r3, #0
 8011104:	d103      	bne.n	801110e <f_open+0x32e>
						res = FR_INT_ERR;
 8011106:	2302      	movs	r3, #2
 8011108:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801110c:	e015      	b.n	801113a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801110e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011110:	0a5a      	lsrs	r2, r3, #9
 8011112:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011114:	441a      	add	r2, r3
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	7858      	ldrb	r0, [r3, #1]
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	6a1a      	ldr	r2, [r3, #32]
 8011128:	2301      	movs	r3, #1
 801112a:	f7fe f8eb 	bl	800f304 <disk_read>
 801112e:	4603      	mov	r3, r0
 8011130:	2b00      	cmp	r3, #0
 8011132:	d002      	beq.n	801113a <f_open+0x35a>
 8011134:	2301      	movs	r3, #1
 8011136:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801113a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801113e:	2b00      	cmp	r3, #0
 8011140:	d002      	beq.n	8011148 <f_open+0x368>
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	2200      	movs	r2, #0
 8011146:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801114e:	4611      	mov	r1, r2
 8011150:	4618      	mov	r0, r3
 8011152:	f7fe fa4c 	bl	800f5ee <unlock_fs>
 8011156:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801115a:	4618      	mov	r0, r3
 801115c:	3760      	adds	r7, #96	@ 0x60
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}

08011162 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011162:	b580      	push	{r7, lr}
 8011164:	b08c      	sub	sp, #48	@ 0x30
 8011166:	af00      	add	r7, sp, #0
 8011168:	60f8      	str	r0, [r7, #12]
 801116a:	60b9      	str	r1, [r7, #8]
 801116c:	607a      	str	r2, [r7, #4]
 801116e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011174:	683b      	ldr	r3, [r7, #0]
 8011176:	2200      	movs	r2, #0
 8011178:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	f107 0210 	add.w	r2, r7, #16
 8011180:	4611      	mov	r1, r2
 8011182:	4618      	mov	r0, r3
 8011184:	f7ff fd80 	bl	8010c88 <validate>
 8011188:	4603      	mov	r3, r0
 801118a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801118e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011192:	2b00      	cmp	r3, #0
 8011194:	d107      	bne.n	80111a6 <f_write+0x44>
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	7d5b      	ldrb	r3, [r3, #21]
 801119a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801119e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d009      	beq.n	80111ba <f_write+0x58>
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80111ac:	4611      	mov	r1, r2
 80111ae:	4618      	mov	r0, r3
 80111b0:	f7fe fa1d 	bl	800f5ee <unlock_fs>
 80111b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80111b8:	e173      	b.n	80114a2 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	7d1b      	ldrb	r3, [r3, #20]
 80111be:	f003 0302 	and.w	r3, r3, #2
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d106      	bne.n	80111d4 <f_write+0x72>
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	2107      	movs	r1, #7
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7fe fa0f 	bl	800f5ee <unlock_fs>
 80111d0:	2307      	movs	r3, #7
 80111d2:	e166      	b.n	80114a2 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	699a      	ldr	r2, [r3, #24]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	441a      	add	r2, r3
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	699b      	ldr	r3, [r3, #24]
 80111e0:	429a      	cmp	r2, r3
 80111e2:	f080 814b 	bcs.w	801147c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	699b      	ldr	r3, [r3, #24]
 80111ea:	43db      	mvns	r3, r3
 80111ec:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80111ee:	e145      	b.n	801147c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	699b      	ldr	r3, [r3, #24]
 80111f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	f040 8101 	bne.w	8011400 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	699b      	ldr	r3, [r3, #24]
 8011202:	0a5b      	lsrs	r3, r3, #9
 8011204:	693a      	ldr	r2, [r7, #16]
 8011206:	8952      	ldrh	r2, [r2, #10]
 8011208:	3a01      	subs	r2, #1
 801120a:	4013      	ands	r3, r2
 801120c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801120e:	69bb      	ldr	r3, [r7, #24]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d14d      	bne.n	80112b0 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	699b      	ldr	r3, [r3, #24]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d10c      	bne.n	8011236 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	689b      	ldr	r3, [r3, #8]
 8011220:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011224:	2b00      	cmp	r3, #0
 8011226:	d11a      	bne.n	801125e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	2100      	movs	r1, #0
 801122c:	4618      	mov	r0, r3
 801122e:	f7fe fe1e 	bl	800fe6e <create_chain>
 8011232:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011234:	e013      	b.n	801125e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801123a:	2b00      	cmp	r3, #0
 801123c:	d007      	beq.n	801124e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	699b      	ldr	r3, [r3, #24]
 8011242:	4619      	mov	r1, r3
 8011244:	68f8      	ldr	r0, [r7, #12]
 8011246:	f7fe feaa 	bl	800ff9e <clmt_clust>
 801124a:	62b8      	str	r0, [r7, #40]	@ 0x28
 801124c:	e007      	b.n	801125e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801124e:	68fa      	ldr	r2, [r7, #12]
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	69db      	ldr	r3, [r3, #28]
 8011254:	4619      	mov	r1, r3
 8011256:	4610      	mov	r0, r2
 8011258:	f7fe fe09 	bl	800fe6e <create_chain>
 801125c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801125e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011260:	2b00      	cmp	r3, #0
 8011262:	f000 8110 	beq.w	8011486 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011268:	2b01      	cmp	r3, #1
 801126a:	d109      	bne.n	8011280 <f_write+0x11e>
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	2202      	movs	r2, #2
 8011270:	755a      	strb	r2, [r3, #21]
 8011272:	693b      	ldr	r3, [r7, #16]
 8011274:	2102      	movs	r1, #2
 8011276:	4618      	mov	r0, r3
 8011278:	f7fe f9b9 	bl	800f5ee <unlock_fs>
 801127c:	2302      	movs	r3, #2
 801127e:	e110      	b.n	80114a2 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011282:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011286:	d109      	bne.n	801129c <f_write+0x13a>
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	2201      	movs	r2, #1
 801128c:	755a      	strb	r2, [r3, #21]
 801128e:	693b      	ldr	r3, [r7, #16]
 8011290:	2101      	movs	r1, #1
 8011292:	4618      	mov	r0, r3
 8011294:	f7fe f9ab 	bl	800f5ee <unlock_fs>
 8011298:	2301      	movs	r3, #1
 801129a:	e102      	b.n	80114a2 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80112a0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	689b      	ldr	r3, [r3, #8]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d102      	bne.n	80112b0 <f_write+0x14e>
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80112ae:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	7d1b      	ldrb	r3, [r3, #20]
 80112b4:	b25b      	sxtb	r3, r3
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	da1d      	bge.n	80112f6 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80112ba:	693b      	ldr	r3, [r7, #16]
 80112bc:	7858      	ldrb	r0, [r3, #1]
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	6a1a      	ldr	r2, [r3, #32]
 80112c8:	2301      	movs	r3, #1
 80112ca:	f7fe f83b 	bl	800f344 <disk_write>
 80112ce:	4603      	mov	r3, r0
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d009      	beq.n	80112e8 <f_write+0x186>
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	2201      	movs	r2, #1
 80112d8:	755a      	strb	r2, [r3, #21]
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	2101      	movs	r1, #1
 80112de:	4618      	mov	r0, r3
 80112e0:	f7fe f985 	bl	800f5ee <unlock_fs>
 80112e4:	2301      	movs	r3, #1
 80112e6:	e0dc      	b.n	80114a2 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	7d1b      	ldrb	r3, [r3, #20]
 80112ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80112f0:	b2da      	uxtb	r2, r3
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80112f6:	693a      	ldr	r2, [r7, #16]
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	69db      	ldr	r3, [r3, #28]
 80112fc:	4619      	mov	r1, r3
 80112fe:	4610      	mov	r0, r2
 8011300:	f7fe fba0 	bl	800fa44 <clust2sect>
 8011304:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011306:	697b      	ldr	r3, [r7, #20]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d109      	bne.n	8011320 <f_write+0x1be>
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	2202      	movs	r2, #2
 8011310:	755a      	strb	r2, [r3, #21]
 8011312:	693b      	ldr	r3, [r7, #16]
 8011314:	2102      	movs	r1, #2
 8011316:	4618      	mov	r0, r3
 8011318:	f7fe f969 	bl	800f5ee <unlock_fs>
 801131c:	2302      	movs	r3, #2
 801131e:	e0c0      	b.n	80114a2 <f_write+0x340>
			sect += csect;
 8011320:	697a      	ldr	r2, [r7, #20]
 8011322:	69bb      	ldr	r3, [r7, #24]
 8011324:	4413      	add	r3, r2
 8011326:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	0a5b      	lsrs	r3, r3, #9
 801132c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801132e:	6a3b      	ldr	r3, [r7, #32]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d041      	beq.n	80113b8 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011334:	69ba      	ldr	r2, [r7, #24]
 8011336:	6a3b      	ldr	r3, [r7, #32]
 8011338:	4413      	add	r3, r2
 801133a:	693a      	ldr	r2, [r7, #16]
 801133c:	8952      	ldrh	r2, [r2, #10]
 801133e:	4293      	cmp	r3, r2
 8011340:	d905      	bls.n	801134e <f_write+0x1ec>
					cc = fs->csize - csect;
 8011342:	693b      	ldr	r3, [r7, #16]
 8011344:	895b      	ldrh	r3, [r3, #10]
 8011346:	461a      	mov	r2, r3
 8011348:	69bb      	ldr	r3, [r7, #24]
 801134a:	1ad3      	subs	r3, r2, r3
 801134c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801134e:	693b      	ldr	r3, [r7, #16]
 8011350:	7858      	ldrb	r0, [r3, #1]
 8011352:	6a3b      	ldr	r3, [r7, #32]
 8011354:	697a      	ldr	r2, [r7, #20]
 8011356:	69f9      	ldr	r1, [r7, #28]
 8011358:	f7fd fff4 	bl	800f344 <disk_write>
 801135c:	4603      	mov	r3, r0
 801135e:	2b00      	cmp	r3, #0
 8011360:	d009      	beq.n	8011376 <f_write+0x214>
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	2201      	movs	r2, #1
 8011366:	755a      	strb	r2, [r3, #21]
 8011368:	693b      	ldr	r3, [r7, #16]
 801136a:	2101      	movs	r1, #1
 801136c:	4618      	mov	r0, r3
 801136e:	f7fe f93e 	bl	800f5ee <unlock_fs>
 8011372:	2301      	movs	r3, #1
 8011374:	e095      	b.n	80114a2 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	6a1a      	ldr	r2, [r3, #32]
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	1ad3      	subs	r3, r2, r3
 801137e:	6a3a      	ldr	r2, [r7, #32]
 8011380:	429a      	cmp	r2, r3
 8011382:	d915      	bls.n	80113b0 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	6a1a      	ldr	r2, [r3, #32]
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	1ad3      	subs	r3, r2, r3
 8011392:	025b      	lsls	r3, r3, #9
 8011394:	69fa      	ldr	r2, [r7, #28]
 8011396:	4413      	add	r3, r2
 8011398:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801139c:	4619      	mov	r1, r3
 801139e:	f7fe f892 	bl	800f4c6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	7d1b      	ldrb	r3, [r3, #20]
 80113a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80113aa:	b2da      	uxtb	r2, r3
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80113b0:	6a3b      	ldr	r3, [r7, #32]
 80113b2:	025b      	lsls	r3, r3, #9
 80113b4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80113b6:	e044      	b.n	8011442 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	6a1b      	ldr	r3, [r3, #32]
 80113bc:	697a      	ldr	r2, [r7, #20]
 80113be:	429a      	cmp	r2, r3
 80113c0:	d01b      	beq.n	80113fa <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	699a      	ldr	r2, [r3, #24]
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80113ca:	429a      	cmp	r2, r3
 80113cc:	d215      	bcs.n	80113fa <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80113ce:	693b      	ldr	r3, [r7, #16]
 80113d0:	7858      	ldrb	r0, [r3, #1]
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80113d8:	2301      	movs	r3, #1
 80113da:	697a      	ldr	r2, [r7, #20]
 80113dc:	f7fd ff92 	bl	800f304 <disk_read>
 80113e0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d009      	beq.n	80113fa <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	2201      	movs	r2, #1
 80113ea:	755a      	strb	r2, [r3, #21]
 80113ec:	693b      	ldr	r3, [r7, #16]
 80113ee:	2101      	movs	r1, #1
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7fe f8fc 	bl	800f5ee <unlock_fs>
 80113f6:	2301      	movs	r3, #1
 80113f8:	e053      	b.n	80114a2 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	697a      	ldr	r2, [r7, #20]
 80113fe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	699b      	ldr	r3, [r3, #24]
 8011404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011408:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801140c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801140e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	429a      	cmp	r2, r3
 8011414:	d901      	bls.n	801141a <f_write+0x2b8>
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	699b      	ldr	r3, [r3, #24]
 8011424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011428:	4413      	add	r3, r2
 801142a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801142c:	69f9      	ldr	r1, [r7, #28]
 801142e:	4618      	mov	r0, r3
 8011430:	f7fe f849 	bl	800f4c6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	7d1b      	ldrb	r3, [r3, #20]
 8011438:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801143c:	b2da      	uxtb	r2, r3
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011442:	69fa      	ldr	r2, [r7, #28]
 8011444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011446:	4413      	add	r3, r2
 8011448:	61fb      	str	r3, [r7, #28]
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	699a      	ldr	r2, [r3, #24]
 801144e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011450:	441a      	add	r2, r3
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	619a      	str	r2, [r3, #24]
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	68da      	ldr	r2, [r3, #12]
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	699b      	ldr	r3, [r3, #24]
 801145e:	429a      	cmp	r2, r3
 8011460:	bf38      	it	cc
 8011462:	461a      	movcc	r2, r3
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	60da      	str	r2, [r3, #12]
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	681a      	ldr	r2, [r3, #0]
 801146c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801146e:	441a      	add	r2, r3
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	601a      	str	r2, [r3, #0]
 8011474:	687a      	ldr	r2, [r7, #4]
 8011476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011478:	1ad3      	subs	r3, r2, r3
 801147a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2b00      	cmp	r3, #0
 8011480:	f47f aeb6 	bne.w	80111f0 <f_write+0x8e>
 8011484:	e000      	b.n	8011488 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011486:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	7d1b      	ldrb	r3, [r3, #20]
 801148c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011490:	b2da      	uxtb	r2, r3
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	2100      	movs	r1, #0
 801149a:	4618      	mov	r0, r3
 801149c:	f7fe f8a7 	bl	800f5ee <unlock_fs>
 80114a0:	2300      	movs	r3, #0
}
 80114a2:	4618      	mov	r0, r3
 80114a4:	3730      	adds	r7, #48	@ 0x30
 80114a6:	46bd      	mov	sp, r7
 80114a8:	bd80      	pop	{r7, pc}

080114aa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80114aa:	b580      	push	{r7, lr}
 80114ac:	b086      	sub	sp, #24
 80114ae:	af00      	add	r7, sp, #0
 80114b0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	f107 0208 	add.w	r2, r7, #8
 80114b8:	4611      	mov	r1, r2
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7ff fbe4 	bl	8010c88 <validate>
 80114c0:	4603      	mov	r3, r0
 80114c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80114c4:	7dfb      	ldrb	r3, [r7, #23]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d16d      	bne.n	80115a6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	7d1b      	ldrb	r3, [r3, #20]
 80114ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d067      	beq.n	80115a6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	7d1b      	ldrb	r3, [r3, #20]
 80114da:	b25b      	sxtb	r3, r3
 80114dc:	2b00      	cmp	r3, #0
 80114de:	da1a      	bge.n	8011516 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	7858      	ldrb	r0, [r3, #1]
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	6a1a      	ldr	r2, [r3, #32]
 80114ee:	2301      	movs	r3, #1
 80114f0:	f7fd ff28 	bl	800f344 <disk_write>
 80114f4:	4603      	mov	r3, r0
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d006      	beq.n	8011508 <f_sync+0x5e>
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	2101      	movs	r1, #1
 80114fe:	4618      	mov	r0, r3
 8011500:	f7fe f875 	bl	800f5ee <unlock_fs>
 8011504:	2301      	movs	r3, #1
 8011506:	e055      	b.n	80115b4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	7d1b      	ldrb	r3, [r3, #20]
 801150c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011510:	b2da      	uxtb	r2, r3
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011516:	f7fd fc7b 	bl	800ee10 <get_fattime>
 801151a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801151c:	68ba      	ldr	r2, [r7, #8]
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011522:	4619      	mov	r1, r3
 8011524:	4610      	mov	r0, r2
 8011526:	f7fe f9f1 	bl	800f90c <move_window>
 801152a:	4603      	mov	r3, r0
 801152c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801152e:	7dfb      	ldrb	r3, [r7, #23]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d138      	bne.n	80115a6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011538:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	330b      	adds	r3, #11
 801153e:	781a      	ldrb	r2, [r3, #0]
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	330b      	adds	r3, #11
 8011544:	f042 0220 	orr.w	r2, r2, #32
 8011548:	b2d2      	uxtb	r2, r2
 801154a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6818      	ldr	r0, [r3, #0]
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	689b      	ldr	r3, [r3, #8]
 8011554:	461a      	mov	r2, r3
 8011556:	68f9      	ldr	r1, [r7, #12]
 8011558:	f7fe fefb 	bl	8010352 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	f103 021c 	add.w	r2, r3, #28
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	68db      	ldr	r3, [r3, #12]
 8011566:	4619      	mov	r1, r3
 8011568:	4610      	mov	r0, r2
 801156a:	f7fd ff80 	bl	800f46e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	3316      	adds	r3, #22
 8011572:	6939      	ldr	r1, [r7, #16]
 8011574:	4618      	mov	r0, r3
 8011576:	f7fd ff7a 	bl	800f46e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	3312      	adds	r3, #18
 801157e:	2100      	movs	r1, #0
 8011580:	4618      	mov	r0, r3
 8011582:	f7fd ff59 	bl	800f438 <st_word>
					fs->wflag = 1;
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	2201      	movs	r2, #1
 801158a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	4618      	mov	r0, r3
 8011590:	f7fe f9ea 	bl	800f968 <sync_fs>
 8011594:	4603      	mov	r3, r0
 8011596:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	7d1b      	ldrb	r3, [r3, #20]
 801159c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80115a0:	b2da      	uxtb	r2, r3
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80115a6:	68bb      	ldr	r3, [r7, #8]
 80115a8:	7dfa      	ldrb	r2, [r7, #23]
 80115aa:	4611      	mov	r1, r2
 80115ac:	4618      	mov	r0, r3
 80115ae:	f7fe f81e 	bl	800f5ee <unlock_fs>
 80115b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80115b4:	4618      	mov	r0, r3
 80115b6:	3718      	adds	r7, #24
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}

080115bc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b090      	sub	sp, #64	@ 0x40
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
 80115c4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	f107 0208 	add.w	r2, r7, #8
 80115cc:	4611      	mov	r1, r2
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7ff fb5a 	bl	8010c88 <validate>
 80115d4:	4603      	mov	r3, r0
 80115d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80115da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d103      	bne.n	80115ea <f_lseek+0x2e>
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	7d5b      	ldrb	r3, [r3, #21]
 80115e6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80115ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d009      	beq.n	8011606 <f_lseek+0x4a>
 80115f2:	68bb      	ldr	r3, [r7, #8]
 80115f4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80115f8:	4611      	mov	r1, r2
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7fd fff7 	bl	800f5ee <unlock_fs>
 8011600:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011604:	e229      	b.n	8011a5a <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801160a:	2b00      	cmp	r3, #0
 801160c:	f000 80ea 	beq.w	80117e4 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011616:	d164      	bne.n	80116e2 <f_lseek+0x126>
			tbl = fp->cltbl;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801161c:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011620:	1d1a      	adds	r2, r3, #4
 8011622:	627a      	str	r2, [r7, #36]	@ 0x24
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	617b      	str	r3, [r7, #20]
 8011628:	2302      	movs	r3, #2
 801162a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	689b      	ldr	r3, [r3, #8]
 8011630:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8011632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011634:	2b00      	cmp	r3, #0
 8011636:	d044      	beq.n	80116c2 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801163a:	613b      	str	r3, [r7, #16]
 801163c:	2300      	movs	r3, #0
 801163e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011642:	3302      	adds	r3, #2
 8011644:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8011646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011648:	60fb      	str	r3, [r7, #12]
 801164a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801164c:	3301      	adds	r3, #1
 801164e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011654:	4618      	mov	r0, r3
 8011656:	f7fe fa14 	bl	800fa82 <get_fat>
 801165a:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801165c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801165e:	2b01      	cmp	r3, #1
 8011660:	d809      	bhi.n	8011676 <f_lseek+0xba>
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2202      	movs	r2, #2
 8011666:	755a      	strb	r2, [r3, #21]
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	2102      	movs	r1, #2
 801166c:	4618      	mov	r0, r3
 801166e:	f7fd ffbe 	bl	800f5ee <unlock_fs>
 8011672:	2302      	movs	r3, #2
 8011674:	e1f1      	b.n	8011a5a <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011678:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801167c:	d109      	bne.n	8011692 <f_lseek+0xd6>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	2201      	movs	r2, #1
 8011682:	755a      	strb	r2, [r3, #21]
 8011684:	68bb      	ldr	r3, [r7, #8]
 8011686:	2101      	movs	r1, #1
 8011688:	4618      	mov	r0, r3
 801168a:	f7fd ffb0 	bl	800f5ee <unlock_fs>
 801168e:	2301      	movs	r3, #1
 8011690:	e1e3      	b.n	8011a5a <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	3301      	adds	r3, #1
 8011696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011698:	429a      	cmp	r2, r3
 801169a:	d0d4      	beq.n	8011646 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801169c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801169e:	697b      	ldr	r3, [r7, #20]
 80116a0:	429a      	cmp	r2, r3
 80116a2:	d809      	bhi.n	80116b8 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80116a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116a6:	1d1a      	adds	r2, r3, #4
 80116a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80116aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80116ac:	601a      	str	r2, [r3, #0]
 80116ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116b0:	1d1a      	adds	r2, r3, #4
 80116b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80116b4:	693a      	ldr	r2, [r7, #16]
 80116b6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	699b      	ldr	r3, [r3, #24]
 80116bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80116be:	429a      	cmp	r2, r3
 80116c0:	d3ba      	bcc.n	8011638 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80116c8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80116ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	429a      	cmp	r2, r3
 80116d0:	d803      	bhi.n	80116da <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80116d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116d4:	2200      	movs	r2, #0
 80116d6:	601a      	str	r2, [r3, #0]
 80116d8:	e1b6      	b.n	8011a48 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80116da:	2311      	movs	r3, #17
 80116dc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80116e0:	e1b2      	b.n	8011a48 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	68db      	ldr	r3, [r3, #12]
 80116e6:	683a      	ldr	r2, [r7, #0]
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d902      	bls.n	80116f2 <f_lseek+0x136>
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	68db      	ldr	r3, [r3, #12]
 80116f0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	683a      	ldr	r2, [r7, #0]
 80116f6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	f000 81a4 	beq.w	8011a48 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	3b01      	subs	r3, #1
 8011704:	4619      	mov	r1, r3
 8011706:	6878      	ldr	r0, [r7, #4]
 8011708:	f7fe fc49 	bl	800ff9e <clmt_clust>
 801170c:	4602      	mov	r2, r0
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011712:	68ba      	ldr	r2, [r7, #8]
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	69db      	ldr	r3, [r3, #28]
 8011718:	4619      	mov	r1, r3
 801171a:	4610      	mov	r0, r2
 801171c:	f7fe f992 	bl	800fa44 <clust2sect>
 8011720:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011722:	69bb      	ldr	r3, [r7, #24]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d109      	bne.n	801173c <f_lseek+0x180>
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	2202      	movs	r2, #2
 801172c:	755a      	strb	r2, [r3, #21]
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	2102      	movs	r1, #2
 8011732:	4618      	mov	r0, r3
 8011734:	f7fd ff5b 	bl	800f5ee <unlock_fs>
 8011738:	2302      	movs	r3, #2
 801173a:	e18e      	b.n	8011a5a <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	3b01      	subs	r3, #1
 8011740:	0a5b      	lsrs	r3, r3, #9
 8011742:	68ba      	ldr	r2, [r7, #8]
 8011744:	8952      	ldrh	r2, [r2, #10]
 8011746:	3a01      	subs	r2, #1
 8011748:	4013      	ands	r3, r2
 801174a:	69ba      	ldr	r2, [r7, #24]
 801174c:	4413      	add	r3, r2
 801174e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	699b      	ldr	r3, [r3, #24]
 8011754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011758:	2b00      	cmp	r3, #0
 801175a:	f000 8175 	beq.w	8011a48 <f_lseek+0x48c>
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6a1b      	ldr	r3, [r3, #32]
 8011762:	69ba      	ldr	r2, [r7, #24]
 8011764:	429a      	cmp	r2, r3
 8011766:	f000 816f 	beq.w	8011a48 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	7d1b      	ldrb	r3, [r3, #20]
 801176e:	b25b      	sxtb	r3, r3
 8011770:	2b00      	cmp	r3, #0
 8011772:	da1d      	bge.n	80117b0 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	7858      	ldrb	r0, [r3, #1]
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6a1a      	ldr	r2, [r3, #32]
 8011782:	2301      	movs	r3, #1
 8011784:	f7fd fdde 	bl	800f344 <disk_write>
 8011788:	4603      	mov	r3, r0
 801178a:	2b00      	cmp	r3, #0
 801178c:	d009      	beq.n	80117a2 <f_lseek+0x1e6>
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2201      	movs	r2, #1
 8011792:	755a      	strb	r2, [r3, #21]
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	2101      	movs	r1, #1
 8011798:	4618      	mov	r0, r3
 801179a:	f7fd ff28 	bl	800f5ee <unlock_fs>
 801179e:	2301      	movs	r3, #1
 80117a0:	e15b      	b.n	8011a5a <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	7d1b      	ldrb	r3, [r3, #20]
 80117a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80117aa:	b2da      	uxtb	r2, r3
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	7858      	ldrb	r0, [r3, #1]
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80117ba:	2301      	movs	r3, #1
 80117bc:	69ba      	ldr	r2, [r7, #24]
 80117be:	f7fd fda1 	bl	800f304 <disk_read>
 80117c2:	4603      	mov	r3, r0
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d009      	beq.n	80117dc <f_lseek+0x220>
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	2201      	movs	r2, #1
 80117cc:	755a      	strb	r2, [r3, #21]
 80117ce:	68bb      	ldr	r3, [r7, #8]
 80117d0:	2101      	movs	r1, #1
 80117d2:	4618      	mov	r0, r3
 80117d4:	f7fd ff0b 	bl	800f5ee <unlock_fs>
 80117d8:	2301      	movs	r3, #1
 80117da:	e13e      	b.n	8011a5a <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	69ba      	ldr	r2, [r7, #24]
 80117e0:	621a      	str	r2, [r3, #32]
 80117e2:	e131      	b.n	8011a48 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	68db      	ldr	r3, [r3, #12]
 80117e8:	683a      	ldr	r2, [r7, #0]
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d908      	bls.n	8011800 <f_lseek+0x244>
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	7d1b      	ldrb	r3, [r3, #20]
 80117f2:	f003 0302 	and.w	r3, r3, #2
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d102      	bne.n	8011800 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	68db      	ldr	r3, [r3, #12]
 80117fe:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	699b      	ldr	r3, [r3, #24]
 8011804:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011806:	2300      	movs	r3, #0
 8011808:	637b      	str	r3, [r7, #52]	@ 0x34
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801180e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	2b00      	cmp	r3, #0
 8011814:	f000 80c0 	beq.w	8011998 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	895b      	ldrh	r3, [r3, #10]
 801181c:	025b      	lsls	r3, r3, #9
 801181e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011820:	6a3b      	ldr	r3, [r7, #32]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d01b      	beq.n	801185e <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	1e5a      	subs	r2, r3, #1
 801182a:	69fb      	ldr	r3, [r7, #28]
 801182c:	fbb2 f2f3 	udiv	r2, r2, r3
 8011830:	6a3b      	ldr	r3, [r7, #32]
 8011832:	1e59      	subs	r1, r3, #1
 8011834:	69fb      	ldr	r3, [r7, #28]
 8011836:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801183a:	429a      	cmp	r2, r3
 801183c:	d30f      	bcc.n	801185e <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801183e:	6a3b      	ldr	r3, [r7, #32]
 8011840:	1e5a      	subs	r2, r3, #1
 8011842:	69fb      	ldr	r3, [r7, #28]
 8011844:	425b      	negs	r3, r3
 8011846:	401a      	ands	r2, r3
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	699b      	ldr	r3, [r3, #24]
 8011850:	683a      	ldr	r2, [r7, #0]
 8011852:	1ad3      	subs	r3, r2, r3
 8011854:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	69db      	ldr	r3, [r3, #28]
 801185a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801185c:	e02c      	b.n	80118b8 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	689b      	ldr	r3, [r3, #8]
 8011862:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011866:	2b00      	cmp	r3, #0
 8011868:	d123      	bne.n	80118b2 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2100      	movs	r1, #0
 801186e:	4618      	mov	r0, r3
 8011870:	f7fe fafd 	bl	800fe6e <create_chain>
 8011874:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011878:	2b01      	cmp	r3, #1
 801187a:	d109      	bne.n	8011890 <f_lseek+0x2d4>
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	2202      	movs	r2, #2
 8011880:	755a      	strb	r2, [r3, #21]
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	2102      	movs	r1, #2
 8011886:	4618      	mov	r0, r3
 8011888:	f7fd feb1 	bl	800f5ee <unlock_fs>
 801188c:	2302      	movs	r3, #2
 801188e:	e0e4      	b.n	8011a5a <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011892:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011896:	d109      	bne.n	80118ac <f_lseek+0x2f0>
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2201      	movs	r2, #1
 801189c:	755a      	strb	r2, [r3, #21]
 801189e:	68bb      	ldr	r3, [r7, #8]
 80118a0:	2101      	movs	r1, #1
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7fd fea3 	bl	800f5ee <unlock_fs>
 80118a8:	2301      	movs	r3, #1
 80118aa:	e0d6      	b.n	8011a5a <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80118b0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80118b6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80118b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d06c      	beq.n	8011998 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80118be:	e044      	b.n	801194a <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80118c0:	683a      	ldr	r2, [r7, #0]
 80118c2:	69fb      	ldr	r3, [r7, #28]
 80118c4:	1ad3      	subs	r3, r2, r3
 80118c6:	603b      	str	r3, [r7, #0]
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	699a      	ldr	r2, [r3, #24]
 80118cc:	69fb      	ldr	r3, [r7, #28]
 80118ce:	441a      	add	r2, r3
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	7d1b      	ldrb	r3, [r3, #20]
 80118d8:	f003 0302 	and.w	r3, r3, #2
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d00b      	beq.n	80118f8 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7fe fac2 	bl	800fe6e <create_chain>
 80118ea:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80118ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d108      	bne.n	8011904 <f_lseek+0x348>
							ofs = 0; break;
 80118f2:	2300      	movs	r3, #0
 80118f4:	603b      	str	r3, [r7, #0]
 80118f6:	e02c      	b.n	8011952 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80118fc:	4618      	mov	r0, r3
 80118fe:	f7fe f8c0 	bl	800fa82 <get_fat>
 8011902:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011906:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801190a:	d109      	bne.n	8011920 <f_lseek+0x364>
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2201      	movs	r2, #1
 8011910:	755a      	strb	r2, [r3, #21]
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	2101      	movs	r1, #1
 8011916:	4618      	mov	r0, r3
 8011918:	f7fd fe69 	bl	800f5ee <unlock_fs>
 801191c:	2301      	movs	r3, #1
 801191e:	e09c      	b.n	8011a5a <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011922:	2b01      	cmp	r3, #1
 8011924:	d904      	bls.n	8011930 <f_lseek+0x374>
 8011926:	68bb      	ldr	r3, [r7, #8]
 8011928:	699b      	ldr	r3, [r3, #24]
 801192a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801192c:	429a      	cmp	r2, r3
 801192e:	d309      	bcc.n	8011944 <f_lseek+0x388>
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	2202      	movs	r2, #2
 8011934:	755a      	strb	r2, [r3, #21]
 8011936:	68bb      	ldr	r3, [r7, #8]
 8011938:	2102      	movs	r1, #2
 801193a:	4618      	mov	r0, r3
 801193c:	f7fd fe57 	bl	800f5ee <unlock_fs>
 8011940:	2302      	movs	r3, #2
 8011942:	e08a      	b.n	8011a5a <f_lseek+0x49e>
					fp->clust = clst;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011948:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801194a:	683a      	ldr	r2, [r7, #0]
 801194c:	69fb      	ldr	r3, [r7, #28]
 801194e:	429a      	cmp	r2, r3
 8011950:	d8b6      	bhi.n	80118c0 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	699a      	ldr	r2, [r3, #24]
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	441a      	add	r2, r3
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011964:	2b00      	cmp	r3, #0
 8011966:	d017      	beq.n	8011998 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011968:	68bb      	ldr	r3, [r7, #8]
 801196a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801196c:	4618      	mov	r0, r3
 801196e:	f7fe f869 	bl	800fa44 <clust2sect>
 8011972:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011976:	2b00      	cmp	r3, #0
 8011978:	d109      	bne.n	801198e <f_lseek+0x3d2>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2202      	movs	r2, #2
 801197e:	755a      	strb	r2, [r3, #21]
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	2102      	movs	r1, #2
 8011984:	4618      	mov	r0, r3
 8011986:	f7fd fe32 	bl	800f5ee <unlock_fs>
 801198a:	2302      	movs	r3, #2
 801198c:	e065      	b.n	8011a5a <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	0a5b      	lsrs	r3, r3, #9
 8011992:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011994:	4413      	add	r3, r2
 8011996:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	699a      	ldr	r2, [r3, #24]
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	68db      	ldr	r3, [r3, #12]
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d90a      	bls.n	80119ba <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	699a      	ldr	r2, [r3, #24]
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	7d1b      	ldrb	r3, [r3, #20]
 80119b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119b4:	b2da      	uxtb	r2, r3
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	699b      	ldr	r3, [r3, #24]
 80119be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d040      	beq.n	8011a48 <f_lseek+0x48c>
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	6a1b      	ldr	r3, [r3, #32]
 80119ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d03b      	beq.n	8011a48 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	7d1b      	ldrb	r3, [r3, #20]
 80119d4:	b25b      	sxtb	r3, r3
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	da1d      	bge.n	8011a16 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	7858      	ldrb	r0, [r3, #1]
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	6a1a      	ldr	r2, [r3, #32]
 80119e8:	2301      	movs	r3, #1
 80119ea:	f7fd fcab 	bl	800f344 <disk_write>
 80119ee:	4603      	mov	r3, r0
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d009      	beq.n	8011a08 <f_lseek+0x44c>
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	2201      	movs	r2, #1
 80119f8:	755a      	strb	r2, [r3, #21]
 80119fa:	68bb      	ldr	r3, [r7, #8]
 80119fc:	2101      	movs	r1, #1
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7fd fdf5 	bl	800f5ee <unlock_fs>
 8011a04:	2301      	movs	r3, #1
 8011a06:	e028      	b.n	8011a5a <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	7d1b      	ldrb	r3, [r3, #20]
 8011a0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011a10:	b2da      	uxtb	r2, r3
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011a16:	68bb      	ldr	r3, [r7, #8]
 8011a18:	7858      	ldrb	r0, [r3, #1]
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011a20:	2301      	movs	r3, #1
 8011a22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011a24:	f7fd fc6e 	bl	800f304 <disk_read>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d009      	beq.n	8011a42 <f_lseek+0x486>
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2201      	movs	r2, #1
 8011a32:	755a      	strb	r2, [r3, #21]
 8011a34:	68bb      	ldr	r3, [r7, #8]
 8011a36:	2101      	movs	r1, #1
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f7fd fdd8 	bl	800f5ee <unlock_fs>
 8011a3e:	2301      	movs	r3, #1
 8011a40:	e00b      	b.n	8011a5a <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011a46:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8011a4e:	4611      	mov	r1, r2
 8011a50:	4618      	mov	r0, r3
 8011a52:	f7fd fdcc 	bl	800f5ee <unlock_fs>
 8011a56:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	3740      	adds	r7, #64	@ 0x40
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	bd80      	pop	{r7, pc}

08011a62 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8011a62:	b580      	push	{r7, lr}
 8011a64:	b084      	sub	sp, #16
 8011a66:	af00      	add	r7, sp, #0
 8011a68:	6078      	str	r0, [r7, #4]
 8011a6a:	460b      	mov	r3, r1
 8011a6c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8011a6e:	78fb      	ldrb	r3, [r7, #3]
 8011a70:	2b0a      	cmp	r3, #10
 8011a72:	d103      	bne.n	8011a7c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8011a74:	210d      	movs	r1, #13
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f7ff fff3 	bl	8011a62 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	685b      	ldr	r3, [r3, #4]
 8011a80:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	db25      	blt.n	8011ad4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	1c5a      	adds	r2, r3, #1
 8011a8c:	60fa      	str	r2, [r7, #12]
 8011a8e:	687a      	ldr	r2, [r7, #4]
 8011a90:	4413      	add	r3, r2
 8011a92:	78fa      	ldrb	r2, [r7, #3]
 8011a94:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	2b3c      	cmp	r3, #60	@ 0x3c
 8011a9a:	dd12      	ble.n	8011ac2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	6818      	ldr	r0, [r3, #0]
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f103 010c 	add.w	r1, r3, #12
 8011aa6:	68fa      	ldr	r2, [r7, #12]
 8011aa8:	f107 0308 	add.w	r3, r7, #8
 8011aac:	f7ff fb59 	bl	8011162 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8011ab0:	68ba      	ldr	r2, [r7, #8]
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	d101      	bne.n	8011abc <putc_bfd+0x5a>
 8011ab8:	2300      	movs	r3, #0
 8011aba:	e001      	b.n	8011ac0 <putc_bfd+0x5e>
 8011abc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011ac0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	68fa      	ldr	r2, [r7, #12]
 8011ac6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	689b      	ldr	r3, [r3, #8]
 8011acc:	1c5a      	adds	r2, r3, #1
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	609a      	str	r2, [r3, #8]
 8011ad2:	e000      	b.n	8011ad6 <putc_bfd+0x74>
	if (i < 0) return;
 8011ad4:	bf00      	nop
}
 8011ad6:	3710      	adds	r7, #16
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}

08011adc <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b084      	sub	sp, #16
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	685b      	ldr	r3, [r3, #4]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	db16      	blt.n	8011b1a <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	6818      	ldr	r0, [r3, #0]
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	f103 010c 	add.w	r1, r3, #12
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	685b      	ldr	r3, [r3, #4]
 8011afa:	461a      	mov	r2, r3
 8011afc:	f107 030c 	add.w	r3, r7, #12
 8011b00:	f7ff fb2f 	bl	8011162 <f_write>
 8011b04:	4603      	mov	r3, r0
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d107      	bne.n	8011b1a <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	68fa      	ldr	r2, [r7, #12]
 8011b10:	4293      	cmp	r3, r2
 8011b12:	d102      	bne.n	8011b1a <putc_flush+0x3e>
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	689b      	ldr	r3, [r3, #8]
 8011b18:	e001      	b.n	8011b1e <putc_flush+0x42>
	return EOF;
 8011b1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8011b1e:	4618      	mov	r0, r3
 8011b20:	3710      	adds	r7, #16
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}

08011b26 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8011b26:	b480      	push	{r7}
 8011b28:	b083      	sub	sp, #12
 8011b2a:	af00      	add	r7, sp, #0
 8011b2c:	6078      	str	r0, [r7, #4]
 8011b2e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	683a      	ldr	r2, [r7, #0]
 8011b34:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2200      	movs	r2, #0
 8011b3a:	605a      	str	r2, [r3, #4]
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	685a      	ldr	r2, [r3, #4]
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	609a      	str	r2, [r3, #8]
}
 8011b44:	bf00      	nop
 8011b46:	370c      	adds	r7, #12
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4e:	4770      	bx	lr

08011b50 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8011b50:	b40e      	push	{r1, r2, r3}
 8011b52:	b580      	push	{r7, lr}
 8011b54:	b0a7      	sub	sp, #156	@ 0x9c
 8011b56:	af00      	add	r7, sp, #0
 8011b58:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8011b5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011b5e:	6879      	ldr	r1, [r7, #4]
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7ff ffe0 	bl	8011b26 <putc_init>

	va_start(arp, fmt);
 8011b66:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8011b6a:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 8011b6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011b70:	1c5a      	adds	r2, r3, #1
 8011b72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011b76:	781b      	ldrb	r3, [r3, #0]
 8011b78:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 8011b7c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	f000 81f2 	beq.w	8011f6a <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8011b86:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011b8a:	2b25      	cmp	r3, #37	@ 0x25
 8011b8c:	d008      	beq.n	8011ba0 <f_printf+0x50>
			putc_bfd(&pb, c);
 8011b8e:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8011b92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011b96:	4611      	mov	r1, r2
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f7ff ff62 	bl	8011a62 <putc_bfd>
			continue;
 8011b9e:	e1e3      	b.n	8011f68 <f_printf+0x418>
		}
		w = f = 0;
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 8011bac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011bb0:	1c5a      	adds	r2, r3, #1
 8011bb2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011bb6:	781b      	ldrb	r3, [r3, #0]
 8011bb8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8011bbc:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011bc0:	2b30      	cmp	r3, #48	@ 0x30
 8011bc2:	d10b      	bne.n	8011bdc <f_printf+0x8c>
			f = 1; c = *fmt++;
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011bca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011bce:	1c5a      	adds	r2, r3, #1
 8011bd0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011bd4:	781b      	ldrb	r3, [r3, #0]
 8011bd6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8011bda:	e024      	b.n	8011c26 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8011bdc:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011be0:	2b2d      	cmp	r3, #45	@ 0x2d
 8011be2:	d120      	bne.n	8011c26 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8011be4:	2302      	movs	r3, #2
 8011be6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011bea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011bee:	1c5a      	adds	r2, r3, #1
 8011bf0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011bf4:	781b      	ldrb	r3, [r3, #0]
 8011bf6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8011bfa:	e014      	b.n	8011c26 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8011bfc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011c00:	4613      	mov	r3, r2
 8011c02:	009b      	lsls	r3, r3, #2
 8011c04:	4413      	add	r3, r2
 8011c06:	005b      	lsls	r3, r3, #1
 8011c08:	461a      	mov	r2, r3
 8011c0a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011c0e:	4413      	add	r3, r2
 8011c10:	3b30      	subs	r3, #48	@ 0x30
 8011c12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 8011c16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011c1a:	1c5a      	adds	r2, r3, #1
 8011c1c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011c20:	781b      	ldrb	r3, [r3, #0]
 8011c22:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 8011c26:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011c2a:	2b2f      	cmp	r3, #47	@ 0x2f
 8011c2c:	d903      	bls.n	8011c36 <f_printf+0xe6>
 8011c2e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011c32:	2b39      	cmp	r3, #57	@ 0x39
 8011c34:	d9e2      	bls.n	8011bfc <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8011c36:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011c3a:	2b6c      	cmp	r3, #108	@ 0x6c
 8011c3c:	d003      	beq.n	8011c46 <f_printf+0xf6>
 8011c3e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011c42:	2b4c      	cmp	r3, #76	@ 0x4c
 8011c44:	d10d      	bne.n	8011c62 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8011c46:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011c4a:	f043 0304 	orr.w	r3, r3, #4
 8011c4e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011c52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011c56:	1c5a      	adds	r2, r3, #1
 8011c58:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011c5c:	781b      	ldrb	r3, [r3, #0]
 8011c5e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 8011c62:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	f000 8181 	beq.w	8011f6e <f_printf+0x41e>
		d = c;
 8011c6c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011c70:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 8011c74:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011c78:	2b60      	cmp	r3, #96	@ 0x60
 8011c7a:	d908      	bls.n	8011c8e <f_printf+0x13e>
 8011c7c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011c80:	2b7a      	cmp	r3, #122	@ 0x7a
 8011c82:	d804      	bhi.n	8011c8e <f_printf+0x13e>
 8011c84:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011c88:	3b20      	subs	r3, #32
 8011c8a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 8011c8e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011c92:	3b42      	subs	r3, #66	@ 0x42
 8011c94:	2b16      	cmp	r3, #22
 8011c96:	f200 8098 	bhi.w	8011dca <f_printf+0x27a>
 8011c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8011ca0 <f_printf+0x150>)
 8011c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ca0:	08011dab 	.word	0x08011dab
 8011ca4:	08011d93 	.word	0x08011d93
 8011ca8:	08011dbb 	.word	0x08011dbb
 8011cac:	08011dcb 	.word	0x08011dcb
 8011cb0:	08011dcb 	.word	0x08011dcb
 8011cb4:	08011dcb 	.word	0x08011dcb
 8011cb8:	08011dcb 	.word	0x08011dcb
 8011cbc:	08011dcb 	.word	0x08011dcb
 8011cc0:	08011dcb 	.word	0x08011dcb
 8011cc4:	08011dcb 	.word	0x08011dcb
 8011cc8:	08011dcb 	.word	0x08011dcb
 8011ccc:	08011dcb 	.word	0x08011dcb
 8011cd0:	08011dcb 	.word	0x08011dcb
 8011cd4:	08011db3 	.word	0x08011db3
 8011cd8:	08011dcb 	.word	0x08011dcb
 8011cdc:	08011dcb 	.word	0x08011dcb
 8011ce0:	08011dcb 	.word	0x08011dcb
 8011ce4:	08011cfd 	.word	0x08011cfd
 8011ce8:	08011dcb 	.word	0x08011dcb
 8011cec:	08011dbb 	.word	0x08011dbb
 8011cf0:	08011dcb 	.word	0x08011dcb
 8011cf4:	08011dcb 	.word	0x08011dcb
 8011cf8:	08011dc3 	.word	0x08011dc3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8011cfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011cfe:	1d1a      	adds	r2, r3, #4
 8011d00:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 8011d06:	2300      	movs	r3, #0
 8011d08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011d0c:	e004      	b.n	8011d18 <f_printf+0x1c8>
 8011d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011d12:	3301      	adds	r3, #1
 8011d14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011d18:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011d1e:	4413      	add	r3, r2
 8011d20:	781b      	ldrb	r3, [r3, #0]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d1f3      	bne.n	8011d0e <f_printf+0x1be>
			if (!(f & 2)) {
 8011d26:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011d2a:	f003 0302 	and.w	r3, r3, #2
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d11a      	bne.n	8011d68 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8011d32:	e005      	b.n	8011d40 <f_printf+0x1f0>
 8011d34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011d38:	2120      	movs	r1, #32
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7ff fe91 	bl	8011a62 <putc_bfd>
 8011d40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011d44:	1c5a      	adds	r2, r3, #1
 8011d46:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011d4a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d8f0      	bhi.n	8011d34 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8011d52:	e009      	b.n	8011d68 <f_printf+0x218>
 8011d54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011d56:	1c5a      	adds	r2, r3, #1
 8011d58:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011d5a:	781a      	ldrb	r2, [r3, #0]
 8011d5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011d60:	4611      	mov	r1, r2
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7ff fe7d 	bl	8011a62 <putc_bfd>
 8011d68:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011d6a:	781b      	ldrb	r3, [r3, #0]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d1f1      	bne.n	8011d54 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8011d70:	e005      	b.n	8011d7e <f_printf+0x22e>
 8011d72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011d76:	2120      	movs	r1, #32
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f7ff fe72 	bl	8011a62 <putc_bfd>
 8011d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011d82:	1c5a      	adds	r2, r3, #1
 8011d84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011d88:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011d8c:	429a      	cmp	r2, r3
 8011d8e:	d8f0      	bhi.n	8011d72 <f_printf+0x222>
			continue;
 8011d90:	e0ea      	b.n	8011f68 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8011d92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011d94:	1d1a      	adds	r2, r3, #4
 8011d96:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	b2da      	uxtb	r2, r3
 8011d9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011da0:	4611      	mov	r1, r2
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7ff fe5d 	bl	8011a62 <putc_bfd>
 8011da8:	e0de      	b.n	8011f68 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8011daa:	2302      	movs	r3, #2
 8011dac:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011db0:	e014      	b.n	8011ddc <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8011db2:	2308      	movs	r3, #8
 8011db4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011db8:	e010      	b.n	8011ddc <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8011dba:	230a      	movs	r3, #10
 8011dbc:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011dc0:	e00c      	b.n	8011ddc <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8011dc2:	2310      	movs	r3, #16
 8011dc4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011dc8:	e008      	b.n	8011ddc <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8011dca:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8011dce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011dd2:	4611      	mov	r1, r2
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f7ff fe44 	bl	8011a62 <putc_bfd>
 8011dda:	e0c5      	b.n	8011f68 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8011ddc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011de0:	f003 0304 	and.w	r3, r3, #4
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d004      	beq.n	8011df2 <f_printf+0x2a2>
 8011de8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011dea:	1d1a      	adds	r2, r3, #4
 8011dec:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	e00c      	b.n	8011e0c <f_printf+0x2bc>
 8011df2:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011df6:	2b44      	cmp	r3, #68	@ 0x44
 8011df8:	d104      	bne.n	8011e04 <f_printf+0x2b4>
 8011dfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011dfc:	1d1a      	adds	r2, r3, #4
 8011dfe:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	e003      	b.n	8011e0c <f_printf+0x2bc>
 8011e04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011e06:	1d1a      	adds	r2, r3, #4
 8011e08:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8011e10:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011e14:	2b44      	cmp	r3, #68	@ 0x44
 8011e16:	d10e      	bne.n	8011e36 <f_printf+0x2e6>
 8011e18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	da0a      	bge.n	8011e36 <f_printf+0x2e6>
			v = 0 - v;
 8011e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011e24:	425b      	negs	r3, r3
 8011e26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 8011e2a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011e2e:	f043 0308 	orr.w	r3, r3, #8
 8011e32:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 8011e36:	2300      	movs	r3, #0
 8011e38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8011e3c:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8011e40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011e44:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e48:	fb01 f202 	mul.w	r2, r1, r2
 8011e4c:	1a9b      	subs	r3, r3, r2
 8011e4e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8011e52:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8011e56:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8011e62:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011e66:	2b09      	cmp	r3, #9
 8011e68:	d90b      	bls.n	8011e82 <f_printf+0x332>
 8011e6a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011e6e:	2b78      	cmp	r3, #120	@ 0x78
 8011e70:	d101      	bne.n	8011e76 <f_printf+0x326>
 8011e72:	2227      	movs	r2, #39	@ 0x27
 8011e74:	e000      	b.n	8011e78 <f_printf+0x328>
 8011e76:	2207      	movs	r2, #7
 8011e78:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011e7c:	4413      	add	r3, r2
 8011e7e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 8011e82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011e86:	1c5a      	adds	r2, r3, #1
 8011e88:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8011e8c:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8011e90:	3230      	adds	r2, #48	@ 0x30
 8011e92:	b2d2      	uxtb	r2, r2
 8011e94:	3398      	adds	r3, #152	@ 0x98
 8011e96:	443b      	add	r3, r7
 8011e98:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8011e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d003      	beq.n	8011eac <f_printf+0x35c>
 8011ea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011ea8:	2b1f      	cmp	r3, #31
 8011eaa:	d9c7      	bls.n	8011e3c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8011eac:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011eb0:	f003 0308 	and.w	r3, r3, #8
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d009      	beq.n	8011ecc <f_printf+0x37c>
 8011eb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011ebc:	1c5a      	adds	r2, r3, #1
 8011ebe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8011ec2:	3398      	adds	r3, #152	@ 0x98
 8011ec4:	443b      	add	r3, r7
 8011ec6:	222d      	movs	r2, #45	@ 0x2d
 8011ec8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8011ecc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011ed0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011ed4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011ed8:	f003 0301 	and.w	r3, r3, #1
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d001      	beq.n	8011ee4 <f_printf+0x394>
 8011ee0:	2330      	movs	r3, #48	@ 0x30
 8011ee2:	e000      	b.n	8011ee6 <f_printf+0x396>
 8011ee4:	2320      	movs	r3, #32
 8011ee6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8011eea:	e007      	b.n	8011efc <f_printf+0x3ac>
 8011eec:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8011ef0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011ef4:	4611      	mov	r1, r2
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f7ff fdb3 	bl	8011a62 <putc_bfd>
 8011efc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011f00:	f003 0302 	and.w	r3, r3, #2
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d108      	bne.n	8011f1a <f_printf+0x3ca>
 8011f08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011f0c:	1c5a      	adds	r2, r3, #1
 8011f0e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011f12:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011f16:	429a      	cmp	r2, r3
 8011f18:	d8e8      	bhi.n	8011eec <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8011f1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011f1e:	3b01      	subs	r3, #1
 8011f20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011f24:	f107 020c 	add.w	r2, r7, #12
 8011f28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011f2c:	4413      	add	r3, r2
 8011f2e:	781a      	ldrb	r2, [r3, #0]
 8011f30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011f34:	4611      	mov	r1, r2
 8011f36:	4618      	mov	r0, r3
 8011f38:	f7ff fd93 	bl	8011a62 <putc_bfd>
		} while (i);
 8011f3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d1ea      	bne.n	8011f1a <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8011f44:	e007      	b.n	8011f56 <f_printf+0x406>
 8011f46:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8011f4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011f4e:	4611      	mov	r1, r2
 8011f50:	4618      	mov	r0, r3
 8011f52:	f7ff fd86 	bl	8011a62 <putc_bfd>
 8011f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011f5a:	1c5a      	adds	r2, r3, #1
 8011f5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011f60:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011f64:	429a      	cmp	r2, r3
 8011f66:	d8ee      	bhi.n	8011f46 <f_printf+0x3f6>
		c = *fmt++;
 8011f68:	e600      	b.n	8011b6c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8011f6a:	bf00      	nop
 8011f6c:	e000      	b.n	8011f70 <f_printf+0x420>
		if (!c) break;
 8011f6e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8011f70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011f74:	4618      	mov	r0, r3
 8011f76:	f7ff fdb1 	bl	8011adc <putc_flush>
 8011f7a:	4603      	mov	r3, r0
}
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	379c      	adds	r7, #156	@ 0x9c
 8011f80:	46bd      	mov	sp, r7
 8011f82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011f86:	b003      	add	sp, #12
 8011f88:	4770      	bx	lr
 8011f8a:	bf00      	nop

08011f8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011f8c:	b480      	push	{r7}
 8011f8e:	b087      	sub	sp, #28
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	60f8      	str	r0, [r7, #12]
 8011f94:	60b9      	str	r1, [r7, #8]
 8011f96:	4613      	mov	r3, r2
 8011f98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011f9a:	2301      	movs	r3, #1
 8011f9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8012020 <FATFS_LinkDriverEx+0x94>)
 8011fa4:	7a5b      	ldrb	r3, [r3, #9]
 8011fa6:	b2db      	uxtb	r3, r3
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d131      	bne.n	8012010 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011fac:	4b1c      	ldr	r3, [pc, #112]	@ (8012020 <FATFS_LinkDriverEx+0x94>)
 8011fae:	7a5b      	ldrb	r3, [r3, #9]
 8011fb0:	b2db      	uxtb	r3, r3
 8011fb2:	461a      	mov	r2, r3
 8011fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8012020 <FATFS_LinkDriverEx+0x94>)
 8011fb6:	2100      	movs	r1, #0
 8011fb8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011fba:	4b19      	ldr	r3, [pc, #100]	@ (8012020 <FATFS_LinkDriverEx+0x94>)
 8011fbc:	7a5b      	ldrb	r3, [r3, #9]
 8011fbe:	b2db      	uxtb	r3, r3
 8011fc0:	4a17      	ldr	r2, [pc, #92]	@ (8012020 <FATFS_LinkDriverEx+0x94>)
 8011fc2:	009b      	lsls	r3, r3, #2
 8011fc4:	4413      	add	r3, r2
 8011fc6:	68fa      	ldr	r2, [r7, #12]
 8011fc8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011fca:	4b15      	ldr	r3, [pc, #84]	@ (8012020 <FATFS_LinkDriverEx+0x94>)
 8011fcc:	7a5b      	ldrb	r3, [r3, #9]
 8011fce:	b2db      	uxtb	r3, r3
 8011fd0:	461a      	mov	r2, r3
 8011fd2:	4b13      	ldr	r3, [pc, #76]	@ (8012020 <FATFS_LinkDriverEx+0x94>)
 8011fd4:	4413      	add	r3, r2
 8011fd6:	79fa      	ldrb	r2, [r7, #7]
 8011fd8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011fda:	4b11      	ldr	r3, [pc, #68]	@ (8012020 <FATFS_LinkDriverEx+0x94>)
 8011fdc:	7a5b      	ldrb	r3, [r3, #9]
 8011fde:	b2db      	uxtb	r3, r3
 8011fe0:	1c5a      	adds	r2, r3, #1
 8011fe2:	b2d1      	uxtb	r1, r2
 8011fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8012020 <FATFS_LinkDriverEx+0x94>)
 8011fe6:	7251      	strb	r1, [r2, #9]
 8011fe8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011fea:	7dbb      	ldrb	r3, [r7, #22]
 8011fec:	3330      	adds	r3, #48	@ 0x30
 8011fee:	b2da      	uxtb	r2, r3
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	3301      	adds	r3, #1
 8011ff8:	223a      	movs	r2, #58	@ 0x3a
 8011ffa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	3302      	adds	r3, #2
 8012000:	222f      	movs	r2, #47	@ 0x2f
 8012002:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012004:	68bb      	ldr	r3, [r7, #8]
 8012006:	3303      	adds	r3, #3
 8012008:	2200      	movs	r2, #0
 801200a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801200c:	2300      	movs	r3, #0
 801200e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012010:	7dfb      	ldrb	r3, [r7, #23]
}
 8012012:	4618      	mov	r0, r3
 8012014:	371c      	adds	r7, #28
 8012016:	46bd      	mov	sp, r7
 8012018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201c:	4770      	bx	lr
 801201e:	bf00      	nop
 8012020:	24000974 	.word	0x24000974

08012024 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b082      	sub	sp, #8
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801202e:	2200      	movs	r2, #0
 8012030:	6839      	ldr	r1, [r7, #0]
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f7ff ffaa 	bl	8011f8c <FATFS_LinkDriverEx>
 8012038:	4603      	mov	r3, r0
}
 801203a:	4618      	mov	r0, r3
 801203c:	3708      	adds	r7, #8
 801203e:	46bd      	mov	sp, r7
 8012040:	bd80      	pop	{r7, pc}

08012042 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8012042:	b580      	push	{r7, lr}
 8012044:	b084      	sub	sp, #16
 8012046:	af00      	add	r7, sp, #0
 8012048:	4603      	mov	r3, r0
 801204a:	6039      	str	r1, [r7, #0]
 801204c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801204e:	2200      	movs	r2, #0
 8012050:	2101      	movs	r1, #1
 8012052:	2001      	movs	r0, #1
 8012054:	f000 f9b9 	bl	80123ca <osSemaphoreNew>
 8012058:	4602      	mov	r2, r0
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	2b00      	cmp	r3, #0
 8012064:	bf14      	ite	ne
 8012066:	2301      	movne	r3, #1
 8012068:	2300      	moveq	r3, #0
 801206a:	b2db      	uxtb	r3, r3
 801206c:	60fb      	str	r3, [r7, #12]

    return ret;
 801206e:	68fb      	ldr	r3, [r7, #12]
}
 8012070:	4618      	mov	r0, r3
 8012072:	3710      	adds	r7, #16
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}

08012078 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f000 fac1 	bl	8012608 <osSemaphoreDelete>
#endif
    return 1;
 8012086:	2301      	movs	r3, #1
}
 8012088:	4618      	mov	r0, r3
 801208a:	3708      	adds	r7, #8
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}

08012090 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b084      	sub	sp, #16
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8012098:	2300      	movs	r3, #0
 801209a:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 801209c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80120a0:	6878      	ldr	r0, [r7, #4]
 80120a2:	f000 fa1b 	bl	80124dc <osSemaphoreAcquire>
 80120a6:	4603      	mov	r3, r0
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d101      	bne.n	80120b0 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80120ac:	2301      	movs	r3, #1
 80120ae:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80120b0:	68fb      	ldr	r3, [r7, #12]
}
 80120b2:	4618      	mov	r0, r3
 80120b4:	3710      	adds	r7, #16
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}

080120ba <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80120ba:	b580      	push	{r7, lr}
 80120bc:	b082      	sub	sp, #8
 80120be:	af00      	add	r7, sp, #0
 80120c0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80120c2:	6878      	ldr	r0, [r7, #4]
 80120c4:	f000 fa5c 	bl	8012580 <osSemaphoreRelease>
#endif
}
 80120c8:	bf00      	nop
 80120ca:	3708      	adds	r7, #8
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}

080120d0 <__NVIC_SetPriority>:
{
 80120d0:	b480      	push	{r7}
 80120d2:	b083      	sub	sp, #12
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	4603      	mov	r3, r0
 80120d8:	6039      	str	r1, [r7, #0]
 80120da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80120dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	db0a      	blt.n	80120fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	b2da      	uxtb	r2, r3
 80120e8:	490c      	ldr	r1, [pc, #48]	@ (801211c <__NVIC_SetPriority+0x4c>)
 80120ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80120ee:	0112      	lsls	r2, r2, #4
 80120f0:	b2d2      	uxtb	r2, r2
 80120f2:	440b      	add	r3, r1
 80120f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80120f8:	e00a      	b.n	8012110 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80120fa:	683b      	ldr	r3, [r7, #0]
 80120fc:	b2da      	uxtb	r2, r3
 80120fe:	4908      	ldr	r1, [pc, #32]	@ (8012120 <__NVIC_SetPriority+0x50>)
 8012100:	88fb      	ldrh	r3, [r7, #6]
 8012102:	f003 030f 	and.w	r3, r3, #15
 8012106:	3b04      	subs	r3, #4
 8012108:	0112      	lsls	r2, r2, #4
 801210a:	b2d2      	uxtb	r2, r2
 801210c:	440b      	add	r3, r1
 801210e:	761a      	strb	r2, [r3, #24]
}
 8012110:	bf00      	nop
 8012112:	370c      	adds	r7, #12
 8012114:	46bd      	mov	sp, r7
 8012116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211a:	4770      	bx	lr
 801211c:	e000e100 	.word	0xe000e100
 8012120:	e000ed00 	.word	0xe000ed00

08012124 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012124:	b580      	push	{r7, lr}
 8012126:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012128:	4b05      	ldr	r3, [pc, #20]	@ (8012140 <SysTick_Handler+0x1c>)
 801212a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801212c:	f002 fde6 	bl	8014cfc <xTaskGetSchedulerState>
 8012130:	4603      	mov	r3, r0
 8012132:	2b01      	cmp	r3, #1
 8012134:	d001      	beq.n	801213a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012136:	f003 ff67 	bl	8016008 <xPortSysTickHandler>
  }
}
 801213a:	bf00      	nop
 801213c:	bd80      	pop	{r7, pc}
 801213e:	bf00      	nop
 8012140:	e000e010 	.word	0xe000e010

08012144 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012144:	b580      	push	{r7, lr}
 8012146:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012148:	2100      	movs	r1, #0
 801214a:	f06f 0004 	mvn.w	r0, #4
 801214e:	f7ff ffbf 	bl	80120d0 <__NVIC_SetPriority>
#endif
}
 8012152:	bf00      	nop
 8012154:	bd80      	pop	{r7, pc}
	...

08012158 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012158:	b480      	push	{r7}
 801215a:	b083      	sub	sp, #12
 801215c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801215e:	f3ef 8305 	mrs	r3, IPSR
 8012162:	603b      	str	r3, [r7, #0]
  return(result);
 8012164:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012166:	2b00      	cmp	r3, #0
 8012168:	d003      	beq.n	8012172 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801216a:	f06f 0305 	mvn.w	r3, #5
 801216e:	607b      	str	r3, [r7, #4]
 8012170:	e00c      	b.n	801218c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012172:	4b0a      	ldr	r3, [pc, #40]	@ (801219c <osKernelInitialize+0x44>)
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d105      	bne.n	8012186 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801217a:	4b08      	ldr	r3, [pc, #32]	@ (801219c <osKernelInitialize+0x44>)
 801217c:	2201      	movs	r2, #1
 801217e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012180:	2300      	movs	r3, #0
 8012182:	607b      	str	r3, [r7, #4]
 8012184:	e002      	b.n	801218c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012186:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801218a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801218c:	687b      	ldr	r3, [r7, #4]
}
 801218e:	4618      	mov	r0, r3
 8012190:	370c      	adds	r7, #12
 8012192:	46bd      	mov	sp, r7
 8012194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012198:	4770      	bx	lr
 801219a:	bf00      	nop
 801219c:	24000980 	.word	0x24000980

080121a0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b082      	sub	sp, #8
 80121a4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80121a6:	f002 fda9 	bl	8014cfc <xTaskGetSchedulerState>
 80121aa:	4603      	mov	r3, r0
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d004      	beq.n	80121ba <osKernelGetState+0x1a>
 80121b0:	2b02      	cmp	r3, #2
 80121b2:	d105      	bne.n	80121c0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80121b4:	2302      	movs	r3, #2
 80121b6:	607b      	str	r3, [r7, #4]
      break;
 80121b8:	e00c      	b.n	80121d4 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80121ba:	2303      	movs	r3, #3
 80121bc:	607b      	str	r3, [r7, #4]
      break;
 80121be:	e009      	b.n	80121d4 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80121c0:	4b07      	ldr	r3, [pc, #28]	@ (80121e0 <osKernelGetState+0x40>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	2b01      	cmp	r3, #1
 80121c6:	d102      	bne.n	80121ce <osKernelGetState+0x2e>
        state = osKernelReady;
 80121c8:	2301      	movs	r3, #1
 80121ca:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80121cc:	e001      	b.n	80121d2 <osKernelGetState+0x32>
        state = osKernelInactive;
 80121ce:	2300      	movs	r3, #0
 80121d0:	607b      	str	r3, [r7, #4]
      break;
 80121d2:	bf00      	nop
  }

  return (state);
 80121d4:	687b      	ldr	r3, [r7, #4]
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3708      	adds	r7, #8
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}
 80121de:	bf00      	nop
 80121e0:	24000980 	.word	0x24000980

080121e4 <osKernelStart>:

osStatus_t osKernelStart (void) {
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b082      	sub	sp, #8
 80121e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80121ea:	f3ef 8305 	mrs	r3, IPSR
 80121ee:	603b      	str	r3, [r7, #0]
  return(result);
 80121f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d003      	beq.n	80121fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80121f6:	f06f 0305 	mvn.w	r3, #5
 80121fa:	607b      	str	r3, [r7, #4]
 80121fc:	e010      	b.n	8012220 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80121fe:	4b0b      	ldr	r3, [pc, #44]	@ (801222c <osKernelStart+0x48>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	2b01      	cmp	r3, #1
 8012204:	d109      	bne.n	801221a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012206:	f7ff ff9d 	bl	8012144 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801220a:	4b08      	ldr	r3, [pc, #32]	@ (801222c <osKernelStart+0x48>)
 801220c:	2202      	movs	r2, #2
 801220e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012210:	f002 f814 	bl	801423c <vTaskStartScheduler>
      stat = osOK;
 8012214:	2300      	movs	r3, #0
 8012216:	607b      	str	r3, [r7, #4]
 8012218:	e002      	b.n	8012220 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801221a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801221e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012220:	687b      	ldr	r3, [r7, #4]
}
 8012222:	4618      	mov	r0, r3
 8012224:	3708      	adds	r7, #8
 8012226:	46bd      	mov	sp, r7
 8012228:	bd80      	pop	{r7, pc}
 801222a:	bf00      	nop
 801222c:	24000980 	.word	0x24000980

08012230 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8012230:	b580      	push	{r7, lr}
 8012232:	b082      	sub	sp, #8
 8012234:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012236:	f3ef 8305 	mrs	r3, IPSR
 801223a:	603b      	str	r3, [r7, #0]
  return(result);
 801223c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 801223e:	2b00      	cmp	r3, #0
 8012240:	d003      	beq.n	801224a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8012242:	f002 f927 	bl	8014494 <xTaskGetTickCountFromISR>
 8012246:	6078      	str	r0, [r7, #4]
 8012248:	e002      	b.n	8012250 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 801224a:	f002 f913 	bl	8014474 <xTaskGetTickCount>
 801224e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8012250:	687b      	ldr	r3, [r7, #4]
}
 8012252:	4618      	mov	r0, r3
 8012254:	3708      	adds	r7, #8
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}

0801225a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801225a:	b580      	push	{r7, lr}
 801225c:	b08e      	sub	sp, #56	@ 0x38
 801225e:	af04      	add	r7, sp, #16
 8012260:	60f8      	str	r0, [r7, #12]
 8012262:	60b9      	str	r1, [r7, #8]
 8012264:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012266:	2300      	movs	r3, #0
 8012268:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801226a:	f3ef 8305 	mrs	r3, IPSR
 801226e:	617b      	str	r3, [r7, #20]
  return(result);
 8012270:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012272:	2b00      	cmp	r3, #0
 8012274:	d17e      	bne.n	8012374 <osThreadNew+0x11a>
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d07b      	beq.n	8012374 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801227c:	2380      	movs	r3, #128	@ 0x80
 801227e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012280:	2318      	movs	r3, #24
 8012282:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012284:	2300      	movs	r3, #0
 8012286:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8012288:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801228c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d045      	beq.n	8012320 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d002      	beq.n	80122a2 <osThreadNew+0x48>
        name = attr->name;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	699b      	ldr	r3, [r3, #24]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d002      	beq.n	80122b0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	699b      	ldr	r3, [r3, #24]
 80122ae:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80122b0:	69fb      	ldr	r3, [r7, #28]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d008      	beq.n	80122c8 <osThreadNew+0x6e>
 80122b6:	69fb      	ldr	r3, [r7, #28]
 80122b8:	2b38      	cmp	r3, #56	@ 0x38
 80122ba:	d805      	bhi.n	80122c8 <osThreadNew+0x6e>
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	f003 0301 	and.w	r3, r3, #1
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d001      	beq.n	80122cc <osThreadNew+0x72>
        return (NULL);
 80122c8:	2300      	movs	r3, #0
 80122ca:	e054      	b.n	8012376 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	695b      	ldr	r3, [r3, #20]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d003      	beq.n	80122dc <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	695b      	ldr	r3, [r3, #20]
 80122d8:	089b      	lsrs	r3, r3, #2
 80122da:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	689b      	ldr	r3, [r3, #8]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d00e      	beq.n	8012302 <osThreadNew+0xa8>
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	68db      	ldr	r3, [r3, #12]
 80122e8:	2ba7      	cmp	r3, #167	@ 0xa7
 80122ea:	d90a      	bls.n	8012302 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d006      	beq.n	8012302 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	695b      	ldr	r3, [r3, #20]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d002      	beq.n	8012302 <osThreadNew+0xa8>
        mem = 1;
 80122fc:	2301      	movs	r3, #1
 80122fe:	61bb      	str	r3, [r7, #24]
 8012300:	e010      	b.n	8012324 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	689b      	ldr	r3, [r3, #8]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d10c      	bne.n	8012324 <osThreadNew+0xca>
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	68db      	ldr	r3, [r3, #12]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d108      	bne.n	8012324 <osThreadNew+0xca>
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	691b      	ldr	r3, [r3, #16]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d104      	bne.n	8012324 <osThreadNew+0xca>
          mem = 0;
 801231a:	2300      	movs	r3, #0
 801231c:	61bb      	str	r3, [r7, #24]
 801231e:	e001      	b.n	8012324 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012320:	2300      	movs	r3, #0
 8012322:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012324:	69bb      	ldr	r3, [r7, #24]
 8012326:	2b01      	cmp	r3, #1
 8012328:	d110      	bne.n	801234c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801232e:	687a      	ldr	r2, [r7, #4]
 8012330:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012332:	9202      	str	r2, [sp, #8]
 8012334:	9301      	str	r3, [sp, #4]
 8012336:	69fb      	ldr	r3, [r7, #28]
 8012338:	9300      	str	r3, [sp, #0]
 801233a:	68bb      	ldr	r3, [r7, #8]
 801233c:	6a3a      	ldr	r2, [r7, #32]
 801233e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012340:	68f8      	ldr	r0, [r7, #12]
 8012342:	f001 fd87 	bl	8013e54 <xTaskCreateStatic>
 8012346:	4603      	mov	r3, r0
 8012348:	613b      	str	r3, [r7, #16]
 801234a:	e013      	b.n	8012374 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801234c:	69bb      	ldr	r3, [r7, #24]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d110      	bne.n	8012374 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012352:	6a3b      	ldr	r3, [r7, #32]
 8012354:	b29a      	uxth	r2, r3
 8012356:	f107 0310 	add.w	r3, r7, #16
 801235a:	9301      	str	r3, [sp, #4]
 801235c:	69fb      	ldr	r3, [r7, #28]
 801235e:	9300      	str	r3, [sp, #0]
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012364:	68f8      	ldr	r0, [r7, #12]
 8012366:	f001 fdd5 	bl	8013f14 <xTaskCreate>
 801236a:	4603      	mov	r3, r0
 801236c:	2b01      	cmp	r3, #1
 801236e:	d001      	beq.n	8012374 <osThreadNew+0x11a>
            hTask = NULL;
 8012370:	2300      	movs	r3, #0
 8012372:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012374:	693b      	ldr	r3, [r7, #16]
}
 8012376:	4618      	mov	r0, r3
 8012378:	3728      	adds	r7, #40	@ 0x28
 801237a:	46bd      	mov	sp, r7
 801237c:	bd80      	pop	{r7, pc}

0801237e <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 801237e:	b580      	push	{r7, lr}
 8012380:	b082      	sub	sp, #8
 8012382:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8012384:	f002 fcaa 	bl	8014cdc <xTaskGetCurrentTaskHandle>
 8012388:	6078      	str	r0, [r7, #4]

  return (id);
 801238a:	687b      	ldr	r3, [r7, #4]
}
 801238c:	4618      	mov	r0, r3
 801238e:	3708      	adds	r7, #8
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}

08012394 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012394:	b580      	push	{r7, lr}
 8012396:	b084      	sub	sp, #16
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801239c:	f3ef 8305 	mrs	r3, IPSR
 80123a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80123a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d003      	beq.n	80123b0 <osDelay+0x1c>
    stat = osErrorISR;
 80123a8:	f06f 0305 	mvn.w	r3, #5
 80123ac:	60fb      	str	r3, [r7, #12]
 80123ae:	e007      	b.n	80123c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80123b0:	2300      	movs	r3, #0
 80123b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d002      	beq.n	80123c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80123ba:	6878      	ldr	r0, [r7, #4]
 80123bc:	f001 ff08 	bl	80141d0 <vTaskDelay>
    }
  }

  return (stat);
 80123c0:	68fb      	ldr	r3, [r7, #12]
}
 80123c2:	4618      	mov	r0, r3
 80123c4:	3710      	adds	r7, #16
 80123c6:	46bd      	mov	sp, r7
 80123c8:	bd80      	pop	{r7, pc}

080123ca <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80123ca:	b580      	push	{r7, lr}
 80123cc:	b08a      	sub	sp, #40	@ 0x28
 80123ce:	af02      	add	r7, sp, #8
 80123d0:	60f8      	str	r0, [r7, #12]
 80123d2:	60b9      	str	r1, [r7, #8]
 80123d4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80123d6:	2300      	movs	r3, #0
 80123d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80123da:	f3ef 8305 	mrs	r3, IPSR
 80123de:	613b      	str	r3, [r7, #16]
  return(result);
 80123e0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d175      	bne.n	80124d2 <osSemaphoreNew+0x108>
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d072      	beq.n	80124d2 <osSemaphoreNew+0x108>
 80123ec:	68ba      	ldr	r2, [r7, #8]
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	429a      	cmp	r2, r3
 80123f2:	d86e      	bhi.n	80124d2 <osSemaphoreNew+0x108>
    mem = -1;
 80123f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80123f8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d015      	beq.n	801242c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	689b      	ldr	r3, [r3, #8]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d006      	beq.n	8012416 <osSemaphoreNew+0x4c>
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	68db      	ldr	r3, [r3, #12]
 801240c:	2b4f      	cmp	r3, #79	@ 0x4f
 801240e:	d902      	bls.n	8012416 <osSemaphoreNew+0x4c>
        mem = 1;
 8012410:	2301      	movs	r3, #1
 8012412:	61bb      	str	r3, [r7, #24]
 8012414:	e00c      	b.n	8012430 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	689b      	ldr	r3, [r3, #8]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d108      	bne.n	8012430 <osSemaphoreNew+0x66>
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	68db      	ldr	r3, [r3, #12]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d104      	bne.n	8012430 <osSemaphoreNew+0x66>
          mem = 0;
 8012426:	2300      	movs	r3, #0
 8012428:	61bb      	str	r3, [r7, #24]
 801242a:	e001      	b.n	8012430 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801242c:	2300      	movs	r3, #0
 801242e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8012430:	69bb      	ldr	r3, [r7, #24]
 8012432:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012436:	d04c      	beq.n	80124d2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	2b01      	cmp	r3, #1
 801243c:	d128      	bne.n	8012490 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801243e:	69bb      	ldr	r3, [r7, #24]
 8012440:	2b01      	cmp	r3, #1
 8012442:	d10a      	bne.n	801245a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	689b      	ldr	r3, [r3, #8]
 8012448:	2203      	movs	r2, #3
 801244a:	9200      	str	r2, [sp, #0]
 801244c:	2200      	movs	r2, #0
 801244e:	2100      	movs	r1, #0
 8012450:	2001      	movs	r0, #1
 8012452:	f000 fd3d 	bl	8012ed0 <xQueueGenericCreateStatic>
 8012456:	61f8      	str	r0, [r7, #28]
 8012458:	e005      	b.n	8012466 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 801245a:	2203      	movs	r2, #3
 801245c:	2100      	movs	r1, #0
 801245e:	2001      	movs	r0, #1
 8012460:	f000 fdb3 	bl	8012fca <xQueueGenericCreate>
 8012464:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8012466:	69fb      	ldr	r3, [r7, #28]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d022      	beq.n	80124b2 <osSemaphoreNew+0xe8>
 801246c:	68bb      	ldr	r3, [r7, #8]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d01f      	beq.n	80124b2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012472:	2300      	movs	r3, #0
 8012474:	2200      	movs	r2, #0
 8012476:	2100      	movs	r1, #0
 8012478:	69f8      	ldr	r0, [r7, #28]
 801247a:	f000 fe73 	bl	8013164 <xQueueGenericSend>
 801247e:	4603      	mov	r3, r0
 8012480:	2b01      	cmp	r3, #1
 8012482:	d016      	beq.n	80124b2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8012484:	69f8      	ldr	r0, [r7, #28]
 8012486:	f001 fb11 	bl	8013aac <vQueueDelete>
            hSemaphore = NULL;
 801248a:	2300      	movs	r3, #0
 801248c:	61fb      	str	r3, [r7, #28]
 801248e:	e010      	b.n	80124b2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8012490:	69bb      	ldr	r3, [r7, #24]
 8012492:	2b01      	cmp	r3, #1
 8012494:	d108      	bne.n	80124a8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	689b      	ldr	r3, [r3, #8]
 801249a:	461a      	mov	r2, r3
 801249c:	68b9      	ldr	r1, [r7, #8]
 801249e:	68f8      	ldr	r0, [r7, #12]
 80124a0:	f000 fdf1 	bl	8013086 <xQueueCreateCountingSemaphoreStatic>
 80124a4:	61f8      	str	r0, [r7, #28]
 80124a6:	e004      	b.n	80124b2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80124a8:	68b9      	ldr	r1, [r7, #8]
 80124aa:	68f8      	ldr	r0, [r7, #12]
 80124ac:	f000 fe24 	bl	80130f8 <xQueueCreateCountingSemaphore>
 80124b0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80124b2:	69fb      	ldr	r3, [r7, #28]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d00c      	beq.n	80124d2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d003      	beq.n	80124c6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	617b      	str	r3, [r7, #20]
 80124c4:	e001      	b.n	80124ca <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80124c6:	2300      	movs	r3, #0
 80124c8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80124ca:	6979      	ldr	r1, [r7, #20]
 80124cc:	69f8      	ldr	r0, [r7, #28]
 80124ce:	f001 fc39 	bl	8013d44 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80124d2:	69fb      	ldr	r3, [r7, #28]
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	3720      	adds	r7, #32
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80124dc:	b580      	push	{r7, lr}
 80124de:	b086      	sub	sp, #24
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80124ea:	2300      	movs	r3, #0
 80124ec:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80124ee:	693b      	ldr	r3, [r7, #16]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d103      	bne.n	80124fc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80124f4:	f06f 0303 	mvn.w	r3, #3
 80124f8:	617b      	str	r3, [r7, #20]
 80124fa:	e039      	b.n	8012570 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80124fc:	f3ef 8305 	mrs	r3, IPSR
 8012500:	60fb      	str	r3, [r7, #12]
  return(result);
 8012502:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012504:	2b00      	cmp	r3, #0
 8012506:	d022      	beq.n	801254e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d003      	beq.n	8012516 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801250e:	f06f 0303 	mvn.w	r3, #3
 8012512:	617b      	str	r3, [r7, #20]
 8012514:	e02c      	b.n	8012570 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8012516:	2300      	movs	r3, #0
 8012518:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801251a:	f107 0308 	add.w	r3, r7, #8
 801251e:	461a      	mov	r2, r3
 8012520:	2100      	movs	r1, #0
 8012522:	6938      	ldr	r0, [r7, #16]
 8012524:	f001 fa40 	bl	80139a8 <xQueueReceiveFromISR>
 8012528:	4603      	mov	r3, r0
 801252a:	2b01      	cmp	r3, #1
 801252c:	d003      	beq.n	8012536 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801252e:	f06f 0302 	mvn.w	r3, #2
 8012532:	617b      	str	r3, [r7, #20]
 8012534:	e01c      	b.n	8012570 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8012536:	68bb      	ldr	r3, [r7, #8]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d019      	beq.n	8012570 <osSemaphoreAcquire+0x94>
 801253c:	4b0f      	ldr	r3, [pc, #60]	@ (801257c <osSemaphoreAcquire+0xa0>)
 801253e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012542:	601a      	str	r2, [r3, #0]
 8012544:	f3bf 8f4f 	dsb	sy
 8012548:	f3bf 8f6f 	isb	sy
 801254c:	e010      	b.n	8012570 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801254e:	6839      	ldr	r1, [r7, #0]
 8012550:	6938      	ldr	r0, [r7, #16]
 8012552:	f001 f919 	bl	8013788 <xQueueSemaphoreTake>
 8012556:	4603      	mov	r3, r0
 8012558:	2b01      	cmp	r3, #1
 801255a:	d009      	beq.n	8012570 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d003      	beq.n	801256a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8012562:	f06f 0301 	mvn.w	r3, #1
 8012566:	617b      	str	r3, [r7, #20]
 8012568:	e002      	b.n	8012570 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801256a:	f06f 0302 	mvn.w	r3, #2
 801256e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8012570:	697b      	ldr	r3, [r7, #20]
}
 8012572:	4618      	mov	r0, r3
 8012574:	3718      	adds	r7, #24
 8012576:	46bd      	mov	sp, r7
 8012578:	bd80      	pop	{r7, pc}
 801257a:	bf00      	nop
 801257c:	e000ed04 	.word	0xe000ed04

08012580 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8012580:	b580      	push	{r7, lr}
 8012582:	b086      	sub	sp, #24
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801258c:	2300      	movs	r3, #0
 801258e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d103      	bne.n	801259e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8012596:	f06f 0303 	mvn.w	r3, #3
 801259a:	617b      	str	r3, [r7, #20]
 801259c:	e02c      	b.n	80125f8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801259e:	f3ef 8305 	mrs	r3, IPSR
 80125a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80125a4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d01a      	beq.n	80125e0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80125aa:	2300      	movs	r3, #0
 80125ac:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80125ae:	f107 0308 	add.w	r3, r7, #8
 80125b2:	4619      	mov	r1, r3
 80125b4:	6938      	ldr	r0, [r7, #16]
 80125b6:	f000 ff75 	bl	80134a4 <xQueueGiveFromISR>
 80125ba:	4603      	mov	r3, r0
 80125bc:	2b01      	cmp	r3, #1
 80125be:	d003      	beq.n	80125c8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80125c0:	f06f 0302 	mvn.w	r3, #2
 80125c4:	617b      	str	r3, [r7, #20]
 80125c6:	e017      	b.n	80125f8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d014      	beq.n	80125f8 <osSemaphoreRelease+0x78>
 80125ce:	4b0d      	ldr	r3, [pc, #52]	@ (8012604 <osSemaphoreRelease+0x84>)
 80125d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80125d4:	601a      	str	r2, [r3, #0]
 80125d6:	f3bf 8f4f 	dsb	sy
 80125da:	f3bf 8f6f 	isb	sy
 80125de:	e00b      	b.n	80125f8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80125e0:	2300      	movs	r3, #0
 80125e2:	2200      	movs	r2, #0
 80125e4:	2100      	movs	r1, #0
 80125e6:	6938      	ldr	r0, [r7, #16]
 80125e8:	f000 fdbc 	bl	8013164 <xQueueGenericSend>
 80125ec:	4603      	mov	r3, r0
 80125ee:	2b01      	cmp	r3, #1
 80125f0:	d002      	beq.n	80125f8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80125f2:	f06f 0302 	mvn.w	r3, #2
 80125f6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80125f8:	697b      	ldr	r3, [r7, #20]
}
 80125fa:	4618      	mov	r0, r3
 80125fc:	3718      	adds	r7, #24
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd80      	pop	{r7, pc}
 8012602:	bf00      	nop
 8012604:	e000ed04 	.word	0xe000ed04

08012608 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8012608:	b580      	push	{r7, lr}
 801260a:	b086      	sub	sp, #24
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012614:	f3ef 8305 	mrs	r3, IPSR
 8012618:	60fb      	str	r3, [r7, #12]
  return(result);
 801261a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 801261c:	2b00      	cmp	r3, #0
 801261e:	d003      	beq.n	8012628 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8012620:	f06f 0305 	mvn.w	r3, #5
 8012624:	617b      	str	r3, [r7, #20]
 8012626:	e00e      	b.n	8012646 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8012628:	693b      	ldr	r3, [r7, #16]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d103      	bne.n	8012636 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 801262e:	f06f 0303 	mvn.w	r3, #3
 8012632:	617b      	str	r3, [r7, #20]
 8012634:	e007      	b.n	8012646 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8012636:	6938      	ldr	r0, [r7, #16]
 8012638:	f001 fbae 	bl	8013d98 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 801263c:	2300      	movs	r3, #0
 801263e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8012640:	6938      	ldr	r0, [r7, #16]
 8012642:	f001 fa33 	bl	8013aac <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8012646:	697b      	ldr	r3, [r7, #20]
}
 8012648:	4618      	mov	r0, r3
 801264a:	3718      	adds	r7, #24
 801264c:	46bd      	mov	sp, r7
 801264e:	bd80      	pop	{r7, pc}

08012650 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012650:	b580      	push	{r7, lr}
 8012652:	b08a      	sub	sp, #40	@ 0x28
 8012654:	af02      	add	r7, sp, #8
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	60b9      	str	r1, [r7, #8]
 801265a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801265c:	2300      	movs	r3, #0
 801265e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012660:	f3ef 8305 	mrs	r3, IPSR
 8012664:	613b      	str	r3, [r7, #16]
  return(result);
 8012666:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012668:	2b00      	cmp	r3, #0
 801266a:	d15f      	bne.n	801272c <osMessageQueueNew+0xdc>
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d05c      	beq.n	801272c <osMessageQueueNew+0xdc>
 8012672:	68bb      	ldr	r3, [r7, #8]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d059      	beq.n	801272c <osMessageQueueNew+0xdc>
    mem = -1;
 8012678:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801267c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d029      	beq.n	80126d8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	689b      	ldr	r3, [r3, #8]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d012      	beq.n	80126b2 <osMessageQueueNew+0x62>
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	68db      	ldr	r3, [r3, #12]
 8012690:	2b4f      	cmp	r3, #79	@ 0x4f
 8012692:	d90e      	bls.n	80126b2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012698:	2b00      	cmp	r3, #0
 801269a:	d00a      	beq.n	80126b2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	695a      	ldr	r2, [r3, #20]
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	68b9      	ldr	r1, [r7, #8]
 80126a4:	fb01 f303 	mul.w	r3, r1, r3
 80126a8:	429a      	cmp	r2, r3
 80126aa:	d302      	bcc.n	80126b2 <osMessageQueueNew+0x62>
        mem = 1;
 80126ac:	2301      	movs	r3, #1
 80126ae:	61bb      	str	r3, [r7, #24]
 80126b0:	e014      	b.n	80126dc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	689b      	ldr	r3, [r3, #8]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d110      	bne.n	80126dc <osMessageQueueNew+0x8c>
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	68db      	ldr	r3, [r3, #12]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d10c      	bne.n	80126dc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d108      	bne.n	80126dc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	695b      	ldr	r3, [r3, #20]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d104      	bne.n	80126dc <osMessageQueueNew+0x8c>
          mem = 0;
 80126d2:	2300      	movs	r3, #0
 80126d4:	61bb      	str	r3, [r7, #24]
 80126d6:	e001      	b.n	80126dc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80126d8:	2300      	movs	r3, #0
 80126da:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80126dc:	69bb      	ldr	r3, [r7, #24]
 80126de:	2b01      	cmp	r3, #1
 80126e0:	d10b      	bne.n	80126fa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	691a      	ldr	r2, [r3, #16]
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	689b      	ldr	r3, [r3, #8]
 80126ea:	2100      	movs	r1, #0
 80126ec:	9100      	str	r1, [sp, #0]
 80126ee:	68b9      	ldr	r1, [r7, #8]
 80126f0:	68f8      	ldr	r0, [r7, #12]
 80126f2:	f000 fbed 	bl	8012ed0 <xQueueGenericCreateStatic>
 80126f6:	61f8      	str	r0, [r7, #28]
 80126f8:	e008      	b.n	801270c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80126fa:	69bb      	ldr	r3, [r7, #24]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d105      	bne.n	801270c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8012700:	2200      	movs	r2, #0
 8012702:	68b9      	ldr	r1, [r7, #8]
 8012704:	68f8      	ldr	r0, [r7, #12]
 8012706:	f000 fc60 	bl	8012fca <xQueueGenericCreate>
 801270a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801270c:	69fb      	ldr	r3, [r7, #28]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d00c      	beq.n	801272c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d003      	beq.n	8012720 <osMessageQueueNew+0xd0>
        name = attr->name;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	617b      	str	r3, [r7, #20]
 801271e:	e001      	b.n	8012724 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8012720:	2300      	movs	r3, #0
 8012722:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012724:	6979      	ldr	r1, [r7, #20]
 8012726:	69f8      	ldr	r0, [r7, #28]
 8012728:	f001 fb0c 	bl	8013d44 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801272c:	69fb      	ldr	r3, [r7, #28]
}
 801272e:	4618      	mov	r0, r3
 8012730:	3720      	adds	r7, #32
 8012732:	46bd      	mov	sp, r7
 8012734:	bd80      	pop	{r7, pc}
	...

08012738 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012738:	b580      	push	{r7, lr}
 801273a:	b088      	sub	sp, #32
 801273c:	af00      	add	r7, sp, #0
 801273e:	60f8      	str	r0, [r7, #12]
 8012740:	60b9      	str	r1, [r7, #8]
 8012742:	603b      	str	r3, [r7, #0]
 8012744:	4613      	mov	r3, r2
 8012746:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801274c:	2300      	movs	r3, #0
 801274e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012750:	f3ef 8305 	mrs	r3, IPSR
 8012754:	617b      	str	r3, [r7, #20]
  return(result);
 8012756:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012758:	2b00      	cmp	r3, #0
 801275a:	d028      	beq.n	80127ae <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801275c:	69bb      	ldr	r3, [r7, #24]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d005      	beq.n	801276e <osMessageQueuePut+0x36>
 8012762:	68bb      	ldr	r3, [r7, #8]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d002      	beq.n	801276e <osMessageQueuePut+0x36>
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d003      	beq.n	8012776 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801276e:	f06f 0303 	mvn.w	r3, #3
 8012772:	61fb      	str	r3, [r7, #28]
 8012774:	e038      	b.n	80127e8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012776:	2300      	movs	r3, #0
 8012778:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801277a:	f107 0210 	add.w	r2, r7, #16
 801277e:	2300      	movs	r3, #0
 8012780:	68b9      	ldr	r1, [r7, #8]
 8012782:	69b8      	ldr	r0, [r7, #24]
 8012784:	f000 fdf0 	bl	8013368 <xQueueGenericSendFromISR>
 8012788:	4603      	mov	r3, r0
 801278a:	2b01      	cmp	r3, #1
 801278c:	d003      	beq.n	8012796 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801278e:	f06f 0302 	mvn.w	r3, #2
 8012792:	61fb      	str	r3, [r7, #28]
 8012794:	e028      	b.n	80127e8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012796:	693b      	ldr	r3, [r7, #16]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d025      	beq.n	80127e8 <osMessageQueuePut+0xb0>
 801279c:	4b15      	ldr	r3, [pc, #84]	@ (80127f4 <osMessageQueuePut+0xbc>)
 801279e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80127a2:	601a      	str	r2, [r3, #0]
 80127a4:	f3bf 8f4f 	dsb	sy
 80127a8:	f3bf 8f6f 	isb	sy
 80127ac:	e01c      	b.n	80127e8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80127ae:	69bb      	ldr	r3, [r7, #24]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d002      	beq.n	80127ba <osMessageQueuePut+0x82>
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d103      	bne.n	80127c2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80127ba:	f06f 0303 	mvn.w	r3, #3
 80127be:	61fb      	str	r3, [r7, #28]
 80127c0:	e012      	b.n	80127e8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80127c2:	2300      	movs	r3, #0
 80127c4:	683a      	ldr	r2, [r7, #0]
 80127c6:	68b9      	ldr	r1, [r7, #8]
 80127c8:	69b8      	ldr	r0, [r7, #24]
 80127ca:	f000 fccb 	bl	8013164 <xQueueGenericSend>
 80127ce:	4603      	mov	r3, r0
 80127d0:	2b01      	cmp	r3, #1
 80127d2:	d009      	beq.n	80127e8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80127d4:	683b      	ldr	r3, [r7, #0]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d003      	beq.n	80127e2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80127da:	f06f 0301 	mvn.w	r3, #1
 80127de:	61fb      	str	r3, [r7, #28]
 80127e0:	e002      	b.n	80127e8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80127e2:	f06f 0302 	mvn.w	r3, #2
 80127e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80127e8:	69fb      	ldr	r3, [r7, #28]
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3720      	adds	r7, #32
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}
 80127f2:	bf00      	nop
 80127f4:	e000ed04 	.word	0xe000ed04

080127f8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b088      	sub	sp, #32
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	60f8      	str	r0, [r7, #12]
 8012800:	60b9      	str	r1, [r7, #8]
 8012802:	607a      	str	r2, [r7, #4]
 8012804:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801280a:	2300      	movs	r3, #0
 801280c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801280e:	f3ef 8305 	mrs	r3, IPSR
 8012812:	617b      	str	r3, [r7, #20]
  return(result);
 8012814:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012816:	2b00      	cmp	r3, #0
 8012818:	d028      	beq.n	801286c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801281a:	69bb      	ldr	r3, [r7, #24]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d005      	beq.n	801282c <osMessageQueueGet+0x34>
 8012820:	68bb      	ldr	r3, [r7, #8]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d002      	beq.n	801282c <osMessageQueueGet+0x34>
 8012826:	683b      	ldr	r3, [r7, #0]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d003      	beq.n	8012834 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 801282c:	f06f 0303 	mvn.w	r3, #3
 8012830:	61fb      	str	r3, [r7, #28]
 8012832:	e037      	b.n	80128a4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8012834:	2300      	movs	r3, #0
 8012836:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012838:	f107 0310 	add.w	r3, r7, #16
 801283c:	461a      	mov	r2, r3
 801283e:	68b9      	ldr	r1, [r7, #8]
 8012840:	69b8      	ldr	r0, [r7, #24]
 8012842:	f001 f8b1 	bl	80139a8 <xQueueReceiveFromISR>
 8012846:	4603      	mov	r3, r0
 8012848:	2b01      	cmp	r3, #1
 801284a:	d003      	beq.n	8012854 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 801284c:	f06f 0302 	mvn.w	r3, #2
 8012850:	61fb      	str	r3, [r7, #28]
 8012852:	e027      	b.n	80128a4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8012854:	693b      	ldr	r3, [r7, #16]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d024      	beq.n	80128a4 <osMessageQueueGet+0xac>
 801285a:	4b15      	ldr	r3, [pc, #84]	@ (80128b0 <osMessageQueueGet+0xb8>)
 801285c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012860:	601a      	str	r2, [r3, #0]
 8012862:	f3bf 8f4f 	dsb	sy
 8012866:	f3bf 8f6f 	isb	sy
 801286a:	e01b      	b.n	80128a4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801286c:	69bb      	ldr	r3, [r7, #24]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d002      	beq.n	8012878 <osMessageQueueGet+0x80>
 8012872:	68bb      	ldr	r3, [r7, #8]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d103      	bne.n	8012880 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012878:	f06f 0303 	mvn.w	r3, #3
 801287c:	61fb      	str	r3, [r7, #28]
 801287e:	e011      	b.n	80128a4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012880:	683a      	ldr	r2, [r7, #0]
 8012882:	68b9      	ldr	r1, [r7, #8]
 8012884:	69b8      	ldr	r0, [r7, #24]
 8012886:	f000 fe9d 	bl	80135c4 <xQueueReceive>
 801288a:	4603      	mov	r3, r0
 801288c:	2b01      	cmp	r3, #1
 801288e:	d009      	beq.n	80128a4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8012890:	683b      	ldr	r3, [r7, #0]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d003      	beq.n	801289e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8012896:	f06f 0301 	mvn.w	r3, #1
 801289a:	61fb      	str	r3, [r7, #28]
 801289c:	e002      	b.n	80128a4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801289e:	f06f 0302 	mvn.w	r3, #2
 80128a2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80128a4:	69fb      	ldr	r3, [r7, #28]
}
 80128a6:	4618      	mov	r0, r3
 80128a8:	3720      	adds	r7, #32
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bd80      	pop	{r7, pc}
 80128ae:	bf00      	nop
 80128b0:	e000ed04 	.word	0xe000ed04

080128b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80128b4:	b480      	push	{r7}
 80128b6:	b085      	sub	sp, #20
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	60f8      	str	r0, [r7, #12]
 80128bc:	60b9      	str	r1, [r7, #8]
 80128be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	4a07      	ldr	r2, [pc, #28]	@ (80128e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80128c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80128c6:	68bb      	ldr	r3, [r7, #8]
 80128c8:	4a06      	ldr	r2, [pc, #24]	@ (80128e4 <vApplicationGetIdleTaskMemory+0x30>)
 80128ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2280      	movs	r2, #128	@ 0x80
 80128d0:	601a      	str	r2, [r3, #0]
}
 80128d2:	bf00      	nop
 80128d4:	3714      	adds	r7, #20
 80128d6:	46bd      	mov	sp, r7
 80128d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128dc:	4770      	bx	lr
 80128de:	bf00      	nop
 80128e0:	24000984 	.word	0x24000984
 80128e4:	24000a2c 	.word	0x24000a2c

080128e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80128e8:	b480      	push	{r7}
 80128ea:	b085      	sub	sp, #20
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	60f8      	str	r0, [r7, #12]
 80128f0:	60b9      	str	r1, [r7, #8]
 80128f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	4a07      	ldr	r2, [pc, #28]	@ (8012914 <vApplicationGetTimerTaskMemory+0x2c>)
 80128f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80128fa:	68bb      	ldr	r3, [r7, #8]
 80128fc:	4a06      	ldr	r2, [pc, #24]	@ (8012918 <vApplicationGetTimerTaskMemory+0x30>)
 80128fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012906:	601a      	str	r2, [r3, #0]
}
 8012908:	bf00      	nop
 801290a:	3714      	adds	r7, #20
 801290c:	46bd      	mov	sp, r7
 801290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012912:	4770      	bx	lr
 8012914:	24000c2c 	.word	0x24000c2c
 8012918:	24000cd4 	.word	0x24000cd4

0801291c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801291c:	b580      	push	{r7, lr}
 801291e:	b082      	sub	sp, #8
 8012920:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8012922:	2020      	movs	r0, #32
 8012924:	f003 fc02 	bl	801612c <pvPortMalloc>
 8012928:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d00a      	beq.n	8012946 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2200      	movs	r2, #0
 8012934:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	3304      	adds	r3, #4
 801293a:	4618      	mov	r0, r3
 801293c:	f000 f9aa 	bl	8012c94 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2200      	movs	r2, #0
 8012944:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8012946:	687b      	ldr	r3, [r7, #4]
	}
 8012948:	4618      	mov	r0, r3
 801294a:	3708      	adds	r7, #8
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}

08012950 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b090      	sub	sp, #64	@ 0x40
 8012954:	af00      	add	r7, sp, #0
 8012956:	60f8      	str	r0, [r7, #12]
 8012958:	60b9      	str	r1, [r7, #8]
 801295a:	607a      	str	r2, [r7, #4]
 801295c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8012962:	2300      	movs	r3, #0
 8012964:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8012966:	2300      	movs	r3, #0
 8012968:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d10b      	bne.n	8012988 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012974:	f383 8811 	msr	BASEPRI, r3
 8012978:	f3bf 8f6f 	isb	sy
 801297c:	f3bf 8f4f 	dsb	sy
 8012980:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012982:	bf00      	nop
 8012984:	bf00      	nop
 8012986:	e7fd      	b.n	8012984 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012988:	68bb      	ldr	r3, [r7, #8]
 801298a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801298e:	d30b      	bcc.n	80129a8 <xEventGroupWaitBits+0x58>
	__asm volatile
 8012990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012994:	f383 8811 	msr	BASEPRI, r3
 8012998:	f3bf 8f6f 	isb	sy
 801299c:	f3bf 8f4f 	dsb	sy
 80129a0:	61fb      	str	r3, [r7, #28]
}
 80129a2:	bf00      	nop
 80129a4:	bf00      	nop
 80129a6:	e7fd      	b.n	80129a4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80129a8:	68bb      	ldr	r3, [r7, #8]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d10b      	bne.n	80129c6 <xEventGroupWaitBits+0x76>
	__asm volatile
 80129ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129b2:	f383 8811 	msr	BASEPRI, r3
 80129b6:	f3bf 8f6f 	isb	sy
 80129ba:	f3bf 8f4f 	dsb	sy
 80129be:	61bb      	str	r3, [r7, #24]
}
 80129c0:	bf00      	nop
 80129c2:	bf00      	nop
 80129c4:	e7fd      	b.n	80129c2 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80129c6:	f002 f999 	bl	8014cfc <xTaskGetSchedulerState>
 80129ca:	4603      	mov	r3, r0
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d102      	bne.n	80129d6 <xEventGroupWaitBits+0x86>
 80129d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d101      	bne.n	80129da <xEventGroupWaitBits+0x8a>
 80129d6:	2301      	movs	r3, #1
 80129d8:	e000      	b.n	80129dc <xEventGroupWaitBits+0x8c>
 80129da:	2300      	movs	r3, #0
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d10b      	bne.n	80129f8 <xEventGroupWaitBits+0xa8>
	__asm volatile
 80129e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129e4:	f383 8811 	msr	BASEPRI, r3
 80129e8:	f3bf 8f6f 	isb	sy
 80129ec:	f3bf 8f4f 	dsb	sy
 80129f0:	617b      	str	r3, [r7, #20]
}
 80129f2:	bf00      	nop
 80129f4:	bf00      	nop
 80129f6:	e7fd      	b.n	80129f4 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 80129f8:	f001 fc90 	bl	801431c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80129fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8012a02:	683a      	ldr	r2, [r7, #0]
 8012a04:	68b9      	ldr	r1, [r7, #8]
 8012a06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012a08:	f000 f90d 	bl	8012c26 <prvTestWaitCondition>
 8012a0c:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8012a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d00e      	beq.n	8012a32 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8012a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d028      	beq.n	8012a74 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a24:	681a      	ldr	r2, [r3, #0]
 8012a26:	68bb      	ldr	r3, [r7, #8]
 8012a28:	43db      	mvns	r3, r3
 8012a2a:	401a      	ands	r2, r3
 8012a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a2e:	601a      	str	r2, [r3, #0]
 8012a30:	e020      	b.n	8012a74 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8012a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d104      	bne.n	8012a42 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8012a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8012a3c:	2301      	movs	r3, #1
 8012a3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8012a40:	e018      	b.n	8012a74 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d003      	beq.n	8012a50 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8012a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8012a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8012a50:	683b      	ldr	r3, [r7, #0]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d003      	beq.n	8012a5e <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8012a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8012a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8012a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a60:	1d18      	adds	r0, r3, #4
 8012a62:	68ba      	ldr	r2, [r7, #8]
 8012a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a66:	4313      	orrs	r3, r2
 8012a68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012a6a:	4619      	mov	r1, r3
 8012a6c:	f001 fe6a 	bl	8014744 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8012a70:	2300      	movs	r3, #0
 8012a72:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8012a74:	f001 fc60 	bl	8014338 <xTaskResumeAll>
 8012a78:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8012a7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d031      	beq.n	8012ae4 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8012a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d107      	bne.n	8012a96 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8012a86:	4b1a      	ldr	r3, [pc, #104]	@ (8012af0 <xEventGroupWaitBits+0x1a0>)
 8012a88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a8c:	601a      	str	r2, [r3, #0]
 8012a8e:	f3bf 8f4f 	dsb	sy
 8012a92:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8012a96:	f002 faab 	bl	8014ff0 <uxTaskResetEventItemValue>
 8012a9a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8012a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d11a      	bne.n	8012adc <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8012aa6:	f003 fa1f 	bl	8015ee8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8012aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8012ab0:	683a      	ldr	r2, [r7, #0]
 8012ab2:	68b9      	ldr	r1, [r7, #8]
 8012ab4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012ab6:	f000 f8b6 	bl	8012c26 <prvTestWaitCondition>
 8012aba:	4603      	mov	r3, r0
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d009      	beq.n	8012ad4 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d006      	beq.n	8012ad4 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ac8:	681a      	ldr	r2, [r3, #0]
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	43db      	mvns	r3, r3
 8012ace:	401a      	ands	r2, r3
 8012ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ad2:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8012ad4:	2301      	movs	r3, #1
 8012ad6:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8012ad8:	f003 fa38 	bl	8015f4c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ade:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8012ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	3740      	adds	r7, #64	@ 0x40
 8012aea:	46bd      	mov	sp, r7
 8012aec:	bd80      	pop	{r7, pc}
 8012aee:	bf00      	nop
 8012af0:	e000ed04 	.word	0xe000ed04

08012af4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b08e      	sub	sp, #56	@ 0x38
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
 8012afc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8012afe:	2300      	movs	r3, #0
 8012b00:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8012b06:	2300      	movs	r3, #0
 8012b08:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d10b      	bne.n	8012b28 <xEventGroupSetBits+0x34>
	__asm volatile
 8012b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b14:	f383 8811 	msr	BASEPRI, r3
 8012b18:	f3bf 8f6f 	isb	sy
 8012b1c:	f3bf 8f4f 	dsb	sy
 8012b20:	613b      	str	r3, [r7, #16]
}
 8012b22:	bf00      	nop
 8012b24:	bf00      	nop
 8012b26:	e7fd      	b.n	8012b24 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012b2e:	d30b      	bcc.n	8012b48 <xEventGroupSetBits+0x54>
	__asm volatile
 8012b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b34:	f383 8811 	msr	BASEPRI, r3
 8012b38:	f3bf 8f6f 	isb	sy
 8012b3c:	f3bf 8f4f 	dsb	sy
 8012b40:	60fb      	str	r3, [r7, #12]
}
 8012b42:	bf00      	nop
 8012b44:	bf00      	nop
 8012b46:	e7fd      	b.n	8012b44 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8012b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b4a:	3304      	adds	r3, #4
 8012b4c:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b50:	3308      	adds	r3, #8
 8012b52:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8012b54:	f001 fbe2 	bl	801431c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8012b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b5a:	68db      	ldr	r3, [r3, #12]
 8012b5c:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8012b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b60:	681a      	ldr	r2, [r3, #0]
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	431a      	orrs	r2, r3
 8012b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b68:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8012b6a:	e03c      	b.n	8012be6 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8012b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b6e:	685b      	ldr	r3, [r3, #4]
 8012b70:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8012b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8012b78:	2300      	movs	r3, #0
 8012b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8012b7c:	69bb      	ldr	r3, [r7, #24]
 8012b7e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8012b82:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012b84:	69bb      	ldr	r3, [r7, #24]
 8012b86:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012b8a:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8012b8c:	697b      	ldr	r3, [r7, #20]
 8012b8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d108      	bne.n	8012ba8 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8012b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b98:	681a      	ldr	r2, [r3, #0]
 8012b9a:	69bb      	ldr	r3, [r7, #24]
 8012b9c:	4013      	ands	r3, r2
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d00b      	beq.n	8012bba <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8012ba2:	2301      	movs	r3, #1
 8012ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012ba6:	e008      	b.n	8012bba <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8012ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012baa:	681a      	ldr	r2, [r3, #0]
 8012bac:	69bb      	ldr	r3, [r7, #24]
 8012bae:	4013      	ands	r3, r2
 8012bb0:	69ba      	ldr	r2, [r7, #24]
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	d101      	bne.n	8012bba <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8012bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d010      	beq.n	8012be2 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8012bc0:	697b      	ldr	r3, [r7, #20]
 8012bc2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d003      	beq.n	8012bd2 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8012bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012bcc:	69bb      	ldr	r3, [r7, #24]
 8012bce:	4313      	orrs	r3, r2
 8012bd0:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8012bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8012bda:	4619      	mov	r1, r3
 8012bdc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8012bde:	f001 fe7f 	bl	80148e0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8012be2:	69fb      	ldr	r3, [r7, #28]
 8012be4:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8012be6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012be8:	6a3b      	ldr	r3, [r7, #32]
 8012bea:	429a      	cmp	r2, r3
 8012bec:	d1be      	bne.n	8012b6c <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8012bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bf0:	681a      	ldr	r2, [r3, #0]
 8012bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bf4:	43db      	mvns	r3, r3
 8012bf6:	401a      	ands	r2, r3
 8012bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bfa:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8012bfc:	f001 fb9c 	bl	8014338 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8012c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c02:	681b      	ldr	r3, [r3, #0]
}
 8012c04:	4618      	mov	r0, r3
 8012c06:	3738      	adds	r7, #56	@ 0x38
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bd80      	pop	{r7, pc}

08012c0c <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b082      	sub	sp, #8
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
 8012c14:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8012c16:	6839      	ldr	r1, [r7, #0]
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f7ff ff6b 	bl	8012af4 <xEventGroupSetBits>
}
 8012c1e:	bf00      	nop
 8012c20:	3708      	adds	r7, #8
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}

08012c26 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8012c26:	b480      	push	{r7}
 8012c28:	b087      	sub	sp, #28
 8012c2a:	af00      	add	r7, sp, #0
 8012c2c:	60f8      	str	r0, [r7, #12]
 8012c2e:	60b9      	str	r1, [r7, #8]
 8012c30:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8012c32:	2300      	movs	r3, #0
 8012c34:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d107      	bne.n	8012c4c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8012c3c:	68fa      	ldr	r2, [r7, #12]
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	4013      	ands	r3, r2
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d00a      	beq.n	8012c5c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012c46:	2301      	movs	r3, #1
 8012c48:	617b      	str	r3, [r7, #20]
 8012c4a:	e007      	b.n	8012c5c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8012c4c:	68fa      	ldr	r2, [r7, #12]
 8012c4e:	68bb      	ldr	r3, [r7, #8]
 8012c50:	4013      	ands	r3, r2
 8012c52:	68ba      	ldr	r2, [r7, #8]
 8012c54:	429a      	cmp	r2, r3
 8012c56:	d101      	bne.n	8012c5c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012c58:	2301      	movs	r3, #1
 8012c5a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8012c5c:	697b      	ldr	r3, [r7, #20]
}
 8012c5e:	4618      	mov	r0, r3
 8012c60:	371c      	adds	r7, #28
 8012c62:	46bd      	mov	sp, r7
 8012c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c68:	4770      	bx	lr
	...

08012c6c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b086      	sub	sp, #24
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	60f8      	str	r0, [r7, #12]
 8012c74:	60b9      	str	r1, [r7, #8]
 8012c76:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	68ba      	ldr	r2, [r7, #8]
 8012c7c:	68f9      	ldr	r1, [r7, #12]
 8012c7e:	4804      	ldr	r0, [pc, #16]	@ (8012c90 <xEventGroupSetBitsFromISR+0x24>)
 8012c80:	f002 ffe2 	bl	8015c48 <xTimerPendFunctionCallFromISR>
 8012c84:	6178      	str	r0, [r7, #20]

		return xReturn;
 8012c86:	697b      	ldr	r3, [r7, #20]
	}
 8012c88:	4618      	mov	r0, r3
 8012c8a:	3718      	adds	r7, #24
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bd80      	pop	{r7, pc}
 8012c90:	08012c0d 	.word	0x08012c0d

08012c94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012c94:	b480      	push	{r7}
 8012c96:	b083      	sub	sp, #12
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	f103 0208 	add.w	r2, r3, #8
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012cac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	f103 0208 	add.w	r2, r3, #8
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	f103 0208 	add.w	r2, r3, #8
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012cc8:	bf00      	nop
 8012cca:	370c      	adds	r7, #12
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd2:	4770      	bx	lr

08012cd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012cd4:	b480      	push	{r7}
 8012cd6:	b083      	sub	sp, #12
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2200      	movs	r2, #0
 8012ce0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012ce2:	bf00      	nop
 8012ce4:	370c      	adds	r7, #12
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cec:	4770      	bx	lr

08012cee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012cee:	b480      	push	{r7}
 8012cf0:	b085      	sub	sp, #20
 8012cf2:	af00      	add	r7, sp, #0
 8012cf4:	6078      	str	r0, [r7, #4]
 8012cf6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	68fa      	ldr	r2, [r7, #12]
 8012d02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	689a      	ldr	r2, [r3, #8]
 8012d08:	683b      	ldr	r3, [r7, #0]
 8012d0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	689b      	ldr	r3, [r3, #8]
 8012d10:	683a      	ldr	r2, [r7, #0]
 8012d12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	683a      	ldr	r2, [r7, #0]
 8012d18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012d1a:	683b      	ldr	r3, [r7, #0]
 8012d1c:	687a      	ldr	r2, [r7, #4]
 8012d1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	1c5a      	adds	r2, r3, #1
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	601a      	str	r2, [r3, #0]
}
 8012d2a:	bf00      	nop
 8012d2c:	3714      	adds	r7, #20
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d34:	4770      	bx	lr

08012d36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012d36:	b480      	push	{r7}
 8012d38:	b085      	sub	sp, #20
 8012d3a:	af00      	add	r7, sp, #0
 8012d3c:	6078      	str	r0, [r7, #4]
 8012d3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012d46:	68bb      	ldr	r3, [r7, #8]
 8012d48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012d4c:	d103      	bne.n	8012d56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	691b      	ldr	r3, [r3, #16]
 8012d52:	60fb      	str	r3, [r7, #12]
 8012d54:	e00c      	b.n	8012d70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	3308      	adds	r3, #8
 8012d5a:	60fb      	str	r3, [r7, #12]
 8012d5c:	e002      	b.n	8012d64 <vListInsert+0x2e>
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	685b      	ldr	r3, [r3, #4]
 8012d62:	60fb      	str	r3, [r7, #12]
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	685b      	ldr	r3, [r3, #4]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	68ba      	ldr	r2, [r7, #8]
 8012d6c:	429a      	cmp	r2, r3
 8012d6e:	d2f6      	bcs.n	8012d5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	685a      	ldr	r2, [r3, #4]
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	685b      	ldr	r3, [r3, #4]
 8012d7c:	683a      	ldr	r2, [r7, #0]
 8012d7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012d80:	683b      	ldr	r3, [r7, #0]
 8012d82:	68fa      	ldr	r2, [r7, #12]
 8012d84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	683a      	ldr	r2, [r7, #0]
 8012d8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	1c5a      	adds	r2, r3, #1
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	601a      	str	r2, [r3, #0]
}
 8012d9c:	bf00      	nop
 8012d9e:	3714      	adds	r7, #20
 8012da0:	46bd      	mov	sp, r7
 8012da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da6:	4770      	bx	lr

08012da8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012da8:	b480      	push	{r7}
 8012daa:	b085      	sub	sp, #20
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	691b      	ldr	r3, [r3, #16]
 8012db4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	685b      	ldr	r3, [r3, #4]
 8012dba:	687a      	ldr	r2, [r7, #4]
 8012dbc:	6892      	ldr	r2, [r2, #8]
 8012dbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	689b      	ldr	r3, [r3, #8]
 8012dc4:	687a      	ldr	r2, [r7, #4]
 8012dc6:	6852      	ldr	r2, [r2, #4]
 8012dc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	685b      	ldr	r3, [r3, #4]
 8012dce:	687a      	ldr	r2, [r7, #4]
 8012dd0:	429a      	cmp	r2, r3
 8012dd2:	d103      	bne.n	8012ddc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	689a      	ldr	r2, [r3, #8]
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	2200      	movs	r2, #0
 8012de0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	1e5a      	subs	r2, r3, #1
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	681b      	ldr	r3, [r3, #0]
}
 8012df0:	4618      	mov	r0, r3
 8012df2:	3714      	adds	r7, #20
 8012df4:	46bd      	mov	sp, r7
 8012df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfa:	4770      	bx	lr

08012dfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b084      	sub	sp, #16
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
 8012e04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d10b      	bne.n	8012e28 <xQueueGenericReset+0x2c>
	__asm volatile
 8012e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e14:	f383 8811 	msr	BASEPRI, r3
 8012e18:	f3bf 8f6f 	isb	sy
 8012e1c:	f3bf 8f4f 	dsb	sy
 8012e20:	60bb      	str	r3, [r7, #8]
}
 8012e22:	bf00      	nop
 8012e24:	bf00      	nop
 8012e26:	e7fd      	b.n	8012e24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012e28:	f003 f85e 	bl	8015ee8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	681a      	ldr	r2, [r3, #0]
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e34:	68f9      	ldr	r1, [r7, #12]
 8012e36:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012e38:	fb01 f303 	mul.w	r3, r1, r3
 8012e3c:	441a      	add	r2, r3
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	2200      	movs	r2, #0
 8012e46:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	681a      	ldr	r2, [r3, #0]
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	681a      	ldr	r2, [r3, #0]
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e58:	3b01      	subs	r3, #1
 8012e5a:	68f9      	ldr	r1, [r7, #12]
 8012e5c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012e5e:	fb01 f303 	mul.w	r3, r1, r3
 8012e62:	441a      	add	r2, r3
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	22ff      	movs	r2, #255	@ 0xff
 8012e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	22ff      	movs	r2, #255	@ 0xff
 8012e74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d114      	bne.n	8012ea8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	691b      	ldr	r3, [r3, #16]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d01a      	beq.n	8012ebc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	3310      	adds	r3, #16
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f001 fcc4 	bl	8014818 <xTaskRemoveFromEventList>
 8012e90:	4603      	mov	r3, r0
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d012      	beq.n	8012ebc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012e96:	4b0d      	ldr	r3, [pc, #52]	@ (8012ecc <xQueueGenericReset+0xd0>)
 8012e98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e9c:	601a      	str	r2, [r3, #0]
 8012e9e:	f3bf 8f4f 	dsb	sy
 8012ea2:	f3bf 8f6f 	isb	sy
 8012ea6:	e009      	b.n	8012ebc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	3310      	adds	r3, #16
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7ff fef1 	bl	8012c94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	3324      	adds	r3, #36	@ 0x24
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f7ff feec 	bl	8012c94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012ebc:	f003 f846 	bl	8015f4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012ec0:	2301      	movs	r3, #1
}
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	3710      	adds	r7, #16
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bd80      	pop	{r7, pc}
 8012eca:	bf00      	nop
 8012ecc:	e000ed04 	.word	0xe000ed04

08012ed0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b08e      	sub	sp, #56	@ 0x38
 8012ed4:	af02      	add	r7, sp, #8
 8012ed6:	60f8      	str	r0, [r7, #12]
 8012ed8:	60b9      	str	r1, [r7, #8]
 8012eda:	607a      	str	r2, [r7, #4]
 8012edc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d10b      	bne.n	8012efc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8012ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ee8:	f383 8811 	msr	BASEPRI, r3
 8012eec:	f3bf 8f6f 	isb	sy
 8012ef0:	f3bf 8f4f 	dsb	sy
 8012ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012ef6:	bf00      	nop
 8012ef8:	bf00      	nop
 8012efa:	e7fd      	b.n	8012ef8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d10b      	bne.n	8012f1a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8012f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f06:	f383 8811 	msr	BASEPRI, r3
 8012f0a:	f3bf 8f6f 	isb	sy
 8012f0e:	f3bf 8f4f 	dsb	sy
 8012f12:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012f14:	bf00      	nop
 8012f16:	bf00      	nop
 8012f18:	e7fd      	b.n	8012f16 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d002      	beq.n	8012f26 <xQueueGenericCreateStatic+0x56>
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d001      	beq.n	8012f2a <xQueueGenericCreateStatic+0x5a>
 8012f26:	2301      	movs	r3, #1
 8012f28:	e000      	b.n	8012f2c <xQueueGenericCreateStatic+0x5c>
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d10b      	bne.n	8012f48 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8012f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f34:	f383 8811 	msr	BASEPRI, r3
 8012f38:	f3bf 8f6f 	isb	sy
 8012f3c:	f3bf 8f4f 	dsb	sy
 8012f40:	623b      	str	r3, [r7, #32]
}
 8012f42:	bf00      	nop
 8012f44:	bf00      	nop
 8012f46:	e7fd      	b.n	8012f44 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d102      	bne.n	8012f54 <xQueueGenericCreateStatic+0x84>
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d101      	bne.n	8012f58 <xQueueGenericCreateStatic+0x88>
 8012f54:	2301      	movs	r3, #1
 8012f56:	e000      	b.n	8012f5a <xQueueGenericCreateStatic+0x8a>
 8012f58:	2300      	movs	r3, #0
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d10b      	bne.n	8012f76 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8012f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f62:	f383 8811 	msr	BASEPRI, r3
 8012f66:	f3bf 8f6f 	isb	sy
 8012f6a:	f3bf 8f4f 	dsb	sy
 8012f6e:	61fb      	str	r3, [r7, #28]
}
 8012f70:	bf00      	nop
 8012f72:	bf00      	nop
 8012f74:	e7fd      	b.n	8012f72 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012f76:	2350      	movs	r3, #80	@ 0x50
 8012f78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012f7a:	697b      	ldr	r3, [r7, #20]
 8012f7c:	2b50      	cmp	r3, #80	@ 0x50
 8012f7e:	d00b      	beq.n	8012f98 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8012f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f84:	f383 8811 	msr	BASEPRI, r3
 8012f88:	f3bf 8f6f 	isb	sy
 8012f8c:	f3bf 8f4f 	dsb	sy
 8012f90:	61bb      	str	r3, [r7, #24]
}
 8012f92:	bf00      	nop
 8012f94:	bf00      	nop
 8012f96:	e7fd      	b.n	8012f94 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012f98:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8012f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d00d      	beq.n	8012fc0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fa6:	2201      	movs	r2, #1
 8012fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012fac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8012fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fb2:	9300      	str	r3, [sp, #0]
 8012fb4:	4613      	mov	r3, r2
 8012fb6:	687a      	ldr	r2, [r7, #4]
 8012fb8:	68b9      	ldr	r1, [r7, #8]
 8012fba:	68f8      	ldr	r0, [r7, #12]
 8012fbc:	f000 f840 	bl	8013040 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	3730      	adds	r7, #48	@ 0x30
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}

08012fca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012fca:	b580      	push	{r7, lr}
 8012fcc:	b08a      	sub	sp, #40	@ 0x28
 8012fce:	af02      	add	r7, sp, #8
 8012fd0:	60f8      	str	r0, [r7, #12]
 8012fd2:	60b9      	str	r1, [r7, #8]
 8012fd4:	4613      	mov	r3, r2
 8012fd6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d10b      	bne.n	8012ff6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8012fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fe2:	f383 8811 	msr	BASEPRI, r3
 8012fe6:	f3bf 8f6f 	isb	sy
 8012fea:	f3bf 8f4f 	dsb	sy
 8012fee:	613b      	str	r3, [r7, #16]
}
 8012ff0:	bf00      	nop
 8012ff2:	bf00      	nop
 8012ff4:	e7fd      	b.n	8012ff2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	68ba      	ldr	r2, [r7, #8]
 8012ffa:	fb02 f303 	mul.w	r3, r2, r3
 8012ffe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013000:	69fb      	ldr	r3, [r7, #28]
 8013002:	3350      	adds	r3, #80	@ 0x50
 8013004:	4618      	mov	r0, r3
 8013006:	f003 f891 	bl	801612c <pvPortMalloc>
 801300a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801300c:	69bb      	ldr	r3, [r7, #24]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d011      	beq.n	8013036 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013012:	69bb      	ldr	r3, [r7, #24]
 8013014:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	3350      	adds	r3, #80	@ 0x50
 801301a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801301c:	69bb      	ldr	r3, [r7, #24]
 801301e:	2200      	movs	r2, #0
 8013020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013024:	79fa      	ldrb	r2, [r7, #7]
 8013026:	69bb      	ldr	r3, [r7, #24]
 8013028:	9300      	str	r3, [sp, #0]
 801302a:	4613      	mov	r3, r2
 801302c:	697a      	ldr	r2, [r7, #20]
 801302e:	68b9      	ldr	r1, [r7, #8]
 8013030:	68f8      	ldr	r0, [r7, #12]
 8013032:	f000 f805 	bl	8013040 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013036:	69bb      	ldr	r3, [r7, #24]
	}
 8013038:	4618      	mov	r0, r3
 801303a:	3720      	adds	r7, #32
 801303c:	46bd      	mov	sp, r7
 801303e:	bd80      	pop	{r7, pc}

08013040 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013040:	b580      	push	{r7, lr}
 8013042:	b084      	sub	sp, #16
 8013044:	af00      	add	r7, sp, #0
 8013046:	60f8      	str	r0, [r7, #12]
 8013048:	60b9      	str	r1, [r7, #8]
 801304a:	607a      	str	r2, [r7, #4]
 801304c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d103      	bne.n	801305c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013054:	69bb      	ldr	r3, [r7, #24]
 8013056:	69ba      	ldr	r2, [r7, #24]
 8013058:	601a      	str	r2, [r3, #0]
 801305a:	e002      	b.n	8013062 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801305c:	69bb      	ldr	r3, [r7, #24]
 801305e:	687a      	ldr	r2, [r7, #4]
 8013060:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013062:	69bb      	ldr	r3, [r7, #24]
 8013064:	68fa      	ldr	r2, [r7, #12]
 8013066:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013068:	69bb      	ldr	r3, [r7, #24]
 801306a:	68ba      	ldr	r2, [r7, #8]
 801306c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801306e:	2101      	movs	r1, #1
 8013070:	69b8      	ldr	r0, [r7, #24]
 8013072:	f7ff fec3 	bl	8012dfc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013076:	69bb      	ldr	r3, [r7, #24]
 8013078:	78fa      	ldrb	r2, [r7, #3]
 801307a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801307e:	bf00      	nop
 8013080:	3710      	adds	r7, #16
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}

08013086 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8013086:	b580      	push	{r7, lr}
 8013088:	b08a      	sub	sp, #40	@ 0x28
 801308a:	af02      	add	r7, sp, #8
 801308c:	60f8      	str	r0, [r7, #12]
 801308e:	60b9      	str	r1, [r7, #8]
 8013090:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d10b      	bne.n	80130b0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8013098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801309c:	f383 8811 	msr	BASEPRI, r3
 80130a0:	f3bf 8f6f 	isb	sy
 80130a4:	f3bf 8f4f 	dsb	sy
 80130a8:	61bb      	str	r3, [r7, #24]
}
 80130aa:	bf00      	nop
 80130ac:	bf00      	nop
 80130ae:	e7fd      	b.n	80130ac <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80130b0:	68ba      	ldr	r2, [r7, #8]
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d90b      	bls.n	80130d0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80130b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130bc:	f383 8811 	msr	BASEPRI, r3
 80130c0:	f3bf 8f6f 	isb	sy
 80130c4:	f3bf 8f4f 	dsb	sy
 80130c8:	617b      	str	r3, [r7, #20]
}
 80130ca:	bf00      	nop
 80130cc:	bf00      	nop
 80130ce:	e7fd      	b.n	80130cc <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80130d0:	2302      	movs	r3, #2
 80130d2:	9300      	str	r3, [sp, #0]
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2200      	movs	r2, #0
 80130d8:	2100      	movs	r1, #0
 80130da:	68f8      	ldr	r0, [r7, #12]
 80130dc:	f7ff fef8 	bl	8012ed0 <xQueueGenericCreateStatic>
 80130e0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80130e2:	69fb      	ldr	r3, [r7, #28]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d002      	beq.n	80130ee <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80130e8:	69fb      	ldr	r3, [r7, #28]
 80130ea:	68ba      	ldr	r2, [r7, #8]
 80130ec:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80130ee:	69fb      	ldr	r3, [r7, #28]
	}
 80130f0:	4618      	mov	r0, r3
 80130f2:	3720      	adds	r7, #32
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}

080130f8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b086      	sub	sp, #24
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
 8013100:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d10b      	bne.n	8013120 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8013108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801310c:	f383 8811 	msr	BASEPRI, r3
 8013110:	f3bf 8f6f 	isb	sy
 8013114:	f3bf 8f4f 	dsb	sy
 8013118:	613b      	str	r3, [r7, #16]
}
 801311a:	bf00      	nop
 801311c:	bf00      	nop
 801311e:	e7fd      	b.n	801311c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8013120:	683a      	ldr	r2, [r7, #0]
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	429a      	cmp	r2, r3
 8013126:	d90b      	bls.n	8013140 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8013128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801312c:	f383 8811 	msr	BASEPRI, r3
 8013130:	f3bf 8f6f 	isb	sy
 8013134:	f3bf 8f4f 	dsb	sy
 8013138:	60fb      	str	r3, [r7, #12]
}
 801313a:	bf00      	nop
 801313c:	bf00      	nop
 801313e:	e7fd      	b.n	801313c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013140:	2202      	movs	r2, #2
 8013142:	2100      	movs	r1, #0
 8013144:	6878      	ldr	r0, [r7, #4]
 8013146:	f7ff ff40 	bl	8012fca <xQueueGenericCreate>
 801314a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d002      	beq.n	8013158 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	683a      	ldr	r2, [r7, #0]
 8013156:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013158:	697b      	ldr	r3, [r7, #20]
	}
 801315a:	4618      	mov	r0, r3
 801315c:	3718      	adds	r7, #24
 801315e:	46bd      	mov	sp, r7
 8013160:	bd80      	pop	{r7, pc}
	...

08013164 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b08e      	sub	sp, #56	@ 0x38
 8013168:	af00      	add	r7, sp, #0
 801316a:	60f8      	str	r0, [r7, #12]
 801316c:	60b9      	str	r1, [r7, #8]
 801316e:	607a      	str	r2, [r7, #4]
 8013170:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013172:	2300      	movs	r3, #0
 8013174:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801317a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801317c:	2b00      	cmp	r3, #0
 801317e:	d10b      	bne.n	8013198 <xQueueGenericSend+0x34>
	__asm volatile
 8013180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013184:	f383 8811 	msr	BASEPRI, r3
 8013188:	f3bf 8f6f 	isb	sy
 801318c:	f3bf 8f4f 	dsb	sy
 8013190:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013192:	bf00      	nop
 8013194:	bf00      	nop
 8013196:	e7fd      	b.n	8013194 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d103      	bne.n	80131a6 <xQueueGenericSend+0x42>
 801319e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d101      	bne.n	80131aa <xQueueGenericSend+0x46>
 80131a6:	2301      	movs	r3, #1
 80131a8:	e000      	b.n	80131ac <xQueueGenericSend+0x48>
 80131aa:	2300      	movs	r3, #0
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d10b      	bne.n	80131c8 <xQueueGenericSend+0x64>
	__asm volatile
 80131b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131b4:	f383 8811 	msr	BASEPRI, r3
 80131b8:	f3bf 8f6f 	isb	sy
 80131bc:	f3bf 8f4f 	dsb	sy
 80131c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80131c2:	bf00      	nop
 80131c4:	bf00      	nop
 80131c6:	e7fd      	b.n	80131c4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80131c8:	683b      	ldr	r3, [r7, #0]
 80131ca:	2b02      	cmp	r3, #2
 80131cc:	d103      	bne.n	80131d6 <xQueueGenericSend+0x72>
 80131ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80131d2:	2b01      	cmp	r3, #1
 80131d4:	d101      	bne.n	80131da <xQueueGenericSend+0x76>
 80131d6:	2301      	movs	r3, #1
 80131d8:	e000      	b.n	80131dc <xQueueGenericSend+0x78>
 80131da:	2300      	movs	r3, #0
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d10b      	bne.n	80131f8 <xQueueGenericSend+0x94>
	__asm volatile
 80131e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131e4:	f383 8811 	msr	BASEPRI, r3
 80131e8:	f3bf 8f6f 	isb	sy
 80131ec:	f3bf 8f4f 	dsb	sy
 80131f0:	623b      	str	r3, [r7, #32]
}
 80131f2:	bf00      	nop
 80131f4:	bf00      	nop
 80131f6:	e7fd      	b.n	80131f4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80131f8:	f001 fd80 	bl	8014cfc <xTaskGetSchedulerState>
 80131fc:	4603      	mov	r3, r0
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d102      	bne.n	8013208 <xQueueGenericSend+0xa4>
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d101      	bne.n	801320c <xQueueGenericSend+0xa8>
 8013208:	2301      	movs	r3, #1
 801320a:	e000      	b.n	801320e <xQueueGenericSend+0xaa>
 801320c:	2300      	movs	r3, #0
 801320e:	2b00      	cmp	r3, #0
 8013210:	d10b      	bne.n	801322a <xQueueGenericSend+0xc6>
	__asm volatile
 8013212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013216:	f383 8811 	msr	BASEPRI, r3
 801321a:	f3bf 8f6f 	isb	sy
 801321e:	f3bf 8f4f 	dsb	sy
 8013222:	61fb      	str	r3, [r7, #28]
}
 8013224:	bf00      	nop
 8013226:	bf00      	nop
 8013228:	e7fd      	b.n	8013226 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801322a:	f002 fe5d 	bl	8015ee8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801322e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013230:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013236:	429a      	cmp	r2, r3
 8013238:	d302      	bcc.n	8013240 <xQueueGenericSend+0xdc>
 801323a:	683b      	ldr	r3, [r7, #0]
 801323c:	2b02      	cmp	r3, #2
 801323e:	d129      	bne.n	8013294 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013240:	683a      	ldr	r2, [r7, #0]
 8013242:	68b9      	ldr	r1, [r7, #8]
 8013244:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013246:	f000 fc6d 	bl	8013b24 <prvCopyDataToQueue>
 801324a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801324c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801324e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013250:	2b00      	cmp	r3, #0
 8013252:	d010      	beq.n	8013276 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013256:	3324      	adds	r3, #36	@ 0x24
 8013258:	4618      	mov	r0, r3
 801325a:	f001 fadd 	bl	8014818 <xTaskRemoveFromEventList>
 801325e:	4603      	mov	r3, r0
 8013260:	2b00      	cmp	r3, #0
 8013262:	d013      	beq.n	801328c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013264:	4b3f      	ldr	r3, [pc, #252]	@ (8013364 <xQueueGenericSend+0x200>)
 8013266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801326a:	601a      	str	r2, [r3, #0]
 801326c:	f3bf 8f4f 	dsb	sy
 8013270:	f3bf 8f6f 	isb	sy
 8013274:	e00a      	b.n	801328c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013278:	2b00      	cmp	r3, #0
 801327a:	d007      	beq.n	801328c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801327c:	4b39      	ldr	r3, [pc, #228]	@ (8013364 <xQueueGenericSend+0x200>)
 801327e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013282:	601a      	str	r2, [r3, #0]
 8013284:	f3bf 8f4f 	dsb	sy
 8013288:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801328c:	f002 fe5e 	bl	8015f4c <vPortExitCritical>
				return pdPASS;
 8013290:	2301      	movs	r3, #1
 8013292:	e063      	b.n	801335c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d103      	bne.n	80132a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801329a:	f002 fe57 	bl	8015f4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801329e:	2300      	movs	r3, #0
 80132a0:	e05c      	b.n	801335c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80132a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d106      	bne.n	80132b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80132a8:	f107 0314 	add.w	r3, r7, #20
 80132ac:	4618      	mov	r0, r3
 80132ae:	f001 fb7b 	bl	80149a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80132b2:	2301      	movs	r3, #1
 80132b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80132b6:	f002 fe49 	bl	8015f4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80132ba:	f001 f82f 	bl	801431c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80132be:	f002 fe13 	bl	8015ee8 <vPortEnterCritical>
 80132c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80132c8:	b25b      	sxtb	r3, r3
 80132ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80132ce:	d103      	bne.n	80132d8 <xQueueGenericSend+0x174>
 80132d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132d2:	2200      	movs	r2, #0
 80132d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80132d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80132de:	b25b      	sxtb	r3, r3
 80132e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80132e4:	d103      	bne.n	80132ee <xQueueGenericSend+0x18a>
 80132e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132e8:	2200      	movs	r2, #0
 80132ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80132ee:	f002 fe2d 	bl	8015f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80132f2:	1d3a      	adds	r2, r7, #4
 80132f4:	f107 0314 	add.w	r3, r7, #20
 80132f8:	4611      	mov	r1, r2
 80132fa:	4618      	mov	r0, r3
 80132fc:	f001 fb6a 	bl	80149d4 <xTaskCheckForTimeOut>
 8013300:	4603      	mov	r3, r0
 8013302:	2b00      	cmp	r3, #0
 8013304:	d124      	bne.n	8013350 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013306:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013308:	f000 fd04 	bl	8013d14 <prvIsQueueFull>
 801330c:	4603      	mov	r3, r0
 801330e:	2b00      	cmp	r3, #0
 8013310:	d018      	beq.n	8013344 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013314:	3310      	adds	r3, #16
 8013316:	687a      	ldr	r2, [r7, #4]
 8013318:	4611      	mov	r1, r2
 801331a:	4618      	mov	r0, r3
 801331c:	f001 f9ec 	bl	80146f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013320:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013322:	f000 fc8f 	bl	8013c44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013326:	f001 f807 	bl	8014338 <xTaskResumeAll>
 801332a:	4603      	mov	r3, r0
 801332c:	2b00      	cmp	r3, #0
 801332e:	f47f af7c 	bne.w	801322a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8013332:	4b0c      	ldr	r3, [pc, #48]	@ (8013364 <xQueueGenericSend+0x200>)
 8013334:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013338:	601a      	str	r2, [r3, #0]
 801333a:	f3bf 8f4f 	dsb	sy
 801333e:	f3bf 8f6f 	isb	sy
 8013342:	e772      	b.n	801322a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013344:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013346:	f000 fc7d 	bl	8013c44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801334a:	f000 fff5 	bl	8014338 <xTaskResumeAll>
 801334e:	e76c      	b.n	801322a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013350:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013352:	f000 fc77 	bl	8013c44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013356:	f000 ffef 	bl	8014338 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801335a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801335c:	4618      	mov	r0, r3
 801335e:	3738      	adds	r7, #56	@ 0x38
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}
 8013364:	e000ed04 	.word	0xe000ed04

08013368 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b090      	sub	sp, #64	@ 0x40
 801336c:	af00      	add	r7, sp, #0
 801336e:	60f8      	str	r0, [r7, #12]
 8013370:	60b9      	str	r1, [r7, #8]
 8013372:	607a      	str	r2, [r7, #4]
 8013374:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801337a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801337c:	2b00      	cmp	r3, #0
 801337e:	d10b      	bne.n	8013398 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8013380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013384:	f383 8811 	msr	BASEPRI, r3
 8013388:	f3bf 8f6f 	isb	sy
 801338c:	f3bf 8f4f 	dsb	sy
 8013390:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013392:	bf00      	nop
 8013394:	bf00      	nop
 8013396:	e7fd      	b.n	8013394 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013398:	68bb      	ldr	r3, [r7, #8]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d103      	bne.n	80133a6 <xQueueGenericSendFromISR+0x3e>
 801339e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d101      	bne.n	80133aa <xQueueGenericSendFromISR+0x42>
 80133a6:	2301      	movs	r3, #1
 80133a8:	e000      	b.n	80133ac <xQueueGenericSendFromISR+0x44>
 80133aa:	2300      	movs	r3, #0
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d10b      	bne.n	80133c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80133b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133b4:	f383 8811 	msr	BASEPRI, r3
 80133b8:	f3bf 8f6f 	isb	sy
 80133bc:	f3bf 8f4f 	dsb	sy
 80133c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80133c2:	bf00      	nop
 80133c4:	bf00      	nop
 80133c6:	e7fd      	b.n	80133c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80133c8:	683b      	ldr	r3, [r7, #0]
 80133ca:	2b02      	cmp	r3, #2
 80133cc:	d103      	bne.n	80133d6 <xQueueGenericSendFromISR+0x6e>
 80133ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80133d2:	2b01      	cmp	r3, #1
 80133d4:	d101      	bne.n	80133da <xQueueGenericSendFromISR+0x72>
 80133d6:	2301      	movs	r3, #1
 80133d8:	e000      	b.n	80133dc <xQueueGenericSendFromISR+0x74>
 80133da:	2300      	movs	r3, #0
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d10b      	bne.n	80133f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80133e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133e4:	f383 8811 	msr	BASEPRI, r3
 80133e8:	f3bf 8f6f 	isb	sy
 80133ec:	f3bf 8f4f 	dsb	sy
 80133f0:	623b      	str	r3, [r7, #32]
}
 80133f2:	bf00      	nop
 80133f4:	bf00      	nop
 80133f6:	e7fd      	b.n	80133f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80133f8:	f002 fe56 	bl	80160a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80133fc:	f3ef 8211 	mrs	r2, BASEPRI
 8013400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013404:	f383 8811 	msr	BASEPRI, r3
 8013408:	f3bf 8f6f 	isb	sy
 801340c:	f3bf 8f4f 	dsb	sy
 8013410:	61fa      	str	r2, [r7, #28]
 8013412:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013414:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013416:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801341a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801341c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801341e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013420:	429a      	cmp	r2, r3
 8013422:	d302      	bcc.n	801342a <xQueueGenericSendFromISR+0xc2>
 8013424:	683b      	ldr	r3, [r7, #0]
 8013426:	2b02      	cmp	r3, #2
 8013428:	d12f      	bne.n	801348a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801342a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801342c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013430:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013438:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801343a:	683a      	ldr	r2, [r7, #0]
 801343c:	68b9      	ldr	r1, [r7, #8]
 801343e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013440:	f000 fb70 	bl	8013b24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013444:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8013448:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801344c:	d112      	bne.n	8013474 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801344e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013452:	2b00      	cmp	r3, #0
 8013454:	d016      	beq.n	8013484 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013458:	3324      	adds	r3, #36	@ 0x24
 801345a:	4618      	mov	r0, r3
 801345c:	f001 f9dc 	bl	8014818 <xTaskRemoveFromEventList>
 8013460:	4603      	mov	r3, r0
 8013462:	2b00      	cmp	r3, #0
 8013464:	d00e      	beq.n	8013484 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d00b      	beq.n	8013484 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	2201      	movs	r2, #1
 8013470:	601a      	str	r2, [r3, #0]
 8013472:	e007      	b.n	8013484 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013474:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013478:	3301      	adds	r3, #1
 801347a:	b2db      	uxtb	r3, r3
 801347c:	b25a      	sxtb	r2, r3
 801347e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013484:	2301      	movs	r3, #1
 8013486:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8013488:	e001      	b.n	801348e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801348a:	2300      	movs	r3, #0
 801348c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801348e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013490:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013492:	697b      	ldr	r3, [r7, #20]
 8013494:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013498:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801349a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801349c:	4618      	mov	r0, r3
 801349e:	3740      	adds	r7, #64	@ 0x40
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bd80      	pop	{r7, pc}

080134a4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b08e      	sub	sp, #56	@ 0x38
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
 80134ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80134b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d10b      	bne.n	80134d0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80134b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134bc:	f383 8811 	msr	BASEPRI, r3
 80134c0:	f3bf 8f6f 	isb	sy
 80134c4:	f3bf 8f4f 	dsb	sy
 80134c8:	623b      	str	r3, [r7, #32]
}
 80134ca:	bf00      	nop
 80134cc:	bf00      	nop
 80134ce:	e7fd      	b.n	80134cc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80134d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d00b      	beq.n	80134f0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80134d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134dc:	f383 8811 	msr	BASEPRI, r3
 80134e0:	f3bf 8f6f 	isb	sy
 80134e4:	f3bf 8f4f 	dsb	sy
 80134e8:	61fb      	str	r3, [r7, #28]
}
 80134ea:	bf00      	nop
 80134ec:	bf00      	nop
 80134ee:	e7fd      	b.n	80134ec <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80134f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d103      	bne.n	8013500 <xQueueGiveFromISR+0x5c>
 80134f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134fa:	689b      	ldr	r3, [r3, #8]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d101      	bne.n	8013504 <xQueueGiveFromISR+0x60>
 8013500:	2301      	movs	r3, #1
 8013502:	e000      	b.n	8013506 <xQueueGiveFromISR+0x62>
 8013504:	2300      	movs	r3, #0
 8013506:	2b00      	cmp	r3, #0
 8013508:	d10b      	bne.n	8013522 <xQueueGiveFromISR+0x7e>
	__asm volatile
 801350a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801350e:	f383 8811 	msr	BASEPRI, r3
 8013512:	f3bf 8f6f 	isb	sy
 8013516:	f3bf 8f4f 	dsb	sy
 801351a:	61bb      	str	r3, [r7, #24]
}
 801351c:	bf00      	nop
 801351e:	bf00      	nop
 8013520:	e7fd      	b.n	801351e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013522:	f002 fdc1 	bl	80160a8 <vPortValidateInterruptPriority>
	__asm volatile
 8013526:	f3ef 8211 	mrs	r2, BASEPRI
 801352a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801352e:	f383 8811 	msr	BASEPRI, r3
 8013532:	f3bf 8f6f 	isb	sy
 8013536:	f3bf 8f4f 	dsb	sy
 801353a:	617a      	str	r2, [r7, #20]
 801353c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801353e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013540:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013546:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801354a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801354c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801354e:	429a      	cmp	r2, r3
 8013550:	d22b      	bcs.n	80135aa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013554:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013558:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801355c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801355e:	1c5a      	adds	r2, r3, #1
 8013560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013562:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013564:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013568:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801356c:	d112      	bne.n	8013594 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801356e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013572:	2b00      	cmp	r3, #0
 8013574:	d016      	beq.n	80135a4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013578:	3324      	adds	r3, #36	@ 0x24
 801357a:	4618      	mov	r0, r3
 801357c:	f001 f94c 	bl	8014818 <xTaskRemoveFromEventList>
 8013580:	4603      	mov	r3, r0
 8013582:	2b00      	cmp	r3, #0
 8013584:	d00e      	beq.n	80135a4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013586:	683b      	ldr	r3, [r7, #0]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d00b      	beq.n	80135a4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	2201      	movs	r2, #1
 8013590:	601a      	str	r2, [r3, #0]
 8013592:	e007      	b.n	80135a4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013598:	3301      	adds	r3, #1
 801359a:	b2db      	uxtb	r3, r3
 801359c:	b25a      	sxtb	r2, r3
 801359e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80135a4:	2301      	movs	r3, #1
 80135a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80135a8:	e001      	b.n	80135ae <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80135aa:	2300      	movs	r3, #0
 80135ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80135ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	f383 8811 	msr	BASEPRI, r3
}
 80135b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80135ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80135bc:	4618      	mov	r0, r3
 80135be:	3738      	adds	r7, #56	@ 0x38
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}

080135c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b08c      	sub	sp, #48	@ 0x30
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	60b9      	str	r1, [r7, #8]
 80135ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80135d0:	2300      	movs	r3, #0
 80135d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80135d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d10b      	bne.n	80135f6 <xQueueReceive+0x32>
	__asm volatile
 80135de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135e2:	f383 8811 	msr	BASEPRI, r3
 80135e6:	f3bf 8f6f 	isb	sy
 80135ea:	f3bf 8f4f 	dsb	sy
 80135ee:	623b      	str	r3, [r7, #32]
}
 80135f0:	bf00      	nop
 80135f2:	bf00      	nop
 80135f4:	e7fd      	b.n	80135f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80135f6:	68bb      	ldr	r3, [r7, #8]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d103      	bne.n	8013604 <xQueueReceive+0x40>
 80135fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013600:	2b00      	cmp	r3, #0
 8013602:	d101      	bne.n	8013608 <xQueueReceive+0x44>
 8013604:	2301      	movs	r3, #1
 8013606:	e000      	b.n	801360a <xQueueReceive+0x46>
 8013608:	2300      	movs	r3, #0
 801360a:	2b00      	cmp	r3, #0
 801360c:	d10b      	bne.n	8013626 <xQueueReceive+0x62>
	__asm volatile
 801360e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013612:	f383 8811 	msr	BASEPRI, r3
 8013616:	f3bf 8f6f 	isb	sy
 801361a:	f3bf 8f4f 	dsb	sy
 801361e:	61fb      	str	r3, [r7, #28]
}
 8013620:	bf00      	nop
 8013622:	bf00      	nop
 8013624:	e7fd      	b.n	8013622 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013626:	f001 fb69 	bl	8014cfc <xTaskGetSchedulerState>
 801362a:	4603      	mov	r3, r0
 801362c:	2b00      	cmp	r3, #0
 801362e:	d102      	bne.n	8013636 <xQueueReceive+0x72>
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d101      	bne.n	801363a <xQueueReceive+0x76>
 8013636:	2301      	movs	r3, #1
 8013638:	e000      	b.n	801363c <xQueueReceive+0x78>
 801363a:	2300      	movs	r3, #0
 801363c:	2b00      	cmp	r3, #0
 801363e:	d10b      	bne.n	8013658 <xQueueReceive+0x94>
	__asm volatile
 8013640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013644:	f383 8811 	msr	BASEPRI, r3
 8013648:	f3bf 8f6f 	isb	sy
 801364c:	f3bf 8f4f 	dsb	sy
 8013650:	61bb      	str	r3, [r7, #24]
}
 8013652:	bf00      	nop
 8013654:	bf00      	nop
 8013656:	e7fd      	b.n	8013654 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013658:	f002 fc46 	bl	8015ee8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801365c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801365e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013660:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013664:	2b00      	cmp	r3, #0
 8013666:	d01f      	beq.n	80136a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013668:	68b9      	ldr	r1, [r7, #8]
 801366a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801366c:	f000 fac4 	bl	8013bf8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013672:	1e5a      	subs	r2, r3, #1
 8013674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013676:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801367a:	691b      	ldr	r3, [r3, #16]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d00f      	beq.n	80136a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013682:	3310      	adds	r3, #16
 8013684:	4618      	mov	r0, r3
 8013686:	f001 f8c7 	bl	8014818 <xTaskRemoveFromEventList>
 801368a:	4603      	mov	r3, r0
 801368c:	2b00      	cmp	r3, #0
 801368e:	d007      	beq.n	80136a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013690:	4b3c      	ldr	r3, [pc, #240]	@ (8013784 <xQueueReceive+0x1c0>)
 8013692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013696:	601a      	str	r2, [r3, #0]
 8013698:	f3bf 8f4f 	dsb	sy
 801369c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80136a0:	f002 fc54 	bl	8015f4c <vPortExitCritical>
				return pdPASS;
 80136a4:	2301      	movs	r3, #1
 80136a6:	e069      	b.n	801377c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d103      	bne.n	80136b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80136ae:	f002 fc4d 	bl	8015f4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80136b2:	2300      	movs	r3, #0
 80136b4:	e062      	b.n	801377c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80136b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d106      	bne.n	80136ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80136bc:	f107 0310 	add.w	r3, r7, #16
 80136c0:	4618      	mov	r0, r3
 80136c2:	f001 f971 	bl	80149a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80136c6:	2301      	movs	r3, #1
 80136c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80136ca:	f002 fc3f 	bl	8015f4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80136ce:	f000 fe25 	bl	801431c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80136d2:	f002 fc09 	bl	8015ee8 <vPortEnterCritical>
 80136d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80136dc:	b25b      	sxtb	r3, r3
 80136de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80136e2:	d103      	bne.n	80136ec <xQueueReceive+0x128>
 80136e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136e6:	2200      	movs	r2, #0
 80136e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80136ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80136f2:	b25b      	sxtb	r3, r3
 80136f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80136f8:	d103      	bne.n	8013702 <xQueueReceive+0x13e>
 80136fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136fc:	2200      	movs	r2, #0
 80136fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013702:	f002 fc23 	bl	8015f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013706:	1d3a      	adds	r2, r7, #4
 8013708:	f107 0310 	add.w	r3, r7, #16
 801370c:	4611      	mov	r1, r2
 801370e:	4618      	mov	r0, r3
 8013710:	f001 f960 	bl	80149d4 <xTaskCheckForTimeOut>
 8013714:	4603      	mov	r3, r0
 8013716:	2b00      	cmp	r3, #0
 8013718:	d123      	bne.n	8013762 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801371a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801371c:	f000 fae4 	bl	8013ce8 <prvIsQueueEmpty>
 8013720:	4603      	mov	r3, r0
 8013722:	2b00      	cmp	r3, #0
 8013724:	d017      	beq.n	8013756 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013728:	3324      	adds	r3, #36	@ 0x24
 801372a:	687a      	ldr	r2, [r7, #4]
 801372c:	4611      	mov	r1, r2
 801372e:	4618      	mov	r0, r3
 8013730:	f000 ffe2 	bl	80146f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013734:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013736:	f000 fa85 	bl	8013c44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801373a:	f000 fdfd 	bl	8014338 <xTaskResumeAll>
 801373e:	4603      	mov	r3, r0
 8013740:	2b00      	cmp	r3, #0
 8013742:	d189      	bne.n	8013658 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8013744:	4b0f      	ldr	r3, [pc, #60]	@ (8013784 <xQueueReceive+0x1c0>)
 8013746:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801374a:	601a      	str	r2, [r3, #0]
 801374c:	f3bf 8f4f 	dsb	sy
 8013750:	f3bf 8f6f 	isb	sy
 8013754:	e780      	b.n	8013658 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013756:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013758:	f000 fa74 	bl	8013c44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801375c:	f000 fdec 	bl	8014338 <xTaskResumeAll>
 8013760:	e77a      	b.n	8013658 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013762:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013764:	f000 fa6e 	bl	8013c44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013768:	f000 fde6 	bl	8014338 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801376c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801376e:	f000 fabb 	bl	8013ce8 <prvIsQueueEmpty>
 8013772:	4603      	mov	r3, r0
 8013774:	2b00      	cmp	r3, #0
 8013776:	f43f af6f 	beq.w	8013658 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801377a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801377c:	4618      	mov	r0, r3
 801377e:	3730      	adds	r7, #48	@ 0x30
 8013780:	46bd      	mov	sp, r7
 8013782:	bd80      	pop	{r7, pc}
 8013784:	e000ed04 	.word	0xe000ed04

08013788 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b08e      	sub	sp, #56	@ 0x38
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
 8013790:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013792:	2300      	movs	r3, #0
 8013794:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801379a:	2300      	movs	r3, #0
 801379c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801379e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d10b      	bne.n	80137bc <xQueueSemaphoreTake+0x34>
	__asm volatile
 80137a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137a8:	f383 8811 	msr	BASEPRI, r3
 80137ac:	f3bf 8f6f 	isb	sy
 80137b0:	f3bf 8f4f 	dsb	sy
 80137b4:	623b      	str	r3, [r7, #32]
}
 80137b6:	bf00      	nop
 80137b8:	bf00      	nop
 80137ba:	e7fd      	b.n	80137b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80137bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d00b      	beq.n	80137dc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80137c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137c8:	f383 8811 	msr	BASEPRI, r3
 80137cc:	f3bf 8f6f 	isb	sy
 80137d0:	f3bf 8f4f 	dsb	sy
 80137d4:	61fb      	str	r3, [r7, #28]
}
 80137d6:	bf00      	nop
 80137d8:	bf00      	nop
 80137da:	e7fd      	b.n	80137d8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80137dc:	f001 fa8e 	bl	8014cfc <xTaskGetSchedulerState>
 80137e0:	4603      	mov	r3, r0
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d102      	bne.n	80137ec <xQueueSemaphoreTake+0x64>
 80137e6:	683b      	ldr	r3, [r7, #0]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d101      	bne.n	80137f0 <xQueueSemaphoreTake+0x68>
 80137ec:	2301      	movs	r3, #1
 80137ee:	e000      	b.n	80137f2 <xQueueSemaphoreTake+0x6a>
 80137f0:	2300      	movs	r3, #0
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d10b      	bne.n	801380e <xQueueSemaphoreTake+0x86>
	__asm volatile
 80137f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137fa:	f383 8811 	msr	BASEPRI, r3
 80137fe:	f3bf 8f6f 	isb	sy
 8013802:	f3bf 8f4f 	dsb	sy
 8013806:	61bb      	str	r3, [r7, #24]
}
 8013808:	bf00      	nop
 801380a:	bf00      	nop
 801380c:	e7fd      	b.n	801380a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801380e:	f002 fb6b 	bl	8015ee8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013816:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801381a:	2b00      	cmp	r3, #0
 801381c:	d024      	beq.n	8013868 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801381e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013820:	1e5a      	subs	r2, r3, #1
 8013822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013824:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d104      	bne.n	8013838 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801382e:	f001 fbf7 	bl	8015020 <pvTaskIncrementMutexHeldCount>
 8013832:	4602      	mov	r2, r0
 8013834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013836:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801383a:	691b      	ldr	r3, [r3, #16]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d00f      	beq.n	8013860 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013842:	3310      	adds	r3, #16
 8013844:	4618      	mov	r0, r3
 8013846:	f000 ffe7 	bl	8014818 <xTaskRemoveFromEventList>
 801384a:	4603      	mov	r3, r0
 801384c:	2b00      	cmp	r3, #0
 801384e:	d007      	beq.n	8013860 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013850:	4b54      	ldr	r3, [pc, #336]	@ (80139a4 <xQueueSemaphoreTake+0x21c>)
 8013852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013856:	601a      	str	r2, [r3, #0]
 8013858:	f3bf 8f4f 	dsb	sy
 801385c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013860:	f002 fb74 	bl	8015f4c <vPortExitCritical>
				return pdPASS;
 8013864:	2301      	movs	r3, #1
 8013866:	e098      	b.n	801399a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013868:	683b      	ldr	r3, [r7, #0]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d112      	bne.n	8013894 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801386e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013870:	2b00      	cmp	r3, #0
 8013872:	d00b      	beq.n	801388c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8013874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013878:	f383 8811 	msr	BASEPRI, r3
 801387c:	f3bf 8f6f 	isb	sy
 8013880:	f3bf 8f4f 	dsb	sy
 8013884:	617b      	str	r3, [r7, #20]
}
 8013886:	bf00      	nop
 8013888:	bf00      	nop
 801388a:	e7fd      	b.n	8013888 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801388c:	f002 fb5e 	bl	8015f4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013890:	2300      	movs	r3, #0
 8013892:	e082      	b.n	801399a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013896:	2b00      	cmp	r3, #0
 8013898:	d106      	bne.n	80138a8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801389a:	f107 030c 	add.w	r3, r7, #12
 801389e:	4618      	mov	r0, r3
 80138a0:	f001 f882 	bl	80149a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80138a4:	2301      	movs	r3, #1
 80138a6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80138a8:	f002 fb50 	bl	8015f4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80138ac:	f000 fd36 	bl	801431c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80138b0:	f002 fb1a 	bl	8015ee8 <vPortEnterCritical>
 80138b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80138ba:	b25b      	sxtb	r3, r3
 80138bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80138c0:	d103      	bne.n	80138ca <xQueueSemaphoreTake+0x142>
 80138c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138c4:	2200      	movs	r2, #0
 80138c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80138ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80138d0:	b25b      	sxtb	r3, r3
 80138d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80138d6:	d103      	bne.n	80138e0 <xQueueSemaphoreTake+0x158>
 80138d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138da:	2200      	movs	r2, #0
 80138dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80138e0:	f002 fb34 	bl	8015f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80138e4:	463a      	mov	r2, r7
 80138e6:	f107 030c 	add.w	r3, r7, #12
 80138ea:	4611      	mov	r1, r2
 80138ec:	4618      	mov	r0, r3
 80138ee:	f001 f871 	bl	80149d4 <xTaskCheckForTimeOut>
 80138f2:	4603      	mov	r3, r0
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d132      	bne.n	801395e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80138f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80138fa:	f000 f9f5 	bl	8013ce8 <prvIsQueueEmpty>
 80138fe:	4603      	mov	r3, r0
 8013900:	2b00      	cmp	r3, #0
 8013902:	d026      	beq.n	8013952 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d109      	bne.n	8013920 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801390c:	f002 faec 	bl	8015ee8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013912:	689b      	ldr	r3, [r3, #8]
 8013914:	4618      	mov	r0, r3
 8013916:	f001 fa0f 	bl	8014d38 <xTaskPriorityInherit>
 801391a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 801391c:	f002 fb16 	bl	8015f4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013922:	3324      	adds	r3, #36	@ 0x24
 8013924:	683a      	ldr	r2, [r7, #0]
 8013926:	4611      	mov	r1, r2
 8013928:	4618      	mov	r0, r3
 801392a:	f000 fee5 	bl	80146f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801392e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013930:	f000 f988 	bl	8013c44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013934:	f000 fd00 	bl	8014338 <xTaskResumeAll>
 8013938:	4603      	mov	r3, r0
 801393a:	2b00      	cmp	r3, #0
 801393c:	f47f af67 	bne.w	801380e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8013940:	4b18      	ldr	r3, [pc, #96]	@ (80139a4 <xQueueSemaphoreTake+0x21c>)
 8013942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013946:	601a      	str	r2, [r3, #0]
 8013948:	f3bf 8f4f 	dsb	sy
 801394c:	f3bf 8f6f 	isb	sy
 8013950:	e75d      	b.n	801380e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013952:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013954:	f000 f976 	bl	8013c44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013958:	f000 fcee 	bl	8014338 <xTaskResumeAll>
 801395c:	e757      	b.n	801380e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801395e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013960:	f000 f970 	bl	8013c44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013964:	f000 fce8 	bl	8014338 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013968:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801396a:	f000 f9bd 	bl	8013ce8 <prvIsQueueEmpty>
 801396e:	4603      	mov	r3, r0
 8013970:	2b00      	cmp	r3, #0
 8013972:	f43f af4c 	beq.w	801380e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013978:	2b00      	cmp	r3, #0
 801397a:	d00d      	beq.n	8013998 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801397c:	f002 fab4 	bl	8015ee8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013980:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013982:	f000 f8b7 	bl	8013af4 <prvGetDisinheritPriorityAfterTimeout>
 8013986:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801398a:	689b      	ldr	r3, [r3, #8]
 801398c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801398e:	4618      	mov	r0, r3
 8013990:	f001 faaa 	bl	8014ee8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013994:	f002 fada 	bl	8015f4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013998:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801399a:	4618      	mov	r0, r3
 801399c:	3738      	adds	r7, #56	@ 0x38
 801399e:	46bd      	mov	sp, r7
 80139a0:	bd80      	pop	{r7, pc}
 80139a2:	bf00      	nop
 80139a4:	e000ed04 	.word	0xe000ed04

080139a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b08e      	sub	sp, #56	@ 0x38
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	60f8      	str	r0, [r7, #12]
 80139b0:	60b9      	str	r1, [r7, #8]
 80139b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80139b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d10b      	bne.n	80139d6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80139be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139c2:	f383 8811 	msr	BASEPRI, r3
 80139c6:	f3bf 8f6f 	isb	sy
 80139ca:	f3bf 8f4f 	dsb	sy
 80139ce:	623b      	str	r3, [r7, #32]
}
 80139d0:	bf00      	nop
 80139d2:	bf00      	nop
 80139d4:	e7fd      	b.n	80139d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80139d6:	68bb      	ldr	r3, [r7, #8]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d103      	bne.n	80139e4 <xQueueReceiveFromISR+0x3c>
 80139dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d101      	bne.n	80139e8 <xQueueReceiveFromISR+0x40>
 80139e4:	2301      	movs	r3, #1
 80139e6:	e000      	b.n	80139ea <xQueueReceiveFromISR+0x42>
 80139e8:	2300      	movs	r3, #0
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d10b      	bne.n	8013a06 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80139ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139f2:	f383 8811 	msr	BASEPRI, r3
 80139f6:	f3bf 8f6f 	isb	sy
 80139fa:	f3bf 8f4f 	dsb	sy
 80139fe:	61fb      	str	r3, [r7, #28]
}
 8013a00:	bf00      	nop
 8013a02:	bf00      	nop
 8013a04:	e7fd      	b.n	8013a02 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a06:	f002 fb4f 	bl	80160a8 <vPortValidateInterruptPriority>
	__asm volatile
 8013a0a:	f3ef 8211 	mrs	r2, BASEPRI
 8013a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a12:	f383 8811 	msr	BASEPRI, r3
 8013a16:	f3bf 8f6f 	isb	sy
 8013a1a:	f3bf 8f4f 	dsb	sy
 8013a1e:	61ba      	str	r2, [r7, #24]
 8013a20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013a22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a2a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d02f      	beq.n	8013a92 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013a38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013a3c:	68b9      	ldr	r1, [r7, #8]
 8013a3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a40:	f000 f8da 	bl	8013bf8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a46:	1e5a      	subs	r2, r3, #1
 8013a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a4a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013a4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013a50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013a54:	d112      	bne.n	8013a7c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a58:	691b      	ldr	r3, [r3, #16]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d016      	beq.n	8013a8c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a60:	3310      	adds	r3, #16
 8013a62:	4618      	mov	r0, r3
 8013a64:	f000 fed8 	bl	8014818 <xTaskRemoveFromEventList>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d00e      	beq.n	8013a8c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d00b      	beq.n	8013a8c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	2201      	movs	r2, #1
 8013a78:	601a      	str	r2, [r3, #0]
 8013a7a:	e007      	b.n	8013a8c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013a80:	3301      	adds	r3, #1
 8013a82:	b2db      	uxtb	r3, r3
 8013a84:	b25a      	sxtb	r2, r3
 8013a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8013a8c:	2301      	movs	r3, #1
 8013a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013a90:	e001      	b.n	8013a96 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8013a92:	2300      	movs	r3, #0
 8013a94:	637b      	str	r3, [r7, #52]	@ 0x34
 8013a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013a9a:	693b      	ldr	r3, [r7, #16]
 8013a9c:	f383 8811 	msr	BASEPRI, r3
}
 8013aa0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	3738      	adds	r7, #56	@ 0x38
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bd80      	pop	{r7, pc}

08013aac <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b084      	sub	sp, #16
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d10b      	bne.n	8013ad6 <vQueueDelete+0x2a>
	__asm volatile
 8013abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ac2:	f383 8811 	msr	BASEPRI, r3
 8013ac6:	f3bf 8f6f 	isb	sy
 8013aca:	f3bf 8f4f 	dsb	sy
 8013ace:	60bb      	str	r3, [r7, #8]
}
 8013ad0:	bf00      	nop
 8013ad2:	bf00      	nop
 8013ad4:	e7fd      	b.n	8013ad2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013ad6:	68f8      	ldr	r0, [r7, #12]
 8013ad8:	f000 f95e 	bl	8013d98 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d102      	bne.n	8013aec <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8013ae6:	68f8      	ldr	r0, [r7, #12]
 8013ae8:	f002 fbee 	bl	80162c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013aec:	bf00      	nop
 8013aee:	3710      	adds	r7, #16
 8013af0:	46bd      	mov	sp, r7
 8013af2:	bd80      	pop	{r7, pc}

08013af4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013af4:	b480      	push	{r7}
 8013af6:	b085      	sub	sp, #20
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d006      	beq.n	8013b12 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8013b0e:	60fb      	str	r3, [r7, #12]
 8013b10:	e001      	b.n	8013b16 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013b12:	2300      	movs	r3, #0
 8013b14:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013b16:	68fb      	ldr	r3, [r7, #12]
	}
 8013b18:	4618      	mov	r0, r3
 8013b1a:	3714      	adds	r7, #20
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b22:	4770      	bx	lr

08013b24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b086      	sub	sp, #24
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	60f8      	str	r0, [r7, #12]
 8013b2c:	60b9      	str	r1, [r7, #8]
 8013b2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013b30:	2300      	movs	r3, #0
 8013b32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d10d      	bne.n	8013b5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d14d      	bne.n	8013be6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	689b      	ldr	r3, [r3, #8]
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f001 f95a 	bl	8014e08 <xTaskPriorityDisinherit>
 8013b54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	2200      	movs	r2, #0
 8013b5a:	609a      	str	r2, [r3, #8]
 8013b5c:	e043      	b.n	8013be6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d119      	bne.n	8013b98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	6858      	ldr	r0, [r3, #4]
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b6c:	461a      	mov	r2, r3
 8013b6e:	68b9      	ldr	r1, [r7, #8]
 8013b70:	f003 f955 	bl	8016e1e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	685a      	ldr	r2, [r3, #4]
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b7c:	441a      	add	r2, r3
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	685a      	ldr	r2, [r3, #4]
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	689b      	ldr	r3, [r3, #8]
 8013b8a:	429a      	cmp	r2, r3
 8013b8c:	d32b      	bcc.n	8013be6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	681a      	ldr	r2, [r3, #0]
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	605a      	str	r2, [r3, #4]
 8013b96:	e026      	b.n	8013be6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	68d8      	ldr	r0, [r3, #12]
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ba0:	461a      	mov	r2, r3
 8013ba2:	68b9      	ldr	r1, [r7, #8]
 8013ba4:	f003 f93b 	bl	8016e1e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	68da      	ldr	r2, [r3, #12]
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bb0:	425b      	negs	r3, r3
 8013bb2:	441a      	add	r2, r3
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	68da      	ldr	r2, [r3, #12]
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	429a      	cmp	r2, r3
 8013bc2:	d207      	bcs.n	8013bd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	689a      	ldr	r2, [r3, #8]
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bcc:	425b      	negs	r3, r3
 8013bce:	441a      	add	r2, r3
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2b02      	cmp	r3, #2
 8013bd8:	d105      	bne.n	8013be6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013bda:	693b      	ldr	r3, [r7, #16]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d002      	beq.n	8013be6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013be0:	693b      	ldr	r3, [r7, #16]
 8013be2:	3b01      	subs	r3, #1
 8013be4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013be6:	693b      	ldr	r3, [r7, #16]
 8013be8:	1c5a      	adds	r2, r3, #1
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013bee:	697b      	ldr	r3, [r7, #20]
}
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	3718      	adds	r7, #24
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}

08013bf8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b082      	sub	sp, #8
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
 8013c00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d018      	beq.n	8013c3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	68da      	ldr	r2, [r3, #12]
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c12:	441a      	add	r2, r3
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	68da      	ldr	r2, [r3, #12]
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	689b      	ldr	r3, [r3, #8]
 8013c20:	429a      	cmp	r2, r3
 8013c22:	d303      	bcc.n	8013c2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681a      	ldr	r2, [r3, #0]
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	68d9      	ldr	r1, [r3, #12]
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c34:	461a      	mov	r2, r3
 8013c36:	6838      	ldr	r0, [r7, #0]
 8013c38:	f003 f8f1 	bl	8016e1e <memcpy>
	}
}
 8013c3c:	bf00      	nop
 8013c3e:	3708      	adds	r7, #8
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bd80      	pop	{r7, pc}

08013c44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b084      	sub	sp, #16
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013c4c:	f002 f94c 	bl	8015ee8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013c56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013c58:	e011      	b.n	8013c7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d012      	beq.n	8013c88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	3324      	adds	r3, #36	@ 0x24
 8013c66:	4618      	mov	r0, r3
 8013c68:	f000 fdd6 	bl	8014818 <xTaskRemoveFromEventList>
 8013c6c:	4603      	mov	r3, r0
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d001      	beq.n	8013c76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013c72:	f000 ff13 	bl	8014a9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013c76:	7bfb      	ldrb	r3, [r7, #15]
 8013c78:	3b01      	subs	r3, #1
 8013c7a:	b2db      	uxtb	r3, r3
 8013c7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	dce9      	bgt.n	8013c5a <prvUnlockQueue+0x16>
 8013c86:	e000      	b.n	8013c8a <prvUnlockQueue+0x46>
					break;
 8013c88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	22ff      	movs	r2, #255	@ 0xff
 8013c8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013c92:	f002 f95b 	bl	8015f4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013c96:	f002 f927 	bl	8015ee8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013ca0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013ca2:	e011      	b.n	8013cc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	691b      	ldr	r3, [r3, #16]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d012      	beq.n	8013cd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	3310      	adds	r3, #16
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	f000 fdb1 	bl	8014818 <xTaskRemoveFromEventList>
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d001      	beq.n	8013cc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013cbc:	f000 feee 	bl	8014a9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013cc0:	7bbb      	ldrb	r3, [r7, #14]
 8013cc2:	3b01      	subs	r3, #1
 8013cc4:	b2db      	uxtb	r3, r3
 8013cc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013cc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	dce9      	bgt.n	8013ca4 <prvUnlockQueue+0x60>
 8013cd0:	e000      	b.n	8013cd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013cd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	22ff      	movs	r2, #255	@ 0xff
 8013cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013cdc:	f002 f936 	bl	8015f4c <vPortExitCritical>
}
 8013ce0:	bf00      	nop
 8013ce2:	3710      	adds	r7, #16
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}

08013ce8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b084      	sub	sp, #16
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013cf0:	f002 f8fa 	bl	8015ee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d102      	bne.n	8013d02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	60fb      	str	r3, [r7, #12]
 8013d00:	e001      	b.n	8013d06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013d02:	2300      	movs	r3, #0
 8013d04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013d06:	f002 f921 	bl	8015f4c <vPortExitCritical>

	return xReturn;
 8013d0a:	68fb      	ldr	r3, [r7, #12]
}
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	3710      	adds	r7, #16
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}

08013d14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b084      	sub	sp, #16
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013d1c:	f002 f8e4 	bl	8015ee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013d28:	429a      	cmp	r2, r3
 8013d2a:	d102      	bne.n	8013d32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013d2c:	2301      	movs	r3, #1
 8013d2e:	60fb      	str	r3, [r7, #12]
 8013d30:	e001      	b.n	8013d36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013d32:	2300      	movs	r3, #0
 8013d34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013d36:	f002 f909 	bl	8015f4c <vPortExitCritical>

	return xReturn;
 8013d3a:	68fb      	ldr	r3, [r7, #12]
}
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	3710      	adds	r7, #16
 8013d40:	46bd      	mov	sp, r7
 8013d42:	bd80      	pop	{r7, pc}

08013d44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013d44:	b480      	push	{r7}
 8013d46:	b085      	sub	sp, #20
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
 8013d4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013d4e:	2300      	movs	r3, #0
 8013d50:	60fb      	str	r3, [r7, #12]
 8013d52:	e014      	b.n	8013d7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013d54:	4a0f      	ldr	r2, [pc, #60]	@ (8013d94 <vQueueAddToRegistry+0x50>)
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d10b      	bne.n	8013d78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013d60:	490c      	ldr	r1, [pc, #48]	@ (8013d94 <vQueueAddToRegistry+0x50>)
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	683a      	ldr	r2, [r7, #0]
 8013d66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8013d94 <vQueueAddToRegistry+0x50>)
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	00db      	lsls	r3, r3, #3
 8013d70:	4413      	add	r3, r2
 8013d72:	687a      	ldr	r2, [r7, #4]
 8013d74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013d76:	e006      	b.n	8013d86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	3301      	adds	r3, #1
 8013d7c:	60fb      	str	r3, [r7, #12]
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	2b07      	cmp	r3, #7
 8013d82:	d9e7      	bls.n	8013d54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013d84:	bf00      	nop
 8013d86:	bf00      	nop
 8013d88:	3714      	adds	r7, #20
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d90:	4770      	bx	lr
 8013d92:	bf00      	nop
 8013d94:	240010d4 	.word	0x240010d4

08013d98 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013d98:	b480      	push	{r7}
 8013d9a:	b085      	sub	sp, #20
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013da0:	2300      	movs	r3, #0
 8013da2:	60fb      	str	r3, [r7, #12]
 8013da4:	e016      	b.n	8013dd4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013da6:	4a10      	ldr	r2, [pc, #64]	@ (8013de8 <vQueueUnregisterQueue+0x50>)
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	00db      	lsls	r3, r3, #3
 8013dac:	4413      	add	r3, r2
 8013dae:	685b      	ldr	r3, [r3, #4]
 8013db0:	687a      	ldr	r2, [r7, #4]
 8013db2:	429a      	cmp	r2, r3
 8013db4:	d10b      	bne.n	8013dce <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013db6:	4a0c      	ldr	r2, [pc, #48]	@ (8013de8 <vQueueUnregisterQueue+0x50>)
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	2100      	movs	r1, #0
 8013dbc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013dc0:	4a09      	ldr	r2, [pc, #36]	@ (8013de8 <vQueueUnregisterQueue+0x50>)
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	00db      	lsls	r3, r3, #3
 8013dc6:	4413      	add	r3, r2
 8013dc8:	2200      	movs	r2, #0
 8013dca:	605a      	str	r2, [r3, #4]
				break;
 8013dcc:	e006      	b.n	8013ddc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	3301      	adds	r3, #1
 8013dd2:	60fb      	str	r3, [r7, #12]
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	2b07      	cmp	r3, #7
 8013dd8:	d9e5      	bls.n	8013da6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013dda:	bf00      	nop
 8013ddc:	bf00      	nop
 8013dde:	3714      	adds	r7, #20
 8013de0:	46bd      	mov	sp, r7
 8013de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de6:	4770      	bx	lr
 8013de8:	240010d4 	.word	0x240010d4

08013dec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b086      	sub	sp, #24
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	60f8      	str	r0, [r7, #12]
 8013df4:	60b9      	str	r1, [r7, #8]
 8013df6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013dfc:	f002 f874 	bl	8015ee8 <vPortEnterCritical>
 8013e00:	697b      	ldr	r3, [r7, #20]
 8013e02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013e06:	b25b      	sxtb	r3, r3
 8013e08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013e0c:	d103      	bne.n	8013e16 <vQueueWaitForMessageRestricted+0x2a>
 8013e0e:	697b      	ldr	r3, [r7, #20]
 8013e10:	2200      	movs	r2, #0
 8013e12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013e16:	697b      	ldr	r3, [r7, #20]
 8013e18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013e1c:	b25b      	sxtb	r3, r3
 8013e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013e22:	d103      	bne.n	8013e2c <vQueueWaitForMessageRestricted+0x40>
 8013e24:	697b      	ldr	r3, [r7, #20]
 8013e26:	2200      	movs	r2, #0
 8013e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013e2c:	f002 f88e 	bl	8015f4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013e30:	697b      	ldr	r3, [r7, #20]
 8013e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d106      	bne.n	8013e46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013e38:	697b      	ldr	r3, [r7, #20]
 8013e3a:	3324      	adds	r3, #36	@ 0x24
 8013e3c:	687a      	ldr	r2, [r7, #4]
 8013e3e:	68b9      	ldr	r1, [r7, #8]
 8013e40:	4618      	mov	r0, r3
 8013e42:	f000 fcbd 	bl	80147c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013e46:	6978      	ldr	r0, [r7, #20]
 8013e48:	f7ff fefc 	bl	8013c44 <prvUnlockQueue>
	}
 8013e4c:	bf00      	nop
 8013e4e:	3718      	adds	r7, #24
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}

08013e54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b08e      	sub	sp, #56	@ 0x38
 8013e58:	af04      	add	r7, sp, #16
 8013e5a:	60f8      	str	r0, [r7, #12]
 8013e5c:	60b9      	str	r1, [r7, #8]
 8013e5e:	607a      	str	r2, [r7, #4]
 8013e60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d10b      	bne.n	8013e80 <xTaskCreateStatic+0x2c>
	__asm volatile
 8013e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e6c:	f383 8811 	msr	BASEPRI, r3
 8013e70:	f3bf 8f6f 	isb	sy
 8013e74:	f3bf 8f4f 	dsb	sy
 8013e78:	623b      	str	r3, [r7, #32]
}
 8013e7a:	bf00      	nop
 8013e7c:	bf00      	nop
 8013e7e:	e7fd      	b.n	8013e7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d10b      	bne.n	8013e9e <xTaskCreateStatic+0x4a>
	__asm volatile
 8013e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e8a:	f383 8811 	msr	BASEPRI, r3
 8013e8e:	f3bf 8f6f 	isb	sy
 8013e92:	f3bf 8f4f 	dsb	sy
 8013e96:	61fb      	str	r3, [r7, #28]
}
 8013e98:	bf00      	nop
 8013e9a:	bf00      	nop
 8013e9c:	e7fd      	b.n	8013e9a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013e9e:	23a8      	movs	r3, #168	@ 0xa8
 8013ea0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013ea2:	693b      	ldr	r3, [r7, #16]
 8013ea4:	2ba8      	cmp	r3, #168	@ 0xa8
 8013ea6:	d00b      	beq.n	8013ec0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8013ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013eac:	f383 8811 	msr	BASEPRI, r3
 8013eb0:	f3bf 8f6f 	isb	sy
 8013eb4:	f3bf 8f4f 	dsb	sy
 8013eb8:	61bb      	str	r3, [r7, #24]
}
 8013eba:	bf00      	nop
 8013ebc:	bf00      	nop
 8013ebe:	e7fd      	b.n	8013ebc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013ec0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d01e      	beq.n	8013f06 <xTaskCreateStatic+0xb2>
 8013ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d01b      	beq.n	8013f06 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ed0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ed4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013ed6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eda:	2202      	movs	r2, #2
 8013edc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	9303      	str	r3, [sp, #12]
 8013ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ee6:	9302      	str	r3, [sp, #8]
 8013ee8:	f107 0314 	add.w	r3, r7, #20
 8013eec:	9301      	str	r3, [sp, #4]
 8013eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ef0:	9300      	str	r3, [sp, #0]
 8013ef2:	683b      	ldr	r3, [r7, #0]
 8013ef4:	687a      	ldr	r2, [r7, #4]
 8013ef6:	68b9      	ldr	r1, [r7, #8]
 8013ef8:	68f8      	ldr	r0, [r7, #12]
 8013efa:	f000 f851 	bl	8013fa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013efe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013f00:	f000 f8f6 	bl	80140f0 <prvAddNewTaskToReadyList>
 8013f04:	e001      	b.n	8013f0a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8013f06:	2300      	movs	r3, #0
 8013f08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013f0a:	697b      	ldr	r3, [r7, #20]
	}
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	3728      	adds	r7, #40	@ 0x28
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}

08013f14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b08c      	sub	sp, #48	@ 0x30
 8013f18:	af04      	add	r7, sp, #16
 8013f1a:	60f8      	str	r0, [r7, #12]
 8013f1c:	60b9      	str	r1, [r7, #8]
 8013f1e:	603b      	str	r3, [r7, #0]
 8013f20:	4613      	mov	r3, r2
 8013f22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013f24:	88fb      	ldrh	r3, [r7, #6]
 8013f26:	009b      	lsls	r3, r3, #2
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f002 f8ff 	bl	801612c <pvPortMalloc>
 8013f2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013f30:	697b      	ldr	r3, [r7, #20]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d00e      	beq.n	8013f54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013f36:	20a8      	movs	r0, #168	@ 0xa8
 8013f38:	f002 f8f8 	bl	801612c <pvPortMalloc>
 8013f3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013f3e:	69fb      	ldr	r3, [r7, #28]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d003      	beq.n	8013f4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013f44:	69fb      	ldr	r3, [r7, #28]
 8013f46:	697a      	ldr	r2, [r7, #20]
 8013f48:	631a      	str	r2, [r3, #48]	@ 0x30
 8013f4a:	e005      	b.n	8013f58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013f4c:	6978      	ldr	r0, [r7, #20]
 8013f4e:	f002 f9bb 	bl	80162c8 <vPortFree>
 8013f52:	e001      	b.n	8013f58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013f54:	2300      	movs	r3, #0
 8013f56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013f58:	69fb      	ldr	r3, [r7, #28]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d017      	beq.n	8013f8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013f5e:	69fb      	ldr	r3, [r7, #28]
 8013f60:	2200      	movs	r2, #0
 8013f62:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013f66:	88fa      	ldrh	r2, [r7, #6]
 8013f68:	2300      	movs	r3, #0
 8013f6a:	9303      	str	r3, [sp, #12]
 8013f6c:	69fb      	ldr	r3, [r7, #28]
 8013f6e:	9302      	str	r3, [sp, #8]
 8013f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f72:	9301      	str	r3, [sp, #4]
 8013f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f76:	9300      	str	r3, [sp, #0]
 8013f78:	683b      	ldr	r3, [r7, #0]
 8013f7a:	68b9      	ldr	r1, [r7, #8]
 8013f7c:	68f8      	ldr	r0, [r7, #12]
 8013f7e:	f000 f80f 	bl	8013fa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013f82:	69f8      	ldr	r0, [r7, #28]
 8013f84:	f000 f8b4 	bl	80140f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013f88:	2301      	movs	r3, #1
 8013f8a:	61bb      	str	r3, [r7, #24]
 8013f8c:	e002      	b.n	8013f94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013f8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013f92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013f94:	69bb      	ldr	r3, [r7, #24]
	}
 8013f96:	4618      	mov	r0, r3
 8013f98:	3720      	adds	r7, #32
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	bd80      	pop	{r7, pc}
	...

08013fa0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b088      	sub	sp, #32
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	60f8      	str	r0, [r7, #12]
 8013fa8:	60b9      	str	r1, [r7, #8]
 8013faa:	607a      	str	r2, [r7, #4]
 8013fac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fb0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	009b      	lsls	r3, r3, #2
 8013fb6:	461a      	mov	r2, r3
 8013fb8:	21a5      	movs	r1, #165	@ 0xa5
 8013fba:	f002 fe47 	bl	8016c4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013fc2:	6879      	ldr	r1, [r7, #4]
 8013fc4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8013fc8:	440b      	add	r3, r1
 8013fca:	009b      	lsls	r3, r3, #2
 8013fcc:	4413      	add	r3, r2
 8013fce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013fd0:	69bb      	ldr	r3, [r7, #24]
 8013fd2:	f023 0307 	bic.w	r3, r3, #7
 8013fd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013fd8:	69bb      	ldr	r3, [r7, #24]
 8013fda:	f003 0307 	and.w	r3, r3, #7
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d00b      	beq.n	8013ffa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8013fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fe6:	f383 8811 	msr	BASEPRI, r3
 8013fea:	f3bf 8f6f 	isb	sy
 8013fee:	f3bf 8f4f 	dsb	sy
 8013ff2:	617b      	str	r3, [r7, #20]
}
 8013ff4:	bf00      	nop
 8013ff6:	bf00      	nop
 8013ff8:	e7fd      	b.n	8013ff6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d01f      	beq.n	8014040 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014000:	2300      	movs	r3, #0
 8014002:	61fb      	str	r3, [r7, #28]
 8014004:	e012      	b.n	801402c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014006:	68ba      	ldr	r2, [r7, #8]
 8014008:	69fb      	ldr	r3, [r7, #28]
 801400a:	4413      	add	r3, r2
 801400c:	7819      	ldrb	r1, [r3, #0]
 801400e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014010:	69fb      	ldr	r3, [r7, #28]
 8014012:	4413      	add	r3, r2
 8014014:	3334      	adds	r3, #52	@ 0x34
 8014016:	460a      	mov	r2, r1
 8014018:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801401a:	68ba      	ldr	r2, [r7, #8]
 801401c:	69fb      	ldr	r3, [r7, #28]
 801401e:	4413      	add	r3, r2
 8014020:	781b      	ldrb	r3, [r3, #0]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d006      	beq.n	8014034 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014026:	69fb      	ldr	r3, [r7, #28]
 8014028:	3301      	adds	r3, #1
 801402a:	61fb      	str	r3, [r7, #28]
 801402c:	69fb      	ldr	r3, [r7, #28]
 801402e:	2b0f      	cmp	r3, #15
 8014030:	d9e9      	bls.n	8014006 <prvInitialiseNewTask+0x66>
 8014032:	e000      	b.n	8014036 <prvInitialiseNewTask+0x96>
			{
				break;
 8014034:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014038:	2200      	movs	r2, #0
 801403a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801403e:	e003      	b.n	8014048 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014042:	2200      	movs	r2, #0
 8014044:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801404a:	2b37      	cmp	r3, #55	@ 0x37
 801404c:	d901      	bls.n	8014052 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801404e:	2337      	movs	r3, #55	@ 0x37
 8014050:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014054:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014056:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801405a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801405c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801405e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014060:	2200      	movs	r2, #0
 8014062:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014066:	3304      	adds	r3, #4
 8014068:	4618      	mov	r0, r3
 801406a:	f7fe fe33 	bl	8012cd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801406e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014070:	3318      	adds	r3, #24
 8014072:	4618      	mov	r0, r3
 8014074:	f7fe fe2e 	bl	8012cd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801407a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801407c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801407e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014080:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014086:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801408a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801408c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801408e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014090:	2200      	movs	r2, #0
 8014092:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014098:	2200      	movs	r2, #0
 801409a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801409e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140a0:	3354      	adds	r3, #84	@ 0x54
 80140a2:	224c      	movs	r2, #76	@ 0x4c
 80140a4:	2100      	movs	r1, #0
 80140a6:	4618      	mov	r0, r3
 80140a8:	f002 fdd0 	bl	8016c4c <memset>
 80140ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140ae:	4a0d      	ldr	r2, [pc, #52]	@ (80140e4 <prvInitialiseNewTask+0x144>)
 80140b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80140b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140b4:	4a0c      	ldr	r2, [pc, #48]	@ (80140e8 <prvInitialiseNewTask+0x148>)
 80140b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80140b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140ba:	4a0c      	ldr	r2, [pc, #48]	@ (80140ec <prvInitialiseNewTask+0x14c>)
 80140bc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80140be:	683a      	ldr	r2, [r7, #0]
 80140c0:	68f9      	ldr	r1, [r7, #12]
 80140c2:	69b8      	ldr	r0, [r7, #24]
 80140c4:	f001 fde0 	bl	8015c88 <pxPortInitialiseStack>
 80140c8:	4602      	mov	r2, r0
 80140ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80140ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d002      	beq.n	80140da <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80140d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80140d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80140da:	bf00      	nop
 80140dc:	3720      	adds	r7, #32
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd80      	pop	{r7, pc}
 80140e2:	bf00      	nop
 80140e4:	24005370 	.word	0x24005370
 80140e8:	240053d8 	.word	0x240053d8
 80140ec:	24005440 	.word	0x24005440

080140f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b082      	sub	sp, #8
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80140f8:	f001 fef6 	bl	8015ee8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80140fc:	4b2d      	ldr	r3, [pc, #180]	@ (80141b4 <prvAddNewTaskToReadyList+0xc4>)
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	3301      	adds	r3, #1
 8014102:	4a2c      	ldr	r2, [pc, #176]	@ (80141b4 <prvAddNewTaskToReadyList+0xc4>)
 8014104:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014106:	4b2c      	ldr	r3, [pc, #176]	@ (80141b8 <prvAddNewTaskToReadyList+0xc8>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d109      	bne.n	8014122 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801410e:	4a2a      	ldr	r2, [pc, #168]	@ (80141b8 <prvAddNewTaskToReadyList+0xc8>)
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014114:	4b27      	ldr	r3, [pc, #156]	@ (80141b4 <prvAddNewTaskToReadyList+0xc4>)
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	2b01      	cmp	r3, #1
 801411a:	d110      	bne.n	801413e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801411c:	f000 fce2 	bl	8014ae4 <prvInitialiseTaskLists>
 8014120:	e00d      	b.n	801413e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014122:	4b26      	ldr	r3, [pc, #152]	@ (80141bc <prvAddNewTaskToReadyList+0xcc>)
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d109      	bne.n	801413e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801412a:	4b23      	ldr	r3, [pc, #140]	@ (80141b8 <prvAddNewTaskToReadyList+0xc8>)
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014134:	429a      	cmp	r2, r3
 8014136:	d802      	bhi.n	801413e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014138:	4a1f      	ldr	r2, [pc, #124]	@ (80141b8 <prvAddNewTaskToReadyList+0xc8>)
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801413e:	4b20      	ldr	r3, [pc, #128]	@ (80141c0 <prvAddNewTaskToReadyList+0xd0>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	3301      	adds	r3, #1
 8014144:	4a1e      	ldr	r2, [pc, #120]	@ (80141c0 <prvAddNewTaskToReadyList+0xd0>)
 8014146:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014148:	4b1d      	ldr	r3, [pc, #116]	@ (80141c0 <prvAddNewTaskToReadyList+0xd0>)
 801414a:	681a      	ldr	r2, [r3, #0]
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014154:	4b1b      	ldr	r3, [pc, #108]	@ (80141c4 <prvAddNewTaskToReadyList+0xd4>)
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	429a      	cmp	r2, r3
 801415a:	d903      	bls.n	8014164 <prvAddNewTaskToReadyList+0x74>
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014160:	4a18      	ldr	r2, [pc, #96]	@ (80141c4 <prvAddNewTaskToReadyList+0xd4>)
 8014162:	6013      	str	r3, [r2, #0]
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014168:	4613      	mov	r3, r2
 801416a:	009b      	lsls	r3, r3, #2
 801416c:	4413      	add	r3, r2
 801416e:	009b      	lsls	r3, r3, #2
 8014170:	4a15      	ldr	r2, [pc, #84]	@ (80141c8 <prvAddNewTaskToReadyList+0xd8>)
 8014172:	441a      	add	r2, r3
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	3304      	adds	r3, #4
 8014178:	4619      	mov	r1, r3
 801417a:	4610      	mov	r0, r2
 801417c:	f7fe fdb7 	bl	8012cee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014180:	f001 fee4 	bl	8015f4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014184:	4b0d      	ldr	r3, [pc, #52]	@ (80141bc <prvAddNewTaskToReadyList+0xcc>)
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d00e      	beq.n	80141aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801418c:	4b0a      	ldr	r3, [pc, #40]	@ (80141b8 <prvAddNewTaskToReadyList+0xc8>)
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014196:	429a      	cmp	r2, r3
 8014198:	d207      	bcs.n	80141aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801419a:	4b0c      	ldr	r3, [pc, #48]	@ (80141cc <prvAddNewTaskToReadyList+0xdc>)
 801419c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80141a0:	601a      	str	r2, [r3, #0]
 80141a2:	f3bf 8f4f 	dsb	sy
 80141a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80141aa:	bf00      	nop
 80141ac:	3708      	adds	r7, #8
 80141ae:	46bd      	mov	sp, r7
 80141b0:	bd80      	pop	{r7, pc}
 80141b2:	bf00      	nop
 80141b4:	240015e8 	.word	0x240015e8
 80141b8:	24001114 	.word	0x24001114
 80141bc:	240015f4 	.word	0x240015f4
 80141c0:	24001604 	.word	0x24001604
 80141c4:	240015f0 	.word	0x240015f0
 80141c8:	24001118 	.word	0x24001118
 80141cc:	e000ed04 	.word	0xe000ed04

080141d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b084      	sub	sp, #16
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80141d8:	2300      	movs	r3, #0
 80141da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d018      	beq.n	8014214 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80141e2:	4b14      	ldr	r3, [pc, #80]	@ (8014234 <vTaskDelay+0x64>)
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d00b      	beq.n	8014202 <vTaskDelay+0x32>
	__asm volatile
 80141ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141ee:	f383 8811 	msr	BASEPRI, r3
 80141f2:	f3bf 8f6f 	isb	sy
 80141f6:	f3bf 8f4f 	dsb	sy
 80141fa:	60bb      	str	r3, [r7, #8]
}
 80141fc:	bf00      	nop
 80141fe:	bf00      	nop
 8014200:	e7fd      	b.n	80141fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014202:	f000 f88b 	bl	801431c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014206:	2100      	movs	r1, #0
 8014208:	6878      	ldr	r0, [r7, #4]
 801420a:	f001 f911 	bl	8015430 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801420e:	f000 f893 	bl	8014338 <xTaskResumeAll>
 8014212:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d107      	bne.n	801422a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801421a:	4b07      	ldr	r3, [pc, #28]	@ (8014238 <vTaskDelay+0x68>)
 801421c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014220:	601a      	str	r2, [r3, #0]
 8014222:	f3bf 8f4f 	dsb	sy
 8014226:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801422a:	bf00      	nop
 801422c:	3710      	adds	r7, #16
 801422e:	46bd      	mov	sp, r7
 8014230:	bd80      	pop	{r7, pc}
 8014232:	bf00      	nop
 8014234:	24001610 	.word	0x24001610
 8014238:	e000ed04 	.word	0xe000ed04

0801423c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b08a      	sub	sp, #40	@ 0x28
 8014240:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014242:	2300      	movs	r3, #0
 8014244:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014246:	2300      	movs	r3, #0
 8014248:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801424a:	463a      	mov	r2, r7
 801424c:	1d39      	adds	r1, r7, #4
 801424e:	f107 0308 	add.w	r3, r7, #8
 8014252:	4618      	mov	r0, r3
 8014254:	f7fe fb2e 	bl	80128b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014258:	6839      	ldr	r1, [r7, #0]
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	68ba      	ldr	r2, [r7, #8]
 801425e:	9202      	str	r2, [sp, #8]
 8014260:	9301      	str	r3, [sp, #4]
 8014262:	2300      	movs	r3, #0
 8014264:	9300      	str	r3, [sp, #0]
 8014266:	2300      	movs	r3, #0
 8014268:	460a      	mov	r2, r1
 801426a:	4924      	ldr	r1, [pc, #144]	@ (80142fc <vTaskStartScheduler+0xc0>)
 801426c:	4824      	ldr	r0, [pc, #144]	@ (8014300 <vTaskStartScheduler+0xc4>)
 801426e:	f7ff fdf1 	bl	8013e54 <xTaskCreateStatic>
 8014272:	4603      	mov	r3, r0
 8014274:	4a23      	ldr	r2, [pc, #140]	@ (8014304 <vTaskStartScheduler+0xc8>)
 8014276:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014278:	4b22      	ldr	r3, [pc, #136]	@ (8014304 <vTaskStartScheduler+0xc8>)
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d002      	beq.n	8014286 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014280:	2301      	movs	r3, #1
 8014282:	617b      	str	r3, [r7, #20]
 8014284:	e001      	b.n	801428a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014286:	2300      	movs	r3, #0
 8014288:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801428a:	697b      	ldr	r3, [r7, #20]
 801428c:	2b01      	cmp	r3, #1
 801428e:	d102      	bne.n	8014296 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014290:	f001 f922 	bl	80154d8 <xTimerCreateTimerTask>
 8014294:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014296:	697b      	ldr	r3, [r7, #20]
 8014298:	2b01      	cmp	r3, #1
 801429a:	d11b      	bne.n	80142d4 <vTaskStartScheduler+0x98>
	__asm volatile
 801429c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142a0:	f383 8811 	msr	BASEPRI, r3
 80142a4:	f3bf 8f6f 	isb	sy
 80142a8:	f3bf 8f4f 	dsb	sy
 80142ac:	613b      	str	r3, [r7, #16]
}
 80142ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80142b0:	4b15      	ldr	r3, [pc, #84]	@ (8014308 <vTaskStartScheduler+0xcc>)
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	3354      	adds	r3, #84	@ 0x54
 80142b6:	4a15      	ldr	r2, [pc, #84]	@ (801430c <vTaskStartScheduler+0xd0>)
 80142b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80142ba:	4b15      	ldr	r3, [pc, #84]	@ (8014310 <vTaskStartScheduler+0xd4>)
 80142bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80142c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80142c2:	4b14      	ldr	r3, [pc, #80]	@ (8014314 <vTaskStartScheduler+0xd8>)
 80142c4:	2201      	movs	r2, #1
 80142c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80142c8:	4b13      	ldr	r3, [pc, #76]	@ (8014318 <vTaskStartScheduler+0xdc>)
 80142ca:	2200      	movs	r2, #0
 80142cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80142ce:	f001 fd67 	bl	8015da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80142d2:	e00f      	b.n	80142f4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80142da:	d10b      	bne.n	80142f4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80142dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142e0:	f383 8811 	msr	BASEPRI, r3
 80142e4:	f3bf 8f6f 	isb	sy
 80142e8:	f3bf 8f4f 	dsb	sy
 80142ec:	60fb      	str	r3, [r7, #12]
}
 80142ee:	bf00      	nop
 80142f0:	bf00      	nop
 80142f2:	e7fd      	b.n	80142f0 <vTaskStartScheduler+0xb4>
}
 80142f4:	bf00      	nop
 80142f6:	3718      	adds	r7, #24
 80142f8:	46bd      	mov	sp, r7
 80142fa:	bd80      	pop	{r7, pc}
 80142fc:	08017c50 	.word	0x08017c50
 8014300:	08014ab5 	.word	0x08014ab5
 8014304:	2400160c 	.word	0x2400160c
 8014308:	24001114 	.word	0x24001114
 801430c:	24000020 	.word	0x24000020
 8014310:	24001608 	.word	0x24001608
 8014314:	240015f4 	.word	0x240015f4
 8014318:	240015ec 	.word	0x240015ec

0801431c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801431c:	b480      	push	{r7}
 801431e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014320:	4b04      	ldr	r3, [pc, #16]	@ (8014334 <vTaskSuspendAll+0x18>)
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	3301      	adds	r3, #1
 8014326:	4a03      	ldr	r2, [pc, #12]	@ (8014334 <vTaskSuspendAll+0x18>)
 8014328:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801432a:	bf00      	nop
 801432c:	46bd      	mov	sp, r7
 801432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014332:	4770      	bx	lr
 8014334:	24001610 	.word	0x24001610

08014338 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b084      	sub	sp, #16
 801433c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801433e:	2300      	movs	r3, #0
 8014340:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014342:	2300      	movs	r3, #0
 8014344:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014346:	4b42      	ldr	r3, [pc, #264]	@ (8014450 <xTaskResumeAll+0x118>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d10b      	bne.n	8014366 <xTaskResumeAll+0x2e>
	__asm volatile
 801434e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014352:	f383 8811 	msr	BASEPRI, r3
 8014356:	f3bf 8f6f 	isb	sy
 801435a:	f3bf 8f4f 	dsb	sy
 801435e:	603b      	str	r3, [r7, #0]
}
 8014360:	bf00      	nop
 8014362:	bf00      	nop
 8014364:	e7fd      	b.n	8014362 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014366:	f001 fdbf 	bl	8015ee8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801436a:	4b39      	ldr	r3, [pc, #228]	@ (8014450 <xTaskResumeAll+0x118>)
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	3b01      	subs	r3, #1
 8014370:	4a37      	ldr	r2, [pc, #220]	@ (8014450 <xTaskResumeAll+0x118>)
 8014372:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014374:	4b36      	ldr	r3, [pc, #216]	@ (8014450 <xTaskResumeAll+0x118>)
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d162      	bne.n	8014442 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801437c:	4b35      	ldr	r3, [pc, #212]	@ (8014454 <xTaskResumeAll+0x11c>)
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d05e      	beq.n	8014442 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014384:	e02f      	b.n	80143e6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014386:	4b34      	ldr	r3, [pc, #208]	@ (8014458 <xTaskResumeAll+0x120>)
 8014388:	68db      	ldr	r3, [r3, #12]
 801438a:	68db      	ldr	r3, [r3, #12]
 801438c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	3318      	adds	r3, #24
 8014392:	4618      	mov	r0, r3
 8014394:	f7fe fd08 	bl	8012da8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	3304      	adds	r3, #4
 801439c:	4618      	mov	r0, r3
 801439e:	f7fe fd03 	bl	8012da8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80143a6:	4b2d      	ldr	r3, [pc, #180]	@ (801445c <xTaskResumeAll+0x124>)
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	429a      	cmp	r2, r3
 80143ac:	d903      	bls.n	80143b6 <xTaskResumeAll+0x7e>
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143b2:	4a2a      	ldr	r2, [pc, #168]	@ (801445c <xTaskResumeAll+0x124>)
 80143b4:	6013      	str	r3, [r2, #0]
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80143ba:	4613      	mov	r3, r2
 80143bc:	009b      	lsls	r3, r3, #2
 80143be:	4413      	add	r3, r2
 80143c0:	009b      	lsls	r3, r3, #2
 80143c2:	4a27      	ldr	r2, [pc, #156]	@ (8014460 <xTaskResumeAll+0x128>)
 80143c4:	441a      	add	r2, r3
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	3304      	adds	r3, #4
 80143ca:	4619      	mov	r1, r3
 80143cc:	4610      	mov	r0, r2
 80143ce:	f7fe fc8e 	bl	8012cee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80143d6:	4b23      	ldr	r3, [pc, #140]	@ (8014464 <xTaskResumeAll+0x12c>)
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143dc:	429a      	cmp	r2, r3
 80143de:	d302      	bcc.n	80143e6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80143e0:	4b21      	ldr	r3, [pc, #132]	@ (8014468 <xTaskResumeAll+0x130>)
 80143e2:	2201      	movs	r2, #1
 80143e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80143e6:	4b1c      	ldr	r3, [pc, #112]	@ (8014458 <xTaskResumeAll+0x120>)
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d1cb      	bne.n	8014386 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d001      	beq.n	80143f8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80143f4:	f000 fc52 	bl	8014c9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80143f8:	4b1c      	ldr	r3, [pc, #112]	@ (801446c <xTaskResumeAll+0x134>)
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d010      	beq.n	8014426 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014404:	f000 f858 	bl	80144b8 <xTaskIncrementTick>
 8014408:	4603      	mov	r3, r0
 801440a:	2b00      	cmp	r3, #0
 801440c:	d002      	beq.n	8014414 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801440e:	4b16      	ldr	r3, [pc, #88]	@ (8014468 <xTaskResumeAll+0x130>)
 8014410:	2201      	movs	r2, #1
 8014412:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	3b01      	subs	r3, #1
 8014418:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d1f1      	bne.n	8014404 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8014420:	4b12      	ldr	r3, [pc, #72]	@ (801446c <xTaskResumeAll+0x134>)
 8014422:	2200      	movs	r2, #0
 8014424:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014426:	4b10      	ldr	r3, [pc, #64]	@ (8014468 <xTaskResumeAll+0x130>)
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d009      	beq.n	8014442 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801442e:	2301      	movs	r3, #1
 8014430:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014432:	4b0f      	ldr	r3, [pc, #60]	@ (8014470 <xTaskResumeAll+0x138>)
 8014434:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014438:	601a      	str	r2, [r3, #0]
 801443a:	f3bf 8f4f 	dsb	sy
 801443e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014442:	f001 fd83 	bl	8015f4c <vPortExitCritical>

	return xAlreadyYielded;
 8014446:	68bb      	ldr	r3, [r7, #8]
}
 8014448:	4618      	mov	r0, r3
 801444a:	3710      	adds	r7, #16
 801444c:	46bd      	mov	sp, r7
 801444e:	bd80      	pop	{r7, pc}
 8014450:	24001610 	.word	0x24001610
 8014454:	240015e8 	.word	0x240015e8
 8014458:	240015a8 	.word	0x240015a8
 801445c:	240015f0 	.word	0x240015f0
 8014460:	24001118 	.word	0x24001118
 8014464:	24001114 	.word	0x24001114
 8014468:	240015fc 	.word	0x240015fc
 801446c:	240015f8 	.word	0x240015f8
 8014470:	e000ed04 	.word	0xe000ed04

08014474 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014474:	b480      	push	{r7}
 8014476:	b083      	sub	sp, #12
 8014478:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801447a:	4b05      	ldr	r3, [pc, #20]	@ (8014490 <xTaskGetTickCount+0x1c>)
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014480:	687b      	ldr	r3, [r7, #4]
}
 8014482:	4618      	mov	r0, r3
 8014484:	370c      	adds	r7, #12
 8014486:	46bd      	mov	sp, r7
 8014488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801448c:	4770      	bx	lr
 801448e:	bf00      	nop
 8014490:	240015ec 	.word	0x240015ec

08014494 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b082      	sub	sp, #8
 8014498:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801449a:	f001 fe05 	bl	80160a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801449e:	2300      	movs	r3, #0
 80144a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80144a2:	4b04      	ldr	r3, [pc, #16]	@ (80144b4 <xTaskGetTickCountFromISR+0x20>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80144a8:	683b      	ldr	r3, [r7, #0]
}
 80144aa:	4618      	mov	r0, r3
 80144ac:	3708      	adds	r7, #8
 80144ae:	46bd      	mov	sp, r7
 80144b0:	bd80      	pop	{r7, pc}
 80144b2:	bf00      	nop
 80144b4:	240015ec 	.word	0x240015ec

080144b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b086      	sub	sp, #24
 80144bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80144be:	2300      	movs	r3, #0
 80144c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80144c2:	4b4f      	ldr	r3, [pc, #316]	@ (8014600 <xTaskIncrementTick+0x148>)
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	f040 8090 	bne.w	80145ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80144cc:	4b4d      	ldr	r3, [pc, #308]	@ (8014604 <xTaskIncrementTick+0x14c>)
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	3301      	adds	r3, #1
 80144d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80144d4:	4a4b      	ldr	r2, [pc, #300]	@ (8014604 <xTaskIncrementTick+0x14c>)
 80144d6:	693b      	ldr	r3, [r7, #16]
 80144d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80144da:	693b      	ldr	r3, [r7, #16]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d121      	bne.n	8014524 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80144e0:	4b49      	ldr	r3, [pc, #292]	@ (8014608 <xTaskIncrementTick+0x150>)
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d00b      	beq.n	8014502 <xTaskIncrementTick+0x4a>
	__asm volatile
 80144ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144ee:	f383 8811 	msr	BASEPRI, r3
 80144f2:	f3bf 8f6f 	isb	sy
 80144f6:	f3bf 8f4f 	dsb	sy
 80144fa:	603b      	str	r3, [r7, #0]
}
 80144fc:	bf00      	nop
 80144fe:	bf00      	nop
 8014500:	e7fd      	b.n	80144fe <xTaskIncrementTick+0x46>
 8014502:	4b41      	ldr	r3, [pc, #260]	@ (8014608 <xTaskIncrementTick+0x150>)
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	60fb      	str	r3, [r7, #12]
 8014508:	4b40      	ldr	r3, [pc, #256]	@ (801460c <xTaskIncrementTick+0x154>)
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	4a3e      	ldr	r2, [pc, #248]	@ (8014608 <xTaskIncrementTick+0x150>)
 801450e:	6013      	str	r3, [r2, #0]
 8014510:	4a3e      	ldr	r2, [pc, #248]	@ (801460c <xTaskIncrementTick+0x154>)
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	6013      	str	r3, [r2, #0]
 8014516:	4b3e      	ldr	r3, [pc, #248]	@ (8014610 <xTaskIncrementTick+0x158>)
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	3301      	adds	r3, #1
 801451c:	4a3c      	ldr	r2, [pc, #240]	@ (8014610 <xTaskIncrementTick+0x158>)
 801451e:	6013      	str	r3, [r2, #0]
 8014520:	f000 fbbc 	bl	8014c9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014524:	4b3b      	ldr	r3, [pc, #236]	@ (8014614 <xTaskIncrementTick+0x15c>)
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	693a      	ldr	r2, [r7, #16]
 801452a:	429a      	cmp	r2, r3
 801452c:	d349      	bcc.n	80145c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801452e:	4b36      	ldr	r3, [pc, #216]	@ (8014608 <xTaskIncrementTick+0x150>)
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d104      	bne.n	8014542 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014538:	4b36      	ldr	r3, [pc, #216]	@ (8014614 <xTaskIncrementTick+0x15c>)
 801453a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801453e:	601a      	str	r2, [r3, #0]
					break;
 8014540:	e03f      	b.n	80145c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014542:	4b31      	ldr	r3, [pc, #196]	@ (8014608 <xTaskIncrementTick+0x150>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	68db      	ldr	r3, [r3, #12]
 8014548:	68db      	ldr	r3, [r3, #12]
 801454a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	685b      	ldr	r3, [r3, #4]
 8014550:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014552:	693a      	ldr	r2, [r7, #16]
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	429a      	cmp	r2, r3
 8014558:	d203      	bcs.n	8014562 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801455a:	4a2e      	ldr	r2, [pc, #184]	@ (8014614 <xTaskIncrementTick+0x15c>)
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014560:	e02f      	b.n	80145c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014562:	68bb      	ldr	r3, [r7, #8]
 8014564:	3304      	adds	r3, #4
 8014566:	4618      	mov	r0, r3
 8014568:	f7fe fc1e 	bl	8012da8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014570:	2b00      	cmp	r3, #0
 8014572:	d004      	beq.n	801457e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	3318      	adds	r3, #24
 8014578:	4618      	mov	r0, r3
 801457a:	f7fe fc15 	bl	8012da8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801457e:	68bb      	ldr	r3, [r7, #8]
 8014580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014582:	4b25      	ldr	r3, [pc, #148]	@ (8014618 <xTaskIncrementTick+0x160>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	429a      	cmp	r2, r3
 8014588:	d903      	bls.n	8014592 <xTaskIncrementTick+0xda>
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801458e:	4a22      	ldr	r2, [pc, #136]	@ (8014618 <xTaskIncrementTick+0x160>)
 8014590:	6013      	str	r3, [r2, #0]
 8014592:	68bb      	ldr	r3, [r7, #8]
 8014594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014596:	4613      	mov	r3, r2
 8014598:	009b      	lsls	r3, r3, #2
 801459a:	4413      	add	r3, r2
 801459c:	009b      	lsls	r3, r3, #2
 801459e:	4a1f      	ldr	r2, [pc, #124]	@ (801461c <xTaskIncrementTick+0x164>)
 80145a0:	441a      	add	r2, r3
 80145a2:	68bb      	ldr	r3, [r7, #8]
 80145a4:	3304      	adds	r3, #4
 80145a6:	4619      	mov	r1, r3
 80145a8:	4610      	mov	r0, r2
 80145aa:	f7fe fba0 	bl	8012cee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80145ae:	68bb      	ldr	r3, [r7, #8]
 80145b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80145b2:	4b1b      	ldr	r3, [pc, #108]	@ (8014620 <xTaskIncrementTick+0x168>)
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145b8:	429a      	cmp	r2, r3
 80145ba:	d3b8      	bcc.n	801452e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80145bc:	2301      	movs	r3, #1
 80145be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80145c0:	e7b5      	b.n	801452e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80145c2:	4b17      	ldr	r3, [pc, #92]	@ (8014620 <xTaskIncrementTick+0x168>)
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80145c8:	4914      	ldr	r1, [pc, #80]	@ (801461c <xTaskIncrementTick+0x164>)
 80145ca:	4613      	mov	r3, r2
 80145cc:	009b      	lsls	r3, r3, #2
 80145ce:	4413      	add	r3, r2
 80145d0:	009b      	lsls	r3, r3, #2
 80145d2:	440b      	add	r3, r1
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	2b01      	cmp	r3, #1
 80145d8:	d901      	bls.n	80145de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80145da:	2301      	movs	r3, #1
 80145dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80145de:	4b11      	ldr	r3, [pc, #68]	@ (8014624 <xTaskIncrementTick+0x16c>)
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d007      	beq.n	80145f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80145e6:	2301      	movs	r3, #1
 80145e8:	617b      	str	r3, [r7, #20]
 80145ea:	e004      	b.n	80145f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80145ec:	4b0e      	ldr	r3, [pc, #56]	@ (8014628 <xTaskIncrementTick+0x170>)
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	3301      	adds	r3, #1
 80145f2:	4a0d      	ldr	r2, [pc, #52]	@ (8014628 <xTaskIncrementTick+0x170>)
 80145f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80145f6:	697b      	ldr	r3, [r7, #20]
}
 80145f8:	4618      	mov	r0, r3
 80145fa:	3718      	adds	r7, #24
 80145fc:	46bd      	mov	sp, r7
 80145fe:	bd80      	pop	{r7, pc}
 8014600:	24001610 	.word	0x24001610
 8014604:	240015ec 	.word	0x240015ec
 8014608:	240015a0 	.word	0x240015a0
 801460c:	240015a4 	.word	0x240015a4
 8014610:	24001600 	.word	0x24001600
 8014614:	24001608 	.word	0x24001608
 8014618:	240015f0 	.word	0x240015f0
 801461c:	24001118 	.word	0x24001118
 8014620:	24001114 	.word	0x24001114
 8014624:	240015fc 	.word	0x240015fc
 8014628:	240015f8 	.word	0x240015f8

0801462c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801462c:	b480      	push	{r7}
 801462e:	b085      	sub	sp, #20
 8014630:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014632:	4b2b      	ldr	r3, [pc, #172]	@ (80146e0 <vTaskSwitchContext+0xb4>)
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d003      	beq.n	8014642 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801463a:	4b2a      	ldr	r3, [pc, #168]	@ (80146e4 <vTaskSwitchContext+0xb8>)
 801463c:	2201      	movs	r2, #1
 801463e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014640:	e047      	b.n	80146d2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8014642:	4b28      	ldr	r3, [pc, #160]	@ (80146e4 <vTaskSwitchContext+0xb8>)
 8014644:	2200      	movs	r2, #0
 8014646:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014648:	4b27      	ldr	r3, [pc, #156]	@ (80146e8 <vTaskSwitchContext+0xbc>)
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	60fb      	str	r3, [r7, #12]
 801464e:	e011      	b.n	8014674 <vTaskSwitchContext+0x48>
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d10b      	bne.n	801466e <vTaskSwitchContext+0x42>
	__asm volatile
 8014656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801465a:	f383 8811 	msr	BASEPRI, r3
 801465e:	f3bf 8f6f 	isb	sy
 8014662:	f3bf 8f4f 	dsb	sy
 8014666:	607b      	str	r3, [r7, #4]
}
 8014668:	bf00      	nop
 801466a:	bf00      	nop
 801466c:	e7fd      	b.n	801466a <vTaskSwitchContext+0x3e>
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	3b01      	subs	r3, #1
 8014672:	60fb      	str	r3, [r7, #12]
 8014674:	491d      	ldr	r1, [pc, #116]	@ (80146ec <vTaskSwitchContext+0xc0>)
 8014676:	68fa      	ldr	r2, [r7, #12]
 8014678:	4613      	mov	r3, r2
 801467a:	009b      	lsls	r3, r3, #2
 801467c:	4413      	add	r3, r2
 801467e:	009b      	lsls	r3, r3, #2
 8014680:	440b      	add	r3, r1
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d0e3      	beq.n	8014650 <vTaskSwitchContext+0x24>
 8014688:	68fa      	ldr	r2, [r7, #12]
 801468a:	4613      	mov	r3, r2
 801468c:	009b      	lsls	r3, r3, #2
 801468e:	4413      	add	r3, r2
 8014690:	009b      	lsls	r3, r3, #2
 8014692:	4a16      	ldr	r2, [pc, #88]	@ (80146ec <vTaskSwitchContext+0xc0>)
 8014694:	4413      	add	r3, r2
 8014696:	60bb      	str	r3, [r7, #8]
 8014698:	68bb      	ldr	r3, [r7, #8]
 801469a:	685b      	ldr	r3, [r3, #4]
 801469c:	685a      	ldr	r2, [r3, #4]
 801469e:	68bb      	ldr	r3, [r7, #8]
 80146a0:	605a      	str	r2, [r3, #4]
 80146a2:	68bb      	ldr	r3, [r7, #8]
 80146a4:	685a      	ldr	r2, [r3, #4]
 80146a6:	68bb      	ldr	r3, [r7, #8]
 80146a8:	3308      	adds	r3, #8
 80146aa:	429a      	cmp	r2, r3
 80146ac:	d104      	bne.n	80146b8 <vTaskSwitchContext+0x8c>
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	685b      	ldr	r3, [r3, #4]
 80146b2:	685a      	ldr	r2, [r3, #4]
 80146b4:	68bb      	ldr	r3, [r7, #8]
 80146b6:	605a      	str	r2, [r3, #4]
 80146b8:	68bb      	ldr	r3, [r7, #8]
 80146ba:	685b      	ldr	r3, [r3, #4]
 80146bc:	68db      	ldr	r3, [r3, #12]
 80146be:	4a0c      	ldr	r2, [pc, #48]	@ (80146f0 <vTaskSwitchContext+0xc4>)
 80146c0:	6013      	str	r3, [r2, #0]
 80146c2:	4a09      	ldr	r2, [pc, #36]	@ (80146e8 <vTaskSwitchContext+0xbc>)
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80146c8:	4b09      	ldr	r3, [pc, #36]	@ (80146f0 <vTaskSwitchContext+0xc4>)
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	3354      	adds	r3, #84	@ 0x54
 80146ce:	4a09      	ldr	r2, [pc, #36]	@ (80146f4 <vTaskSwitchContext+0xc8>)
 80146d0:	6013      	str	r3, [r2, #0]
}
 80146d2:	bf00      	nop
 80146d4:	3714      	adds	r7, #20
 80146d6:	46bd      	mov	sp, r7
 80146d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146dc:	4770      	bx	lr
 80146de:	bf00      	nop
 80146e0:	24001610 	.word	0x24001610
 80146e4:	240015fc 	.word	0x240015fc
 80146e8:	240015f0 	.word	0x240015f0
 80146ec:	24001118 	.word	0x24001118
 80146f0:	24001114 	.word	0x24001114
 80146f4:	24000020 	.word	0x24000020

080146f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b084      	sub	sp, #16
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
 8014700:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d10b      	bne.n	8014720 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8014708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801470c:	f383 8811 	msr	BASEPRI, r3
 8014710:	f3bf 8f6f 	isb	sy
 8014714:	f3bf 8f4f 	dsb	sy
 8014718:	60fb      	str	r3, [r7, #12]
}
 801471a:	bf00      	nop
 801471c:	bf00      	nop
 801471e:	e7fd      	b.n	801471c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014720:	4b07      	ldr	r3, [pc, #28]	@ (8014740 <vTaskPlaceOnEventList+0x48>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	3318      	adds	r3, #24
 8014726:	4619      	mov	r1, r3
 8014728:	6878      	ldr	r0, [r7, #4]
 801472a:	f7fe fb04 	bl	8012d36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801472e:	2101      	movs	r1, #1
 8014730:	6838      	ldr	r0, [r7, #0]
 8014732:	f000 fe7d 	bl	8015430 <prvAddCurrentTaskToDelayedList>
}
 8014736:	bf00      	nop
 8014738:	3710      	adds	r7, #16
 801473a:	46bd      	mov	sp, r7
 801473c:	bd80      	pop	{r7, pc}
 801473e:	bf00      	nop
 8014740:	24001114 	.word	0x24001114

08014744 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b086      	sub	sp, #24
 8014748:	af00      	add	r7, sp, #0
 801474a:	60f8      	str	r0, [r7, #12]
 801474c:	60b9      	str	r1, [r7, #8]
 801474e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d10b      	bne.n	801476e <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8014756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801475a:	f383 8811 	msr	BASEPRI, r3
 801475e:	f3bf 8f6f 	isb	sy
 8014762:	f3bf 8f4f 	dsb	sy
 8014766:	617b      	str	r3, [r7, #20]
}
 8014768:	bf00      	nop
 801476a:	bf00      	nop
 801476c:	e7fd      	b.n	801476a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801476e:	4b12      	ldr	r3, [pc, #72]	@ (80147b8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d10b      	bne.n	801478e <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8014776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801477a:	f383 8811 	msr	BASEPRI, r3
 801477e:	f3bf 8f6f 	isb	sy
 8014782:	f3bf 8f4f 	dsb	sy
 8014786:	613b      	str	r3, [r7, #16]
}
 8014788:	bf00      	nop
 801478a:	bf00      	nop
 801478c:	e7fd      	b.n	801478a <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801478e:	4b0b      	ldr	r3, [pc, #44]	@ (80147bc <vTaskPlaceOnUnorderedEventList+0x78>)
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	68ba      	ldr	r2, [r7, #8]
 8014794:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8014798:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801479a:	4b08      	ldr	r3, [pc, #32]	@ (80147bc <vTaskPlaceOnUnorderedEventList+0x78>)
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	3318      	adds	r3, #24
 80147a0:	4619      	mov	r1, r3
 80147a2:	68f8      	ldr	r0, [r7, #12]
 80147a4:	f7fe faa3 	bl	8012cee <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80147a8:	2101      	movs	r1, #1
 80147aa:	6878      	ldr	r0, [r7, #4]
 80147ac:	f000 fe40 	bl	8015430 <prvAddCurrentTaskToDelayedList>
}
 80147b0:	bf00      	nop
 80147b2:	3718      	adds	r7, #24
 80147b4:	46bd      	mov	sp, r7
 80147b6:	bd80      	pop	{r7, pc}
 80147b8:	24001610 	.word	0x24001610
 80147bc:	24001114 	.word	0x24001114

080147c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b086      	sub	sp, #24
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	60f8      	str	r0, [r7, #12]
 80147c8:	60b9      	str	r1, [r7, #8]
 80147ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d10b      	bne.n	80147ea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80147d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147d6:	f383 8811 	msr	BASEPRI, r3
 80147da:	f3bf 8f6f 	isb	sy
 80147de:	f3bf 8f4f 	dsb	sy
 80147e2:	617b      	str	r3, [r7, #20]
}
 80147e4:	bf00      	nop
 80147e6:	bf00      	nop
 80147e8:	e7fd      	b.n	80147e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80147ea:	4b0a      	ldr	r3, [pc, #40]	@ (8014814 <vTaskPlaceOnEventListRestricted+0x54>)
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	3318      	adds	r3, #24
 80147f0:	4619      	mov	r1, r3
 80147f2:	68f8      	ldr	r0, [r7, #12]
 80147f4:	f7fe fa7b 	bl	8012cee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d002      	beq.n	8014804 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80147fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014802:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014804:	6879      	ldr	r1, [r7, #4]
 8014806:	68b8      	ldr	r0, [r7, #8]
 8014808:	f000 fe12 	bl	8015430 <prvAddCurrentTaskToDelayedList>
	}
 801480c:	bf00      	nop
 801480e:	3718      	adds	r7, #24
 8014810:	46bd      	mov	sp, r7
 8014812:	bd80      	pop	{r7, pc}
 8014814:	24001114 	.word	0x24001114

08014818 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b086      	sub	sp, #24
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	68db      	ldr	r3, [r3, #12]
 8014824:	68db      	ldr	r3, [r3, #12]
 8014826:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014828:	693b      	ldr	r3, [r7, #16]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d10b      	bne.n	8014846 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801482e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014832:	f383 8811 	msr	BASEPRI, r3
 8014836:	f3bf 8f6f 	isb	sy
 801483a:	f3bf 8f4f 	dsb	sy
 801483e:	60fb      	str	r3, [r7, #12]
}
 8014840:	bf00      	nop
 8014842:	bf00      	nop
 8014844:	e7fd      	b.n	8014842 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014846:	693b      	ldr	r3, [r7, #16]
 8014848:	3318      	adds	r3, #24
 801484a:	4618      	mov	r0, r3
 801484c:	f7fe faac 	bl	8012da8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014850:	4b1d      	ldr	r3, [pc, #116]	@ (80148c8 <xTaskRemoveFromEventList+0xb0>)
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d11d      	bne.n	8014894 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014858:	693b      	ldr	r3, [r7, #16]
 801485a:	3304      	adds	r3, #4
 801485c:	4618      	mov	r0, r3
 801485e:	f7fe faa3 	bl	8012da8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014862:	693b      	ldr	r3, [r7, #16]
 8014864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014866:	4b19      	ldr	r3, [pc, #100]	@ (80148cc <xTaskRemoveFromEventList+0xb4>)
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	429a      	cmp	r2, r3
 801486c:	d903      	bls.n	8014876 <xTaskRemoveFromEventList+0x5e>
 801486e:	693b      	ldr	r3, [r7, #16]
 8014870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014872:	4a16      	ldr	r2, [pc, #88]	@ (80148cc <xTaskRemoveFromEventList+0xb4>)
 8014874:	6013      	str	r3, [r2, #0]
 8014876:	693b      	ldr	r3, [r7, #16]
 8014878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801487a:	4613      	mov	r3, r2
 801487c:	009b      	lsls	r3, r3, #2
 801487e:	4413      	add	r3, r2
 8014880:	009b      	lsls	r3, r3, #2
 8014882:	4a13      	ldr	r2, [pc, #76]	@ (80148d0 <xTaskRemoveFromEventList+0xb8>)
 8014884:	441a      	add	r2, r3
 8014886:	693b      	ldr	r3, [r7, #16]
 8014888:	3304      	adds	r3, #4
 801488a:	4619      	mov	r1, r3
 801488c:	4610      	mov	r0, r2
 801488e:	f7fe fa2e 	bl	8012cee <vListInsertEnd>
 8014892:	e005      	b.n	80148a0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014894:	693b      	ldr	r3, [r7, #16]
 8014896:	3318      	adds	r3, #24
 8014898:	4619      	mov	r1, r3
 801489a:	480e      	ldr	r0, [pc, #56]	@ (80148d4 <xTaskRemoveFromEventList+0xbc>)
 801489c:	f7fe fa27 	bl	8012cee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80148a0:	693b      	ldr	r3, [r7, #16]
 80148a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80148a4:	4b0c      	ldr	r3, [pc, #48]	@ (80148d8 <xTaskRemoveFromEventList+0xc0>)
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148aa:	429a      	cmp	r2, r3
 80148ac:	d905      	bls.n	80148ba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80148ae:	2301      	movs	r3, #1
 80148b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80148b2:	4b0a      	ldr	r3, [pc, #40]	@ (80148dc <xTaskRemoveFromEventList+0xc4>)
 80148b4:	2201      	movs	r2, #1
 80148b6:	601a      	str	r2, [r3, #0]
 80148b8:	e001      	b.n	80148be <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80148ba:	2300      	movs	r3, #0
 80148bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80148be:	697b      	ldr	r3, [r7, #20]
}
 80148c0:	4618      	mov	r0, r3
 80148c2:	3718      	adds	r7, #24
 80148c4:	46bd      	mov	sp, r7
 80148c6:	bd80      	pop	{r7, pc}
 80148c8:	24001610 	.word	0x24001610
 80148cc:	240015f0 	.word	0x240015f0
 80148d0:	24001118 	.word	0x24001118
 80148d4:	240015a8 	.word	0x240015a8
 80148d8:	24001114 	.word	0x24001114
 80148dc:	240015fc 	.word	0x240015fc

080148e0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b086      	sub	sp, #24
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
 80148e8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80148ea:	4b2a      	ldr	r3, [pc, #168]	@ (8014994 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d10b      	bne.n	801490a <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 80148f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148f6:	f383 8811 	msr	BASEPRI, r3
 80148fa:	f3bf 8f6f 	isb	sy
 80148fe:	f3bf 8f4f 	dsb	sy
 8014902:	613b      	str	r3, [r7, #16]
}
 8014904:	bf00      	nop
 8014906:	bf00      	nop
 8014908:	e7fd      	b.n	8014906 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	68db      	ldr	r3, [r3, #12]
 8014918:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801491a:	697b      	ldr	r3, [r7, #20]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d10b      	bne.n	8014938 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8014920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014924:	f383 8811 	msr	BASEPRI, r3
 8014928:	f3bf 8f6f 	isb	sy
 801492c:	f3bf 8f4f 	dsb	sy
 8014930:	60fb      	str	r3, [r7, #12]
}
 8014932:	bf00      	nop
 8014934:	bf00      	nop
 8014936:	e7fd      	b.n	8014934 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8014938:	6878      	ldr	r0, [r7, #4]
 801493a:	f7fe fa35 	bl	8012da8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801493e:	697b      	ldr	r3, [r7, #20]
 8014940:	3304      	adds	r3, #4
 8014942:	4618      	mov	r0, r3
 8014944:	f7fe fa30 	bl	8012da8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014948:	697b      	ldr	r3, [r7, #20]
 801494a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801494c:	4b12      	ldr	r3, [pc, #72]	@ (8014998 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	429a      	cmp	r2, r3
 8014952:	d903      	bls.n	801495c <vTaskRemoveFromUnorderedEventList+0x7c>
 8014954:	697b      	ldr	r3, [r7, #20]
 8014956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014958:	4a0f      	ldr	r2, [pc, #60]	@ (8014998 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801495a:	6013      	str	r3, [r2, #0]
 801495c:	697b      	ldr	r3, [r7, #20]
 801495e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014960:	4613      	mov	r3, r2
 8014962:	009b      	lsls	r3, r3, #2
 8014964:	4413      	add	r3, r2
 8014966:	009b      	lsls	r3, r3, #2
 8014968:	4a0c      	ldr	r2, [pc, #48]	@ (801499c <vTaskRemoveFromUnorderedEventList+0xbc>)
 801496a:	441a      	add	r2, r3
 801496c:	697b      	ldr	r3, [r7, #20]
 801496e:	3304      	adds	r3, #4
 8014970:	4619      	mov	r1, r3
 8014972:	4610      	mov	r0, r2
 8014974:	f7fe f9bb 	bl	8012cee <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014978:	697b      	ldr	r3, [r7, #20]
 801497a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801497c:	4b08      	ldr	r3, [pc, #32]	@ (80149a0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014982:	429a      	cmp	r2, r3
 8014984:	d902      	bls.n	801498c <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014986:	4b07      	ldr	r3, [pc, #28]	@ (80149a4 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8014988:	2201      	movs	r2, #1
 801498a:	601a      	str	r2, [r3, #0]
	}
}
 801498c:	bf00      	nop
 801498e:	3718      	adds	r7, #24
 8014990:	46bd      	mov	sp, r7
 8014992:	bd80      	pop	{r7, pc}
 8014994:	24001610 	.word	0x24001610
 8014998:	240015f0 	.word	0x240015f0
 801499c:	24001118 	.word	0x24001118
 80149a0:	24001114 	.word	0x24001114
 80149a4:	240015fc 	.word	0x240015fc

080149a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80149a8:	b480      	push	{r7}
 80149aa:	b083      	sub	sp, #12
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80149b0:	4b06      	ldr	r3, [pc, #24]	@ (80149cc <vTaskInternalSetTimeOutState+0x24>)
 80149b2:	681a      	ldr	r2, [r3, #0]
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80149b8:	4b05      	ldr	r3, [pc, #20]	@ (80149d0 <vTaskInternalSetTimeOutState+0x28>)
 80149ba:	681a      	ldr	r2, [r3, #0]
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	605a      	str	r2, [r3, #4]
}
 80149c0:	bf00      	nop
 80149c2:	370c      	adds	r7, #12
 80149c4:	46bd      	mov	sp, r7
 80149c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ca:	4770      	bx	lr
 80149cc:	24001600 	.word	0x24001600
 80149d0:	240015ec 	.word	0x240015ec

080149d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b088      	sub	sp, #32
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
 80149dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d10b      	bne.n	80149fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80149e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149e8:	f383 8811 	msr	BASEPRI, r3
 80149ec:	f3bf 8f6f 	isb	sy
 80149f0:	f3bf 8f4f 	dsb	sy
 80149f4:	613b      	str	r3, [r7, #16]
}
 80149f6:	bf00      	nop
 80149f8:	bf00      	nop
 80149fa:	e7fd      	b.n	80149f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80149fc:	683b      	ldr	r3, [r7, #0]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d10b      	bne.n	8014a1a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8014a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a06:	f383 8811 	msr	BASEPRI, r3
 8014a0a:	f3bf 8f6f 	isb	sy
 8014a0e:	f3bf 8f4f 	dsb	sy
 8014a12:	60fb      	str	r3, [r7, #12]
}
 8014a14:	bf00      	nop
 8014a16:	bf00      	nop
 8014a18:	e7fd      	b.n	8014a16 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8014a1a:	f001 fa65 	bl	8015ee8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8014a94 <xTaskCheckForTimeOut+0xc0>)
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	685b      	ldr	r3, [r3, #4]
 8014a28:	69ba      	ldr	r2, [r7, #24]
 8014a2a:	1ad3      	subs	r3, r2, r3
 8014a2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014a2e:	683b      	ldr	r3, [r7, #0]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014a36:	d102      	bne.n	8014a3e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014a38:	2300      	movs	r3, #0
 8014a3a:	61fb      	str	r3, [r7, #28]
 8014a3c:	e023      	b.n	8014a86 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	681a      	ldr	r2, [r3, #0]
 8014a42:	4b15      	ldr	r3, [pc, #84]	@ (8014a98 <xTaskCheckForTimeOut+0xc4>)
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	429a      	cmp	r2, r3
 8014a48:	d007      	beq.n	8014a5a <xTaskCheckForTimeOut+0x86>
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	685b      	ldr	r3, [r3, #4]
 8014a4e:	69ba      	ldr	r2, [r7, #24]
 8014a50:	429a      	cmp	r2, r3
 8014a52:	d302      	bcc.n	8014a5a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014a54:	2301      	movs	r3, #1
 8014a56:	61fb      	str	r3, [r7, #28]
 8014a58:	e015      	b.n	8014a86 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014a5a:	683b      	ldr	r3, [r7, #0]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	697a      	ldr	r2, [r7, #20]
 8014a60:	429a      	cmp	r2, r3
 8014a62:	d20b      	bcs.n	8014a7c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014a64:	683b      	ldr	r3, [r7, #0]
 8014a66:	681a      	ldr	r2, [r3, #0]
 8014a68:	697b      	ldr	r3, [r7, #20]
 8014a6a:	1ad2      	subs	r2, r2, r3
 8014a6c:	683b      	ldr	r3, [r7, #0]
 8014a6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014a70:	6878      	ldr	r0, [r7, #4]
 8014a72:	f7ff ff99 	bl	80149a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014a76:	2300      	movs	r3, #0
 8014a78:	61fb      	str	r3, [r7, #28]
 8014a7a:	e004      	b.n	8014a86 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	2200      	movs	r2, #0
 8014a80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014a82:	2301      	movs	r3, #1
 8014a84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014a86:	f001 fa61 	bl	8015f4c <vPortExitCritical>

	return xReturn;
 8014a8a:	69fb      	ldr	r3, [r7, #28]
}
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	3720      	adds	r7, #32
 8014a90:	46bd      	mov	sp, r7
 8014a92:	bd80      	pop	{r7, pc}
 8014a94:	240015ec 	.word	0x240015ec
 8014a98:	24001600 	.word	0x24001600

08014a9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014a9c:	b480      	push	{r7}
 8014a9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014aa0:	4b03      	ldr	r3, [pc, #12]	@ (8014ab0 <vTaskMissedYield+0x14>)
 8014aa2:	2201      	movs	r2, #1
 8014aa4:	601a      	str	r2, [r3, #0]
}
 8014aa6:	bf00      	nop
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aae:	4770      	bx	lr
 8014ab0:	240015fc 	.word	0x240015fc

08014ab4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b082      	sub	sp, #8
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014abc:	f000 f852 	bl	8014b64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014ac0:	4b06      	ldr	r3, [pc, #24]	@ (8014adc <prvIdleTask+0x28>)
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	2b01      	cmp	r3, #1
 8014ac6:	d9f9      	bls.n	8014abc <prvIdleTask+0x8>
			{
				taskYIELD();
 8014ac8:	4b05      	ldr	r3, [pc, #20]	@ (8014ae0 <prvIdleTask+0x2c>)
 8014aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014ace:	601a      	str	r2, [r3, #0]
 8014ad0:	f3bf 8f4f 	dsb	sy
 8014ad4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014ad8:	e7f0      	b.n	8014abc <prvIdleTask+0x8>
 8014ada:	bf00      	nop
 8014adc:	24001118 	.word	0x24001118
 8014ae0:	e000ed04 	.word	0xe000ed04

08014ae4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b082      	sub	sp, #8
 8014ae8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014aea:	2300      	movs	r3, #0
 8014aec:	607b      	str	r3, [r7, #4]
 8014aee:	e00c      	b.n	8014b0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014af0:	687a      	ldr	r2, [r7, #4]
 8014af2:	4613      	mov	r3, r2
 8014af4:	009b      	lsls	r3, r3, #2
 8014af6:	4413      	add	r3, r2
 8014af8:	009b      	lsls	r3, r3, #2
 8014afa:	4a12      	ldr	r2, [pc, #72]	@ (8014b44 <prvInitialiseTaskLists+0x60>)
 8014afc:	4413      	add	r3, r2
 8014afe:	4618      	mov	r0, r3
 8014b00:	f7fe f8c8 	bl	8012c94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	3301      	adds	r3, #1
 8014b08:	607b      	str	r3, [r7, #4]
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	2b37      	cmp	r3, #55	@ 0x37
 8014b0e:	d9ef      	bls.n	8014af0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014b10:	480d      	ldr	r0, [pc, #52]	@ (8014b48 <prvInitialiseTaskLists+0x64>)
 8014b12:	f7fe f8bf 	bl	8012c94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014b16:	480d      	ldr	r0, [pc, #52]	@ (8014b4c <prvInitialiseTaskLists+0x68>)
 8014b18:	f7fe f8bc 	bl	8012c94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014b1c:	480c      	ldr	r0, [pc, #48]	@ (8014b50 <prvInitialiseTaskLists+0x6c>)
 8014b1e:	f7fe f8b9 	bl	8012c94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014b22:	480c      	ldr	r0, [pc, #48]	@ (8014b54 <prvInitialiseTaskLists+0x70>)
 8014b24:	f7fe f8b6 	bl	8012c94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014b28:	480b      	ldr	r0, [pc, #44]	@ (8014b58 <prvInitialiseTaskLists+0x74>)
 8014b2a:	f7fe f8b3 	bl	8012c94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8014b5c <prvInitialiseTaskLists+0x78>)
 8014b30:	4a05      	ldr	r2, [pc, #20]	@ (8014b48 <prvInitialiseTaskLists+0x64>)
 8014b32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014b34:	4b0a      	ldr	r3, [pc, #40]	@ (8014b60 <prvInitialiseTaskLists+0x7c>)
 8014b36:	4a05      	ldr	r2, [pc, #20]	@ (8014b4c <prvInitialiseTaskLists+0x68>)
 8014b38:	601a      	str	r2, [r3, #0]
}
 8014b3a:	bf00      	nop
 8014b3c:	3708      	adds	r7, #8
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}
 8014b42:	bf00      	nop
 8014b44:	24001118 	.word	0x24001118
 8014b48:	24001578 	.word	0x24001578
 8014b4c:	2400158c 	.word	0x2400158c
 8014b50:	240015a8 	.word	0x240015a8
 8014b54:	240015bc 	.word	0x240015bc
 8014b58:	240015d4 	.word	0x240015d4
 8014b5c:	240015a0 	.word	0x240015a0
 8014b60:	240015a4 	.word	0x240015a4

08014b64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b082      	sub	sp, #8
 8014b68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014b6a:	e019      	b.n	8014ba0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014b6c:	f001 f9bc 	bl	8015ee8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b70:	4b10      	ldr	r3, [pc, #64]	@ (8014bb4 <prvCheckTasksWaitingTermination+0x50>)
 8014b72:	68db      	ldr	r3, [r3, #12]
 8014b74:	68db      	ldr	r3, [r3, #12]
 8014b76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	3304      	adds	r3, #4
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	f7fe f913 	bl	8012da8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014b82:	4b0d      	ldr	r3, [pc, #52]	@ (8014bb8 <prvCheckTasksWaitingTermination+0x54>)
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	3b01      	subs	r3, #1
 8014b88:	4a0b      	ldr	r2, [pc, #44]	@ (8014bb8 <prvCheckTasksWaitingTermination+0x54>)
 8014b8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8014bbc <prvCheckTasksWaitingTermination+0x58>)
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	3b01      	subs	r3, #1
 8014b92:	4a0a      	ldr	r2, [pc, #40]	@ (8014bbc <prvCheckTasksWaitingTermination+0x58>)
 8014b94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014b96:	f001 f9d9 	bl	8015f4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014b9a:	6878      	ldr	r0, [r7, #4]
 8014b9c:	f000 f848 	bl	8014c30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014ba0:	4b06      	ldr	r3, [pc, #24]	@ (8014bbc <prvCheckTasksWaitingTermination+0x58>)
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d1e1      	bne.n	8014b6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014ba8:	bf00      	nop
 8014baa:	bf00      	nop
 8014bac:	3708      	adds	r7, #8
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bd80      	pop	{r7, pc}
 8014bb2:	bf00      	nop
 8014bb4:	240015bc 	.word	0x240015bc
 8014bb8:	240015e8 	.word	0x240015e8
 8014bbc:	240015d0 	.word	0x240015d0

08014bc0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8014bc0:	b480      	push	{r7}
 8014bc2:	b085      	sub	sp, #20
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8014bc8:	2300      	movs	r3, #0
 8014bca:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8014bcc:	e005      	b.n	8014bda <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	3301      	adds	r3, #1
 8014bd2:	607b      	str	r3, [r7, #4]
			ulCount++;
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	3301      	adds	r3, #1
 8014bd8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	781b      	ldrb	r3, [r3, #0]
 8014bde:	2ba5      	cmp	r3, #165	@ 0xa5
 8014be0:	d0f5      	beq.n	8014bce <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	089b      	lsrs	r3, r3, #2
 8014be6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	b29b      	uxth	r3, r3
	}
 8014bec:	4618      	mov	r0, r3
 8014bee:	3714      	adds	r7, #20
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf6:	4770      	bx	lr

08014bf8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b086      	sub	sp, #24
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d102      	bne.n	8014c0c <uxTaskGetStackHighWaterMark+0x14>
 8014c06:	4b09      	ldr	r3, [pc, #36]	@ (8014c2c <uxTaskGetStackHighWaterMark+0x34>)
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	e000      	b.n	8014c0e <uxTaskGetStackHighWaterMark+0x16>
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8014c10:	697b      	ldr	r3, [r7, #20]
 8014c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c14:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8014c16:	6938      	ldr	r0, [r7, #16]
 8014c18:	f7ff ffd2 	bl	8014bc0 <prvTaskCheckFreeStackSpace>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8014c20:	68fb      	ldr	r3, [r7, #12]
	}
 8014c22:	4618      	mov	r0, r3
 8014c24:	3718      	adds	r7, #24
 8014c26:	46bd      	mov	sp, r7
 8014c28:	bd80      	pop	{r7, pc}
 8014c2a:	bf00      	nop
 8014c2c:	24001114 	.word	0x24001114

08014c30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b084      	sub	sp, #16
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	3354      	adds	r3, #84	@ 0x54
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	f002 f81d 	bl	8016c7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d108      	bne.n	8014c5e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c50:	4618      	mov	r0, r3
 8014c52:	f001 fb39 	bl	80162c8 <vPortFree>
				vPortFree( pxTCB );
 8014c56:	6878      	ldr	r0, [r7, #4]
 8014c58:	f001 fb36 	bl	80162c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014c5c:	e019      	b.n	8014c92 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014c64:	2b01      	cmp	r3, #1
 8014c66:	d103      	bne.n	8014c70 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014c68:	6878      	ldr	r0, [r7, #4]
 8014c6a:	f001 fb2d 	bl	80162c8 <vPortFree>
	}
 8014c6e:	e010      	b.n	8014c92 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014c76:	2b02      	cmp	r3, #2
 8014c78:	d00b      	beq.n	8014c92 <prvDeleteTCB+0x62>
	__asm volatile
 8014c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c7e:	f383 8811 	msr	BASEPRI, r3
 8014c82:	f3bf 8f6f 	isb	sy
 8014c86:	f3bf 8f4f 	dsb	sy
 8014c8a:	60fb      	str	r3, [r7, #12]
}
 8014c8c:	bf00      	nop
 8014c8e:	bf00      	nop
 8014c90:	e7fd      	b.n	8014c8e <prvDeleteTCB+0x5e>
	}
 8014c92:	bf00      	nop
 8014c94:	3710      	adds	r7, #16
 8014c96:	46bd      	mov	sp, r7
 8014c98:	bd80      	pop	{r7, pc}
	...

08014c9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014c9c:	b480      	push	{r7}
 8014c9e:	b083      	sub	sp, #12
 8014ca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8014cd4 <prvResetNextTaskUnblockTime+0x38>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d104      	bne.n	8014cb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014cac:	4b0a      	ldr	r3, [pc, #40]	@ (8014cd8 <prvResetNextTaskUnblockTime+0x3c>)
 8014cae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014cb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014cb4:	e008      	b.n	8014cc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cb6:	4b07      	ldr	r3, [pc, #28]	@ (8014cd4 <prvResetNextTaskUnblockTime+0x38>)
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	68db      	ldr	r3, [r3, #12]
 8014cbc:	68db      	ldr	r3, [r3, #12]
 8014cbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	685b      	ldr	r3, [r3, #4]
 8014cc4:	4a04      	ldr	r2, [pc, #16]	@ (8014cd8 <prvResetNextTaskUnblockTime+0x3c>)
 8014cc6:	6013      	str	r3, [r2, #0]
}
 8014cc8:	bf00      	nop
 8014cca:	370c      	adds	r7, #12
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd2:	4770      	bx	lr
 8014cd4:	240015a0 	.word	0x240015a0
 8014cd8:	24001608 	.word	0x24001608

08014cdc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8014cdc:	b480      	push	{r7}
 8014cde:	b083      	sub	sp, #12
 8014ce0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8014ce2:	4b05      	ldr	r3, [pc, #20]	@ (8014cf8 <xTaskGetCurrentTaskHandle+0x1c>)
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8014ce8:	687b      	ldr	r3, [r7, #4]
	}
 8014cea:	4618      	mov	r0, r3
 8014cec:	370c      	adds	r7, #12
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf4:	4770      	bx	lr
 8014cf6:	bf00      	nop
 8014cf8:	24001114 	.word	0x24001114

08014cfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014cfc:	b480      	push	{r7}
 8014cfe:	b083      	sub	sp, #12
 8014d00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014d02:	4b0b      	ldr	r3, [pc, #44]	@ (8014d30 <xTaskGetSchedulerState+0x34>)
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d102      	bne.n	8014d10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014d0a:	2301      	movs	r3, #1
 8014d0c:	607b      	str	r3, [r7, #4]
 8014d0e:	e008      	b.n	8014d22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014d10:	4b08      	ldr	r3, [pc, #32]	@ (8014d34 <xTaskGetSchedulerState+0x38>)
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d102      	bne.n	8014d1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014d18:	2302      	movs	r3, #2
 8014d1a:	607b      	str	r3, [r7, #4]
 8014d1c:	e001      	b.n	8014d22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014d1e:	2300      	movs	r3, #0
 8014d20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014d22:	687b      	ldr	r3, [r7, #4]
	}
 8014d24:	4618      	mov	r0, r3
 8014d26:	370c      	adds	r7, #12
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2e:	4770      	bx	lr
 8014d30:	240015f4 	.word	0x240015f4
 8014d34:	24001610 	.word	0x24001610

08014d38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b084      	sub	sp, #16
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014d44:	2300      	movs	r3, #0
 8014d46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d051      	beq.n	8014df2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014d4e:	68bb      	ldr	r3, [r7, #8]
 8014d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d52:	4b2a      	ldr	r3, [pc, #168]	@ (8014dfc <xTaskPriorityInherit+0xc4>)
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d58:	429a      	cmp	r2, r3
 8014d5a:	d241      	bcs.n	8014de0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014d5c:	68bb      	ldr	r3, [r7, #8]
 8014d5e:	699b      	ldr	r3, [r3, #24]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	db06      	blt.n	8014d72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014d64:	4b25      	ldr	r3, [pc, #148]	@ (8014dfc <xTaskPriorityInherit+0xc4>)
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d6a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014d6e:	68bb      	ldr	r3, [r7, #8]
 8014d70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014d72:	68bb      	ldr	r3, [r7, #8]
 8014d74:	6959      	ldr	r1, [r3, #20]
 8014d76:	68bb      	ldr	r3, [r7, #8]
 8014d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d7a:	4613      	mov	r3, r2
 8014d7c:	009b      	lsls	r3, r3, #2
 8014d7e:	4413      	add	r3, r2
 8014d80:	009b      	lsls	r3, r3, #2
 8014d82:	4a1f      	ldr	r2, [pc, #124]	@ (8014e00 <xTaskPriorityInherit+0xc8>)
 8014d84:	4413      	add	r3, r2
 8014d86:	4299      	cmp	r1, r3
 8014d88:	d122      	bne.n	8014dd0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014d8a:	68bb      	ldr	r3, [r7, #8]
 8014d8c:	3304      	adds	r3, #4
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f7fe f80a 	bl	8012da8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014d94:	4b19      	ldr	r3, [pc, #100]	@ (8014dfc <xTaskPriorityInherit+0xc4>)
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d9a:	68bb      	ldr	r3, [r7, #8]
 8014d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014d9e:	68bb      	ldr	r3, [r7, #8]
 8014da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014da2:	4b18      	ldr	r3, [pc, #96]	@ (8014e04 <xTaskPriorityInherit+0xcc>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	429a      	cmp	r2, r3
 8014da8:	d903      	bls.n	8014db2 <xTaskPriorityInherit+0x7a>
 8014daa:	68bb      	ldr	r3, [r7, #8]
 8014dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014dae:	4a15      	ldr	r2, [pc, #84]	@ (8014e04 <xTaskPriorityInherit+0xcc>)
 8014db0:	6013      	str	r3, [r2, #0]
 8014db2:	68bb      	ldr	r3, [r7, #8]
 8014db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014db6:	4613      	mov	r3, r2
 8014db8:	009b      	lsls	r3, r3, #2
 8014dba:	4413      	add	r3, r2
 8014dbc:	009b      	lsls	r3, r3, #2
 8014dbe:	4a10      	ldr	r2, [pc, #64]	@ (8014e00 <xTaskPriorityInherit+0xc8>)
 8014dc0:	441a      	add	r2, r3
 8014dc2:	68bb      	ldr	r3, [r7, #8]
 8014dc4:	3304      	adds	r3, #4
 8014dc6:	4619      	mov	r1, r3
 8014dc8:	4610      	mov	r0, r2
 8014dca:	f7fd ff90 	bl	8012cee <vListInsertEnd>
 8014dce:	e004      	b.n	8014dda <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8014dfc <xTaskPriorityInherit+0xc4>)
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014dd6:	68bb      	ldr	r3, [r7, #8]
 8014dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014dda:	2301      	movs	r3, #1
 8014ddc:	60fb      	str	r3, [r7, #12]
 8014dde:	e008      	b.n	8014df2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014de0:	68bb      	ldr	r3, [r7, #8]
 8014de2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014de4:	4b05      	ldr	r3, [pc, #20]	@ (8014dfc <xTaskPriorityInherit+0xc4>)
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014dea:	429a      	cmp	r2, r3
 8014dec:	d201      	bcs.n	8014df2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014dee:	2301      	movs	r3, #1
 8014df0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014df2:	68fb      	ldr	r3, [r7, #12]
	}
 8014df4:	4618      	mov	r0, r3
 8014df6:	3710      	adds	r7, #16
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	bd80      	pop	{r7, pc}
 8014dfc:	24001114 	.word	0x24001114
 8014e00:	24001118 	.word	0x24001118
 8014e04:	240015f0 	.word	0x240015f0

08014e08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b086      	sub	sp, #24
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014e14:	2300      	movs	r3, #0
 8014e16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d058      	beq.n	8014ed0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8014edc <xTaskPriorityDisinherit+0xd4>)
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	693a      	ldr	r2, [r7, #16]
 8014e24:	429a      	cmp	r2, r3
 8014e26:	d00b      	beq.n	8014e40 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8014e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e2c:	f383 8811 	msr	BASEPRI, r3
 8014e30:	f3bf 8f6f 	isb	sy
 8014e34:	f3bf 8f4f 	dsb	sy
 8014e38:	60fb      	str	r3, [r7, #12]
}
 8014e3a:	bf00      	nop
 8014e3c:	bf00      	nop
 8014e3e:	e7fd      	b.n	8014e3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014e40:	693b      	ldr	r3, [r7, #16]
 8014e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d10b      	bne.n	8014e60 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8014e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e4c:	f383 8811 	msr	BASEPRI, r3
 8014e50:	f3bf 8f6f 	isb	sy
 8014e54:	f3bf 8f4f 	dsb	sy
 8014e58:	60bb      	str	r3, [r7, #8]
}
 8014e5a:	bf00      	nop
 8014e5c:	bf00      	nop
 8014e5e:	e7fd      	b.n	8014e5c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8014e60:	693b      	ldr	r3, [r7, #16]
 8014e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014e64:	1e5a      	subs	r2, r3, #1
 8014e66:	693b      	ldr	r3, [r7, #16]
 8014e68:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014e6a:	693b      	ldr	r3, [r7, #16]
 8014e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e6e:	693b      	ldr	r3, [r7, #16]
 8014e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014e72:	429a      	cmp	r2, r3
 8014e74:	d02c      	beq.n	8014ed0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014e76:	693b      	ldr	r3, [r7, #16]
 8014e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d128      	bne.n	8014ed0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014e7e:	693b      	ldr	r3, [r7, #16]
 8014e80:	3304      	adds	r3, #4
 8014e82:	4618      	mov	r0, r3
 8014e84:	f7fd ff90 	bl	8012da8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014e88:	693b      	ldr	r3, [r7, #16]
 8014e8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014e8c:	693b      	ldr	r3, [r7, #16]
 8014e8e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014e90:	693b      	ldr	r3, [r7, #16]
 8014e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e94:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014e98:	693b      	ldr	r3, [r7, #16]
 8014e9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014e9c:	693b      	ldr	r3, [r7, #16]
 8014e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8014ee0 <xTaskPriorityDisinherit+0xd8>)
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	429a      	cmp	r2, r3
 8014ea6:	d903      	bls.n	8014eb0 <xTaskPriorityDisinherit+0xa8>
 8014ea8:	693b      	ldr	r3, [r7, #16]
 8014eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014eac:	4a0c      	ldr	r2, [pc, #48]	@ (8014ee0 <xTaskPriorityDisinherit+0xd8>)
 8014eae:	6013      	str	r3, [r2, #0]
 8014eb0:	693b      	ldr	r3, [r7, #16]
 8014eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014eb4:	4613      	mov	r3, r2
 8014eb6:	009b      	lsls	r3, r3, #2
 8014eb8:	4413      	add	r3, r2
 8014eba:	009b      	lsls	r3, r3, #2
 8014ebc:	4a09      	ldr	r2, [pc, #36]	@ (8014ee4 <xTaskPriorityDisinherit+0xdc>)
 8014ebe:	441a      	add	r2, r3
 8014ec0:	693b      	ldr	r3, [r7, #16]
 8014ec2:	3304      	adds	r3, #4
 8014ec4:	4619      	mov	r1, r3
 8014ec6:	4610      	mov	r0, r2
 8014ec8:	f7fd ff11 	bl	8012cee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014ecc:	2301      	movs	r3, #1
 8014ece:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014ed0:	697b      	ldr	r3, [r7, #20]
	}
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	3718      	adds	r7, #24
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	bd80      	pop	{r7, pc}
 8014eda:	bf00      	nop
 8014edc:	24001114 	.word	0x24001114
 8014ee0:	240015f0 	.word	0x240015f0
 8014ee4:	24001118 	.word	0x24001118

08014ee8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b088      	sub	sp, #32
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
 8014ef0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014ef6:	2301      	movs	r3, #1
 8014ef8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d06c      	beq.n	8014fda <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014f00:	69bb      	ldr	r3, [r7, #24]
 8014f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d10b      	bne.n	8014f20 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8014f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f0c:	f383 8811 	msr	BASEPRI, r3
 8014f10:	f3bf 8f6f 	isb	sy
 8014f14:	f3bf 8f4f 	dsb	sy
 8014f18:	60fb      	str	r3, [r7, #12]
}
 8014f1a:	bf00      	nop
 8014f1c:	bf00      	nop
 8014f1e:	e7fd      	b.n	8014f1c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014f20:	69bb      	ldr	r3, [r7, #24]
 8014f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014f24:	683a      	ldr	r2, [r7, #0]
 8014f26:	429a      	cmp	r2, r3
 8014f28:	d902      	bls.n	8014f30 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014f2a:	683b      	ldr	r3, [r7, #0]
 8014f2c:	61fb      	str	r3, [r7, #28]
 8014f2e:	e002      	b.n	8014f36 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014f30:	69bb      	ldr	r3, [r7, #24]
 8014f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014f34:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014f36:	69bb      	ldr	r3, [r7, #24]
 8014f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f3a:	69fa      	ldr	r2, [r7, #28]
 8014f3c:	429a      	cmp	r2, r3
 8014f3e:	d04c      	beq.n	8014fda <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014f40:	69bb      	ldr	r3, [r7, #24]
 8014f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014f44:	697a      	ldr	r2, [r7, #20]
 8014f46:	429a      	cmp	r2, r3
 8014f48:	d147      	bne.n	8014fda <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014f4a:	4b26      	ldr	r3, [pc, #152]	@ (8014fe4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	69ba      	ldr	r2, [r7, #24]
 8014f50:	429a      	cmp	r2, r3
 8014f52:	d10b      	bne.n	8014f6c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8014f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f58:	f383 8811 	msr	BASEPRI, r3
 8014f5c:	f3bf 8f6f 	isb	sy
 8014f60:	f3bf 8f4f 	dsb	sy
 8014f64:	60bb      	str	r3, [r7, #8]
}
 8014f66:	bf00      	nop
 8014f68:	bf00      	nop
 8014f6a:	e7fd      	b.n	8014f68 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014f6c:	69bb      	ldr	r3, [r7, #24]
 8014f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f70:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014f72:	69bb      	ldr	r3, [r7, #24]
 8014f74:	69fa      	ldr	r2, [r7, #28]
 8014f76:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014f78:	69bb      	ldr	r3, [r7, #24]
 8014f7a:	699b      	ldr	r3, [r3, #24]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	db04      	blt.n	8014f8a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f80:	69fb      	ldr	r3, [r7, #28]
 8014f82:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014f86:	69bb      	ldr	r3, [r7, #24]
 8014f88:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014f8a:	69bb      	ldr	r3, [r7, #24]
 8014f8c:	6959      	ldr	r1, [r3, #20]
 8014f8e:	693a      	ldr	r2, [r7, #16]
 8014f90:	4613      	mov	r3, r2
 8014f92:	009b      	lsls	r3, r3, #2
 8014f94:	4413      	add	r3, r2
 8014f96:	009b      	lsls	r3, r3, #2
 8014f98:	4a13      	ldr	r2, [pc, #76]	@ (8014fe8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014f9a:	4413      	add	r3, r2
 8014f9c:	4299      	cmp	r1, r3
 8014f9e:	d11c      	bne.n	8014fda <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014fa0:	69bb      	ldr	r3, [r7, #24]
 8014fa2:	3304      	adds	r3, #4
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f7fd feff 	bl	8012da8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014faa:	69bb      	ldr	r3, [r7, #24]
 8014fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014fae:	4b0f      	ldr	r3, [pc, #60]	@ (8014fec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	d903      	bls.n	8014fbe <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8014fb6:	69bb      	ldr	r3, [r7, #24]
 8014fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014fba:	4a0c      	ldr	r2, [pc, #48]	@ (8014fec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8014fbc:	6013      	str	r3, [r2, #0]
 8014fbe:	69bb      	ldr	r3, [r7, #24]
 8014fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014fc2:	4613      	mov	r3, r2
 8014fc4:	009b      	lsls	r3, r3, #2
 8014fc6:	4413      	add	r3, r2
 8014fc8:	009b      	lsls	r3, r3, #2
 8014fca:	4a07      	ldr	r2, [pc, #28]	@ (8014fe8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014fcc:	441a      	add	r2, r3
 8014fce:	69bb      	ldr	r3, [r7, #24]
 8014fd0:	3304      	adds	r3, #4
 8014fd2:	4619      	mov	r1, r3
 8014fd4:	4610      	mov	r0, r2
 8014fd6:	f7fd fe8a 	bl	8012cee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014fda:	bf00      	nop
 8014fdc:	3720      	adds	r7, #32
 8014fde:	46bd      	mov	sp, r7
 8014fe0:	bd80      	pop	{r7, pc}
 8014fe2:	bf00      	nop
 8014fe4:	24001114 	.word	0x24001114
 8014fe8:	24001118 	.word	0x24001118
 8014fec:	240015f0 	.word	0x240015f0

08014ff0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8014ff0:	b480      	push	{r7}
 8014ff2:	b083      	sub	sp, #12
 8014ff4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8014ff6:	4b09      	ldr	r3, [pc, #36]	@ (801501c <uxTaskResetEventItemValue+0x2c>)
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	699b      	ldr	r3, [r3, #24]
 8014ffc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014ffe:	4b07      	ldr	r3, [pc, #28]	@ (801501c <uxTaskResetEventItemValue+0x2c>)
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015004:	4b05      	ldr	r3, [pc, #20]	@ (801501c <uxTaskResetEventItemValue+0x2c>)
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 801500c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801500e:	687b      	ldr	r3, [r7, #4]
}
 8015010:	4618      	mov	r0, r3
 8015012:	370c      	adds	r7, #12
 8015014:	46bd      	mov	sp, r7
 8015016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501a:	4770      	bx	lr
 801501c:	24001114 	.word	0x24001114

08015020 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015020:	b480      	push	{r7}
 8015022:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015024:	4b07      	ldr	r3, [pc, #28]	@ (8015044 <pvTaskIncrementMutexHeldCount+0x24>)
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d004      	beq.n	8015036 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801502c:	4b05      	ldr	r3, [pc, #20]	@ (8015044 <pvTaskIncrementMutexHeldCount+0x24>)
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015032:	3201      	adds	r2, #1
 8015034:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8015036:	4b03      	ldr	r3, [pc, #12]	@ (8015044 <pvTaskIncrementMutexHeldCount+0x24>)
 8015038:	681b      	ldr	r3, [r3, #0]
	}
 801503a:	4618      	mov	r0, r3
 801503c:	46bd      	mov	sp, r7
 801503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015042:	4770      	bx	lr
 8015044:	24001114 	.word	0x24001114

08015048 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8015048:	b580      	push	{r7, lr}
 801504a:	b084      	sub	sp, #16
 801504c:	af00      	add	r7, sp, #0
 801504e:	6078      	str	r0, [r7, #4]
 8015050:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8015052:	f000 ff49 	bl	8015ee8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8015056:	4b20      	ldr	r3, [pc, #128]	@ (80150d8 <ulTaskNotifyTake+0x90>)
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801505e:	2b00      	cmp	r3, #0
 8015060:	d113      	bne.n	801508a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8015062:	4b1d      	ldr	r3, [pc, #116]	@ (80150d8 <ulTaskNotifyTake+0x90>)
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	2201      	movs	r2, #1
 8015068:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 801506c:	683b      	ldr	r3, [r7, #0]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d00b      	beq.n	801508a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015072:	2101      	movs	r1, #1
 8015074:	6838      	ldr	r0, [r7, #0]
 8015076:	f000 f9db 	bl	8015430 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801507a:	4b18      	ldr	r3, [pc, #96]	@ (80150dc <ulTaskNotifyTake+0x94>)
 801507c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015080:	601a      	str	r2, [r3, #0]
 8015082:	f3bf 8f4f 	dsb	sy
 8015086:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801508a:	f000 ff5f 	bl	8015f4c <vPortExitCritical>

		taskENTER_CRITICAL();
 801508e:	f000 ff2b 	bl	8015ee8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8015092:	4b11      	ldr	r3, [pc, #68]	@ (80150d8 <ulTaskNotifyTake+0x90>)
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801509a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d00e      	beq.n	80150c0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d005      	beq.n	80150b4 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80150a8:	4b0b      	ldr	r3, [pc, #44]	@ (80150d8 <ulTaskNotifyTake+0x90>)
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	2200      	movs	r2, #0
 80150ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80150b2:	e005      	b.n	80150c0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80150b4:	4b08      	ldr	r3, [pc, #32]	@ (80150d8 <ulTaskNotifyTake+0x90>)
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	68fa      	ldr	r2, [r7, #12]
 80150ba:	3a01      	subs	r2, #1
 80150bc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80150c0:	4b05      	ldr	r3, [pc, #20]	@ (80150d8 <ulTaskNotifyTake+0x90>)
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	2200      	movs	r2, #0
 80150c6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80150ca:	f000 ff3f 	bl	8015f4c <vPortExitCritical>

		return ulReturn;
 80150ce:	68fb      	ldr	r3, [r7, #12]
	}
 80150d0:	4618      	mov	r0, r3
 80150d2:	3710      	adds	r7, #16
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd80      	pop	{r7, pc}
 80150d8:	24001114 	.word	0x24001114
 80150dc:	e000ed04 	.word	0xe000ed04

080150e0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b08a      	sub	sp, #40	@ 0x28
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	60f8      	str	r0, [r7, #12]
 80150e8:	60b9      	str	r1, [r7, #8]
 80150ea:	603b      	str	r3, [r7, #0]
 80150ec:	4613      	mov	r3, r2
 80150ee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80150f0:	2301      	movs	r3, #1
 80150f2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d10b      	bne.n	8015112 <xTaskGenericNotify+0x32>
	__asm volatile
 80150fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150fe:	f383 8811 	msr	BASEPRI, r3
 8015102:	f3bf 8f6f 	isb	sy
 8015106:	f3bf 8f4f 	dsb	sy
 801510a:	61bb      	str	r3, [r7, #24]
}
 801510c:	bf00      	nop
 801510e:	bf00      	nop
 8015110:	e7fd      	b.n	801510e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8015116:	f000 fee7 	bl	8015ee8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801511a:	683b      	ldr	r3, [r7, #0]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d004      	beq.n	801512a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8015120:	6a3b      	ldr	r3, [r7, #32]
 8015122:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015126:	683b      	ldr	r3, [r7, #0]
 8015128:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801512a:	6a3b      	ldr	r3, [r7, #32]
 801512c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8015130:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015132:	6a3b      	ldr	r3, [r7, #32]
 8015134:	2202      	movs	r2, #2
 8015136:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 801513a:	79fb      	ldrb	r3, [r7, #7]
 801513c:	2b04      	cmp	r3, #4
 801513e:	d82e      	bhi.n	801519e <xTaskGenericNotify+0xbe>
 8015140:	a201      	add	r2, pc, #4	@ (adr r2, 8015148 <xTaskGenericNotify+0x68>)
 8015142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015146:	bf00      	nop
 8015148:	080151c3 	.word	0x080151c3
 801514c:	0801515d 	.word	0x0801515d
 8015150:	0801516f 	.word	0x0801516f
 8015154:	0801517f 	.word	0x0801517f
 8015158:	08015189 	.word	0x08015189
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801515c:	6a3b      	ldr	r3, [r7, #32]
 801515e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015162:	68bb      	ldr	r3, [r7, #8]
 8015164:	431a      	orrs	r2, r3
 8015166:	6a3b      	ldr	r3, [r7, #32]
 8015168:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801516c:	e02c      	b.n	80151c8 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801516e:	6a3b      	ldr	r3, [r7, #32]
 8015170:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015174:	1c5a      	adds	r2, r3, #1
 8015176:	6a3b      	ldr	r3, [r7, #32]
 8015178:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801517c:	e024      	b.n	80151c8 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801517e:	6a3b      	ldr	r3, [r7, #32]
 8015180:	68ba      	ldr	r2, [r7, #8]
 8015182:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015186:	e01f      	b.n	80151c8 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8015188:	7ffb      	ldrb	r3, [r7, #31]
 801518a:	2b02      	cmp	r3, #2
 801518c:	d004      	beq.n	8015198 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801518e:	6a3b      	ldr	r3, [r7, #32]
 8015190:	68ba      	ldr	r2, [r7, #8]
 8015192:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8015196:	e017      	b.n	80151c8 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8015198:	2300      	movs	r3, #0
 801519a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 801519c:	e014      	b.n	80151c8 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801519e:	6a3b      	ldr	r3, [r7, #32]
 80151a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80151a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80151a8:	d00d      	beq.n	80151c6 <xTaskGenericNotify+0xe6>
	__asm volatile
 80151aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151ae:	f383 8811 	msr	BASEPRI, r3
 80151b2:	f3bf 8f6f 	isb	sy
 80151b6:	f3bf 8f4f 	dsb	sy
 80151ba:	617b      	str	r3, [r7, #20]
}
 80151bc:	bf00      	nop
 80151be:	bf00      	nop
 80151c0:	e7fd      	b.n	80151be <xTaskGenericNotify+0xde>
					break;
 80151c2:	bf00      	nop
 80151c4:	e000      	b.n	80151c8 <xTaskGenericNotify+0xe8>

					break;
 80151c6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80151c8:	7ffb      	ldrb	r3, [r7, #31]
 80151ca:	2b01      	cmp	r3, #1
 80151cc:	d13b      	bne.n	8015246 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80151ce:	6a3b      	ldr	r3, [r7, #32]
 80151d0:	3304      	adds	r3, #4
 80151d2:	4618      	mov	r0, r3
 80151d4:	f7fd fde8 	bl	8012da8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80151d8:	6a3b      	ldr	r3, [r7, #32]
 80151da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80151dc:	4b1d      	ldr	r3, [pc, #116]	@ (8015254 <xTaskGenericNotify+0x174>)
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	429a      	cmp	r2, r3
 80151e2:	d903      	bls.n	80151ec <xTaskGenericNotify+0x10c>
 80151e4:	6a3b      	ldr	r3, [r7, #32]
 80151e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151e8:	4a1a      	ldr	r2, [pc, #104]	@ (8015254 <xTaskGenericNotify+0x174>)
 80151ea:	6013      	str	r3, [r2, #0]
 80151ec:	6a3b      	ldr	r3, [r7, #32]
 80151ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80151f0:	4613      	mov	r3, r2
 80151f2:	009b      	lsls	r3, r3, #2
 80151f4:	4413      	add	r3, r2
 80151f6:	009b      	lsls	r3, r3, #2
 80151f8:	4a17      	ldr	r2, [pc, #92]	@ (8015258 <xTaskGenericNotify+0x178>)
 80151fa:	441a      	add	r2, r3
 80151fc:	6a3b      	ldr	r3, [r7, #32]
 80151fe:	3304      	adds	r3, #4
 8015200:	4619      	mov	r1, r3
 8015202:	4610      	mov	r0, r2
 8015204:	f7fd fd73 	bl	8012cee <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8015208:	6a3b      	ldr	r3, [r7, #32]
 801520a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801520c:	2b00      	cmp	r3, #0
 801520e:	d00b      	beq.n	8015228 <xTaskGenericNotify+0x148>
	__asm volatile
 8015210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015214:	f383 8811 	msr	BASEPRI, r3
 8015218:	f3bf 8f6f 	isb	sy
 801521c:	f3bf 8f4f 	dsb	sy
 8015220:	613b      	str	r3, [r7, #16]
}
 8015222:	bf00      	nop
 8015224:	bf00      	nop
 8015226:	e7fd      	b.n	8015224 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015228:	6a3b      	ldr	r3, [r7, #32]
 801522a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801522c:	4b0b      	ldr	r3, [pc, #44]	@ (801525c <xTaskGenericNotify+0x17c>)
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015232:	429a      	cmp	r2, r3
 8015234:	d907      	bls.n	8015246 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8015236:	4b0a      	ldr	r3, [pc, #40]	@ (8015260 <xTaskGenericNotify+0x180>)
 8015238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801523c:	601a      	str	r2, [r3, #0]
 801523e:	f3bf 8f4f 	dsb	sy
 8015242:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8015246:	f000 fe81 	bl	8015f4c <vPortExitCritical>

		return xReturn;
 801524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 801524c:	4618      	mov	r0, r3
 801524e:	3728      	adds	r7, #40	@ 0x28
 8015250:	46bd      	mov	sp, r7
 8015252:	bd80      	pop	{r7, pc}
 8015254:	240015f0 	.word	0x240015f0
 8015258:	24001118 	.word	0x24001118
 801525c:	24001114 	.word	0x24001114
 8015260:	e000ed04 	.word	0xe000ed04

08015264 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015264:	b580      	push	{r7, lr}
 8015266:	b08e      	sub	sp, #56	@ 0x38
 8015268:	af00      	add	r7, sp, #0
 801526a:	60f8      	str	r0, [r7, #12]
 801526c:	60b9      	str	r1, [r7, #8]
 801526e:	603b      	str	r3, [r7, #0]
 8015270:	4613      	mov	r3, r2
 8015272:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8015274:	2301      	movs	r3, #1
 8015276:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d10b      	bne.n	8015296 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 801527e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015282:	f383 8811 	msr	BASEPRI, r3
 8015286:	f3bf 8f6f 	isb	sy
 801528a:	f3bf 8f4f 	dsb	sy
 801528e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015290:	bf00      	nop
 8015292:	bf00      	nop
 8015294:	e7fd      	b.n	8015292 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015296:	f000 ff07 	bl	80160a8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 801529e:	f3ef 8211 	mrs	r2, BASEPRI
 80152a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152a6:	f383 8811 	msr	BASEPRI, r3
 80152aa:	f3bf 8f6f 	isb	sy
 80152ae:	f3bf 8f4f 	dsb	sy
 80152b2:	623a      	str	r2, [r7, #32]
 80152b4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80152b6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80152b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80152ba:	683b      	ldr	r3, [r7, #0]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d004      	beq.n	80152ca <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80152c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152c2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80152c6:	683b      	ldr	r3, [r7, #0]
 80152c8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80152ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152cc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80152d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80152d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152d6:	2202      	movs	r2, #2
 80152d8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80152dc:	79fb      	ldrb	r3, [r7, #7]
 80152de:	2b04      	cmp	r3, #4
 80152e0:	d82e      	bhi.n	8015340 <xTaskGenericNotifyFromISR+0xdc>
 80152e2:	a201      	add	r2, pc, #4	@ (adr r2, 80152e8 <xTaskGenericNotifyFromISR+0x84>)
 80152e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152e8:	08015365 	.word	0x08015365
 80152ec:	080152fd 	.word	0x080152fd
 80152f0:	0801530f 	.word	0x0801530f
 80152f4:	0801531f 	.word	0x0801531f
 80152f8:	08015329 	.word	0x08015329
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80152fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152fe:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015302:	68bb      	ldr	r3, [r7, #8]
 8015304:	431a      	orrs	r2, r3
 8015306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015308:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801530c:	e02d      	b.n	801536a <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801530e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015310:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015314:	1c5a      	adds	r2, r3, #1
 8015316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015318:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801531c:	e025      	b.n	801536a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801531e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015320:	68ba      	ldr	r2, [r7, #8]
 8015322:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015326:	e020      	b.n	801536a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8015328:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801532c:	2b02      	cmp	r3, #2
 801532e:	d004      	beq.n	801533a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8015330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015332:	68ba      	ldr	r2, [r7, #8]
 8015334:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8015338:	e017      	b.n	801536a <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 801533a:	2300      	movs	r3, #0
 801533c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 801533e:	e014      	b.n	801536a <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8015340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015342:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015346:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801534a:	d00d      	beq.n	8015368 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 801534c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015350:	f383 8811 	msr	BASEPRI, r3
 8015354:	f3bf 8f6f 	isb	sy
 8015358:	f3bf 8f4f 	dsb	sy
 801535c:	61bb      	str	r3, [r7, #24]
}
 801535e:	bf00      	nop
 8015360:	bf00      	nop
 8015362:	e7fd      	b.n	8015360 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8015364:	bf00      	nop
 8015366:	e000      	b.n	801536a <xTaskGenericNotifyFromISR+0x106>
					break;
 8015368:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801536a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801536e:	2b01      	cmp	r3, #1
 8015370:	d147      	bne.n	8015402 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8015372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015376:	2b00      	cmp	r3, #0
 8015378:	d00b      	beq.n	8015392 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 801537a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801537e:	f383 8811 	msr	BASEPRI, r3
 8015382:	f3bf 8f6f 	isb	sy
 8015386:	f3bf 8f4f 	dsb	sy
 801538a:	617b      	str	r3, [r7, #20]
}
 801538c:	bf00      	nop
 801538e:	bf00      	nop
 8015390:	e7fd      	b.n	801538e <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015392:	4b21      	ldr	r3, [pc, #132]	@ (8015418 <xTaskGenericNotifyFromISR+0x1b4>)
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d11d      	bne.n	80153d6 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801539a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801539c:	3304      	adds	r3, #4
 801539e:	4618      	mov	r0, r3
 80153a0:	f7fd fd02 	bl	8012da8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80153a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80153a8:	4b1c      	ldr	r3, [pc, #112]	@ (801541c <xTaskGenericNotifyFromISR+0x1b8>)
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	429a      	cmp	r2, r3
 80153ae:	d903      	bls.n	80153b8 <xTaskGenericNotifyFromISR+0x154>
 80153b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80153b4:	4a19      	ldr	r2, [pc, #100]	@ (801541c <xTaskGenericNotifyFromISR+0x1b8>)
 80153b6:	6013      	str	r3, [r2, #0]
 80153b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80153bc:	4613      	mov	r3, r2
 80153be:	009b      	lsls	r3, r3, #2
 80153c0:	4413      	add	r3, r2
 80153c2:	009b      	lsls	r3, r3, #2
 80153c4:	4a16      	ldr	r2, [pc, #88]	@ (8015420 <xTaskGenericNotifyFromISR+0x1bc>)
 80153c6:	441a      	add	r2, r3
 80153c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153ca:	3304      	adds	r3, #4
 80153cc:	4619      	mov	r1, r3
 80153ce:	4610      	mov	r0, r2
 80153d0:	f7fd fc8d 	bl	8012cee <vListInsertEnd>
 80153d4:	e005      	b.n	80153e2 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80153d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153d8:	3318      	adds	r3, #24
 80153da:	4619      	mov	r1, r3
 80153dc:	4811      	ldr	r0, [pc, #68]	@ (8015424 <xTaskGenericNotifyFromISR+0x1c0>)
 80153de:	f7fd fc86 	bl	8012cee <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80153e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80153e6:	4b10      	ldr	r3, [pc, #64]	@ (8015428 <xTaskGenericNotifyFromISR+0x1c4>)
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80153ec:	429a      	cmp	r2, r3
 80153ee:	d908      	bls.n	8015402 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80153f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d002      	beq.n	80153fc <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80153f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80153f8:	2201      	movs	r2, #1
 80153fa:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80153fc:	4b0b      	ldr	r3, [pc, #44]	@ (801542c <xTaskGenericNotifyFromISR+0x1c8>)
 80153fe:	2201      	movs	r2, #1
 8015400:	601a      	str	r2, [r3, #0]
 8015402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015404:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015406:	693b      	ldr	r3, [r7, #16]
 8015408:	f383 8811 	msr	BASEPRI, r3
}
 801540c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801540e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8015410:	4618      	mov	r0, r3
 8015412:	3738      	adds	r7, #56	@ 0x38
 8015414:	46bd      	mov	sp, r7
 8015416:	bd80      	pop	{r7, pc}
 8015418:	24001610 	.word	0x24001610
 801541c:	240015f0 	.word	0x240015f0
 8015420:	24001118 	.word	0x24001118
 8015424:	240015a8 	.word	0x240015a8
 8015428:	24001114 	.word	0x24001114
 801542c:	240015fc 	.word	0x240015fc

08015430 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b084      	sub	sp, #16
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
 8015438:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801543a:	4b21      	ldr	r3, [pc, #132]	@ (80154c0 <prvAddCurrentTaskToDelayedList+0x90>)
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015440:	4b20      	ldr	r3, [pc, #128]	@ (80154c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	3304      	adds	r3, #4
 8015446:	4618      	mov	r0, r3
 8015448:	f7fd fcae 	bl	8012da8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015452:	d10a      	bne.n	801546a <prvAddCurrentTaskToDelayedList+0x3a>
 8015454:	683b      	ldr	r3, [r7, #0]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d007      	beq.n	801546a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801545a:	4b1a      	ldr	r3, [pc, #104]	@ (80154c4 <prvAddCurrentTaskToDelayedList+0x94>)
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	3304      	adds	r3, #4
 8015460:	4619      	mov	r1, r3
 8015462:	4819      	ldr	r0, [pc, #100]	@ (80154c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8015464:	f7fd fc43 	bl	8012cee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015468:	e026      	b.n	80154b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801546a:	68fa      	ldr	r2, [r7, #12]
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	4413      	add	r3, r2
 8015470:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015472:	4b14      	ldr	r3, [pc, #80]	@ (80154c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	68ba      	ldr	r2, [r7, #8]
 8015478:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801547a:	68ba      	ldr	r2, [r7, #8]
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	429a      	cmp	r2, r3
 8015480:	d209      	bcs.n	8015496 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015482:	4b12      	ldr	r3, [pc, #72]	@ (80154cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8015484:	681a      	ldr	r2, [r3, #0]
 8015486:	4b0f      	ldr	r3, [pc, #60]	@ (80154c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	3304      	adds	r3, #4
 801548c:	4619      	mov	r1, r3
 801548e:	4610      	mov	r0, r2
 8015490:	f7fd fc51 	bl	8012d36 <vListInsert>
}
 8015494:	e010      	b.n	80154b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015496:	4b0e      	ldr	r3, [pc, #56]	@ (80154d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015498:	681a      	ldr	r2, [r3, #0]
 801549a:	4b0a      	ldr	r3, [pc, #40]	@ (80154c4 <prvAddCurrentTaskToDelayedList+0x94>)
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	3304      	adds	r3, #4
 80154a0:	4619      	mov	r1, r3
 80154a2:	4610      	mov	r0, r2
 80154a4:	f7fd fc47 	bl	8012d36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80154a8:	4b0a      	ldr	r3, [pc, #40]	@ (80154d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	68ba      	ldr	r2, [r7, #8]
 80154ae:	429a      	cmp	r2, r3
 80154b0:	d202      	bcs.n	80154b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80154b2:	4a08      	ldr	r2, [pc, #32]	@ (80154d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80154b4:	68bb      	ldr	r3, [r7, #8]
 80154b6:	6013      	str	r3, [r2, #0]
}
 80154b8:	bf00      	nop
 80154ba:	3710      	adds	r7, #16
 80154bc:	46bd      	mov	sp, r7
 80154be:	bd80      	pop	{r7, pc}
 80154c0:	240015ec 	.word	0x240015ec
 80154c4:	24001114 	.word	0x24001114
 80154c8:	240015d4 	.word	0x240015d4
 80154cc:	240015a4 	.word	0x240015a4
 80154d0:	240015a0 	.word	0x240015a0
 80154d4:	24001608 	.word	0x24001608

080154d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b08a      	sub	sp, #40	@ 0x28
 80154dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80154de:	2300      	movs	r3, #0
 80154e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80154e2:	f000 fb71 	bl	8015bc8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80154e6:	4b1d      	ldr	r3, [pc, #116]	@ (801555c <xTimerCreateTimerTask+0x84>)
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d021      	beq.n	8015532 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80154ee:	2300      	movs	r3, #0
 80154f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80154f2:	2300      	movs	r3, #0
 80154f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80154f6:	1d3a      	adds	r2, r7, #4
 80154f8:	f107 0108 	add.w	r1, r7, #8
 80154fc:	f107 030c 	add.w	r3, r7, #12
 8015500:	4618      	mov	r0, r3
 8015502:	f7fd f9f1 	bl	80128e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015506:	6879      	ldr	r1, [r7, #4]
 8015508:	68bb      	ldr	r3, [r7, #8]
 801550a:	68fa      	ldr	r2, [r7, #12]
 801550c:	9202      	str	r2, [sp, #8]
 801550e:	9301      	str	r3, [sp, #4]
 8015510:	2302      	movs	r3, #2
 8015512:	9300      	str	r3, [sp, #0]
 8015514:	2300      	movs	r3, #0
 8015516:	460a      	mov	r2, r1
 8015518:	4911      	ldr	r1, [pc, #68]	@ (8015560 <xTimerCreateTimerTask+0x88>)
 801551a:	4812      	ldr	r0, [pc, #72]	@ (8015564 <xTimerCreateTimerTask+0x8c>)
 801551c:	f7fe fc9a 	bl	8013e54 <xTaskCreateStatic>
 8015520:	4603      	mov	r3, r0
 8015522:	4a11      	ldr	r2, [pc, #68]	@ (8015568 <xTimerCreateTimerTask+0x90>)
 8015524:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015526:	4b10      	ldr	r3, [pc, #64]	@ (8015568 <xTimerCreateTimerTask+0x90>)
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d001      	beq.n	8015532 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801552e:	2301      	movs	r3, #1
 8015530:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015532:	697b      	ldr	r3, [r7, #20]
 8015534:	2b00      	cmp	r3, #0
 8015536:	d10b      	bne.n	8015550 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8015538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801553c:	f383 8811 	msr	BASEPRI, r3
 8015540:	f3bf 8f6f 	isb	sy
 8015544:	f3bf 8f4f 	dsb	sy
 8015548:	613b      	str	r3, [r7, #16]
}
 801554a:	bf00      	nop
 801554c:	bf00      	nop
 801554e:	e7fd      	b.n	801554c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015550:	697b      	ldr	r3, [r7, #20]
}
 8015552:	4618      	mov	r0, r3
 8015554:	3718      	adds	r7, #24
 8015556:	46bd      	mov	sp, r7
 8015558:	bd80      	pop	{r7, pc}
 801555a:	bf00      	nop
 801555c:	24001644 	.word	0x24001644
 8015560:	08017c58 	.word	0x08017c58
 8015564:	08015761 	.word	0x08015761
 8015568:	24001648 	.word	0x24001648

0801556c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 801556c:	b580      	push	{r7, lr}
 801556e:	b088      	sub	sp, #32
 8015570:	af02      	add	r7, sp, #8
 8015572:	60f8      	str	r0, [r7, #12]
 8015574:	60b9      	str	r1, [r7, #8]
 8015576:	607a      	str	r2, [r7, #4]
 8015578:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801557a:	202c      	movs	r0, #44	@ 0x2c
 801557c:	f000 fdd6 	bl	801612c <pvPortMalloc>
 8015580:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8015582:	697b      	ldr	r3, [r7, #20]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d00d      	beq.n	80155a4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8015588:	697b      	ldr	r3, [r7, #20]
 801558a:	2200      	movs	r2, #0
 801558c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8015590:	697b      	ldr	r3, [r7, #20]
 8015592:	9301      	str	r3, [sp, #4]
 8015594:	6a3b      	ldr	r3, [r7, #32]
 8015596:	9300      	str	r3, [sp, #0]
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	687a      	ldr	r2, [r7, #4]
 801559c:	68b9      	ldr	r1, [r7, #8]
 801559e:	68f8      	ldr	r0, [r7, #12]
 80155a0:	f000 f805 	bl	80155ae <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80155a4:	697b      	ldr	r3, [r7, #20]
	}
 80155a6:	4618      	mov	r0, r3
 80155a8:	3718      	adds	r7, #24
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd80      	pop	{r7, pc}

080155ae <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80155ae:	b580      	push	{r7, lr}
 80155b0:	b086      	sub	sp, #24
 80155b2:	af00      	add	r7, sp, #0
 80155b4:	60f8      	str	r0, [r7, #12]
 80155b6:	60b9      	str	r1, [r7, #8]
 80155b8:	607a      	str	r2, [r7, #4]
 80155ba:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80155bc:	68bb      	ldr	r3, [r7, #8]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d10b      	bne.n	80155da <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80155c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155c6:	f383 8811 	msr	BASEPRI, r3
 80155ca:	f3bf 8f6f 	isb	sy
 80155ce:	f3bf 8f4f 	dsb	sy
 80155d2:	617b      	str	r3, [r7, #20]
}
 80155d4:	bf00      	nop
 80155d6:	bf00      	nop
 80155d8:	e7fd      	b.n	80155d6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80155da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d01e      	beq.n	801561e <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80155e0:	f000 faf2 	bl	8015bc8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80155e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155e6:	68fa      	ldr	r2, [r7, #12]
 80155e8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80155ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155ec:	68ba      	ldr	r2, [r7, #8]
 80155ee:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80155f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155f2:	683a      	ldr	r2, [r7, #0]
 80155f4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80155f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155f8:	6a3a      	ldr	r2, [r7, #32]
 80155fa:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80155fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155fe:	3304      	adds	r3, #4
 8015600:	4618      	mov	r0, r3
 8015602:	f7fd fb67 	bl	8012cd4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d008      	beq.n	801561e <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 801560c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801560e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015612:	f043 0304 	orr.w	r3, r3, #4
 8015616:	b2da      	uxtb	r2, r3
 8015618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801561a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 801561e:	bf00      	nop
 8015620:	3718      	adds	r7, #24
 8015622:	46bd      	mov	sp, r7
 8015624:	bd80      	pop	{r7, pc}
	...

08015628 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015628:	b580      	push	{r7, lr}
 801562a:	b08a      	sub	sp, #40	@ 0x28
 801562c:	af00      	add	r7, sp, #0
 801562e:	60f8      	str	r0, [r7, #12]
 8015630:	60b9      	str	r1, [r7, #8]
 8015632:	607a      	str	r2, [r7, #4]
 8015634:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015636:	2300      	movs	r3, #0
 8015638:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	2b00      	cmp	r3, #0
 801563e:	d10b      	bne.n	8015658 <xTimerGenericCommand+0x30>
	__asm volatile
 8015640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015644:	f383 8811 	msr	BASEPRI, r3
 8015648:	f3bf 8f6f 	isb	sy
 801564c:	f3bf 8f4f 	dsb	sy
 8015650:	623b      	str	r3, [r7, #32]
}
 8015652:	bf00      	nop
 8015654:	bf00      	nop
 8015656:	e7fd      	b.n	8015654 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015658:	4b19      	ldr	r3, [pc, #100]	@ (80156c0 <xTimerGenericCommand+0x98>)
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d02a      	beq.n	80156b6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015660:	68bb      	ldr	r3, [r7, #8]
 8015662:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801566c:	68bb      	ldr	r3, [r7, #8]
 801566e:	2b05      	cmp	r3, #5
 8015670:	dc18      	bgt.n	80156a4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015672:	f7ff fb43 	bl	8014cfc <xTaskGetSchedulerState>
 8015676:	4603      	mov	r3, r0
 8015678:	2b02      	cmp	r3, #2
 801567a:	d109      	bne.n	8015690 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801567c:	4b10      	ldr	r3, [pc, #64]	@ (80156c0 <xTimerGenericCommand+0x98>)
 801567e:	6818      	ldr	r0, [r3, #0]
 8015680:	f107 0110 	add.w	r1, r7, #16
 8015684:	2300      	movs	r3, #0
 8015686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015688:	f7fd fd6c 	bl	8013164 <xQueueGenericSend>
 801568c:	6278      	str	r0, [r7, #36]	@ 0x24
 801568e:	e012      	b.n	80156b6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015690:	4b0b      	ldr	r3, [pc, #44]	@ (80156c0 <xTimerGenericCommand+0x98>)
 8015692:	6818      	ldr	r0, [r3, #0]
 8015694:	f107 0110 	add.w	r1, r7, #16
 8015698:	2300      	movs	r3, #0
 801569a:	2200      	movs	r2, #0
 801569c:	f7fd fd62 	bl	8013164 <xQueueGenericSend>
 80156a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80156a2:	e008      	b.n	80156b6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80156a4:	4b06      	ldr	r3, [pc, #24]	@ (80156c0 <xTimerGenericCommand+0x98>)
 80156a6:	6818      	ldr	r0, [r3, #0]
 80156a8:	f107 0110 	add.w	r1, r7, #16
 80156ac:	2300      	movs	r3, #0
 80156ae:	683a      	ldr	r2, [r7, #0]
 80156b0:	f7fd fe5a 	bl	8013368 <xQueueGenericSendFromISR>
 80156b4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80156b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80156b8:	4618      	mov	r0, r3
 80156ba:	3728      	adds	r7, #40	@ 0x28
 80156bc:	46bd      	mov	sp, r7
 80156be:	bd80      	pop	{r7, pc}
 80156c0:	24001644 	.word	0x24001644

080156c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b088      	sub	sp, #32
 80156c8:	af02      	add	r7, sp, #8
 80156ca:	6078      	str	r0, [r7, #4]
 80156cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80156ce:	4b23      	ldr	r3, [pc, #140]	@ (801575c <prvProcessExpiredTimer+0x98>)
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	68db      	ldr	r3, [r3, #12]
 80156d4:	68db      	ldr	r3, [r3, #12]
 80156d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80156d8:	697b      	ldr	r3, [r7, #20]
 80156da:	3304      	adds	r3, #4
 80156dc:	4618      	mov	r0, r3
 80156de:	f7fd fb63 	bl	8012da8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80156e2:	697b      	ldr	r3, [r7, #20]
 80156e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80156e8:	f003 0304 	and.w	r3, r3, #4
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d023      	beq.n	8015738 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80156f0:	697b      	ldr	r3, [r7, #20]
 80156f2:	699a      	ldr	r2, [r3, #24]
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	18d1      	adds	r1, r2, r3
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	683a      	ldr	r2, [r7, #0]
 80156fc:	6978      	ldr	r0, [r7, #20]
 80156fe:	f000 f8d5 	bl	80158ac <prvInsertTimerInActiveList>
 8015702:	4603      	mov	r3, r0
 8015704:	2b00      	cmp	r3, #0
 8015706:	d020      	beq.n	801574a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015708:	2300      	movs	r3, #0
 801570a:	9300      	str	r3, [sp, #0]
 801570c:	2300      	movs	r3, #0
 801570e:	687a      	ldr	r2, [r7, #4]
 8015710:	2100      	movs	r1, #0
 8015712:	6978      	ldr	r0, [r7, #20]
 8015714:	f7ff ff88 	bl	8015628 <xTimerGenericCommand>
 8015718:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801571a:	693b      	ldr	r3, [r7, #16]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d114      	bne.n	801574a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8015720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015724:	f383 8811 	msr	BASEPRI, r3
 8015728:	f3bf 8f6f 	isb	sy
 801572c:	f3bf 8f4f 	dsb	sy
 8015730:	60fb      	str	r3, [r7, #12]
}
 8015732:	bf00      	nop
 8015734:	bf00      	nop
 8015736:	e7fd      	b.n	8015734 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015738:	697b      	ldr	r3, [r7, #20]
 801573a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801573e:	f023 0301 	bic.w	r3, r3, #1
 8015742:	b2da      	uxtb	r2, r3
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801574a:	697b      	ldr	r3, [r7, #20]
 801574c:	6a1b      	ldr	r3, [r3, #32]
 801574e:	6978      	ldr	r0, [r7, #20]
 8015750:	4798      	blx	r3
}
 8015752:	bf00      	nop
 8015754:	3718      	adds	r7, #24
 8015756:	46bd      	mov	sp, r7
 8015758:	bd80      	pop	{r7, pc}
 801575a:	bf00      	nop
 801575c:	2400163c 	.word	0x2400163c

08015760 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015760:	b580      	push	{r7, lr}
 8015762:	b084      	sub	sp, #16
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015768:	f107 0308 	add.w	r3, r7, #8
 801576c:	4618      	mov	r0, r3
 801576e:	f000 f859 	bl	8015824 <prvGetNextExpireTime>
 8015772:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015774:	68bb      	ldr	r3, [r7, #8]
 8015776:	4619      	mov	r1, r3
 8015778:	68f8      	ldr	r0, [r7, #12]
 801577a:	f000 f805 	bl	8015788 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801577e:	f000 f8d7 	bl	8015930 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015782:	bf00      	nop
 8015784:	e7f0      	b.n	8015768 <prvTimerTask+0x8>
	...

08015788 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b084      	sub	sp, #16
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
 8015790:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015792:	f7fe fdc3 	bl	801431c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015796:	f107 0308 	add.w	r3, r7, #8
 801579a:	4618      	mov	r0, r3
 801579c:	f000 f866 	bl	801586c <prvSampleTimeNow>
 80157a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80157a2:	68bb      	ldr	r3, [r7, #8]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d130      	bne.n	801580a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80157a8:	683b      	ldr	r3, [r7, #0]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d10a      	bne.n	80157c4 <prvProcessTimerOrBlockTask+0x3c>
 80157ae:	687a      	ldr	r2, [r7, #4]
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	429a      	cmp	r2, r3
 80157b4:	d806      	bhi.n	80157c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80157b6:	f7fe fdbf 	bl	8014338 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80157ba:	68f9      	ldr	r1, [r7, #12]
 80157bc:	6878      	ldr	r0, [r7, #4]
 80157be:	f7ff ff81 	bl	80156c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80157c2:	e024      	b.n	801580e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80157c4:	683b      	ldr	r3, [r7, #0]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d008      	beq.n	80157dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80157ca:	4b13      	ldr	r3, [pc, #76]	@ (8015818 <prvProcessTimerOrBlockTask+0x90>)
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d101      	bne.n	80157d8 <prvProcessTimerOrBlockTask+0x50>
 80157d4:	2301      	movs	r3, #1
 80157d6:	e000      	b.n	80157da <prvProcessTimerOrBlockTask+0x52>
 80157d8:	2300      	movs	r3, #0
 80157da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80157dc:	4b0f      	ldr	r3, [pc, #60]	@ (801581c <prvProcessTimerOrBlockTask+0x94>)
 80157de:	6818      	ldr	r0, [r3, #0]
 80157e0:	687a      	ldr	r2, [r7, #4]
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	1ad3      	subs	r3, r2, r3
 80157e6:	683a      	ldr	r2, [r7, #0]
 80157e8:	4619      	mov	r1, r3
 80157ea:	f7fe faff 	bl	8013dec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80157ee:	f7fe fda3 	bl	8014338 <xTaskResumeAll>
 80157f2:	4603      	mov	r3, r0
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d10a      	bne.n	801580e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80157f8:	4b09      	ldr	r3, [pc, #36]	@ (8015820 <prvProcessTimerOrBlockTask+0x98>)
 80157fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80157fe:	601a      	str	r2, [r3, #0]
 8015800:	f3bf 8f4f 	dsb	sy
 8015804:	f3bf 8f6f 	isb	sy
}
 8015808:	e001      	b.n	801580e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801580a:	f7fe fd95 	bl	8014338 <xTaskResumeAll>
}
 801580e:	bf00      	nop
 8015810:	3710      	adds	r7, #16
 8015812:	46bd      	mov	sp, r7
 8015814:	bd80      	pop	{r7, pc}
 8015816:	bf00      	nop
 8015818:	24001640 	.word	0x24001640
 801581c:	24001644 	.word	0x24001644
 8015820:	e000ed04 	.word	0xe000ed04

08015824 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015824:	b480      	push	{r7}
 8015826:	b085      	sub	sp, #20
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801582c:	4b0e      	ldr	r3, [pc, #56]	@ (8015868 <prvGetNextExpireTime+0x44>)
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d101      	bne.n	801583a <prvGetNextExpireTime+0x16>
 8015836:	2201      	movs	r2, #1
 8015838:	e000      	b.n	801583c <prvGetNextExpireTime+0x18>
 801583a:	2200      	movs	r2, #0
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d105      	bne.n	8015854 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015848:	4b07      	ldr	r3, [pc, #28]	@ (8015868 <prvGetNextExpireTime+0x44>)
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	68db      	ldr	r3, [r3, #12]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	60fb      	str	r3, [r7, #12]
 8015852:	e001      	b.n	8015858 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015854:	2300      	movs	r3, #0
 8015856:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015858:	68fb      	ldr	r3, [r7, #12]
}
 801585a:	4618      	mov	r0, r3
 801585c:	3714      	adds	r7, #20
 801585e:	46bd      	mov	sp, r7
 8015860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015864:	4770      	bx	lr
 8015866:	bf00      	nop
 8015868:	2400163c 	.word	0x2400163c

0801586c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801586c:	b580      	push	{r7, lr}
 801586e:	b084      	sub	sp, #16
 8015870:	af00      	add	r7, sp, #0
 8015872:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015874:	f7fe fdfe 	bl	8014474 <xTaskGetTickCount>
 8015878:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801587a:	4b0b      	ldr	r3, [pc, #44]	@ (80158a8 <prvSampleTimeNow+0x3c>)
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	68fa      	ldr	r2, [r7, #12]
 8015880:	429a      	cmp	r2, r3
 8015882:	d205      	bcs.n	8015890 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015884:	f000 f93a 	bl	8015afc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	2201      	movs	r2, #1
 801588c:	601a      	str	r2, [r3, #0]
 801588e:	e002      	b.n	8015896 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	2200      	movs	r2, #0
 8015894:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015896:	4a04      	ldr	r2, [pc, #16]	@ (80158a8 <prvSampleTimeNow+0x3c>)
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801589c:	68fb      	ldr	r3, [r7, #12]
}
 801589e:	4618      	mov	r0, r3
 80158a0:	3710      	adds	r7, #16
 80158a2:	46bd      	mov	sp, r7
 80158a4:	bd80      	pop	{r7, pc}
 80158a6:	bf00      	nop
 80158a8:	2400164c 	.word	0x2400164c

080158ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b086      	sub	sp, #24
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	60f8      	str	r0, [r7, #12]
 80158b4:	60b9      	str	r1, [r7, #8]
 80158b6:	607a      	str	r2, [r7, #4]
 80158b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80158ba:	2300      	movs	r3, #0
 80158bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	68ba      	ldr	r2, [r7, #8]
 80158c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	68fa      	ldr	r2, [r7, #12]
 80158c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80158ca:	68ba      	ldr	r2, [r7, #8]
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	429a      	cmp	r2, r3
 80158d0:	d812      	bhi.n	80158f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80158d2:	687a      	ldr	r2, [r7, #4]
 80158d4:	683b      	ldr	r3, [r7, #0]
 80158d6:	1ad2      	subs	r2, r2, r3
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	699b      	ldr	r3, [r3, #24]
 80158dc:	429a      	cmp	r2, r3
 80158de:	d302      	bcc.n	80158e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80158e0:	2301      	movs	r3, #1
 80158e2:	617b      	str	r3, [r7, #20]
 80158e4:	e01b      	b.n	801591e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80158e6:	4b10      	ldr	r3, [pc, #64]	@ (8015928 <prvInsertTimerInActiveList+0x7c>)
 80158e8:	681a      	ldr	r2, [r3, #0]
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	3304      	adds	r3, #4
 80158ee:	4619      	mov	r1, r3
 80158f0:	4610      	mov	r0, r2
 80158f2:	f7fd fa20 	bl	8012d36 <vListInsert>
 80158f6:	e012      	b.n	801591e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80158f8:	687a      	ldr	r2, [r7, #4]
 80158fa:	683b      	ldr	r3, [r7, #0]
 80158fc:	429a      	cmp	r2, r3
 80158fe:	d206      	bcs.n	801590e <prvInsertTimerInActiveList+0x62>
 8015900:	68ba      	ldr	r2, [r7, #8]
 8015902:	683b      	ldr	r3, [r7, #0]
 8015904:	429a      	cmp	r2, r3
 8015906:	d302      	bcc.n	801590e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015908:	2301      	movs	r3, #1
 801590a:	617b      	str	r3, [r7, #20]
 801590c:	e007      	b.n	801591e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801590e:	4b07      	ldr	r3, [pc, #28]	@ (801592c <prvInsertTimerInActiveList+0x80>)
 8015910:	681a      	ldr	r2, [r3, #0]
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	3304      	adds	r3, #4
 8015916:	4619      	mov	r1, r3
 8015918:	4610      	mov	r0, r2
 801591a:	f7fd fa0c 	bl	8012d36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801591e:	697b      	ldr	r3, [r7, #20]
}
 8015920:	4618      	mov	r0, r3
 8015922:	3718      	adds	r7, #24
 8015924:	46bd      	mov	sp, r7
 8015926:	bd80      	pop	{r7, pc}
 8015928:	24001640 	.word	0x24001640
 801592c:	2400163c 	.word	0x2400163c

08015930 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b08e      	sub	sp, #56	@ 0x38
 8015934:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015936:	e0ce      	b.n	8015ad6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	2b00      	cmp	r3, #0
 801593c:	da19      	bge.n	8015972 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801593e:	1d3b      	adds	r3, r7, #4
 8015940:	3304      	adds	r3, #4
 8015942:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015946:	2b00      	cmp	r3, #0
 8015948:	d10b      	bne.n	8015962 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801594a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801594e:	f383 8811 	msr	BASEPRI, r3
 8015952:	f3bf 8f6f 	isb	sy
 8015956:	f3bf 8f4f 	dsb	sy
 801595a:	61fb      	str	r3, [r7, #28]
}
 801595c:	bf00      	nop
 801595e:	bf00      	nop
 8015960:	e7fd      	b.n	801595e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015968:	6850      	ldr	r0, [r2, #4]
 801596a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801596c:	6892      	ldr	r2, [r2, #8]
 801596e:	4611      	mov	r1, r2
 8015970:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	2b00      	cmp	r3, #0
 8015976:	f2c0 80ae 	blt.w	8015ad6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801597e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015980:	695b      	ldr	r3, [r3, #20]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d004      	beq.n	8015990 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015988:	3304      	adds	r3, #4
 801598a:	4618      	mov	r0, r3
 801598c:	f7fd fa0c 	bl	8012da8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015990:	463b      	mov	r3, r7
 8015992:	4618      	mov	r0, r3
 8015994:	f7ff ff6a 	bl	801586c <prvSampleTimeNow>
 8015998:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	2b09      	cmp	r3, #9
 801599e:	f200 8097 	bhi.w	8015ad0 <prvProcessReceivedCommands+0x1a0>
 80159a2:	a201      	add	r2, pc, #4	@ (adr r2, 80159a8 <prvProcessReceivedCommands+0x78>)
 80159a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159a8:	080159d1 	.word	0x080159d1
 80159ac:	080159d1 	.word	0x080159d1
 80159b0:	080159d1 	.word	0x080159d1
 80159b4:	08015a47 	.word	0x08015a47
 80159b8:	08015a5b 	.word	0x08015a5b
 80159bc:	08015aa7 	.word	0x08015aa7
 80159c0:	080159d1 	.word	0x080159d1
 80159c4:	080159d1 	.word	0x080159d1
 80159c8:	08015a47 	.word	0x08015a47
 80159cc:	08015a5b 	.word	0x08015a5b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80159d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80159d6:	f043 0301 	orr.w	r3, r3, #1
 80159da:	b2da      	uxtb	r2, r3
 80159dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80159e2:	68ba      	ldr	r2, [r7, #8]
 80159e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159e6:	699b      	ldr	r3, [r3, #24]
 80159e8:	18d1      	adds	r1, r2, r3
 80159ea:	68bb      	ldr	r3, [r7, #8]
 80159ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80159ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80159f0:	f7ff ff5c 	bl	80158ac <prvInsertTimerInActiveList>
 80159f4:	4603      	mov	r3, r0
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d06c      	beq.n	8015ad4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80159fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159fc:	6a1b      	ldr	r3, [r3, #32]
 80159fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015a00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015a08:	f003 0304 	and.w	r3, r3, #4
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d061      	beq.n	8015ad4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015a10:	68ba      	ldr	r2, [r7, #8]
 8015a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a14:	699b      	ldr	r3, [r3, #24]
 8015a16:	441a      	add	r2, r3
 8015a18:	2300      	movs	r3, #0
 8015a1a:	9300      	str	r3, [sp, #0]
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	2100      	movs	r1, #0
 8015a20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015a22:	f7ff fe01 	bl	8015628 <xTimerGenericCommand>
 8015a26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015a28:	6a3b      	ldr	r3, [r7, #32]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d152      	bne.n	8015ad4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8015a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a32:	f383 8811 	msr	BASEPRI, r3
 8015a36:	f3bf 8f6f 	isb	sy
 8015a3a:	f3bf 8f4f 	dsb	sy
 8015a3e:	61bb      	str	r3, [r7, #24]
}
 8015a40:	bf00      	nop
 8015a42:	bf00      	nop
 8015a44:	e7fd      	b.n	8015a42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015a4c:	f023 0301 	bic.w	r3, r3, #1
 8015a50:	b2da      	uxtb	r2, r3
 8015a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8015a58:	e03d      	b.n	8015ad6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015a60:	f043 0301 	orr.w	r3, r3, #1
 8015a64:	b2da      	uxtb	r2, r3
 8015a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015a6c:	68ba      	ldr	r2, [r7, #8]
 8015a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a70:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a74:	699b      	ldr	r3, [r3, #24]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d10b      	bne.n	8015a92 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8015a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a7e:	f383 8811 	msr	BASEPRI, r3
 8015a82:	f3bf 8f6f 	isb	sy
 8015a86:	f3bf 8f4f 	dsb	sy
 8015a8a:	617b      	str	r3, [r7, #20]
}
 8015a8c:	bf00      	nop
 8015a8e:	bf00      	nop
 8015a90:	e7fd      	b.n	8015a8e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a94:	699a      	ldr	r2, [r3, #24]
 8015a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a98:	18d1      	adds	r1, r2, r3
 8015a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015aa0:	f7ff ff04 	bl	80158ac <prvInsertTimerInActiveList>
					break;
 8015aa4:	e017      	b.n	8015ad6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015aac:	f003 0302 	and.w	r3, r3, #2
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d103      	bne.n	8015abc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8015ab4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015ab6:	f000 fc07 	bl	80162c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015aba:	e00c      	b.n	8015ad6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015abe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015ac2:	f023 0301 	bic.w	r3, r3, #1
 8015ac6:	b2da      	uxtb	r2, r3
 8015ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015aca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8015ace:	e002      	b.n	8015ad6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8015ad0:	bf00      	nop
 8015ad2:	e000      	b.n	8015ad6 <prvProcessReceivedCommands+0x1a6>
					break;
 8015ad4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015ad6:	4b08      	ldr	r3, [pc, #32]	@ (8015af8 <prvProcessReceivedCommands+0x1c8>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	1d39      	adds	r1, r7, #4
 8015adc:	2200      	movs	r2, #0
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f7fd fd70 	bl	80135c4 <xQueueReceive>
 8015ae4:	4603      	mov	r3, r0
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	f47f af26 	bne.w	8015938 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8015aec:	bf00      	nop
 8015aee:	bf00      	nop
 8015af0:	3730      	adds	r7, #48	@ 0x30
 8015af2:	46bd      	mov	sp, r7
 8015af4:	bd80      	pop	{r7, pc}
 8015af6:	bf00      	nop
 8015af8:	24001644 	.word	0x24001644

08015afc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b088      	sub	sp, #32
 8015b00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015b02:	e049      	b.n	8015b98 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015b04:	4b2e      	ldr	r3, [pc, #184]	@ (8015bc0 <prvSwitchTimerLists+0xc4>)
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	68db      	ldr	r3, [r3, #12]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8015bc0 <prvSwitchTimerLists+0xc4>)
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	68db      	ldr	r3, [r3, #12]
 8015b14:	68db      	ldr	r3, [r3, #12]
 8015b16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	3304      	adds	r3, #4
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	f7fd f943 	bl	8012da8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	6a1b      	ldr	r3, [r3, #32]
 8015b26:	68f8      	ldr	r0, [r7, #12]
 8015b28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015b30:	f003 0304 	and.w	r3, r3, #4
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d02f      	beq.n	8015b98 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	699b      	ldr	r3, [r3, #24]
 8015b3c:	693a      	ldr	r2, [r7, #16]
 8015b3e:	4413      	add	r3, r2
 8015b40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015b42:	68ba      	ldr	r2, [r7, #8]
 8015b44:	693b      	ldr	r3, [r7, #16]
 8015b46:	429a      	cmp	r2, r3
 8015b48:	d90e      	bls.n	8015b68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	68ba      	ldr	r2, [r7, #8]
 8015b4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	68fa      	ldr	r2, [r7, #12]
 8015b54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015b56:	4b1a      	ldr	r3, [pc, #104]	@ (8015bc0 <prvSwitchTimerLists+0xc4>)
 8015b58:	681a      	ldr	r2, [r3, #0]
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	3304      	adds	r3, #4
 8015b5e:	4619      	mov	r1, r3
 8015b60:	4610      	mov	r0, r2
 8015b62:	f7fd f8e8 	bl	8012d36 <vListInsert>
 8015b66:	e017      	b.n	8015b98 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015b68:	2300      	movs	r3, #0
 8015b6a:	9300      	str	r3, [sp, #0]
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	693a      	ldr	r2, [r7, #16]
 8015b70:	2100      	movs	r1, #0
 8015b72:	68f8      	ldr	r0, [r7, #12]
 8015b74:	f7ff fd58 	bl	8015628 <xTimerGenericCommand>
 8015b78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d10b      	bne.n	8015b98 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8015b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b84:	f383 8811 	msr	BASEPRI, r3
 8015b88:	f3bf 8f6f 	isb	sy
 8015b8c:	f3bf 8f4f 	dsb	sy
 8015b90:	603b      	str	r3, [r7, #0]
}
 8015b92:	bf00      	nop
 8015b94:	bf00      	nop
 8015b96:	e7fd      	b.n	8015b94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015b98:	4b09      	ldr	r3, [pc, #36]	@ (8015bc0 <prvSwitchTimerLists+0xc4>)
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d1b0      	bne.n	8015b04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015ba2:	4b07      	ldr	r3, [pc, #28]	@ (8015bc0 <prvSwitchTimerLists+0xc4>)
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015ba8:	4b06      	ldr	r3, [pc, #24]	@ (8015bc4 <prvSwitchTimerLists+0xc8>)
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	4a04      	ldr	r2, [pc, #16]	@ (8015bc0 <prvSwitchTimerLists+0xc4>)
 8015bae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015bb0:	4a04      	ldr	r2, [pc, #16]	@ (8015bc4 <prvSwitchTimerLists+0xc8>)
 8015bb2:	697b      	ldr	r3, [r7, #20]
 8015bb4:	6013      	str	r3, [r2, #0]
}
 8015bb6:	bf00      	nop
 8015bb8:	3718      	adds	r7, #24
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	bd80      	pop	{r7, pc}
 8015bbe:	bf00      	nop
 8015bc0:	2400163c 	.word	0x2400163c
 8015bc4:	24001640 	.word	0x24001640

08015bc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b082      	sub	sp, #8
 8015bcc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015bce:	f000 f98b 	bl	8015ee8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015bd2:	4b15      	ldr	r3, [pc, #84]	@ (8015c28 <prvCheckForValidListAndQueue+0x60>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d120      	bne.n	8015c1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015bda:	4814      	ldr	r0, [pc, #80]	@ (8015c2c <prvCheckForValidListAndQueue+0x64>)
 8015bdc:	f7fd f85a 	bl	8012c94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015be0:	4813      	ldr	r0, [pc, #76]	@ (8015c30 <prvCheckForValidListAndQueue+0x68>)
 8015be2:	f7fd f857 	bl	8012c94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015be6:	4b13      	ldr	r3, [pc, #76]	@ (8015c34 <prvCheckForValidListAndQueue+0x6c>)
 8015be8:	4a10      	ldr	r2, [pc, #64]	@ (8015c2c <prvCheckForValidListAndQueue+0x64>)
 8015bea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015bec:	4b12      	ldr	r3, [pc, #72]	@ (8015c38 <prvCheckForValidListAndQueue+0x70>)
 8015bee:	4a10      	ldr	r2, [pc, #64]	@ (8015c30 <prvCheckForValidListAndQueue+0x68>)
 8015bf0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	9300      	str	r3, [sp, #0]
 8015bf6:	4b11      	ldr	r3, [pc, #68]	@ (8015c3c <prvCheckForValidListAndQueue+0x74>)
 8015bf8:	4a11      	ldr	r2, [pc, #68]	@ (8015c40 <prvCheckForValidListAndQueue+0x78>)
 8015bfa:	2110      	movs	r1, #16
 8015bfc:	200a      	movs	r0, #10
 8015bfe:	f7fd f967 	bl	8012ed0 <xQueueGenericCreateStatic>
 8015c02:	4603      	mov	r3, r0
 8015c04:	4a08      	ldr	r2, [pc, #32]	@ (8015c28 <prvCheckForValidListAndQueue+0x60>)
 8015c06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015c08:	4b07      	ldr	r3, [pc, #28]	@ (8015c28 <prvCheckForValidListAndQueue+0x60>)
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d005      	beq.n	8015c1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015c10:	4b05      	ldr	r3, [pc, #20]	@ (8015c28 <prvCheckForValidListAndQueue+0x60>)
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	490b      	ldr	r1, [pc, #44]	@ (8015c44 <prvCheckForValidListAndQueue+0x7c>)
 8015c16:	4618      	mov	r0, r3
 8015c18:	f7fe f894 	bl	8013d44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015c1c:	f000 f996 	bl	8015f4c <vPortExitCritical>
}
 8015c20:	bf00      	nop
 8015c22:	46bd      	mov	sp, r7
 8015c24:	bd80      	pop	{r7, pc}
 8015c26:	bf00      	nop
 8015c28:	24001644 	.word	0x24001644
 8015c2c:	24001614 	.word	0x24001614
 8015c30:	24001628 	.word	0x24001628
 8015c34:	2400163c 	.word	0x2400163c
 8015c38:	24001640 	.word	0x24001640
 8015c3c:	240016f0 	.word	0x240016f0
 8015c40:	24001650 	.word	0x24001650
 8015c44:	08017c60 	.word	0x08017c60

08015c48 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b08a      	sub	sp, #40	@ 0x28
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	60f8      	str	r0, [r7, #12]
 8015c50:	60b9      	str	r1, [r7, #8]
 8015c52:	607a      	str	r2, [r7, #4]
 8015c54:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8015c56:	f06f 0301 	mvn.w	r3, #1
 8015c5a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015c60:	68bb      	ldr	r3, [r7, #8]
 8015c62:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015c68:	4b06      	ldr	r3, [pc, #24]	@ (8015c84 <xTimerPendFunctionCallFromISR+0x3c>)
 8015c6a:	6818      	ldr	r0, [r3, #0]
 8015c6c:	f107 0114 	add.w	r1, r7, #20
 8015c70:	2300      	movs	r3, #0
 8015c72:	683a      	ldr	r2, [r7, #0]
 8015c74:	f7fd fb78 	bl	8013368 <xQueueGenericSendFromISR>
 8015c78:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8015c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	3728      	adds	r7, #40	@ 0x28
 8015c80:	46bd      	mov	sp, r7
 8015c82:	bd80      	pop	{r7, pc}
 8015c84:	24001644 	.word	0x24001644

08015c88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015c88:	b480      	push	{r7}
 8015c8a:	b085      	sub	sp, #20
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	60f8      	str	r0, [r7, #12]
 8015c90:	60b9      	str	r1, [r7, #8]
 8015c92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	3b04      	subs	r3, #4
 8015c98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8015ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	3b04      	subs	r3, #4
 8015ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015ca8:	68bb      	ldr	r3, [r7, #8]
 8015caa:	f023 0201 	bic.w	r2, r3, #1
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	3b04      	subs	r3, #4
 8015cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015cb8:	4a0c      	ldr	r2, [pc, #48]	@ (8015cec <pxPortInitialiseStack+0x64>)
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	3b14      	subs	r3, #20
 8015cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015cc4:	687a      	ldr	r2, [r7, #4]
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	3b04      	subs	r3, #4
 8015cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	f06f 0202 	mvn.w	r2, #2
 8015cd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	3b20      	subs	r3, #32
 8015cdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015cde:	68fb      	ldr	r3, [r7, #12]
}
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	3714      	adds	r7, #20
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cea:	4770      	bx	lr
 8015cec:	08015cf1 	.word	0x08015cf1

08015cf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015cf0:	b480      	push	{r7}
 8015cf2:	b085      	sub	sp, #20
 8015cf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015cfa:	4b13      	ldr	r3, [pc, #76]	@ (8015d48 <prvTaskExitError+0x58>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015d02:	d00b      	beq.n	8015d1c <prvTaskExitError+0x2c>
	__asm volatile
 8015d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d08:	f383 8811 	msr	BASEPRI, r3
 8015d0c:	f3bf 8f6f 	isb	sy
 8015d10:	f3bf 8f4f 	dsb	sy
 8015d14:	60fb      	str	r3, [r7, #12]
}
 8015d16:	bf00      	nop
 8015d18:	bf00      	nop
 8015d1a:	e7fd      	b.n	8015d18 <prvTaskExitError+0x28>
	__asm volatile
 8015d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d20:	f383 8811 	msr	BASEPRI, r3
 8015d24:	f3bf 8f6f 	isb	sy
 8015d28:	f3bf 8f4f 	dsb	sy
 8015d2c:	60bb      	str	r3, [r7, #8]
}
 8015d2e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015d30:	bf00      	nop
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d0fc      	beq.n	8015d32 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015d38:	bf00      	nop
 8015d3a:	bf00      	nop
 8015d3c:	3714      	adds	r7, #20
 8015d3e:	46bd      	mov	sp, r7
 8015d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d44:	4770      	bx	lr
 8015d46:	bf00      	nop
 8015d48:	24000010 	.word	0x24000010
 8015d4c:	00000000 	.word	0x00000000

08015d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015d50:	4b07      	ldr	r3, [pc, #28]	@ (8015d70 <pxCurrentTCBConst2>)
 8015d52:	6819      	ldr	r1, [r3, #0]
 8015d54:	6808      	ldr	r0, [r1, #0]
 8015d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d5a:	f380 8809 	msr	PSP, r0
 8015d5e:	f3bf 8f6f 	isb	sy
 8015d62:	f04f 0000 	mov.w	r0, #0
 8015d66:	f380 8811 	msr	BASEPRI, r0
 8015d6a:	4770      	bx	lr
 8015d6c:	f3af 8000 	nop.w

08015d70 <pxCurrentTCBConst2>:
 8015d70:	24001114 	.word	0x24001114
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015d74:	bf00      	nop
 8015d76:	bf00      	nop

08015d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015d78:	4808      	ldr	r0, [pc, #32]	@ (8015d9c <prvPortStartFirstTask+0x24>)
 8015d7a:	6800      	ldr	r0, [r0, #0]
 8015d7c:	6800      	ldr	r0, [r0, #0]
 8015d7e:	f380 8808 	msr	MSP, r0
 8015d82:	f04f 0000 	mov.w	r0, #0
 8015d86:	f380 8814 	msr	CONTROL, r0
 8015d8a:	b662      	cpsie	i
 8015d8c:	b661      	cpsie	f
 8015d8e:	f3bf 8f4f 	dsb	sy
 8015d92:	f3bf 8f6f 	isb	sy
 8015d96:	df00      	svc	0
 8015d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015d9a:	bf00      	nop
 8015d9c:	e000ed08 	.word	0xe000ed08

08015da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b086      	sub	sp, #24
 8015da4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015da6:	4b47      	ldr	r3, [pc, #284]	@ (8015ec4 <xPortStartScheduler+0x124>)
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	4a47      	ldr	r2, [pc, #284]	@ (8015ec8 <xPortStartScheduler+0x128>)
 8015dac:	4293      	cmp	r3, r2
 8015dae:	d10b      	bne.n	8015dc8 <xPortStartScheduler+0x28>
	__asm volatile
 8015db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015db4:	f383 8811 	msr	BASEPRI, r3
 8015db8:	f3bf 8f6f 	isb	sy
 8015dbc:	f3bf 8f4f 	dsb	sy
 8015dc0:	60fb      	str	r3, [r7, #12]
}
 8015dc2:	bf00      	nop
 8015dc4:	bf00      	nop
 8015dc6:	e7fd      	b.n	8015dc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015dc8:	4b3e      	ldr	r3, [pc, #248]	@ (8015ec4 <xPortStartScheduler+0x124>)
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	4a3f      	ldr	r2, [pc, #252]	@ (8015ecc <xPortStartScheduler+0x12c>)
 8015dce:	4293      	cmp	r3, r2
 8015dd0:	d10b      	bne.n	8015dea <xPortStartScheduler+0x4a>
	__asm volatile
 8015dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015dd6:	f383 8811 	msr	BASEPRI, r3
 8015dda:	f3bf 8f6f 	isb	sy
 8015dde:	f3bf 8f4f 	dsb	sy
 8015de2:	613b      	str	r3, [r7, #16]
}
 8015de4:	bf00      	nop
 8015de6:	bf00      	nop
 8015de8:	e7fd      	b.n	8015de6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015dea:	4b39      	ldr	r3, [pc, #228]	@ (8015ed0 <xPortStartScheduler+0x130>)
 8015dec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015dee:	697b      	ldr	r3, [r7, #20]
 8015df0:	781b      	ldrb	r3, [r3, #0]
 8015df2:	b2db      	uxtb	r3, r3
 8015df4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015df6:	697b      	ldr	r3, [r7, #20]
 8015df8:	22ff      	movs	r2, #255	@ 0xff
 8015dfa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015dfc:	697b      	ldr	r3, [r7, #20]
 8015dfe:	781b      	ldrb	r3, [r3, #0]
 8015e00:	b2db      	uxtb	r3, r3
 8015e02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015e04:	78fb      	ldrb	r3, [r7, #3]
 8015e06:	b2db      	uxtb	r3, r3
 8015e08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8015e0c:	b2da      	uxtb	r2, r3
 8015e0e:	4b31      	ldr	r3, [pc, #196]	@ (8015ed4 <xPortStartScheduler+0x134>)
 8015e10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015e12:	4b31      	ldr	r3, [pc, #196]	@ (8015ed8 <xPortStartScheduler+0x138>)
 8015e14:	2207      	movs	r2, #7
 8015e16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015e18:	e009      	b.n	8015e2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8015e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8015ed8 <xPortStartScheduler+0x138>)
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	3b01      	subs	r3, #1
 8015e20:	4a2d      	ldr	r2, [pc, #180]	@ (8015ed8 <xPortStartScheduler+0x138>)
 8015e22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015e24:	78fb      	ldrb	r3, [r7, #3]
 8015e26:	b2db      	uxtb	r3, r3
 8015e28:	005b      	lsls	r3, r3, #1
 8015e2a:	b2db      	uxtb	r3, r3
 8015e2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015e2e:	78fb      	ldrb	r3, [r7, #3]
 8015e30:	b2db      	uxtb	r3, r3
 8015e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015e36:	2b80      	cmp	r3, #128	@ 0x80
 8015e38:	d0ef      	beq.n	8015e1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015e3a:	4b27      	ldr	r3, [pc, #156]	@ (8015ed8 <xPortStartScheduler+0x138>)
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	f1c3 0307 	rsb	r3, r3, #7
 8015e42:	2b04      	cmp	r3, #4
 8015e44:	d00b      	beq.n	8015e5e <xPortStartScheduler+0xbe>
	__asm volatile
 8015e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e4a:	f383 8811 	msr	BASEPRI, r3
 8015e4e:	f3bf 8f6f 	isb	sy
 8015e52:	f3bf 8f4f 	dsb	sy
 8015e56:	60bb      	str	r3, [r7, #8]
}
 8015e58:	bf00      	nop
 8015e5a:	bf00      	nop
 8015e5c:	e7fd      	b.n	8015e5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8015ed8 <xPortStartScheduler+0x138>)
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	021b      	lsls	r3, r3, #8
 8015e64:	4a1c      	ldr	r2, [pc, #112]	@ (8015ed8 <xPortStartScheduler+0x138>)
 8015e66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015e68:	4b1b      	ldr	r3, [pc, #108]	@ (8015ed8 <xPortStartScheduler+0x138>)
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015e70:	4a19      	ldr	r2, [pc, #100]	@ (8015ed8 <xPortStartScheduler+0x138>)
 8015e72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	b2da      	uxtb	r2, r3
 8015e78:	697b      	ldr	r3, [r7, #20]
 8015e7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015e7c:	4b17      	ldr	r3, [pc, #92]	@ (8015edc <xPortStartScheduler+0x13c>)
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	4a16      	ldr	r2, [pc, #88]	@ (8015edc <xPortStartScheduler+0x13c>)
 8015e82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8015e86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015e88:	4b14      	ldr	r3, [pc, #80]	@ (8015edc <xPortStartScheduler+0x13c>)
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	4a13      	ldr	r2, [pc, #76]	@ (8015edc <xPortStartScheduler+0x13c>)
 8015e8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015e92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015e94:	f000 f8da 	bl	801604c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015e98:	4b11      	ldr	r3, [pc, #68]	@ (8015ee0 <xPortStartScheduler+0x140>)
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015e9e:	f000 f8f9 	bl	8016094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015ea2:	4b10      	ldr	r3, [pc, #64]	@ (8015ee4 <xPortStartScheduler+0x144>)
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8015ee4 <xPortStartScheduler+0x144>)
 8015ea8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8015eac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015eae:	f7ff ff63 	bl	8015d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015eb2:	f7fe fbbb 	bl	801462c <vTaskSwitchContext>
	prvTaskExitError();
 8015eb6:	f7ff ff1b 	bl	8015cf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015eba:	2300      	movs	r3, #0
}
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	3718      	adds	r7, #24
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	bd80      	pop	{r7, pc}
 8015ec4:	e000ed00 	.word	0xe000ed00
 8015ec8:	410fc271 	.word	0x410fc271
 8015ecc:	410fc270 	.word	0x410fc270
 8015ed0:	e000e400 	.word	0xe000e400
 8015ed4:	24001740 	.word	0x24001740
 8015ed8:	24001744 	.word	0x24001744
 8015edc:	e000ed20 	.word	0xe000ed20
 8015ee0:	24000010 	.word	0x24000010
 8015ee4:	e000ef34 	.word	0xe000ef34

08015ee8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015ee8:	b480      	push	{r7}
 8015eea:	b083      	sub	sp, #12
 8015eec:	af00      	add	r7, sp, #0
	__asm volatile
 8015eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ef2:	f383 8811 	msr	BASEPRI, r3
 8015ef6:	f3bf 8f6f 	isb	sy
 8015efa:	f3bf 8f4f 	dsb	sy
 8015efe:	607b      	str	r3, [r7, #4]
}
 8015f00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015f02:	4b10      	ldr	r3, [pc, #64]	@ (8015f44 <vPortEnterCritical+0x5c>)
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	3301      	adds	r3, #1
 8015f08:	4a0e      	ldr	r2, [pc, #56]	@ (8015f44 <vPortEnterCritical+0x5c>)
 8015f0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8015f44 <vPortEnterCritical+0x5c>)
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	2b01      	cmp	r3, #1
 8015f12:	d110      	bne.n	8015f36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015f14:	4b0c      	ldr	r3, [pc, #48]	@ (8015f48 <vPortEnterCritical+0x60>)
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	b2db      	uxtb	r3, r3
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d00b      	beq.n	8015f36 <vPortEnterCritical+0x4e>
	__asm volatile
 8015f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f22:	f383 8811 	msr	BASEPRI, r3
 8015f26:	f3bf 8f6f 	isb	sy
 8015f2a:	f3bf 8f4f 	dsb	sy
 8015f2e:	603b      	str	r3, [r7, #0]
}
 8015f30:	bf00      	nop
 8015f32:	bf00      	nop
 8015f34:	e7fd      	b.n	8015f32 <vPortEnterCritical+0x4a>
	}
}
 8015f36:	bf00      	nop
 8015f38:	370c      	adds	r7, #12
 8015f3a:	46bd      	mov	sp, r7
 8015f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f40:	4770      	bx	lr
 8015f42:	bf00      	nop
 8015f44:	24000010 	.word	0x24000010
 8015f48:	e000ed04 	.word	0xe000ed04

08015f4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015f4c:	b480      	push	{r7}
 8015f4e:	b083      	sub	sp, #12
 8015f50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015f52:	4b12      	ldr	r3, [pc, #72]	@ (8015f9c <vPortExitCritical+0x50>)
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d10b      	bne.n	8015f72 <vPortExitCritical+0x26>
	__asm volatile
 8015f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f5e:	f383 8811 	msr	BASEPRI, r3
 8015f62:	f3bf 8f6f 	isb	sy
 8015f66:	f3bf 8f4f 	dsb	sy
 8015f6a:	607b      	str	r3, [r7, #4]
}
 8015f6c:	bf00      	nop
 8015f6e:	bf00      	nop
 8015f70:	e7fd      	b.n	8015f6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015f72:	4b0a      	ldr	r3, [pc, #40]	@ (8015f9c <vPortExitCritical+0x50>)
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	3b01      	subs	r3, #1
 8015f78:	4a08      	ldr	r2, [pc, #32]	@ (8015f9c <vPortExitCritical+0x50>)
 8015f7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015f7c:	4b07      	ldr	r3, [pc, #28]	@ (8015f9c <vPortExitCritical+0x50>)
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d105      	bne.n	8015f90 <vPortExitCritical+0x44>
 8015f84:	2300      	movs	r3, #0
 8015f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015f88:	683b      	ldr	r3, [r7, #0]
 8015f8a:	f383 8811 	msr	BASEPRI, r3
}
 8015f8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015f90:	bf00      	nop
 8015f92:	370c      	adds	r7, #12
 8015f94:	46bd      	mov	sp, r7
 8015f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f9a:	4770      	bx	lr
 8015f9c:	24000010 	.word	0x24000010

08015fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015fa0:	f3ef 8009 	mrs	r0, PSP
 8015fa4:	f3bf 8f6f 	isb	sy
 8015fa8:	4b15      	ldr	r3, [pc, #84]	@ (8016000 <pxCurrentTCBConst>)
 8015faa:	681a      	ldr	r2, [r3, #0]
 8015fac:	f01e 0f10 	tst.w	lr, #16
 8015fb0:	bf08      	it	eq
 8015fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fba:	6010      	str	r0, [r2, #0]
 8015fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015fc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8015fc4:	f380 8811 	msr	BASEPRI, r0
 8015fc8:	f3bf 8f4f 	dsb	sy
 8015fcc:	f3bf 8f6f 	isb	sy
 8015fd0:	f7fe fb2c 	bl	801462c <vTaskSwitchContext>
 8015fd4:	f04f 0000 	mov.w	r0, #0
 8015fd8:	f380 8811 	msr	BASEPRI, r0
 8015fdc:	bc09      	pop	{r0, r3}
 8015fde:	6819      	ldr	r1, [r3, #0]
 8015fe0:	6808      	ldr	r0, [r1, #0]
 8015fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fe6:	f01e 0f10 	tst.w	lr, #16
 8015fea:	bf08      	it	eq
 8015fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015ff0:	f380 8809 	msr	PSP, r0
 8015ff4:	f3bf 8f6f 	isb	sy
 8015ff8:	4770      	bx	lr
 8015ffa:	bf00      	nop
 8015ffc:	f3af 8000 	nop.w

08016000 <pxCurrentTCBConst>:
 8016000:	24001114 	.word	0x24001114
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016004:	bf00      	nop
 8016006:	bf00      	nop

08016008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016008:	b580      	push	{r7, lr}
 801600a:	b082      	sub	sp, #8
 801600c:	af00      	add	r7, sp, #0
	__asm volatile
 801600e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016012:	f383 8811 	msr	BASEPRI, r3
 8016016:	f3bf 8f6f 	isb	sy
 801601a:	f3bf 8f4f 	dsb	sy
 801601e:	607b      	str	r3, [r7, #4]
}
 8016020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016022:	f7fe fa49 	bl	80144b8 <xTaskIncrementTick>
 8016026:	4603      	mov	r3, r0
 8016028:	2b00      	cmp	r3, #0
 801602a:	d003      	beq.n	8016034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801602c:	4b06      	ldr	r3, [pc, #24]	@ (8016048 <xPortSysTickHandler+0x40>)
 801602e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016032:	601a      	str	r2, [r3, #0]
 8016034:	2300      	movs	r3, #0
 8016036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016038:	683b      	ldr	r3, [r7, #0]
 801603a:	f383 8811 	msr	BASEPRI, r3
}
 801603e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016040:	bf00      	nop
 8016042:	3708      	adds	r7, #8
 8016044:	46bd      	mov	sp, r7
 8016046:	bd80      	pop	{r7, pc}
 8016048:	e000ed04 	.word	0xe000ed04

0801604c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801604c:	b480      	push	{r7}
 801604e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016050:	4b0b      	ldr	r3, [pc, #44]	@ (8016080 <vPortSetupTimerInterrupt+0x34>)
 8016052:	2200      	movs	r2, #0
 8016054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016056:	4b0b      	ldr	r3, [pc, #44]	@ (8016084 <vPortSetupTimerInterrupt+0x38>)
 8016058:	2200      	movs	r2, #0
 801605a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801605c:	4b0a      	ldr	r3, [pc, #40]	@ (8016088 <vPortSetupTimerInterrupt+0x3c>)
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	4a0a      	ldr	r2, [pc, #40]	@ (801608c <vPortSetupTimerInterrupt+0x40>)
 8016062:	fba2 2303 	umull	r2, r3, r2, r3
 8016066:	099b      	lsrs	r3, r3, #6
 8016068:	4a09      	ldr	r2, [pc, #36]	@ (8016090 <vPortSetupTimerInterrupt+0x44>)
 801606a:	3b01      	subs	r3, #1
 801606c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801606e:	4b04      	ldr	r3, [pc, #16]	@ (8016080 <vPortSetupTimerInterrupt+0x34>)
 8016070:	2207      	movs	r2, #7
 8016072:	601a      	str	r2, [r3, #0]
}
 8016074:	bf00      	nop
 8016076:	46bd      	mov	sp, r7
 8016078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801607c:	4770      	bx	lr
 801607e:	bf00      	nop
 8016080:	e000e010 	.word	0xe000e010
 8016084:	e000e018 	.word	0xe000e018
 8016088:	24000000 	.word	0x24000000
 801608c:	10624dd3 	.word	0x10624dd3
 8016090:	e000e014 	.word	0xe000e014

08016094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016094:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80160a4 <vPortEnableVFP+0x10>
 8016098:	6801      	ldr	r1, [r0, #0]
 801609a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801609e:	6001      	str	r1, [r0, #0]
 80160a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80160a2:	bf00      	nop
 80160a4:	e000ed88 	.word	0xe000ed88

080160a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80160a8:	b480      	push	{r7}
 80160aa:	b085      	sub	sp, #20
 80160ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80160ae:	f3ef 8305 	mrs	r3, IPSR
 80160b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	2b0f      	cmp	r3, #15
 80160b8:	d915      	bls.n	80160e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80160ba:	4a18      	ldr	r2, [pc, #96]	@ (801611c <vPortValidateInterruptPriority+0x74>)
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	4413      	add	r3, r2
 80160c0:	781b      	ldrb	r3, [r3, #0]
 80160c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80160c4:	4b16      	ldr	r3, [pc, #88]	@ (8016120 <vPortValidateInterruptPriority+0x78>)
 80160c6:	781b      	ldrb	r3, [r3, #0]
 80160c8:	7afa      	ldrb	r2, [r7, #11]
 80160ca:	429a      	cmp	r2, r3
 80160cc:	d20b      	bcs.n	80160e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80160ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160d2:	f383 8811 	msr	BASEPRI, r3
 80160d6:	f3bf 8f6f 	isb	sy
 80160da:	f3bf 8f4f 	dsb	sy
 80160de:	607b      	str	r3, [r7, #4]
}
 80160e0:	bf00      	nop
 80160e2:	bf00      	nop
 80160e4:	e7fd      	b.n	80160e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80160e6:	4b0f      	ldr	r3, [pc, #60]	@ (8016124 <vPortValidateInterruptPriority+0x7c>)
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80160ee:	4b0e      	ldr	r3, [pc, #56]	@ (8016128 <vPortValidateInterruptPriority+0x80>)
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	429a      	cmp	r2, r3
 80160f4:	d90b      	bls.n	801610e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80160f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160fa:	f383 8811 	msr	BASEPRI, r3
 80160fe:	f3bf 8f6f 	isb	sy
 8016102:	f3bf 8f4f 	dsb	sy
 8016106:	603b      	str	r3, [r7, #0]
}
 8016108:	bf00      	nop
 801610a:	bf00      	nop
 801610c:	e7fd      	b.n	801610a <vPortValidateInterruptPriority+0x62>
	}
 801610e:	bf00      	nop
 8016110:	3714      	adds	r7, #20
 8016112:	46bd      	mov	sp, r7
 8016114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016118:	4770      	bx	lr
 801611a:	bf00      	nop
 801611c:	e000e3f0 	.word	0xe000e3f0
 8016120:	24001740 	.word	0x24001740
 8016124:	e000ed0c 	.word	0xe000ed0c
 8016128:	24001744 	.word	0x24001744

0801612c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801612c:	b580      	push	{r7, lr}
 801612e:	b08a      	sub	sp, #40	@ 0x28
 8016130:	af00      	add	r7, sp, #0
 8016132:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016134:	2300      	movs	r3, #0
 8016136:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016138:	f7fe f8f0 	bl	801431c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801613c:	4b5c      	ldr	r3, [pc, #368]	@ (80162b0 <pvPortMalloc+0x184>)
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d101      	bne.n	8016148 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016144:	f000 f924 	bl	8016390 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016148:	4b5a      	ldr	r3, [pc, #360]	@ (80162b4 <pvPortMalloc+0x188>)
 801614a:	681a      	ldr	r2, [r3, #0]
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	4013      	ands	r3, r2
 8016150:	2b00      	cmp	r3, #0
 8016152:	f040 8095 	bne.w	8016280 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d01e      	beq.n	801619a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801615c:	2208      	movs	r2, #8
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	4413      	add	r3, r2
 8016162:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	f003 0307 	and.w	r3, r3, #7
 801616a:	2b00      	cmp	r3, #0
 801616c:	d015      	beq.n	801619a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	f023 0307 	bic.w	r3, r3, #7
 8016174:	3308      	adds	r3, #8
 8016176:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	f003 0307 	and.w	r3, r3, #7
 801617e:	2b00      	cmp	r3, #0
 8016180:	d00b      	beq.n	801619a <pvPortMalloc+0x6e>
	__asm volatile
 8016182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016186:	f383 8811 	msr	BASEPRI, r3
 801618a:	f3bf 8f6f 	isb	sy
 801618e:	f3bf 8f4f 	dsb	sy
 8016192:	617b      	str	r3, [r7, #20]
}
 8016194:	bf00      	nop
 8016196:	bf00      	nop
 8016198:	e7fd      	b.n	8016196 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d06f      	beq.n	8016280 <pvPortMalloc+0x154>
 80161a0:	4b45      	ldr	r3, [pc, #276]	@ (80162b8 <pvPortMalloc+0x18c>)
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	687a      	ldr	r2, [r7, #4]
 80161a6:	429a      	cmp	r2, r3
 80161a8:	d86a      	bhi.n	8016280 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80161aa:	4b44      	ldr	r3, [pc, #272]	@ (80162bc <pvPortMalloc+0x190>)
 80161ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80161ae:	4b43      	ldr	r3, [pc, #268]	@ (80162bc <pvPortMalloc+0x190>)
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80161b4:	e004      	b.n	80161c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80161b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80161ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80161c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161c2:	685b      	ldr	r3, [r3, #4]
 80161c4:	687a      	ldr	r2, [r7, #4]
 80161c6:	429a      	cmp	r2, r3
 80161c8:	d903      	bls.n	80161d2 <pvPortMalloc+0xa6>
 80161ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d1f1      	bne.n	80161b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80161d2:	4b37      	ldr	r3, [pc, #220]	@ (80162b0 <pvPortMalloc+0x184>)
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80161d8:	429a      	cmp	r2, r3
 80161da:	d051      	beq.n	8016280 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80161dc:	6a3b      	ldr	r3, [r7, #32]
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	2208      	movs	r2, #8
 80161e2:	4413      	add	r3, r2
 80161e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80161e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161e8:	681a      	ldr	r2, [r3, #0]
 80161ea:	6a3b      	ldr	r3, [r7, #32]
 80161ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80161ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161f0:	685a      	ldr	r2, [r3, #4]
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	1ad2      	subs	r2, r2, r3
 80161f6:	2308      	movs	r3, #8
 80161f8:	005b      	lsls	r3, r3, #1
 80161fa:	429a      	cmp	r2, r3
 80161fc:	d920      	bls.n	8016240 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80161fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	4413      	add	r3, r2
 8016204:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016206:	69bb      	ldr	r3, [r7, #24]
 8016208:	f003 0307 	and.w	r3, r3, #7
 801620c:	2b00      	cmp	r3, #0
 801620e:	d00b      	beq.n	8016228 <pvPortMalloc+0xfc>
	__asm volatile
 8016210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016214:	f383 8811 	msr	BASEPRI, r3
 8016218:	f3bf 8f6f 	isb	sy
 801621c:	f3bf 8f4f 	dsb	sy
 8016220:	613b      	str	r3, [r7, #16]
}
 8016222:	bf00      	nop
 8016224:	bf00      	nop
 8016226:	e7fd      	b.n	8016224 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801622a:	685a      	ldr	r2, [r3, #4]
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	1ad2      	subs	r2, r2, r3
 8016230:	69bb      	ldr	r3, [r7, #24]
 8016232:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016236:	687a      	ldr	r2, [r7, #4]
 8016238:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801623a:	69b8      	ldr	r0, [r7, #24]
 801623c:	f000 f90a 	bl	8016454 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016240:	4b1d      	ldr	r3, [pc, #116]	@ (80162b8 <pvPortMalloc+0x18c>)
 8016242:	681a      	ldr	r2, [r3, #0]
 8016244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016246:	685b      	ldr	r3, [r3, #4]
 8016248:	1ad3      	subs	r3, r2, r3
 801624a:	4a1b      	ldr	r2, [pc, #108]	@ (80162b8 <pvPortMalloc+0x18c>)
 801624c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801624e:	4b1a      	ldr	r3, [pc, #104]	@ (80162b8 <pvPortMalloc+0x18c>)
 8016250:	681a      	ldr	r2, [r3, #0]
 8016252:	4b1b      	ldr	r3, [pc, #108]	@ (80162c0 <pvPortMalloc+0x194>)
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	429a      	cmp	r2, r3
 8016258:	d203      	bcs.n	8016262 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801625a:	4b17      	ldr	r3, [pc, #92]	@ (80162b8 <pvPortMalloc+0x18c>)
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	4a18      	ldr	r2, [pc, #96]	@ (80162c0 <pvPortMalloc+0x194>)
 8016260:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016264:	685a      	ldr	r2, [r3, #4]
 8016266:	4b13      	ldr	r3, [pc, #76]	@ (80162b4 <pvPortMalloc+0x188>)
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	431a      	orrs	r2, r3
 801626c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801626e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016272:	2200      	movs	r2, #0
 8016274:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016276:	4b13      	ldr	r3, [pc, #76]	@ (80162c4 <pvPortMalloc+0x198>)
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	3301      	adds	r3, #1
 801627c:	4a11      	ldr	r2, [pc, #68]	@ (80162c4 <pvPortMalloc+0x198>)
 801627e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016280:	f7fe f85a 	bl	8014338 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016284:	69fb      	ldr	r3, [r7, #28]
 8016286:	f003 0307 	and.w	r3, r3, #7
 801628a:	2b00      	cmp	r3, #0
 801628c:	d00b      	beq.n	80162a6 <pvPortMalloc+0x17a>
	__asm volatile
 801628e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016292:	f383 8811 	msr	BASEPRI, r3
 8016296:	f3bf 8f6f 	isb	sy
 801629a:	f3bf 8f4f 	dsb	sy
 801629e:	60fb      	str	r3, [r7, #12]
}
 80162a0:	bf00      	nop
 80162a2:	bf00      	nop
 80162a4:	e7fd      	b.n	80162a2 <pvPortMalloc+0x176>
	return pvReturn;
 80162a6:	69fb      	ldr	r3, [r7, #28]
}
 80162a8:	4618      	mov	r0, r3
 80162aa:	3728      	adds	r7, #40	@ 0x28
 80162ac:	46bd      	mov	sp, r7
 80162ae:	bd80      	pop	{r7, pc}
 80162b0:	24005350 	.word	0x24005350
 80162b4:	24005364 	.word	0x24005364
 80162b8:	24005354 	.word	0x24005354
 80162bc:	24005348 	.word	0x24005348
 80162c0:	24005358 	.word	0x24005358
 80162c4:	2400535c 	.word	0x2400535c

080162c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b086      	sub	sp, #24
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d04f      	beq.n	801637a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80162da:	2308      	movs	r3, #8
 80162dc:	425b      	negs	r3, r3
 80162de:	697a      	ldr	r2, [r7, #20]
 80162e0:	4413      	add	r3, r2
 80162e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80162e4:	697b      	ldr	r3, [r7, #20]
 80162e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80162e8:	693b      	ldr	r3, [r7, #16]
 80162ea:	685a      	ldr	r2, [r3, #4]
 80162ec:	4b25      	ldr	r3, [pc, #148]	@ (8016384 <vPortFree+0xbc>)
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	4013      	ands	r3, r2
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d10b      	bne.n	801630e <vPortFree+0x46>
	__asm volatile
 80162f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162fa:	f383 8811 	msr	BASEPRI, r3
 80162fe:	f3bf 8f6f 	isb	sy
 8016302:	f3bf 8f4f 	dsb	sy
 8016306:	60fb      	str	r3, [r7, #12]
}
 8016308:	bf00      	nop
 801630a:	bf00      	nop
 801630c:	e7fd      	b.n	801630a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801630e:	693b      	ldr	r3, [r7, #16]
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d00b      	beq.n	801632e <vPortFree+0x66>
	__asm volatile
 8016316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801631a:	f383 8811 	msr	BASEPRI, r3
 801631e:	f3bf 8f6f 	isb	sy
 8016322:	f3bf 8f4f 	dsb	sy
 8016326:	60bb      	str	r3, [r7, #8]
}
 8016328:	bf00      	nop
 801632a:	bf00      	nop
 801632c:	e7fd      	b.n	801632a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801632e:	693b      	ldr	r3, [r7, #16]
 8016330:	685a      	ldr	r2, [r3, #4]
 8016332:	4b14      	ldr	r3, [pc, #80]	@ (8016384 <vPortFree+0xbc>)
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	4013      	ands	r3, r2
 8016338:	2b00      	cmp	r3, #0
 801633a:	d01e      	beq.n	801637a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801633c:	693b      	ldr	r3, [r7, #16]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d11a      	bne.n	801637a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016344:	693b      	ldr	r3, [r7, #16]
 8016346:	685a      	ldr	r2, [r3, #4]
 8016348:	4b0e      	ldr	r3, [pc, #56]	@ (8016384 <vPortFree+0xbc>)
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	43db      	mvns	r3, r3
 801634e:	401a      	ands	r2, r3
 8016350:	693b      	ldr	r3, [r7, #16]
 8016352:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016354:	f7fd ffe2 	bl	801431c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016358:	693b      	ldr	r3, [r7, #16]
 801635a:	685a      	ldr	r2, [r3, #4]
 801635c:	4b0a      	ldr	r3, [pc, #40]	@ (8016388 <vPortFree+0xc0>)
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	4413      	add	r3, r2
 8016362:	4a09      	ldr	r2, [pc, #36]	@ (8016388 <vPortFree+0xc0>)
 8016364:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016366:	6938      	ldr	r0, [r7, #16]
 8016368:	f000 f874 	bl	8016454 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801636c:	4b07      	ldr	r3, [pc, #28]	@ (801638c <vPortFree+0xc4>)
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	3301      	adds	r3, #1
 8016372:	4a06      	ldr	r2, [pc, #24]	@ (801638c <vPortFree+0xc4>)
 8016374:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016376:	f7fd ffdf 	bl	8014338 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801637a:	bf00      	nop
 801637c:	3718      	adds	r7, #24
 801637e:	46bd      	mov	sp, r7
 8016380:	bd80      	pop	{r7, pc}
 8016382:	bf00      	nop
 8016384:	24005364 	.word	0x24005364
 8016388:	24005354 	.word	0x24005354
 801638c:	24005360 	.word	0x24005360

08016390 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016390:	b480      	push	{r7}
 8016392:	b085      	sub	sp, #20
 8016394:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016396:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801639a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801639c:	4b27      	ldr	r3, [pc, #156]	@ (801643c <prvHeapInit+0xac>)
 801639e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	f003 0307 	and.w	r3, r3, #7
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d00c      	beq.n	80163c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	3307      	adds	r3, #7
 80163ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	f023 0307 	bic.w	r3, r3, #7
 80163b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80163b8:	68ba      	ldr	r2, [r7, #8]
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	1ad3      	subs	r3, r2, r3
 80163be:	4a1f      	ldr	r2, [pc, #124]	@ (801643c <prvHeapInit+0xac>)
 80163c0:	4413      	add	r3, r2
 80163c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80163c8:	4a1d      	ldr	r2, [pc, #116]	@ (8016440 <prvHeapInit+0xb0>)
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80163ce:	4b1c      	ldr	r3, [pc, #112]	@ (8016440 <prvHeapInit+0xb0>)
 80163d0:	2200      	movs	r2, #0
 80163d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	68ba      	ldr	r2, [r7, #8]
 80163d8:	4413      	add	r3, r2
 80163da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80163dc:	2208      	movs	r2, #8
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	1a9b      	subs	r3, r3, r2
 80163e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	f023 0307 	bic.w	r3, r3, #7
 80163ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	4a15      	ldr	r2, [pc, #84]	@ (8016444 <prvHeapInit+0xb4>)
 80163f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80163f2:	4b14      	ldr	r3, [pc, #80]	@ (8016444 <prvHeapInit+0xb4>)
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	2200      	movs	r2, #0
 80163f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80163fa:	4b12      	ldr	r3, [pc, #72]	@ (8016444 <prvHeapInit+0xb4>)
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	2200      	movs	r2, #0
 8016400:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016406:	683b      	ldr	r3, [r7, #0]
 8016408:	68fa      	ldr	r2, [r7, #12]
 801640a:	1ad2      	subs	r2, r2, r3
 801640c:	683b      	ldr	r3, [r7, #0]
 801640e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016410:	4b0c      	ldr	r3, [pc, #48]	@ (8016444 <prvHeapInit+0xb4>)
 8016412:	681a      	ldr	r2, [r3, #0]
 8016414:	683b      	ldr	r3, [r7, #0]
 8016416:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016418:	683b      	ldr	r3, [r7, #0]
 801641a:	685b      	ldr	r3, [r3, #4]
 801641c:	4a0a      	ldr	r2, [pc, #40]	@ (8016448 <prvHeapInit+0xb8>)
 801641e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016420:	683b      	ldr	r3, [r7, #0]
 8016422:	685b      	ldr	r3, [r3, #4]
 8016424:	4a09      	ldr	r2, [pc, #36]	@ (801644c <prvHeapInit+0xbc>)
 8016426:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016428:	4b09      	ldr	r3, [pc, #36]	@ (8016450 <prvHeapInit+0xc0>)
 801642a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801642e:	601a      	str	r2, [r3, #0]
}
 8016430:	bf00      	nop
 8016432:	3714      	adds	r7, #20
 8016434:	46bd      	mov	sp, r7
 8016436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801643a:	4770      	bx	lr
 801643c:	24001748 	.word	0x24001748
 8016440:	24005348 	.word	0x24005348
 8016444:	24005350 	.word	0x24005350
 8016448:	24005358 	.word	0x24005358
 801644c:	24005354 	.word	0x24005354
 8016450:	24005364 	.word	0x24005364

08016454 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016454:	b480      	push	{r7}
 8016456:	b085      	sub	sp, #20
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801645c:	4b28      	ldr	r3, [pc, #160]	@ (8016500 <prvInsertBlockIntoFreeList+0xac>)
 801645e:	60fb      	str	r3, [r7, #12]
 8016460:	e002      	b.n	8016468 <prvInsertBlockIntoFreeList+0x14>
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	60fb      	str	r3, [r7, #12]
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	687a      	ldr	r2, [r7, #4]
 801646e:	429a      	cmp	r2, r3
 8016470:	d8f7      	bhi.n	8016462 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	685b      	ldr	r3, [r3, #4]
 801647a:	68ba      	ldr	r2, [r7, #8]
 801647c:	4413      	add	r3, r2
 801647e:	687a      	ldr	r2, [r7, #4]
 8016480:	429a      	cmp	r2, r3
 8016482:	d108      	bne.n	8016496 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	685a      	ldr	r2, [r3, #4]
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	685b      	ldr	r3, [r3, #4]
 801648c:	441a      	add	r2, r3
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	685b      	ldr	r3, [r3, #4]
 801649e:	68ba      	ldr	r2, [r7, #8]
 80164a0:	441a      	add	r2, r3
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	429a      	cmp	r2, r3
 80164a8:	d118      	bne.n	80164dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	681a      	ldr	r2, [r3, #0]
 80164ae:	4b15      	ldr	r3, [pc, #84]	@ (8016504 <prvInsertBlockIntoFreeList+0xb0>)
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	429a      	cmp	r2, r3
 80164b4:	d00d      	beq.n	80164d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	685a      	ldr	r2, [r3, #4]
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	685b      	ldr	r3, [r3, #4]
 80164c0:	441a      	add	r2, r3
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	681a      	ldr	r2, [r3, #0]
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	601a      	str	r2, [r3, #0]
 80164d0:	e008      	b.n	80164e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80164d2:	4b0c      	ldr	r3, [pc, #48]	@ (8016504 <prvInsertBlockIntoFreeList+0xb0>)
 80164d4:	681a      	ldr	r2, [r3, #0]
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	601a      	str	r2, [r3, #0]
 80164da:	e003      	b.n	80164e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	681a      	ldr	r2, [r3, #0]
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80164e4:	68fa      	ldr	r2, [r7, #12]
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	429a      	cmp	r2, r3
 80164ea:	d002      	beq.n	80164f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	687a      	ldr	r2, [r7, #4]
 80164f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80164f2:	bf00      	nop
 80164f4:	3714      	adds	r7, #20
 80164f6:	46bd      	mov	sp, r7
 80164f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164fc:	4770      	bx	lr
 80164fe:	bf00      	nop
 8016500:	24005348 	.word	0x24005348
 8016504:	24005350 	.word	0x24005350

08016508 <_ZdlPvj>:
 8016508:	f000 b800 	b.w	801650c <_ZdlPv>

0801650c <_ZdlPv>:
 801650c:	f000 b808 	b.w	8016520 <free>

08016510 <malloc>:
 8016510:	4b02      	ldr	r3, [pc, #8]	@ (801651c <malloc+0xc>)
 8016512:	4601      	mov	r1, r0
 8016514:	6818      	ldr	r0, [r3, #0]
 8016516:	f000 b82d 	b.w	8016574 <_malloc_r>
 801651a:	bf00      	nop
 801651c:	24000020 	.word	0x24000020

08016520 <free>:
 8016520:	4b02      	ldr	r3, [pc, #8]	@ (801652c <free+0xc>)
 8016522:	4601      	mov	r1, r0
 8016524:	6818      	ldr	r0, [r3, #0]
 8016526:	f000 bc89 	b.w	8016e3c <_free_r>
 801652a:	bf00      	nop
 801652c:	24000020 	.word	0x24000020

08016530 <sbrk_aligned>:
 8016530:	b570      	push	{r4, r5, r6, lr}
 8016532:	4e0f      	ldr	r6, [pc, #60]	@ (8016570 <sbrk_aligned+0x40>)
 8016534:	460c      	mov	r4, r1
 8016536:	6831      	ldr	r1, [r6, #0]
 8016538:	4605      	mov	r5, r0
 801653a:	b911      	cbnz	r1, 8016542 <sbrk_aligned+0x12>
 801653c:	f000 fc20 	bl	8016d80 <_sbrk_r>
 8016540:	6030      	str	r0, [r6, #0]
 8016542:	4621      	mov	r1, r4
 8016544:	4628      	mov	r0, r5
 8016546:	f000 fc1b 	bl	8016d80 <_sbrk_r>
 801654a:	1c43      	adds	r3, r0, #1
 801654c:	d103      	bne.n	8016556 <sbrk_aligned+0x26>
 801654e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016552:	4620      	mov	r0, r4
 8016554:	bd70      	pop	{r4, r5, r6, pc}
 8016556:	1cc4      	adds	r4, r0, #3
 8016558:	f024 0403 	bic.w	r4, r4, #3
 801655c:	42a0      	cmp	r0, r4
 801655e:	d0f8      	beq.n	8016552 <sbrk_aligned+0x22>
 8016560:	1a21      	subs	r1, r4, r0
 8016562:	4628      	mov	r0, r5
 8016564:	f000 fc0c 	bl	8016d80 <_sbrk_r>
 8016568:	3001      	adds	r0, #1
 801656a:	d1f2      	bne.n	8016552 <sbrk_aligned+0x22>
 801656c:	e7ef      	b.n	801654e <sbrk_aligned+0x1e>
 801656e:	bf00      	nop
 8016570:	24005368 	.word	0x24005368

08016574 <_malloc_r>:
 8016574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016578:	1ccd      	adds	r5, r1, #3
 801657a:	f025 0503 	bic.w	r5, r5, #3
 801657e:	3508      	adds	r5, #8
 8016580:	2d0c      	cmp	r5, #12
 8016582:	bf38      	it	cc
 8016584:	250c      	movcc	r5, #12
 8016586:	2d00      	cmp	r5, #0
 8016588:	4606      	mov	r6, r0
 801658a:	db01      	blt.n	8016590 <_malloc_r+0x1c>
 801658c:	42a9      	cmp	r1, r5
 801658e:	d904      	bls.n	801659a <_malloc_r+0x26>
 8016590:	230c      	movs	r3, #12
 8016592:	6033      	str	r3, [r6, #0]
 8016594:	2000      	movs	r0, #0
 8016596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801659a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016670 <_malloc_r+0xfc>
 801659e:	f000 f869 	bl	8016674 <__malloc_lock>
 80165a2:	f8d8 3000 	ldr.w	r3, [r8]
 80165a6:	461c      	mov	r4, r3
 80165a8:	bb44      	cbnz	r4, 80165fc <_malloc_r+0x88>
 80165aa:	4629      	mov	r1, r5
 80165ac:	4630      	mov	r0, r6
 80165ae:	f7ff ffbf 	bl	8016530 <sbrk_aligned>
 80165b2:	1c43      	adds	r3, r0, #1
 80165b4:	4604      	mov	r4, r0
 80165b6:	d158      	bne.n	801666a <_malloc_r+0xf6>
 80165b8:	f8d8 4000 	ldr.w	r4, [r8]
 80165bc:	4627      	mov	r7, r4
 80165be:	2f00      	cmp	r7, #0
 80165c0:	d143      	bne.n	801664a <_malloc_r+0xd6>
 80165c2:	2c00      	cmp	r4, #0
 80165c4:	d04b      	beq.n	801665e <_malloc_r+0xea>
 80165c6:	6823      	ldr	r3, [r4, #0]
 80165c8:	4639      	mov	r1, r7
 80165ca:	4630      	mov	r0, r6
 80165cc:	eb04 0903 	add.w	r9, r4, r3
 80165d0:	f000 fbd6 	bl	8016d80 <_sbrk_r>
 80165d4:	4581      	cmp	r9, r0
 80165d6:	d142      	bne.n	801665e <_malloc_r+0xea>
 80165d8:	6821      	ldr	r1, [r4, #0]
 80165da:	1a6d      	subs	r5, r5, r1
 80165dc:	4629      	mov	r1, r5
 80165de:	4630      	mov	r0, r6
 80165e0:	f7ff ffa6 	bl	8016530 <sbrk_aligned>
 80165e4:	3001      	adds	r0, #1
 80165e6:	d03a      	beq.n	801665e <_malloc_r+0xea>
 80165e8:	6823      	ldr	r3, [r4, #0]
 80165ea:	442b      	add	r3, r5
 80165ec:	6023      	str	r3, [r4, #0]
 80165ee:	f8d8 3000 	ldr.w	r3, [r8]
 80165f2:	685a      	ldr	r2, [r3, #4]
 80165f4:	bb62      	cbnz	r2, 8016650 <_malloc_r+0xdc>
 80165f6:	f8c8 7000 	str.w	r7, [r8]
 80165fa:	e00f      	b.n	801661c <_malloc_r+0xa8>
 80165fc:	6822      	ldr	r2, [r4, #0]
 80165fe:	1b52      	subs	r2, r2, r5
 8016600:	d420      	bmi.n	8016644 <_malloc_r+0xd0>
 8016602:	2a0b      	cmp	r2, #11
 8016604:	d917      	bls.n	8016636 <_malloc_r+0xc2>
 8016606:	1961      	adds	r1, r4, r5
 8016608:	42a3      	cmp	r3, r4
 801660a:	6025      	str	r5, [r4, #0]
 801660c:	bf18      	it	ne
 801660e:	6059      	strne	r1, [r3, #4]
 8016610:	6863      	ldr	r3, [r4, #4]
 8016612:	bf08      	it	eq
 8016614:	f8c8 1000 	streq.w	r1, [r8]
 8016618:	5162      	str	r2, [r4, r5]
 801661a:	604b      	str	r3, [r1, #4]
 801661c:	4630      	mov	r0, r6
 801661e:	f000 f82f 	bl	8016680 <__malloc_unlock>
 8016622:	f104 000b 	add.w	r0, r4, #11
 8016626:	1d23      	adds	r3, r4, #4
 8016628:	f020 0007 	bic.w	r0, r0, #7
 801662c:	1ac2      	subs	r2, r0, r3
 801662e:	bf1c      	itt	ne
 8016630:	1a1b      	subne	r3, r3, r0
 8016632:	50a3      	strne	r3, [r4, r2]
 8016634:	e7af      	b.n	8016596 <_malloc_r+0x22>
 8016636:	6862      	ldr	r2, [r4, #4]
 8016638:	42a3      	cmp	r3, r4
 801663a:	bf0c      	ite	eq
 801663c:	f8c8 2000 	streq.w	r2, [r8]
 8016640:	605a      	strne	r2, [r3, #4]
 8016642:	e7eb      	b.n	801661c <_malloc_r+0xa8>
 8016644:	4623      	mov	r3, r4
 8016646:	6864      	ldr	r4, [r4, #4]
 8016648:	e7ae      	b.n	80165a8 <_malloc_r+0x34>
 801664a:	463c      	mov	r4, r7
 801664c:	687f      	ldr	r7, [r7, #4]
 801664e:	e7b6      	b.n	80165be <_malloc_r+0x4a>
 8016650:	461a      	mov	r2, r3
 8016652:	685b      	ldr	r3, [r3, #4]
 8016654:	42a3      	cmp	r3, r4
 8016656:	d1fb      	bne.n	8016650 <_malloc_r+0xdc>
 8016658:	2300      	movs	r3, #0
 801665a:	6053      	str	r3, [r2, #4]
 801665c:	e7de      	b.n	801661c <_malloc_r+0xa8>
 801665e:	230c      	movs	r3, #12
 8016660:	6033      	str	r3, [r6, #0]
 8016662:	4630      	mov	r0, r6
 8016664:	f000 f80c 	bl	8016680 <__malloc_unlock>
 8016668:	e794      	b.n	8016594 <_malloc_r+0x20>
 801666a:	6005      	str	r5, [r0, #0]
 801666c:	e7d6      	b.n	801661c <_malloc_r+0xa8>
 801666e:	bf00      	nop
 8016670:	2400536c 	.word	0x2400536c

08016674 <__malloc_lock>:
 8016674:	4801      	ldr	r0, [pc, #4]	@ (801667c <__malloc_lock+0x8>)
 8016676:	f000 bbd0 	b.w	8016e1a <__retarget_lock_acquire_recursive>
 801667a:	bf00      	nop
 801667c:	240054b0 	.word	0x240054b0

08016680 <__malloc_unlock>:
 8016680:	4801      	ldr	r0, [pc, #4]	@ (8016688 <__malloc_unlock+0x8>)
 8016682:	f000 bbcb 	b.w	8016e1c <__retarget_lock_release_recursive>
 8016686:	bf00      	nop
 8016688:	240054b0 	.word	0x240054b0

0801668c <std>:
 801668c:	2300      	movs	r3, #0
 801668e:	b510      	push	{r4, lr}
 8016690:	4604      	mov	r4, r0
 8016692:	e9c0 3300 	strd	r3, r3, [r0]
 8016696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801669a:	6083      	str	r3, [r0, #8]
 801669c:	8181      	strh	r1, [r0, #12]
 801669e:	6643      	str	r3, [r0, #100]	@ 0x64
 80166a0:	81c2      	strh	r2, [r0, #14]
 80166a2:	6183      	str	r3, [r0, #24]
 80166a4:	4619      	mov	r1, r3
 80166a6:	2208      	movs	r2, #8
 80166a8:	305c      	adds	r0, #92	@ 0x5c
 80166aa:	f000 facf 	bl	8016c4c <memset>
 80166ae:	4b0d      	ldr	r3, [pc, #52]	@ (80166e4 <std+0x58>)
 80166b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80166b2:	4b0d      	ldr	r3, [pc, #52]	@ (80166e8 <std+0x5c>)
 80166b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80166b6:	4b0d      	ldr	r3, [pc, #52]	@ (80166ec <std+0x60>)
 80166b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80166ba:	4b0d      	ldr	r3, [pc, #52]	@ (80166f0 <std+0x64>)
 80166bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80166be:	4b0d      	ldr	r3, [pc, #52]	@ (80166f4 <std+0x68>)
 80166c0:	6224      	str	r4, [r4, #32]
 80166c2:	429c      	cmp	r4, r3
 80166c4:	d006      	beq.n	80166d4 <std+0x48>
 80166c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80166ca:	4294      	cmp	r4, r2
 80166cc:	d002      	beq.n	80166d4 <std+0x48>
 80166ce:	33d0      	adds	r3, #208	@ 0xd0
 80166d0:	429c      	cmp	r4, r3
 80166d2:	d105      	bne.n	80166e0 <std+0x54>
 80166d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80166d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166dc:	f000 bb9c 	b.w	8016e18 <__retarget_lock_init_recursive>
 80166e0:	bd10      	pop	{r4, pc}
 80166e2:	bf00      	nop
 80166e4:	08016a9d 	.word	0x08016a9d
 80166e8:	08016abf 	.word	0x08016abf
 80166ec:	08016af7 	.word	0x08016af7
 80166f0:	08016b1b 	.word	0x08016b1b
 80166f4:	24005370 	.word	0x24005370

080166f8 <stdio_exit_handler>:
 80166f8:	4a02      	ldr	r2, [pc, #8]	@ (8016704 <stdio_exit_handler+0xc>)
 80166fa:	4903      	ldr	r1, [pc, #12]	@ (8016708 <stdio_exit_handler+0x10>)
 80166fc:	4803      	ldr	r0, [pc, #12]	@ (801670c <stdio_exit_handler+0x14>)
 80166fe:	f000 b869 	b.w	80167d4 <_fwalk_sglue>
 8016702:	bf00      	nop
 8016704:	24000014 	.word	0x24000014
 8016708:	08017825 	.word	0x08017825
 801670c:	24000024 	.word	0x24000024

08016710 <cleanup_stdio>:
 8016710:	6841      	ldr	r1, [r0, #4]
 8016712:	4b0c      	ldr	r3, [pc, #48]	@ (8016744 <cleanup_stdio+0x34>)
 8016714:	4299      	cmp	r1, r3
 8016716:	b510      	push	{r4, lr}
 8016718:	4604      	mov	r4, r0
 801671a:	d001      	beq.n	8016720 <cleanup_stdio+0x10>
 801671c:	f001 f882 	bl	8017824 <_fflush_r>
 8016720:	68a1      	ldr	r1, [r4, #8]
 8016722:	4b09      	ldr	r3, [pc, #36]	@ (8016748 <cleanup_stdio+0x38>)
 8016724:	4299      	cmp	r1, r3
 8016726:	d002      	beq.n	801672e <cleanup_stdio+0x1e>
 8016728:	4620      	mov	r0, r4
 801672a:	f001 f87b 	bl	8017824 <_fflush_r>
 801672e:	68e1      	ldr	r1, [r4, #12]
 8016730:	4b06      	ldr	r3, [pc, #24]	@ (801674c <cleanup_stdio+0x3c>)
 8016732:	4299      	cmp	r1, r3
 8016734:	d004      	beq.n	8016740 <cleanup_stdio+0x30>
 8016736:	4620      	mov	r0, r4
 8016738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801673c:	f001 b872 	b.w	8017824 <_fflush_r>
 8016740:	bd10      	pop	{r4, pc}
 8016742:	bf00      	nop
 8016744:	24005370 	.word	0x24005370
 8016748:	240053d8 	.word	0x240053d8
 801674c:	24005440 	.word	0x24005440

08016750 <global_stdio_init.part.0>:
 8016750:	b510      	push	{r4, lr}
 8016752:	4b0b      	ldr	r3, [pc, #44]	@ (8016780 <global_stdio_init.part.0+0x30>)
 8016754:	4c0b      	ldr	r4, [pc, #44]	@ (8016784 <global_stdio_init.part.0+0x34>)
 8016756:	4a0c      	ldr	r2, [pc, #48]	@ (8016788 <global_stdio_init.part.0+0x38>)
 8016758:	601a      	str	r2, [r3, #0]
 801675a:	4620      	mov	r0, r4
 801675c:	2200      	movs	r2, #0
 801675e:	2104      	movs	r1, #4
 8016760:	f7ff ff94 	bl	801668c <std>
 8016764:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016768:	2201      	movs	r2, #1
 801676a:	2109      	movs	r1, #9
 801676c:	f7ff ff8e 	bl	801668c <std>
 8016770:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016774:	2202      	movs	r2, #2
 8016776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801677a:	2112      	movs	r1, #18
 801677c:	f7ff bf86 	b.w	801668c <std>
 8016780:	240054a8 	.word	0x240054a8
 8016784:	24005370 	.word	0x24005370
 8016788:	080166f9 	.word	0x080166f9

0801678c <__sfp_lock_acquire>:
 801678c:	4801      	ldr	r0, [pc, #4]	@ (8016794 <__sfp_lock_acquire+0x8>)
 801678e:	f000 bb44 	b.w	8016e1a <__retarget_lock_acquire_recursive>
 8016792:	bf00      	nop
 8016794:	240054b1 	.word	0x240054b1

08016798 <__sfp_lock_release>:
 8016798:	4801      	ldr	r0, [pc, #4]	@ (80167a0 <__sfp_lock_release+0x8>)
 801679a:	f000 bb3f 	b.w	8016e1c <__retarget_lock_release_recursive>
 801679e:	bf00      	nop
 80167a0:	240054b1 	.word	0x240054b1

080167a4 <__sinit>:
 80167a4:	b510      	push	{r4, lr}
 80167a6:	4604      	mov	r4, r0
 80167a8:	f7ff fff0 	bl	801678c <__sfp_lock_acquire>
 80167ac:	6a23      	ldr	r3, [r4, #32]
 80167ae:	b11b      	cbz	r3, 80167b8 <__sinit+0x14>
 80167b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167b4:	f7ff bff0 	b.w	8016798 <__sfp_lock_release>
 80167b8:	4b04      	ldr	r3, [pc, #16]	@ (80167cc <__sinit+0x28>)
 80167ba:	6223      	str	r3, [r4, #32]
 80167bc:	4b04      	ldr	r3, [pc, #16]	@ (80167d0 <__sinit+0x2c>)
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d1f5      	bne.n	80167b0 <__sinit+0xc>
 80167c4:	f7ff ffc4 	bl	8016750 <global_stdio_init.part.0>
 80167c8:	e7f2      	b.n	80167b0 <__sinit+0xc>
 80167ca:	bf00      	nop
 80167cc:	08016711 	.word	0x08016711
 80167d0:	240054a8 	.word	0x240054a8

080167d4 <_fwalk_sglue>:
 80167d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167d8:	4607      	mov	r7, r0
 80167da:	4688      	mov	r8, r1
 80167dc:	4614      	mov	r4, r2
 80167de:	2600      	movs	r6, #0
 80167e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80167e4:	f1b9 0901 	subs.w	r9, r9, #1
 80167e8:	d505      	bpl.n	80167f6 <_fwalk_sglue+0x22>
 80167ea:	6824      	ldr	r4, [r4, #0]
 80167ec:	2c00      	cmp	r4, #0
 80167ee:	d1f7      	bne.n	80167e0 <_fwalk_sglue+0xc>
 80167f0:	4630      	mov	r0, r6
 80167f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167f6:	89ab      	ldrh	r3, [r5, #12]
 80167f8:	2b01      	cmp	r3, #1
 80167fa:	d907      	bls.n	801680c <_fwalk_sglue+0x38>
 80167fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016800:	3301      	adds	r3, #1
 8016802:	d003      	beq.n	801680c <_fwalk_sglue+0x38>
 8016804:	4629      	mov	r1, r5
 8016806:	4638      	mov	r0, r7
 8016808:	47c0      	blx	r8
 801680a:	4306      	orrs	r6, r0
 801680c:	3568      	adds	r5, #104	@ 0x68
 801680e:	e7e9      	b.n	80167e4 <_fwalk_sglue+0x10>

08016810 <iprintf>:
 8016810:	b40f      	push	{r0, r1, r2, r3}
 8016812:	b507      	push	{r0, r1, r2, lr}
 8016814:	4906      	ldr	r1, [pc, #24]	@ (8016830 <iprintf+0x20>)
 8016816:	ab04      	add	r3, sp, #16
 8016818:	6808      	ldr	r0, [r1, #0]
 801681a:	f853 2b04 	ldr.w	r2, [r3], #4
 801681e:	6881      	ldr	r1, [r0, #8]
 8016820:	9301      	str	r3, [sp, #4]
 8016822:	f000 fcd7 	bl	80171d4 <_vfiprintf_r>
 8016826:	b003      	add	sp, #12
 8016828:	f85d eb04 	ldr.w	lr, [sp], #4
 801682c:	b004      	add	sp, #16
 801682e:	4770      	bx	lr
 8016830:	24000020 	.word	0x24000020

08016834 <_puts_r>:
 8016834:	6a03      	ldr	r3, [r0, #32]
 8016836:	b570      	push	{r4, r5, r6, lr}
 8016838:	6884      	ldr	r4, [r0, #8]
 801683a:	4605      	mov	r5, r0
 801683c:	460e      	mov	r6, r1
 801683e:	b90b      	cbnz	r3, 8016844 <_puts_r+0x10>
 8016840:	f7ff ffb0 	bl	80167a4 <__sinit>
 8016844:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016846:	07db      	lsls	r3, r3, #31
 8016848:	d405      	bmi.n	8016856 <_puts_r+0x22>
 801684a:	89a3      	ldrh	r3, [r4, #12]
 801684c:	0598      	lsls	r0, r3, #22
 801684e:	d402      	bmi.n	8016856 <_puts_r+0x22>
 8016850:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016852:	f000 fae2 	bl	8016e1a <__retarget_lock_acquire_recursive>
 8016856:	89a3      	ldrh	r3, [r4, #12]
 8016858:	0719      	lsls	r1, r3, #28
 801685a:	d502      	bpl.n	8016862 <_puts_r+0x2e>
 801685c:	6923      	ldr	r3, [r4, #16]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d135      	bne.n	80168ce <_puts_r+0x9a>
 8016862:	4621      	mov	r1, r4
 8016864:	4628      	mov	r0, r5
 8016866:	f000 f99b 	bl	8016ba0 <__swsetup_r>
 801686a:	b380      	cbz	r0, 80168ce <_puts_r+0x9a>
 801686c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8016870:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016872:	07da      	lsls	r2, r3, #31
 8016874:	d405      	bmi.n	8016882 <_puts_r+0x4e>
 8016876:	89a3      	ldrh	r3, [r4, #12]
 8016878:	059b      	lsls	r3, r3, #22
 801687a:	d402      	bmi.n	8016882 <_puts_r+0x4e>
 801687c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801687e:	f000 facd 	bl	8016e1c <__retarget_lock_release_recursive>
 8016882:	4628      	mov	r0, r5
 8016884:	bd70      	pop	{r4, r5, r6, pc}
 8016886:	2b00      	cmp	r3, #0
 8016888:	da04      	bge.n	8016894 <_puts_r+0x60>
 801688a:	69a2      	ldr	r2, [r4, #24]
 801688c:	429a      	cmp	r2, r3
 801688e:	dc17      	bgt.n	80168c0 <_puts_r+0x8c>
 8016890:	290a      	cmp	r1, #10
 8016892:	d015      	beq.n	80168c0 <_puts_r+0x8c>
 8016894:	6823      	ldr	r3, [r4, #0]
 8016896:	1c5a      	adds	r2, r3, #1
 8016898:	6022      	str	r2, [r4, #0]
 801689a:	7019      	strb	r1, [r3, #0]
 801689c:	68a3      	ldr	r3, [r4, #8]
 801689e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80168a2:	3b01      	subs	r3, #1
 80168a4:	60a3      	str	r3, [r4, #8]
 80168a6:	2900      	cmp	r1, #0
 80168a8:	d1ed      	bne.n	8016886 <_puts_r+0x52>
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	da11      	bge.n	80168d2 <_puts_r+0x9e>
 80168ae:	4622      	mov	r2, r4
 80168b0:	210a      	movs	r1, #10
 80168b2:	4628      	mov	r0, r5
 80168b4:	f000 f935 	bl	8016b22 <__swbuf_r>
 80168b8:	3001      	adds	r0, #1
 80168ba:	d0d7      	beq.n	801686c <_puts_r+0x38>
 80168bc:	250a      	movs	r5, #10
 80168be:	e7d7      	b.n	8016870 <_puts_r+0x3c>
 80168c0:	4622      	mov	r2, r4
 80168c2:	4628      	mov	r0, r5
 80168c4:	f000 f92d 	bl	8016b22 <__swbuf_r>
 80168c8:	3001      	adds	r0, #1
 80168ca:	d1e7      	bne.n	801689c <_puts_r+0x68>
 80168cc:	e7ce      	b.n	801686c <_puts_r+0x38>
 80168ce:	3e01      	subs	r6, #1
 80168d0:	e7e4      	b.n	801689c <_puts_r+0x68>
 80168d2:	6823      	ldr	r3, [r4, #0]
 80168d4:	1c5a      	adds	r2, r3, #1
 80168d6:	6022      	str	r2, [r4, #0]
 80168d8:	220a      	movs	r2, #10
 80168da:	701a      	strb	r2, [r3, #0]
 80168dc:	e7ee      	b.n	80168bc <_puts_r+0x88>
	...

080168e0 <puts>:
 80168e0:	4b02      	ldr	r3, [pc, #8]	@ (80168ec <puts+0xc>)
 80168e2:	4601      	mov	r1, r0
 80168e4:	6818      	ldr	r0, [r3, #0]
 80168e6:	f7ff bfa5 	b.w	8016834 <_puts_r>
 80168ea:	bf00      	nop
 80168ec:	24000020 	.word	0x24000020

080168f0 <setvbuf>:
 80168f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80168f4:	461d      	mov	r5, r3
 80168f6:	4b57      	ldr	r3, [pc, #348]	@ (8016a54 <setvbuf+0x164>)
 80168f8:	681f      	ldr	r7, [r3, #0]
 80168fa:	4604      	mov	r4, r0
 80168fc:	460e      	mov	r6, r1
 80168fe:	4690      	mov	r8, r2
 8016900:	b127      	cbz	r7, 801690c <setvbuf+0x1c>
 8016902:	6a3b      	ldr	r3, [r7, #32]
 8016904:	b913      	cbnz	r3, 801690c <setvbuf+0x1c>
 8016906:	4638      	mov	r0, r7
 8016908:	f7ff ff4c 	bl	80167a4 <__sinit>
 801690c:	f1b8 0f02 	cmp.w	r8, #2
 8016910:	d006      	beq.n	8016920 <setvbuf+0x30>
 8016912:	f1b8 0f01 	cmp.w	r8, #1
 8016916:	f200 809a 	bhi.w	8016a4e <setvbuf+0x15e>
 801691a:	2d00      	cmp	r5, #0
 801691c:	f2c0 8097 	blt.w	8016a4e <setvbuf+0x15e>
 8016920:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016922:	07d9      	lsls	r1, r3, #31
 8016924:	d405      	bmi.n	8016932 <setvbuf+0x42>
 8016926:	89a3      	ldrh	r3, [r4, #12]
 8016928:	059a      	lsls	r2, r3, #22
 801692a:	d402      	bmi.n	8016932 <setvbuf+0x42>
 801692c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801692e:	f000 fa74 	bl	8016e1a <__retarget_lock_acquire_recursive>
 8016932:	4621      	mov	r1, r4
 8016934:	4638      	mov	r0, r7
 8016936:	f000 ff75 	bl	8017824 <_fflush_r>
 801693a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801693c:	b141      	cbz	r1, 8016950 <setvbuf+0x60>
 801693e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016942:	4299      	cmp	r1, r3
 8016944:	d002      	beq.n	801694c <setvbuf+0x5c>
 8016946:	4638      	mov	r0, r7
 8016948:	f000 fa78 	bl	8016e3c <_free_r>
 801694c:	2300      	movs	r3, #0
 801694e:	6363      	str	r3, [r4, #52]	@ 0x34
 8016950:	2300      	movs	r3, #0
 8016952:	61a3      	str	r3, [r4, #24]
 8016954:	6063      	str	r3, [r4, #4]
 8016956:	89a3      	ldrh	r3, [r4, #12]
 8016958:	061b      	lsls	r3, r3, #24
 801695a:	d503      	bpl.n	8016964 <setvbuf+0x74>
 801695c:	6921      	ldr	r1, [r4, #16]
 801695e:	4638      	mov	r0, r7
 8016960:	f000 fa6c 	bl	8016e3c <_free_r>
 8016964:	89a3      	ldrh	r3, [r4, #12]
 8016966:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 801696a:	f023 0303 	bic.w	r3, r3, #3
 801696e:	f1b8 0f02 	cmp.w	r8, #2
 8016972:	81a3      	strh	r3, [r4, #12]
 8016974:	d061      	beq.n	8016a3a <setvbuf+0x14a>
 8016976:	ab01      	add	r3, sp, #4
 8016978:	466a      	mov	r2, sp
 801697a:	4621      	mov	r1, r4
 801697c:	4638      	mov	r0, r7
 801697e:	f000 ff79 	bl	8017874 <__swhatbuf_r>
 8016982:	89a3      	ldrh	r3, [r4, #12]
 8016984:	4318      	orrs	r0, r3
 8016986:	81a0      	strh	r0, [r4, #12]
 8016988:	bb2d      	cbnz	r5, 80169d6 <setvbuf+0xe6>
 801698a:	9d00      	ldr	r5, [sp, #0]
 801698c:	4628      	mov	r0, r5
 801698e:	f7ff fdbf 	bl	8016510 <malloc>
 8016992:	4606      	mov	r6, r0
 8016994:	2800      	cmp	r0, #0
 8016996:	d152      	bne.n	8016a3e <setvbuf+0x14e>
 8016998:	f8dd 9000 	ldr.w	r9, [sp]
 801699c:	45a9      	cmp	r9, r5
 801699e:	d140      	bne.n	8016a22 <setvbuf+0x132>
 80169a0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80169a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169a8:	f043 0202 	orr.w	r2, r3, #2
 80169ac:	81a2      	strh	r2, [r4, #12]
 80169ae:	2200      	movs	r2, #0
 80169b0:	60a2      	str	r2, [r4, #8]
 80169b2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80169b6:	6022      	str	r2, [r4, #0]
 80169b8:	6122      	str	r2, [r4, #16]
 80169ba:	2201      	movs	r2, #1
 80169bc:	6162      	str	r2, [r4, #20]
 80169be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80169c0:	07d6      	lsls	r6, r2, #31
 80169c2:	d404      	bmi.n	80169ce <setvbuf+0xde>
 80169c4:	0598      	lsls	r0, r3, #22
 80169c6:	d402      	bmi.n	80169ce <setvbuf+0xde>
 80169c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80169ca:	f000 fa27 	bl	8016e1c <__retarget_lock_release_recursive>
 80169ce:	4628      	mov	r0, r5
 80169d0:	b003      	add	sp, #12
 80169d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80169d6:	2e00      	cmp	r6, #0
 80169d8:	d0d8      	beq.n	801698c <setvbuf+0x9c>
 80169da:	6a3b      	ldr	r3, [r7, #32]
 80169dc:	b913      	cbnz	r3, 80169e4 <setvbuf+0xf4>
 80169de:	4638      	mov	r0, r7
 80169e0:	f7ff fee0 	bl	80167a4 <__sinit>
 80169e4:	f1b8 0f01 	cmp.w	r8, #1
 80169e8:	bf08      	it	eq
 80169ea:	89a3      	ldrheq	r3, [r4, #12]
 80169ec:	6026      	str	r6, [r4, #0]
 80169ee:	bf04      	itt	eq
 80169f0:	f043 0301 	orreq.w	r3, r3, #1
 80169f4:	81a3      	strheq	r3, [r4, #12]
 80169f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169fa:	f013 0208 	ands.w	r2, r3, #8
 80169fe:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8016a02:	d01e      	beq.n	8016a42 <setvbuf+0x152>
 8016a04:	07d9      	lsls	r1, r3, #31
 8016a06:	bf41      	itttt	mi
 8016a08:	2200      	movmi	r2, #0
 8016a0a:	426d      	negmi	r5, r5
 8016a0c:	60a2      	strmi	r2, [r4, #8]
 8016a0e:	61a5      	strmi	r5, [r4, #24]
 8016a10:	bf58      	it	pl
 8016a12:	60a5      	strpl	r5, [r4, #8]
 8016a14:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016a16:	07d2      	lsls	r2, r2, #31
 8016a18:	d401      	bmi.n	8016a1e <setvbuf+0x12e>
 8016a1a:	059b      	lsls	r3, r3, #22
 8016a1c:	d513      	bpl.n	8016a46 <setvbuf+0x156>
 8016a1e:	2500      	movs	r5, #0
 8016a20:	e7d5      	b.n	80169ce <setvbuf+0xde>
 8016a22:	4648      	mov	r0, r9
 8016a24:	f7ff fd74 	bl	8016510 <malloc>
 8016a28:	4606      	mov	r6, r0
 8016a2a:	2800      	cmp	r0, #0
 8016a2c:	d0b8      	beq.n	80169a0 <setvbuf+0xb0>
 8016a2e:	89a3      	ldrh	r3, [r4, #12]
 8016a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016a34:	81a3      	strh	r3, [r4, #12]
 8016a36:	464d      	mov	r5, r9
 8016a38:	e7cf      	b.n	80169da <setvbuf+0xea>
 8016a3a:	2500      	movs	r5, #0
 8016a3c:	e7b2      	b.n	80169a4 <setvbuf+0xb4>
 8016a3e:	46a9      	mov	r9, r5
 8016a40:	e7f5      	b.n	8016a2e <setvbuf+0x13e>
 8016a42:	60a2      	str	r2, [r4, #8]
 8016a44:	e7e6      	b.n	8016a14 <setvbuf+0x124>
 8016a46:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016a48:	f000 f9e8 	bl	8016e1c <__retarget_lock_release_recursive>
 8016a4c:	e7e7      	b.n	8016a1e <setvbuf+0x12e>
 8016a4e:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8016a52:	e7bc      	b.n	80169ce <setvbuf+0xde>
 8016a54:	24000020 	.word	0x24000020

08016a58 <siprintf>:
 8016a58:	b40e      	push	{r1, r2, r3}
 8016a5a:	b510      	push	{r4, lr}
 8016a5c:	b09d      	sub	sp, #116	@ 0x74
 8016a5e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8016a60:	9002      	str	r0, [sp, #8]
 8016a62:	9006      	str	r0, [sp, #24]
 8016a64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016a68:	480a      	ldr	r0, [pc, #40]	@ (8016a94 <siprintf+0x3c>)
 8016a6a:	9107      	str	r1, [sp, #28]
 8016a6c:	9104      	str	r1, [sp, #16]
 8016a6e:	490a      	ldr	r1, [pc, #40]	@ (8016a98 <siprintf+0x40>)
 8016a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a74:	9105      	str	r1, [sp, #20]
 8016a76:	2400      	movs	r4, #0
 8016a78:	a902      	add	r1, sp, #8
 8016a7a:	6800      	ldr	r0, [r0, #0]
 8016a7c:	9301      	str	r3, [sp, #4]
 8016a7e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8016a80:	f000 fa82 	bl	8016f88 <_svfiprintf_r>
 8016a84:	9b02      	ldr	r3, [sp, #8]
 8016a86:	701c      	strb	r4, [r3, #0]
 8016a88:	b01d      	add	sp, #116	@ 0x74
 8016a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a8e:	b003      	add	sp, #12
 8016a90:	4770      	bx	lr
 8016a92:	bf00      	nop
 8016a94:	24000020 	.word	0x24000020
 8016a98:	ffff0208 	.word	0xffff0208

08016a9c <__sread>:
 8016a9c:	b510      	push	{r4, lr}
 8016a9e:	460c      	mov	r4, r1
 8016aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016aa4:	f000 f95a 	bl	8016d5c <_read_r>
 8016aa8:	2800      	cmp	r0, #0
 8016aaa:	bfab      	itete	ge
 8016aac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016aae:	89a3      	ldrhlt	r3, [r4, #12]
 8016ab0:	181b      	addge	r3, r3, r0
 8016ab2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016ab6:	bfac      	ite	ge
 8016ab8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016aba:	81a3      	strhlt	r3, [r4, #12]
 8016abc:	bd10      	pop	{r4, pc}

08016abe <__swrite>:
 8016abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ac2:	461f      	mov	r7, r3
 8016ac4:	898b      	ldrh	r3, [r1, #12]
 8016ac6:	05db      	lsls	r3, r3, #23
 8016ac8:	4605      	mov	r5, r0
 8016aca:	460c      	mov	r4, r1
 8016acc:	4616      	mov	r6, r2
 8016ace:	d505      	bpl.n	8016adc <__swrite+0x1e>
 8016ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ad4:	2302      	movs	r3, #2
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	f000 f92e 	bl	8016d38 <_lseek_r>
 8016adc:	89a3      	ldrh	r3, [r4, #12]
 8016ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016ae2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016ae6:	81a3      	strh	r3, [r4, #12]
 8016ae8:	4632      	mov	r2, r6
 8016aea:	463b      	mov	r3, r7
 8016aec:	4628      	mov	r0, r5
 8016aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016af2:	f000 b955 	b.w	8016da0 <_write_r>

08016af6 <__sseek>:
 8016af6:	b510      	push	{r4, lr}
 8016af8:	460c      	mov	r4, r1
 8016afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016afe:	f000 f91b 	bl	8016d38 <_lseek_r>
 8016b02:	1c43      	adds	r3, r0, #1
 8016b04:	89a3      	ldrh	r3, [r4, #12]
 8016b06:	bf15      	itete	ne
 8016b08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016b0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016b0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016b12:	81a3      	strheq	r3, [r4, #12]
 8016b14:	bf18      	it	ne
 8016b16:	81a3      	strhne	r3, [r4, #12]
 8016b18:	bd10      	pop	{r4, pc}

08016b1a <__sclose>:
 8016b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b1e:	f000 b89d 	b.w	8016c5c <_close_r>

08016b22 <__swbuf_r>:
 8016b22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b24:	460e      	mov	r6, r1
 8016b26:	4614      	mov	r4, r2
 8016b28:	4605      	mov	r5, r0
 8016b2a:	b118      	cbz	r0, 8016b34 <__swbuf_r+0x12>
 8016b2c:	6a03      	ldr	r3, [r0, #32]
 8016b2e:	b90b      	cbnz	r3, 8016b34 <__swbuf_r+0x12>
 8016b30:	f7ff fe38 	bl	80167a4 <__sinit>
 8016b34:	69a3      	ldr	r3, [r4, #24]
 8016b36:	60a3      	str	r3, [r4, #8]
 8016b38:	89a3      	ldrh	r3, [r4, #12]
 8016b3a:	071a      	lsls	r2, r3, #28
 8016b3c:	d501      	bpl.n	8016b42 <__swbuf_r+0x20>
 8016b3e:	6923      	ldr	r3, [r4, #16]
 8016b40:	b943      	cbnz	r3, 8016b54 <__swbuf_r+0x32>
 8016b42:	4621      	mov	r1, r4
 8016b44:	4628      	mov	r0, r5
 8016b46:	f000 f82b 	bl	8016ba0 <__swsetup_r>
 8016b4a:	b118      	cbz	r0, 8016b54 <__swbuf_r+0x32>
 8016b4c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016b50:	4638      	mov	r0, r7
 8016b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b54:	6823      	ldr	r3, [r4, #0]
 8016b56:	6922      	ldr	r2, [r4, #16]
 8016b58:	1a98      	subs	r0, r3, r2
 8016b5a:	6963      	ldr	r3, [r4, #20]
 8016b5c:	b2f6      	uxtb	r6, r6
 8016b5e:	4283      	cmp	r3, r0
 8016b60:	4637      	mov	r7, r6
 8016b62:	dc05      	bgt.n	8016b70 <__swbuf_r+0x4e>
 8016b64:	4621      	mov	r1, r4
 8016b66:	4628      	mov	r0, r5
 8016b68:	f000 fe5c 	bl	8017824 <_fflush_r>
 8016b6c:	2800      	cmp	r0, #0
 8016b6e:	d1ed      	bne.n	8016b4c <__swbuf_r+0x2a>
 8016b70:	68a3      	ldr	r3, [r4, #8]
 8016b72:	3b01      	subs	r3, #1
 8016b74:	60a3      	str	r3, [r4, #8]
 8016b76:	6823      	ldr	r3, [r4, #0]
 8016b78:	1c5a      	adds	r2, r3, #1
 8016b7a:	6022      	str	r2, [r4, #0]
 8016b7c:	701e      	strb	r6, [r3, #0]
 8016b7e:	6962      	ldr	r2, [r4, #20]
 8016b80:	1c43      	adds	r3, r0, #1
 8016b82:	429a      	cmp	r2, r3
 8016b84:	d004      	beq.n	8016b90 <__swbuf_r+0x6e>
 8016b86:	89a3      	ldrh	r3, [r4, #12]
 8016b88:	07db      	lsls	r3, r3, #31
 8016b8a:	d5e1      	bpl.n	8016b50 <__swbuf_r+0x2e>
 8016b8c:	2e0a      	cmp	r6, #10
 8016b8e:	d1df      	bne.n	8016b50 <__swbuf_r+0x2e>
 8016b90:	4621      	mov	r1, r4
 8016b92:	4628      	mov	r0, r5
 8016b94:	f000 fe46 	bl	8017824 <_fflush_r>
 8016b98:	2800      	cmp	r0, #0
 8016b9a:	d0d9      	beq.n	8016b50 <__swbuf_r+0x2e>
 8016b9c:	e7d6      	b.n	8016b4c <__swbuf_r+0x2a>
	...

08016ba0 <__swsetup_r>:
 8016ba0:	b538      	push	{r3, r4, r5, lr}
 8016ba2:	4b29      	ldr	r3, [pc, #164]	@ (8016c48 <__swsetup_r+0xa8>)
 8016ba4:	4605      	mov	r5, r0
 8016ba6:	6818      	ldr	r0, [r3, #0]
 8016ba8:	460c      	mov	r4, r1
 8016baa:	b118      	cbz	r0, 8016bb4 <__swsetup_r+0x14>
 8016bac:	6a03      	ldr	r3, [r0, #32]
 8016bae:	b90b      	cbnz	r3, 8016bb4 <__swsetup_r+0x14>
 8016bb0:	f7ff fdf8 	bl	80167a4 <__sinit>
 8016bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016bb8:	0719      	lsls	r1, r3, #28
 8016bba:	d422      	bmi.n	8016c02 <__swsetup_r+0x62>
 8016bbc:	06da      	lsls	r2, r3, #27
 8016bbe:	d407      	bmi.n	8016bd0 <__swsetup_r+0x30>
 8016bc0:	2209      	movs	r2, #9
 8016bc2:	602a      	str	r2, [r5, #0]
 8016bc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016bc8:	81a3      	strh	r3, [r4, #12]
 8016bca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016bce:	e033      	b.n	8016c38 <__swsetup_r+0x98>
 8016bd0:	0758      	lsls	r0, r3, #29
 8016bd2:	d512      	bpl.n	8016bfa <__swsetup_r+0x5a>
 8016bd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016bd6:	b141      	cbz	r1, 8016bea <__swsetup_r+0x4a>
 8016bd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016bdc:	4299      	cmp	r1, r3
 8016bde:	d002      	beq.n	8016be6 <__swsetup_r+0x46>
 8016be0:	4628      	mov	r0, r5
 8016be2:	f000 f92b 	bl	8016e3c <_free_r>
 8016be6:	2300      	movs	r3, #0
 8016be8:	6363      	str	r3, [r4, #52]	@ 0x34
 8016bea:	89a3      	ldrh	r3, [r4, #12]
 8016bec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016bf0:	81a3      	strh	r3, [r4, #12]
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	6063      	str	r3, [r4, #4]
 8016bf6:	6923      	ldr	r3, [r4, #16]
 8016bf8:	6023      	str	r3, [r4, #0]
 8016bfa:	89a3      	ldrh	r3, [r4, #12]
 8016bfc:	f043 0308 	orr.w	r3, r3, #8
 8016c00:	81a3      	strh	r3, [r4, #12]
 8016c02:	6923      	ldr	r3, [r4, #16]
 8016c04:	b94b      	cbnz	r3, 8016c1a <__swsetup_r+0x7a>
 8016c06:	89a3      	ldrh	r3, [r4, #12]
 8016c08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016c10:	d003      	beq.n	8016c1a <__swsetup_r+0x7a>
 8016c12:	4621      	mov	r1, r4
 8016c14:	4628      	mov	r0, r5
 8016c16:	f000 fe53 	bl	80178c0 <__smakebuf_r>
 8016c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c1e:	f013 0201 	ands.w	r2, r3, #1
 8016c22:	d00a      	beq.n	8016c3a <__swsetup_r+0x9a>
 8016c24:	2200      	movs	r2, #0
 8016c26:	60a2      	str	r2, [r4, #8]
 8016c28:	6962      	ldr	r2, [r4, #20]
 8016c2a:	4252      	negs	r2, r2
 8016c2c:	61a2      	str	r2, [r4, #24]
 8016c2e:	6922      	ldr	r2, [r4, #16]
 8016c30:	b942      	cbnz	r2, 8016c44 <__swsetup_r+0xa4>
 8016c32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016c36:	d1c5      	bne.n	8016bc4 <__swsetup_r+0x24>
 8016c38:	bd38      	pop	{r3, r4, r5, pc}
 8016c3a:	0799      	lsls	r1, r3, #30
 8016c3c:	bf58      	it	pl
 8016c3e:	6962      	ldrpl	r2, [r4, #20]
 8016c40:	60a2      	str	r2, [r4, #8]
 8016c42:	e7f4      	b.n	8016c2e <__swsetup_r+0x8e>
 8016c44:	2000      	movs	r0, #0
 8016c46:	e7f7      	b.n	8016c38 <__swsetup_r+0x98>
 8016c48:	24000020 	.word	0x24000020

08016c4c <memset>:
 8016c4c:	4402      	add	r2, r0
 8016c4e:	4603      	mov	r3, r0
 8016c50:	4293      	cmp	r3, r2
 8016c52:	d100      	bne.n	8016c56 <memset+0xa>
 8016c54:	4770      	bx	lr
 8016c56:	f803 1b01 	strb.w	r1, [r3], #1
 8016c5a:	e7f9      	b.n	8016c50 <memset+0x4>

08016c5c <_close_r>:
 8016c5c:	b538      	push	{r3, r4, r5, lr}
 8016c5e:	4d06      	ldr	r5, [pc, #24]	@ (8016c78 <_close_r+0x1c>)
 8016c60:	2300      	movs	r3, #0
 8016c62:	4604      	mov	r4, r0
 8016c64:	4608      	mov	r0, r1
 8016c66:	602b      	str	r3, [r5, #0]
 8016c68:	f7ea fb2e 	bl	80012c8 <_close>
 8016c6c:	1c43      	adds	r3, r0, #1
 8016c6e:	d102      	bne.n	8016c76 <_close_r+0x1a>
 8016c70:	682b      	ldr	r3, [r5, #0]
 8016c72:	b103      	cbz	r3, 8016c76 <_close_r+0x1a>
 8016c74:	6023      	str	r3, [r4, #0]
 8016c76:	bd38      	pop	{r3, r4, r5, pc}
 8016c78:	240054ac 	.word	0x240054ac

08016c7c <_reclaim_reent>:
 8016c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8016d34 <_reclaim_reent+0xb8>)
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	4283      	cmp	r3, r0
 8016c82:	b570      	push	{r4, r5, r6, lr}
 8016c84:	4604      	mov	r4, r0
 8016c86:	d053      	beq.n	8016d30 <_reclaim_reent+0xb4>
 8016c88:	69c3      	ldr	r3, [r0, #28]
 8016c8a:	b31b      	cbz	r3, 8016cd4 <_reclaim_reent+0x58>
 8016c8c:	68db      	ldr	r3, [r3, #12]
 8016c8e:	b163      	cbz	r3, 8016caa <_reclaim_reent+0x2e>
 8016c90:	2500      	movs	r5, #0
 8016c92:	69e3      	ldr	r3, [r4, #28]
 8016c94:	68db      	ldr	r3, [r3, #12]
 8016c96:	5959      	ldr	r1, [r3, r5]
 8016c98:	b9b1      	cbnz	r1, 8016cc8 <_reclaim_reent+0x4c>
 8016c9a:	3504      	adds	r5, #4
 8016c9c:	2d80      	cmp	r5, #128	@ 0x80
 8016c9e:	d1f8      	bne.n	8016c92 <_reclaim_reent+0x16>
 8016ca0:	69e3      	ldr	r3, [r4, #28]
 8016ca2:	4620      	mov	r0, r4
 8016ca4:	68d9      	ldr	r1, [r3, #12]
 8016ca6:	f000 f8c9 	bl	8016e3c <_free_r>
 8016caa:	69e3      	ldr	r3, [r4, #28]
 8016cac:	6819      	ldr	r1, [r3, #0]
 8016cae:	b111      	cbz	r1, 8016cb6 <_reclaim_reent+0x3a>
 8016cb0:	4620      	mov	r0, r4
 8016cb2:	f000 f8c3 	bl	8016e3c <_free_r>
 8016cb6:	69e3      	ldr	r3, [r4, #28]
 8016cb8:	689d      	ldr	r5, [r3, #8]
 8016cba:	b15d      	cbz	r5, 8016cd4 <_reclaim_reent+0x58>
 8016cbc:	4629      	mov	r1, r5
 8016cbe:	4620      	mov	r0, r4
 8016cc0:	682d      	ldr	r5, [r5, #0]
 8016cc2:	f000 f8bb 	bl	8016e3c <_free_r>
 8016cc6:	e7f8      	b.n	8016cba <_reclaim_reent+0x3e>
 8016cc8:	680e      	ldr	r6, [r1, #0]
 8016cca:	4620      	mov	r0, r4
 8016ccc:	f000 f8b6 	bl	8016e3c <_free_r>
 8016cd0:	4631      	mov	r1, r6
 8016cd2:	e7e1      	b.n	8016c98 <_reclaim_reent+0x1c>
 8016cd4:	6961      	ldr	r1, [r4, #20]
 8016cd6:	b111      	cbz	r1, 8016cde <_reclaim_reent+0x62>
 8016cd8:	4620      	mov	r0, r4
 8016cda:	f000 f8af 	bl	8016e3c <_free_r>
 8016cde:	69e1      	ldr	r1, [r4, #28]
 8016ce0:	b111      	cbz	r1, 8016ce8 <_reclaim_reent+0x6c>
 8016ce2:	4620      	mov	r0, r4
 8016ce4:	f000 f8aa 	bl	8016e3c <_free_r>
 8016ce8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016cea:	b111      	cbz	r1, 8016cf2 <_reclaim_reent+0x76>
 8016cec:	4620      	mov	r0, r4
 8016cee:	f000 f8a5 	bl	8016e3c <_free_r>
 8016cf2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016cf4:	b111      	cbz	r1, 8016cfc <_reclaim_reent+0x80>
 8016cf6:	4620      	mov	r0, r4
 8016cf8:	f000 f8a0 	bl	8016e3c <_free_r>
 8016cfc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8016cfe:	b111      	cbz	r1, 8016d06 <_reclaim_reent+0x8a>
 8016d00:	4620      	mov	r0, r4
 8016d02:	f000 f89b 	bl	8016e3c <_free_r>
 8016d06:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8016d08:	b111      	cbz	r1, 8016d10 <_reclaim_reent+0x94>
 8016d0a:	4620      	mov	r0, r4
 8016d0c:	f000 f896 	bl	8016e3c <_free_r>
 8016d10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8016d12:	b111      	cbz	r1, 8016d1a <_reclaim_reent+0x9e>
 8016d14:	4620      	mov	r0, r4
 8016d16:	f000 f891 	bl	8016e3c <_free_r>
 8016d1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8016d1c:	b111      	cbz	r1, 8016d24 <_reclaim_reent+0xa8>
 8016d1e:	4620      	mov	r0, r4
 8016d20:	f000 f88c 	bl	8016e3c <_free_r>
 8016d24:	6a23      	ldr	r3, [r4, #32]
 8016d26:	b11b      	cbz	r3, 8016d30 <_reclaim_reent+0xb4>
 8016d28:	4620      	mov	r0, r4
 8016d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d2e:	4718      	bx	r3
 8016d30:	bd70      	pop	{r4, r5, r6, pc}
 8016d32:	bf00      	nop
 8016d34:	24000020 	.word	0x24000020

08016d38 <_lseek_r>:
 8016d38:	b538      	push	{r3, r4, r5, lr}
 8016d3a:	4d07      	ldr	r5, [pc, #28]	@ (8016d58 <_lseek_r+0x20>)
 8016d3c:	4604      	mov	r4, r0
 8016d3e:	4608      	mov	r0, r1
 8016d40:	4611      	mov	r1, r2
 8016d42:	2200      	movs	r2, #0
 8016d44:	602a      	str	r2, [r5, #0]
 8016d46:	461a      	mov	r2, r3
 8016d48:	f7ea fad5 	bl	80012f6 <_lseek>
 8016d4c:	1c43      	adds	r3, r0, #1
 8016d4e:	d102      	bne.n	8016d56 <_lseek_r+0x1e>
 8016d50:	682b      	ldr	r3, [r5, #0]
 8016d52:	b103      	cbz	r3, 8016d56 <_lseek_r+0x1e>
 8016d54:	6023      	str	r3, [r4, #0]
 8016d56:	bd38      	pop	{r3, r4, r5, pc}
 8016d58:	240054ac 	.word	0x240054ac

08016d5c <_read_r>:
 8016d5c:	b538      	push	{r3, r4, r5, lr}
 8016d5e:	4d07      	ldr	r5, [pc, #28]	@ (8016d7c <_read_r+0x20>)
 8016d60:	4604      	mov	r4, r0
 8016d62:	4608      	mov	r0, r1
 8016d64:	4611      	mov	r1, r2
 8016d66:	2200      	movs	r2, #0
 8016d68:	602a      	str	r2, [r5, #0]
 8016d6a:	461a      	mov	r2, r3
 8016d6c:	f7ea fad4 	bl	8001318 <_read>
 8016d70:	1c43      	adds	r3, r0, #1
 8016d72:	d102      	bne.n	8016d7a <_read_r+0x1e>
 8016d74:	682b      	ldr	r3, [r5, #0]
 8016d76:	b103      	cbz	r3, 8016d7a <_read_r+0x1e>
 8016d78:	6023      	str	r3, [r4, #0]
 8016d7a:	bd38      	pop	{r3, r4, r5, pc}
 8016d7c:	240054ac 	.word	0x240054ac

08016d80 <_sbrk_r>:
 8016d80:	b538      	push	{r3, r4, r5, lr}
 8016d82:	4d06      	ldr	r5, [pc, #24]	@ (8016d9c <_sbrk_r+0x1c>)
 8016d84:	2300      	movs	r3, #0
 8016d86:	4604      	mov	r4, r0
 8016d88:	4608      	mov	r0, r1
 8016d8a:	602b      	str	r3, [r5, #0]
 8016d8c:	f7ea fd4a 	bl	8001824 <_sbrk>
 8016d90:	1c43      	adds	r3, r0, #1
 8016d92:	d102      	bne.n	8016d9a <_sbrk_r+0x1a>
 8016d94:	682b      	ldr	r3, [r5, #0]
 8016d96:	b103      	cbz	r3, 8016d9a <_sbrk_r+0x1a>
 8016d98:	6023      	str	r3, [r4, #0]
 8016d9a:	bd38      	pop	{r3, r4, r5, pc}
 8016d9c:	240054ac 	.word	0x240054ac

08016da0 <_write_r>:
 8016da0:	b538      	push	{r3, r4, r5, lr}
 8016da2:	4d07      	ldr	r5, [pc, #28]	@ (8016dc0 <_write_r+0x20>)
 8016da4:	4604      	mov	r4, r0
 8016da6:	4608      	mov	r0, r1
 8016da8:	4611      	mov	r1, r2
 8016daa:	2200      	movs	r2, #0
 8016dac:	602a      	str	r2, [r5, #0]
 8016dae:	461a      	mov	r2, r3
 8016db0:	f7ea fa5e 	bl	8001270 <_write>
 8016db4:	1c43      	adds	r3, r0, #1
 8016db6:	d102      	bne.n	8016dbe <_write_r+0x1e>
 8016db8:	682b      	ldr	r3, [r5, #0]
 8016dba:	b103      	cbz	r3, 8016dbe <_write_r+0x1e>
 8016dbc:	6023      	str	r3, [r4, #0]
 8016dbe:	bd38      	pop	{r3, r4, r5, pc}
 8016dc0:	240054ac 	.word	0x240054ac

08016dc4 <__errno>:
 8016dc4:	4b01      	ldr	r3, [pc, #4]	@ (8016dcc <__errno+0x8>)
 8016dc6:	6818      	ldr	r0, [r3, #0]
 8016dc8:	4770      	bx	lr
 8016dca:	bf00      	nop
 8016dcc:	24000020 	.word	0x24000020

08016dd0 <__libc_init_array>:
 8016dd0:	b570      	push	{r4, r5, r6, lr}
 8016dd2:	4d0d      	ldr	r5, [pc, #52]	@ (8016e08 <__libc_init_array+0x38>)
 8016dd4:	4c0d      	ldr	r4, [pc, #52]	@ (8016e0c <__libc_init_array+0x3c>)
 8016dd6:	1b64      	subs	r4, r4, r5
 8016dd8:	10a4      	asrs	r4, r4, #2
 8016dda:	2600      	movs	r6, #0
 8016ddc:	42a6      	cmp	r6, r4
 8016dde:	d109      	bne.n	8016df4 <__libc_init_array+0x24>
 8016de0:	4d0b      	ldr	r5, [pc, #44]	@ (8016e10 <__libc_init_array+0x40>)
 8016de2:	4c0c      	ldr	r4, [pc, #48]	@ (8016e14 <__libc_init_array+0x44>)
 8016de4:	f000 fe1a 	bl	8017a1c <_init>
 8016de8:	1b64      	subs	r4, r4, r5
 8016dea:	10a4      	asrs	r4, r4, #2
 8016dec:	2600      	movs	r6, #0
 8016dee:	42a6      	cmp	r6, r4
 8016df0:	d105      	bne.n	8016dfe <__libc_init_array+0x2e>
 8016df2:	bd70      	pop	{r4, r5, r6, pc}
 8016df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8016df8:	4798      	blx	r3
 8016dfa:	3601      	adds	r6, #1
 8016dfc:	e7ee      	b.n	8016ddc <__libc_init_array+0xc>
 8016dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e02:	4798      	blx	r3
 8016e04:	3601      	adds	r6, #1
 8016e06:	e7f2      	b.n	8016dee <__libc_init_array+0x1e>
 8016e08:	08017ea8 	.word	0x08017ea8
 8016e0c:	08017ea8 	.word	0x08017ea8
 8016e10:	08017ea8 	.word	0x08017ea8
 8016e14:	08017eb0 	.word	0x08017eb0

08016e18 <__retarget_lock_init_recursive>:
 8016e18:	4770      	bx	lr

08016e1a <__retarget_lock_acquire_recursive>:
 8016e1a:	4770      	bx	lr

08016e1c <__retarget_lock_release_recursive>:
 8016e1c:	4770      	bx	lr

08016e1e <memcpy>:
 8016e1e:	440a      	add	r2, r1
 8016e20:	4291      	cmp	r1, r2
 8016e22:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8016e26:	d100      	bne.n	8016e2a <memcpy+0xc>
 8016e28:	4770      	bx	lr
 8016e2a:	b510      	push	{r4, lr}
 8016e2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016e34:	4291      	cmp	r1, r2
 8016e36:	d1f9      	bne.n	8016e2c <memcpy+0xe>
 8016e38:	bd10      	pop	{r4, pc}
	...

08016e3c <_free_r>:
 8016e3c:	b538      	push	{r3, r4, r5, lr}
 8016e3e:	4605      	mov	r5, r0
 8016e40:	2900      	cmp	r1, #0
 8016e42:	d041      	beq.n	8016ec8 <_free_r+0x8c>
 8016e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016e48:	1f0c      	subs	r4, r1, #4
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	bfb8      	it	lt
 8016e4e:	18e4      	addlt	r4, r4, r3
 8016e50:	f7ff fc10 	bl	8016674 <__malloc_lock>
 8016e54:	4a1d      	ldr	r2, [pc, #116]	@ (8016ecc <_free_r+0x90>)
 8016e56:	6813      	ldr	r3, [r2, #0]
 8016e58:	b933      	cbnz	r3, 8016e68 <_free_r+0x2c>
 8016e5a:	6063      	str	r3, [r4, #4]
 8016e5c:	6014      	str	r4, [r2, #0]
 8016e5e:	4628      	mov	r0, r5
 8016e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016e64:	f7ff bc0c 	b.w	8016680 <__malloc_unlock>
 8016e68:	42a3      	cmp	r3, r4
 8016e6a:	d908      	bls.n	8016e7e <_free_r+0x42>
 8016e6c:	6820      	ldr	r0, [r4, #0]
 8016e6e:	1821      	adds	r1, r4, r0
 8016e70:	428b      	cmp	r3, r1
 8016e72:	bf01      	itttt	eq
 8016e74:	6819      	ldreq	r1, [r3, #0]
 8016e76:	685b      	ldreq	r3, [r3, #4]
 8016e78:	1809      	addeq	r1, r1, r0
 8016e7a:	6021      	streq	r1, [r4, #0]
 8016e7c:	e7ed      	b.n	8016e5a <_free_r+0x1e>
 8016e7e:	461a      	mov	r2, r3
 8016e80:	685b      	ldr	r3, [r3, #4]
 8016e82:	b10b      	cbz	r3, 8016e88 <_free_r+0x4c>
 8016e84:	42a3      	cmp	r3, r4
 8016e86:	d9fa      	bls.n	8016e7e <_free_r+0x42>
 8016e88:	6811      	ldr	r1, [r2, #0]
 8016e8a:	1850      	adds	r0, r2, r1
 8016e8c:	42a0      	cmp	r0, r4
 8016e8e:	d10b      	bne.n	8016ea8 <_free_r+0x6c>
 8016e90:	6820      	ldr	r0, [r4, #0]
 8016e92:	4401      	add	r1, r0
 8016e94:	1850      	adds	r0, r2, r1
 8016e96:	4283      	cmp	r3, r0
 8016e98:	6011      	str	r1, [r2, #0]
 8016e9a:	d1e0      	bne.n	8016e5e <_free_r+0x22>
 8016e9c:	6818      	ldr	r0, [r3, #0]
 8016e9e:	685b      	ldr	r3, [r3, #4]
 8016ea0:	6053      	str	r3, [r2, #4]
 8016ea2:	4408      	add	r0, r1
 8016ea4:	6010      	str	r0, [r2, #0]
 8016ea6:	e7da      	b.n	8016e5e <_free_r+0x22>
 8016ea8:	d902      	bls.n	8016eb0 <_free_r+0x74>
 8016eaa:	230c      	movs	r3, #12
 8016eac:	602b      	str	r3, [r5, #0]
 8016eae:	e7d6      	b.n	8016e5e <_free_r+0x22>
 8016eb0:	6820      	ldr	r0, [r4, #0]
 8016eb2:	1821      	adds	r1, r4, r0
 8016eb4:	428b      	cmp	r3, r1
 8016eb6:	bf04      	itt	eq
 8016eb8:	6819      	ldreq	r1, [r3, #0]
 8016eba:	685b      	ldreq	r3, [r3, #4]
 8016ebc:	6063      	str	r3, [r4, #4]
 8016ebe:	bf04      	itt	eq
 8016ec0:	1809      	addeq	r1, r1, r0
 8016ec2:	6021      	streq	r1, [r4, #0]
 8016ec4:	6054      	str	r4, [r2, #4]
 8016ec6:	e7ca      	b.n	8016e5e <_free_r+0x22>
 8016ec8:	bd38      	pop	{r3, r4, r5, pc}
 8016eca:	bf00      	nop
 8016ecc:	2400536c 	.word	0x2400536c

08016ed0 <__ssputs_r>:
 8016ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ed4:	688e      	ldr	r6, [r1, #8]
 8016ed6:	461f      	mov	r7, r3
 8016ed8:	42be      	cmp	r6, r7
 8016eda:	680b      	ldr	r3, [r1, #0]
 8016edc:	4682      	mov	sl, r0
 8016ede:	460c      	mov	r4, r1
 8016ee0:	4690      	mov	r8, r2
 8016ee2:	d82d      	bhi.n	8016f40 <__ssputs_r+0x70>
 8016ee4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016ee8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016eec:	d026      	beq.n	8016f3c <__ssputs_r+0x6c>
 8016eee:	6965      	ldr	r5, [r4, #20]
 8016ef0:	6909      	ldr	r1, [r1, #16]
 8016ef2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016ef6:	eba3 0901 	sub.w	r9, r3, r1
 8016efa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016efe:	1c7b      	adds	r3, r7, #1
 8016f00:	444b      	add	r3, r9
 8016f02:	106d      	asrs	r5, r5, #1
 8016f04:	429d      	cmp	r5, r3
 8016f06:	bf38      	it	cc
 8016f08:	461d      	movcc	r5, r3
 8016f0a:	0553      	lsls	r3, r2, #21
 8016f0c:	d527      	bpl.n	8016f5e <__ssputs_r+0x8e>
 8016f0e:	4629      	mov	r1, r5
 8016f10:	f7ff fb30 	bl	8016574 <_malloc_r>
 8016f14:	4606      	mov	r6, r0
 8016f16:	b360      	cbz	r0, 8016f72 <__ssputs_r+0xa2>
 8016f18:	6921      	ldr	r1, [r4, #16]
 8016f1a:	464a      	mov	r2, r9
 8016f1c:	f7ff ff7f 	bl	8016e1e <memcpy>
 8016f20:	89a3      	ldrh	r3, [r4, #12]
 8016f22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016f2a:	81a3      	strh	r3, [r4, #12]
 8016f2c:	6126      	str	r6, [r4, #16]
 8016f2e:	6165      	str	r5, [r4, #20]
 8016f30:	444e      	add	r6, r9
 8016f32:	eba5 0509 	sub.w	r5, r5, r9
 8016f36:	6026      	str	r6, [r4, #0]
 8016f38:	60a5      	str	r5, [r4, #8]
 8016f3a:	463e      	mov	r6, r7
 8016f3c:	42be      	cmp	r6, r7
 8016f3e:	d900      	bls.n	8016f42 <__ssputs_r+0x72>
 8016f40:	463e      	mov	r6, r7
 8016f42:	6820      	ldr	r0, [r4, #0]
 8016f44:	4632      	mov	r2, r6
 8016f46:	4641      	mov	r1, r8
 8016f48:	f000 fcf6 	bl	8017938 <memmove>
 8016f4c:	68a3      	ldr	r3, [r4, #8]
 8016f4e:	1b9b      	subs	r3, r3, r6
 8016f50:	60a3      	str	r3, [r4, #8]
 8016f52:	6823      	ldr	r3, [r4, #0]
 8016f54:	4433      	add	r3, r6
 8016f56:	6023      	str	r3, [r4, #0]
 8016f58:	2000      	movs	r0, #0
 8016f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f5e:	462a      	mov	r2, r5
 8016f60:	f000 fd26 	bl	80179b0 <_realloc_r>
 8016f64:	4606      	mov	r6, r0
 8016f66:	2800      	cmp	r0, #0
 8016f68:	d1e0      	bne.n	8016f2c <__ssputs_r+0x5c>
 8016f6a:	6921      	ldr	r1, [r4, #16]
 8016f6c:	4650      	mov	r0, sl
 8016f6e:	f7ff ff65 	bl	8016e3c <_free_r>
 8016f72:	230c      	movs	r3, #12
 8016f74:	f8ca 3000 	str.w	r3, [sl]
 8016f78:	89a3      	ldrh	r3, [r4, #12]
 8016f7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016f7e:	81a3      	strh	r3, [r4, #12]
 8016f80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016f84:	e7e9      	b.n	8016f5a <__ssputs_r+0x8a>
	...

08016f88 <_svfiprintf_r>:
 8016f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f8c:	4698      	mov	r8, r3
 8016f8e:	898b      	ldrh	r3, [r1, #12]
 8016f90:	061b      	lsls	r3, r3, #24
 8016f92:	b09d      	sub	sp, #116	@ 0x74
 8016f94:	4607      	mov	r7, r0
 8016f96:	460d      	mov	r5, r1
 8016f98:	4614      	mov	r4, r2
 8016f9a:	d510      	bpl.n	8016fbe <_svfiprintf_r+0x36>
 8016f9c:	690b      	ldr	r3, [r1, #16]
 8016f9e:	b973      	cbnz	r3, 8016fbe <_svfiprintf_r+0x36>
 8016fa0:	2140      	movs	r1, #64	@ 0x40
 8016fa2:	f7ff fae7 	bl	8016574 <_malloc_r>
 8016fa6:	6028      	str	r0, [r5, #0]
 8016fa8:	6128      	str	r0, [r5, #16]
 8016faa:	b930      	cbnz	r0, 8016fba <_svfiprintf_r+0x32>
 8016fac:	230c      	movs	r3, #12
 8016fae:	603b      	str	r3, [r7, #0]
 8016fb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016fb4:	b01d      	add	sp, #116	@ 0x74
 8016fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fba:	2340      	movs	r3, #64	@ 0x40
 8016fbc:	616b      	str	r3, [r5, #20]
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8016fc2:	2320      	movs	r3, #32
 8016fc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016fc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8016fcc:	2330      	movs	r3, #48	@ 0x30
 8016fce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801716c <_svfiprintf_r+0x1e4>
 8016fd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016fd6:	f04f 0901 	mov.w	r9, #1
 8016fda:	4623      	mov	r3, r4
 8016fdc:	469a      	mov	sl, r3
 8016fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016fe2:	b10a      	cbz	r2, 8016fe8 <_svfiprintf_r+0x60>
 8016fe4:	2a25      	cmp	r2, #37	@ 0x25
 8016fe6:	d1f9      	bne.n	8016fdc <_svfiprintf_r+0x54>
 8016fe8:	ebba 0b04 	subs.w	fp, sl, r4
 8016fec:	d00b      	beq.n	8017006 <_svfiprintf_r+0x7e>
 8016fee:	465b      	mov	r3, fp
 8016ff0:	4622      	mov	r2, r4
 8016ff2:	4629      	mov	r1, r5
 8016ff4:	4638      	mov	r0, r7
 8016ff6:	f7ff ff6b 	bl	8016ed0 <__ssputs_r>
 8016ffa:	3001      	adds	r0, #1
 8016ffc:	f000 80a7 	beq.w	801714e <_svfiprintf_r+0x1c6>
 8017000:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017002:	445a      	add	r2, fp
 8017004:	9209      	str	r2, [sp, #36]	@ 0x24
 8017006:	f89a 3000 	ldrb.w	r3, [sl]
 801700a:	2b00      	cmp	r3, #0
 801700c:	f000 809f 	beq.w	801714e <_svfiprintf_r+0x1c6>
 8017010:	2300      	movs	r3, #0
 8017012:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017016:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801701a:	f10a 0a01 	add.w	sl, sl, #1
 801701e:	9304      	str	r3, [sp, #16]
 8017020:	9307      	str	r3, [sp, #28]
 8017022:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017026:	931a      	str	r3, [sp, #104]	@ 0x68
 8017028:	4654      	mov	r4, sl
 801702a:	2205      	movs	r2, #5
 801702c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017030:	484e      	ldr	r0, [pc, #312]	@ (801716c <_svfiprintf_r+0x1e4>)
 8017032:	f7e9 f95d 	bl	80002f0 <memchr>
 8017036:	9a04      	ldr	r2, [sp, #16]
 8017038:	b9d8      	cbnz	r0, 8017072 <_svfiprintf_r+0xea>
 801703a:	06d0      	lsls	r0, r2, #27
 801703c:	bf44      	itt	mi
 801703e:	2320      	movmi	r3, #32
 8017040:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017044:	0711      	lsls	r1, r2, #28
 8017046:	bf44      	itt	mi
 8017048:	232b      	movmi	r3, #43	@ 0x2b
 801704a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801704e:	f89a 3000 	ldrb.w	r3, [sl]
 8017052:	2b2a      	cmp	r3, #42	@ 0x2a
 8017054:	d015      	beq.n	8017082 <_svfiprintf_r+0xfa>
 8017056:	9a07      	ldr	r2, [sp, #28]
 8017058:	4654      	mov	r4, sl
 801705a:	2000      	movs	r0, #0
 801705c:	f04f 0c0a 	mov.w	ip, #10
 8017060:	4621      	mov	r1, r4
 8017062:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017066:	3b30      	subs	r3, #48	@ 0x30
 8017068:	2b09      	cmp	r3, #9
 801706a:	d94b      	bls.n	8017104 <_svfiprintf_r+0x17c>
 801706c:	b1b0      	cbz	r0, 801709c <_svfiprintf_r+0x114>
 801706e:	9207      	str	r2, [sp, #28]
 8017070:	e014      	b.n	801709c <_svfiprintf_r+0x114>
 8017072:	eba0 0308 	sub.w	r3, r0, r8
 8017076:	fa09 f303 	lsl.w	r3, r9, r3
 801707a:	4313      	orrs	r3, r2
 801707c:	9304      	str	r3, [sp, #16]
 801707e:	46a2      	mov	sl, r4
 8017080:	e7d2      	b.n	8017028 <_svfiprintf_r+0xa0>
 8017082:	9b03      	ldr	r3, [sp, #12]
 8017084:	1d19      	adds	r1, r3, #4
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	9103      	str	r1, [sp, #12]
 801708a:	2b00      	cmp	r3, #0
 801708c:	bfbb      	ittet	lt
 801708e:	425b      	neglt	r3, r3
 8017090:	f042 0202 	orrlt.w	r2, r2, #2
 8017094:	9307      	strge	r3, [sp, #28]
 8017096:	9307      	strlt	r3, [sp, #28]
 8017098:	bfb8      	it	lt
 801709a:	9204      	strlt	r2, [sp, #16]
 801709c:	7823      	ldrb	r3, [r4, #0]
 801709e:	2b2e      	cmp	r3, #46	@ 0x2e
 80170a0:	d10a      	bne.n	80170b8 <_svfiprintf_r+0x130>
 80170a2:	7863      	ldrb	r3, [r4, #1]
 80170a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80170a6:	d132      	bne.n	801710e <_svfiprintf_r+0x186>
 80170a8:	9b03      	ldr	r3, [sp, #12]
 80170aa:	1d1a      	adds	r2, r3, #4
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	9203      	str	r2, [sp, #12]
 80170b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80170b4:	3402      	adds	r4, #2
 80170b6:	9305      	str	r3, [sp, #20]
 80170b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801717c <_svfiprintf_r+0x1f4>
 80170bc:	7821      	ldrb	r1, [r4, #0]
 80170be:	2203      	movs	r2, #3
 80170c0:	4650      	mov	r0, sl
 80170c2:	f7e9 f915 	bl	80002f0 <memchr>
 80170c6:	b138      	cbz	r0, 80170d8 <_svfiprintf_r+0x150>
 80170c8:	9b04      	ldr	r3, [sp, #16]
 80170ca:	eba0 000a 	sub.w	r0, r0, sl
 80170ce:	2240      	movs	r2, #64	@ 0x40
 80170d0:	4082      	lsls	r2, r0
 80170d2:	4313      	orrs	r3, r2
 80170d4:	3401      	adds	r4, #1
 80170d6:	9304      	str	r3, [sp, #16]
 80170d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170dc:	4824      	ldr	r0, [pc, #144]	@ (8017170 <_svfiprintf_r+0x1e8>)
 80170de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80170e2:	2206      	movs	r2, #6
 80170e4:	f7e9 f904 	bl	80002f0 <memchr>
 80170e8:	2800      	cmp	r0, #0
 80170ea:	d036      	beq.n	801715a <_svfiprintf_r+0x1d2>
 80170ec:	4b21      	ldr	r3, [pc, #132]	@ (8017174 <_svfiprintf_r+0x1ec>)
 80170ee:	bb1b      	cbnz	r3, 8017138 <_svfiprintf_r+0x1b0>
 80170f0:	9b03      	ldr	r3, [sp, #12]
 80170f2:	3307      	adds	r3, #7
 80170f4:	f023 0307 	bic.w	r3, r3, #7
 80170f8:	3308      	adds	r3, #8
 80170fa:	9303      	str	r3, [sp, #12]
 80170fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80170fe:	4433      	add	r3, r6
 8017100:	9309      	str	r3, [sp, #36]	@ 0x24
 8017102:	e76a      	b.n	8016fda <_svfiprintf_r+0x52>
 8017104:	fb0c 3202 	mla	r2, ip, r2, r3
 8017108:	460c      	mov	r4, r1
 801710a:	2001      	movs	r0, #1
 801710c:	e7a8      	b.n	8017060 <_svfiprintf_r+0xd8>
 801710e:	2300      	movs	r3, #0
 8017110:	3401      	adds	r4, #1
 8017112:	9305      	str	r3, [sp, #20]
 8017114:	4619      	mov	r1, r3
 8017116:	f04f 0c0a 	mov.w	ip, #10
 801711a:	4620      	mov	r0, r4
 801711c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017120:	3a30      	subs	r2, #48	@ 0x30
 8017122:	2a09      	cmp	r2, #9
 8017124:	d903      	bls.n	801712e <_svfiprintf_r+0x1a6>
 8017126:	2b00      	cmp	r3, #0
 8017128:	d0c6      	beq.n	80170b8 <_svfiprintf_r+0x130>
 801712a:	9105      	str	r1, [sp, #20]
 801712c:	e7c4      	b.n	80170b8 <_svfiprintf_r+0x130>
 801712e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017132:	4604      	mov	r4, r0
 8017134:	2301      	movs	r3, #1
 8017136:	e7f0      	b.n	801711a <_svfiprintf_r+0x192>
 8017138:	ab03      	add	r3, sp, #12
 801713a:	9300      	str	r3, [sp, #0]
 801713c:	462a      	mov	r2, r5
 801713e:	4b0e      	ldr	r3, [pc, #56]	@ (8017178 <_svfiprintf_r+0x1f0>)
 8017140:	a904      	add	r1, sp, #16
 8017142:	4638      	mov	r0, r7
 8017144:	f3af 8000 	nop.w
 8017148:	1c42      	adds	r2, r0, #1
 801714a:	4606      	mov	r6, r0
 801714c:	d1d6      	bne.n	80170fc <_svfiprintf_r+0x174>
 801714e:	89ab      	ldrh	r3, [r5, #12]
 8017150:	065b      	lsls	r3, r3, #25
 8017152:	f53f af2d 	bmi.w	8016fb0 <_svfiprintf_r+0x28>
 8017156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017158:	e72c      	b.n	8016fb4 <_svfiprintf_r+0x2c>
 801715a:	ab03      	add	r3, sp, #12
 801715c:	9300      	str	r3, [sp, #0]
 801715e:	462a      	mov	r2, r5
 8017160:	4b05      	ldr	r3, [pc, #20]	@ (8017178 <_svfiprintf_r+0x1f0>)
 8017162:	a904      	add	r1, sp, #16
 8017164:	4638      	mov	r0, r7
 8017166:	f000 f9bb 	bl	80174e0 <_printf_i>
 801716a:	e7ed      	b.n	8017148 <_svfiprintf_r+0x1c0>
 801716c:	08017e6c 	.word	0x08017e6c
 8017170:	08017e76 	.word	0x08017e76
 8017174:	00000000 	.word	0x00000000
 8017178:	08016ed1 	.word	0x08016ed1
 801717c:	08017e72 	.word	0x08017e72

08017180 <__sfputc_r>:
 8017180:	6893      	ldr	r3, [r2, #8]
 8017182:	3b01      	subs	r3, #1
 8017184:	2b00      	cmp	r3, #0
 8017186:	b410      	push	{r4}
 8017188:	6093      	str	r3, [r2, #8]
 801718a:	da08      	bge.n	801719e <__sfputc_r+0x1e>
 801718c:	6994      	ldr	r4, [r2, #24]
 801718e:	42a3      	cmp	r3, r4
 8017190:	db01      	blt.n	8017196 <__sfputc_r+0x16>
 8017192:	290a      	cmp	r1, #10
 8017194:	d103      	bne.n	801719e <__sfputc_r+0x1e>
 8017196:	f85d 4b04 	ldr.w	r4, [sp], #4
 801719a:	f7ff bcc2 	b.w	8016b22 <__swbuf_r>
 801719e:	6813      	ldr	r3, [r2, #0]
 80171a0:	1c58      	adds	r0, r3, #1
 80171a2:	6010      	str	r0, [r2, #0]
 80171a4:	7019      	strb	r1, [r3, #0]
 80171a6:	4608      	mov	r0, r1
 80171a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171ac:	4770      	bx	lr

080171ae <__sfputs_r>:
 80171ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171b0:	4606      	mov	r6, r0
 80171b2:	460f      	mov	r7, r1
 80171b4:	4614      	mov	r4, r2
 80171b6:	18d5      	adds	r5, r2, r3
 80171b8:	42ac      	cmp	r4, r5
 80171ba:	d101      	bne.n	80171c0 <__sfputs_r+0x12>
 80171bc:	2000      	movs	r0, #0
 80171be:	e007      	b.n	80171d0 <__sfputs_r+0x22>
 80171c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171c4:	463a      	mov	r2, r7
 80171c6:	4630      	mov	r0, r6
 80171c8:	f7ff ffda 	bl	8017180 <__sfputc_r>
 80171cc:	1c43      	adds	r3, r0, #1
 80171ce:	d1f3      	bne.n	80171b8 <__sfputs_r+0xa>
 80171d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080171d4 <_vfiprintf_r>:
 80171d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171d8:	460d      	mov	r5, r1
 80171da:	b09d      	sub	sp, #116	@ 0x74
 80171dc:	4614      	mov	r4, r2
 80171de:	4698      	mov	r8, r3
 80171e0:	4606      	mov	r6, r0
 80171e2:	b118      	cbz	r0, 80171ec <_vfiprintf_r+0x18>
 80171e4:	6a03      	ldr	r3, [r0, #32]
 80171e6:	b90b      	cbnz	r3, 80171ec <_vfiprintf_r+0x18>
 80171e8:	f7ff fadc 	bl	80167a4 <__sinit>
 80171ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80171ee:	07d9      	lsls	r1, r3, #31
 80171f0:	d405      	bmi.n	80171fe <_vfiprintf_r+0x2a>
 80171f2:	89ab      	ldrh	r3, [r5, #12]
 80171f4:	059a      	lsls	r2, r3, #22
 80171f6:	d402      	bmi.n	80171fe <_vfiprintf_r+0x2a>
 80171f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80171fa:	f7ff fe0e 	bl	8016e1a <__retarget_lock_acquire_recursive>
 80171fe:	89ab      	ldrh	r3, [r5, #12]
 8017200:	071b      	lsls	r3, r3, #28
 8017202:	d501      	bpl.n	8017208 <_vfiprintf_r+0x34>
 8017204:	692b      	ldr	r3, [r5, #16]
 8017206:	b99b      	cbnz	r3, 8017230 <_vfiprintf_r+0x5c>
 8017208:	4629      	mov	r1, r5
 801720a:	4630      	mov	r0, r6
 801720c:	f7ff fcc8 	bl	8016ba0 <__swsetup_r>
 8017210:	b170      	cbz	r0, 8017230 <_vfiprintf_r+0x5c>
 8017212:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017214:	07dc      	lsls	r4, r3, #31
 8017216:	d504      	bpl.n	8017222 <_vfiprintf_r+0x4e>
 8017218:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801721c:	b01d      	add	sp, #116	@ 0x74
 801721e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017222:	89ab      	ldrh	r3, [r5, #12]
 8017224:	0598      	lsls	r0, r3, #22
 8017226:	d4f7      	bmi.n	8017218 <_vfiprintf_r+0x44>
 8017228:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801722a:	f7ff fdf7 	bl	8016e1c <__retarget_lock_release_recursive>
 801722e:	e7f3      	b.n	8017218 <_vfiprintf_r+0x44>
 8017230:	2300      	movs	r3, #0
 8017232:	9309      	str	r3, [sp, #36]	@ 0x24
 8017234:	2320      	movs	r3, #32
 8017236:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801723a:	f8cd 800c 	str.w	r8, [sp, #12]
 801723e:	2330      	movs	r3, #48	@ 0x30
 8017240:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80173f0 <_vfiprintf_r+0x21c>
 8017244:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017248:	f04f 0901 	mov.w	r9, #1
 801724c:	4623      	mov	r3, r4
 801724e:	469a      	mov	sl, r3
 8017250:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017254:	b10a      	cbz	r2, 801725a <_vfiprintf_r+0x86>
 8017256:	2a25      	cmp	r2, #37	@ 0x25
 8017258:	d1f9      	bne.n	801724e <_vfiprintf_r+0x7a>
 801725a:	ebba 0b04 	subs.w	fp, sl, r4
 801725e:	d00b      	beq.n	8017278 <_vfiprintf_r+0xa4>
 8017260:	465b      	mov	r3, fp
 8017262:	4622      	mov	r2, r4
 8017264:	4629      	mov	r1, r5
 8017266:	4630      	mov	r0, r6
 8017268:	f7ff ffa1 	bl	80171ae <__sfputs_r>
 801726c:	3001      	adds	r0, #1
 801726e:	f000 80a7 	beq.w	80173c0 <_vfiprintf_r+0x1ec>
 8017272:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017274:	445a      	add	r2, fp
 8017276:	9209      	str	r2, [sp, #36]	@ 0x24
 8017278:	f89a 3000 	ldrb.w	r3, [sl]
 801727c:	2b00      	cmp	r3, #0
 801727e:	f000 809f 	beq.w	80173c0 <_vfiprintf_r+0x1ec>
 8017282:	2300      	movs	r3, #0
 8017284:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801728c:	f10a 0a01 	add.w	sl, sl, #1
 8017290:	9304      	str	r3, [sp, #16]
 8017292:	9307      	str	r3, [sp, #28]
 8017294:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017298:	931a      	str	r3, [sp, #104]	@ 0x68
 801729a:	4654      	mov	r4, sl
 801729c:	2205      	movs	r2, #5
 801729e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172a2:	4853      	ldr	r0, [pc, #332]	@ (80173f0 <_vfiprintf_r+0x21c>)
 80172a4:	f7e9 f824 	bl	80002f0 <memchr>
 80172a8:	9a04      	ldr	r2, [sp, #16]
 80172aa:	b9d8      	cbnz	r0, 80172e4 <_vfiprintf_r+0x110>
 80172ac:	06d1      	lsls	r1, r2, #27
 80172ae:	bf44      	itt	mi
 80172b0:	2320      	movmi	r3, #32
 80172b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80172b6:	0713      	lsls	r3, r2, #28
 80172b8:	bf44      	itt	mi
 80172ba:	232b      	movmi	r3, #43	@ 0x2b
 80172bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80172c0:	f89a 3000 	ldrb.w	r3, [sl]
 80172c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80172c6:	d015      	beq.n	80172f4 <_vfiprintf_r+0x120>
 80172c8:	9a07      	ldr	r2, [sp, #28]
 80172ca:	4654      	mov	r4, sl
 80172cc:	2000      	movs	r0, #0
 80172ce:	f04f 0c0a 	mov.w	ip, #10
 80172d2:	4621      	mov	r1, r4
 80172d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80172d8:	3b30      	subs	r3, #48	@ 0x30
 80172da:	2b09      	cmp	r3, #9
 80172dc:	d94b      	bls.n	8017376 <_vfiprintf_r+0x1a2>
 80172de:	b1b0      	cbz	r0, 801730e <_vfiprintf_r+0x13a>
 80172e0:	9207      	str	r2, [sp, #28]
 80172e2:	e014      	b.n	801730e <_vfiprintf_r+0x13a>
 80172e4:	eba0 0308 	sub.w	r3, r0, r8
 80172e8:	fa09 f303 	lsl.w	r3, r9, r3
 80172ec:	4313      	orrs	r3, r2
 80172ee:	9304      	str	r3, [sp, #16]
 80172f0:	46a2      	mov	sl, r4
 80172f2:	e7d2      	b.n	801729a <_vfiprintf_r+0xc6>
 80172f4:	9b03      	ldr	r3, [sp, #12]
 80172f6:	1d19      	adds	r1, r3, #4
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	9103      	str	r1, [sp, #12]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	bfbb      	ittet	lt
 8017300:	425b      	neglt	r3, r3
 8017302:	f042 0202 	orrlt.w	r2, r2, #2
 8017306:	9307      	strge	r3, [sp, #28]
 8017308:	9307      	strlt	r3, [sp, #28]
 801730a:	bfb8      	it	lt
 801730c:	9204      	strlt	r2, [sp, #16]
 801730e:	7823      	ldrb	r3, [r4, #0]
 8017310:	2b2e      	cmp	r3, #46	@ 0x2e
 8017312:	d10a      	bne.n	801732a <_vfiprintf_r+0x156>
 8017314:	7863      	ldrb	r3, [r4, #1]
 8017316:	2b2a      	cmp	r3, #42	@ 0x2a
 8017318:	d132      	bne.n	8017380 <_vfiprintf_r+0x1ac>
 801731a:	9b03      	ldr	r3, [sp, #12]
 801731c:	1d1a      	adds	r2, r3, #4
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	9203      	str	r2, [sp, #12]
 8017322:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017326:	3402      	adds	r4, #2
 8017328:	9305      	str	r3, [sp, #20]
 801732a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017400 <_vfiprintf_r+0x22c>
 801732e:	7821      	ldrb	r1, [r4, #0]
 8017330:	2203      	movs	r2, #3
 8017332:	4650      	mov	r0, sl
 8017334:	f7e8 ffdc 	bl	80002f0 <memchr>
 8017338:	b138      	cbz	r0, 801734a <_vfiprintf_r+0x176>
 801733a:	9b04      	ldr	r3, [sp, #16]
 801733c:	eba0 000a 	sub.w	r0, r0, sl
 8017340:	2240      	movs	r2, #64	@ 0x40
 8017342:	4082      	lsls	r2, r0
 8017344:	4313      	orrs	r3, r2
 8017346:	3401      	adds	r4, #1
 8017348:	9304      	str	r3, [sp, #16]
 801734a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801734e:	4829      	ldr	r0, [pc, #164]	@ (80173f4 <_vfiprintf_r+0x220>)
 8017350:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017354:	2206      	movs	r2, #6
 8017356:	f7e8 ffcb 	bl	80002f0 <memchr>
 801735a:	2800      	cmp	r0, #0
 801735c:	d03f      	beq.n	80173de <_vfiprintf_r+0x20a>
 801735e:	4b26      	ldr	r3, [pc, #152]	@ (80173f8 <_vfiprintf_r+0x224>)
 8017360:	bb1b      	cbnz	r3, 80173aa <_vfiprintf_r+0x1d6>
 8017362:	9b03      	ldr	r3, [sp, #12]
 8017364:	3307      	adds	r3, #7
 8017366:	f023 0307 	bic.w	r3, r3, #7
 801736a:	3308      	adds	r3, #8
 801736c:	9303      	str	r3, [sp, #12]
 801736e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017370:	443b      	add	r3, r7
 8017372:	9309      	str	r3, [sp, #36]	@ 0x24
 8017374:	e76a      	b.n	801724c <_vfiprintf_r+0x78>
 8017376:	fb0c 3202 	mla	r2, ip, r2, r3
 801737a:	460c      	mov	r4, r1
 801737c:	2001      	movs	r0, #1
 801737e:	e7a8      	b.n	80172d2 <_vfiprintf_r+0xfe>
 8017380:	2300      	movs	r3, #0
 8017382:	3401      	adds	r4, #1
 8017384:	9305      	str	r3, [sp, #20]
 8017386:	4619      	mov	r1, r3
 8017388:	f04f 0c0a 	mov.w	ip, #10
 801738c:	4620      	mov	r0, r4
 801738e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017392:	3a30      	subs	r2, #48	@ 0x30
 8017394:	2a09      	cmp	r2, #9
 8017396:	d903      	bls.n	80173a0 <_vfiprintf_r+0x1cc>
 8017398:	2b00      	cmp	r3, #0
 801739a:	d0c6      	beq.n	801732a <_vfiprintf_r+0x156>
 801739c:	9105      	str	r1, [sp, #20]
 801739e:	e7c4      	b.n	801732a <_vfiprintf_r+0x156>
 80173a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80173a4:	4604      	mov	r4, r0
 80173a6:	2301      	movs	r3, #1
 80173a8:	e7f0      	b.n	801738c <_vfiprintf_r+0x1b8>
 80173aa:	ab03      	add	r3, sp, #12
 80173ac:	9300      	str	r3, [sp, #0]
 80173ae:	462a      	mov	r2, r5
 80173b0:	4b12      	ldr	r3, [pc, #72]	@ (80173fc <_vfiprintf_r+0x228>)
 80173b2:	a904      	add	r1, sp, #16
 80173b4:	4630      	mov	r0, r6
 80173b6:	f3af 8000 	nop.w
 80173ba:	4607      	mov	r7, r0
 80173bc:	1c78      	adds	r0, r7, #1
 80173be:	d1d6      	bne.n	801736e <_vfiprintf_r+0x19a>
 80173c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80173c2:	07d9      	lsls	r1, r3, #31
 80173c4:	d405      	bmi.n	80173d2 <_vfiprintf_r+0x1fe>
 80173c6:	89ab      	ldrh	r3, [r5, #12]
 80173c8:	059a      	lsls	r2, r3, #22
 80173ca:	d402      	bmi.n	80173d2 <_vfiprintf_r+0x1fe>
 80173cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80173ce:	f7ff fd25 	bl	8016e1c <__retarget_lock_release_recursive>
 80173d2:	89ab      	ldrh	r3, [r5, #12]
 80173d4:	065b      	lsls	r3, r3, #25
 80173d6:	f53f af1f 	bmi.w	8017218 <_vfiprintf_r+0x44>
 80173da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80173dc:	e71e      	b.n	801721c <_vfiprintf_r+0x48>
 80173de:	ab03      	add	r3, sp, #12
 80173e0:	9300      	str	r3, [sp, #0]
 80173e2:	462a      	mov	r2, r5
 80173e4:	4b05      	ldr	r3, [pc, #20]	@ (80173fc <_vfiprintf_r+0x228>)
 80173e6:	a904      	add	r1, sp, #16
 80173e8:	4630      	mov	r0, r6
 80173ea:	f000 f879 	bl	80174e0 <_printf_i>
 80173ee:	e7e4      	b.n	80173ba <_vfiprintf_r+0x1e6>
 80173f0:	08017e6c 	.word	0x08017e6c
 80173f4:	08017e76 	.word	0x08017e76
 80173f8:	00000000 	.word	0x00000000
 80173fc:	080171af 	.word	0x080171af
 8017400:	08017e72 	.word	0x08017e72

08017404 <_printf_common>:
 8017404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017408:	4616      	mov	r6, r2
 801740a:	4698      	mov	r8, r3
 801740c:	688a      	ldr	r2, [r1, #8]
 801740e:	690b      	ldr	r3, [r1, #16]
 8017410:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017414:	4293      	cmp	r3, r2
 8017416:	bfb8      	it	lt
 8017418:	4613      	movlt	r3, r2
 801741a:	6033      	str	r3, [r6, #0]
 801741c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017420:	4607      	mov	r7, r0
 8017422:	460c      	mov	r4, r1
 8017424:	b10a      	cbz	r2, 801742a <_printf_common+0x26>
 8017426:	3301      	adds	r3, #1
 8017428:	6033      	str	r3, [r6, #0]
 801742a:	6823      	ldr	r3, [r4, #0]
 801742c:	0699      	lsls	r1, r3, #26
 801742e:	bf42      	ittt	mi
 8017430:	6833      	ldrmi	r3, [r6, #0]
 8017432:	3302      	addmi	r3, #2
 8017434:	6033      	strmi	r3, [r6, #0]
 8017436:	6825      	ldr	r5, [r4, #0]
 8017438:	f015 0506 	ands.w	r5, r5, #6
 801743c:	d106      	bne.n	801744c <_printf_common+0x48>
 801743e:	f104 0a19 	add.w	sl, r4, #25
 8017442:	68e3      	ldr	r3, [r4, #12]
 8017444:	6832      	ldr	r2, [r6, #0]
 8017446:	1a9b      	subs	r3, r3, r2
 8017448:	42ab      	cmp	r3, r5
 801744a:	dc26      	bgt.n	801749a <_printf_common+0x96>
 801744c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017450:	6822      	ldr	r2, [r4, #0]
 8017452:	3b00      	subs	r3, #0
 8017454:	bf18      	it	ne
 8017456:	2301      	movne	r3, #1
 8017458:	0692      	lsls	r2, r2, #26
 801745a:	d42b      	bmi.n	80174b4 <_printf_common+0xb0>
 801745c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017460:	4641      	mov	r1, r8
 8017462:	4638      	mov	r0, r7
 8017464:	47c8      	blx	r9
 8017466:	3001      	adds	r0, #1
 8017468:	d01e      	beq.n	80174a8 <_printf_common+0xa4>
 801746a:	6823      	ldr	r3, [r4, #0]
 801746c:	6922      	ldr	r2, [r4, #16]
 801746e:	f003 0306 	and.w	r3, r3, #6
 8017472:	2b04      	cmp	r3, #4
 8017474:	bf02      	ittt	eq
 8017476:	68e5      	ldreq	r5, [r4, #12]
 8017478:	6833      	ldreq	r3, [r6, #0]
 801747a:	1aed      	subeq	r5, r5, r3
 801747c:	68a3      	ldr	r3, [r4, #8]
 801747e:	bf0c      	ite	eq
 8017480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017484:	2500      	movne	r5, #0
 8017486:	4293      	cmp	r3, r2
 8017488:	bfc4      	itt	gt
 801748a:	1a9b      	subgt	r3, r3, r2
 801748c:	18ed      	addgt	r5, r5, r3
 801748e:	2600      	movs	r6, #0
 8017490:	341a      	adds	r4, #26
 8017492:	42b5      	cmp	r5, r6
 8017494:	d11a      	bne.n	80174cc <_printf_common+0xc8>
 8017496:	2000      	movs	r0, #0
 8017498:	e008      	b.n	80174ac <_printf_common+0xa8>
 801749a:	2301      	movs	r3, #1
 801749c:	4652      	mov	r2, sl
 801749e:	4641      	mov	r1, r8
 80174a0:	4638      	mov	r0, r7
 80174a2:	47c8      	blx	r9
 80174a4:	3001      	adds	r0, #1
 80174a6:	d103      	bne.n	80174b0 <_printf_common+0xac>
 80174a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80174ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174b0:	3501      	adds	r5, #1
 80174b2:	e7c6      	b.n	8017442 <_printf_common+0x3e>
 80174b4:	18e1      	adds	r1, r4, r3
 80174b6:	1c5a      	adds	r2, r3, #1
 80174b8:	2030      	movs	r0, #48	@ 0x30
 80174ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80174be:	4422      	add	r2, r4
 80174c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80174c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80174c8:	3302      	adds	r3, #2
 80174ca:	e7c7      	b.n	801745c <_printf_common+0x58>
 80174cc:	2301      	movs	r3, #1
 80174ce:	4622      	mov	r2, r4
 80174d0:	4641      	mov	r1, r8
 80174d2:	4638      	mov	r0, r7
 80174d4:	47c8      	blx	r9
 80174d6:	3001      	adds	r0, #1
 80174d8:	d0e6      	beq.n	80174a8 <_printf_common+0xa4>
 80174da:	3601      	adds	r6, #1
 80174dc:	e7d9      	b.n	8017492 <_printf_common+0x8e>
	...

080174e0 <_printf_i>:
 80174e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80174e4:	7e0f      	ldrb	r7, [r1, #24]
 80174e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80174e8:	2f78      	cmp	r7, #120	@ 0x78
 80174ea:	4691      	mov	r9, r2
 80174ec:	4680      	mov	r8, r0
 80174ee:	460c      	mov	r4, r1
 80174f0:	469a      	mov	sl, r3
 80174f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80174f6:	d807      	bhi.n	8017508 <_printf_i+0x28>
 80174f8:	2f62      	cmp	r7, #98	@ 0x62
 80174fa:	d80a      	bhi.n	8017512 <_printf_i+0x32>
 80174fc:	2f00      	cmp	r7, #0
 80174fe:	f000 80d1 	beq.w	80176a4 <_printf_i+0x1c4>
 8017502:	2f58      	cmp	r7, #88	@ 0x58
 8017504:	f000 80b8 	beq.w	8017678 <_printf_i+0x198>
 8017508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801750c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017510:	e03a      	b.n	8017588 <_printf_i+0xa8>
 8017512:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017516:	2b15      	cmp	r3, #21
 8017518:	d8f6      	bhi.n	8017508 <_printf_i+0x28>
 801751a:	a101      	add	r1, pc, #4	@ (adr r1, 8017520 <_printf_i+0x40>)
 801751c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017520:	08017579 	.word	0x08017579
 8017524:	0801758d 	.word	0x0801758d
 8017528:	08017509 	.word	0x08017509
 801752c:	08017509 	.word	0x08017509
 8017530:	08017509 	.word	0x08017509
 8017534:	08017509 	.word	0x08017509
 8017538:	0801758d 	.word	0x0801758d
 801753c:	08017509 	.word	0x08017509
 8017540:	08017509 	.word	0x08017509
 8017544:	08017509 	.word	0x08017509
 8017548:	08017509 	.word	0x08017509
 801754c:	0801768b 	.word	0x0801768b
 8017550:	080175b7 	.word	0x080175b7
 8017554:	08017645 	.word	0x08017645
 8017558:	08017509 	.word	0x08017509
 801755c:	08017509 	.word	0x08017509
 8017560:	080176ad 	.word	0x080176ad
 8017564:	08017509 	.word	0x08017509
 8017568:	080175b7 	.word	0x080175b7
 801756c:	08017509 	.word	0x08017509
 8017570:	08017509 	.word	0x08017509
 8017574:	0801764d 	.word	0x0801764d
 8017578:	6833      	ldr	r3, [r6, #0]
 801757a:	1d1a      	adds	r2, r3, #4
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	6032      	str	r2, [r6, #0]
 8017580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017584:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017588:	2301      	movs	r3, #1
 801758a:	e09c      	b.n	80176c6 <_printf_i+0x1e6>
 801758c:	6833      	ldr	r3, [r6, #0]
 801758e:	6820      	ldr	r0, [r4, #0]
 8017590:	1d19      	adds	r1, r3, #4
 8017592:	6031      	str	r1, [r6, #0]
 8017594:	0606      	lsls	r6, r0, #24
 8017596:	d501      	bpl.n	801759c <_printf_i+0xbc>
 8017598:	681d      	ldr	r5, [r3, #0]
 801759a:	e003      	b.n	80175a4 <_printf_i+0xc4>
 801759c:	0645      	lsls	r5, r0, #25
 801759e:	d5fb      	bpl.n	8017598 <_printf_i+0xb8>
 80175a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80175a4:	2d00      	cmp	r5, #0
 80175a6:	da03      	bge.n	80175b0 <_printf_i+0xd0>
 80175a8:	232d      	movs	r3, #45	@ 0x2d
 80175aa:	426d      	negs	r5, r5
 80175ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80175b0:	4858      	ldr	r0, [pc, #352]	@ (8017714 <_printf_i+0x234>)
 80175b2:	230a      	movs	r3, #10
 80175b4:	e011      	b.n	80175da <_printf_i+0xfa>
 80175b6:	6821      	ldr	r1, [r4, #0]
 80175b8:	6833      	ldr	r3, [r6, #0]
 80175ba:	0608      	lsls	r0, r1, #24
 80175bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80175c0:	d402      	bmi.n	80175c8 <_printf_i+0xe8>
 80175c2:	0649      	lsls	r1, r1, #25
 80175c4:	bf48      	it	mi
 80175c6:	b2ad      	uxthmi	r5, r5
 80175c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80175ca:	4852      	ldr	r0, [pc, #328]	@ (8017714 <_printf_i+0x234>)
 80175cc:	6033      	str	r3, [r6, #0]
 80175ce:	bf14      	ite	ne
 80175d0:	230a      	movne	r3, #10
 80175d2:	2308      	moveq	r3, #8
 80175d4:	2100      	movs	r1, #0
 80175d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80175da:	6866      	ldr	r6, [r4, #4]
 80175dc:	60a6      	str	r6, [r4, #8]
 80175de:	2e00      	cmp	r6, #0
 80175e0:	db05      	blt.n	80175ee <_printf_i+0x10e>
 80175e2:	6821      	ldr	r1, [r4, #0]
 80175e4:	432e      	orrs	r6, r5
 80175e6:	f021 0104 	bic.w	r1, r1, #4
 80175ea:	6021      	str	r1, [r4, #0]
 80175ec:	d04b      	beq.n	8017686 <_printf_i+0x1a6>
 80175ee:	4616      	mov	r6, r2
 80175f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80175f4:	fb03 5711 	mls	r7, r3, r1, r5
 80175f8:	5dc7      	ldrb	r7, [r0, r7]
 80175fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80175fe:	462f      	mov	r7, r5
 8017600:	42bb      	cmp	r3, r7
 8017602:	460d      	mov	r5, r1
 8017604:	d9f4      	bls.n	80175f0 <_printf_i+0x110>
 8017606:	2b08      	cmp	r3, #8
 8017608:	d10b      	bne.n	8017622 <_printf_i+0x142>
 801760a:	6823      	ldr	r3, [r4, #0]
 801760c:	07df      	lsls	r7, r3, #31
 801760e:	d508      	bpl.n	8017622 <_printf_i+0x142>
 8017610:	6923      	ldr	r3, [r4, #16]
 8017612:	6861      	ldr	r1, [r4, #4]
 8017614:	4299      	cmp	r1, r3
 8017616:	bfde      	ittt	le
 8017618:	2330      	movle	r3, #48	@ 0x30
 801761a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801761e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8017622:	1b92      	subs	r2, r2, r6
 8017624:	6122      	str	r2, [r4, #16]
 8017626:	f8cd a000 	str.w	sl, [sp]
 801762a:	464b      	mov	r3, r9
 801762c:	aa03      	add	r2, sp, #12
 801762e:	4621      	mov	r1, r4
 8017630:	4640      	mov	r0, r8
 8017632:	f7ff fee7 	bl	8017404 <_printf_common>
 8017636:	3001      	adds	r0, #1
 8017638:	d14a      	bne.n	80176d0 <_printf_i+0x1f0>
 801763a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801763e:	b004      	add	sp, #16
 8017640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017644:	6823      	ldr	r3, [r4, #0]
 8017646:	f043 0320 	orr.w	r3, r3, #32
 801764a:	6023      	str	r3, [r4, #0]
 801764c:	4832      	ldr	r0, [pc, #200]	@ (8017718 <_printf_i+0x238>)
 801764e:	2778      	movs	r7, #120	@ 0x78
 8017650:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017654:	6823      	ldr	r3, [r4, #0]
 8017656:	6831      	ldr	r1, [r6, #0]
 8017658:	061f      	lsls	r7, r3, #24
 801765a:	f851 5b04 	ldr.w	r5, [r1], #4
 801765e:	d402      	bmi.n	8017666 <_printf_i+0x186>
 8017660:	065f      	lsls	r7, r3, #25
 8017662:	bf48      	it	mi
 8017664:	b2ad      	uxthmi	r5, r5
 8017666:	6031      	str	r1, [r6, #0]
 8017668:	07d9      	lsls	r1, r3, #31
 801766a:	bf44      	itt	mi
 801766c:	f043 0320 	orrmi.w	r3, r3, #32
 8017670:	6023      	strmi	r3, [r4, #0]
 8017672:	b11d      	cbz	r5, 801767c <_printf_i+0x19c>
 8017674:	2310      	movs	r3, #16
 8017676:	e7ad      	b.n	80175d4 <_printf_i+0xf4>
 8017678:	4826      	ldr	r0, [pc, #152]	@ (8017714 <_printf_i+0x234>)
 801767a:	e7e9      	b.n	8017650 <_printf_i+0x170>
 801767c:	6823      	ldr	r3, [r4, #0]
 801767e:	f023 0320 	bic.w	r3, r3, #32
 8017682:	6023      	str	r3, [r4, #0]
 8017684:	e7f6      	b.n	8017674 <_printf_i+0x194>
 8017686:	4616      	mov	r6, r2
 8017688:	e7bd      	b.n	8017606 <_printf_i+0x126>
 801768a:	6833      	ldr	r3, [r6, #0]
 801768c:	6825      	ldr	r5, [r4, #0]
 801768e:	6961      	ldr	r1, [r4, #20]
 8017690:	1d18      	adds	r0, r3, #4
 8017692:	6030      	str	r0, [r6, #0]
 8017694:	062e      	lsls	r6, r5, #24
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	d501      	bpl.n	801769e <_printf_i+0x1be>
 801769a:	6019      	str	r1, [r3, #0]
 801769c:	e002      	b.n	80176a4 <_printf_i+0x1c4>
 801769e:	0668      	lsls	r0, r5, #25
 80176a0:	d5fb      	bpl.n	801769a <_printf_i+0x1ba>
 80176a2:	8019      	strh	r1, [r3, #0]
 80176a4:	2300      	movs	r3, #0
 80176a6:	6123      	str	r3, [r4, #16]
 80176a8:	4616      	mov	r6, r2
 80176aa:	e7bc      	b.n	8017626 <_printf_i+0x146>
 80176ac:	6833      	ldr	r3, [r6, #0]
 80176ae:	1d1a      	adds	r2, r3, #4
 80176b0:	6032      	str	r2, [r6, #0]
 80176b2:	681e      	ldr	r6, [r3, #0]
 80176b4:	6862      	ldr	r2, [r4, #4]
 80176b6:	2100      	movs	r1, #0
 80176b8:	4630      	mov	r0, r6
 80176ba:	f7e8 fe19 	bl	80002f0 <memchr>
 80176be:	b108      	cbz	r0, 80176c4 <_printf_i+0x1e4>
 80176c0:	1b80      	subs	r0, r0, r6
 80176c2:	6060      	str	r0, [r4, #4]
 80176c4:	6863      	ldr	r3, [r4, #4]
 80176c6:	6123      	str	r3, [r4, #16]
 80176c8:	2300      	movs	r3, #0
 80176ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80176ce:	e7aa      	b.n	8017626 <_printf_i+0x146>
 80176d0:	6923      	ldr	r3, [r4, #16]
 80176d2:	4632      	mov	r2, r6
 80176d4:	4649      	mov	r1, r9
 80176d6:	4640      	mov	r0, r8
 80176d8:	47d0      	blx	sl
 80176da:	3001      	adds	r0, #1
 80176dc:	d0ad      	beq.n	801763a <_printf_i+0x15a>
 80176de:	6823      	ldr	r3, [r4, #0]
 80176e0:	079b      	lsls	r3, r3, #30
 80176e2:	d413      	bmi.n	801770c <_printf_i+0x22c>
 80176e4:	68e0      	ldr	r0, [r4, #12]
 80176e6:	9b03      	ldr	r3, [sp, #12]
 80176e8:	4298      	cmp	r0, r3
 80176ea:	bfb8      	it	lt
 80176ec:	4618      	movlt	r0, r3
 80176ee:	e7a6      	b.n	801763e <_printf_i+0x15e>
 80176f0:	2301      	movs	r3, #1
 80176f2:	4632      	mov	r2, r6
 80176f4:	4649      	mov	r1, r9
 80176f6:	4640      	mov	r0, r8
 80176f8:	47d0      	blx	sl
 80176fa:	3001      	adds	r0, #1
 80176fc:	d09d      	beq.n	801763a <_printf_i+0x15a>
 80176fe:	3501      	adds	r5, #1
 8017700:	68e3      	ldr	r3, [r4, #12]
 8017702:	9903      	ldr	r1, [sp, #12]
 8017704:	1a5b      	subs	r3, r3, r1
 8017706:	42ab      	cmp	r3, r5
 8017708:	dcf2      	bgt.n	80176f0 <_printf_i+0x210>
 801770a:	e7eb      	b.n	80176e4 <_printf_i+0x204>
 801770c:	2500      	movs	r5, #0
 801770e:	f104 0619 	add.w	r6, r4, #25
 8017712:	e7f5      	b.n	8017700 <_printf_i+0x220>
 8017714:	08017e7d 	.word	0x08017e7d
 8017718:	08017e8e 	.word	0x08017e8e

0801771c <__sflush_r>:
 801771c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017724:	0716      	lsls	r6, r2, #28
 8017726:	4605      	mov	r5, r0
 8017728:	460c      	mov	r4, r1
 801772a:	d454      	bmi.n	80177d6 <__sflush_r+0xba>
 801772c:	684b      	ldr	r3, [r1, #4]
 801772e:	2b00      	cmp	r3, #0
 8017730:	dc02      	bgt.n	8017738 <__sflush_r+0x1c>
 8017732:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017734:	2b00      	cmp	r3, #0
 8017736:	dd48      	ble.n	80177ca <__sflush_r+0xae>
 8017738:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801773a:	2e00      	cmp	r6, #0
 801773c:	d045      	beq.n	80177ca <__sflush_r+0xae>
 801773e:	2300      	movs	r3, #0
 8017740:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017744:	682f      	ldr	r7, [r5, #0]
 8017746:	6a21      	ldr	r1, [r4, #32]
 8017748:	602b      	str	r3, [r5, #0]
 801774a:	d030      	beq.n	80177ae <__sflush_r+0x92>
 801774c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801774e:	89a3      	ldrh	r3, [r4, #12]
 8017750:	0759      	lsls	r1, r3, #29
 8017752:	d505      	bpl.n	8017760 <__sflush_r+0x44>
 8017754:	6863      	ldr	r3, [r4, #4]
 8017756:	1ad2      	subs	r2, r2, r3
 8017758:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801775a:	b10b      	cbz	r3, 8017760 <__sflush_r+0x44>
 801775c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801775e:	1ad2      	subs	r2, r2, r3
 8017760:	2300      	movs	r3, #0
 8017762:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017764:	6a21      	ldr	r1, [r4, #32]
 8017766:	4628      	mov	r0, r5
 8017768:	47b0      	blx	r6
 801776a:	1c43      	adds	r3, r0, #1
 801776c:	89a3      	ldrh	r3, [r4, #12]
 801776e:	d106      	bne.n	801777e <__sflush_r+0x62>
 8017770:	6829      	ldr	r1, [r5, #0]
 8017772:	291d      	cmp	r1, #29
 8017774:	d82b      	bhi.n	80177ce <__sflush_r+0xb2>
 8017776:	4a2a      	ldr	r2, [pc, #168]	@ (8017820 <__sflush_r+0x104>)
 8017778:	40ca      	lsrs	r2, r1
 801777a:	07d6      	lsls	r6, r2, #31
 801777c:	d527      	bpl.n	80177ce <__sflush_r+0xb2>
 801777e:	2200      	movs	r2, #0
 8017780:	6062      	str	r2, [r4, #4]
 8017782:	04d9      	lsls	r1, r3, #19
 8017784:	6922      	ldr	r2, [r4, #16]
 8017786:	6022      	str	r2, [r4, #0]
 8017788:	d504      	bpl.n	8017794 <__sflush_r+0x78>
 801778a:	1c42      	adds	r2, r0, #1
 801778c:	d101      	bne.n	8017792 <__sflush_r+0x76>
 801778e:	682b      	ldr	r3, [r5, #0]
 8017790:	b903      	cbnz	r3, 8017794 <__sflush_r+0x78>
 8017792:	6560      	str	r0, [r4, #84]	@ 0x54
 8017794:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017796:	602f      	str	r7, [r5, #0]
 8017798:	b1b9      	cbz	r1, 80177ca <__sflush_r+0xae>
 801779a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801779e:	4299      	cmp	r1, r3
 80177a0:	d002      	beq.n	80177a8 <__sflush_r+0x8c>
 80177a2:	4628      	mov	r0, r5
 80177a4:	f7ff fb4a 	bl	8016e3c <_free_r>
 80177a8:	2300      	movs	r3, #0
 80177aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80177ac:	e00d      	b.n	80177ca <__sflush_r+0xae>
 80177ae:	2301      	movs	r3, #1
 80177b0:	4628      	mov	r0, r5
 80177b2:	47b0      	blx	r6
 80177b4:	4602      	mov	r2, r0
 80177b6:	1c50      	adds	r0, r2, #1
 80177b8:	d1c9      	bne.n	801774e <__sflush_r+0x32>
 80177ba:	682b      	ldr	r3, [r5, #0]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d0c6      	beq.n	801774e <__sflush_r+0x32>
 80177c0:	2b1d      	cmp	r3, #29
 80177c2:	d001      	beq.n	80177c8 <__sflush_r+0xac>
 80177c4:	2b16      	cmp	r3, #22
 80177c6:	d11e      	bne.n	8017806 <__sflush_r+0xea>
 80177c8:	602f      	str	r7, [r5, #0]
 80177ca:	2000      	movs	r0, #0
 80177cc:	e022      	b.n	8017814 <__sflush_r+0xf8>
 80177ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80177d2:	b21b      	sxth	r3, r3
 80177d4:	e01b      	b.n	801780e <__sflush_r+0xf2>
 80177d6:	690f      	ldr	r7, [r1, #16]
 80177d8:	2f00      	cmp	r7, #0
 80177da:	d0f6      	beq.n	80177ca <__sflush_r+0xae>
 80177dc:	0793      	lsls	r3, r2, #30
 80177de:	680e      	ldr	r6, [r1, #0]
 80177e0:	bf08      	it	eq
 80177e2:	694b      	ldreq	r3, [r1, #20]
 80177e4:	600f      	str	r7, [r1, #0]
 80177e6:	bf18      	it	ne
 80177e8:	2300      	movne	r3, #0
 80177ea:	eba6 0807 	sub.w	r8, r6, r7
 80177ee:	608b      	str	r3, [r1, #8]
 80177f0:	f1b8 0f00 	cmp.w	r8, #0
 80177f4:	dde9      	ble.n	80177ca <__sflush_r+0xae>
 80177f6:	6a21      	ldr	r1, [r4, #32]
 80177f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80177fa:	4643      	mov	r3, r8
 80177fc:	463a      	mov	r2, r7
 80177fe:	4628      	mov	r0, r5
 8017800:	47b0      	blx	r6
 8017802:	2800      	cmp	r0, #0
 8017804:	dc08      	bgt.n	8017818 <__sflush_r+0xfc>
 8017806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801780a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801780e:	81a3      	strh	r3, [r4, #12]
 8017810:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017818:	4407      	add	r7, r0
 801781a:	eba8 0800 	sub.w	r8, r8, r0
 801781e:	e7e7      	b.n	80177f0 <__sflush_r+0xd4>
 8017820:	20400001 	.word	0x20400001

08017824 <_fflush_r>:
 8017824:	b538      	push	{r3, r4, r5, lr}
 8017826:	690b      	ldr	r3, [r1, #16]
 8017828:	4605      	mov	r5, r0
 801782a:	460c      	mov	r4, r1
 801782c:	b913      	cbnz	r3, 8017834 <_fflush_r+0x10>
 801782e:	2500      	movs	r5, #0
 8017830:	4628      	mov	r0, r5
 8017832:	bd38      	pop	{r3, r4, r5, pc}
 8017834:	b118      	cbz	r0, 801783e <_fflush_r+0x1a>
 8017836:	6a03      	ldr	r3, [r0, #32]
 8017838:	b90b      	cbnz	r3, 801783e <_fflush_r+0x1a>
 801783a:	f7fe ffb3 	bl	80167a4 <__sinit>
 801783e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017842:	2b00      	cmp	r3, #0
 8017844:	d0f3      	beq.n	801782e <_fflush_r+0xa>
 8017846:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017848:	07d0      	lsls	r0, r2, #31
 801784a:	d404      	bmi.n	8017856 <_fflush_r+0x32>
 801784c:	0599      	lsls	r1, r3, #22
 801784e:	d402      	bmi.n	8017856 <_fflush_r+0x32>
 8017850:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017852:	f7ff fae2 	bl	8016e1a <__retarget_lock_acquire_recursive>
 8017856:	4628      	mov	r0, r5
 8017858:	4621      	mov	r1, r4
 801785a:	f7ff ff5f 	bl	801771c <__sflush_r>
 801785e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017860:	07da      	lsls	r2, r3, #31
 8017862:	4605      	mov	r5, r0
 8017864:	d4e4      	bmi.n	8017830 <_fflush_r+0xc>
 8017866:	89a3      	ldrh	r3, [r4, #12]
 8017868:	059b      	lsls	r3, r3, #22
 801786a:	d4e1      	bmi.n	8017830 <_fflush_r+0xc>
 801786c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801786e:	f7ff fad5 	bl	8016e1c <__retarget_lock_release_recursive>
 8017872:	e7dd      	b.n	8017830 <_fflush_r+0xc>

08017874 <__swhatbuf_r>:
 8017874:	b570      	push	{r4, r5, r6, lr}
 8017876:	460c      	mov	r4, r1
 8017878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801787c:	2900      	cmp	r1, #0
 801787e:	b096      	sub	sp, #88	@ 0x58
 8017880:	4615      	mov	r5, r2
 8017882:	461e      	mov	r6, r3
 8017884:	da0d      	bge.n	80178a2 <__swhatbuf_r+0x2e>
 8017886:	89a3      	ldrh	r3, [r4, #12]
 8017888:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801788c:	f04f 0100 	mov.w	r1, #0
 8017890:	bf14      	ite	ne
 8017892:	2340      	movne	r3, #64	@ 0x40
 8017894:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017898:	2000      	movs	r0, #0
 801789a:	6031      	str	r1, [r6, #0]
 801789c:	602b      	str	r3, [r5, #0]
 801789e:	b016      	add	sp, #88	@ 0x58
 80178a0:	bd70      	pop	{r4, r5, r6, pc}
 80178a2:	466a      	mov	r2, sp
 80178a4:	f000 f862 	bl	801796c <_fstat_r>
 80178a8:	2800      	cmp	r0, #0
 80178aa:	dbec      	blt.n	8017886 <__swhatbuf_r+0x12>
 80178ac:	9901      	ldr	r1, [sp, #4]
 80178ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80178b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80178b6:	4259      	negs	r1, r3
 80178b8:	4159      	adcs	r1, r3
 80178ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80178be:	e7eb      	b.n	8017898 <__swhatbuf_r+0x24>

080178c0 <__smakebuf_r>:
 80178c0:	898b      	ldrh	r3, [r1, #12]
 80178c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80178c4:	079d      	lsls	r5, r3, #30
 80178c6:	4606      	mov	r6, r0
 80178c8:	460c      	mov	r4, r1
 80178ca:	d507      	bpl.n	80178dc <__smakebuf_r+0x1c>
 80178cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80178d0:	6023      	str	r3, [r4, #0]
 80178d2:	6123      	str	r3, [r4, #16]
 80178d4:	2301      	movs	r3, #1
 80178d6:	6163      	str	r3, [r4, #20]
 80178d8:	b003      	add	sp, #12
 80178da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178dc:	ab01      	add	r3, sp, #4
 80178de:	466a      	mov	r2, sp
 80178e0:	f7ff ffc8 	bl	8017874 <__swhatbuf_r>
 80178e4:	9f00      	ldr	r7, [sp, #0]
 80178e6:	4605      	mov	r5, r0
 80178e8:	4639      	mov	r1, r7
 80178ea:	4630      	mov	r0, r6
 80178ec:	f7fe fe42 	bl	8016574 <_malloc_r>
 80178f0:	b948      	cbnz	r0, 8017906 <__smakebuf_r+0x46>
 80178f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178f6:	059a      	lsls	r2, r3, #22
 80178f8:	d4ee      	bmi.n	80178d8 <__smakebuf_r+0x18>
 80178fa:	f023 0303 	bic.w	r3, r3, #3
 80178fe:	f043 0302 	orr.w	r3, r3, #2
 8017902:	81a3      	strh	r3, [r4, #12]
 8017904:	e7e2      	b.n	80178cc <__smakebuf_r+0xc>
 8017906:	89a3      	ldrh	r3, [r4, #12]
 8017908:	6020      	str	r0, [r4, #0]
 801790a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801790e:	81a3      	strh	r3, [r4, #12]
 8017910:	9b01      	ldr	r3, [sp, #4]
 8017912:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017916:	b15b      	cbz	r3, 8017930 <__smakebuf_r+0x70>
 8017918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801791c:	4630      	mov	r0, r6
 801791e:	f000 f837 	bl	8017990 <_isatty_r>
 8017922:	b128      	cbz	r0, 8017930 <__smakebuf_r+0x70>
 8017924:	89a3      	ldrh	r3, [r4, #12]
 8017926:	f023 0303 	bic.w	r3, r3, #3
 801792a:	f043 0301 	orr.w	r3, r3, #1
 801792e:	81a3      	strh	r3, [r4, #12]
 8017930:	89a3      	ldrh	r3, [r4, #12]
 8017932:	431d      	orrs	r5, r3
 8017934:	81a5      	strh	r5, [r4, #12]
 8017936:	e7cf      	b.n	80178d8 <__smakebuf_r+0x18>

08017938 <memmove>:
 8017938:	4288      	cmp	r0, r1
 801793a:	b510      	push	{r4, lr}
 801793c:	eb01 0402 	add.w	r4, r1, r2
 8017940:	d902      	bls.n	8017948 <memmove+0x10>
 8017942:	4284      	cmp	r4, r0
 8017944:	4623      	mov	r3, r4
 8017946:	d807      	bhi.n	8017958 <memmove+0x20>
 8017948:	1e43      	subs	r3, r0, #1
 801794a:	42a1      	cmp	r1, r4
 801794c:	d008      	beq.n	8017960 <memmove+0x28>
 801794e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017952:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017956:	e7f8      	b.n	801794a <memmove+0x12>
 8017958:	4402      	add	r2, r0
 801795a:	4601      	mov	r1, r0
 801795c:	428a      	cmp	r2, r1
 801795e:	d100      	bne.n	8017962 <memmove+0x2a>
 8017960:	bd10      	pop	{r4, pc}
 8017962:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017966:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801796a:	e7f7      	b.n	801795c <memmove+0x24>

0801796c <_fstat_r>:
 801796c:	b538      	push	{r3, r4, r5, lr}
 801796e:	4d07      	ldr	r5, [pc, #28]	@ (801798c <_fstat_r+0x20>)
 8017970:	2300      	movs	r3, #0
 8017972:	4604      	mov	r4, r0
 8017974:	4608      	mov	r0, r1
 8017976:	4611      	mov	r1, r2
 8017978:	602b      	str	r3, [r5, #0]
 801797a:	f7e9 fcf5 	bl	8001368 <_fstat>
 801797e:	1c43      	adds	r3, r0, #1
 8017980:	d102      	bne.n	8017988 <_fstat_r+0x1c>
 8017982:	682b      	ldr	r3, [r5, #0]
 8017984:	b103      	cbz	r3, 8017988 <_fstat_r+0x1c>
 8017986:	6023      	str	r3, [r4, #0]
 8017988:	bd38      	pop	{r3, r4, r5, pc}
 801798a:	bf00      	nop
 801798c:	240054ac 	.word	0x240054ac

08017990 <_isatty_r>:
 8017990:	b538      	push	{r3, r4, r5, lr}
 8017992:	4d06      	ldr	r5, [pc, #24]	@ (80179ac <_isatty_r+0x1c>)
 8017994:	2300      	movs	r3, #0
 8017996:	4604      	mov	r4, r0
 8017998:	4608      	mov	r0, r1
 801799a:	602b      	str	r3, [r5, #0]
 801799c:	f7e9 fc52 	bl	8001244 <_isatty>
 80179a0:	1c43      	adds	r3, r0, #1
 80179a2:	d102      	bne.n	80179aa <_isatty_r+0x1a>
 80179a4:	682b      	ldr	r3, [r5, #0]
 80179a6:	b103      	cbz	r3, 80179aa <_isatty_r+0x1a>
 80179a8:	6023      	str	r3, [r4, #0]
 80179aa:	bd38      	pop	{r3, r4, r5, pc}
 80179ac:	240054ac 	.word	0x240054ac

080179b0 <_realloc_r>:
 80179b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179b4:	4607      	mov	r7, r0
 80179b6:	4614      	mov	r4, r2
 80179b8:	460d      	mov	r5, r1
 80179ba:	b921      	cbnz	r1, 80179c6 <_realloc_r+0x16>
 80179bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80179c0:	4611      	mov	r1, r2
 80179c2:	f7fe bdd7 	b.w	8016574 <_malloc_r>
 80179c6:	b92a      	cbnz	r2, 80179d4 <_realloc_r+0x24>
 80179c8:	f7ff fa38 	bl	8016e3c <_free_r>
 80179cc:	4625      	mov	r5, r4
 80179ce:	4628      	mov	r0, r5
 80179d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179d4:	f000 f81a 	bl	8017a0c <_malloc_usable_size_r>
 80179d8:	4284      	cmp	r4, r0
 80179da:	4606      	mov	r6, r0
 80179dc:	d802      	bhi.n	80179e4 <_realloc_r+0x34>
 80179de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80179e2:	d8f4      	bhi.n	80179ce <_realloc_r+0x1e>
 80179e4:	4621      	mov	r1, r4
 80179e6:	4638      	mov	r0, r7
 80179e8:	f7fe fdc4 	bl	8016574 <_malloc_r>
 80179ec:	4680      	mov	r8, r0
 80179ee:	b908      	cbnz	r0, 80179f4 <_realloc_r+0x44>
 80179f0:	4645      	mov	r5, r8
 80179f2:	e7ec      	b.n	80179ce <_realloc_r+0x1e>
 80179f4:	42b4      	cmp	r4, r6
 80179f6:	4622      	mov	r2, r4
 80179f8:	4629      	mov	r1, r5
 80179fa:	bf28      	it	cs
 80179fc:	4632      	movcs	r2, r6
 80179fe:	f7ff fa0e 	bl	8016e1e <memcpy>
 8017a02:	4629      	mov	r1, r5
 8017a04:	4638      	mov	r0, r7
 8017a06:	f7ff fa19 	bl	8016e3c <_free_r>
 8017a0a:	e7f1      	b.n	80179f0 <_realloc_r+0x40>

08017a0c <_malloc_usable_size_r>:
 8017a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a10:	1f18      	subs	r0, r3, #4
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	bfbc      	itt	lt
 8017a16:	580b      	ldrlt	r3, [r1, r0]
 8017a18:	18c0      	addlt	r0, r0, r3
 8017a1a:	4770      	bx	lr

08017a1c <_init>:
 8017a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a1e:	bf00      	nop
 8017a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a22:	bc08      	pop	{r3}
 8017a24:	469e      	mov	lr, r3
 8017a26:	4770      	bx	lr

08017a28 <_fini>:
 8017a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a2a:	bf00      	nop
 8017a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a2e:	bc08      	pop	{r3}
 8017a30:	469e      	mov	lr, r3
 8017a32:	4770      	bx	lr
