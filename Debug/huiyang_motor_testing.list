
huiyang_motor_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000177e4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08017a84  08017a84  00018a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017f18  08017f18  00018f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08017f20  08017f20  00018f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  08017f28  08017f28  00018f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  08017f30  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000553c  24000070  08017fa0  00019070  2**2
                  ALLOC
  8 ._user_heap_stack 00006004  240055ac  08017fa0  000195ac  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00019070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038ddb  00000000  00000000  0001909e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006c5b  00000000  00000000  00051e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000023b8  00000000  00000000  00058ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001baa  00000000  00000000  0005ae90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000dd02  00000000  00000000  0005ca3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030dfa  00000000  00000000  0006a73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017ee23  00000000  00000000  0009b536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021a359  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a014  00000000  00000000  0021a39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000056  00000000  00000000  002243b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017a6c 	.word	0x08017a6c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	08017a6c 	.word	0x08017a6c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <_ZL10MPU_Configv>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void MPU_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80006ce:	f003 fc9b 	bl	8004008 <HAL_MPU_Disable>

  /* Configure the MPU attributes for the QSPI 256MB without instruction access */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 80006d2:	2301      	movs	r3, #1
 80006d4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 80006da:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 80006de:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_256MB;
 80006e0:	231b      	movs	r3, #27
 80006e2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80006e4:	2300      	movs	r3, #0
 80006e6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_NOT_BUFFERABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_NOT_CACHEABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_DISABLE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80006fc:	2300      	movs	r3, #0
 80006fe:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000700:	463b      	mov	r3, r7
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fcb8 	bl	8004078 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes for the QSPI 8MB (QSPI Flash Size) to Cacheable WT */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000708:	2301      	movs	r3, #1
 800070a:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER1;
 800070c:	2301      	movs	r3, #1
 800070e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 8000710:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8000714:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_8MB;
 8000716:	2316      	movs	r3, #22
 8000718:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
 800071a:	2305      	movs	r3, #5
 800071c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 800071e:	2301      	movs	r3, #1
 8000720:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 8000722:	2301      	movs	r3, #1
 8000724:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 800072e:	2301      	movs	r3, #1
 8000730:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000732:	2300      	movs	r3, #0
 8000734:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000736:	463b      	mov	r3, r7
 8000738:	4618      	mov	r0, r3
 800073a:	f003 fc9d 	bl	8004078 <HAL_MPU_ConfigRegion>

  /* Setup AXI SRAM in Cacheable WB */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 800073e:	2301      	movs	r3, #1
 8000740:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress      = D1_AXISRAM_BASE;
 8000742:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000746:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_512KB;
 8000748:	2312      	movs	r3, #18
 800074a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800074c:	2303      	movs	r3, #3
 800074e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 8000750:	2301      	movs	r3, #1
 8000752:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 8000754:	2301      	movs	r3, #1
 8000756:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_SHAREABLE;
 8000758:	2301      	movs	r3, #1
 800075a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER2;
 800075c:	2302      	movs	r3, #2
 800075e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 8000760:	2301      	movs	r3, #1
 8000762:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000764:	2300      	movs	r3, #0
 8000766:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	733b      	strb	r3, [r7, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800076c:	463b      	mov	r3, r7
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fc82 	bl	8004078 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000774:	2004      	movs	r0, #4
 8000776:	f003 fc5f 	bl	8004038 <HAL_MPU_Enable>
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <_ZL16CPU_CACHE_Enablev>:

static void CPU_CACHE_Enable(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800078a:	4b3e      	ldr	r3, [pc, #248]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000792:	2b00      	cmp	r3, #0
 8000794:	bf14      	ite	ne
 8000796:	2301      	movne	r3, #1
 8000798:	2300      	moveq	r3, #0
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d11b      	bne.n	80007d8 <_ZL16CPU_CACHE_Enablev+0x54>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007a0:	f3bf 8f4f 	dsb	sy
}
 80007a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007a6:	f3bf 8f6f 	isb	sy
}
 80007aa:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007ac:	4b35      	ldr	r3, [pc, #212]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007b4:	f3bf 8f4f 	dsb	sy
}
 80007b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007ba:	f3bf 8f6f 	isb	sy
}
 80007be:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007c0:	4b30      	ldr	r3, [pc, #192]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	4a2f      	ldr	r2, [pc, #188]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007cc:	f3bf 8f4f 	dsb	sy
}
 80007d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007d2:	f3bf 8f6f 	isb	sy
}
 80007d6:	e000      	b.n	80007da <_ZL16CPU_CACHE_Enablev+0x56>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007d8:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007da:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	bf14      	ite	ne
 80007e6:	2301      	movne	r3, #1
 80007e8:	2300      	moveq	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d142      	bne.n	8000876 <_ZL16CPU_CACHE_Enablev+0xf2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80007f0:	4b24      	ldr	r3, [pc, #144]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007f8:	f3bf 8f4f 	dsb	sy
}
 80007fc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 8000800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000804:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	0b5b      	lsrs	r3, r3, #13
 800080a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800080e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	08db      	lsrs	r3, r3, #3
 8000814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000818:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	015a      	lsls	r2, r3, #5
 800081e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000822:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000828:	4916      	ldr	r1, [pc, #88]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 800082a:	4313      	orrs	r3, r2
 800082c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	1e5a      	subs	r2, r3, #1
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	bf14      	ite	ne
 800083a:	2301      	movne	r3, #1
 800083c:	2300      	moveq	r3, #0
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1ea      	bne.n	800081a <_ZL16CPU_CACHE_Enablev+0x96>
    } while(sets-- != 0U);
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	1e5a      	subs	r2, r3, #1
 8000848:	60ba      	str	r2, [r7, #8]
 800084a:	2b00      	cmp	r3, #0
 800084c:	bf14      	ite	ne
 800084e:	2301      	movne	r3, #1
 8000850:	2300      	moveq	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1db      	bne.n	8000810 <_ZL16CPU_CACHE_Enablev+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000858:	f3bf 8f4f 	dsb	sy
}
 800085c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4a08      	ldr	r2, [pc, #32]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 8000864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000868:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800086a:	f3bf 8f4f 	dsb	sy
}
 800086e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000870:	f3bf 8f6f 	isb	sy
}
 8000874:	e000      	b.n	8000878 <_ZL16CPU_CACHE_Enablev+0xf4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000876:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <_Z9init_filev>:
    "hello word\r\n";
uint16_t file_memory=0;
uint32_t lastWriteTime = 0;     /* 上次写入时间 */
char timeStr[256];               /* 时间字符串缓冲区 */

void init_file(){
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  // mount SD card
  f_res = f_mount(&fs, "0:", 1);
 800088c:	2201      	movs	r2, #1
 800088e:	491e      	ldr	r1, [pc, #120]	@ (8000908 <_Z9init_filev+0x80>)
 8000890:	481e      	ldr	r0, [pc, #120]	@ (800090c <_Z9init_filev+0x84>)
 8000892:	f010 fa9d 	bl	8010dd0 <f_mount>
 8000896:	4603      	mov	r3, r0
 8000898:	461a      	mov	r2, r3
 800089a:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <_Z9init_filev+0x88>)
 800089c:	701a      	strb	r2, [r3, #0]
	if(f_res != FR_OK){
 800089e:	4b1c      	ldr	r3, [pc, #112]	@ (8000910 <_Z9init_filev+0x88>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d006      	beq.n	80008b4 <_Z9init_filev+0x2c>
    printf("f_mount error: %d\r\n", f_res);
 80008a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <_Z9init_filev+0x88>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	4619      	mov	r1, r3
 80008ac:	4819      	ldr	r0, [pc, #100]	@ (8000914 <_Z9init_filev+0x8c>)
 80008ae:	f015 ffd7 	bl	8016860 <iprintf>
    return;
 80008b2:	e027      	b.n	8000904 <_Z9init_filev+0x7c>
  }
	printf("sd mount ok\r\n");
 80008b4:	4818      	ldr	r0, [pc, #96]	@ (8000918 <_Z9init_filev+0x90>)
 80008b6:	f016 f83b 	bl	8016930 <puts>

  // open or create file
	f_res = f_open(&file, "testing.csv", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 80008ba:	2213      	movs	r2, #19
 80008bc:	4917      	ldr	r1, [pc, #92]	@ (800091c <_Z9init_filev+0x94>)
 80008be:	4818      	ldr	r0, [pc, #96]	@ (8000920 <_Z9init_filev+0x98>)
 80008c0:	f010 faea 	bl	8010e98 <f_open>
 80008c4:	4603      	mov	r3, r0
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <_Z9init_filev+0x88>)
 80008ca:	701a      	strb	r2, [r3, #0]
	if(f_res != FR_OK){
 80008cc:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <_Z9init_filev+0x88>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d006      	beq.n	80008e2 <_Z9init_filev+0x5a>
    printf("f_open error: %d\r\n", f_res);
 80008d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <_Z9init_filev+0x88>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	4812      	ldr	r0, [pc, #72]	@ (8000924 <_Z9init_filev+0x9c>)
 80008dc:	f015 ffc0 	bl	8016860 <iprintf>
    return;
 80008e0:	e010      	b.n	8000904 <_Z9init_filev+0x7c>
  }
  printf("testing.csv open ok\r\n");
 80008e2:	4811      	ldr	r0, [pc, #68]	@ (8000928 <_Z9init_filev+0xa0>)
 80008e4:	f016 f824 	bl	8016930 <puts>
  f_lseek(&file, f_size(&file));
 80008e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <_Z9init_filev+0x98>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	4619      	mov	r1, r3
 80008ee:	480c      	ldr	r0, [pc, #48]	@ (8000920 <_Z9init_filev+0x98>)
 80008f0:	f010 fec0 	bl	8011674 <f_lseek>
  if(f_size(&file) == 0) {
 80008f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <_Z9init_filev+0x98>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d103      	bne.n	8000904 <_Z9init_filev+0x7c>
    f_printf(&file, "Time(hh:mm:ss:msms)\r\n");
 80008fc:	490b      	ldr	r1, [pc, #44]	@ (800092c <_Z9init_filev+0xa4>)
 80008fe:	4808      	ldr	r0, [pc, #32]	@ (8000920 <_Z9init_filev+0x98>)
 8000900:	f011 f982 	bl	8011c08 <f_printf>
  }
}
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	08017a98 	.word	0x08017a98
 800090c:	24000284 	.word	0x24000284
 8000910:	240006e8 	.word	0x240006e8
 8000914:	08017a9c 	.word	0x08017a9c
 8000918:	08017ab0 	.word	0x08017ab0
 800091c:	08017ac0 	.word	0x08017ac0
 8000920:	240004b8 	.word	0x240004b8
 8000924:	08017acc 	.word	0x08017acc
 8000928:	08017ae0 	.word	0x08017ae0
 800092c:	08017af8 	.word	0x08017af8

08000930 <_ZNK21ModbusAbsoluteEncoder13isInitializedEv>:
    explicit ModbusAbsoluteEncoder(TIM_HandleTypeDef *htim = nullptr, uint8_t unit_id = 1);
    virtual ~ModbusAbsoluteEncoder() = default;
    // Initialization
    void init();

    bool isInitialized() const{return encoder_initialized;};
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <_Z19angleUpdateCallbackm>:

Encoder485 encoder485(&htim3, 1, &huart2);
EventGroupHandle_t encoderEventGroup = NULL; // 事件组用于编码器任务同步
#define ENCODER_TICK_EVENT_BIT (1 << 0)
uint32_t oid_encoder = 0;
void angleUpdateCallback(uint32_t position){
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  oid_encoder = position;
 8000954:	4a04      	ldr	r2, [pc, #16]	@ (8000968 <_Z19angleUpdateCallbackm+0x1c>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6013      	str	r3, [r2, #0]
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	240009b4 	.word	0x240009b4

0800096c <_ZL8init_keyv>:
} KEY_State_TypeDef;

static KEY_State_TypeDef keyState = {0};

static void init_key(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <_ZL8init_keyv+0x54>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000978:	4a11      	ldr	r2, [pc, #68]	@ (80009c0 <_ZL8init_keyv+0x54>)
 800097a:	f043 0304 	orr.w	r3, r3, #4
 800097e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000982:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <_ZL8init_keyv+0x54>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800099e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009a8:	2302      	movs	r3, #2
 80009aa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	4619      	mov	r1, r3
 80009b0:	4804      	ldr	r0, [pc, #16]	@ (80009c4 <_ZL8init_keyv+0x58>)
 80009b2:	f004 f909 	bl	8004bc8 <HAL_GPIO_Init>
}
 80009b6:	bf00      	nop
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	58024400 	.word	0x58024400
 80009c4:	58020800 	.word	0x58020800

080009c8 <_ZL8scan_keyv>:

// 按键消抖检测
static void scan_key(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
    keyState.current = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80009cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d0:	481c      	ldr	r0, [pc, #112]	@ (8000a44 <_ZL8scan_keyv+0x7c>)
 80009d2:	f004 faa9 	bl	8004f28 <HAL_GPIO_ReadPin>
 80009d6:	4603      	mov	r3, r0
 80009d8:	461a      	mov	r2, r3
 80009da:	4b1b      	ldr	r3, [pc, #108]	@ (8000a48 <_ZL8scan_keyv+0x80>)
 80009dc:	701a      	strb	r2, [r3, #0]
    
    if(keyState.current != keyState.last)
 80009de:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <_ZL8scan_keyv+0x80>)
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <_ZL8scan_keyv+0x80>)
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d004      	beq.n	80009f4 <_ZL8scan_keyv+0x2c>
    {
        keyState.debounceTime = osKernelGetTickCount();
 80009ea:	f011 fc7d 	bl	80122e8 <osKernelGetTickCount>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4a15      	ldr	r2, [pc, #84]	@ (8000a48 <_ZL8scan_keyv+0x80>)
 80009f2:	6053      	str	r3, [r2, #4]
    }
    
    if(osKernelGetTickCount() - keyState.debounceTime >= 20)  // 20ms消抖
 80009f4:	f011 fc78 	bl	80122e8 <osKernelGetTickCount>
 80009f8:	4602      	mov	r2, r0
 80009fa:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <_ZL8scan_keyv+0x80>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	2b13      	cmp	r3, #19
 8000a02:	bf8c      	ite	hi
 8000a04:	2301      	movhi	r3, #1
 8000a06:	2300      	movls	r3, #0
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d013      	beq.n	8000a36 <_ZL8scan_keyv+0x6e>
    {
        if(keyState.current != keyState.debounceState)
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <_ZL8scan_keyv+0x80>)
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <_ZL8scan_keyv+0x80>)
 8000a14:	789b      	ldrb	r3, [r3, #2]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d00d      	beq.n	8000a36 <_ZL8scan_keyv+0x6e>
        {
            if(keyState.current == GPIO_PIN_SET)  // 按键按下（高电平有效）
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <_ZL8scan_keyv+0x80>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d105      	bne.n	8000a2e <_ZL8scan_keyv+0x66>
            {
                keyState.pressed = 1;
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <_ZL8scan_keyv+0x80>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	721a      	strb	r2, [r3, #8]
                printf("Button Pressed!\r\n");
 8000a28:	4808      	ldr	r0, [pc, #32]	@ (8000a4c <_ZL8scan_keyv+0x84>)
 8000a2a:	f015 ff81 	bl	8016930 <puts>
            }
            keyState.debounceState = keyState.current;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <_ZL8scan_keyv+0x80>)
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <_ZL8scan_keyv+0x80>)
 8000a34:	709a      	strb	r2, [r3, #2]
        }
    }
    
    keyState.last = keyState.current;
 8000a36:	4b04      	ldr	r3, [pc, #16]	@ (8000a48 <_ZL8scan_keyv+0x80>)
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	4b03      	ldr	r3, [pc, #12]	@ (8000a48 <_ZL8scan_keyv+0x80>)
 8000a3c:	705a      	strb	r2, [r3, #1]
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	58020800 	.word	0x58020800
 8000a48:	240009b8 	.word	0x240009b8
 8000a4c:	08017b10 	.word	0x08017b10

08000a50 <_Z16StartDefaultTaskPv>:

void StartDefaultTask(void *argument)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08e      	sub	sp, #56	@ 0x38
 8000a54:	af04      	add	r7, sp, #16
 8000a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

#ifdef USE_SD_LOG
  MX_FATFS_Init();
 8000a58:	f00e fa24 	bl	800eea4 <MX_FATFS_Init>
  init_file();
 8000a5c:	f7ff ff14 	bl	8000888 <_Z9init_filev>
#endif

#ifdef USE_MOBUSRTU_ENCODER
  encoder485.setAngleUpdateCallback(angleUpdateCallback);
 8000a60:	4959      	ldr	r1, [pc, #356]	@ (8000bc8 <_Z16StartDefaultTaskPv+0x178>)
 8000a62:	485a      	ldr	r0, [pc, #360]	@ (8000bcc <_Z16StartDefaultTaskPv+0x17c>)
 8000a64:	f002 ff3a 	bl	80038dc <_ZN21ModbusAbsoluteEncoder22setAngleUpdateCallbackEPFvmE>
  // 初始化编码器
  while(!encoder485.isInitialized()){
 8000a68:	e012      	b.n	8000a90 <_Z16StartDefaultTaskPv+0x40>
    encoder485.init();
 8000a6a:	4858      	ldr	r0, [pc, #352]	@ (8000bcc <_Z16StartDefaultTaskPv+0x17c>)
 8000a6c:	f001 f822 	bl	8001ab4 <_ZN10Encoder4854initEv>
    if(!encoder485.isInitialized()){
 8000a70:	4856      	ldr	r0, [pc, #344]	@ (8000bcc <_Z16StartDefaultTaskPv+0x17c>)
 8000a72:	f7ff ff5d 	bl	8000930 <_ZNK21ModbusAbsoluteEncoder13isInitializedEv>
 8000a76:	4603      	mov	r3, r0
 8000a78:	f083 0301 	eor.w	r3, r3, #1
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d006      	beq.n	8000a90 <_Z16StartDefaultTaskPv+0x40>
      printf("Encoder initialization failed, retrying in 10s...");
 8000a82:	4853      	ldr	r0, [pc, #332]	@ (8000bd0 <_Z16StartDefaultTaskPv+0x180>)
 8000a84:	f015 feec 	bl	8016860 <iprintf>
      osDelay(10000);
 8000a88:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000a8c:	f011 fcde 	bl	801244c <osDelay>
  while(!encoder485.isInitialized()){
 8000a90:	484e      	ldr	r0, [pc, #312]	@ (8000bcc <_Z16StartDefaultTaskPv+0x17c>)
 8000a92:	f7ff ff4d 	bl	8000930 <_ZNK21ModbusAbsoluteEncoder13isInitializedEv>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f083 0301 	eor.w	r3, r3, #1
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1e3      	bne.n	8000a6a <_Z16StartDefaultTaskPv+0x1a>
    }
  }
  // 创建事件组（若尚未创建）
  if(encoderEventGroup == NULL){
 8000aa2:	4b4c      	ldr	r3, [pc, #304]	@ (8000bd4 <_Z16StartDefaultTaskPv+0x184>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d104      	bne.n	8000ab4 <_Z16StartDefaultTaskPv+0x64>
      encoderEventGroup = xEventGroupCreate();
 8000aaa:	f011 ff93 	bl	80129d4 <xEventGroupCreate>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4a48      	ldr	r2, [pc, #288]	@ (8000bd4 <_Z16StartDefaultTaskPv+0x184>)
 8000ab2:	6013      	str	r3, [r2, #0]
  }
  // 400-->53Hz;250-->53Hz;60-->30Hz;10-->5Hz;
  encoder485.startAsyncReading(10);
 8000ab4:	210a      	movs	r1, #10
 8000ab6:	4845      	ldr	r0, [pc, #276]	@ (8000bcc <_Z16StartDefaultTaskPv+0x17c>)
 8000ab8:	f002 fda6 	bl	8003608 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm>
  printf("Encoder task ready, waiting for TIM3 notifications...\r\n");
 8000abc:	4846      	ldr	r0, [pc, #280]	@ (8000bd8 <_Z16StartDefaultTaskPv+0x188>)
 8000abe:	f015 ff37 	bl	8016930 <puts>
#endif

  printf("Default task started...\r\n");
 8000ac2:	4846      	ldr	r0, [pc, #280]	@ (8000bdc <_Z16StartDefaultTaskPv+0x18c>)
 8000ac4:	f015 ff34 	bl	8016930 <puts>

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f011 fcbf 	bl	801244c <osDelay>
    uint32_t currentTime = osKernelGetTickCount();
 8000ace:	f011 fc0b 	bl	80122e8 <osKernelGetTickCount>
 8000ad2:	6278      	str	r0, [r7, #36]	@ 0x24

#ifdef USE_HEARTBEAT_LED
   static uint32_t led_flash_time = 0;
   if(currentTime - led_flash_time >= 1000)
 8000ad4:	4b42      	ldr	r3, [pc, #264]	@ (8000be0 <_Z16StartDefaultTaskPv+0x190>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ae0:	d306      	bcc.n	8000af0 <_Z16StartDefaultTaskPv+0xa0>
   {
	  HAL_GPIO_TogglePin(PE3_GPIO_Port,PE3_Pin);
 8000ae2:	2108      	movs	r1, #8
 8000ae4:	483f      	ldr	r0, [pc, #252]	@ (8000be4 <_Z16StartDefaultTaskPv+0x194>)
 8000ae6:	f004 fa50 	bl	8004f8a <HAL_GPIO_TogglePin>
      led_flash_time = currentTime;
 8000aea:	4a3d      	ldr	r2, [pc, #244]	@ (8000be0 <_Z16StartDefaultTaskPv+0x190>)
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	6013      	str	r3, [r2, #0]
   }
#endif

#ifdef USE_MOBUSRTU_ENCODER
    xEventGroupWaitBits(encoderEventGroup, ENCODER_TICK_EVENT_BIT, pdTRUE, pdFALSE, portMAX_DELAY);
 8000af0:	4b38      	ldr	r3, [pc, #224]	@ (8000bd4 <_Z16StartDefaultTaskPv+0x184>)
 8000af2:	6818      	ldr	r0, [r3, #0]
 8000af4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2300      	movs	r3, #0
 8000afc:	2201      	movs	r2, #1
 8000afe:	2101      	movs	r1, #1
 8000b00:	f011 ff82 	bl	8012a08 <xEventGroupWaitBits>
    encoder485.asyncUpdateCallback();
 8000b04:	4831      	ldr	r0, [pc, #196]	@ (8000bcc <_Z16StartDefaultTaskPv+0x17c>)
 8000b06:	f002 fe67 	bl	80037d8 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv>
    
#ifdef USE_SD_LOG
  //  static uint32_t log_write_time = 0;
  //  if(currentTime - log_write_time >= 6000)
  //  {
     uint32_t totalMs = currentTime;
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0c:	623b      	str	r3, [r7, #32]
     uint32_t ms = totalMs % 1000;
 8000b0e:	6a3b      	ldr	r3, [r7, #32]
 8000b10:	4a35      	ldr	r2, [pc, #212]	@ (8000be8 <_Z16StartDefaultTaskPv+0x198>)
 8000b12:	fba2 1203 	umull	r1, r2, r2, r3
 8000b16:	0992      	lsrs	r2, r2, #6
 8000b18:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b1c:	fb01 f202 	mul.w	r2, r1, r2
 8000b20:	1a9b      	subs	r3, r3, r2
 8000b22:	61fb      	str	r3, [r7, #28]
     uint32_t totalSec = totalMs / 1000;
 8000b24:	6a3b      	ldr	r3, [r7, #32]
 8000b26:	4a30      	ldr	r2, [pc, #192]	@ (8000be8 <_Z16StartDefaultTaskPv+0x198>)
 8000b28:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2c:	099b      	lsrs	r3, r3, #6
 8000b2e:	61bb      	str	r3, [r7, #24]
     uint32_t sec = totalSec % 60;
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	4b2e      	ldr	r3, [pc, #184]	@ (8000bec <_Z16StartDefaultTaskPv+0x19c>)
 8000b34:	fba3 1302 	umull	r1, r3, r3, r2
 8000b38:	0959      	lsrs	r1, r3, #5
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	011b      	lsls	r3, r3, #4
 8000b3e:	1a5b      	subs	r3, r3, r1
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	617b      	str	r3, [r7, #20]
     uint32_t totalMin = totalSec / 60;
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	4a28      	ldr	r2, [pc, #160]	@ (8000bec <_Z16StartDefaultTaskPv+0x19c>)
 8000b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b4e:	095b      	lsrs	r3, r3, #5
 8000b50:	613b      	str	r3, [r7, #16]
     uint32_t min = totalMin % 60;
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4b25      	ldr	r3, [pc, #148]	@ (8000bec <_Z16StartDefaultTaskPv+0x19c>)
 8000b56:	fba3 1302 	umull	r1, r3, r3, r2
 8000b5a:	0959      	lsrs	r1, r3, #5
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	011b      	lsls	r3, r3, #4
 8000b60:	1a5b      	subs	r3, r3, r1
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	60fb      	str	r3, [r7, #12]
     uint32_t hour = totalMin / 60;
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	4a20      	ldr	r2, [pc, #128]	@ (8000bec <_Z16StartDefaultTaskPv+0x19c>)
 8000b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b70:	095b      	lsrs	r3, r3, #5
 8000b72:	60bb      	str	r3, [r7, #8]
     sprintf(timeStr, "%02lu:%02lu:%02lu:%03lu,%lu\r\n", hour, min, sec, ms,oid_encoder);
 8000b74:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf0 <_Z16StartDefaultTaskPv+0x1a0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	9302      	str	r3, [sp, #8]
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	68ba      	ldr	r2, [r7, #8]
 8000b86:	491b      	ldr	r1, [pc, #108]	@ (8000bf4 <_Z16StartDefaultTaskPv+0x1a4>)
 8000b88:	481b      	ldr	r0, [pc, #108]	@ (8000bf8 <_Z16StartDefaultTaskPv+0x1a8>)
 8000b8a:	f015 ff8d 	bl	8016aa8 <siprintf>
     if(f_write(&file, timeStr, strlen(timeStr), &fnum) == FR_OK){
 8000b8e:	481a      	ldr	r0, [pc, #104]	@ (8000bf8 <_Z16StartDefaultTaskPv+0x1a8>)
 8000b90:	f7ff fba6 	bl	80002e0 <strlen>
 8000b94:	4602      	mov	r2, r0
 8000b96:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <_Z16StartDefaultTaskPv+0x1ac>)
 8000b98:	4917      	ldr	r1, [pc, #92]	@ (8000bf8 <_Z16StartDefaultTaskPv+0x1a8>)
 8000b9a:	4819      	ldr	r0, [pc, #100]	@ (8000c00 <_Z16StartDefaultTaskPv+0x1b0>)
 8000b9c:	f010 fb3d 	bl	801121a <f_write>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	bf0c      	ite	eq
 8000ba6:	2301      	moveq	r3, #1
 8000ba8:	2300      	movne	r3, #0
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d007      	beq.n	8000bc0 <_Z16StartDefaultTaskPv+0x170>
       f_sync(&file);
 8000bb0:	4813      	ldr	r0, [pc, #76]	@ (8000c00 <_Z16StartDefaultTaskPv+0x1b0>)
 8000bb2:	f010 fcd6 	bl	8011562 <f_sync>
       printf("write: %s", timeStr);
 8000bb6:	4910      	ldr	r1, [pc, #64]	@ (8000bf8 <_Z16StartDefaultTaskPv+0x1a8>)
 8000bb8:	4812      	ldr	r0, [pc, #72]	@ (8000c04 <_Z16StartDefaultTaskPv+0x1b4>)
 8000bba:	f015 fe51 	bl	8016860 <iprintf>
 8000bbe:	e783      	b.n	8000ac8 <_Z16StartDefaultTaskPv+0x78>
     }
     else
     {
       printf("write failed\r\n");
 8000bc0:	4811      	ldr	r0, [pc, #68]	@ (8000c08 <_Z16StartDefaultTaskPv+0x1b8>)
 8000bc2:	f015 feb5 	bl	8016930 <puts>
#ifdef ENABLE_STACK_WATERMARK
   // 获取并打印任务栈最小剩余空间
   UBaseType_t stackHighWaterMark = uxTaskGetStackHighWaterMark(NULL);
   printf("StartDefaultTask Stack Bytes Left: %lu\r\n", stackHighWaterMark * sizeof(StackType_t));
#endif
  }
 8000bc6:	e77f      	b.n	8000ac8 <_Z16StartDefaultTaskPv+0x78>
 8000bc8:	0800094d 	.word	0x0800094d
 8000bcc:	240007f0 	.word	0x240007f0
 8000bd0:	08017b24 	.word	0x08017b24
 8000bd4:	240009b0 	.word	0x240009b0
 8000bd8:	08017b58 	.word	0x08017b58
 8000bdc:	08017b90 	.word	0x08017b90
 8000be0:	240009c4 	.word	0x240009c4
 8000be4:	58021000 	.word	0x58021000
 8000be8:	10624dd3 	.word	0x10624dd3
 8000bec:	88888889 	.word	0x88888889
 8000bf0:	240009b4 	.word	0x240009b4
 8000bf4:	08017bac 	.word	0x08017bac
 8000bf8:	240006f0 	.word	0x240006f0
 8000bfc:	240006ec 	.word	0x240006ec
 8000c00:	240004b8 	.word	0x240004b8
 8000c04:	08017bcc 	.word	0x08017bcc
 8000c08:	08017bd8 	.word	0x08017bd8

08000c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	#ifdef W25Qxx
	  SCB->VTOR = QSPI_BASE;
		#endif
	MPU_Config();
 8000c10:	f7ff fd54 	bl	80006bc <_ZL10MPU_Configv>
	CPU_CACHE_Enable();
 8000c14:	f7ff fdb6 	bl	8000784 <_ZL16CPU_CACHE_Enablev>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c18:	f003 f88a 	bl	8003d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1c:	f000 f834 	bl	8000c88 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c20:	f000 f8bc 	bl	8000d9c <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c24:	f000 fa36 	bl	8001094 <_ZL12MX_GPIO_Initv>
  MX_SDMMC1_SD_Init();
 8000c28:	f000 f8f0 	bl	8000e0c <_ZL17MX_SDMMC1_SD_Initv>
  MX_USART2_UART_Init();
 8000c2c:	f000 f972 	bl	8000f14 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 8000c30:	f000 f9d0 	bl	8000fd4 <_ZL19MX_USART3_UART_Initv>
  MX_TIM3_Init();
 8000c34:	f000 f908 	bl	8000e48 <_ZL12MX_TIM3_Initv>
  // MX_FATFS_Init();
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 8000c38:	480c      	ldr	r0, [pc, #48]	@ (8000c6c <main+0x60>)
 8000c3a:	f000 fb2f 	bl	800129c <RetargetInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c3e:	f011 fae7 	bl	8012210 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c42:	4a0b      	ldr	r2, [pc, #44]	@ (8000c70 <main+0x64>)
 8000c44:	2100      	movs	r1, #0
 8000c46:	480b      	ldr	r0, [pc, #44]	@ (8000c74 <main+0x68>)
 8000c48:	f011 fb63 	bl	8012312 <osThreadNew>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <main+0x6c>)
 8000c50:	6013      	str	r3, [r2, #0]
  /* creation of keyTask */
  keyTaskHandle = osThreadNew(StartKeyTask, NULL, &keyTask_attributes);
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <main+0x70>)
 8000c54:	2100      	movs	r1, #0
 8000c56:	480a      	ldr	r0, [pc, #40]	@ (8000c80 <main+0x74>)
 8000c58:	f011 fb5b 	bl	8012312 <osThreadNew>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	4a09      	ldr	r2, [pc, #36]	@ (8000c84 <main+0x78>)
 8000c60:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c62:	f011 fb1b 	bl	801229c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c66:	bf00      	nop
 8000c68:	e7fd      	b.n	8000c66 <main+0x5a>
 8000c6a:	bf00      	nop
 8000c6c:	240001e8 	.word	0x240001e8
 8000c70:	08017cbc 	.word	0x08017cbc
 8000c74:	08000a51 	.word	0x08000a51
 8000c78:	2400027c 	.word	0x2400027c
 8000c7c:	08017ce0 	.word	0x08017ce0
 8000c80:	08001181 	.word	0x08001181
 8000c84:	24000280 	.word	0x24000280

08000c88 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b09c      	sub	sp, #112	@ 0x70
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c92:	224c      	movs	r2, #76	@ 0x4c
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f016 f800 	bl	8016c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2220      	movs	r2, #32
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f015 fffa 	bl	8016c9c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ca8:	2002      	movs	r0, #2
 8000caa:	f004 f989 	bl	8004fc0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b38      	ldr	r3, [pc, #224]	@ (8000d94 <_Z18SystemClock_Configv+0x10c>)
 8000cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb6:	4a37      	ldr	r2, [pc, #220]	@ (8000d94 <_Z18SystemClock_Configv+0x10c>)
 8000cb8:	f023 0301 	bic.w	r3, r3, #1
 8000cbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000cbe:	4b35      	ldr	r3, [pc, #212]	@ (8000d94 <_Z18SystemClock_Configv+0x10c>)
 8000cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	4b33      	ldr	r3, [pc, #204]	@ (8000d98 <_Z18SystemClock_Configv+0x110>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000cd0:	4a31      	ldr	r2, [pc, #196]	@ (8000d98 <_Z18SystemClock_Configv+0x110>)
 8000cd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8000d98 <_Z18SystemClock_Configv+0x110>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce4:	bf00      	nop
 8000ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d98 <_Z18SystemClock_Configv+0x110>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cf2:	bf14      	ite	ne
 8000cf4:	2301      	movne	r3, #1
 8000cf6:	2300      	moveq	r3, #0
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f3      	bne.n	8000ce6 <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000d10:	2305      	movs	r3, #5
 8000d12:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000d14:	2360      	movs	r3, #96	@ 0x60
 8000d16:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8000d1c:	230a      	movs	r3, #10
 8000d1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d24:	2308      	movs	r3, #8
 8000d26:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d34:	4618      	mov	r0, r3
 8000d36:	f004 f97d 	bl	8005034 <HAL_RCC_OscConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bf14      	ite	ne
 8000d40:	2301      	movne	r3, #1
 8000d42:	2300      	moveq	r3, #0
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 8000d4a:	f000 fa39 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4e:	233f      	movs	r3, #63	@ 0x3f
 8000d50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d52:	2303      	movs	r3, #3
 8000d54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d5a:	2308      	movs	r3, #8
 8000d5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2102      	movs	r1, #2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f004 fdb8 	bl	80058e8 <HAL_RCC_ClockConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	bf14      	ite	ne
 8000d7e:	2301      	movne	r3, #1
 8000d80:	2300      	moveq	r3, #0
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000d88:	f000 fa1a 	bl	80011c0 <Error_Handler>
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	3770      	adds	r7, #112	@ 0x70
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58000400 	.word	0x58000400
 8000d98:	58024800 	.word	0x58024800

08000d9c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0b0      	sub	sp, #192	@ 0xc0
 8000da0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da2:	463b      	mov	r3, r7
 8000da4:	22c0      	movs	r2, #192	@ 0xc0
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f015 ff77 	bl	8016c9c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USART2
 8000dae:	4a16      	ldr	r2, [pc, #88]	@ (8000e08 <_Z24PeriphCommonClock_Configv+0x6c>)
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000db8:	2302      	movs	r3, #2
 8000dba:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000dbc:	230c      	movs	r3, #12
 8000dbe:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000dcc:	23c0      	movs	r3, #192	@ 0xc0
 8000dce:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000dd0:	2320      	movs	r3, #32
 8000dd2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000dd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ddc:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000dde:	2301      	movs	r3, #1
 8000de0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de2:	463b      	mov	r3, r7
 8000de4:	4618      	mov	r0, r3
 8000de6:	f005 f94d 	bl	8006084 <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	bf14      	ite	ne
 8000df0:	2301      	movne	r3, #1
 8000df2:	2300      	moveq	r3, #0
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <_Z24PeriphCommonClock_Configv+0x62>
  {
    Error_Handler();
 8000dfa:	f000 f9e1 	bl	80011c0 <Error_Handler>
  }
}
 8000dfe:	bf00      	nop
 8000e00:	37c0      	adds	r7, #192	@ 0xc0
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	00010002 	.word	0x00010002

08000e0c <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e10:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000e12:	4a0c      	ldr	r2, [pc, #48]	@ (8000e44 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8000e14:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e16:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000e22:	4b07      	ldr	r3, [pc, #28]	@ (8000e40 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000e24:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e28:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e2a:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000e30:	4b03      	ldr	r3, [pc, #12]	@ (8000e40 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	2400008c 	.word	0x2400008c
 8000e44:	52007000 	.word	0x52007000

08000e48 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	@ 0x28
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
 8000e68:	615a      	str	r2, [r3, #20]
 8000e6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e6c:	4b27      	ldr	r3, [pc, #156]	@ (8000f0c <_ZL12MX_TIM3_Initv+0xc4>)
 8000e6e:	4a28      	ldr	r2, [pc, #160]	@ (8000f10 <_ZL12MX_TIM3_Initv+0xc8>)
 8000e70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2399;
 8000e72:	4b26      	ldr	r3, [pc, #152]	@ (8000f0c <_ZL12MX_TIM3_Initv+0xc4>)
 8000e74:	f640 125f 	movw	r2, #2399	@ 0x95f
 8000e78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7a:	4b24      	ldr	r3, [pc, #144]	@ (8000f0c <_ZL12MX_TIM3_Initv+0xc4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000e80:	4b22      	ldr	r3, [pc, #136]	@ (8000f0c <_ZL12MX_TIM3_Initv+0xc4>)
 8000e82:	2263      	movs	r2, #99	@ 0x63
 8000e84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e86:	4b21      	ldr	r3, [pc, #132]	@ (8000f0c <_ZL12MX_TIM3_Initv+0xc4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f0c <_ZL12MX_TIM3_Initv+0xc4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000e92:	481e      	ldr	r0, [pc, #120]	@ (8000f0c <_ZL12MX_TIM3_Initv+0xc4>)
 8000e94:	f009 fb32 	bl	800a4fc <HAL_TIM_OC_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bf14      	ite	ne
 8000e9e:	2301      	movne	r3, #1
 8000ea0:	2300      	moveq	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <_ZL12MX_TIM3_Initv+0x64>
  {
    Error_Handler();
 8000ea8:	f000 f98a 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4814      	ldr	r0, [pc, #80]	@ (8000f0c <_ZL12MX_TIM3_Initv+0xc4>)
 8000ebc:	f00a f8a6 	bl	800b00c <HAL_TIMEx_MasterConfigSynchronization>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	bf14      	ite	ne
 8000ec6:	2301      	movne	r3, #1
 8000ec8:	2300      	moveq	r3, #0
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <_ZL12MX_TIM3_Initv+0x8c>
  {
    Error_Handler();
 8000ed0:	f000 f976 	bl	80011c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4808      	ldr	r0, [pc, #32]	@ (8000f0c <_ZL12MX_TIM3_Initv+0xc4>)
 8000eec:	f009 fc7c 	bl	800a7e8 <HAL_TIM_OC_ConfigChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	bf14      	ite	ne
 8000ef6:	2301      	movne	r3, #1
 8000ef8:	2300      	moveq	r3, #0
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <_ZL12MX_TIM3_Initv+0xbc>
  {
    Error_Handler();
 8000f00:	f000 f95e 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	3728      	adds	r7, #40	@ 0x28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	24000108 	.word	0x24000108
 8000f10:	40000400 	.word	0x40000400

08000f14 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f18:	4b2c      	ldr	r3, [pc, #176]	@ (8000fcc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f1a:	4a2d      	ldr	r2, [pc, #180]	@ (8000fd0 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fcc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f20:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b29      	ldr	r3, [pc, #164]	@ (8000fcc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b27      	ldr	r3, [pc, #156]	@ (8000fcc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b26      	ldr	r3, [pc, #152]	@ (8000fcc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b24      	ldr	r3, [pc, #144]	@ (8000fcc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b23      	ldr	r3, [pc, #140]	@ (8000fcc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b21      	ldr	r3, [pc, #132]	@ (8000fcc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4a:	4b20      	ldr	r3, [pc, #128]	@ (8000fcc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f50:	4b1e      	ldr	r3, [pc, #120]	@ (8000fcc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f56:	4b1d      	ldr	r3, [pc, #116]	@ (8000fcc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f5c:	481b      	ldr	r0, [pc, #108]	@ (8000fcc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f5e:	f00a f901 	bl	800b164 <HAL_UART_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	bf14      	ite	ne
 8000f68:	2301      	movne	r3, #1
 8000f6a:	2300      	moveq	r3, #0
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8000f72:	f000 f925 	bl	80011c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f76:	2100      	movs	r1, #0
 8000f78:	4814      	ldr	r0, [pc, #80]	@ (8000fcc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f7a:	f00d f8fe 	bl	800e17a <HAL_UARTEx_SetTxFifoThreshold>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	bf14      	ite	ne
 8000f84:	2301      	movne	r3, #1
 8000f86:	2300      	moveq	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8000f8e:	f000 f917 	bl	80011c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f92:	2100      	movs	r1, #0
 8000f94:	480d      	ldr	r0, [pc, #52]	@ (8000fcc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f96:	f00d f92e 	bl	800e1f6 <HAL_UARTEx_SetRxFifoThreshold>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	bf14      	ite	ne
 8000fa0:	2301      	movne	r3, #1
 8000fa2:	2300      	moveq	r3, #0
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8000faa:	f000 f909 	bl	80011c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000fae:	4807      	ldr	r0, [pc, #28]	@ (8000fcc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000fb0:	f00d f8aa 	bl	800e108 <HAL_UARTEx_DisableFifoMode>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bf14      	ite	ne
 8000fba:	2301      	movne	r3, #1
 8000fbc:	2300      	moveq	r3, #0
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8000fc4:	f000 f8fc 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	24000154 	.word	0x24000154
 8000fd0:	40004400 	.word	0x40004400

08000fd4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800108c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fda:	4a2d      	ldr	r2, [pc, #180]	@ (8001090 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000fdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fde:	4b2b      	ldr	r3, [pc, #172]	@ (800108c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fe0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fe4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	4b29      	ldr	r3, [pc, #164]	@ (800108c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fec:	4b27      	ldr	r3, [pc, #156]	@ (800108c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ff2:	4b26      	ldr	r3, [pc, #152]	@ (800108c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ff8:	4b24      	ldr	r3, [pc, #144]	@ (800108c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffe:	4b23      	ldr	r3, [pc, #140]	@ (800108c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001004:	4b21      	ldr	r3, [pc, #132]	@ (800108c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800100a:	4b20      	ldr	r3, [pc, #128]	@ (800108c <_ZL19MX_USART3_UART_Initv+0xb8>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001010:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001012:	2200      	movs	r2, #0
 8001014:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001016:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001018:	2200      	movs	r2, #0
 800101a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800101c:	481b      	ldr	r0, [pc, #108]	@ (800108c <_ZL19MX_USART3_UART_Initv+0xb8>)
 800101e:	f00a f8a1 	bl	800b164 <HAL_UART_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	bf14      	ite	ne
 8001028:	2301      	movne	r3, #1
 800102a:	2300      	moveq	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8001032:	f000 f8c5 	bl	80011c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001036:	2100      	movs	r1, #0
 8001038:	4814      	ldr	r0, [pc, #80]	@ (800108c <_ZL19MX_USART3_UART_Initv+0xb8>)
 800103a:	f00d f89e 	bl	800e17a <HAL_UARTEx_SetTxFifoThreshold>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	bf14      	ite	ne
 8001044:	2301      	movne	r3, #1
 8001046:	2300      	moveq	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 800104e:	f000 f8b7 	bl	80011c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001052:	2100      	movs	r1, #0
 8001054:	480d      	ldr	r0, [pc, #52]	@ (800108c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001056:	f00d f8ce 	bl	800e1f6 <HAL_UARTEx_SetRxFifoThreshold>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	bf14      	ite	ne
 8001060:	2301      	movne	r3, #1
 8001062:	2300      	moveq	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 800106a:	f000 f8a9 	bl	80011c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800106e:	4807      	ldr	r0, [pc, #28]	@ (800108c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001070:	f00d f84a 	bl	800e108 <HAL_UARTEx_DisableFifoMode>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	bf14      	ite	ne
 800107a:	2301      	movne	r3, #1
 800107c:	2300      	moveq	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8001084:	f000 f89c 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	240001e8 	.word	0x240001e8
 8001090:	40004800 	.word	0x40004800

08001094 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010aa:	4b32      	ldr	r3, [pc, #200]	@ (8001174 <_ZL12MX_GPIO_Initv+0xe0>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b0:	4a30      	ldr	r2, [pc, #192]	@ (8001174 <_ZL12MX_GPIO_Initv+0xe0>)
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001174 <_ZL12MX_GPIO_Initv+0xe0>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c0:	f003 0310 	and.w	r3, r3, #16
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001174 <_ZL12MX_GPIO_Initv+0xe0>)
 80010ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ce:	4a29      	ldr	r2, [pc, #164]	@ (8001174 <_ZL12MX_GPIO_Initv+0xe0>)
 80010d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010d8:	4b26      	ldr	r3, [pc, #152]	@ (8001174 <_ZL12MX_GPIO_Initv+0xe0>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e6:	4b23      	ldr	r3, [pc, #140]	@ (8001174 <_ZL12MX_GPIO_Initv+0xe0>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ec:	4a21      	ldr	r2, [pc, #132]	@ (8001174 <_ZL12MX_GPIO_Initv+0xe0>)
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001174 <_ZL12MX_GPIO_Initv+0xe0>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b1b      	ldr	r3, [pc, #108]	@ (8001174 <_ZL12MX_GPIO_Initv+0xe0>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110a:	4a1a      	ldr	r2, [pc, #104]	@ (8001174 <_ZL12MX_GPIO_Initv+0xe0>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001114:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <_ZL12MX_GPIO_Initv+0xe0>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	2108      	movs	r1, #8
 8001126:	4814      	ldr	r0, [pc, #80]	@ (8001178 <_ZL12MX_GPIO_Initv+0xe4>)
 8001128:	f003 ff16 	bl	8004f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3_Pin */
  GPIO_InitStruct.Pin = PE3_Pin;
 800112c:	2308      	movs	r3, #8
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	2301      	movs	r3, #1
 8001132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PE3_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	480d      	ldr	r0, [pc, #52]	@ (8001178 <_ZL12MX_GPIO_Initv+0xe4>)
 8001144:	f003 fd40 	bl	8004bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001148:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800114c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 800115a:	2306      	movs	r3, #6
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	4805      	ldr	r0, [pc, #20]	@ (800117c <_ZL12MX_GPIO_Initv+0xe8>)
 8001166:	f003 fd2f 	bl	8004bc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	@ 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	58024400 	.word	0x58024400
 8001178:	58021000 	.word	0x58021000
 800117c:	58020000 	.word	0x58020000

08001180 <_Z12StartKeyTaskPv>:
  */
/* USER CODE END Header_StartDefaultTask */

/* Function implementing the keyTask thread */
void StartKeyTask(void *argument)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Initialization */
  init_key();
 8001188:	f7ff fbf0 	bl	800096c <_ZL8init_keyv>
  
  /* Infinite loop */
  for(;;)
  {
    scan_key();
 800118c:	f7ff fc1c 	bl	80009c8 <_ZL8scan_keyv>
   // 获取并打印任务栈最小剩余空间
   UBaseType_t stackHighWaterMark = uxTaskGetStackHighWaterMark(NULL);
   printf("StartKeyTask Stack Bytes Left: %lu\r\n", stackHighWaterMark * sizeof(StackType_t));
#endif

    osDelay(100);  // 10ms delay for key scanning
 8001190:	2064      	movs	r0, #100	@ 0x64
 8001192:	f011 f95b 	bl	801244c <osDelay>
    scan_key();
 8001196:	bf00      	nop
 8001198:	e7f8      	b.n	800118c <_Z12StartKeyTaskPv+0xc>
	...

0800119c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a04      	ldr	r2, [pc, #16]	@ (80011bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d101      	bne.n	80011b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011ae:	f002 fdfb 	bl	8003da8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40001000 	.word	0x40001000

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <Error_Handler+0x4>

080011c8 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
Encoder485 encoder485(&htim3, 1, &huart2);
 80011cc:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <_Z41__static_initialization_and_destruction_0v+0x14>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	4903      	ldr	r1, [pc, #12]	@ (80011e0 <_Z41__static_initialization_and_destruction_0v+0x18>)
 80011d2:	4804      	ldr	r0, [pc, #16]	@ (80011e4 <_Z41__static_initialization_and_destruction_0v+0x1c>)
 80011d4:	f000 fc52 	bl	8001a7c <_ZN10Encoder485C1EP17TIM_HandleTypeDefhP20__UART_HandleTypeDef>
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	24000154 	.word	0x24000154
 80011e0:	24000108 	.word	0x24000108
 80011e4:	240007f0 	.word	0x240007f0

080011e8 <_ZN21ModbusAbsoluteEncoderD1Ev>:
    virtual ~ModbusAbsoluteEncoder() = default;
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <_ZN21ModbusAbsoluteEncoderD1Ev+0x1c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	08017dcc 	.word	0x08017dcc

08001208 <_ZN21ModbusAbsoluteEncoderD0Ev>:
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ffe9 	bl	80011e8 <_ZN21ModbusAbsoluteEncoderD1Ev>
 8001216:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f015 f99c 	bl	8016558 <_ZdlPvj>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <_ZN10Encoder485D1Ev>:

#include "ModbusAbsoluteEncoder.h"
#include "main.h"
#include <stdint.h>

class Encoder485 : public ModbusAbsoluteEncoder {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	4a05      	ldr	r2, [pc, #20]	@ (800124c <_ZN10Encoder485D1Ev+0x20>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ffd3 	bl	80011e8 <_ZN21ModbusAbsoluteEncoderD1Ev>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	08017d1c 	.word	0x08017d1c

08001250 <_ZN10Encoder485D0Ev>:
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ffe7 	bl	800122c <_ZN10Encoder485D1Ev>
 800125e:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f015 f978 	bl	8016558 <_ZdlPvj>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <_Z41__static_initialization_and_destruction_1v>:
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
Encoder485 encoder485(&htim3, 1, &huart2);
 8001278:	4802      	ldr	r0, [pc, #8]	@ (8001284 <_Z41__static_initialization_and_destruction_1v+0x10>)
 800127a:	f7ff ffd7 	bl	800122c <_ZN10Encoder485D1Ev>
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	240007f0 	.word	0x240007f0

08001288 <_GLOBAL__sub_I_hsd1>:
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
 800128c:	f7ff ff9c 	bl	80011c8 <_Z41__static_initialization_and_destruction_0v>
 8001290:	bd80      	pop	{r7, pc}

08001292 <_GLOBAL__sub_D_hsd1>:
 8001292:	b580      	push	{r7, lr}
 8001294:	af00      	add	r7, sp, #0
 8001296:	f7ff ffed 	bl	8001274 <_Z41__static_initialization_and_destruction_1v>
 800129a:	bd80      	pop	{r7, pc}

0800129c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80012a4:	4a07      	ldr	r2, [pc, #28]	@ (80012c4 <RetargetInit+0x28>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80012aa:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <RetargetInit+0x2c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6898      	ldr	r0, [r3, #8]
 80012b0:	2300      	movs	r3, #0
 80012b2:	2202      	movs	r2, #2
 80012b4:	2100      	movs	r1, #0
 80012b6:	f015 fb43 	bl	8016940 <setvbuf>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	240009c8 	.word	0x240009c8
 80012c8:	24000020 	.word	0x24000020

080012cc <_isatty>:

int _isatty(int fd) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db04      	blt.n	80012e4 <_isatty+0x18>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	dc01      	bgt.n	80012e4 <_isatty+0x18>
    return 1;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e005      	b.n	80012f0 <_isatty+0x24>

  errno = EBADF;
 80012e4:	f015 fd96 	bl	8016e14 <__errno>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2209      	movs	r2, #9
 80012ec:	601a      	str	r2, [r3, #0]
  return 0;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <_write>:

int _write(int fd, char* ptr, int len) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 HAL_StatusTypeDef hstatus;

 if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d002      	beq.n	8001310 <_write+0x18>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d111      	bne.n	8001334 <_write+0x3c>
   hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001310:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <_write+0x54>)
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	b29a      	uxth	r2, r3
 8001318:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	f009 ff71 	bl	800b204 <HAL_UART_Transmit>
 8001322:	4603      	mov	r3, r0
 8001324:	75fb      	strb	r3, [r7, #23]
   if (hstatus == HAL_OK)
 8001326:	7dfb      	ldrb	r3, [r7, #23]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <_write+0x38>
     return len;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	e008      	b.n	8001342 <_write+0x4a>
   else
     return EIO;
 8001330:	2305      	movs	r3, #5
 8001332:	e006      	b.n	8001342 <_write+0x4a>
 }
 errno = EBADF;
 8001334:	f015 fd6e 	bl	8016e14 <__errno>
 8001338:	4603      	mov	r3, r0
 800133a:	2209      	movs	r2, #9
 800133c:	601a      	str	r2, [r3, #0]
 return -1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001342:	4618      	mov	r0, r3
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	240009c8 	.word	0x240009c8

08001350 <_close>:
//         ITM_SendChar(*ptr++);
//     }
//     return len;
// }

int _close(int fd) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db04      	blt.n	8001368 <_close+0x18>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b02      	cmp	r3, #2
 8001362:	dc01      	bgt.n	8001368 <_close+0x18>
    return 0;
 8001364:	2300      	movs	r3, #0
 8001366:	e006      	b.n	8001376 <_close+0x26>

  errno = EBADF;
 8001368:	f015 fd54 	bl	8016e14 <__errno>
 800136c:	4603      	mov	r3, r0
 800136e:	2209      	movs	r2, #9
 8001370:	601a      	str	r2, [r3, #0]
  return -1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800138a:	f015 fd43 	bl	8016e14 <__errno>
 800138e:	4603      	mov	r3, r0
 8001390:	2209      	movs	r2, #9
 8001392:	601a      	str	r2, [r3, #0]
  return -1;
 8001394:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_read>:

int _read(int fd, char* ptr, int len) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d110      	bne.n	80013d4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <_read+0x4c>)
 80013b4:	6818      	ldr	r0, [r3, #0]
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013ba:	2201      	movs	r2, #1
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	f009 ffaf 	bl	800b320 <HAL_UART_Receive>
 80013c2:	4603      	mov	r3, r0
 80013c4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <_read+0x30>
      return 1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e008      	b.n	80013e2 <_read+0x42>
    else
      return EIO;
 80013d0:	2305      	movs	r3, #5
 80013d2:	e006      	b.n	80013e2 <_read+0x42>
  }
  errno = EBADF;
 80013d4:	f015 fd1e 	bl	8016e14 <__errno>
 80013d8:	4603      	mov	r3, r0
 80013da:	2209      	movs	r2, #9
 80013dc:	601a      	str	r2, [r3, #0]
  return -1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	240009c8 	.word	0x240009c8

080013f0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db08      	blt.n	8001412 <_fstat+0x22>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b02      	cmp	r3, #2
 8001404:	dc05      	bgt.n	8001412 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800140c:	605a      	str	r2, [r3, #4]
    return 0;
 800140e:	2300      	movs	r3, #0
 8001410:	e005      	b.n	800141e <_fstat+0x2e>
  }

  errno = EBADF;
 8001412:	f015 fcff 	bl	8016e14 <__errno>
 8001416:	4603      	mov	r3, r0
 8001418:	2209      	movs	r2, #9
 800141a:	601a      	str	r2, [r3, #0]
  return 0;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <HAL_MspInit+0x38>)
 8001430:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001434:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <HAL_MspInit+0x38>)
 8001436:	f043 0302 	orr.w	r3, r3, #2
 800143a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800143e:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <HAL_MspInit+0x38>)
 8001440:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	210f      	movs	r1, #15
 8001450:	f06f 0001 	mvn.w	r0, #1
 8001454:	f002 fdb0 	bl	8003fb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	58024400 	.word	0x58024400

08001464 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	@ 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a2e      	ldr	r2, [pc, #184]	@ (800153c <HAL_SD_MspInit+0xd8>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d155      	bne.n	8001532 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001486:	4b2e      	ldr	r3, [pc, #184]	@ (8001540 <HAL_SD_MspInit+0xdc>)
 8001488:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800148c:	4a2c      	ldr	r2, [pc, #176]	@ (8001540 <HAL_SD_MspInit+0xdc>)
 800148e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001492:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001496:	4b2a      	ldr	r3, [pc, #168]	@ (8001540 <HAL_SD_MspInit+0xdc>)
 8001498:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800149c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a4:	4b26      	ldr	r3, [pc, #152]	@ (8001540 <HAL_SD_MspInit+0xdc>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014aa:	4a25      	ldr	r2, [pc, #148]	@ (8001540 <HAL_SD_MspInit+0xdc>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014b4:	4b22      	ldr	r3, [pc, #136]	@ (8001540 <HAL_SD_MspInit+0xdc>)
 80014b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001540 <HAL_SD_MspInit+0xdc>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001540 <HAL_SD_MspInit+0xdc>)
 80014ca:	f043 0308 	orr.w	r3, r3, #8
 80014ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <HAL_SD_MspInit+0xdc>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80014e0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80014e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80014f2:	230c      	movs	r3, #12
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	4811      	ldr	r0, [pc, #68]	@ (8001544 <HAL_SD_MspInit+0xe0>)
 80014fe:	f003 fb63 	bl	8004bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001502:	2304      	movs	r3, #4
 8001504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001512:	230c      	movs	r3, #12
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	480a      	ldr	r0, [pc, #40]	@ (8001548 <HAL_SD_MspInit+0xe4>)
 800151e:	f003 fb53 	bl	8004bc8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2105      	movs	r1, #5
 8001526:	2031      	movs	r0, #49	@ 0x31
 8001528:	f002 fd46 	bl	8003fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800152c:	2031      	movs	r0, #49	@ 0x31
 800152e:	f002 fd5d 	bl	8003fec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	@ 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	52007000 	.word	0x52007000
 8001540:	58024400 	.word	0x58024400
 8001544:	58020800 	.word	0x58020800
 8001548:	58020c00 	.word	0x58020c00

0800154c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0e      	ldr	r2, [pc, #56]	@ (8001594 <HAL_TIM_OC_MspInit+0x48>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d116      	bne.n	800158c <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <HAL_TIM_OC_MspInit+0x4c>)
 8001560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001564:	4a0c      	ldr	r2, [pc, #48]	@ (8001598 <HAL_TIM_OC_MspInit+0x4c>)
 8001566:	f043 0302 	orr.w	r3, r3, #2
 800156a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800156e:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <HAL_TIM_OC_MspInit+0x4c>)
 8001570:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	2105      	movs	r1, #5
 8001580:	201d      	movs	r0, #29
 8001582:	f002 fd19 	bl	8003fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001586:	201d      	movs	r0, #29
 8001588:	f002 fd30 	bl	8003fec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40000400 	.word	0x40000400
 8001598:	58024400 	.word	0x58024400

0800159c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08c      	sub	sp, #48	@ 0x30
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a3c      	ldr	r2, [pc, #240]	@ (80016ac <HAL_UART_MspInit+0x110>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d136      	bne.n	800162c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015be:	4b3c      	ldr	r3, [pc, #240]	@ (80016b0 <HAL_UART_MspInit+0x114>)
 80015c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015c4:	4a3a      	ldr	r2, [pc, #232]	@ (80016b0 <HAL_UART_MspInit+0x114>)
 80015c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015ce:	4b38      	ldr	r3, [pc, #224]	@ (80016b0 <HAL_UART_MspInit+0x114>)
 80015d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015dc:	4b34      	ldr	r3, [pc, #208]	@ (80016b0 <HAL_UART_MspInit+0x114>)
 80015de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e2:	4a33      	ldr	r2, [pc, #204]	@ (80016b0 <HAL_UART_MspInit+0x114>)
 80015e4:	f043 0308 	orr.w	r3, r3, #8
 80015e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ec:	4b30      	ldr	r3, [pc, #192]	@ (80016b0 <HAL_UART_MspInit+0x114>)
 80015ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80015fa:	2360      	movs	r3, #96	@ 0x60
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800160a:	2307      	movs	r3, #7
 800160c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160e:	f107 031c 	add.w	r3, r7, #28
 8001612:	4619      	mov	r1, r3
 8001614:	4827      	ldr	r0, [pc, #156]	@ (80016b4 <HAL_UART_MspInit+0x118>)
 8001616:	f003 fad7 	bl	8004bc8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2105      	movs	r1, #5
 800161e:	2026      	movs	r0, #38	@ 0x26
 8001620:	f002 fcca 	bl	8003fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001624:	2026      	movs	r0, #38	@ 0x26
 8001626:	f002 fce1 	bl	8003fec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800162a:	e03b      	b.n	80016a4 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART3)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a21      	ldr	r2, [pc, #132]	@ (80016b8 <HAL_UART_MspInit+0x11c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d136      	bne.n	80016a4 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001636:	4b1e      	ldr	r3, [pc, #120]	@ (80016b0 <HAL_UART_MspInit+0x114>)
 8001638:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800163c:	4a1c      	ldr	r2, [pc, #112]	@ (80016b0 <HAL_UART_MspInit+0x114>)
 800163e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001642:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001646:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <HAL_UART_MspInit+0x114>)
 8001648:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800164c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001654:	4b16      	ldr	r3, [pc, #88]	@ (80016b0 <HAL_UART_MspInit+0x114>)
 8001656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800165a:	4a15      	ldr	r2, [pc, #84]	@ (80016b0 <HAL_UART_MspInit+0x114>)
 800165c:	f043 0308 	orr.w	r3, r3, #8
 8001660:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <HAL_UART_MspInit+0x114>)
 8001666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001672:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001684:	2307      	movs	r3, #7
 8001686:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	4619      	mov	r1, r3
 800168e:	4809      	ldr	r0, [pc, #36]	@ (80016b4 <HAL_UART_MspInit+0x118>)
 8001690:	f003 fa9a 	bl	8004bc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2105      	movs	r1, #5
 8001698:	2027      	movs	r0, #39	@ 0x27
 800169a:	f002 fc8d 	bl	8003fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800169e:	2027      	movs	r0, #39	@ 0x27
 80016a0:	f002 fca4 	bl	8003fec <HAL_NVIC_EnableIRQ>
}
 80016a4:	bf00      	nop
 80016a6:	3730      	adds	r7, #48	@ 0x30
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40004400 	.word	0x40004400
 80016b0:	58024400 	.word	0x58024400
 80016b4:	58020c00 	.word	0x58020c00
 80016b8:	40004800 	.word	0x40004800

080016bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b090      	sub	sp, #64	@ 0x40
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b0f      	cmp	r3, #15
 80016c8:	d827      	bhi.n	800171a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80016ca:	2200      	movs	r2, #0
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	2036      	movs	r0, #54	@ 0x36
 80016d0:	f002 fc72 	bl	8003fb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016d4:	2036      	movs	r0, #54	@ 0x36
 80016d6:	f002 fc89 	bl	8003fec <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80016da:	4a29      	ldr	r2, [pc, #164]	@ (8001780 <HAL_InitTick+0xc4>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016e0:	4b28      	ldr	r3, [pc, #160]	@ (8001784 <HAL_InitTick+0xc8>)
 80016e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016e6:	4a27      	ldr	r2, [pc, #156]	@ (8001784 <HAL_InitTick+0xc8>)
 80016e8:	f043 0310 	orr.w	r3, r3, #16
 80016ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016f0:	4b24      	ldr	r3, [pc, #144]	@ (8001784 <HAL_InitTick+0xc8>)
 80016f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016fe:	f107 0210 	add.w	r2, r7, #16
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f004 fc79 	bl	8006000 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800170e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001710:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001714:	2b00      	cmp	r3, #0
 8001716:	d106      	bne.n	8001726 <HAL_InitTick+0x6a>
 8001718:	e001      	b.n	800171e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e02b      	b.n	8001776 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800171e:	f004 fc43 	bl	8005fa8 <HAL_RCC_GetPCLK1Freq>
 8001722:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001724:	e004      	b.n	8001730 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001726:	f004 fc3f 	bl	8005fa8 <HAL_RCC_GetPCLK1Freq>
 800172a:	4603      	mov	r3, r0
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001732:	4a15      	ldr	r2, [pc, #84]	@ (8001788 <HAL_InitTick+0xcc>)
 8001734:	fba2 2303 	umull	r2, r3, r2, r3
 8001738:	0c9b      	lsrs	r3, r3, #18
 800173a:	3b01      	subs	r3, #1
 800173c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800173e:	4b13      	ldr	r3, [pc, #76]	@ (800178c <HAL_InitTick+0xd0>)
 8001740:	4a13      	ldr	r2, [pc, #76]	@ (8001790 <HAL_InitTick+0xd4>)
 8001742:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001744:	4b11      	ldr	r3, [pc, #68]	@ (800178c <HAL_InitTick+0xd0>)
 8001746:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800174a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800174c:	4a0f      	ldr	r2, [pc, #60]	@ (800178c <HAL_InitTick+0xd0>)
 800174e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001750:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <HAL_InitTick+0xd0>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <HAL_InitTick+0xd0>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800175e:	480b      	ldr	r0, [pc, #44]	@ (800178c <HAL_InitTick+0xd0>)
 8001760:	f008 fdf2 	bl	800a348 <HAL_TIM_Base_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d104      	bne.n	8001774 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800176a:	4808      	ldr	r0, [pc, #32]	@ (800178c <HAL_InitTick+0xd0>)
 800176c:	f008 fe4e 	bl	800a40c <HAL_TIM_Base_Start_IT>
 8001770:	4603      	mov	r3, r0
 8001772:	e000      	b.n	8001776 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
}
 8001776:	4618      	mov	r0, r3
 8001778:	3740      	adds	r7, #64	@ 0x40
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	24000008 	.word	0x24000008
 8001784:	58024400 	.word	0x58024400
 8001788:	431bde83 	.word	0x431bde83
 800178c:	240009cc 	.word	0x240009cc
 8001790:	40001000 	.word	0x40001000

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <NMI_Handler+0x4>

0800179c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <MemManage_Handler+0x4>

080017ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <UsageFault_Handler+0x4>

080017bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017d2:	481c      	ldr	r0, [pc, #112]	@ (8001844 <TIM3_IRQHandler+0x78>)
 80017d4:	f008 fee9 	bl	800a5aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
#ifdef USE_MOBUSRTU_ENCODER
  // 使用任务通知替代直接调用编码器更新函数
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80017d8:	2300      	movs	r3, #0
 80017da:	603b      	str	r3, [r7, #0]

  // 发送任务通知给编码器任务
  if (encoderEventGroup != NULL) {
 80017dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001848 <TIM3_IRQHandler+0x7c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d006      	beq.n	80017f2 <TIM3_IRQHandler+0x26>
    xEventGroupSetBitsFromISR(encoderEventGroup, ENCODER_TICK_EVENT_BIT, &xHigherPriorityTaskWoken);
 80017e4:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <TIM3_IRQHandler+0x7c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	463a      	mov	r2, r7
 80017ea:	2101      	movs	r1, #1
 80017ec:	4618      	mov	r0, r3
 80017ee:	f011 fa99 	bl	8012d24 <xEventGroupSetBitsFromISR>
  }

  // 中断频率统计
  tim3_irq_count++;
 80017f2:	4b16      	ldr	r3, [pc, #88]	@ (800184c <TIM3_IRQHandler+0x80>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3301      	adds	r3, #1
 80017f8:	4a14      	ldr	r2, [pc, #80]	@ (800184c <TIM3_IRQHandler+0x80>)
 80017fa:	6013      	str	r3, [r2, #0]
  uint32_t current_tick = HAL_GetTick();
 80017fc:	f002 fae8 	bl	8003dd0 <HAL_GetTick>
 8001800:	6078      	str	r0, [r7, #4]

  // 每1000毫秒（1秒）统计一次频率
  if (current_tick - tim3_last_tick >= 1000) {
 8001802:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <TIM3_IRQHandler+0x84>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800180e:	d309      	bcc.n	8001824 <TIM3_IRQHandler+0x58>
    tim3_frequency = tim3_irq_count;
 8001810:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <TIM3_IRQHandler+0x80>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0f      	ldr	r2, [pc, #60]	@ (8001854 <TIM3_IRQHandler+0x88>)
 8001816:	6013      	str	r3, [r2, #0]

    // 重置计数器和时间戳
    tim3_irq_count = 0;
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <TIM3_IRQHandler+0x80>)
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
    tim3_last_tick = current_tick;
 800181e:	4a0c      	ldr	r2, [pc, #48]	@ (8001850 <TIM3_IRQHandler+0x84>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6013      	str	r3, [r2, #0]
  }

  // 如果需要进行任务切换，则执行
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d007      	beq.n	800183a <TIM3_IRQHandler+0x6e>
 800182a:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <TIM3_IRQHandler+0x8c>)
 800182c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	f3bf 8f4f 	dsb	sy
 8001836:	f3bf 8f6f 	isb	sy
#endif
  /* USER CODE END TIM3_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	24000108 	.word	0x24000108
 8001848:	240009b0 	.word	0x240009b0
 800184c:	24000a18 	.word	0x24000a18
 8001850:	24000a1c 	.word	0x24000a1c
 8001854:	24000a20 	.word	0x24000a20
 8001858:	e000ed04 	.word	0xe000ed04

0800185c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001860:	4802      	ldr	r0, [pc, #8]	@ (800186c <USART2_IRQHandler+0x10>)
 8001862:	f009 ffd3 	bl	800b80c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	24000154 	.word	0x24000154

08001870 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001874:	4802      	ldr	r0, [pc, #8]	@ (8001880 <USART3_IRQHandler+0x10>)
 8001876:	f009 ffc9 	bl	800b80c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	240001e8 	.word	0x240001e8

08001884 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001888:	4802      	ldr	r0, [pc, #8]	@ (8001894 <SDMMC1_IRQHandler+0x10>)
 800188a:	f007 fb69 	bl	8008f60 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	2400008c 	.word	0x2400008c

08001898 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800189c:	4802      	ldr	r0, [pc, #8]	@ (80018a8 <TIM6_DAC_IRQHandler+0x10>)
 800189e:	f008 fe84 	bl	800a5aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	240009cc 	.word	0x240009cc

080018ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b4:	4a14      	ldr	r2, [pc, #80]	@ (8001908 <_sbrk+0x5c>)
 80018b6:	4b15      	ldr	r3, [pc, #84]	@ (800190c <_sbrk+0x60>)
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c0:	4b13      	ldr	r3, [pc, #76]	@ (8001910 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c8:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <_sbrk+0x64>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	@ (8001914 <_sbrk+0x68>)
 80018cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ce:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d207      	bcs.n	80018ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018dc:	f015 fa9a 	bl	8016e14 <__errno>
 80018e0:	4603      	mov	r3, r0
 80018e2:	220c      	movs	r2, #12
 80018e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018ea:	e009      	b.n	8001900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ec:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f2:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	4a05      	ldr	r2, [pc, #20]	@ (8001910 <_sbrk+0x64>)
 80018fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	24080000 	.word	0x24080000
 800190c:	00003000 	.word	0x00003000
 8001910:	24000a24 	.word	0x24000a24
 8001914:	240055b0 	.word	0x240055b0

08001918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800191c:	4b37      	ldr	r3, [pc, #220]	@ (80019fc <SystemInit+0xe4>)
 800191e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001922:	4a36      	ldr	r2, [pc, #216]	@ (80019fc <SystemInit+0xe4>)
 8001924:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001928:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800192c:	4b34      	ldr	r3, [pc, #208]	@ (8001a00 <SystemInit+0xe8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 030f 	and.w	r3, r3, #15
 8001934:	2b06      	cmp	r3, #6
 8001936:	d807      	bhi.n	8001948 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001938:	4b31      	ldr	r3, [pc, #196]	@ (8001a00 <SystemInit+0xe8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 030f 	bic.w	r3, r3, #15
 8001940:	4a2f      	ldr	r2, [pc, #188]	@ (8001a00 <SystemInit+0xe8>)
 8001942:	f043 0307 	orr.w	r3, r3, #7
 8001946:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001948:	4b2e      	ldr	r3, [pc, #184]	@ (8001a04 <SystemInit+0xec>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a2d      	ldr	r2, [pc, #180]	@ (8001a04 <SystemInit+0xec>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001954:	4b2b      	ldr	r3, [pc, #172]	@ (8001a04 <SystemInit+0xec>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800195a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a04 <SystemInit+0xec>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	4929      	ldr	r1, [pc, #164]	@ (8001a04 <SystemInit+0xec>)
 8001960:	4b29      	ldr	r3, [pc, #164]	@ (8001a08 <SystemInit+0xf0>)
 8001962:	4013      	ands	r3, r2
 8001964:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001966:	4b26      	ldr	r3, [pc, #152]	@ (8001a00 <SystemInit+0xe8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d007      	beq.n	8001982 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001972:	4b23      	ldr	r3, [pc, #140]	@ (8001a00 <SystemInit+0xe8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 030f 	bic.w	r3, r3, #15
 800197a:	4a21      	ldr	r2, [pc, #132]	@ (8001a00 <SystemInit+0xe8>)
 800197c:	f043 0307 	orr.w	r3, r3, #7
 8001980:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001982:	4b20      	ldr	r3, [pc, #128]	@ (8001a04 <SystemInit+0xec>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001988:	4b1e      	ldr	r3, [pc, #120]	@ (8001a04 <SystemInit+0xec>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800198e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a04 <SystemInit+0xec>)
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001994:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <SystemInit+0xec>)
 8001996:	4a1d      	ldr	r2, [pc, #116]	@ (8001a0c <SystemInit+0xf4>)
 8001998:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800199a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a04 <SystemInit+0xec>)
 800199c:	4a1c      	ldr	r2, [pc, #112]	@ (8001a10 <SystemInit+0xf8>)
 800199e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019a0:	4b18      	ldr	r3, [pc, #96]	@ (8001a04 <SystemInit+0xec>)
 80019a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a14 <SystemInit+0xfc>)
 80019a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019a6:	4b17      	ldr	r3, [pc, #92]	@ (8001a04 <SystemInit+0xec>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019ac:	4b15      	ldr	r3, [pc, #84]	@ (8001a04 <SystemInit+0xec>)
 80019ae:	4a19      	ldr	r2, [pc, #100]	@ (8001a14 <SystemInit+0xfc>)
 80019b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019b2:	4b14      	ldr	r3, [pc, #80]	@ (8001a04 <SystemInit+0xec>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019b8:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <SystemInit+0xec>)
 80019ba:	4a16      	ldr	r2, [pc, #88]	@ (8001a14 <SystemInit+0xfc>)
 80019bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019be:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <SystemInit+0xec>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <SystemInit+0xec>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001a04 <SystemInit+0xec>)
 80019ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <SystemInit+0xec>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80019d6:	4b10      	ldr	r3, [pc, #64]	@ (8001a18 <SystemInit+0x100>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <SystemInit+0x104>)
 80019dc:	4013      	ands	r3, r2
 80019de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019e2:	d202      	bcs.n	80019ea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80019e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <SystemInit+0x108>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <SystemInit+0x10c>)
 80019ec:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80019f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	52002000 	.word	0x52002000
 8001a04:	58024400 	.word	0x58024400
 8001a08:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a0c:	02020200 	.word	0x02020200
 8001a10:	01ff0000 	.word	0x01ff0000
 8001a14:	01010280 	.word	0x01010280
 8001a18:	5c001000 	.word	0x5c001000
 8001a1c:	ffff0000 	.word	0xffff0000
 8001a20:	51008108 	.word	0x51008108
 8001a24:	52004000 	.word	0x52004000

08001a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a2c:	f7ff ff74 	bl	8001918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a30:	480c      	ldr	r0, [pc, #48]	@ (8001a64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a32:	490d      	ldr	r1, [pc, #52]	@ (8001a68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a34:	4a0d      	ldr	r2, [pc, #52]	@ (8001a6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a38:	e002      	b.n	8001a40 <LoopCopyDataInit>

08001a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3e:	3304      	adds	r3, #4

08001a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a44:	d3f9      	bcc.n	8001a3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a46:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a48:	4c0a      	ldr	r4, [pc, #40]	@ (8001a74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a4c:	e001      	b.n	8001a52 <LoopFillZerobss>

08001a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a50:	3204      	adds	r2, #4

08001a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a54:	d3fb      	bcc.n	8001a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a56:	f015 f9e3 	bl	8016e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a5a:	f7ff f8d7 	bl	8000c0c <main>
  bx  lr
 8001a5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a60:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a64:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a68:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001a6c:	08017f30 	.word	0x08017f30
  ldr r2, =_sbss
 8001a70:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001a74:	240055ac 	.word	0x240055ac

08001a78 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a78:	e7fe      	b.n	8001a78 <ADC3_IRQHandler>
	...

08001a7c <_ZN10Encoder485C1EP17TIM_HandleTypeDefhP20__UART_HandleTypeDef>:

#include "Encoder485.h"
#include <cmath>


Encoder485::Encoder485(TIM_HandleTypeDef *htim, uint8_t unit_id, UART_HandleTypeDef *huart)
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	71fb      	strb	r3, [r7, #7]
  : ModbusAbsoluteEncoder(htim, unit_id),
    huart(huart)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	79fa      	ldrb	r2, [r7, #7]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f001 fcde 	bl	8003454 <_ZN21ModbusAbsoluteEncoderC1EP17TIM_HandleTypeDefh>
 8001a98:	4a05      	ldr	r2, [pc, #20]	@ (8001ab0 <_ZN10Encoder485C1EP17TIM_HandleTypeDefhP20__UART_HandleTypeDef+0x34>)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
{
}
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	08017d1c 	.word	0x08017d1c

08001ab4 <_ZN10Encoder4854initEv>:

void Encoder485::init(){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
    /* Modbus Master initialization */
  ModbusH.uModbusType = MB_MASTER;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2204      	movs	r2, #4
 8001ac0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ModbusH.port = huart; 
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f8d3 21bc 	ldr.w	r2, [r3, #444]	@ 0x1bc
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	629a      	str	r2, [r3, #40]	@ 0x28
  ModbusH.u8id = 0; //master ID
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  ModbusH.u16timeOut = 1000;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001adc:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
  ModbusH.EN_Port = NULL; // No RS485
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	631a      	str	r2, [r3, #48]	@ 0x30
  ModbusH.u16regs = ModbusDATA;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f503 72b6 	add.w	r2, r3, #364	@ 0x16c
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  ModbusH.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2208      	movs	r2, #8
 8001af6:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
  ModbusH.xTypeHW = USART_HW;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
  
  ModbusAbsoluteEncoder::init();
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f001 fcff 	bl	8003508 <_ZN21ModbusAbsoluteEncoder4initEv>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <_ZN10Encoder48514constructQueryEP8modbus_t>:

bool Encoder485::constructQuery(modbus_t* modbusQuary) {
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	6039      	str	r1, [r7, #0]
    modbusQuary->u8id = unit_id;                      // 从站地址03
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 217c 	ldrb.w	r2, [r3, #380]	@ 0x17c
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	701a      	strb	r2, [r3, #0]
    modbusQuary->u8fct = MB_FC_READ_REGISTERS;  // 功能码03：读取保持寄存器
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	705a      	strb	r2, [r3, #1]
    modbusQuary->u16RegAdd = 0x0000;            // 寄存器起始地址0x00
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	805a      	strh	r2, [r3, #2]
    modbusQuary->u16CoilsNo = 2;                // 读取2个寄存器（0x00和0x01）
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2202      	movs	r2, #2
 8001b36:	809a      	strh	r2, [r3, #4]
    modbusQuary->u16reg = ModbusDATA;           // 数据存储缓冲区
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f503 72b6 	add.w	r2, r3, #364	@ 0x16c
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	609a      	str	r2, [r3, #8]
    return true;
 8001b42:	2301      	movs	r3, #1
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <RingAdd>:
#endif

/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001b62:	4619      	mov	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	78fa      	ldrb	r2, [r7, #3]
 8001b68:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001b70:	3301      	adds	r3, #1
 8001b72:	425a      	negs	r2, r3
 8001b74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b7c:	bf58      	it	pl
 8001b7e:	4253      	negpl	r3, r2
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001b8e:	2b80      	cmp	r3, #128	@ 0x80
 8001b90:	d113      	bne.n	8001bba <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	425a      	negs	r2, r3
 8001ba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ba8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001bac:	bf58      	it	pl
 8001bae:	4253      	negpl	r3, r2
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8001bb8:	e00b      	b.n	8001bd2 <RingAdd+0x82>
		xRingBuffer->overflow = false;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
		xRingBuffer->u8available++;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001bc8:	3301      	adds	r3, #1
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001bee:	461a      	mov	r2, r3
 8001bf0:	6839      	ldr	r1, [r7, #0]
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f805 	bl	8001c02 <RingGetNBytes>
 8001bf8:	4603      	mov	r3, r0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <RingGetNBytes+0x1e>
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <RingGetNBytes+0x22>
 8001c20:	2300      	movs	r3, #0
 8001c22:	e03e      	b.n	8001ca2 <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	2b80      	cmp	r3, #128	@ 0x80
 8001c28:	d901      	bls.n	8001c2e <RingGetNBytes+0x2c>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e039      	b.n	8001ca2 <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	75fb      	strb	r3, [r7, #23]
 8001c32:	e01b      	b.n	8001c6c <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	4413      	add	r3, r2
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	5c52      	ldrb	r2, [r2, r1]
 8001c46:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001c4e:	3301      	adds	r3, #1
 8001c50:	425a      	negs	r2, r3
 8001c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c56:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c5a:	bf58      	it	pl
 8001c5c:	4253      	negpl	r3, r2
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8001c66:	7dfb      	ldrb	r3, [r7, #23]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	75fb      	strb	r3, [r7, #23]
 8001c6c:	7dfa      	ldrb	r2, [r7, #23]
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d205      	bcs.n	8001c80 <RingGetNBytes+0x7e>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001c7a:	7dfa      	ldrb	r2, [r7, #23]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d3d9      	bcc.n	8001c34 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8001c86:	7dfb      	ldrb	r3, [r7, #23]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	xRingBuffer->overflow = false;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
	RingClear(xRingBuffer);
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 f805 	bl	8001caa <RingClear>

	return uCounter;
 8001ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
xRingBuffer->u8end = 0;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
xRingBuffer->u8available = 0;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
xRingBuffer->overflow = false;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af02      	add	r7, sp, #8
 8001ce6:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8001ce8:	4b45      	ldr	r3, [pc, #276]	@ (8001e00 <ModbusInit+0x120>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	f200 8083 	bhi.w	8001df8 <ModbusInit+0x118>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	33c0      	adds	r3, #192	@ 0xc0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ffd7 	bl	8001caa <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d109      	bne.n	8001d18 <ModbusInit+0x38>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8001d04:	4a3f      	ldr	r2, [pc, #252]	@ (8001e04 <ModbusInit+0x124>)
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	483f      	ldr	r0, [pc, #252]	@ (8001e08 <ModbusInit+0x128>)
 8001d0a:	f010 fb02 	bl	8012312 <osThreadNew>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001d16:	e035      	b.n	8001d84 <ModbusInit+0xa4>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d130      	bne.n	8001d82 <ModbusInit+0xa2>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8001d20:	4a3a      	ldr	r2, [pc, #232]	@ (8001e0c <ModbusInit+0x12c>)
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	483a      	ldr	r0, [pc, #232]	@ (8001e10 <ModbusInit+0x130>)
 8001d26:	f010 faf4 	bl	8012312 <osThreadNew>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8001d38:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8001d40:	4a34      	ldr	r2, [pc, #208]	@ (8001e14 <ModbusInit+0x134>)
 8001d42:	9200      	str	r2, [sp, #0]
 8001d44:	2200      	movs	r2, #0
 8001d46:	4834      	ldr	r0, [pc, #208]	@ (8001e18 <ModbusInit+0x138>)
 8001d48:	f013 fc34 	bl	80155b4 <xTimerCreate>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <ModbusInit+0x82>
		  {
			  while(1); //error creating timer, check heap and stack size
 8001d5e:	bf00      	nop
 8001d60:	e7fd      	b.n	8001d5e <ModbusInit+0x7e>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8001d62:	4a2e      	ldr	r2, [pc, #184]	@ (8001e1c <ModbusInit+0x13c>)
 8001d64:	2110      	movs	r1, #16
 8001d66:	2002      	movs	r0, #2
 8001d68:	f010 fcce 	bl	8012708 <osMessageQueueNew>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

		  if(modH->QueueTelegramHandle == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d102      	bne.n	8001d84 <ModbusInit+0xa4>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 8001d7e:	bf00      	nop
 8001d80:	e7fd      	b.n	8001d7e <ModbusInit+0x9e>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8001d82:	e7fe      	b.n	8001d82 <ModbusInit+0xa2>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <ModbusInit+0xb2>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8001d8e:	bf00      	nop
 8001d90:	e7fd      	b.n	8001d8e <ModbusInit+0xae>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8001d98:	4a21      	ldr	r2, [pc, #132]	@ (8001e20 <ModbusInit+0x140>)
 8001d9a:	9200      	str	r2, [sp, #0]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2105      	movs	r1, #5
 8001da0:	4820      	ldr	r0, [pc, #128]	@ (8001e24 <ModbusInit+0x144>)
 8001da2:	f013 fc07 	bl	80155b4 <xTimerCreate>
 8001da6:	4602      	mov	r2, r0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <ModbusInit+0xdc>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <ModbusInit+0xd8>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8001dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8001e28 <ModbusInit+0x148>)
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	f010 fb5e 	bl	8012482 <osSemaphoreNew>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	  if(modH->ModBusSphrHandle == NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <ModbusInit+0xfc>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <ModbusInit+0xf8>
	  }

	  mHandlers[numberHandlers] = modH;
 8001ddc:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <ModbusInit+0x120>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	4a12      	ldr	r2, [pc, #72]	@ (8001e2c <ModbusInit+0x14c>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8001dea:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <ModbusInit+0x120>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	3301      	adds	r3, #1
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4b03      	ldr	r3, [pc, #12]	@ (8001e00 <ModbusInit+0x120>)
 8001df4:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8001df6:	e000      	b.n	8001dfa <ModbusInit+0x11a>
	  while(1); //error no more Modbus handlers supported
 8001df8:	e7fe      	b.n	8001df8 <ModbusInit+0x118>
}
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	24000a30 	.word	0x24000a30
 8001e04:	08017d64 	.word	0x08017d64
 8001e08:	08002025 	.word	0x08002025
 8001e0c:	08017d88 	.word	0x08017d88
 8001e10:	080025b9 	.word	0x080025b9
 8001e14:	08001fc9 	.word	0x08001fc9
 8001e18:	08017c2c 	.word	0x08017c2c
 8001e1c:	08017d4c 	.word	0x08017d4c
 8001e20:	08001f45 	.word	0x08001f45
 8001e24:	08017c3c 	.word	0x08017c3c
 8001e28:	08017dac 	.word	0x08017dac
 8001e2c:	24000a28 	.word	0x24000a28

08001e30 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d010      	beq.n	8001e64 <ModbusStart+0x34>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d00b      	beq.n	8001e64 <ModbusStart+0x34>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d006      	beq.n	8001e64 <ModbusStart+0x34>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d001      	beq.n	8001e64 <ModbusStart+0x34>
	{

		while(1); //ERROR select the type of hardware
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <ModbusStart+0x30>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d101      	bne.n	8001e72 <ModbusStart+0x42>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 8001e6e:	bf00      	nop
 8001e70:	e7fd      	b.n	8001e6e <ModbusStart+0x3e>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d004      	beq.n	8001e86 <ModbusStart+0x56>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d140      	bne.n	8001f08 <ModbusStart+0xd8>
	{

	      if (modH->EN_Port != NULL )
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d007      	beq.n	8001e9e <ModbusStart+0x6e>
          {
              // return RS485 transceiver to receive mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68d8      	ldr	r0, [r3, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	8a1b      	ldrh	r3, [r3, #16]
 8001e96:	2200      	movs	r2, #0
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f003 f85d 	bl	8004f58 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d106      	bne.n	8001eb4 <ModbusStart+0x84>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <ModbusStart+0x84>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <ModbusStart+0x80>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8001eb4:	bf00      	nop
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f00a f928 	bl	800c110 <HAL_UART_GetState>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b20      	cmp	r3, #32
 8001ec4:	d1f7      	bne.n	8001eb6 <ModbusStart+0x86>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6858      	ldr	r0, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	33a6      	adds	r3, #166	@ 0xa6
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f009 fb81 	bl	800b5d8 <HAL_UART_Receive_IT>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <ModbusStart+0xb0>
          {
                while(1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <ModbusStart+0xac>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	7a1b      	ldrb	r3, [r3, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <ModbusStart+0xc4>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d101      	bne.n	8001ef4 <ModbusStart+0xc4>
          {
        	  while(1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <ModbusStart+0xc0>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	7a1b      	ldrb	r3, [r3, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <ModbusStart+0xd8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d101      	bne.n	8001f08 <ModbusStart+0xd8>
          {
             	  while(1)
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <ModbusStart+0xd4>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 2093 	ldrb.w	r2, [r3, #147]	@ 0x93
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f8b3 209e 	ldrh.w	r2, [r3, #158]	@ 0x9e
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	e02a      	b.n	8001fa8 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 8001f52:	4a1b      	ldr	r2, [pc, #108]	@ (8001fc0 <vTimerCallbackT35+0x7c>)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d11e      	bne.n	8001fa2 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 8001f64:	4a16      	ldr	r2, [pc, #88]	@ (8001fc0 <vTimerCallbackT35+0x7c>)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d10c      	bne.n	8001f8c <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8001f72:	4a13      	ldr	r2, [pc, #76]	@ (8001fc0 <vTimerCallbackT35+0x7c>)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7a:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 8001f7e:	2300      	movs	r3, #0
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	2300      	movs	r3, #0
 8001f84:	2200      	movs	r2, #0
 8001f86:	2103      	movs	r1, #3
 8001f88:	f013 fb72 	bl	8015670 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8001f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001fc0 <vTimerCallbackT35+0x7c>)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f94:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8001f98:	2300      	movs	r3, #0
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	f013 f8c3 	bl	8015128 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <vTimerCallbackT35+0x80>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	dbce      	blt.n	8001f52 <vTimerCallbackT35+0xe>
		}

	}
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	24000a28 	.word	0x24000a28
 8001fc4:	24000a30 	.word	0x24000a30

08001fc8 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	e016      	b.n	8002004 <vTimerCallbackTimeout+0x3c>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 8001fd6:	4a11      	ldr	r2, [pc, #68]	@ (800201c <vTimerCallbackTimeout+0x54>)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fde:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d10a      	bne.n	8001ffe <vTimerCallbackTimeout+0x36>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 8001fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800201c <vTimerCallbackTimeout+0x54>)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff0:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	2111      	movs	r1, #17
 8001ffa:	f013 f895 	bl	8015128 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3301      	adds	r3, #1
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <vTimerCallbackTimeout+0x58>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4293      	cmp	r3, r2
 800200e:	dbe2      	blt.n	8001fd6 <vTimerCallbackTimeout+0xe>
		}

	}

}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	24000a28 	.word	0x24000a28
 8002020:	24000a30 	.word	0x24000a30

08002024 <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 800203c:	2b01      	cmp	r3, #1
 800203e:	d004      	beq.n	800204a <StartTaskModbusSlave+0x26>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8002046:	2b04      	cmp	r3, #4
 8002048:	d116      	bne.n	8002078 <StartTaskModbusSlave+0x54>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 800204a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800204e:	2001      	movs	r0, #1
 8002050:	f013 f81e 	bl	8015090 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 fc8f 	bl	8002978 <getRxBuffer>
 800205a:	4603      	mov	r3, r0
 800205c:	2b0c      	cmp	r3, #12
 800205e:	d10b      	bne.n	8002078 <StartTaskModbusSlave+0x54>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	220c      	movs	r2, #12
 8002064:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800206c:	3301      	adds	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		  continue;
 8002076:	e0c2      	b.n	80021fe <StartTaskModbusSlave+0x1da>
	  }

   }

   if (modH->u8BufferSize < 7)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800207e:	2b06      	cmp	r3, #6
 8002080:	d80b      	bhi.n	800209a <StartTaskModbusSlave+0x76>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	220f      	movs	r2, #15
 8002086:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800208e:	3301      	adds	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0

	  continue;
 8002098:	e0b1      	b.n	80021fe <StartTaskModbusSlave+0x1da>
    }

    //check broadcast mode
    modH->u8AddressMode = ADDRESS_NORMAL;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    if (modH->u8Buffer[ID] == ADDRESS_BROADCAST)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	7cdb      	ldrb	r3, [r3, #19]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d103      	bne.n	80020b2 <StartTaskModbusSlave+0x8e>
    {
        modH->u8AddressMode = ADDRESS_BROADCAST;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    }

   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id && modH->u8AddressMode != ADDRESS_BROADCAST)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	7cda      	ldrb	r2, [r3, #19]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	7a1b      	ldrb	r3, [r3, #8]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d005      	beq.n	80020ca <StartTaskModbusSlave+0xa6>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f040 8099 	bne.w	80021fc <StartTaskModbusSlave+0x1d8>
    	}
#endif
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fc9c 	bl	8002a08 <validateRequest>
 80020d0:	4603      	mov	r3, r0
 80020d2:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 80020d4:	7afb      	ldrb	r3, [r7, #11]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00e      	beq.n	80020f8 <StartTaskModbusSlave+0xd4>
	{
	    if (u8exception != ERR_TIME_OUT)
 80020da:	7afb      	ldrb	r3, [r7, #11]
 80020dc:	2b11      	cmp	r3, #17
 80020de:	d007      	beq.n	80020f0 <StartTaskModbusSlave+0xcc>
		{
		    buildException( u8exception, modH);
 80020e0:	7afb      	ldrb	r3, [r7, #11]
 80020e2:	68f9      	ldr	r1, [r7, #12]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 fe32 	bl	8002d4e <buildException>
			sendTxBuffer(modH);
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 fe4e 	bl	8002d8c <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	7afa      	ldrb	r2, [r7, #11]
 80020f4:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 80020f6:	e082      	b.n	80021fe <StartTaskModbusSlave+0x1da>
	 }

	 modH->i8lastError = 0;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002104:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002108:	4618      	mov	r0, r3
 800210a:	f011 fb99 	bl	8013840 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	7d1b      	ldrb	r3, [r3, #20]
 8002112:	3b01      	subs	r3, #1
 8002114:	2b0f      	cmp	r3, #15
 8002116:	d863      	bhi.n	80021e0 <StartTaskModbusSlave+0x1bc>
 8002118:	a201      	add	r2, pc, #4	@ (adr r2, 8002120 <StartTaskModbusSlave+0xfc>)
 800211a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211e:	bf00      	nop
 8002120:	08002161 	.word	0x08002161
 8002124:	08002161 	.word	0x08002161
 8002128:	0800217d 	.word	0x0800217d
 800212c:	0800217d 	.word	0x0800217d
 8002130:	08002199 	.word	0x08002199
 8002134:	080021ab 	.word	0x080021ab
 8002138:	080021e1 	.word	0x080021e1
 800213c:	080021e1 	.word	0x080021e1
 8002140:	080021e1 	.word	0x080021e1
 8002144:	080021e1 	.word	0x080021e1
 8002148:	080021e1 	.word	0x080021e1
 800214c:	080021e1 	.word	0x080021e1
 8002150:	080021e1 	.word	0x080021e1
 8002154:	080021e1 	.word	0x080021e1
 8002158:	080021bd 	.word	0x080021bd
 800215c:	080021cf 	.word	0x080021cf
	 {
		case MB_FC_READ_COILS:
		case MB_FC_READ_DISCRETE_INPUT:
			if (modH->u8AddressMode == ADDRESS_BROADCAST)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d03c      	beq.n	80021e4 <StartTaskModbusSlave+0x1c0>
			{
				/* broadcast mode should ignore read function */
				break;
			}
			modH->i8state = process_FC1(modH);
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 feb2 	bl	8002ed4 <process_FC1>
 8002170:	4603      	mov	r3, r0
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 800217a:	e036      	b.n	80021ea <StartTaskModbusSlave+0x1c6>
		case MB_FC_READ_INPUT_REGISTER:
		case MB_FC_READ_REGISTERS :
			if (modH->u8AddressMode == ADDRESS_BROADCAST)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d030      	beq.n	80021e8 <StartTaskModbusSlave+0x1c4>
			{
				/* broadcast mode should ignore read function */
				break;
			}
			modH->i8state = process_FC3(modH);
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 ff59 	bl	800303e <process_FC3>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002196:	e028      	b.n	80021ea <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_COIL:
			modH->i8state = process_FC5(modH);
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 ffbb 	bl	8003114 <process_FC5>
 800219e:	4603      	mov	r3, r0
 80021a0:	461a      	mov	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 80021a8:	e01f      	b.n	80021ea <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_REGISTER :
			modH->i8state = process_FC6(modH);
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f001 f80b 	bl	80031c6 <process_FC6>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461a      	mov	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 80021ba:	e016      	b.n	80021ea <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_MULTIPLE_COILS:
			modH->i8state = process_FC15(modH);
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f001 f834 	bl	800322a <process_FC15>
 80021c2:	4603      	mov	r3, r0
 80021c4:	461a      	mov	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 80021cc:	e00d      	b.n	80021ea <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_MULTIPLE_REGISTERS :
			modH->i8state = process_FC16(modH);
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f001 f8b9 	bl	8003346 <process_FC16>
 80021d4:	4603      	mov	r3, r0
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 80021de:	e004      	b.n	80021ea <StartTaskModbusSlave+0x1c6>
		default:
			break;
 80021e0:	bf00      	nop
 80021e2:	e002      	b.n	80021ea <StartTaskModbusSlave+0x1c6>
				break;
 80021e4:	bf00      	nop
 80021e6:	e000      	b.n	80021ea <StartTaskModbusSlave+0x1c6>
				break;
 80021e8:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 80021f0:	2300      	movs	r3, #0
 80021f2:	2200      	movs	r2, #0
 80021f4:	2100      	movs	r1, #0
 80021f6:	f011 f811 	bl	801321c <xQueueGenericSend>

	 continue;
 80021fa:	e000      	b.n	80021fe <StartTaskModbusSlave+0x1da>
    	continue; // continue this is not for us
 80021fc:	bf00      	nop
  {
 80021fe:	e717      	b.n	8002030 <StartTaskModbusSlave+0xc>

08002200 <ModbusQuery>:
}



void ModbusQuery(modbusHandler_t * modH, modbus_t telegram )
{
 8002200:	b084      	sub	sp, #16
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	f107 001c 	add.w	r0, r7, #28
 800220e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX tail Queue of Modbus
	if (modH->uModbusType == MB_MASTER)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b04      	cmp	r3, #4
 8002218:	d12b      	bne.n	8002272 <ModbusQuery+0x72>
	{
	telegram.u32CurrentTask = (uint32_t *) osThreadGetId();
 800221a:	f010 f90c 	bl	8012436 <osThreadGetId>
 800221e:	4603      	mov	r3, r0
 8002220:	62bb      	str	r3, [r7, #40]	@ 0x28
	// 检查是否在中断中运行
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
	if (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) {
 8002226:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <ModbusQuery+0x84>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800222e:	2b00      	cmp	r3, #0
 8002230:	d015      	beq.n	800225e <ModbusQuery+0x5e>
		// 在中断中，使用FromISR版本
		xQueueSendToBackFromISR(modH->QueueTelegramHandle, &telegram, &xHigherPriorityTaskWoken);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 8002238:	f107 020c 	add.w	r2, r7, #12
 800223c:	f107 011c 	add.w	r1, r7, #28
 8002240:	2300      	movs	r3, #0
 8002242:	f011 f8ed 	bl	8013420 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d013      	beq.n	8002274 <ModbusQuery+0x74>
 800224c:	4b0e      	ldr	r3, [pc, #56]	@ (8002288 <ModbusQuery+0x88>)
 800224e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	f3bf 8f4f 	dsb	sy
 8002258:	f3bf 8f6f 	isb	sy
	}
	else{
//		LED_Toggle("red");
		while(1);// error a slave cannot send queries as a master
	}
}
 800225c:	e00a      	b.n	8002274 <ModbusQuery+0x74>
		xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 8002264:	f107 011c 	add.w	r1, r7, #28
 8002268:	2300      	movs	r3, #0
 800226a:	2200      	movs	r2, #0
 800226c:	f010 ffd6 	bl	801321c <xQueueGenericSend>
}
 8002270:	e000      	b.n	8002274 <ModbusQuery+0x74>
		while(1);// error a slave cannot send queries as a master
 8002272:	e7fe      	b.n	8002272 <ModbusQuery+0x72>
}
 8002274:	bf00      	nop
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800227e:	b004      	add	sp, #16
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed00 	.word	0xe000ed00
 8002288:	e000ed04 	.word	0xe000ed04

0800228c <ModbusQueryV2>:

uint32_t ModbusQueryV2(modbusHandler_t * modH, modbus_t telegram )
{
 800228c:	b084      	sub	sp, #16
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	f107 0014 	add.w	r0, r7, #20
 800229a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX tail Queue of Modbus
	if (modH->uModbusType == MB_MASTER)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d113      	bne.n	80022ce <ModbusQueryV2+0x42>
	{
	telegram.u32CurrentTask = (uint32_t *) osThreadGetId();
 80022a6:	f010 f8c6 	bl	8012436 <osThreadGetId>
 80022aa:	4603      	mov	r3, r0
 80022ac:	623b      	str	r3, [r7, #32]
	xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 80022b4:	f107 0114 	add.w	r1, r7, #20
 80022b8:	2300      	movs	r3, #0
 80022ba:	2200      	movs	r2, #0
 80022bc:	f010 ffae 	bl	801321c <xQueueGenericSend>

	return ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022c4:	2001      	movs	r0, #1
 80022c6:	f012 fee3 	bl	8015090 <ulTaskNotifyTake>
 80022ca:	4603      	mov	r3, r0
 80022cc:	e000      	b.n	80022d0 <ModbusQueryV2+0x44>

	}
	else{
//		LED_Toggle("red");
		while(1);// error a slave cannot send queries as a master
 80022ce:	e7fe      	b.n	80022ce <ModbusQueryV2+0x42>
	}
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022da:	b004      	add	sp, #16
 80022dc:	4770      	bx	lr
	...

080022e0 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 80022e0:	b084      	sub	sp, #16
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	f107 001c 	add.w	r0, r7, #28
 80022ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002300:	4618      	mov	r0, r3
 8002302:	f011 fa9d 	bl	8013840 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	7a1b      	ldrb	r3, [r3, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <SendQuery+0x32>
 800230e:	230a      	movs	r3, #10
 8002310:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f993 30a7 	ldrsb.w	r3, [r3, #167]	@ 0xa7
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <SendQuery+0x40>
 800231c:	230b      	movs	r3, #11
 800231e:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8002320:	7f3b      	ldrb	r3, [r7, #28]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <SendQuery+0x4c>
 8002326:	7f3b      	ldrb	r3, [r7, #28]
 8002328:	2bf7      	cmp	r3, #247	@ 0xf7
 800232a:	d901      	bls.n	8002330 <SendQuery+0x50>
 800232c:	2312      	movs	r3, #18
 800232e:	73bb      	strb	r3, [r7, #14]


	if(error)
 8002330:	7bbb      	ldrb	r3, [r7, #14]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00d      	beq.n	8002352 <SendQuery+0x72>
	{
		 modH->i8lastError = error;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7bba      	ldrb	r2, [r7, #14]
 800233a:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 8002342:	2300      	movs	r3, #0
 8002344:	2200      	movs	r2, #0
 8002346:	2100      	movs	r1, #0
 8002348:	f010 ff68 	bl	801321c <xQueueGenericSend>
		 return error;
 800234c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002350:	e12a      	b.n	80025a8 <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 8002352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 800235a:	7f3a      	ldrb	r2, [r7, #28]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 8002360:	7f7a      	ldrb	r2, [r7, #29]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8002366:	8bfb      	ldrh	r3, [r7, #30]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	b29b      	uxth	r3, r3
 800236c:	b2da      	uxtb	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8002372:	8bfb      	ldrh	r3, [r7, #30]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 800237a:	7f7b      	ldrb	r3, [r7, #29]
 800237c:	3b01      	subs	r3, #1
 800237e:	2b0f      	cmp	r3, #15
 8002380:	f200 80ff 	bhi.w	8002582 <SendQuery+0x2a2>
 8002384:	a201      	add	r2, pc, #4	@ (adr r2, 800238c <SendQuery+0xac>)
 8002386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238a:	bf00      	nop
 800238c:	080023cd 	.word	0x080023cd
 8002390:	080023cd 	.word	0x080023cd
 8002394:	080023cd 	.word	0x080023cd
 8002398:	080023cd 	.word	0x080023cd
 800239c:	080023eb 	.word	0x080023eb
 80023a0:	0800240d 	.word	0x0800240d
 80023a4:	08002583 	.word	0x08002583
 80023a8:	08002583 	.word	0x08002583
 80023ac:	08002583 	.word	0x08002583
 80023b0:	08002583 	.word	0x08002583
 80023b4:	08002583 	.word	0x08002583
 80023b8:	08002583 	.word	0x08002583
 80023bc:	08002583 	.word	0x08002583
 80023c0:	08002583 	.word	0x08002583
 80023c4:	0800242f 	.word	0x0800242f
 80023c8:	080024ed 	.word	0x080024ed
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80023cc:	8c3b      	ldrh	r3, [r7, #32]
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80023d8:	8c3b      	ldrh	r3, [r7, #32]
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2206      	movs	r2, #6
 80023e4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 80023e8:	e0cb      	b.n	8002582 <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <SendQuery+0x116>
 80023f2:	22ff      	movs	r2, #255	@ 0xff
 80023f4:	e000      	b.n	80023f8 <SendQuery+0x118>
 80023f6:	2200      	movs	r2, #0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2206      	movs	r2, #6
 8002406:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 800240a:	e0ba      	b.n	8002582 <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 800240c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	b29b      	uxth	r3, r3
 8002414:	b2da      	uxtb	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b2da      	uxtb	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2206      	movs	r2, #6
 8002428:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 800242c:	e0a9      	b.n	8002582 <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 800242e:	8c3b      	ldrh	r3, [r7, #32]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	b29b      	uxth	r3, r3
 8002434:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 8002436:	7a7b      	ldrb	r3, [r7, #9]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 800243c:	8c3b      	ldrh	r3, [r7, #32]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	b29b      	uxth	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <SendQuery+0x174>
	    {
	        u8bytesno++;
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	3301      	adds	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 800244e:	7a7b      	ldrb	r3, [r7, #9]
 8002450:	3301      	adds	r3, #1
 8002452:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8002454:	8c3b      	ldrh	r3, [r7, #32]
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	b29b      	uxth	r3, r3
 800245a:	b2da      	uxtb	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8002460:	8c3b      	ldrh	r3, [r7, #32]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2207      	movs	r2, #7
 8002472:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 8002476:	2300      	movs	r3, #0
 8002478:	81bb      	strh	r3, [r7, #12]
 800247a:	e031      	b.n	80024e0 <SendQuery+0x200>
	    {
	        if(i%2)
 800247c:	89bb      	ldrh	r3, [r7, #12]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	b29b      	uxth	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00f      	beq.n	80024a8 <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 8002488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800248a:	89bb      	ldrh	r3, [r7, #12]
 800248c:	085b      	lsrs	r3, r3, #1
 800248e:	b29b      	uxth	r3, r3
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4413      	add	r3, r2
 8002494:	881a      	ldrh	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800249c:	4619      	mov	r1, r3
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	440b      	add	r3, r1
 80024a4:	74da      	strb	r2, [r3, #19]
 80024a6:	e010      	b.n	80024ca <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 80024a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024aa:	89bb      	ldrh	r3, [r7, #12]
 80024ac:	085b      	lsrs	r3, r3, #1
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	4413      	add	r3, r2
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	0a1b      	lsrs	r3, r3, #8
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80024c0:	4619      	mov	r1, r3
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	440b      	add	r3, r1
 80024c8:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80024d0:	3301      	adds	r3, #1
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 80024da:	89bb      	ldrh	r3, [r7, #12]
 80024dc:	3301      	adds	r3, #1
 80024de:	81bb      	strh	r3, [r7, #12]
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	89ba      	ldrh	r2, [r7, #12]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d3c8      	bcc.n	800247c <SendQuery+0x19c>
	    }
	    break;
 80024ea:	e04a      	b.n	8002582 <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80024ec:	8c3b      	ldrh	r3, [r7, #32]
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80024f8:	8c3b      	ldrh	r3, [r7, #32]
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8002500:	8c3b      	ldrh	r3, [r7, #32]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	b2da      	uxtb	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2207      	movs	r2, #7
 8002510:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8002514:	2300      	movs	r3, #0
 8002516:	817b      	strh	r3, [r7, #10]
 8002518:	e02e      	b.n	8002578 <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 800251a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800251c:	897b      	ldrh	r3, [r7, #10]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	b29a      	uxth	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800252e:	4619      	mov	r1, r3
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	440b      	add	r3, r1
 8002536:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800253e:	3301      	adds	r3, #1
 8002540:	b2da      	uxtb	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 8002548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800254a:	897b      	ldrh	r3, [r7, #10]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4413      	add	r3, r2
 8002550:	881a      	ldrh	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002558:	4619      	mov	r1, r3
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	440b      	add	r3, r1
 8002560:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002568:	3301      	adds	r3, #1
 800256a:	b2da      	uxtb	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8002572:	897b      	ldrh	r3, [r7, #10]
 8002574:	3301      	adds	r3, #1
 8002576:	817b      	strh	r3, [r7, #10]
 8002578:	8c3b      	ldrh	r3, [r7, #32]
 800257a:	897a      	ldrh	r2, [r7, #10]
 800257c:	429a      	cmp	r2, r3
 800257e:	d3cc      	bcc.n	800251a <SendQuery+0x23a>
	    }
	    break;
 8002580:	bf00      	nop
	}


	sendTxBuffer(modH);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 fc02 	bl	8002d8c <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 800258e:	2300      	movs	r3, #0
 8002590:	2200      	movs	r2, #0
 8002592:	2100      	movs	r1, #0
 8002594:	f010 fe42 	bl	801321c <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
	modH->i8lastError = 0;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	749a      	strb	r2, [r3, #18]
	return 0;
 80025a6:	2300      	movs	r3, #0


}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025b2:	b004      	add	sp, #16
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop

080025b8 <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08c      	sub	sp, #48	@ 0x30
 80025bc:	af02      	add	r7, sp, #8
 80025be:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	627b      	str	r3, [r7, #36]	@ 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80025ca:	f107 010c 	add.w	r1, r7, #12
 80025ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025d2:	4618      	mov	r0, r3
 80025d4:	f011 f852 	bl	801367c <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     /*Wait period of silence between modbus frame */
	 if(modH->port->Init.BaudRate <= 19200)
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 80025e2:	d80b      	bhi.n	80025fc <StartTaskModbusMaster+0x44>
	 	osDelay((int)(35000/modH->port->Init.BaudRate) + 2);
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f648 02b8 	movw	r2, #35000	@ 0x88b8
 80025ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f2:	3302      	adds	r3, #2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f00f ff29 	bl	801244c <osDelay>
 80025fa:	e002      	b.n	8002602 <StartTaskModbusMaster+0x4a>
	 else
	 	osDelay(3);
 80025fc:	2003      	movs	r0, #3
 80025fe:	f00f ff25 	bl	801244c <osDelay>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	f107 030c 	add.w	r3, r7, #12
 800260a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800260c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800260e:	f7ff fe67 	bl	80022e0 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002612:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002616:	2001      	movs	r0, #1
 8002618:	f012 fd3a 	bl	8015090 <ulTaskNotifyTake>
 800261c:	6238      	str	r0, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	2200      	movs	r2, #0
 8002622:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d017      	beq.n	800265a <StartTaskModbusMaster+0xa2>
      {
    	  modH->i8state = COM_IDLE;
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	2200      	movs	r2, #0
 800262e:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	2211      	movs	r2, #17
 8002636:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800263e:	3301      	adds	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8002648:	69b8      	ldr	r0, [r7, #24]
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	7c9b      	ldrb	r3, [r3, #18]
 800264e:	4619      	mov	r1, r3
 8002650:	2300      	movs	r3, #0
 8002652:	2203      	movs	r2, #3
 8002654:	f012 fd68 	bl	8015128 <xTaskGenericNotify>
    	  continue;
 8002658:	e096      	b.n	8002788 <StartTaskModbusMaster+0x1d0>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 800265a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800265c:	f000 f98c 	bl	8002978 <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 8002660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002662:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002666:	2b05      	cmp	r3, #5
 8002668:	d817      	bhi.n	800269a <StartTaskModbusMaster+0xe2>

		  modH->i8state = COM_IDLE;
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	2200      	movs	r2, #0
 800266e:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	220f      	movs	r2, #15
 8002676:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800267e:	3301      	adds	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8002688:	69b8      	ldr	r0, [r7, #24]
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	7c9b      	ldrb	r3, [r3, #18]
 800268e:	4619      	mov	r1, r3
 8002690:	2300      	movs	r3, #0
 8002692:	2203      	movs	r2, #3
 8002694:	f012 fd48 	bl	8015128 <xTaskGenericNotify>
		  continue;
 8002698:	e076      	b.n	8002788 <StartTaskModbusMaster+0x1d0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 80026a0:	2300      	movs	r3, #0
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2300      	movs	r3, #0
 80026a6:	2200      	movs	r2, #0
 80026a8:	2103      	movs	r1, #3
 80026aa:	f012 ffe1 	bl	8015670 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 80026ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026b0:	f000 f8f2 	bl	8002898 <validateAnswer>
 80026b4:	4603      	mov	r3, r0
 80026b6:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 80026b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00f      	beq.n	80026e0 <StartTaskModbusMaster+0x128>
	  {
		 modH->i8state = COM_IDLE;
 80026c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
         modH->i8lastError = u8exception;
 80026c8:	7ffa      	ldrb	r2, [r7, #31]
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80026ce:	69b8      	ldr	r0, [r7, #24]
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	7c9b      	ldrb	r3, [r3, #18]
 80026d4:	4619      	mov	r1, r3
 80026d6:	2300      	movs	r3, #0
 80026d8:	2203      	movs	r2, #3
 80026da:	f012 fd25 	bl	8015128 <xTaskGenericNotify>
	     continue;
 80026de:	e053      	b.n	8002788 <StartTaskModbusMaster+0x1d0>
	  }

	  modH->i8lastError = u8exception;
 80026e0:	7ffa      	ldrb	r2, [r7, #31]
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80026ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026f0:	4618      	mov	r0, r3
 80026f2:	f011 f8a5 	bl	8013840 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	7d1b      	ldrb	r3, [r3, #20]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	2b0f      	cmp	r3, #15
 80026fe:	d82b      	bhi.n	8002758 <StartTaskModbusMaster+0x1a0>
 8002700:	a201      	add	r2, pc, #4	@ (adr r2, 8002708 <StartTaskModbusMaster+0x150>)
 8002702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002706:	bf00      	nop
 8002708:	08002749 	.word	0x08002749
 800270c:	08002749 	.word	0x08002749
 8002710:	08002751 	.word	0x08002751
 8002714:	08002751 	.word	0x08002751
 8002718:	08002759 	.word	0x08002759
 800271c:	08002759 	.word	0x08002759
 8002720:	08002759 	.word	0x08002759
 8002724:	08002759 	.word	0x08002759
 8002728:	08002759 	.word	0x08002759
 800272c:	08002759 	.word	0x08002759
 8002730:	08002759 	.word	0x08002759
 8002734:	08002759 	.word	0x08002759
 8002738:	08002759 	.word	0x08002759
 800273c:	08002759 	.word	0x08002759
 8002740:	08002759 	.word	0x08002759
 8002744:	08002759 	.word	0x08002759
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 8002748:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800274a:	f000 f81f 	bl	800278c <get_FC1>
	      break;
 800274e:	e004      	b.n	800275a <StartTaskModbusMaster+0x1a2>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 8002750:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002752:	f000 f872 	bl	800283a <get_FC3>
	      break;
 8002756:	e000      	b.n	800275a <StartTaskModbusMaster+0x1a2>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8002758:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 800275a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275c:	2200      	movs	r2, #0
 800275e:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7

	  if (modH->i8lastError ==0) // no error, we use OP_OK_QUERY, since we need to use a different value than 0 to detect the timeout
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	7c9b      	ldrb	r3, [r3, #18]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10d      	bne.n	8002786 <StartTaskModbusMaster+0x1ce>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 8002770:	2300      	movs	r3, #0
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	f010 fd51 	bl	801321c <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, OP_OK_QUERY, eSetValueWithOverwrite);
 800277a:	69b8      	ldr	r0, [r7, #24]
 800277c:	2300      	movs	r3, #0
 800277e:	2203      	movs	r2, #3
 8002780:	2114      	movs	r1, #20
 8002782:	f012 fcd1 	bl	8015128 <xTaskGenericNotify>
	  }


	  continue;
 8002786:	bf00      	nop
  {
 8002788:	e71c      	b.n	80025c4 <StartTaskModbusMaster+0xc>
 800278a:	bf00      	nop

0800278c <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8002794:	2303      	movs	r3, #3
 8002796:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8002798:	2300      	movs	r3, #0
 800279a:	73fb      	strb	r3, [r7, #15]
 800279c:	e043      	b.n	8002826 <get_FC1+0x9a>

        if(i%2)
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d01c      	beq.n	80027e4 <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	7bbb      	ldrb	r3, [r7, #14]
 80027ae:	4413      	add	r3, r2
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	4413      	add	r3, r2
 80027b4:	7cd8      	ldrb	r0, [r3, #19]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	b2d9      	uxtb	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	085b      	lsrs	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	18d4      	adds	r4, r2, r3
 80027da:	f000 fa5f 	bl	8002c9c <word>
 80027de:	4603      	mov	r3, r0
 80027e0:	8023      	strh	r3, [r4, #0]
 80027e2:	e01d      	b.n	8002820 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	b2d8      	uxtb	r0, r3
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	7bbb      	ldrb	r3, [r7, #14]
 8002800:	4413      	add	r3, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	7cd9      	ldrb	r1, [r3, #19]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	085b      	lsrs	r3, r3, #1
 8002812:	b2db      	uxtb	r3, r3
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	18d4      	adds	r4, r2, r3
 8002818:	f000 fa40 	bl	8002c9c <word>
 800281c:	4603      	mov	r3, r0
 800281e:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	3301      	adds	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	7d5b      	ldrb	r3, [r3, #21]
 800282a:	7bfa      	ldrb	r2, [r7, #15]
 800282c:	429a      	cmp	r2, r3
 800282e:	d3b6      	bcc.n	800279e <get_FC1+0x12>
        }

     }
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bd90      	pop	{r4, r7, pc}

0800283a <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 800283a:	b590      	push	{r4, r7, lr}
 800283c:	b085      	sub	sp, #20
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8002842:	2303      	movs	r3, #3
 8002844:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8002846:	2300      	movs	r3, #0
 8002848:	73bb      	strb	r3, [r7, #14]
 800284a:	e018      	b.n	800287e <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	7cd8      	ldrb	r0, [r3, #19]
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	3301      	adds	r3, #1
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	4413      	add	r3, r2
 800285c:	7cd9      	ldrb	r1, [r3, #19]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002864:	7bbb      	ldrb	r3, [r7, #14]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	18d4      	adds	r4, r2, r3
 800286a:	f000 fa17 	bl	8002c9c <word>
 800286e:	4603      	mov	r3, r0
 8002870:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	3302      	adds	r3, #2
 8002876:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8002878:	7bbb      	ldrb	r3, [r7, #14]
 800287a:	3301      	adds	r3, #1
 800287c:	73bb      	strb	r3, [r7, #14]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	7d5b      	ldrb	r3, [r3, #21]
 8002882:	085b      	lsrs	r3, r3, #1
 8002884:	b2db      	uxtb	r3, r3
 8002886:	7bba      	ldrb	r2, [r7, #14]
 8002888:	429a      	cmp	r2, r3
 800288a:	d3df      	bcc.n	800284c <get_FC3+0x12>
    }
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	bd90      	pop	{r4, r7, pc}
	...

08002898 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80028a6:	3b02      	subs	r3, #2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	4413      	add	r3, r2
 80028ac:	7cdb      	ldrb	r3, [r3, #19]
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 80028ae:	b21b      	sxth	r3, r3
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	b21a      	sxth	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80028ba:	3b01      	subs	r3, #1
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	440b      	add	r3, r1
 80028c0:	7cdb      	ldrb	r3, [r3, #19]
 80028c2:	b21b      	sxth	r3, r3
 80028c4:	4313      	orrs	r3, r2
 80028c6:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 80028c8:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f103 0213 	add.w	r2, r3, #19
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80028d6:	3b02      	subs	r3, #2
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	4619      	mov	r1, r3
 80028dc:	4610      	mov	r0, r2
 80028de:	f000 f9f0 	bl	8002cc2 <calcCRC>
 80028e2:	4603      	mov	r3, r0
 80028e4:	461a      	mov	r2, r3
 80028e6:	89bb      	ldrh	r3, [r7, #12]
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d009      	beq.n	8002900 <validateAnswer+0x68>
    {
    	modH->u16errCnt ++;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80028f2:	3301      	adds	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return ERR_BAD_CRC;
 80028fc:	230d      	movs	r3, #13
 80028fe:	e034      	b.n	800296a <validateAnswer+0xd2>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	7d1b      	ldrb	r3, [r3, #20]
 8002904:	b25b      	sxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	da09      	bge.n	800291e <validateAnswer+0x86>
    {
    	modH->u16errCnt ++;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002910:	3301      	adds	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return ERR_EXCEPTION;
 800291a:	230e      	movs	r3, #14
 800291c:	e025      	b.n	800296a <validateAnswer+0xd2>
    }

    // check fct code
    bool isSupported = false;
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8002922:	2300      	movs	r3, #0
 8002924:	73bb      	strb	r3, [r7, #14]
 8002926:	e00c      	b.n	8002942 <validateAnswer+0xaa>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8002928:	7bbb      	ldrb	r3, [r7, #14]
 800292a:	4a12      	ldr	r2, [pc, #72]	@ (8002974 <validateAnswer+0xdc>)
 800292c:	5cd2      	ldrb	r2, [r2, r3]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	7d1b      	ldrb	r3, [r3, #20]
 8002932:	429a      	cmp	r2, r3
 8002934:	d102      	bne.n	800293c <validateAnswer+0xa4>
        {
            isSupported = 1;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
            break;
 800293a:	e005      	b.n	8002948 <validateAnswer+0xb0>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800293c:	7bbb      	ldrb	r3, [r7, #14]
 800293e:	3301      	adds	r3, #1
 8002940:	73bb      	strb	r3, [r7, #14]
 8002942:	7bbb      	ldrb	r3, [r7, #14]
 8002944:	2b07      	cmp	r3, #7
 8002946:	d9ef      	bls.n	8002928 <validateAnswer+0x90>
        }
    }
    if (!isSupported)
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	f083 0301 	eor.w	r3, r3, #1
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d009      	beq.n	8002968 <validateAnswer+0xd0>
    {
    	modH->u16errCnt ++;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800295a:	3301      	adds	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return EXC_FUNC_CODE;
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <validateAnswer+0xd2>
    }

    return 0; // OK, no exception code thrown
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	08017dbc 	.word	0x08017dbc

08002978 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8002986:	2b01      	cmp	r3, #1
 8002988:	d104      	bne.n	8002994 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4618      	mov	r0, r3
 8002990:	f008 fe6e 	bl	800b670 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 800299a:	2b00      	cmp	r3, #0
 800299c:	d007      	beq.n	80029ae <getRxBuffer+0x36>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	33c0      	adds	r3, #192	@ 0xc0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff f981 	bl	8001caa <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 80029a8:	230c      	movs	r3, #12
 80029aa:	81fb      	strh	r3, [r7, #14]
 80029ac:	e019      	b.n	80029e2 <getRxBuffer+0x6a>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3313      	adds	r3, #19
 80029b8:	4619      	mov	r1, r3
 80029ba:	4610      	mov	r0, r2
 80029bc:	f7ff f90f 	bl	8001bde <RingGetAllBytes>
 80029c0:	4603      	mov	r3, r0
 80029c2:	461a      	mov	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
		modH->u16InCnt++;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80029d0:	3301      	adds	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
		i16result = modH->u8BufferSize;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80029e0:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d107      	bne.n	80029fc <getRxBuffer+0x84>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6858      	ldr	r0, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	33a6      	adds	r3, #166	@ 0xa6
 80029f4:	2201      	movs	r2, #1
 80029f6:	4619      	mov	r1, r3
 80029f8:	f008 fdee 	bl	800b5d8 <HAL_UART_Receive_IT>
	}

    return i16result;
 80029fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002a16:	3b02      	subs	r3, #2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	7cdb      	ldrb	r3, [r3, #19]
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8002a1e:	b21b      	sxth	r3, r3
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	b21a      	sxth	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	440b      	add	r3, r1
 8002a30:	7cdb      	ldrb	r3, [r3, #19]
 8002a32:	b21b      	sxth	r3, r3
 8002a34:	4313      	orrs	r3, r2
 8002a36:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8002a38:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f103 0213 	add.w	r2, r3, #19
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002a46:	3b02      	subs	r3, #2
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	f000 f938 	bl	8002cc2 <calcCRC>
 8002a52:	4603      	mov	r3, r0
 8002a54:	461a      	mov	r2, r3
 8002a56:	893b      	ldrh	r3, [r7, #8]
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d009      	beq.n	8002a70 <validateRequest+0x68>
	    {
	       		modH->u16errCnt ++;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002a62:	3301      	adds	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	       		return ERR_BAD_CRC;
 8002a6c:	230d      	movs	r3, #13
 8002a6e:	e10e      	b.n	8002c8e <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8002a74:	2300      	movs	r3, #0
 8002a76:	73bb      	strb	r3, [r7, #14]
 8002a78:	e00c      	b.n	8002a94 <validateRequest+0x8c>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8002a7a:	7bbb      	ldrb	r3, [r7, #14]
 8002a7c:	4a86      	ldr	r2, [pc, #536]	@ (8002c98 <validateRequest+0x290>)
 8002a7e:	5cd2      	ldrb	r2, [r2, r3]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	7d1b      	ldrb	r3, [r3, #20]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d102      	bne.n	8002a8e <validateRequest+0x86>
	        {
	            isSupported = 1;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
	            break;
 8002a8c:	e005      	b.n	8002a9a <validateRequest+0x92>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8002a8e:	7bbb      	ldrb	r3, [r7, #14]
 8002a90:	3301      	adds	r3, #1
 8002a92:	73bb      	strb	r3, [r7, #14]
 8002a94:	7bbb      	ldrb	r3, [r7, #14]
 8002a96:	2b07      	cmp	r3, #7
 8002a98:	d9ef      	bls.n	8002a7a <validateRequest+0x72>
	        }
	    }
	    if (!isSupported)
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	f083 0301 	eor.w	r3, r3, #1
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <validateRequest+0xb2>
	    {
	    	modH->u16errCnt ++;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002aac:	3301      	adds	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	        return EXC_FUNC_CODE;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0e9      	b.n	8002c8e <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	7d1b      	ldrb	r3, [r3, #20]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	2b0f      	cmp	r3, #15
 8002aca:	f200 80df 	bhi.w	8002c8c <validateRequest+0x284>
 8002ace:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad4 <validateRequest+0xcc>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002b15 	.word	0x08002b15
 8002ad8:	08002b15 	.word	0x08002b15
 8002adc:	08002c2d 	.word	0x08002c2d
 8002ae0:	08002c2d 	.word	0x08002c2d
 8002ae4:	08002bc1 	.word	0x08002bc1
 8002ae8:	08002c09 	.word	0x08002c09
 8002aec:	08002c8d 	.word	0x08002c8d
 8002af0:	08002c8d 	.word	0x08002c8d
 8002af4:	08002c8d 	.word	0x08002c8d
 8002af8:	08002c8d 	.word	0x08002c8d
 8002afc:	08002c8d 	.word	0x08002c8d
 8002b00:	08002c8d 	.word	0x08002c8d
 8002b04:	08002c8d 	.word	0x08002c8d
 8002b08:	08002c8d 	.word	0x08002c8d
 8002b0c:	08002b15 	.word	0x08002b15
 8002b10:	08002c2d 	.word	0x08002c2d
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	7d5a      	ldrb	r2, [r3, #21]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7d9b      	ldrb	r3, [r3, #22]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4610      	mov	r0, r2
 8002b20:	f000 f8bc 	bl	8002c9c <word>
 8002b24:	4603      	mov	r3, r0
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	7dda      	ldrb	r2, [r3, #23]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	7e1b      	ldrb	r3, [r3, #24]
 8002b32:	4619      	mov	r1, r3
 8002b34:	4610      	mov	r0, r2
 8002b36:	f000 f8b1 	bl	8002c9c <word>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	7dda      	ldrb	r2, [r3, #23]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	7e1b      	ldrb	r3, [r3, #24]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	f000 f8a6 	bl	8002c9c <word>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <validateRequest+0x15a>
 8002b5c:	897b      	ldrh	r3, [r7, #10]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 8002b62:	89ba      	ldrh	r2, [r7, #12]
 8002b64:	897b      	ldrh	r3, [r7, #10]
 8002b66:	4413      	add	r3, r2
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	@ 0xa4
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	dd01      	ble.n	8002b76 <validateRequest+0x16e>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e08b      	b.n	8002c8e <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	7dda      	ldrb	r2, [r3, #23]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	7e1b      	ldrb	r3, [r3, #24]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4610      	mov	r0, r2
 8002b82:	f000 f88b 	bl	8002c9c <word>
 8002b86:	4603      	mov	r3, r0
 8002b88:	08db      	lsrs	r3, r3, #3
 8002b8a:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	7dda      	ldrb	r2, [r3, #23]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	7e1b      	ldrb	r3, [r3, #24]
 8002b94:	4619      	mov	r1, r3
 8002b96:	4610      	mov	r0, r2
 8002b98:	f000 f880 	bl	8002c9c <word>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <validateRequest+0x1a6>
 8002ba8:	897b      	ldrh	r3, [r7, #10]
 8002baa:	3301      	adds	r3, #1
 8002bac:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 8002bae:	897b      	ldrh	r3, [r7, #10]
 8002bb0:	3305      	adds	r3, #5
 8002bb2:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8002bb4:	897b      	ldrh	r3, [r7, #10]
 8002bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bba:	d960      	bls.n	8002c7e <validateRequest+0x276>
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e066      	b.n	8002c8e <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	7d5a      	ldrb	r2, [r3, #21]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	7d9b      	ldrb	r3, [r3, #22]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4610      	mov	r0, r2
 8002bcc:	f000 f866 	bl	8002c9c <word>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	7d5a      	ldrb	r2, [r3, #21]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	7d9b      	ldrb	r3, [r3, #22]
 8002bde:	4619      	mov	r1, r3
 8002be0:	4610      	mov	r0, r2
 8002be2:	f000 f85b 	bl	8002c9c <word>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <validateRequest+0x1f0>
 8002bf2:	89bb      	ldrh	r3, [r7, #12]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs >= modH->u16regsize) return EXC_ADDR_RANGE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8002bfe:	89ba      	ldrh	r2, [r7, #12]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d33e      	bcc.n	8002c82 <validateRequest+0x27a>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e042      	b.n	8002c8e <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	7d5a      	ldrb	r2, [r3, #21]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	7d9b      	ldrb	r3, [r3, #22]
 8002c10:	4619      	mov	r1, r3
 8002c12:	4610      	mov	r0, r2
 8002c14:	f000 f842 	bl	8002c9c <word>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs >= modH-> u16regsize) return EXC_ADDR_RANGE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8002c22:	89ba      	ldrh	r2, [r7, #12]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d32e      	bcc.n	8002c86 <validateRequest+0x27e>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e030      	b.n	8002c8e <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7d5a      	ldrb	r2, [r3, #21]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	7d9b      	ldrb	r3, [r3, #22]
 8002c34:	4619      	mov	r1, r3
 8002c36:	4610      	mov	r0, r2
 8002c38:	f000 f830 	bl	8002c9c <word>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7dda      	ldrb	r2, [r3, #23]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	7e1b      	ldrb	r3, [r3, #24]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	f000 f826 	bl	8002c9c <word>
 8002c50:	4603      	mov	r3, r0
 8002c52:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8002c54:	89ba      	ldrh	r2, [r7, #12]
 8002c56:	897b      	ldrh	r3, [r7, #10]
 8002c58:	4413      	add	r3, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	@ 0xa4
 8002c60:	4293      	cmp	r3, r2
 8002c62:	dd01      	ble.n	8002c68 <validateRequest+0x260>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e012      	b.n	8002c8e <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8002c68:	897b      	ldrh	r3, [r7, #10]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3305      	adds	r3, #5
 8002c70:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8002c72:	897b      	ldrh	r3, [r7, #10]
 8002c74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c78:	d907      	bls.n	8002c8a <validateRequest+0x282>
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e007      	b.n	8002c8e <validateRequest+0x286>
	        break;
 8002c7e:	bf00      	nop
 8002c80:	e004      	b.n	8002c8c <validateRequest+0x284>
	        break;
 8002c82:	bf00      	nop
 8002c84:	e002      	b.n	8002c8c <validateRequest+0x284>
	        break;
 8002c86:	bf00      	nop
 8002c88:	e000      	b.n	8002c8c <validateRequest+0x284>
	        break;
 8002c8a:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8002c8c:	2300      	movs	r3, #0

}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	08017dbc 	.word	0x08017dbc

08002c9c <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	460a      	mov	r2, r1
 8002ca6:	71fb      	strb	r3, [r7, #7]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8002cac:	79bb      	ldrb	r3, [r7, #6]
 8002cae:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8002cb4:	89bb      	ldrh	r3, [r7, #12]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b087      	sub	sp, #28
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8002cce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cd2:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	74fb      	strb	r3, [r7, #19]
 8002cd8:	e022      	b.n	8002d20 <calcCRC+0x5e>
    {
        temp = temp ^ Buffer[i];
 8002cda:	7cfb      	ldrb	r3, [r7, #19]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	4413      	add	r3, r2
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	4053      	eors	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8002cea:	2301      	movs	r3, #1
 8002cec:	74bb      	strb	r3, [r7, #18]
 8002cee:	e011      	b.n	8002d14 <calcCRC+0x52>
        {
            flag = temp & 0x0001;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	085b      	lsrs	r3, r3, #1
 8002cfc:	617b      	str	r3, [r7, #20]
            if (flag)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d004      	beq.n	8002d0e <calcCRC+0x4c>
                temp ^= 0xA001;
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	f24a 0301 	movw	r3, #40961	@ 0xa001
 8002d0a:	4053      	eors	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8002d0e:	7cbb      	ldrb	r3, [r7, #18]
 8002d10:	3301      	adds	r3, #1
 8002d12:	74bb      	strb	r3, [r7, #18]
 8002d14:	7cbb      	ldrb	r3, [r7, #18]
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d9ea      	bls.n	8002cf0 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8002d1a:	7cfb      	ldrb	r3, [r7, #19]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	74fb      	strb	r3, [r7, #19]
 8002d20:	7cfa      	ldrb	r2, [r7, #19]
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d3d8      	bcc.n	8002cda <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	0a1b      	lsrs	r3, r3, #8
 8002d2c:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	b29b      	uxth	r3, r3

}
 8002d42:	4618      	mov	r0, r3
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b085      	sub	sp, #20
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	4603      	mov	r3, r0
 8002d56:	6039      	str	r1, [r7, #0]
 8002d58:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	7d1b      	ldrb	r3, [r3, #20]
 8002d5e:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	7a1a      	ldrb	r2, [r3, #8]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	3b80      	subs	r3, #128	@ 0x80
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	79fa      	ldrb	r2, [r7, #7]
 8002d76:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	6078      	str	r0, [r7, #4]
    // when in slaveType and u8AddressMode == ADDRESS_BROADCAST, do not send anything
    if (modH->uModbusType == MB_SLAVE && modH->u8AddressMode == ADDRESS_BROADCAST)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d111      	bne.n	8002dc0 <sendTxBuffer+0x34>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10c      	bne.n	8002dc0 <sendTxBuffer+0x34>
    {
        modH->u8BufferSize = 0;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
        // increase message counter
        modH->u16OutCnt++;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8002db4:	3301      	adds	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
        return;
 8002dbe:	e086      	b.n	8002ece <sendTxBuffer+0x142>
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f103 0213 	add.w	r2, r3, #19
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	f7ff ff77 	bl	8002cc2 <calcCRC>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8002dd8:	89fb      	ldrh	r3, [r7, #14]
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002de4:	4619      	mov	r1, r3
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	440b      	add	r3, r1
 8002dec:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002df4:	3301      	adds	r3, #1
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002e04:	4619      	mov	r1, r3
 8002e06:	89fb      	ldrh	r3, [r7, #14]
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	440b      	add	r3, r1
 8002e0e:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002e16:	3301      	adds	r3, #1
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00c      	beq.n	8002e42 <sendTxBuffer+0xb6>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f009 f8c7 	bl	800bfc0 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68d8      	ldr	r0, [r3, #12]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	8a1b      	ldrh	r3, [r3, #16]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f002 f88b 	bl	8004f58 <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6858      	ldr	r0, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f103 0113 	add.w	r1, r3, #19
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002e52:	461a      	mov	r2, r3
 8002e54:	f008 fb2c 	bl	800b4b0 <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8002e58:	21fa      	movs	r1, #250	@ 0xfa
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	f012 f918 	bl	8015090 <ulTaskNotifyTake>
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx) || defined(STM32F7) || defined(STM32WB) || defined(STM32G070xx) || defined(STM32F0) || defined(STM32G431xx) || defined(STM32H5)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 8002e60:	bf00      	nop
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f7      	beq.n	8002e62 <sendTxBuffer+0xd6>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00c      	beq.n	8002e94 <sendTxBuffer+0x108>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68d8      	ldr	r0, [r3, #12]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	8a1b      	ldrh	r3, [r3, #16]
 8002e82:	2200      	movs	r2, #0
 8002e84:	4619      	mov	r1, r3
 8002e86:	f002 f867 	bl	8004f58 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f009 f8ea 	bl	800c068 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d10c      	bne.n	8002eb6 <sendTxBuffer+0x12a>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8d3 40b8 	ldr.w	r4, [r3, #184]	@ 0xb8
 8002ea2:	f011 fb43 	bl	801452c <xTaskGetTickCount>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	2300      	movs	r3, #0
 8002eae:	2102      	movs	r1, #2
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f012 fbdd 	bl	8015670 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
     // increase message counter
     modH->u16OutCnt++;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e


}
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd90      	pop	{r4, r7, pc}

08002ed4 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	7d5a      	ldrb	r2, [r3, #21]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	7d9b      	ldrb	r3, [r3, #22]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	f7ff fed8 	bl	8002c9c <word>
 8002eec:	4603      	mov	r3, r0
 8002eee:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	7dda      	ldrb	r2, [r3, #23]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	7e1b      	ldrb	r3, [r3, #24]
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4610      	mov	r0, r2
 8002efc:	f7ff fece 	bl	8002c9c <word>
 8002f00:	4603      	mov	r3, r0
 8002f02:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8002f04:	8a3b      	ldrh	r3, [r7, #16]
 8002f06:	08db      	lsrs	r3, r3, #3
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8002f0c:	8a3b      	ldrh	r3, [r7, #16]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <process_FC1+0x4a>
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	7dfa      	ldrb	r2, [r7, #23]
 8002f22:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2203      	movs	r2, #3
 8002f28:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002f32:	461a      	mov	r2, r3
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
 8002f36:	4413      	add	r3, r2
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	2200      	movs	r2, #0
 8002f40:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	82bb      	strh	r3, [r7, #20]
 8002f4a:	e058      	b.n	8002ffe <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8002f4c:	8a7a      	ldrh	r2, [r7, #18]
 8002f4e:	8abb      	ldrh	r3, [r7, #20]
 8002f50:	4413      	add	r3, r2
 8002f52:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 8002f54:	89bb      	ldrh	r3, [r7, #12]
 8002f56:	091b      	lsrs	r3, r3, #4
 8002f58:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8002f5a:	89bb      	ldrh	r3, [r7, #12]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	727b      	strb	r3, [r7, #9]

        bitWrite(
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002f6a:	897b      	ldrh	r3, [r7, #10]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	7a7b      	ldrb	r3, [r7, #9]
 8002f76:	fa42 f303 	asr.w	r3, r2, r3
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d014      	beq.n	8002fac <process_FC1+0xd8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002f88:	461a      	mov	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	7cda      	ldrb	r2, [r3, #19]
 8002f90:	7dbb      	ldrb	r3, [r7, #22]
 8002f92:	2101      	movs	r1, #1
 8002f94:	fa01 f303 	lsl.w	r3, r1, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	f891 1093 	ldrb.w	r1, [r1, #147]	@ 0x93
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	440b      	add	r3, r1
 8002fa8:	74da      	strb	r2, [r3, #19]
 8002faa:	e015      	b.n	8002fd8 <process_FC1+0x104>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	7cda      	ldrb	r2, [r3, #19]
 8002fba:	7dbb      	ldrb	r3, [r7, #22]
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	f891 1093 	ldrb.w	r1, [r1, #147]	@ 0x93
 8002fce:	4013      	ands	r3, r2
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	440b      	add	r3, r1
 8002fd6:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8002fd8:	7dbb      	ldrb	r3, [r7, #22]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8002fde:	7dbb      	ldrb	r3, [r7, #22]
 8002fe0:	2b07      	cmp	r3, #7
 8002fe2:	d909      	bls.n	8002ff8 <process_FC1+0x124>
        {
            u8bitsno = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002fee:	3301      	adds	r3, #1
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8002ff8:	8abb      	ldrh	r3, [r7, #20]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	82bb      	strh	r3, [r7, #20]
 8002ffe:	8aba      	ldrh	r2, [r7, #20]
 8003000:	8a3b      	ldrh	r3, [r7, #16]
 8003002:	429a      	cmp	r2, r3
 8003004:	d3a2      	bcc.n	8002f4c <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8003006:	8a3b      	ldrh	r3, [r7, #16]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <process_FC1+0x14e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003018:	3301      	adds	r3, #1
 800301a:	b2da      	uxtb	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003028:	3302      	adds	r3, #2
 800302a:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff fead 	bl	8002d8c <sendTxBuffer>
    return u8CopyBufferSize;
 8003032:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	7d5a      	ldrb	r2, [r3, #21]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	7d9b      	ldrb	r3, [r3, #22]
 800304e:	4619      	mov	r1, r3
 8003050:	4610      	mov	r0, r2
 8003052:	f7ff fe23 	bl	8002c9c <word>
 8003056:	4603      	mov	r3, r0
 8003058:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	7dda      	ldrb	r2, [r3, #23]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7e1b      	ldrb	r3, [r3, #24]
 8003062:	4619      	mov	r1, r3
 8003064:	4610      	mov	r0, r2
 8003066:	f7ff fe19 	bl	8002c9c <word>
 800306a:	4603      	mov	r3, r0
 800306c:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 800306e:	7afb      	ldrb	r3, [r7, #11]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	b2da      	uxtb	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2203      	movs	r2, #3
 800307c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8003080:	89bb      	ldrh	r3, [r7, #12]
 8003082:	81fb      	strh	r3, [r7, #14]
 8003084:	e032      	b.n	80030ec <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800308c:	89fb      	ldrh	r3, [r7, #14]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4413      	add	r3, r2
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	0a1b      	lsrs	r3, r3, #8
 8003096:	b29a      	uxth	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800309e:	4619      	mov	r1, r3
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	440b      	add	r3, r1
 80030a6:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80030ae:	3301      	adds	r3, #1
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80030be:	89fb      	ldrh	r3, [r7, #14]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4413      	add	r3, r2
 80030c4:	881a      	ldrh	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80030cc:	4619      	mov	r1, r3
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	440b      	add	r3, r1
 80030d4:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80030dc:	3301      	adds	r3, #1
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 80030e6:	89fb      	ldrh	r3, [r7, #14]
 80030e8:	3301      	adds	r3, #1
 80030ea:	81fb      	strh	r3, [r7, #14]
 80030ec:	89fa      	ldrh	r2, [r7, #14]
 80030ee:	89b9      	ldrh	r1, [r7, #12]
 80030f0:	7afb      	ldrb	r3, [r7, #11]
 80030f2:	440b      	add	r3, r1
 80030f4:	429a      	cmp	r2, r3
 80030f6:	dbc6      	blt.n	8003086 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80030fe:	3302      	adds	r3, #2
 8003100:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff fe42 	bl	8002d8c <sendTxBuffer>

    return u8CopyBufferSize;
 8003108:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	7d5a      	ldrb	r2, [r3, #21]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	7d9b      	ldrb	r3, [r3, #22]
 8003124:	4619      	mov	r1, r3
 8003126:	4610      	mov	r0, r2
 8003128:	f7ff fdb8 	bl	8002c9c <word>
 800312c:	4603      	mov	r3, r0
 800312e:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 8003130:	89fb      	ldrh	r3, [r7, #14]
 8003132:	091b      	lsrs	r3, r3, #4
 8003134:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 8003136:	89fb      	ldrh	r3, [r7, #14]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	7ddb      	ldrb	r3, [r3, #23]
 8003144:	2bff      	cmp	r3, #255	@ 0xff
 8003146:	d115      	bne.n	8003174 <process_FC5+0x60>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800314e:	89bb      	ldrh	r3, [r7, #12]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	8819      	ldrh	r1, [r3, #0]
 8003156:	7afb      	ldrb	r3, [r7, #11]
 8003158:	2201      	movs	r2, #1
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	b29a      	uxth	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 8003166:	89bb      	ldrh	r3, [r7, #12]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4403      	add	r3, r0
 800316c:	430a      	orrs	r2, r1
 800316e:	b292      	uxth	r2, r2
 8003170:	801a      	strh	r2, [r3, #0]
 8003172:	e016      	b.n	80031a2 <process_FC5+0x8e>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800317a:	89bb      	ldrh	r3, [r7, #12]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4413      	add	r3, r2
 8003180:	8819      	ldrh	r1, [r3, #0]
 8003182:	7afb      	ldrb	r3, [r7, #11]
 8003184:	2201      	movs	r2, #1
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	b29b      	uxth	r3, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	b29a      	uxth	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 8003196:	89bb      	ldrh	r3, [r7, #12]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	4403      	add	r3, r0
 800319c:	400a      	ands	r2, r1
 800319e:	b292      	uxth	r2, r2
 80031a0:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2206      	movs	r2, #6
 80031a6:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80031b0:	3302      	adds	r3, #2
 80031b2:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff fde9 	bl	8002d8c <sendTxBuffer>

    return u8CopyBufferSize;
 80031ba:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	7d5a      	ldrb	r2, [r3, #21]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	7d9b      	ldrb	r3, [r3, #22]
 80031d6:	4619      	mov	r1, r3
 80031d8:	4610      	mov	r0, r2
 80031da:	f7ff fd5f 	bl	8002c9c <word>
 80031de:	4603      	mov	r3, r0
 80031e0:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	7dda      	ldrb	r2, [r3, #23]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	7e1b      	ldrb	r3, [r3, #24]
 80031ea:	4619      	mov	r1, r3
 80031ec:	4610      	mov	r0, r2
 80031ee:	f7ff fd55 	bl	8002c9c <word>
 80031f2:	4603      	mov	r3, r0
 80031f4:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80031fc:	89fb      	ldrh	r3, [r7, #14]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	4413      	add	r3, r2
 8003202:	89ba      	ldrh	r2, [r7, #12]
 8003204:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2206      	movs	r2, #6
 800320a:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003214:	3302      	adds	r3, #2
 8003216:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff fdb7 	bl	8002d8c <sendTxBuffer>

    return u8CopyBufferSize;
 800321e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b086      	sub	sp, #24
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	7d5a      	ldrb	r2, [r3, #21]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	7d9b      	ldrb	r3, [r3, #22]
 800323a:	4619      	mov	r1, r3
 800323c:	4610      	mov	r0, r2
 800323e:	f7ff fd2d 	bl	8002c9c <word>
 8003242:	4603      	mov	r3, r0
 8003244:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	7dda      	ldrb	r2, [r3, #23]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	7e1b      	ldrb	r3, [r3, #24]
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f7ff fd23 	bl	8002c9c <word>
 8003256:	4603      	mov	r3, r0
 8003258:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800325a:	2300      	movs	r3, #0
 800325c:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800325e:	2307      	movs	r3, #7
 8003260:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8003262:	2300      	movs	r3, #0
 8003264:	82bb      	strh	r3, [r7, #20]
 8003266:	e058      	b.n	800331a <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 8003268:	8a7a      	ldrh	r2, [r7, #18]
 800326a:	8abb      	ldrh	r3, [r7, #20]
 800326c:	4413      	add	r3, r2
 800326e:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 8003270:	89bb      	ldrh	r3, [r7, #12]
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8003276:	89bb      	ldrh	r3, [r7, #12]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 8003280:	7dfb      	ldrb	r3, [r7, #23]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	4413      	add	r3, r2
 8003286:	7cdb      	ldrb	r3, [r3, #19]
 8003288:	461a      	mov	r2, r3
 800328a:	7dbb      	ldrb	r3, [r7, #22]
 800328c:	fa42 f303 	asr.w	r3, r2, r3
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	bf14      	ite	ne
 8003298:	2301      	movne	r3, #1
 800329a:	2300      	moveq	r3, #0
 800329c:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 800329e:	7a3b      	ldrb	r3, [r7, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d015      	beq.n	80032d0 <process_FC15+0xa6>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80032aa:	897b      	ldrh	r3, [r7, #10]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4413      	add	r3, r2
 80032b0:	8819      	ldrh	r1, [r3, #0]
 80032b2:	7a7b      	ldrb	r3, [r7, #9]
 80032b4:	2201      	movs	r2, #1
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 80032c2:	897b      	ldrh	r3, [r7, #10]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	4403      	add	r3, r0
 80032c8:	430a      	orrs	r2, r1
 80032ca:	b292      	uxth	r2, r2
 80032cc:	801a      	strh	r2, [r3, #0]
 80032ce:	e016      	b.n	80032fe <process_FC15+0xd4>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80032d6:	897b      	ldrh	r3, [r7, #10]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	8819      	ldrh	r1, [r3, #0]
 80032de:	7a7b      	ldrb	r3, [r7, #9]
 80032e0:	2201      	movs	r2, #1
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 80032f2:	897b      	ldrh	r3, [r7, #10]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4403      	add	r3, r0
 80032f8:	400a      	ands	r2, r1
 80032fa:	b292      	uxth	r2, r2
 80032fc:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 80032fe:	7dbb      	ldrb	r3, [r7, #22]
 8003300:	3301      	adds	r3, #1
 8003302:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8003304:	7dbb      	ldrb	r3, [r7, #22]
 8003306:	2b07      	cmp	r3, #7
 8003308:	d904      	bls.n	8003314 <process_FC15+0xea>
        {
            u8bitsno = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 800330e:	7dfb      	ldrb	r3, [r7, #23]
 8003310:	3301      	adds	r3, #1
 8003312:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8003314:	8abb      	ldrh	r3, [r7, #20]
 8003316:	3301      	adds	r3, #1
 8003318:	82bb      	strh	r3, [r7, #20]
 800331a:	8aba      	ldrh	r2, [r7, #20]
 800331c:	8a3b      	ldrh	r3, [r7, #16]
 800331e:	429a      	cmp	r2, r3
 8003320:	d3a2      	bcc.n	8003268 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2206      	movs	r2, #6
 8003326:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003330:	3302      	adds	r3, #2
 8003332:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff fd29 	bl	8002d8c <sendTxBuffer>
    return u8CopyBufferSize;
 800333a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b086      	sub	sp, #24
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	7d5b      	ldrb	r3, [r3, #21]
 8003352:	b21b      	sxth	r3, r3
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	b21a      	sxth	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	7d9b      	ldrb	r3, [r3, #22]
 800335c:	b21b      	sxth	r3, r3
 800335e:	4313      	orrs	r3, r2
 8003360:	b21b      	sxth	r3, r3
 8003362:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	7ddb      	ldrb	r3, [r3, #23]
 8003368:	b21b      	sxth	r3, r3
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	b21a      	sxth	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	7e1b      	ldrb	r3, [r3, #24]
 8003372:	b21b      	sxth	r3, r3
 8003374:	4313      	orrs	r3, r2
 8003376:	b21b      	sxth	r3, r3
 8003378:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 8003380:	8a7b      	ldrh	r3, [r7, #18]
 8003382:	b2da      	uxtb	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2206      	movs	r2, #6
 800338c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 8003390:	2300      	movs	r3, #0
 8003392:	82fb      	strh	r3, [r7, #22]
 8003394:	e01d      	b.n	80033d2 <process_FC16+0x8c>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8003396:	8afb      	ldrh	r3, [r7, #22]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	3307      	adds	r3, #7
        temp = word(
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	4413      	add	r3, r2
 80033a0:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 80033a2:	8afb      	ldrh	r3, [r7, #22]
 80033a4:	3304      	adds	r3, #4
 80033a6:	005b      	lsls	r3, r3, #1
        temp = word(
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	4413      	add	r3, r2
 80033ac:	7cdb      	ldrb	r3, [r3, #19]
 80033ae:	4619      	mov	r1, r3
 80033b0:	f7ff fc74 	bl	8002c9c <word>
 80033b4:	4603      	mov	r3, r0
 80033b6:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80033be:	8ab9      	ldrh	r1, [r7, #20]
 80033c0:	8afb      	ldrh	r3, [r7, #22]
 80033c2:	440b      	add	r3, r1
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	4413      	add	r3, r2
 80033c8:	89fa      	ldrh	r2, [r7, #14]
 80033ca:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 80033cc:	8afb      	ldrh	r3, [r7, #22]
 80033ce:	3301      	adds	r3, #1
 80033d0:	82fb      	strh	r3, [r7, #22]
 80033d2:	8afa      	ldrh	r2, [r7, #22]
 80033d4:	8a7b      	ldrh	r3, [r7, #18]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d3dd      	bcc.n	8003396 <process_FC16+0x50>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80033e0:	3302      	adds	r3, #2
 80033e2:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff fcd1 	bl	8002d8c <sendTxBuffer>

    return u8CopyBufferSize;
 80033ea:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <_ZN6SensorC1Ev>:
 * The Sensor base class provides an implementation of getVelocity(), and takes care of counting full
 * revolutions in a precise way, but if you wish you can additionally override these methods to provide more
 * optimal implementations for your hardware.
 * 
 */
class Sensor{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	4a12      	ldr	r2, [pc, #72]	@ (800344c <_ZN6SensorC1Ev+0x54>)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a11      	ldr	r2, [pc, #68]	@ (8003450 <_ZN6SensorC1Ev+0x58>)
 800340a:	605a      	str	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	60da      	str	r2, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	611a      	str	r2, [r3, #16]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	615a      	str	r2, [r3, #20]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	619a      	str	r2, [r3, #24]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	61da      	str	r2, [r3, #28]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	621a      	str	r2, [r3, #32]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4618      	mov	r0, r3
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	08017e04 	.word	0x08017e04
 8003450:	38d1b717 	.word	0x38d1b717

08003454 <_ZN21ModbusAbsoluteEncoderC1EP17TIM_HandleTypeDefh>:
#include <cstdio>
#include "retarget.h"
// Define static constant
const float ModbusAbsoluteEncoder::RADIANS_PER_COUNT = 2.0f * M_PI / ModbusAbsoluteEncoder::ENCODER_RESOLUTION;

ModbusAbsoluteEncoder::ModbusAbsoluteEncoder(TIM_HandleTypeDef *htim, uint8_t unit_id)
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	4613      	mov	r3, r2
 8003460:	71fb      	strb	r3, [r7, #7]
    last_position(0),
    full_rotations(0),
    zero_position(0),
    frequency_start_time(0),
    last_receive_count(0),
    encoder_initialized(false)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff ffc7 	bl	80033f8 <_ZN6SensorC1Ev>
 800346a:	4a26      	ldr	r2, [pc, #152]	@ (8003504 <_ZN21ModbusAbsoluteEncoderC1EP17TIM_HandleTypeDefh+0xb0>)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	601a      	str	r2, [r3, #0]
  : unit_id(unit_id),
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	79fa      	ldrb	r2, [r7, #7]
 8003474:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
    encoder_initialized(false)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    comm_ok(false),
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
    modbus_state(IDLE),
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
    cached_angle(0.0f),
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    async_enabled(false),
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
    last_update_time(0),
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    encoder_receive_count(0),
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
    query_start_time(0),
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
    first_read(true),
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
    htim(htim),
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
    last_position(0),
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
    full_rotations(0),
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
    zero_position(0),
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
    frequency_start_time(0),
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
    last_receive_count(0),
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
    encoder_initialized(false)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
{
}
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	08017dcc 	.word	0x08017dcc

08003508 <_ZN21ModbusAbsoluteEncoder4initEv>:

void ModbusAbsoluteEncoder::init() {
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
    // Initialise timer stats
    //Initialize Modbus library
    ModbusInit(&ModbusH);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3324      	adds	r3, #36	@ 0x24
 8003514:	4618      	mov	r0, r3
 8003516:	f7fe fbe3 	bl	8001ce0 <ModbusInit>
    //Start capturing traffic on serial Port
    ModbusStart(&ModbusH);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3324      	adds	r3, #36	@ 0x24
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe fc86 	bl	8001e30 <ModbusStart>
    frequency_start_time = HAL_GetTick();
 8003524:	f000 fc54 	bl	8003dd0 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
    last_receive_count = 0;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
    encoder_initialized = true;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <_ZN21ModbusAbsoluteEncoder15sendModbusQueryEv>:

bool ModbusAbsoluteEncoder::sendModbusQuery() {
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af02      	add	r7, sp, #8
 800354e:	6078      	str	r0, [r7, #4]
    modbus_t telegram;
    constructQuery(&telegram);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	332c      	adds	r3, #44	@ 0x2c
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f107 0208 	add.w	r2, r7, #8
 800355c:	4611      	mov	r1, r2
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
    // 发送Modbus查询（非阻塞）
    ModbusDATA[0] = ~ModbusDATA[0];
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 8003568:	43db      	mvns	r3, r3
 800356a:	b29a      	uxth	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8a3 216c 	strh.w	r2, [r3, #364]	@ 0x16c
    ModbusQuery(&ModbusH, telegram);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	f107 0308 	add.w	r3, r7, #8
 8003580:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003582:	f7fe fe3d 	bl	8002200 <ModbusQuery>

    modbus_state = QUERY_SENT;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
    query_start_time = HAL_GetTick();
 800358e:	f000 fc1f 	bl	8003dd0 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
    return true;
 800359a:	2301      	movs	r3, #1
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv>:

bool ModbusAbsoluteEncoder::checkModbusResponse() {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
    // 检查Modbus响应是否准备好
    // 这里需要根据具体的Modbus库实现来检查
    // 假设ModbusQueryV2是阻塞版本，我们需要非阻塞检查
    
    // 简化实现：检查Modbus状态
    uint32_t u32NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // block until query finishes or timeouts
 80035ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035b0:	2001      	movs	r0, #1
 80035b2:	f011 fd6d 	bl	8015090 <ulTaskNotifyTake>
 80035b6:	60f8      	str	r0, [r7, #12]
    if(u32NotificationValue != OP_OK_QUERY)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b14      	cmp	r3, #20
 80035bc:	d001      	beq.n	80035c2 <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv+0x1e>
    {
        return false;
 80035be:	2300      	movs	r3, #0
 80035c0:	e01e      	b.n	8003600 <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv+0x5c>
    } else {
        // 成功接收到响应
        encoder_receive_count++;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
        uint32_t current_position = ((uint32_t)ModbusDATA[0] << 16) | ModbusDATA[1];
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 80035d6:	041b      	lsls	r3, r3, #16
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	f8b2 216e 	ldrh.w	r2, [r2, #366]	@ 0x16e
 80035de:	4313      	orrs	r3, r2
 80035e0:	60bb      	str	r3, [r7, #8]
        updateAngleFromPosition(current_position);
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f947 	bl	8003878 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm>
        comm_ok = true;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
        last_update_time = HAL_GetTick();
 80035f2:	f000 fbed 	bl	8003dd0 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
        // 通讯完成，检查结果
        return true;
 80035fe:	2301      	movs	r3, #1
    }
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm>:

void ModbusAbsoluteEncoder::startAsyncReading(uint32_t update_frequency_hz) {
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
    if(!htim) {
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d104      	bne.n	8003626 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x1e>
        async_enabled = false;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
        return;
 8003624:	e058      	b.n	80036d8 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0xd0>
    }

    // Configure TIM ARR based on requested frequency (assuming clock already set as in Encoder485)
    uint32_t arr_value = (100000 / update_frequency_hz) - 1;
 8003626:	4a2e      	ldr	r2, [pc, #184]	@ (80036e0 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0xd8>)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	fbb2 f3f3 	udiv	r3, r2, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	60fb      	str	r3, [r7, #12]
    if(arr_value > 65535) arr_value = 65535;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003638:	d302      	bcc.n	8003640 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x38>
 800363a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800363e:	60fb      	str	r3, [r7, #12]
    if(arr_value < 10) arr_value = 10;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b09      	cmp	r3, #9
 8003644:	d801      	bhi.n	800364a <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x42>
 8003646:	230a      	movs	r3, #10
 8003648:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_DISABLE(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6a1a      	ldr	r2, [r3, #32]
 8003654:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003658:	4013      	ands	r3, r2
 800365a:	2b00      	cmp	r3, #0
 800365c:	bf0c      	ite	eq
 800365e:	2301      	moveq	r3, #1
 8003660:	2300      	movne	r3, #0
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01a      	beq.n	800369e <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x96>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6a1a      	ldr	r2, [r3, #32]
 8003672:	f240 4344 	movw	r3, #1092	@ 0x444
 8003676:	4013      	ands	r3, r2
 8003678:	2b00      	cmp	r3, #0
 800367a:	bf0c      	ite	eq
 800367c:	2301      	moveq	r3, #1
 800367e:	2300      	movne	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00b      	beq.n	800369e <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x96>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0201 	bic.w	r2, r2, #1
 800369c:	601a      	str	r2, [r3, #0]
    htim->Instance->ARR = arr_value;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_TIM_SET_COUNTER(htim, 0);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2200      	movs	r2, #0
 80036b4:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start_IT(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80036bc:	4618      	mov	r0, r3
 80036be:	f006 fea5 	bl	800a40c <HAL_TIM_Base_Start_IT>

    async_enabled = true;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
    modbus_state = IDLE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185

    // Initial query so first value is available quickly
    sendModbusQuery();
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff ff38 	bl	8003548 <_ZN21ModbusAbsoluteEncoder15sendModbusQueryEv>
}
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	000186a0 	.word	0x000186a0
 80036e4:	00000000 	.word	0x00000000

080036e8 <_ZN21ModbusAbsoluteEncoder8getAngleEv>:
        HAL_TIM_Base_Stop_IT(htim);
    }
}


float ModbusAbsoluteEncoder::getAngle() {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08a      	sub	sp, #40	@ 0x28
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	6078      	str	r0, [r7, #4]
    if(async_enabled) {
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 318c 	ldrb.w	r3, [r3, #396]	@ 0x18c
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0x1c>
        return cached_angle;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 8003702:	e059      	b.n	80037b8 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xd0>
    }
    // 构建Modbus查询结构体
    modbus_t telegram;
    constructQuery(&telegram);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	332c      	adds	r3, #44	@ 0x2c
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f107 0208 	add.w	r2, r7, #8
 8003710:	4611      	mov	r1, r2
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	4798      	blx	r3
    // 发送Modbus查询（非阻塞）
    ModbusDATA[0] = ~ModbusDATA[0];
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 800371c:	43db      	mvns	r3, r3
 800371e:	b29a      	uxth	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8a3 216c 	strh.w	r2, [r3, #364]	@ 0x16c
    
    uint32_t result = ModbusQueryV2(&ModbusH, telegram);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	f107 0308 	add.w	r3, r7, #8
 8003734:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003736:	f7fe fda9 	bl	800228c <ModbusQueryV2>
 800373a:	61f8      	str	r0, [r7, #28]
    
    if (result != OP_OK_QUERY) {
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	2b14      	cmp	r3, #20
 8003740:	d02a      	beq.n	8003798 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xb0>
        if (first_read) {
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0x6a>
            return 0.0f;
 800374c:	eddf 7a20 	vldr	s15, [pc, #128]	@ 80037d0 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xe8>
 8003750:	e032      	b.n	80037b8 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xd0>
        } else {
            return (float)(last_position % ENCODER_RESOLUTION) * RADIANS_PER_COUNT + 
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8003758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800375c:	ee07 3a90 	vmov	s15, r3
 8003760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003764:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80037d4 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xec>
 8003768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800376c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
                    (float)full_rotations * 2.0f * M_PI;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800377e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003782:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003786:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 80037c8 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xe0>
 800378a:	ee27 7b05 	vmul.f64	d7, d7, d5
            return (float)(last_position % ENCODER_RESOLUTION) * RADIANS_PER_COUNT + 
 800378e:	ee36 7b07 	vadd.f64	d7, d6, d7
                    (float)full_rotations * 2.0f * M_PI;
 8003792:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003796:	e00f      	b.n	80037b8 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xd0>
        }
    }
    
    uint32_t current_position = ((uint32_t)ModbusDATA[0] << 16) | ModbusDATA[1];
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 800379e:	041b      	lsls	r3, r3, #16
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	f8b2 216e 	ldrh.w	r2, [r2, #366]	@ 0x16e
 80037a6:	4313      	orrs	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
    updateAngleFromPosition(current_position);
 80037aa:	69b9      	ldr	r1, [r7, #24]
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f863 	bl	8003878 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm>
    
    return cached_angle;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
}
 80037b8:	eeb0 0a67 	vmov.f32	s0, s15
 80037bc:	3720      	adds	r7, #32
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	f3af 8000 	nop.w
 80037c8:	54442d18 	.word	0x54442d18
 80037cc:	400921fb 	.word	0x400921fb
 80037d0:	00000000 	.word	0x00000000
 80037d4:	3a490fdb 	.word	0x3a490fdb

080037d8 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv>:

void ModbusAbsoluteEncoder::asyncUpdateCallback() {
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
    if(!async_enabled) return;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 318c 	ldrb.w	r3, [r3, #396]	@ 0x18c
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f083 0301 	eor.w	r3, r3, #1
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d122      	bne.n	8003838 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x60>

    switch(modbus_state) {
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x2a>
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d004      	beq.n	800380a <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x32>
 8003800:	e01b      	b.n	800383a <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
        case IDLE:
            sendModbusQuery();
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff fea0 	bl	8003548 <_ZN21ModbusAbsoluteEncoder15sendModbusQueryEv>
//             printf("Sending query...");
            break;
 8003808:	e017      	b.n	800383a <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
        case QUERY_SENT:
            if(checkModbusResponse()) {
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff feca 	bl	80035a4 <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d004      	beq.n	8003820 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x48>
                modbus_state = IDLE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
                // timeout
                comm_ok = false;
                modbus_state = IDLE;
                printf("Timeout, retrying...");
            }
            break;
 800381e:	e00c      	b.n	800383a <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
                comm_ok = false;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
                modbus_state = IDLE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
                printf("Timeout, retrying...");
 8003830:	4803      	ldr	r0, [pc, #12]	@ (8003840 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x68>)
 8003832:	f013 f815 	bl	8016860 <iprintf>
            break;
 8003836:	e000      	b.n	800383a <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
    if(!async_enabled) return;
 8003838:	bf00      	nop
    }
}
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	08017c48 	.word	0x08017c48

08003844 <_ZN21ModbusAbsoluteEncoder14getSensorAngleEv>:

float ModbusAbsoluteEncoder::getSensorAngle() {
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
    return (float)(last_position % ENCODER_RESOLUTION) * RADIANS_PER_COUNT;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8003852:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003874 <_ZN21ModbusAbsoluteEncoder14getSensorAngleEv+0x30>
 8003862:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003866:	eeb0 0a67 	vmov.f32	s0, s15
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	3a490fdb 	.word	0x3a490fdb

08003878 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm>:

uint32_t ModbusAbsoluteEncoder::reg2u32(uint16_t reg) {
    return (uint32_t)reg + ENCODER_ZERO_POSITION;
}

void ModbusAbsoluteEncoder::updateAngleFromPosition(uint32_t current_position) {
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
    if(first_read) {
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
 8003888:	2b00      	cmp	r3, #0
 800388a:	d007      	beq.n	800389c <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm+0x24>
        zero_position = current_position;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
        first_read = false;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
    }

    last_position = current_position;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
    cached_angle = current_position * RADIANS_PER_COUNT;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	ee07 3a90 	vmov	s15, r3
 80038aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ae:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80038d8 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm+0x60>
 80038b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
    if(angleUpdateCallback) {
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d004      	beq.n	80038d0 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm+0x58>
        angleUpdateCallback(current_position);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80038cc:	6838      	ldr	r0, [r7, #0]
 80038ce:	4798      	blx	r3
    }
}
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	3a490fdb 	.word	0x3a490fdb

080038dc <_ZN21ModbusAbsoluteEncoder22setAngleUpdateCallbackEPFvmE>:

void ModbusAbsoluteEncoder::setAngleUpdateCallback(void (*callback)(uint32_t position)) {
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
    angleUpdateCallback = callback;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	ed87 0a01 	vstr	s0, [r7, #4]
 8003904:	edd7 7a01 	vldr	s15, [r7, #4]
 8003908:	eef0 7ae7 	vabs.f32	s15, s15
 800390c:	eeb0 0a67 	vmov.f32	s0, s15
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
	...

0800391c <_ZN6Sensor6updateEv>:
#include "main.h"
#include <cmath>
#include "cmsis_os.h"
#define _2PI 6.28318530718f

void Sensor::update() {
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
    float val = getSensorAngle();
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	331c      	adds	r3, #28
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4798      	blx	r3
 8003930:	ed87 0a03 	vstr	s0, [r7, #12]
    if (val<0) // sensor angles are strictly non-negative. Negative values are used to signal errors.
 8003934:	edd7 7a03 	vldr	s15, [r7, #12]
 8003938:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800393c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003940:	d434      	bmi.n	80039ac <_ZN6Sensor6updateEv+0x90>
        return; // TODO signal error, e.g. via a flag and counter
    angle_prev_ts = HAL_GetTick();
 8003942:	f000 fa45 	bl	8003dd0 <HAL_GetTick>
 8003946:	4603      	mov	r3, r0
 8003948:	461a      	mov	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	611a      	str	r2, [r3, #16]
    float d_angle = val - angle_prev;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	edd3 7a03 	vldr	s15, [r3, #12]
 8003954:	ed97 7a03 	vldr	s14, [r7, #12]
 8003958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800395c:	edc7 7a02 	vstr	s15, [r7, #8]
    // if overflow happened track it as full rotation
    if(abs(d_angle) > (0.8f*_2PI) ) full_rotations += ( d_angle > 0 ) ? -1 : 1; 
 8003960:	ed97 0a02 	vldr	s0, [r7, #8]
 8003964:	f7ff ffc9 	bl	80038fa <_ZSt3absf>
 8003968:	eef0 7a40 	vmov.f32	s15, s0
 800396c:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80039b4 <_ZN6Sensor6updateEv+0x98>
 8003970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003978:	bfcc      	ite	gt
 800397a:	2301      	movgt	r3, #1
 800397c:	2300      	movle	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00f      	beq.n	80039a4 <_ZN6Sensor6updateEv+0x88>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	edd7 7a02 	vldr	s15, [r7, #8]
 800398c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003994:	dd02      	ble.n	800399c <_ZN6Sensor6updateEv+0x80>
 8003996:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800399a:	e000      	b.n	800399e <_ZN6Sensor6updateEv+0x82>
 800399c:	2201      	movs	r2, #1
 800399e:	441a      	add	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	61da      	str	r2, [r3, #28]
    angle_prev = val;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	e000      	b.n	80039ae <_ZN6Sensor6updateEv+0x92>
        return; // TODO signal error, e.g. via a flag and counter
 80039ac:	bf00      	nop
}
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40a0d97c 	.word	0x40a0d97c

080039b8 <_ZN6Sensor11getVelocityEv>:


 /** get current angular velocity (rad/s) */
float Sensor::getVelocity() {
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
    // calculate sample time
    float Ts = (angle_prev_ts - vel_angle_prev_ts)*1e-6f;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	ee07 3a90 	vmov	s15, r3
 80039ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039d2:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8003a90 <_ZN6Sensor11getVelocityEv+0xd8>
 80039d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039da:	edc7 7a03 	vstr	s15, [r7, #12]
    if (Ts < 0.0f) {    // handle micros() overflow - we need to reset vel_angle_prev_ts
 80039de:	edd7 7a03 	vldr	s15, [r7, #12]
 80039e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ea:	d50e      	bpl.n	8003a0a <_ZN6Sensor11getVelocityEv+0x52>
        vel_angle_prev = angle_prev;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	615a      	str	r2, [r3, #20]
        vel_full_rotations = full_rotations;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	621a      	str	r2, [r3, #32]
        vel_angle_prev_ts = angle_prev_ts;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	619a      	str	r2, [r3, #24]
        return velocity;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	e038      	b.n	8003a7c <_ZN6Sensor11getVelocityEv+0xc4>
    }
    if (Ts < min_elapsed_time) return velocity; // don't update velocity if deltaT is too small
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a10:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1c:	d502      	bpl.n	8003a24 <_ZN6Sensor11getVelocityEv+0x6c>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	e02b      	b.n	8003a7c <_ZN6Sensor11getVelocityEv+0xc4>

    velocity = ( (float)(full_rotations - vel_full_rotations)*_2PI + (angle_prev - vel_angle_prev) ) / Ts;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	ee07 3a90 	vmov	s15, r3
 8003a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a36:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003a94 <_ZN6Sensor11getVelocityEv+0xdc>
 8003a3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	edd3 6a03 	vldr	s13, [r3, #12]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	edd3 7a05 	vldr	s15, [r3, #20]
 8003a4a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a4e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003a52:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	edc3 7a02 	vstr	s15, [r3, #8]
    vel_angle_prev = angle_prev;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	615a      	str	r2, [r3, #20]
    vel_full_rotations = full_rotations;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69da      	ldr	r2, [r3, #28]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	621a      	str	r2, [r3, #32]
    vel_angle_prev_ts = angle_prev_ts;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	619a      	str	r2, [r3, #24]
    return velocity;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
}
 8003a7c:	ee07 3a90 	vmov	s15, r3
 8003a80:	eeb0 0a67 	vmov.f32	s0, s15
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	358637bd 	.word	0x358637bd
 8003a94:	40c90fdb 	.word	0x40c90fdb

08003a98 <_ZN6Sensor4initEv>:



void Sensor::init() {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
    // initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
    getSensorAngle(); // call once
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	331c      	adds	r3, #28
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
    osDelay(1);
 8003aac:	2001      	movs	r0, #1
 8003aae:	f00e fccd 	bl	801244c <osDelay>
    vel_angle_prev = getSensorAngle(); // call again
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	331c      	adds	r3, #28
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	4798      	blx	r3
 8003abe:	eef0 7a40 	vmov.f32	s15, s0
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	edc3 7a05 	vstr	s15, [r3, #20]
    vel_angle_prev_ts = HAL_GetTick();
 8003ac8:	f000 f982 	bl	8003dd0 <HAL_GetTick>
 8003acc:	4603      	mov	r3, r0
 8003ace:	461a      	mov	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	619a      	str	r2, [r3, #24]
    osDelay(1);
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	f00e fcb9 	bl	801244c <osDelay>
    getSensorAngle(); // call once
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	331c      	adds	r3, #28
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
    osDelay(1);
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	f00e fcb0 	bl	801244c <osDelay>
    angle_prev = getSensorAngle(); // call again
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	331c      	adds	r3, #28
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
 8003af8:	eef0 7a40 	vmov.f32	s15, s0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	edc3 7a03 	vstr	s15, [r3, #12]
    angle_prev_ts = HAL_GetTick();
 8003b02:	f000 f965 	bl	8003dd0 <HAL_GetTick>
 8003b06:	4603      	mov	r3, r0
 8003b08:	461a      	mov	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	611a      	str	r2, [r3, #16]
}
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <_ZN6Sensor18getMechanicalAngleEv>:


float Sensor::getMechanicalAngle() {
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
    return angle_prev;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	ee07 3a90 	vmov	s15, r3
}
 8003b26:	eeb0 0a67 	vmov.f32	s0, s15
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <_ZN6Sensor8getAngleEv>:



float Sensor::getAngle(){
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
    return (float)full_rotations * _2PI + angle_prev;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	ee07 3a90 	vmov	s15, r3
 8003b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b48:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003b68 <_ZN6Sensor8getAngleEv+0x34>
 8003b4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b56:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	40c90fdb 	.word	0x40c90fdb
 8003b6c:	00000000 	.word	0x00000000

08003b70 <_ZN6Sensor15getPreciseAngleEv>:



double Sensor::getPreciseAngle() {
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
    return (double)full_rotations * (double)_2PI + (double)angle_prev;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	ee07 3a90 	vmov	s15, r3
 8003b80:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003b84:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8003ba8 <_ZN6Sensor15getPreciseAngleEv+0x38>
 8003b88:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b96:	ee36 7b07 	vadd.f64	d7, d6, d7
}
 8003b9a:	eeb0 0b47 	vmov.f64	d0, d7
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	60000000 	.word	0x60000000
 8003bac:	401921fb 	.word	0x401921fb

08003bb0 <_ZN6Sensor16getFullRotationsEv>:



int32_t Sensor::getFullRotations() {
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
    return full_rotations;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69db      	ldr	r3, [r3, #28]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <_ZN6Sensor11needsSearchEv>:



int Sensor::needsSearch() {
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
    return 0; // default false
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
	...

08003be0 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8003bec:	2300      	movs	r3, #0
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	e019      	b.n	8003c26 <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 8003bf2:	4a17      	ldr	r2, [pc, #92]	@ (8003c50 <HAL_UART_TxCpltCallback+0x70>)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d10e      	bne.n	8003c20 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8003c02:	4a13      	ldr	r2, [pc, #76]	@ (8003c50 <HAL_UART_TxCpltCallback+0x70>)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0a:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8003c0e:	f107 0308 	add.w	r3, r7, #8
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	2300      	movs	r3, #0
 8003c16:	2200      	movs	r2, #0
 8003c18:	2100      	movs	r1, #0
 8003c1a:	f011 fb47 	bl	80152ac <xTaskGenericNotifyFromISR>
	   		break;
 8003c1e:	e008      	b.n	8003c32 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	3301      	adds	r3, #1
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	4b0b      	ldr	r3, [pc, #44]	@ (8003c54 <HAL_UART_TxCpltCallback+0x74>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	dbdf      	blt.n	8003bf2 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <HAL_UART_TxCpltCallback+0x68>
 8003c38:	4b07      	ldr	r3, [pc, #28]	@ (8003c58 <HAL_UART_TxCpltCallback+0x78>)
 8003c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8003c48:	bf00      	nop
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	24000a28 	.word	0x24000a28
 8003c54:	24000a30 	.word	0x24000a30
 8003c58:	e000ed04 	.word	0xe000ed04

08003c5c <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8003c5c:	b590      	push	{r4, r7, lr}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af02      	add	r7, sp, #8
 8003c62:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	e042      	b.n	8003cf4 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8003c6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003d24 <HAL_UART_RxCpltCallback+0xc8>)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d137      	bne.n	8003cee <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 8003c7e:	4a29      	ldr	r2, [pc, #164]	@ (8003d24 <HAL_UART_RxCpltCallback+0xc8>)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c86:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d139      	bne.n	8003d02 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8003c8e:	4a25      	ldr	r2, [pc, #148]	@ (8003d24 <HAL_UART_RxCpltCallback+0xc8>)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c96:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8003c9a:	4922      	ldr	r1, [pc, #136]	@ (8003d24 <HAL_UART_RxCpltCallback+0xc8>)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ca2:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4610      	mov	r0, r2
 8003caa:	f7fd ff51 	bl	8001b50 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8003cae:	4a1d      	ldr	r2, [pc, #116]	@ (8003d24 <HAL_UART_RxCpltCallback+0xc8>)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb6:	6858      	ldr	r0, [r3, #4]
 8003cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8003d24 <HAL_UART_RxCpltCallback+0xc8>)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc0:	33a6      	adds	r3, #166	@ 0xa6
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	f007 fc87 	bl	800b5d8 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8003cca:	4a16      	ldr	r2, [pc, #88]	@ (8003d24 <HAL_UART_RxCpltCallback+0xc8>)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd2:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 8003cd6:	f010 fc39 	bl	801454c <xTaskGetTickCountFromISR>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	f107 0308 	add.w	r3, r7, #8
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	9100      	str	r1, [sp, #0]
 8003ce4:	2107      	movs	r1, #7
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	f011 fcc2 	bl	8015670 <xTimerGenericCommand>
    		}
    		break;
 8003cec:	e009      	b.n	8003d02 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d28 <HAL_UART_RxCpltCallback+0xcc>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	dbb6      	blt.n	8003c6e <HAL_UART_RxCpltCallback+0x12>
 8003d00:	e000      	b.n	8003d04 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 8003d02:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d007      	beq.n	8003d1a <HAL_UART_RxCpltCallback+0xbe>
 8003d0a:	4b08      	ldr	r3, [pc, #32]	@ (8003d2c <HAL_UART_RxCpltCallback+0xd0>)
 8003d0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	f3bf 8f4f 	dsb	sy
 8003d16:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 8003d1a:	bf00      	nop
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd90      	pop	{r4, r7, pc}
 8003d22:	bf00      	nop
 8003d24:	24000a28 	.word	0x24000a28
 8003d28:	24000a30 	.word	0x24000a30
 8003d2c:	e000ed04 	.word	0xe000ed04

08003d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d36:	2003      	movs	r0, #3
 8003d38:	f000 f933 	bl	8003fa2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d3c:	f001 ff8a 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b15      	ldr	r3, [pc, #84]	@ (8003d98 <HAL_Init+0x68>)
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	0a1b      	lsrs	r3, r3, #8
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	4913      	ldr	r1, [pc, #76]	@ (8003d9c <HAL_Init+0x6c>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
 8003d58:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d98 <HAL_Init+0x68>)
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	4a0e      	ldr	r2, [pc, #56]	@ (8003d9c <HAL_Init+0x6c>)
 8003d64:	5cd3      	ldrb	r3, [r2, r3]
 8003d66:	f003 031f 	and.w	r3, r3, #31
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d70:	4a0b      	ldr	r2, [pc, #44]	@ (8003da0 <HAL_Init+0x70>)
 8003d72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d74:	4a0b      	ldr	r2, [pc, #44]	@ (8003da4 <HAL_Init+0x74>)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d7a:	200f      	movs	r0, #15
 8003d7c:	f7fd fc9e 	bl	80016bc <HAL_InitTick>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e002      	b.n	8003d90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003d8a:	f7fd fb4d 	bl	8001428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	58024400 	.word	0x58024400
 8003d9c:	08017d04 	.word	0x08017d04
 8003da0:	24000004 	.word	0x24000004
 8003da4:	24000000 	.word	0x24000000

08003da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003dac:	4b06      	ldr	r3, [pc, #24]	@ (8003dc8 <HAL_IncTick+0x20>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	4b06      	ldr	r3, [pc, #24]	@ (8003dcc <HAL_IncTick+0x24>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4413      	add	r3, r2
 8003db8:	4a04      	ldr	r2, [pc, #16]	@ (8003dcc <HAL_IncTick+0x24>)
 8003dba:	6013      	str	r3, [r2, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	2400000c 	.word	0x2400000c
 8003dcc:	24000a34 	.word	0x24000a34

08003dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8003dd4:	4b03      	ldr	r3, [pc, #12]	@ (8003de4 <HAL_GetTick+0x14>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	24000a34 	.word	0x24000a34

08003de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003df0:	f7ff ffee 	bl	8003dd0 <HAL_GetTick>
 8003df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e00:	d005      	beq.n	8003e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e02:	4b0a      	ldr	r3, [pc, #40]	@ (8003e2c <HAL_Delay+0x44>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e0e:	bf00      	nop
 8003e10:	f7ff ffde 	bl	8003dd0 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d8f7      	bhi.n	8003e10 <HAL_Delay+0x28>
  {
  }
}
 8003e20:	bf00      	nop
 8003e22:	bf00      	nop
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	2400000c 	.word	0x2400000c

08003e30 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003e34:	4b03      	ldr	r3, [pc, #12]	@ (8003e44 <HAL_GetREVID+0x14>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	0c1b      	lsrs	r3, r3, #16
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	5c001000 	.word	0x5c001000

08003e48 <__NVIC_SetPriorityGrouping>:
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e58:	4b0b      	ldr	r3, [pc, #44]	@ (8003e88 <__NVIC_SetPriorityGrouping+0x40>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e64:	4013      	ands	r3, r2
 8003e66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e70:	4b06      	ldr	r3, [pc, #24]	@ (8003e8c <__NVIC_SetPriorityGrouping+0x44>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e76:	4a04      	ldr	r2, [pc, #16]	@ (8003e88 <__NVIC_SetPriorityGrouping+0x40>)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	60d3      	str	r3, [r2, #12]
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	e000ed00 	.word	0xe000ed00
 8003e8c:	05fa0000 	.word	0x05fa0000

08003e90 <__NVIC_GetPriorityGrouping>:
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e94:	4b04      	ldr	r3, [pc, #16]	@ (8003ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	0a1b      	lsrs	r3, r3, #8
 8003e9a:	f003 0307 	and.w	r3, r3, #7
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	e000ed00 	.word	0xe000ed00

08003eac <__NVIC_EnableIRQ>:
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	db0b      	blt.n	8003ed6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	f003 021f 	and.w	r2, r3, #31
 8003ec4:	4907      	ldr	r1, [pc, #28]	@ (8003ee4 <__NVIC_EnableIRQ+0x38>)
 8003ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eca:	095b      	lsrs	r3, r3, #5
 8003ecc:	2001      	movs	r0, #1
 8003ece:	fa00 f202 	lsl.w	r2, r0, r2
 8003ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	e000e100 	.word	0xe000e100

08003ee8 <__NVIC_SetPriority>:
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	6039      	str	r1, [r7, #0]
 8003ef2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ef4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	db0a      	blt.n	8003f12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	490c      	ldr	r1, [pc, #48]	@ (8003f34 <__NVIC_SetPriority+0x4c>)
 8003f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f06:	0112      	lsls	r2, r2, #4
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003f10:	e00a      	b.n	8003f28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	4908      	ldr	r1, [pc, #32]	@ (8003f38 <__NVIC_SetPriority+0x50>)
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	3b04      	subs	r3, #4
 8003f20:	0112      	lsls	r2, r2, #4
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	440b      	add	r3, r1
 8003f26:	761a      	strb	r2, [r3, #24]
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	e000e100 	.word	0xe000e100
 8003f38:	e000ed00 	.word	0xe000ed00

08003f3c <NVIC_EncodePriority>:
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b089      	sub	sp, #36	@ 0x24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f1c3 0307 	rsb	r3, r3, #7
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	bf28      	it	cs
 8003f5a:	2304      	movcs	r3, #4
 8003f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	3304      	adds	r3, #4
 8003f62:	2b06      	cmp	r3, #6
 8003f64:	d902      	bls.n	8003f6c <NVIC_EncodePriority+0x30>
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	3b03      	subs	r3, #3
 8003f6a:	e000      	b.n	8003f6e <NVIC_EncodePriority+0x32>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43da      	mvns	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	401a      	ands	r2, r3
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8e:	43d9      	mvns	r1, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f94:	4313      	orrs	r3, r2
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3724      	adds	r7, #36	@ 0x24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff ff4c 	bl	8003e48 <__NVIC_SetPriorityGrouping>
}
 8003fb0:	bf00      	nop
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fc6:	f7ff ff63 	bl	8003e90 <__NVIC_GetPriorityGrouping>
 8003fca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	68b9      	ldr	r1, [r7, #8]
 8003fd0:	6978      	ldr	r0, [r7, #20]
 8003fd2:	f7ff ffb3 	bl	8003f3c <NVIC_EncodePriority>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003fdc:	4611      	mov	r1, r2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff ff82 	bl	8003ee8 <__NVIC_SetPriority>
}
 8003fe4:	bf00      	nop
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff ff56 	bl	8003eac <__NVIC_EnableIRQ>
}
 8004000:	bf00      	nop
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800400c:	f3bf 8f5f 	dmb	sy
}
 8004010:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004012:	4b07      	ldr	r3, [pc, #28]	@ (8004030 <HAL_MPU_Disable+0x28>)
 8004014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004016:	4a06      	ldr	r2, [pc, #24]	@ (8004030 <HAL_MPU_Disable+0x28>)
 8004018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800401c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800401e:	4b05      	ldr	r3, [pc, #20]	@ (8004034 <HAL_MPU_Disable+0x2c>)
 8004020:	2200      	movs	r2, #0
 8004022:	605a      	str	r2, [r3, #4]
}
 8004024:	bf00      	nop
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	e000ed00 	.word	0xe000ed00
 8004034:	e000ed90 	.word	0xe000ed90

08004038 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004040:	4a0b      	ldr	r2, [pc, #44]	@ (8004070 <HAL_MPU_Enable+0x38>)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800404a:	4b0a      	ldr	r3, [pc, #40]	@ (8004074 <HAL_MPU_Enable+0x3c>)
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	4a09      	ldr	r2, [pc, #36]	@ (8004074 <HAL_MPU_Enable+0x3c>)
 8004050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004054:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004056:	f3bf 8f4f 	dsb	sy
}
 800405a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800405c:	f3bf 8f6f 	isb	sy
}
 8004060:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	e000ed90 	.word	0xe000ed90
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	785a      	ldrb	r2, [r3, #1]
 8004084:	4b1d      	ldr	r3, [pc, #116]	@ (80040fc <HAL_MPU_ConfigRegion+0x84>)
 8004086:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d029      	beq.n	80040e4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004090:	4a1a      	ldr	r2, [pc, #104]	@ (80040fc <HAL_MPU_ConfigRegion+0x84>)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	7b1b      	ldrb	r3, [r3, #12]
 800409c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	7adb      	ldrb	r3, [r3, #11]
 80040a2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80040a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	7a9b      	ldrb	r3, [r3, #10]
 80040aa:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80040ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	7b5b      	ldrb	r3, [r3, #13]
 80040b2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80040b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	7b9b      	ldrb	r3, [r3, #14]
 80040ba:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80040bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	7bdb      	ldrb	r3, [r3, #15]
 80040c2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80040c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	7a5b      	ldrb	r3, [r3, #9]
 80040ca:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80040cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	7a1b      	ldrb	r3, [r3, #8]
 80040d2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80040d4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	7812      	ldrb	r2, [r2, #0]
 80040da:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80040dc:	4a07      	ldr	r2, [pc, #28]	@ (80040fc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80040de:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80040e0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80040e2:	e005      	b.n	80040f0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80040e4:	4b05      	ldr	r3, [pc, #20]	@ (80040fc <HAL_MPU_ConfigRegion+0x84>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80040ea:	4b04      	ldr	r3, [pc, #16]	@ (80040fc <HAL_MPU_ConfigRegion+0x84>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	611a      	str	r2, [r3, #16]
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	e000ed90 	.word	0xe000ed90

08004100 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004108:	f7ff fe62 	bl	8003dd0 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e2dc      	b.n	80046d2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d008      	beq.n	8004136 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2280      	movs	r2, #128	@ 0x80
 8004128:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e2cd      	b.n	80046d2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a76      	ldr	r2, [pc, #472]	@ (8004314 <HAL_DMA_Abort+0x214>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d04a      	beq.n	80041d6 <HAL_DMA_Abort+0xd6>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a74      	ldr	r2, [pc, #464]	@ (8004318 <HAL_DMA_Abort+0x218>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d045      	beq.n	80041d6 <HAL_DMA_Abort+0xd6>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a73      	ldr	r2, [pc, #460]	@ (800431c <HAL_DMA_Abort+0x21c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d040      	beq.n	80041d6 <HAL_DMA_Abort+0xd6>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a71      	ldr	r2, [pc, #452]	@ (8004320 <HAL_DMA_Abort+0x220>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d03b      	beq.n	80041d6 <HAL_DMA_Abort+0xd6>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a70      	ldr	r2, [pc, #448]	@ (8004324 <HAL_DMA_Abort+0x224>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d036      	beq.n	80041d6 <HAL_DMA_Abort+0xd6>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a6e      	ldr	r2, [pc, #440]	@ (8004328 <HAL_DMA_Abort+0x228>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d031      	beq.n	80041d6 <HAL_DMA_Abort+0xd6>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a6d      	ldr	r2, [pc, #436]	@ (800432c <HAL_DMA_Abort+0x22c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d02c      	beq.n	80041d6 <HAL_DMA_Abort+0xd6>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a6b      	ldr	r2, [pc, #428]	@ (8004330 <HAL_DMA_Abort+0x230>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d027      	beq.n	80041d6 <HAL_DMA_Abort+0xd6>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a6a      	ldr	r2, [pc, #424]	@ (8004334 <HAL_DMA_Abort+0x234>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d022      	beq.n	80041d6 <HAL_DMA_Abort+0xd6>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a68      	ldr	r2, [pc, #416]	@ (8004338 <HAL_DMA_Abort+0x238>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d01d      	beq.n	80041d6 <HAL_DMA_Abort+0xd6>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a67      	ldr	r2, [pc, #412]	@ (800433c <HAL_DMA_Abort+0x23c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d018      	beq.n	80041d6 <HAL_DMA_Abort+0xd6>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a65      	ldr	r2, [pc, #404]	@ (8004340 <HAL_DMA_Abort+0x240>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d013      	beq.n	80041d6 <HAL_DMA_Abort+0xd6>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a64      	ldr	r2, [pc, #400]	@ (8004344 <HAL_DMA_Abort+0x244>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00e      	beq.n	80041d6 <HAL_DMA_Abort+0xd6>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a62      	ldr	r2, [pc, #392]	@ (8004348 <HAL_DMA_Abort+0x248>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d009      	beq.n	80041d6 <HAL_DMA_Abort+0xd6>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a61      	ldr	r2, [pc, #388]	@ (800434c <HAL_DMA_Abort+0x24c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d004      	beq.n	80041d6 <HAL_DMA_Abort+0xd6>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a5f      	ldr	r2, [pc, #380]	@ (8004350 <HAL_DMA_Abort+0x250>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d101      	bne.n	80041da <HAL_DMA_Abort+0xda>
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <HAL_DMA_Abort+0xdc>
 80041da:	2300      	movs	r3, #0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d013      	beq.n	8004208 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 021e 	bic.w	r2, r2, #30
 80041ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695a      	ldr	r2, [r3, #20]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041fe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	e00a      	b.n	800421e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 020e 	bic.w	r2, r2, #14
 8004216:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a3c      	ldr	r2, [pc, #240]	@ (8004314 <HAL_DMA_Abort+0x214>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d072      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a3a      	ldr	r2, [pc, #232]	@ (8004318 <HAL_DMA_Abort+0x218>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d06d      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a39      	ldr	r2, [pc, #228]	@ (800431c <HAL_DMA_Abort+0x21c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d068      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a37      	ldr	r2, [pc, #220]	@ (8004320 <HAL_DMA_Abort+0x220>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d063      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a36      	ldr	r2, [pc, #216]	@ (8004324 <HAL_DMA_Abort+0x224>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d05e      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a34      	ldr	r2, [pc, #208]	@ (8004328 <HAL_DMA_Abort+0x228>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d059      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a33      	ldr	r2, [pc, #204]	@ (800432c <HAL_DMA_Abort+0x22c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d054      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a31      	ldr	r2, [pc, #196]	@ (8004330 <HAL_DMA_Abort+0x230>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d04f      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a30      	ldr	r2, [pc, #192]	@ (8004334 <HAL_DMA_Abort+0x234>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d04a      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a2e      	ldr	r2, [pc, #184]	@ (8004338 <HAL_DMA_Abort+0x238>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d045      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a2d      	ldr	r2, [pc, #180]	@ (800433c <HAL_DMA_Abort+0x23c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d040      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a2b      	ldr	r2, [pc, #172]	@ (8004340 <HAL_DMA_Abort+0x240>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d03b      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a2a      	ldr	r2, [pc, #168]	@ (8004344 <HAL_DMA_Abort+0x244>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d036      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a28      	ldr	r2, [pc, #160]	@ (8004348 <HAL_DMA_Abort+0x248>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d031      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a27      	ldr	r2, [pc, #156]	@ (800434c <HAL_DMA_Abort+0x24c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d02c      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a25      	ldr	r2, [pc, #148]	@ (8004350 <HAL_DMA_Abort+0x250>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d027      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a24      	ldr	r2, [pc, #144]	@ (8004354 <HAL_DMA_Abort+0x254>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d022      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a22      	ldr	r2, [pc, #136]	@ (8004358 <HAL_DMA_Abort+0x258>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d01d      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a21      	ldr	r2, [pc, #132]	@ (800435c <HAL_DMA_Abort+0x25c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d018      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004360 <HAL_DMA_Abort+0x260>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004364 <HAL_DMA_Abort+0x264>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00e      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004368 <HAL_DMA_Abort+0x268>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d009      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1b      	ldr	r2, [pc, #108]	@ (800436c <HAL_DMA_Abort+0x26c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d004      	beq.n	800430e <HAL_DMA_Abort+0x20e>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a19      	ldr	r2, [pc, #100]	@ (8004370 <HAL_DMA_Abort+0x270>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d132      	bne.n	8004374 <HAL_DMA_Abort+0x274>
 800430e:	2301      	movs	r3, #1
 8004310:	e031      	b.n	8004376 <HAL_DMA_Abort+0x276>
 8004312:	bf00      	nop
 8004314:	40020010 	.word	0x40020010
 8004318:	40020028 	.word	0x40020028
 800431c:	40020040 	.word	0x40020040
 8004320:	40020058 	.word	0x40020058
 8004324:	40020070 	.word	0x40020070
 8004328:	40020088 	.word	0x40020088
 800432c:	400200a0 	.word	0x400200a0
 8004330:	400200b8 	.word	0x400200b8
 8004334:	40020410 	.word	0x40020410
 8004338:	40020428 	.word	0x40020428
 800433c:	40020440 	.word	0x40020440
 8004340:	40020458 	.word	0x40020458
 8004344:	40020470 	.word	0x40020470
 8004348:	40020488 	.word	0x40020488
 800434c:	400204a0 	.word	0x400204a0
 8004350:	400204b8 	.word	0x400204b8
 8004354:	58025408 	.word	0x58025408
 8004358:	5802541c 	.word	0x5802541c
 800435c:	58025430 	.word	0x58025430
 8004360:	58025444 	.word	0x58025444
 8004364:	58025458 	.word	0x58025458
 8004368:	5802546c 	.word	0x5802546c
 800436c:	58025480 	.word	0x58025480
 8004370:	58025494 	.word	0x58025494
 8004374:	2300      	movs	r3, #0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004384:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004388:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a6d      	ldr	r2, [pc, #436]	@ (8004544 <HAL_DMA_Abort+0x444>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d04a      	beq.n	800442a <HAL_DMA_Abort+0x32a>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a6b      	ldr	r2, [pc, #428]	@ (8004548 <HAL_DMA_Abort+0x448>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d045      	beq.n	800442a <HAL_DMA_Abort+0x32a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a6a      	ldr	r2, [pc, #424]	@ (800454c <HAL_DMA_Abort+0x44c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d040      	beq.n	800442a <HAL_DMA_Abort+0x32a>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a68      	ldr	r2, [pc, #416]	@ (8004550 <HAL_DMA_Abort+0x450>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d03b      	beq.n	800442a <HAL_DMA_Abort+0x32a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a67      	ldr	r2, [pc, #412]	@ (8004554 <HAL_DMA_Abort+0x454>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d036      	beq.n	800442a <HAL_DMA_Abort+0x32a>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a65      	ldr	r2, [pc, #404]	@ (8004558 <HAL_DMA_Abort+0x458>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d031      	beq.n	800442a <HAL_DMA_Abort+0x32a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a64      	ldr	r2, [pc, #400]	@ (800455c <HAL_DMA_Abort+0x45c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d02c      	beq.n	800442a <HAL_DMA_Abort+0x32a>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a62      	ldr	r2, [pc, #392]	@ (8004560 <HAL_DMA_Abort+0x460>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d027      	beq.n	800442a <HAL_DMA_Abort+0x32a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a61      	ldr	r2, [pc, #388]	@ (8004564 <HAL_DMA_Abort+0x464>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d022      	beq.n	800442a <HAL_DMA_Abort+0x32a>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a5f      	ldr	r2, [pc, #380]	@ (8004568 <HAL_DMA_Abort+0x468>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d01d      	beq.n	800442a <HAL_DMA_Abort+0x32a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a5e      	ldr	r2, [pc, #376]	@ (800456c <HAL_DMA_Abort+0x46c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d018      	beq.n	800442a <HAL_DMA_Abort+0x32a>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a5c      	ldr	r2, [pc, #368]	@ (8004570 <HAL_DMA_Abort+0x470>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d013      	beq.n	800442a <HAL_DMA_Abort+0x32a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a5b      	ldr	r2, [pc, #364]	@ (8004574 <HAL_DMA_Abort+0x474>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00e      	beq.n	800442a <HAL_DMA_Abort+0x32a>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a59      	ldr	r2, [pc, #356]	@ (8004578 <HAL_DMA_Abort+0x478>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d009      	beq.n	800442a <HAL_DMA_Abort+0x32a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a58      	ldr	r2, [pc, #352]	@ (800457c <HAL_DMA_Abort+0x47c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d004      	beq.n	800442a <HAL_DMA_Abort+0x32a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a56      	ldr	r2, [pc, #344]	@ (8004580 <HAL_DMA_Abort+0x480>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d108      	bne.n	800443c <HAL_DMA_Abort+0x33c>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0201 	bic.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	e007      	b.n	800444c <HAL_DMA_Abort+0x34c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800444c:	e013      	b.n	8004476 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800444e:	f7ff fcbf 	bl	8003dd0 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b05      	cmp	r3, #5
 800445a:	d90c      	bls.n	8004476 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2220      	movs	r2, #32
 8004460:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2203      	movs	r2, #3
 8004466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e12d      	b.n	80046d2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1e5      	bne.n	800444e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a2f      	ldr	r2, [pc, #188]	@ (8004544 <HAL_DMA_Abort+0x444>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d04a      	beq.n	8004522 <HAL_DMA_Abort+0x422>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a2d      	ldr	r2, [pc, #180]	@ (8004548 <HAL_DMA_Abort+0x448>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d045      	beq.n	8004522 <HAL_DMA_Abort+0x422>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a2c      	ldr	r2, [pc, #176]	@ (800454c <HAL_DMA_Abort+0x44c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d040      	beq.n	8004522 <HAL_DMA_Abort+0x422>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a2a      	ldr	r2, [pc, #168]	@ (8004550 <HAL_DMA_Abort+0x450>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d03b      	beq.n	8004522 <HAL_DMA_Abort+0x422>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a29      	ldr	r2, [pc, #164]	@ (8004554 <HAL_DMA_Abort+0x454>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d036      	beq.n	8004522 <HAL_DMA_Abort+0x422>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a27      	ldr	r2, [pc, #156]	@ (8004558 <HAL_DMA_Abort+0x458>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d031      	beq.n	8004522 <HAL_DMA_Abort+0x422>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a26      	ldr	r2, [pc, #152]	@ (800455c <HAL_DMA_Abort+0x45c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d02c      	beq.n	8004522 <HAL_DMA_Abort+0x422>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a24      	ldr	r2, [pc, #144]	@ (8004560 <HAL_DMA_Abort+0x460>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d027      	beq.n	8004522 <HAL_DMA_Abort+0x422>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a23      	ldr	r2, [pc, #140]	@ (8004564 <HAL_DMA_Abort+0x464>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d022      	beq.n	8004522 <HAL_DMA_Abort+0x422>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a21      	ldr	r2, [pc, #132]	@ (8004568 <HAL_DMA_Abort+0x468>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01d      	beq.n	8004522 <HAL_DMA_Abort+0x422>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a20      	ldr	r2, [pc, #128]	@ (800456c <HAL_DMA_Abort+0x46c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d018      	beq.n	8004522 <HAL_DMA_Abort+0x422>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004570 <HAL_DMA_Abort+0x470>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d013      	beq.n	8004522 <HAL_DMA_Abort+0x422>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004574 <HAL_DMA_Abort+0x474>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00e      	beq.n	8004522 <HAL_DMA_Abort+0x422>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1b      	ldr	r2, [pc, #108]	@ (8004578 <HAL_DMA_Abort+0x478>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d009      	beq.n	8004522 <HAL_DMA_Abort+0x422>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a1a      	ldr	r2, [pc, #104]	@ (800457c <HAL_DMA_Abort+0x47c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <HAL_DMA_Abort+0x422>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a18      	ldr	r2, [pc, #96]	@ (8004580 <HAL_DMA_Abort+0x480>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d101      	bne.n	8004526 <HAL_DMA_Abort+0x426>
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <HAL_DMA_Abort+0x428>
 8004526:	2300      	movs	r3, #0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d02b      	beq.n	8004584 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004530:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004536:	f003 031f 	and.w	r3, r3, #31
 800453a:	223f      	movs	r2, #63	@ 0x3f
 800453c:	409a      	lsls	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	609a      	str	r2, [r3, #8]
 8004542:	e02a      	b.n	800459a <HAL_DMA_Abort+0x49a>
 8004544:	40020010 	.word	0x40020010
 8004548:	40020028 	.word	0x40020028
 800454c:	40020040 	.word	0x40020040
 8004550:	40020058 	.word	0x40020058
 8004554:	40020070 	.word	0x40020070
 8004558:	40020088 	.word	0x40020088
 800455c:	400200a0 	.word	0x400200a0
 8004560:	400200b8 	.word	0x400200b8
 8004564:	40020410 	.word	0x40020410
 8004568:	40020428 	.word	0x40020428
 800456c:	40020440 	.word	0x40020440
 8004570:	40020458 	.word	0x40020458
 8004574:	40020470 	.word	0x40020470
 8004578:	40020488 	.word	0x40020488
 800457c:	400204a0 	.word	0x400204a0
 8004580:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004588:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	2201      	movs	r2, #1
 8004594:	409a      	lsls	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a4f      	ldr	r2, [pc, #316]	@ (80046dc <HAL_DMA_Abort+0x5dc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d072      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a4d      	ldr	r2, [pc, #308]	@ (80046e0 <HAL_DMA_Abort+0x5e0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d06d      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a4c      	ldr	r2, [pc, #304]	@ (80046e4 <HAL_DMA_Abort+0x5e4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d068      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a4a      	ldr	r2, [pc, #296]	@ (80046e8 <HAL_DMA_Abort+0x5e8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d063      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a49      	ldr	r2, [pc, #292]	@ (80046ec <HAL_DMA_Abort+0x5ec>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d05e      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a47      	ldr	r2, [pc, #284]	@ (80046f0 <HAL_DMA_Abort+0x5f0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d059      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a46      	ldr	r2, [pc, #280]	@ (80046f4 <HAL_DMA_Abort+0x5f4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d054      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a44      	ldr	r2, [pc, #272]	@ (80046f8 <HAL_DMA_Abort+0x5f8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d04f      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a43      	ldr	r2, [pc, #268]	@ (80046fc <HAL_DMA_Abort+0x5fc>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d04a      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a41      	ldr	r2, [pc, #260]	@ (8004700 <HAL_DMA_Abort+0x600>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d045      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a40      	ldr	r2, [pc, #256]	@ (8004704 <HAL_DMA_Abort+0x604>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d040      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a3e      	ldr	r2, [pc, #248]	@ (8004708 <HAL_DMA_Abort+0x608>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d03b      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a3d      	ldr	r2, [pc, #244]	@ (800470c <HAL_DMA_Abort+0x60c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d036      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a3b      	ldr	r2, [pc, #236]	@ (8004710 <HAL_DMA_Abort+0x610>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d031      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a3a      	ldr	r2, [pc, #232]	@ (8004714 <HAL_DMA_Abort+0x614>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d02c      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a38      	ldr	r2, [pc, #224]	@ (8004718 <HAL_DMA_Abort+0x618>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d027      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a37      	ldr	r2, [pc, #220]	@ (800471c <HAL_DMA_Abort+0x61c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d022      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a35      	ldr	r2, [pc, #212]	@ (8004720 <HAL_DMA_Abort+0x620>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d01d      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a34      	ldr	r2, [pc, #208]	@ (8004724 <HAL_DMA_Abort+0x624>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d018      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a32      	ldr	r2, [pc, #200]	@ (8004728 <HAL_DMA_Abort+0x628>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d013      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a31      	ldr	r2, [pc, #196]	@ (800472c <HAL_DMA_Abort+0x62c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00e      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a2f      	ldr	r2, [pc, #188]	@ (8004730 <HAL_DMA_Abort+0x630>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d009      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a2e      	ldr	r2, [pc, #184]	@ (8004734 <HAL_DMA_Abort+0x634>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d004      	beq.n	800468a <HAL_DMA_Abort+0x58a>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a2c      	ldr	r2, [pc, #176]	@ (8004738 <HAL_DMA_Abort+0x638>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d101      	bne.n	800468e <HAL_DMA_Abort+0x58e>
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <HAL_DMA_Abort+0x590>
 800468e:	2300      	movs	r3, #0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d015      	beq.n	80046c0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800469c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00c      	beq.n	80046c0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046b4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80046be:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40020010 	.word	0x40020010
 80046e0:	40020028 	.word	0x40020028
 80046e4:	40020040 	.word	0x40020040
 80046e8:	40020058 	.word	0x40020058
 80046ec:	40020070 	.word	0x40020070
 80046f0:	40020088 	.word	0x40020088
 80046f4:	400200a0 	.word	0x400200a0
 80046f8:	400200b8 	.word	0x400200b8
 80046fc:	40020410 	.word	0x40020410
 8004700:	40020428 	.word	0x40020428
 8004704:	40020440 	.word	0x40020440
 8004708:	40020458 	.word	0x40020458
 800470c:	40020470 	.word	0x40020470
 8004710:	40020488 	.word	0x40020488
 8004714:	400204a0 	.word	0x400204a0
 8004718:	400204b8 	.word	0x400204b8
 800471c:	58025408 	.word	0x58025408
 8004720:	5802541c 	.word	0x5802541c
 8004724:	58025430 	.word	0x58025430
 8004728:	58025444 	.word	0x58025444
 800472c:	58025458 	.word	0x58025458
 8004730:	5802546c 	.word	0x5802546c
 8004734:	58025480 	.word	0x58025480
 8004738:	58025494 	.word	0x58025494

0800473c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e237      	b.n	8004bbe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d004      	beq.n	8004764 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2280      	movs	r2, #128	@ 0x80
 800475e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e22c      	b.n	8004bbe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a5c      	ldr	r2, [pc, #368]	@ (80048dc <HAL_DMA_Abort_IT+0x1a0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d04a      	beq.n	8004804 <HAL_DMA_Abort_IT+0xc8>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a5b      	ldr	r2, [pc, #364]	@ (80048e0 <HAL_DMA_Abort_IT+0x1a4>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d045      	beq.n	8004804 <HAL_DMA_Abort_IT+0xc8>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a59      	ldr	r2, [pc, #356]	@ (80048e4 <HAL_DMA_Abort_IT+0x1a8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d040      	beq.n	8004804 <HAL_DMA_Abort_IT+0xc8>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a58      	ldr	r2, [pc, #352]	@ (80048e8 <HAL_DMA_Abort_IT+0x1ac>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d03b      	beq.n	8004804 <HAL_DMA_Abort_IT+0xc8>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a56      	ldr	r2, [pc, #344]	@ (80048ec <HAL_DMA_Abort_IT+0x1b0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d036      	beq.n	8004804 <HAL_DMA_Abort_IT+0xc8>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a55      	ldr	r2, [pc, #340]	@ (80048f0 <HAL_DMA_Abort_IT+0x1b4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d031      	beq.n	8004804 <HAL_DMA_Abort_IT+0xc8>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a53      	ldr	r2, [pc, #332]	@ (80048f4 <HAL_DMA_Abort_IT+0x1b8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d02c      	beq.n	8004804 <HAL_DMA_Abort_IT+0xc8>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a52      	ldr	r2, [pc, #328]	@ (80048f8 <HAL_DMA_Abort_IT+0x1bc>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d027      	beq.n	8004804 <HAL_DMA_Abort_IT+0xc8>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a50      	ldr	r2, [pc, #320]	@ (80048fc <HAL_DMA_Abort_IT+0x1c0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d022      	beq.n	8004804 <HAL_DMA_Abort_IT+0xc8>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a4f      	ldr	r2, [pc, #316]	@ (8004900 <HAL_DMA_Abort_IT+0x1c4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d01d      	beq.n	8004804 <HAL_DMA_Abort_IT+0xc8>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a4d      	ldr	r2, [pc, #308]	@ (8004904 <HAL_DMA_Abort_IT+0x1c8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d018      	beq.n	8004804 <HAL_DMA_Abort_IT+0xc8>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a4c      	ldr	r2, [pc, #304]	@ (8004908 <HAL_DMA_Abort_IT+0x1cc>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d013      	beq.n	8004804 <HAL_DMA_Abort_IT+0xc8>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a4a      	ldr	r2, [pc, #296]	@ (800490c <HAL_DMA_Abort_IT+0x1d0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00e      	beq.n	8004804 <HAL_DMA_Abort_IT+0xc8>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a49      	ldr	r2, [pc, #292]	@ (8004910 <HAL_DMA_Abort_IT+0x1d4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d009      	beq.n	8004804 <HAL_DMA_Abort_IT+0xc8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a47      	ldr	r2, [pc, #284]	@ (8004914 <HAL_DMA_Abort_IT+0x1d8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d004      	beq.n	8004804 <HAL_DMA_Abort_IT+0xc8>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a46      	ldr	r2, [pc, #280]	@ (8004918 <HAL_DMA_Abort_IT+0x1dc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d101      	bne.n	8004808 <HAL_DMA_Abort_IT+0xcc>
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <HAL_DMA_Abort_IT+0xce>
 8004808:	2300      	movs	r3, #0
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8086 	beq.w	800491c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2204      	movs	r2, #4
 8004814:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a2f      	ldr	r2, [pc, #188]	@ (80048dc <HAL_DMA_Abort_IT+0x1a0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d04a      	beq.n	80048b8 <HAL_DMA_Abort_IT+0x17c>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a2e      	ldr	r2, [pc, #184]	@ (80048e0 <HAL_DMA_Abort_IT+0x1a4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d045      	beq.n	80048b8 <HAL_DMA_Abort_IT+0x17c>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a2c      	ldr	r2, [pc, #176]	@ (80048e4 <HAL_DMA_Abort_IT+0x1a8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d040      	beq.n	80048b8 <HAL_DMA_Abort_IT+0x17c>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a2b      	ldr	r2, [pc, #172]	@ (80048e8 <HAL_DMA_Abort_IT+0x1ac>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d03b      	beq.n	80048b8 <HAL_DMA_Abort_IT+0x17c>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a29      	ldr	r2, [pc, #164]	@ (80048ec <HAL_DMA_Abort_IT+0x1b0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d036      	beq.n	80048b8 <HAL_DMA_Abort_IT+0x17c>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a28      	ldr	r2, [pc, #160]	@ (80048f0 <HAL_DMA_Abort_IT+0x1b4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d031      	beq.n	80048b8 <HAL_DMA_Abort_IT+0x17c>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a26      	ldr	r2, [pc, #152]	@ (80048f4 <HAL_DMA_Abort_IT+0x1b8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d02c      	beq.n	80048b8 <HAL_DMA_Abort_IT+0x17c>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a25      	ldr	r2, [pc, #148]	@ (80048f8 <HAL_DMA_Abort_IT+0x1bc>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d027      	beq.n	80048b8 <HAL_DMA_Abort_IT+0x17c>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a23      	ldr	r2, [pc, #140]	@ (80048fc <HAL_DMA_Abort_IT+0x1c0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d022      	beq.n	80048b8 <HAL_DMA_Abort_IT+0x17c>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a22      	ldr	r2, [pc, #136]	@ (8004900 <HAL_DMA_Abort_IT+0x1c4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d01d      	beq.n	80048b8 <HAL_DMA_Abort_IT+0x17c>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a20      	ldr	r2, [pc, #128]	@ (8004904 <HAL_DMA_Abort_IT+0x1c8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d018      	beq.n	80048b8 <HAL_DMA_Abort_IT+0x17c>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1f      	ldr	r2, [pc, #124]	@ (8004908 <HAL_DMA_Abort_IT+0x1cc>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d013      	beq.n	80048b8 <HAL_DMA_Abort_IT+0x17c>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a1d      	ldr	r2, [pc, #116]	@ (800490c <HAL_DMA_Abort_IT+0x1d0>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00e      	beq.n	80048b8 <HAL_DMA_Abort_IT+0x17c>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a1c      	ldr	r2, [pc, #112]	@ (8004910 <HAL_DMA_Abort_IT+0x1d4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d009      	beq.n	80048b8 <HAL_DMA_Abort_IT+0x17c>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004914 <HAL_DMA_Abort_IT+0x1d8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d004      	beq.n	80048b8 <HAL_DMA_Abort_IT+0x17c>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a19      	ldr	r2, [pc, #100]	@ (8004918 <HAL_DMA_Abort_IT+0x1dc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d108      	bne.n	80048ca <HAL_DMA_Abort_IT+0x18e>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0201 	bic.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	e178      	b.n	8004bbc <HAL_DMA_Abort_IT+0x480>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0201 	bic.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	e16f      	b.n	8004bbc <HAL_DMA_Abort_IT+0x480>
 80048dc:	40020010 	.word	0x40020010
 80048e0:	40020028 	.word	0x40020028
 80048e4:	40020040 	.word	0x40020040
 80048e8:	40020058 	.word	0x40020058
 80048ec:	40020070 	.word	0x40020070
 80048f0:	40020088 	.word	0x40020088
 80048f4:	400200a0 	.word	0x400200a0
 80048f8:	400200b8 	.word	0x400200b8
 80048fc:	40020410 	.word	0x40020410
 8004900:	40020428 	.word	0x40020428
 8004904:	40020440 	.word	0x40020440
 8004908:	40020458 	.word	0x40020458
 800490c:	40020470 	.word	0x40020470
 8004910:	40020488 	.word	0x40020488
 8004914:	400204a0 	.word	0x400204a0
 8004918:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 020e 	bic.w	r2, r2, #14
 800492a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a6c      	ldr	r2, [pc, #432]	@ (8004ae4 <HAL_DMA_Abort_IT+0x3a8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d04a      	beq.n	80049cc <HAL_DMA_Abort_IT+0x290>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a6b      	ldr	r2, [pc, #428]	@ (8004ae8 <HAL_DMA_Abort_IT+0x3ac>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d045      	beq.n	80049cc <HAL_DMA_Abort_IT+0x290>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a69      	ldr	r2, [pc, #420]	@ (8004aec <HAL_DMA_Abort_IT+0x3b0>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d040      	beq.n	80049cc <HAL_DMA_Abort_IT+0x290>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a68      	ldr	r2, [pc, #416]	@ (8004af0 <HAL_DMA_Abort_IT+0x3b4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d03b      	beq.n	80049cc <HAL_DMA_Abort_IT+0x290>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a66      	ldr	r2, [pc, #408]	@ (8004af4 <HAL_DMA_Abort_IT+0x3b8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d036      	beq.n	80049cc <HAL_DMA_Abort_IT+0x290>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a65      	ldr	r2, [pc, #404]	@ (8004af8 <HAL_DMA_Abort_IT+0x3bc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d031      	beq.n	80049cc <HAL_DMA_Abort_IT+0x290>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a63      	ldr	r2, [pc, #396]	@ (8004afc <HAL_DMA_Abort_IT+0x3c0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d02c      	beq.n	80049cc <HAL_DMA_Abort_IT+0x290>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a62      	ldr	r2, [pc, #392]	@ (8004b00 <HAL_DMA_Abort_IT+0x3c4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d027      	beq.n	80049cc <HAL_DMA_Abort_IT+0x290>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a60      	ldr	r2, [pc, #384]	@ (8004b04 <HAL_DMA_Abort_IT+0x3c8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d022      	beq.n	80049cc <HAL_DMA_Abort_IT+0x290>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a5f      	ldr	r2, [pc, #380]	@ (8004b08 <HAL_DMA_Abort_IT+0x3cc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d01d      	beq.n	80049cc <HAL_DMA_Abort_IT+0x290>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a5d      	ldr	r2, [pc, #372]	@ (8004b0c <HAL_DMA_Abort_IT+0x3d0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d018      	beq.n	80049cc <HAL_DMA_Abort_IT+0x290>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a5c      	ldr	r2, [pc, #368]	@ (8004b10 <HAL_DMA_Abort_IT+0x3d4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d013      	beq.n	80049cc <HAL_DMA_Abort_IT+0x290>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a5a      	ldr	r2, [pc, #360]	@ (8004b14 <HAL_DMA_Abort_IT+0x3d8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00e      	beq.n	80049cc <HAL_DMA_Abort_IT+0x290>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a59      	ldr	r2, [pc, #356]	@ (8004b18 <HAL_DMA_Abort_IT+0x3dc>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d009      	beq.n	80049cc <HAL_DMA_Abort_IT+0x290>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a57      	ldr	r2, [pc, #348]	@ (8004b1c <HAL_DMA_Abort_IT+0x3e0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <HAL_DMA_Abort_IT+0x290>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a56      	ldr	r2, [pc, #344]	@ (8004b20 <HAL_DMA_Abort_IT+0x3e4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d108      	bne.n	80049de <HAL_DMA_Abort_IT+0x2a2>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0201 	bic.w	r2, r2, #1
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	e007      	b.n	80049ee <HAL_DMA_Abort_IT+0x2b2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0201 	bic.w	r2, r2, #1
 80049ec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a3c      	ldr	r2, [pc, #240]	@ (8004ae4 <HAL_DMA_Abort_IT+0x3a8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d072      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a3a      	ldr	r2, [pc, #232]	@ (8004ae8 <HAL_DMA_Abort_IT+0x3ac>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d06d      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a39      	ldr	r2, [pc, #228]	@ (8004aec <HAL_DMA_Abort_IT+0x3b0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d068      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a37      	ldr	r2, [pc, #220]	@ (8004af0 <HAL_DMA_Abort_IT+0x3b4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d063      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a36      	ldr	r2, [pc, #216]	@ (8004af4 <HAL_DMA_Abort_IT+0x3b8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d05e      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a34      	ldr	r2, [pc, #208]	@ (8004af8 <HAL_DMA_Abort_IT+0x3bc>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d059      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a33      	ldr	r2, [pc, #204]	@ (8004afc <HAL_DMA_Abort_IT+0x3c0>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d054      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a31      	ldr	r2, [pc, #196]	@ (8004b00 <HAL_DMA_Abort_IT+0x3c4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d04f      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a30      	ldr	r2, [pc, #192]	@ (8004b04 <HAL_DMA_Abort_IT+0x3c8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d04a      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a2e      	ldr	r2, [pc, #184]	@ (8004b08 <HAL_DMA_Abort_IT+0x3cc>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d045      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a2d      	ldr	r2, [pc, #180]	@ (8004b0c <HAL_DMA_Abort_IT+0x3d0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d040      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a2b      	ldr	r2, [pc, #172]	@ (8004b10 <HAL_DMA_Abort_IT+0x3d4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d03b      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a2a      	ldr	r2, [pc, #168]	@ (8004b14 <HAL_DMA_Abort_IT+0x3d8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d036      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a28      	ldr	r2, [pc, #160]	@ (8004b18 <HAL_DMA_Abort_IT+0x3dc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d031      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a27      	ldr	r2, [pc, #156]	@ (8004b1c <HAL_DMA_Abort_IT+0x3e0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d02c      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a25      	ldr	r2, [pc, #148]	@ (8004b20 <HAL_DMA_Abort_IT+0x3e4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d027      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a24      	ldr	r2, [pc, #144]	@ (8004b24 <HAL_DMA_Abort_IT+0x3e8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d022      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a22      	ldr	r2, [pc, #136]	@ (8004b28 <HAL_DMA_Abort_IT+0x3ec>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01d      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a21      	ldr	r2, [pc, #132]	@ (8004b2c <HAL_DMA_Abort_IT+0x3f0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d018      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8004b30 <HAL_DMA_Abort_IT+0x3f4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d013      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1e      	ldr	r2, [pc, #120]	@ (8004b34 <HAL_DMA_Abort_IT+0x3f8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00e      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b38 <HAL_DMA_Abort_IT+0x3fc>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d009      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a1b      	ldr	r2, [pc, #108]	@ (8004b3c <HAL_DMA_Abort_IT+0x400>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d004      	beq.n	8004ade <HAL_DMA_Abort_IT+0x3a2>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a19      	ldr	r2, [pc, #100]	@ (8004b40 <HAL_DMA_Abort_IT+0x404>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d132      	bne.n	8004b44 <HAL_DMA_Abort_IT+0x408>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e031      	b.n	8004b46 <HAL_DMA_Abort_IT+0x40a>
 8004ae2:	bf00      	nop
 8004ae4:	40020010 	.word	0x40020010
 8004ae8:	40020028 	.word	0x40020028
 8004aec:	40020040 	.word	0x40020040
 8004af0:	40020058 	.word	0x40020058
 8004af4:	40020070 	.word	0x40020070
 8004af8:	40020088 	.word	0x40020088
 8004afc:	400200a0 	.word	0x400200a0
 8004b00:	400200b8 	.word	0x400200b8
 8004b04:	40020410 	.word	0x40020410
 8004b08:	40020428 	.word	0x40020428
 8004b0c:	40020440 	.word	0x40020440
 8004b10:	40020458 	.word	0x40020458
 8004b14:	40020470 	.word	0x40020470
 8004b18:	40020488 	.word	0x40020488
 8004b1c:	400204a0 	.word	0x400204a0
 8004b20:	400204b8 	.word	0x400204b8
 8004b24:	58025408 	.word	0x58025408
 8004b28:	5802541c 	.word	0x5802541c
 8004b2c:	58025430 	.word	0x58025430
 8004b30:	58025444 	.word	0x58025444
 8004b34:	58025458 	.word	0x58025458
 8004b38:	5802546c 	.word	0x5802546c
 8004b3c:	58025480 	.word	0x58025480
 8004b40:	58025494 	.word	0x58025494
 8004b44:	2300      	movs	r3, #0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d028      	beq.n	8004b9c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b58:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b64:	f003 031f 	and.w	r3, r3, #31
 8004b68:	2201      	movs	r2, #1
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004b78:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00c      	beq.n	8004b9c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b90:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b9a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop

08004bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b089      	sub	sp, #36	@ 0x24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004bd6:	4b89      	ldr	r3, [pc, #548]	@ (8004dfc <HAL_GPIO_Init+0x234>)
 8004bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bda:	e194      	b.n	8004f06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	2101      	movs	r1, #1
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	fa01 f303 	lsl.w	r3, r1, r3
 8004be8:	4013      	ands	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 8186 	beq.w	8004f00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d005      	beq.n	8004c0c <HAL_GPIO_Init+0x44>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f003 0303 	and.w	r3, r3, #3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d130      	bne.n	8004c6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	2203      	movs	r2, #3
 8004c18:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	4013      	ands	r3, r2
 8004c22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c42:	2201      	movs	r2, #1
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	091b      	lsrs	r3, r3, #4
 8004c58:	f003 0201 	and.w	r2, r3, #1
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d017      	beq.n	8004caa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	2203      	movs	r2, #3
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43db      	mvns	r3, r3
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d123      	bne.n	8004cfe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	08da      	lsrs	r2, r3, #3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3208      	adds	r2, #8
 8004cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	220f      	movs	r2, #15
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	43db      	mvns	r3, r3
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	08da      	lsrs	r2, r3, #3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3208      	adds	r2, #8
 8004cf8:	69b9      	ldr	r1, [r7, #24]
 8004cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	2203      	movs	r2, #3
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	4013      	ands	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f003 0203 	and.w	r2, r3, #3
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 80e0 	beq.w	8004f00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d40:	4b2f      	ldr	r3, [pc, #188]	@ (8004e00 <HAL_GPIO_Init+0x238>)
 8004d42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d46:	4a2e      	ldr	r2, [pc, #184]	@ (8004e00 <HAL_GPIO_Init+0x238>)
 8004d48:	f043 0302 	orr.w	r3, r3, #2
 8004d4c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004d50:	4b2b      	ldr	r3, [pc, #172]	@ (8004e00 <HAL_GPIO_Init+0x238>)
 8004d52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d5e:	4a29      	ldr	r2, [pc, #164]	@ (8004e04 <HAL_GPIO_Init+0x23c>)
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	089b      	lsrs	r3, r3, #2
 8004d64:	3302      	adds	r3, #2
 8004d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	220f      	movs	r2, #15
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	43db      	mvns	r3, r3
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a20      	ldr	r2, [pc, #128]	@ (8004e08 <HAL_GPIO_Init+0x240>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d052      	beq.n	8004e30 <HAL_GPIO_Init+0x268>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a1f      	ldr	r2, [pc, #124]	@ (8004e0c <HAL_GPIO_Init+0x244>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d031      	beq.n	8004df6 <HAL_GPIO_Init+0x22e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a1e      	ldr	r2, [pc, #120]	@ (8004e10 <HAL_GPIO_Init+0x248>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d02b      	beq.n	8004df2 <HAL_GPIO_Init+0x22a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004e14 <HAL_GPIO_Init+0x24c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d025      	beq.n	8004dee <HAL_GPIO_Init+0x226>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e18 <HAL_GPIO_Init+0x250>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d01f      	beq.n	8004dea <HAL_GPIO_Init+0x222>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a1b      	ldr	r2, [pc, #108]	@ (8004e1c <HAL_GPIO_Init+0x254>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d019      	beq.n	8004de6 <HAL_GPIO_Init+0x21e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a1a      	ldr	r2, [pc, #104]	@ (8004e20 <HAL_GPIO_Init+0x258>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d013      	beq.n	8004de2 <HAL_GPIO_Init+0x21a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a19      	ldr	r2, [pc, #100]	@ (8004e24 <HAL_GPIO_Init+0x25c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00d      	beq.n	8004dde <HAL_GPIO_Init+0x216>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a18      	ldr	r2, [pc, #96]	@ (8004e28 <HAL_GPIO_Init+0x260>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d007      	beq.n	8004dda <HAL_GPIO_Init+0x212>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a17      	ldr	r2, [pc, #92]	@ (8004e2c <HAL_GPIO_Init+0x264>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d101      	bne.n	8004dd6 <HAL_GPIO_Init+0x20e>
 8004dd2:	2309      	movs	r3, #9
 8004dd4:	e02d      	b.n	8004e32 <HAL_GPIO_Init+0x26a>
 8004dd6:	230a      	movs	r3, #10
 8004dd8:	e02b      	b.n	8004e32 <HAL_GPIO_Init+0x26a>
 8004dda:	2308      	movs	r3, #8
 8004ddc:	e029      	b.n	8004e32 <HAL_GPIO_Init+0x26a>
 8004dde:	2307      	movs	r3, #7
 8004de0:	e027      	b.n	8004e32 <HAL_GPIO_Init+0x26a>
 8004de2:	2306      	movs	r3, #6
 8004de4:	e025      	b.n	8004e32 <HAL_GPIO_Init+0x26a>
 8004de6:	2305      	movs	r3, #5
 8004de8:	e023      	b.n	8004e32 <HAL_GPIO_Init+0x26a>
 8004dea:	2304      	movs	r3, #4
 8004dec:	e021      	b.n	8004e32 <HAL_GPIO_Init+0x26a>
 8004dee:	2303      	movs	r3, #3
 8004df0:	e01f      	b.n	8004e32 <HAL_GPIO_Init+0x26a>
 8004df2:	2302      	movs	r3, #2
 8004df4:	e01d      	b.n	8004e32 <HAL_GPIO_Init+0x26a>
 8004df6:	2301      	movs	r3, #1
 8004df8:	e01b      	b.n	8004e32 <HAL_GPIO_Init+0x26a>
 8004dfa:	bf00      	nop
 8004dfc:	58000080 	.word	0x58000080
 8004e00:	58024400 	.word	0x58024400
 8004e04:	58000400 	.word	0x58000400
 8004e08:	58020000 	.word	0x58020000
 8004e0c:	58020400 	.word	0x58020400
 8004e10:	58020800 	.word	0x58020800
 8004e14:	58020c00 	.word	0x58020c00
 8004e18:	58021000 	.word	0x58021000
 8004e1c:	58021400 	.word	0x58021400
 8004e20:	58021800 	.word	0x58021800
 8004e24:	58021c00 	.word	0x58021c00
 8004e28:	58022000 	.word	0x58022000
 8004e2c:	58022400 	.word	0x58022400
 8004e30:	2300      	movs	r3, #0
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	f002 0203 	and.w	r2, r2, #3
 8004e38:	0092      	lsls	r2, r2, #2
 8004e3a:	4093      	lsls	r3, r2
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e42:	4938      	ldr	r1, [pc, #224]	@ (8004f24 <HAL_GPIO_Init+0x35c>)
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	089b      	lsrs	r3, r3, #2
 8004e48:	3302      	adds	r3, #2
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	43db      	mvns	r3, r3
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ea4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	3301      	adds	r3, #1
 8004f04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f47f ae63 	bne.w	8004bdc <HAL_GPIO_Init+0x14>
  }
}
 8004f16:	bf00      	nop
 8004f18:	bf00      	nop
 8004f1a:	3724      	adds	r7, #36	@ 0x24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	58000400 	.word	0x58000400

08004f28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	887b      	ldrh	r3, [r7, #2]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f40:	2301      	movs	r3, #1
 8004f42:	73fb      	strb	r3, [r7, #15]
 8004f44:	e001      	b.n	8004f4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f46:	2300      	movs	r3, #0
 8004f48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	807b      	strh	r3, [r7, #2]
 8004f64:	4613      	mov	r3, r2
 8004f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f68:	787b      	ldrb	r3, [r7, #1]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f6e:	887a      	ldrh	r2, [r7, #2]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f74:	e003      	b.n	8004f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f76:	887b      	ldrh	r3, [r7, #2]
 8004f78:	041a      	lsls	r2, r3, #16
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	619a      	str	r2, [r3, #24]
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b085      	sub	sp, #20
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	460b      	mov	r3, r1
 8004f94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f9c:	887a      	ldrh	r2, [r7, #2]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	041a      	lsls	r2, r3, #16
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	43d9      	mvns	r1, r3
 8004fa8:	887b      	ldrh	r3, [r7, #2]
 8004faa:	400b      	ands	r3, r1
 8004fac:	431a      	orrs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	619a      	str	r2, [r3, #24]
}
 8004fb2:	bf00      	nop
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
	...

08004fc0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004fc8:	4b19      	ldr	r3, [pc, #100]	@ (8005030 <HAL_PWREx_ConfigSupply+0x70>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d00a      	beq.n	8004fea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004fd4:	4b16      	ldr	r3, [pc, #88]	@ (8005030 <HAL_PWREx_ConfigSupply+0x70>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d001      	beq.n	8004fe6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e01f      	b.n	8005026 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	e01d      	b.n	8005026 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004fea:	4b11      	ldr	r3, [pc, #68]	@ (8005030 <HAL_PWREx_ConfigSupply+0x70>)
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f023 0207 	bic.w	r2, r3, #7
 8004ff2:	490f      	ldr	r1, [pc, #60]	@ (8005030 <HAL_PWREx_ConfigSupply+0x70>)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004ffa:	f7fe fee9 	bl	8003dd0 <HAL_GetTick>
 8004ffe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005000:	e009      	b.n	8005016 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005002:	f7fe fee5 	bl	8003dd0 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005010:	d901      	bls.n	8005016 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e007      	b.n	8005026 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005016:	4b06      	ldr	r3, [pc, #24]	@ (8005030 <HAL_PWREx_ConfigSupply+0x70>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800501e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005022:	d1ee      	bne.n	8005002 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	58024800 	.word	0x58024800

08005034 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08c      	sub	sp, #48	@ 0x30
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d102      	bne.n	8005048 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	f000 bc48 	b.w	80058d8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8088 	beq.w	8005166 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005056:	4b99      	ldr	r3, [pc, #612]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800505e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005060:	4b96      	ldr	r3, [pc, #600]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 8005062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005064:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005068:	2b10      	cmp	r3, #16
 800506a:	d007      	beq.n	800507c <HAL_RCC_OscConfig+0x48>
 800506c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800506e:	2b18      	cmp	r3, #24
 8005070:	d111      	bne.n	8005096 <HAL_RCC_OscConfig+0x62>
 8005072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d10c      	bne.n	8005096 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800507c:	4b8f      	ldr	r3, [pc, #572]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d06d      	beq.n	8005164 <HAL_RCC_OscConfig+0x130>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d169      	bne.n	8005164 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	f000 bc21 	b.w	80058d8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800509e:	d106      	bne.n	80050ae <HAL_RCC_OscConfig+0x7a>
 80050a0:	4b86      	ldr	r3, [pc, #536]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a85      	ldr	r2, [pc, #532]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 80050a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	e02e      	b.n	800510c <HAL_RCC_OscConfig+0xd8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10c      	bne.n	80050d0 <HAL_RCC_OscConfig+0x9c>
 80050b6:	4b81      	ldr	r3, [pc, #516]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a80      	ldr	r2, [pc, #512]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 80050bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	4b7e      	ldr	r3, [pc, #504]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a7d      	ldr	r2, [pc, #500]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 80050c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e01d      	b.n	800510c <HAL_RCC_OscConfig+0xd8>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050d8:	d10c      	bne.n	80050f4 <HAL_RCC_OscConfig+0xc0>
 80050da:	4b78      	ldr	r3, [pc, #480]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a77      	ldr	r2, [pc, #476]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 80050e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	4b75      	ldr	r3, [pc, #468]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a74      	ldr	r2, [pc, #464]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 80050ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	e00b      	b.n	800510c <HAL_RCC_OscConfig+0xd8>
 80050f4:	4b71      	ldr	r3, [pc, #452]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a70      	ldr	r2, [pc, #448]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 80050fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	4b6e      	ldr	r3, [pc, #440]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a6d      	ldr	r2, [pc, #436]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 8005106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800510a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d013      	beq.n	800513c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005114:	f7fe fe5c 	bl	8003dd0 <HAL_GetTick>
 8005118:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800511c:	f7fe fe58 	bl	8003dd0 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b64      	cmp	r3, #100	@ 0x64
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e3d4      	b.n	80058d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800512e:	4b63      	ldr	r3, [pc, #396]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f0      	beq.n	800511c <HAL_RCC_OscConfig+0xe8>
 800513a:	e014      	b.n	8005166 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513c:	f7fe fe48 	bl	8003dd0 <HAL_GetTick>
 8005140:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005144:	f7fe fe44 	bl	8003dd0 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b64      	cmp	r3, #100	@ 0x64
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e3c0      	b.n	80058d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005156:	4b59      	ldr	r3, [pc, #356]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f0      	bne.n	8005144 <HAL_RCC_OscConfig+0x110>
 8005162:	e000      	b.n	8005166 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 80ca 	beq.w	8005308 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005174:	4b51      	ldr	r3, [pc, #324]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800517c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800517e:	4b4f      	ldr	r3, [pc, #316]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 8005180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005182:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d007      	beq.n	800519a <HAL_RCC_OscConfig+0x166>
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	2b18      	cmp	r3, #24
 800518e:	d156      	bne.n	800523e <HAL_RCC_OscConfig+0x20a>
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d151      	bne.n	800523e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800519a:	4b48      	ldr	r3, [pc, #288]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d005      	beq.n	80051b2 <HAL_RCC_OscConfig+0x17e>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e392      	b.n	80058d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051b2:	4b42      	ldr	r3, [pc, #264]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f023 0219 	bic.w	r2, r3, #25
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	493f      	ldr	r1, [pc, #252]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c4:	f7fe fe04 	bl	8003dd0 <HAL_GetTick>
 80051c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051cc:	f7fe fe00 	bl	8003dd0 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e37c      	b.n	80058d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051de:	4b37      	ldr	r3, [pc, #220]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0f0      	beq.n	80051cc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ea:	f7fe fe21 	bl	8003e30 <HAL_GetREVID>
 80051ee:	4603      	mov	r3, r0
 80051f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d817      	bhi.n	8005228 <HAL_RCC_OscConfig+0x1f4>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	2b40      	cmp	r3, #64	@ 0x40
 80051fe:	d108      	bne.n	8005212 <HAL_RCC_OscConfig+0x1de>
 8005200:	4b2e      	ldr	r3, [pc, #184]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005208:	4a2c      	ldr	r2, [pc, #176]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 800520a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800520e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005210:	e07a      	b.n	8005308 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005212:	4b2a      	ldr	r3, [pc, #168]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	031b      	lsls	r3, r3, #12
 8005220:	4926      	ldr	r1, [pc, #152]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 8005222:	4313      	orrs	r3, r2
 8005224:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005226:	e06f      	b.n	8005308 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005228:	4b24      	ldr	r3, [pc, #144]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	061b      	lsls	r3, r3, #24
 8005236:	4921      	ldr	r1, [pc, #132]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 8005238:	4313      	orrs	r3, r2
 800523a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800523c:	e064      	b.n	8005308 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d047      	beq.n	80052d6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005246:	4b1d      	ldr	r3, [pc, #116]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f023 0219 	bic.w	r2, r3, #25
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	491a      	ldr	r1, [pc, #104]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 8005254:	4313      	orrs	r3, r2
 8005256:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005258:	f7fe fdba 	bl	8003dd0 <HAL_GetTick>
 800525c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005260:	f7fe fdb6 	bl	8003dd0 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e332      	b.n	80058d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005272:	4b12      	ldr	r3, [pc, #72]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0f0      	beq.n	8005260 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800527e:	f7fe fdd7 	bl	8003e30 <HAL_GetREVID>
 8005282:	4603      	mov	r3, r0
 8005284:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005288:	4293      	cmp	r3, r2
 800528a:	d819      	bhi.n	80052c0 <HAL_RCC_OscConfig+0x28c>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	2b40      	cmp	r3, #64	@ 0x40
 8005292:	d108      	bne.n	80052a6 <HAL_RCC_OscConfig+0x272>
 8005294:	4b09      	ldr	r3, [pc, #36]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800529c:	4a07      	ldr	r2, [pc, #28]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 800529e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052a2:	6053      	str	r3, [r2, #4]
 80052a4:	e030      	b.n	8005308 <HAL_RCC_OscConfig+0x2d4>
 80052a6:	4b05      	ldr	r3, [pc, #20]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	031b      	lsls	r3, r3, #12
 80052b4:	4901      	ldr	r1, [pc, #4]	@ (80052bc <HAL_RCC_OscConfig+0x288>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	604b      	str	r3, [r1, #4]
 80052ba:	e025      	b.n	8005308 <HAL_RCC_OscConfig+0x2d4>
 80052bc:	58024400 	.word	0x58024400
 80052c0:	4b9a      	ldr	r3, [pc, #616]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	061b      	lsls	r3, r3, #24
 80052ce:	4997      	ldr	r1, [pc, #604]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	604b      	str	r3, [r1, #4]
 80052d4:	e018      	b.n	8005308 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052d6:	4b95      	ldr	r3, [pc, #596]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a94      	ldr	r2, [pc, #592]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 80052dc:	f023 0301 	bic.w	r3, r3, #1
 80052e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e2:	f7fe fd75 	bl	8003dd0 <HAL_GetTick>
 80052e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052e8:	e008      	b.n	80052fc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052ea:	f7fe fd71 	bl	8003dd0 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e2ed      	b.n	80058d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052fc:	4b8b      	ldr	r3, [pc, #556]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1f0      	bne.n	80052ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 80a9 	beq.w	8005468 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005316:	4b85      	ldr	r3, [pc, #532]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800531e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005320:	4b82      	ldr	r3, [pc, #520]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 8005322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005324:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	2b08      	cmp	r3, #8
 800532a:	d007      	beq.n	800533c <HAL_RCC_OscConfig+0x308>
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2b18      	cmp	r3, #24
 8005330:	d13a      	bne.n	80053a8 <HAL_RCC_OscConfig+0x374>
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f003 0303 	and.w	r3, r3, #3
 8005338:	2b01      	cmp	r3, #1
 800533a:	d135      	bne.n	80053a8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800533c:	4b7b      	ldr	r3, [pc, #492]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <HAL_RCC_OscConfig+0x320>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	2b80      	cmp	r3, #128	@ 0x80
 800534e:	d001      	beq.n	8005354 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e2c1      	b.n	80058d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005354:	f7fe fd6c 	bl	8003e30 <HAL_GetREVID>
 8005358:	4603      	mov	r3, r0
 800535a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800535e:	4293      	cmp	r3, r2
 8005360:	d817      	bhi.n	8005392 <HAL_RCC_OscConfig+0x35e>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	2b20      	cmp	r3, #32
 8005368:	d108      	bne.n	800537c <HAL_RCC_OscConfig+0x348>
 800536a:	4b70      	ldr	r3, [pc, #448]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005372:	4a6e      	ldr	r2, [pc, #440]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 8005374:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005378:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800537a:	e075      	b.n	8005468 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800537c:	4b6b      	ldr	r3, [pc, #428]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	069b      	lsls	r3, r3, #26
 800538a:	4968      	ldr	r1, [pc, #416]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 800538c:	4313      	orrs	r3, r2
 800538e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005390:	e06a      	b.n	8005468 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005392:	4b66      	ldr	r3, [pc, #408]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	061b      	lsls	r3, r3, #24
 80053a0:	4962      	ldr	r1, [pc, #392]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053a6:	e05f      	b.n	8005468 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d042      	beq.n	8005436 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80053b0:	4b5e      	ldr	r3, [pc, #376]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a5d      	ldr	r2, [pc, #372]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 80053b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053bc:	f7fe fd08 	bl	8003dd0 <HAL_GetTick>
 80053c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80053c4:	f7fe fd04 	bl	8003dd0 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e280      	b.n	80058d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053d6:	4b55      	ldr	r3, [pc, #340]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0f0      	beq.n	80053c4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053e2:	f7fe fd25 	bl	8003e30 <HAL_GetREVID>
 80053e6:	4603      	mov	r3, r0
 80053e8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d817      	bhi.n	8005420 <HAL_RCC_OscConfig+0x3ec>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d108      	bne.n	800540a <HAL_RCC_OscConfig+0x3d6>
 80053f8:	4b4c      	ldr	r3, [pc, #304]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005400:	4a4a      	ldr	r2, [pc, #296]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 8005402:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005406:	6053      	str	r3, [r2, #4]
 8005408:	e02e      	b.n	8005468 <HAL_RCC_OscConfig+0x434>
 800540a:	4b48      	ldr	r3, [pc, #288]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	069b      	lsls	r3, r3, #26
 8005418:	4944      	ldr	r1, [pc, #272]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 800541a:	4313      	orrs	r3, r2
 800541c:	604b      	str	r3, [r1, #4]
 800541e:	e023      	b.n	8005468 <HAL_RCC_OscConfig+0x434>
 8005420:	4b42      	ldr	r3, [pc, #264]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	061b      	lsls	r3, r3, #24
 800542e:	493f      	ldr	r1, [pc, #252]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 8005430:	4313      	orrs	r3, r2
 8005432:	60cb      	str	r3, [r1, #12]
 8005434:	e018      	b.n	8005468 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005436:	4b3d      	ldr	r3, [pc, #244]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a3c      	ldr	r2, [pc, #240]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 800543c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005442:	f7fe fcc5 	bl	8003dd0 <HAL_GetTick>
 8005446:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005448:	e008      	b.n	800545c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800544a:	f7fe fcc1 	bl	8003dd0 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e23d      	b.n	80058d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800545c:	4b33      	ldr	r3, [pc, #204]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1f0      	bne.n	800544a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b00      	cmp	r3, #0
 8005472:	d036      	beq.n	80054e2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d019      	beq.n	80054b0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800547c:	4b2b      	ldr	r3, [pc, #172]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 800547e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005480:	4a2a      	ldr	r2, [pc, #168]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 8005482:	f043 0301 	orr.w	r3, r3, #1
 8005486:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005488:	f7fe fca2 	bl	8003dd0 <HAL_GetTick>
 800548c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005490:	f7fe fc9e 	bl	8003dd0 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e21a      	b.n	80058d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054a2:	4b22      	ldr	r3, [pc, #136]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 80054a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0f0      	beq.n	8005490 <HAL_RCC_OscConfig+0x45c>
 80054ae:	e018      	b.n	80054e2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054b0:	4b1e      	ldr	r3, [pc, #120]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 80054b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054b4:	4a1d      	ldr	r2, [pc, #116]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 80054b6:	f023 0301 	bic.w	r3, r3, #1
 80054ba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054bc:	f7fe fc88 	bl	8003dd0 <HAL_GetTick>
 80054c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054c4:	f7fe fc84 	bl	8003dd0 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e200      	b.n	80058d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054d6:	4b15      	ldr	r3, [pc, #84]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 80054d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1f0      	bne.n	80054c4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d039      	beq.n	8005562 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d01c      	beq.n	8005530 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054f6:	4b0d      	ldr	r3, [pc, #52]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a0c      	ldr	r2, [pc, #48]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 80054fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005500:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005502:	f7fe fc65 	bl	8003dd0 <HAL_GetTick>
 8005506:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005508:	e008      	b.n	800551c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800550a:	f7fe fc61 	bl	8003dd0 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e1dd      	b.n	80058d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800551c:	4b03      	ldr	r3, [pc, #12]	@ (800552c <HAL_RCC_OscConfig+0x4f8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f0      	beq.n	800550a <HAL_RCC_OscConfig+0x4d6>
 8005528:	e01b      	b.n	8005562 <HAL_RCC_OscConfig+0x52e>
 800552a:	bf00      	nop
 800552c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005530:	4b9b      	ldr	r3, [pc, #620]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a9a      	ldr	r2, [pc, #616]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 8005536:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800553a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800553c:	f7fe fc48 	bl	8003dd0 <HAL_GetTick>
 8005540:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005544:	f7fe fc44 	bl	8003dd0 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e1c0      	b.n	80058d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005556:	4b92      	ldr	r3, [pc, #584]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f0      	bne.n	8005544 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0304 	and.w	r3, r3, #4
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 8081 	beq.w	8005672 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005570:	4b8c      	ldr	r3, [pc, #560]	@ (80057a4 <HAL_RCC_OscConfig+0x770>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a8b      	ldr	r2, [pc, #556]	@ (80057a4 <HAL_RCC_OscConfig+0x770>)
 8005576:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800557a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800557c:	f7fe fc28 	bl	8003dd0 <HAL_GetTick>
 8005580:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005584:	f7fe fc24 	bl	8003dd0 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b64      	cmp	r3, #100	@ 0x64
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e1a0      	b.n	80058d8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005596:	4b83      	ldr	r3, [pc, #524]	@ (80057a4 <HAL_RCC_OscConfig+0x770>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0f0      	beq.n	8005584 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d106      	bne.n	80055b8 <HAL_RCC_OscConfig+0x584>
 80055aa:	4b7d      	ldr	r3, [pc, #500]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 80055ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ae:	4a7c      	ldr	r2, [pc, #496]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 80055b0:	f043 0301 	orr.w	r3, r3, #1
 80055b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80055b6:	e02d      	b.n	8005614 <HAL_RCC_OscConfig+0x5e0>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10c      	bne.n	80055da <HAL_RCC_OscConfig+0x5a6>
 80055c0:	4b77      	ldr	r3, [pc, #476]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 80055c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c4:	4a76      	ldr	r2, [pc, #472]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 80055c6:	f023 0301 	bic.w	r3, r3, #1
 80055ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80055cc:	4b74      	ldr	r3, [pc, #464]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 80055ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d0:	4a73      	ldr	r2, [pc, #460]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 80055d2:	f023 0304 	bic.w	r3, r3, #4
 80055d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80055d8:	e01c      	b.n	8005614 <HAL_RCC_OscConfig+0x5e0>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	2b05      	cmp	r3, #5
 80055e0:	d10c      	bne.n	80055fc <HAL_RCC_OscConfig+0x5c8>
 80055e2:	4b6f      	ldr	r3, [pc, #444]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 80055e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e6:	4a6e      	ldr	r2, [pc, #440]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 80055e8:	f043 0304 	orr.w	r3, r3, #4
 80055ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80055ee:	4b6c      	ldr	r3, [pc, #432]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 80055f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055f2:	4a6b      	ldr	r2, [pc, #428]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 80055f4:	f043 0301 	orr.w	r3, r3, #1
 80055f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80055fa:	e00b      	b.n	8005614 <HAL_RCC_OscConfig+0x5e0>
 80055fc:	4b68      	ldr	r3, [pc, #416]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 80055fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005600:	4a67      	ldr	r2, [pc, #412]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 8005602:	f023 0301 	bic.w	r3, r3, #1
 8005606:	6713      	str	r3, [r2, #112]	@ 0x70
 8005608:	4b65      	ldr	r3, [pc, #404]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 800560a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800560c:	4a64      	ldr	r2, [pc, #400]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 800560e:	f023 0304 	bic.w	r3, r3, #4
 8005612:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d015      	beq.n	8005648 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800561c:	f7fe fbd8 	bl	8003dd0 <HAL_GetTick>
 8005620:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005622:	e00a      	b.n	800563a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005624:	f7fe fbd4 	bl	8003dd0 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005632:	4293      	cmp	r3, r2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e14e      	b.n	80058d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800563a:	4b59      	ldr	r3, [pc, #356]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 800563c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0ee      	beq.n	8005624 <HAL_RCC_OscConfig+0x5f0>
 8005646:	e014      	b.n	8005672 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005648:	f7fe fbc2 	bl	8003dd0 <HAL_GetTick>
 800564c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800564e:	e00a      	b.n	8005666 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005650:	f7fe fbbe 	bl	8003dd0 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800565e:	4293      	cmp	r3, r2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e138      	b.n	80058d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005666:	4b4e      	ldr	r3, [pc, #312]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 8005668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1ee      	bne.n	8005650 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 812d 	beq.w	80058d6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800567c:	4b48      	ldr	r3, [pc, #288]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005684:	2b18      	cmp	r3, #24
 8005686:	f000 80bd 	beq.w	8005804 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568e:	2b02      	cmp	r3, #2
 8005690:	f040 809e 	bne.w	80057d0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005694:	4b42      	ldr	r3, [pc, #264]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a41      	ldr	r2, [pc, #260]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 800569a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800569e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a0:	f7fe fb96 	bl	8003dd0 <HAL_GetTick>
 80056a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a8:	f7fe fb92 	bl	8003dd0 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e10e      	b.n	80058d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056ba:	4b39      	ldr	r3, [pc, #228]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f0      	bne.n	80056a8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056c6:	4b36      	ldr	r3, [pc, #216]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 80056c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056ca:	4b37      	ldr	r3, [pc, #220]	@ (80057a8 <HAL_RCC_OscConfig+0x774>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80056d6:	0112      	lsls	r2, r2, #4
 80056d8:	430a      	orrs	r2, r1
 80056da:	4931      	ldr	r1, [pc, #196]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	628b      	str	r3, [r1, #40]	@ 0x28
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e4:	3b01      	subs	r3, #1
 80056e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ee:	3b01      	subs	r3, #1
 80056f0:	025b      	lsls	r3, r3, #9
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	431a      	orrs	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fa:	3b01      	subs	r3, #1
 80056fc:	041b      	lsls	r3, r3, #16
 80056fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005708:	3b01      	subs	r3, #1
 800570a:	061b      	lsls	r3, r3, #24
 800570c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005710:	4923      	ldr	r1, [pc, #140]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 8005712:	4313      	orrs	r3, r2
 8005714:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005716:	4b22      	ldr	r3, [pc, #136]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 8005718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571a:	4a21      	ldr	r2, [pc, #132]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 800571c:	f023 0301 	bic.w	r3, r3, #1
 8005720:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005722:	4b1f      	ldr	r3, [pc, #124]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 8005724:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005726:	4b21      	ldr	r3, [pc, #132]	@ (80057ac <HAL_RCC_OscConfig+0x778>)
 8005728:	4013      	ands	r3, r2
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800572e:	00d2      	lsls	r2, r2, #3
 8005730:	491b      	ldr	r1, [pc, #108]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 8005732:	4313      	orrs	r3, r2
 8005734:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005736:	4b1a      	ldr	r3, [pc, #104]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 8005738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573a:	f023 020c 	bic.w	r2, r3, #12
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005742:	4917      	ldr	r1, [pc, #92]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 8005744:	4313      	orrs	r3, r2
 8005746:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005748:	4b15      	ldr	r3, [pc, #84]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 800574a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574c:	f023 0202 	bic.w	r2, r3, #2
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005754:	4912      	ldr	r1, [pc, #72]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 8005756:	4313      	orrs	r3, r2
 8005758:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800575a:	4b11      	ldr	r3, [pc, #68]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 800575c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575e:	4a10      	ldr	r2, [pc, #64]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 8005760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005764:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005766:	4b0e      	ldr	r3, [pc, #56]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 8005768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576a:	4a0d      	ldr	r2, [pc, #52]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 800576c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005770:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005772:	4b0b      	ldr	r3, [pc, #44]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 8005774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005776:	4a0a      	ldr	r2, [pc, #40]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 8005778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800577c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800577e:	4b08      	ldr	r3, [pc, #32]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 8005780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005782:	4a07      	ldr	r2, [pc, #28]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 8005784:	f043 0301 	orr.w	r3, r3, #1
 8005788:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800578a:	4b05      	ldr	r3, [pc, #20]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a04      	ldr	r2, [pc, #16]	@ (80057a0 <HAL_RCC_OscConfig+0x76c>)
 8005790:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005796:	f7fe fb1b 	bl	8003dd0 <HAL_GetTick>
 800579a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800579c:	e011      	b.n	80057c2 <HAL_RCC_OscConfig+0x78e>
 800579e:	bf00      	nop
 80057a0:	58024400 	.word	0x58024400
 80057a4:	58024800 	.word	0x58024800
 80057a8:	fffffc0c 	.word	0xfffffc0c
 80057ac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b0:	f7fe fb0e 	bl	8003dd0 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e08a      	b.n	80058d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057c2:	4b47      	ldr	r3, [pc, #284]	@ (80058e0 <HAL_RCC_OscConfig+0x8ac>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0f0      	beq.n	80057b0 <HAL_RCC_OscConfig+0x77c>
 80057ce:	e082      	b.n	80058d6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057d0:	4b43      	ldr	r3, [pc, #268]	@ (80058e0 <HAL_RCC_OscConfig+0x8ac>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a42      	ldr	r2, [pc, #264]	@ (80058e0 <HAL_RCC_OscConfig+0x8ac>)
 80057d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057dc:	f7fe faf8 	bl	8003dd0 <HAL_GetTick>
 80057e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e4:	f7fe faf4 	bl	8003dd0 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e070      	b.n	80058d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057f6:	4b3a      	ldr	r3, [pc, #232]	@ (80058e0 <HAL_RCC_OscConfig+0x8ac>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1f0      	bne.n	80057e4 <HAL_RCC_OscConfig+0x7b0>
 8005802:	e068      	b.n	80058d6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005804:	4b36      	ldr	r3, [pc, #216]	@ (80058e0 <HAL_RCC_OscConfig+0x8ac>)
 8005806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005808:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800580a:	4b35      	ldr	r3, [pc, #212]	@ (80058e0 <HAL_RCC_OscConfig+0x8ac>)
 800580c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005814:	2b01      	cmp	r3, #1
 8005816:	d031      	beq.n	800587c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f003 0203 	and.w	r2, r3, #3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005822:	429a      	cmp	r2, r3
 8005824:	d12a      	bne.n	800587c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	091b      	lsrs	r3, r3, #4
 800582a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005832:	429a      	cmp	r2, r3
 8005834:	d122      	bne.n	800587c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005840:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005842:	429a      	cmp	r2, r3
 8005844:	d11a      	bne.n	800587c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	0a5b      	lsrs	r3, r3, #9
 800584a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005852:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005854:	429a      	cmp	r2, r3
 8005856:	d111      	bne.n	800587c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	0c1b      	lsrs	r3, r3, #16
 800585c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005864:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005866:	429a      	cmp	r2, r3
 8005868:	d108      	bne.n	800587c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	0e1b      	lsrs	r3, r3, #24
 800586e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005876:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005878:	429a      	cmp	r2, r3
 800587a:	d001      	beq.n	8005880 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e02b      	b.n	80058d8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005880:	4b17      	ldr	r3, [pc, #92]	@ (80058e0 <HAL_RCC_OscConfig+0x8ac>)
 8005882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005884:	08db      	lsrs	r3, r3, #3
 8005886:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800588a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	429a      	cmp	r2, r3
 8005894:	d01f      	beq.n	80058d6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005896:	4b12      	ldr	r3, [pc, #72]	@ (80058e0 <HAL_RCC_OscConfig+0x8ac>)
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589a:	4a11      	ldr	r2, [pc, #68]	@ (80058e0 <HAL_RCC_OscConfig+0x8ac>)
 800589c:	f023 0301 	bic.w	r3, r3, #1
 80058a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058a2:	f7fe fa95 	bl	8003dd0 <HAL_GetTick>
 80058a6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80058a8:	bf00      	nop
 80058aa:	f7fe fa91 	bl	8003dd0 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d0f9      	beq.n	80058aa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058b6:	4b0a      	ldr	r3, [pc, #40]	@ (80058e0 <HAL_RCC_OscConfig+0x8ac>)
 80058b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058ba:	4b0a      	ldr	r3, [pc, #40]	@ (80058e4 <HAL_RCC_OscConfig+0x8b0>)
 80058bc:	4013      	ands	r3, r2
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80058c2:	00d2      	lsls	r2, r2, #3
 80058c4:	4906      	ldr	r1, [pc, #24]	@ (80058e0 <HAL_RCC_OscConfig+0x8ac>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80058ca:	4b05      	ldr	r3, [pc, #20]	@ (80058e0 <HAL_RCC_OscConfig+0x8ac>)
 80058cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ce:	4a04      	ldr	r2, [pc, #16]	@ (80058e0 <HAL_RCC_OscConfig+0x8ac>)
 80058d0:	f043 0301 	orr.w	r3, r3, #1
 80058d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3730      	adds	r7, #48	@ 0x30
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	58024400 	.word	0x58024400
 80058e4:	ffff0007 	.word	0xffff0007

080058e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e19c      	b.n	8005c36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058fc:	4b8a      	ldr	r3, [pc, #552]	@ (8005b28 <HAL_RCC_ClockConfig+0x240>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 030f 	and.w	r3, r3, #15
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	429a      	cmp	r2, r3
 8005908:	d910      	bls.n	800592c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800590a:	4b87      	ldr	r3, [pc, #540]	@ (8005b28 <HAL_RCC_ClockConfig+0x240>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f023 020f 	bic.w	r2, r3, #15
 8005912:	4985      	ldr	r1, [pc, #532]	@ (8005b28 <HAL_RCC_ClockConfig+0x240>)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	4313      	orrs	r3, r2
 8005918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800591a:	4b83      	ldr	r3, [pc, #524]	@ (8005b28 <HAL_RCC_ClockConfig+0x240>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d001      	beq.n	800592c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e184      	b.n	8005c36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b00      	cmp	r3, #0
 8005936:	d010      	beq.n	800595a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691a      	ldr	r2, [r3, #16]
 800593c:	4b7b      	ldr	r3, [pc, #492]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005944:	429a      	cmp	r2, r3
 8005946:	d908      	bls.n	800595a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005948:	4b78      	ldr	r3, [pc, #480]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	4975      	ldr	r1, [pc, #468]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 8005956:	4313      	orrs	r3, r2
 8005958:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d010      	beq.n	8005988 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695a      	ldr	r2, [r3, #20]
 800596a:	4b70      	ldr	r3, [pc, #448]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005972:	429a      	cmp	r2, r3
 8005974:	d908      	bls.n	8005988 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005976:	4b6d      	ldr	r3, [pc, #436]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	496a      	ldr	r1, [pc, #424]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 8005984:	4313      	orrs	r3, r2
 8005986:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0310 	and.w	r3, r3, #16
 8005990:	2b00      	cmp	r3, #0
 8005992:	d010      	beq.n	80059b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	699a      	ldr	r2, [r3, #24]
 8005998:	4b64      	ldr	r3, [pc, #400]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d908      	bls.n	80059b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059a4:	4b61      	ldr	r3, [pc, #388]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	495e      	ldr	r1, [pc, #376]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0320 	and.w	r3, r3, #32
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d010      	beq.n	80059e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69da      	ldr	r2, [r3, #28]
 80059c6:	4b59      	ldr	r3, [pc, #356]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d908      	bls.n	80059e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80059d2:	4b56      	ldr	r3, [pc, #344]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	4953      	ldr	r1, [pc, #332]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d010      	beq.n	8005a12 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	4b4d      	ldr	r3, [pc, #308]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	f003 030f 	and.w	r3, r3, #15
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d908      	bls.n	8005a12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a00:	4b4a      	ldr	r3, [pc, #296]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	f023 020f 	bic.w	r2, r3, #15
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	4947      	ldr	r1, [pc, #284]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d055      	beq.n	8005aca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a1e:	4b43      	ldr	r3, [pc, #268]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	4940      	ldr	r1, [pc, #256]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d107      	bne.n	8005a48 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a38:	4b3c      	ldr	r3, [pc, #240]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d121      	bne.n	8005a88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e0f6      	b.n	8005c36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d107      	bne.n	8005a60 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a50:	4b36      	ldr	r3, [pc, #216]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d115      	bne.n	8005a88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e0ea      	b.n	8005c36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d107      	bne.n	8005a78 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a68:	4b30      	ldr	r3, [pc, #192]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d109      	bne.n	8005a88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e0de      	b.n	8005c36 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a78:	4b2c      	ldr	r3, [pc, #176]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e0d6      	b.n	8005c36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a88:	4b28      	ldr	r3, [pc, #160]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	f023 0207 	bic.w	r2, r3, #7
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	4925      	ldr	r1, [pc, #148]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a9a:	f7fe f999 	bl	8003dd0 <HAL_GetTick>
 8005a9e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aa0:	e00a      	b.n	8005ab8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aa2:	f7fe f995 	bl	8003dd0 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e0be      	b.n	8005c36 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d1eb      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d010      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	4b14      	ldr	r3, [pc, #80]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	f003 030f 	and.w	r3, r3, #15
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d208      	bcs.n	8005af8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ae6:	4b11      	ldr	r3, [pc, #68]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	f023 020f 	bic.w	r2, r3, #15
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	490e      	ldr	r1, [pc, #56]	@ (8005b2c <HAL_RCC_ClockConfig+0x244>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005af8:	4b0b      	ldr	r3, [pc, #44]	@ (8005b28 <HAL_RCC_ClockConfig+0x240>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 030f 	and.w	r3, r3, #15
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d214      	bcs.n	8005b30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b06:	4b08      	ldr	r3, [pc, #32]	@ (8005b28 <HAL_RCC_ClockConfig+0x240>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f023 020f 	bic.w	r2, r3, #15
 8005b0e:	4906      	ldr	r1, [pc, #24]	@ (8005b28 <HAL_RCC_ClockConfig+0x240>)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b16:	4b04      	ldr	r3, [pc, #16]	@ (8005b28 <HAL_RCC_ClockConfig+0x240>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d005      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e086      	b.n	8005c36 <HAL_RCC_ClockConfig+0x34e>
 8005b28:	52002000 	.word	0x52002000
 8005b2c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d010      	beq.n	8005b5e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	4b3f      	ldr	r3, [pc, #252]	@ (8005c40 <HAL_RCC_ClockConfig+0x358>)
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d208      	bcs.n	8005b5e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b4c:	4b3c      	ldr	r3, [pc, #240]	@ (8005c40 <HAL_RCC_ClockConfig+0x358>)
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	4939      	ldr	r1, [pc, #228]	@ (8005c40 <HAL_RCC_ClockConfig+0x358>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0308 	and.w	r3, r3, #8
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d010      	beq.n	8005b8c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	695a      	ldr	r2, [r3, #20]
 8005b6e:	4b34      	ldr	r3, [pc, #208]	@ (8005c40 <HAL_RCC_ClockConfig+0x358>)
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d208      	bcs.n	8005b8c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b7a:	4b31      	ldr	r3, [pc, #196]	@ (8005c40 <HAL_RCC_ClockConfig+0x358>)
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	492e      	ldr	r1, [pc, #184]	@ (8005c40 <HAL_RCC_ClockConfig+0x358>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d010      	beq.n	8005bba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	699a      	ldr	r2, [r3, #24]
 8005b9c:	4b28      	ldr	r3, [pc, #160]	@ (8005c40 <HAL_RCC_ClockConfig+0x358>)
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d208      	bcs.n	8005bba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ba8:	4b25      	ldr	r3, [pc, #148]	@ (8005c40 <HAL_RCC_ClockConfig+0x358>)
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	4922      	ldr	r1, [pc, #136]	@ (8005c40 <HAL_RCC_ClockConfig+0x358>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0320 	and.w	r3, r3, #32
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d010      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69da      	ldr	r2, [r3, #28]
 8005bca:	4b1d      	ldr	r3, [pc, #116]	@ (8005c40 <HAL_RCC_ClockConfig+0x358>)
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d208      	bcs.n	8005be8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8005c40 <HAL_RCC_ClockConfig+0x358>)
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	4917      	ldr	r1, [pc, #92]	@ (8005c40 <HAL_RCC_ClockConfig+0x358>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005be8:	f000 f834 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 8005bec:	4602      	mov	r2, r0
 8005bee:	4b14      	ldr	r3, [pc, #80]	@ (8005c40 <HAL_RCC_ClockConfig+0x358>)
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	0a1b      	lsrs	r3, r3, #8
 8005bf4:	f003 030f 	and.w	r3, r3, #15
 8005bf8:	4912      	ldr	r1, [pc, #72]	@ (8005c44 <HAL_RCC_ClockConfig+0x35c>)
 8005bfa:	5ccb      	ldrb	r3, [r1, r3]
 8005bfc:	f003 031f 	and.w	r3, r3, #31
 8005c00:	fa22 f303 	lsr.w	r3, r2, r3
 8005c04:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c06:	4b0e      	ldr	r3, [pc, #56]	@ (8005c40 <HAL_RCC_ClockConfig+0x358>)
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f003 030f 	and.w	r3, r3, #15
 8005c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8005c44 <HAL_RCC_ClockConfig+0x35c>)
 8005c10:	5cd3      	ldrb	r3, [r2, r3]
 8005c12:	f003 031f 	and.w	r3, r3, #31
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	fa22 f303 	lsr.w	r3, r2, r3
 8005c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8005c48 <HAL_RCC_ClockConfig+0x360>)
 8005c1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c20:	4a0a      	ldr	r2, [pc, #40]	@ (8005c4c <HAL_RCC_ClockConfig+0x364>)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005c26:	4b0a      	ldr	r3, [pc, #40]	@ (8005c50 <HAL_RCC_ClockConfig+0x368>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fb fd46 	bl	80016bc <HAL_InitTick>
 8005c30:	4603      	mov	r3, r0
 8005c32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	58024400 	.word	0x58024400
 8005c44:	08017d04 	.word	0x08017d04
 8005c48:	24000004 	.word	0x24000004
 8005c4c:	24000000 	.word	0x24000000
 8005c50:	24000008 	.word	0x24000008

08005c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b089      	sub	sp, #36	@ 0x24
 8005c58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c5a:	4bb3      	ldr	r3, [pc, #716]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c62:	2b18      	cmp	r3, #24
 8005c64:	f200 8155 	bhi.w	8005f12 <HAL_RCC_GetSysClockFreq+0x2be>
 8005c68:	a201      	add	r2, pc, #4	@ (adr r2, 8005c70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6e:	bf00      	nop
 8005c70:	08005cd5 	.word	0x08005cd5
 8005c74:	08005f13 	.word	0x08005f13
 8005c78:	08005f13 	.word	0x08005f13
 8005c7c:	08005f13 	.word	0x08005f13
 8005c80:	08005f13 	.word	0x08005f13
 8005c84:	08005f13 	.word	0x08005f13
 8005c88:	08005f13 	.word	0x08005f13
 8005c8c:	08005f13 	.word	0x08005f13
 8005c90:	08005cfb 	.word	0x08005cfb
 8005c94:	08005f13 	.word	0x08005f13
 8005c98:	08005f13 	.word	0x08005f13
 8005c9c:	08005f13 	.word	0x08005f13
 8005ca0:	08005f13 	.word	0x08005f13
 8005ca4:	08005f13 	.word	0x08005f13
 8005ca8:	08005f13 	.word	0x08005f13
 8005cac:	08005f13 	.word	0x08005f13
 8005cb0:	08005d01 	.word	0x08005d01
 8005cb4:	08005f13 	.word	0x08005f13
 8005cb8:	08005f13 	.word	0x08005f13
 8005cbc:	08005f13 	.word	0x08005f13
 8005cc0:	08005f13 	.word	0x08005f13
 8005cc4:	08005f13 	.word	0x08005f13
 8005cc8:	08005f13 	.word	0x08005f13
 8005ccc:	08005f13 	.word	0x08005f13
 8005cd0:	08005d07 	.word	0x08005d07
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cd4:	4b94      	ldr	r3, [pc, #592]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d009      	beq.n	8005cf4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ce0:	4b91      	ldr	r3, [pc, #580]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	08db      	lsrs	r3, r3, #3
 8005ce6:	f003 0303 	and.w	r3, r3, #3
 8005cea:	4a90      	ldr	r2, [pc, #576]	@ (8005f2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005cec:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005cf2:	e111      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005cf4:	4b8d      	ldr	r3, [pc, #564]	@ (8005f2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005cf6:	61bb      	str	r3, [r7, #24]
      break;
 8005cf8:	e10e      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005cfa:	4b8d      	ldr	r3, [pc, #564]	@ (8005f30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005cfc:	61bb      	str	r3, [r7, #24]
      break;
 8005cfe:	e10b      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005d00:	4b8c      	ldr	r3, [pc, #560]	@ (8005f34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d02:	61bb      	str	r3, [r7, #24]
      break;
 8005d04:	e108      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d06:	4b88      	ldr	r3, [pc, #544]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005d10:	4b85      	ldr	r3, [pc, #532]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d14:	091b      	lsrs	r3, r3, #4
 8005d16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d1a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d1c:	4b82      	ldr	r3, [pc, #520]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d26:	4b80      	ldr	r3, [pc, #512]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d2a:	08db      	lsrs	r3, r3, #3
 8005d2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 80e1 	beq.w	8005f0c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	f000 8083 	beq.w	8005e58 <HAL_RCC_GetSysClockFreq+0x204>
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	f200 80a1 	bhi.w	8005e9c <HAL_RCC_GetSysClockFreq+0x248>
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <HAL_RCC_GetSysClockFreq+0x114>
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d056      	beq.n	8005e14 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005d66:	e099      	b.n	8005e9c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d68:	4b6f      	ldr	r3, [pc, #444]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d02d      	beq.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d74:	4b6c      	ldr	r3, [pc, #432]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	08db      	lsrs	r3, r3, #3
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	4a6b      	ldr	r2, [pc, #428]	@ (8005f2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d80:	fa22 f303 	lsr.w	r3, r2, r3
 8005d84:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	ee07 3a90 	vmov	s15, r3
 8005d8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9e:	4b62      	ldr	r3, [pc, #392]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dae:	ed97 6a02 	vldr	s12, [r7, #8]
 8005db2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005f38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005dce:	e087      	b.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dda:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005f3c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de2:	4b51      	ldr	r3, [pc, #324]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dea:	ee07 3a90 	vmov	s15, r3
 8005dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005df6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005f38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e12:	e065      	b.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	ee07 3a90 	vmov	s15, r3
 8005e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005f40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e26:	4b40      	ldr	r3, [pc, #256]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e3a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005f38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e56:	e043      	b.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e62:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005f44 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e7e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005f38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e9a:	e021      	b.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005f40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eae:	4b1e      	ldr	r3, [pc, #120]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb6:	ee07 3a90 	vmov	s15, r3
 8005eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ec2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005f38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ede:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005ee0:	4b11      	ldr	r3, [pc, #68]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee4:	0a5b      	lsrs	r3, r3, #9
 8005ee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005eea:	3301      	adds	r3, #1
 8005eec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	ee07 3a90 	vmov	s15, r3
 8005ef4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ef8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005efc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f04:	ee17 3a90 	vmov	r3, s15
 8005f08:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005f0a:	e005      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	61bb      	str	r3, [r7, #24]
      break;
 8005f10:	e002      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005f12:	4b07      	ldr	r3, [pc, #28]	@ (8005f30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f14:	61bb      	str	r3, [r7, #24]
      break;
 8005f16:	bf00      	nop
  }

  return sysclockfreq;
 8005f18:	69bb      	ldr	r3, [r7, #24]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3724      	adds	r7, #36	@ 0x24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	58024400 	.word	0x58024400
 8005f2c:	03d09000 	.word	0x03d09000
 8005f30:	003d0900 	.word	0x003d0900
 8005f34:	017d7840 	.word	0x017d7840
 8005f38:	46000000 	.word	0x46000000
 8005f3c:	4c742400 	.word	0x4c742400
 8005f40:	4a742400 	.word	0x4a742400
 8005f44:	4bbebc20 	.word	0x4bbebc20

08005f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f4e:	f7ff fe81 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 8005f52:	4602      	mov	r2, r0
 8005f54:	4b10      	ldr	r3, [pc, #64]	@ (8005f98 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	0a1b      	lsrs	r3, r3, #8
 8005f5a:	f003 030f 	and.w	r3, r3, #15
 8005f5e:	490f      	ldr	r1, [pc, #60]	@ (8005f9c <HAL_RCC_GetHCLKFreq+0x54>)
 8005f60:	5ccb      	ldrb	r3, [r1, r3]
 8005f62:	f003 031f 	and.w	r3, r3, #31
 8005f66:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f98 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	f003 030f 	and.w	r3, r3, #15
 8005f74:	4a09      	ldr	r2, [pc, #36]	@ (8005f9c <HAL_RCC_GetHCLKFreq+0x54>)
 8005f76:	5cd3      	ldrb	r3, [r2, r3]
 8005f78:	f003 031f 	and.w	r3, r3, #31
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f82:	4a07      	ldr	r2, [pc, #28]	@ (8005fa0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005f84:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f86:	4a07      	ldr	r2, [pc, #28]	@ (8005fa4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005f8c:	4b04      	ldr	r3, [pc, #16]	@ (8005fa0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	58024400 	.word	0x58024400
 8005f9c:	08017d04 	.word	0x08017d04
 8005fa0:	24000004 	.word	0x24000004
 8005fa4:	24000000 	.word	0x24000000

08005fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005fac:	f7ff ffcc 	bl	8005f48 <HAL_RCC_GetHCLKFreq>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	4b06      	ldr	r3, [pc, #24]	@ (8005fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	091b      	lsrs	r3, r3, #4
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	4904      	ldr	r1, [pc, #16]	@ (8005fd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fbe:	5ccb      	ldrb	r3, [r1, r3]
 8005fc0:	f003 031f 	and.w	r3, r3, #31
 8005fc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	58024400 	.word	0x58024400
 8005fd0:	08017d04 	.word	0x08017d04

08005fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005fd8:	f7ff ffb6 	bl	8005f48 <HAL_RCC_GetHCLKFreq>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	4b06      	ldr	r3, [pc, #24]	@ (8005ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	0a1b      	lsrs	r3, r3, #8
 8005fe4:	f003 0307 	and.w	r3, r3, #7
 8005fe8:	4904      	ldr	r1, [pc, #16]	@ (8005ffc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fea:	5ccb      	ldrb	r3, [r1, r3]
 8005fec:	f003 031f 	and.w	r3, r3, #31
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	58024400 	.word	0x58024400
 8005ffc:	08017d04 	.word	0x08017d04

08006000 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	223f      	movs	r2, #63	@ 0x3f
 800600e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006010:	4b1a      	ldr	r3, [pc, #104]	@ (800607c <HAL_RCC_GetClockConfig+0x7c>)
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	f003 0207 	and.w	r2, r3, #7
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800601c:	4b17      	ldr	r3, [pc, #92]	@ (800607c <HAL_RCC_GetClockConfig+0x7c>)
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006028:	4b14      	ldr	r3, [pc, #80]	@ (800607c <HAL_RCC_GetClockConfig+0x7c>)
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	f003 020f 	and.w	r2, r3, #15
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006034:	4b11      	ldr	r3, [pc, #68]	@ (800607c <HAL_RCC_GetClockConfig+0x7c>)
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006040:	4b0e      	ldr	r3, [pc, #56]	@ (800607c <HAL_RCC_GetClockConfig+0x7c>)
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800604c:	4b0b      	ldr	r3, [pc, #44]	@ (800607c <HAL_RCC_GetClockConfig+0x7c>)
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006058:	4b08      	ldr	r3, [pc, #32]	@ (800607c <HAL_RCC_GetClockConfig+0x7c>)
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006064:	4b06      	ldr	r3, [pc, #24]	@ (8006080 <HAL_RCC_GetClockConfig+0x80>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 020f 	and.w	r2, r3, #15
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	601a      	str	r2, [r3, #0]
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	58024400 	.word	0x58024400
 8006080:	52002000 	.word	0x52002000

08006084 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006088:	b0ca      	sub	sp, #296	@ 0x128
 800608a:	af00      	add	r7, sp, #0
 800608c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006090:	2300      	movs	r3, #0
 8006092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006096:	2300      	movs	r3, #0
 8006098:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800609c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80060a8:	2500      	movs	r5, #0
 80060aa:	ea54 0305 	orrs.w	r3, r4, r5
 80060ae:	d049      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80060b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060ba:	d02f      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80060bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060c0:	d828      	bhi.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060c6:	d01a      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060cc:	d822      	bhi.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80060d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060d6:	d007      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80060d8:	e01c      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060da:	4bb8      	ldr	r3, [pc, #736]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060de:	4ab7      	ldr	r2, [pc, #732]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060e6:	e01a      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ec:	3308      	adds	r3, #8
 80060ee:	2102      	movs	r1, #2
 80060f0:	4618      	mov	r0, r3
 80060f2:	f002 fb61 	bl	80087b8 <RCCEx_PLL2_Config>
 80060f6:	4603      	mov	r3, r0
 80060f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060fc:	e00f      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006102:	3328      	adds	r3, #40	@ 0x28
 8006104:	2102      	movs	r1, #2
 8006106:	4618      	mov	r0, r3
 8006108:	f002 fc08 	bl	800891c <RCCEx_PLL3_Config>
 800610c:	4603      	mov	r3, r0
 800610e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006112:	e004      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800611a:	e000      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800611c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800611e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10a      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006126:	4ba5      	ldr	r3, [pc, #660]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800612a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800612e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006132:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006134:	4aa1      	ldr	r2, [pc, #644]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006136:	430b      	orrs	r3, r1
 8006138:	6513      	str	r3, [r2, #80]	@ 0x50
 800613a:	e003      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006140:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006150:	f04f 0900 	mov.w	r9, #0
 8006154:	ea58 0309 	orrs.w	r3, r8, r9
 8006158:	d047      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800615a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006160:	2b04      	cmp	r3, #4
 8006162:	d82a      	bhi.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006164:	a201      	add	r2, pc, #4	@ (adr r2, 800616c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616a:	bf00      	nop
 800616c:	08006181 	.word	0x08006181
 8006170:	0800618f 	.word	0x0800618f
 8006174:	080061a5 	.word	0x080061a5
 8006178:	080061c3 	.word	0x080061c3
 800617c:	080061c3 	.word	0x080061c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006180:	4b8e      	ldr	r3, [pc, #568]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006184:	4a8d      	ldr	r2, [pc, #564]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800618a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800618c:	e01a      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800618e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006192:	3308      	adds	r3, #8
 8006194:	2100      	movs	r1, #0
 8006196:	4618      	mov	r0, r3
 8006198:	f002 fb0e 	bl	80087b8 <RCCEx_PLL2_Config>
 800619c:	4603      	mov	r3, r0
 800619e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061a2:	e00f      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a8:	3328      	adds	r3, #40	@ 0x28
 80061aa:	2100      	movs	r1, #0
 80061ac:	4618      	mov	r0, r3
 80061ae:	f002 fbb5 	bl	800891c <RCCEx_PLL3_Config>
 80061b2:	4603      	mov	r3, r0
 80061b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061b8:	e004      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061c0:	e000      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80061c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10a      	bne.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061cc:	4b7b      	ldr	r3, [pc, #492]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061d0:	f023 0107 	bic.w	r1, r3, #7
 80061d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061da:	4a78      	ldr	r2, [pc, #480]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061dc:	430b      	orrs	r3, r1
 80061de:	6513      	str	r3, [r2, #80]	@ 0x50
 80061e0:	e003      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80061ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80061f6:	f04f 0b00 	mov.w	fp, #0
 80061fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80061fe:	d04c      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800620a:	d030      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800620c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006210:	d829      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006212:	2bc0      	cmp	r3, #192	@ 0xc0
 8006214:	d02d      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006216:	2bc0      	cmp	r3, #192	@ 0xc0
 8006218:	d825      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800621a:	2b80      	cmp	r3, #128	@ 0x80
 800621c:	d018      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800621e:	2b80      	cmp	r3, #128	@ 0x80
 8006220:	d821      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006226:	2b40      	cmp	r3, #64	@ 0x40
 8006228:	d007      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800622a:	e01c      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800622c:	4b63      	ldr	r3, [pc, #396]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800622e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006230:	4a62      	ldr	r2, [pc, #392]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006236:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006238:	e01c      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800623a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800623e:	3308      	adds	r3, #8
 8006240:	2100      	movs	r1, #0
 8006242:	4618      	mov	r0, r3
 8006244:	f002 fab8 	bl	80087b8 <RCCEx_PLL2_Config>
 8006248:	4603      	mov	r3, r0
 800624a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800624e:	e011      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006254:	3328      	adds	r3, #40	@ 0x28
 8006256:	2100      	movs	r1, #0
 8006258:	4618      	mov	r0, r3
 800625a:	f002 fb5f 	bl	800891c <RCCEx_PLL3_Config>
 800625e:	4603      	mov	r3, r0
 8006260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006264:	e006      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800626c:	e002      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800626e:	bf00      	nop
 8006270:	e000      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006274:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10a      	bne.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800627c:	4b4f      	ldr	r3, [pc, #316]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800627e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006280:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800628a:	4a4c      	ldr	r2, [pc, #304]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800628c:	430b      	orrs	r3, r1
 800628e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006290:	e003      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006296:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800629a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80062a6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80062aa:	2300      	movs	r3, #0
 80062ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80062b0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80062b4:	460b      	mov	r3, r1
 80062b6:	4313      	orrs	r3, r2
 80062b8:	d053      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80062ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80062c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062c6:	d035      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80062c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062cc:	d82e      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80062ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80062d2:	d031      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80062d4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80062d8:	d828      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80062da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062de:	d01a      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80062e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062e4:	d822      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80062ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062ee:	d007      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80062f0:	e01c      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062f2:	4b32      	ldr	r3, [pc, #200]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f6:	4a31      	ldr	r2, [pc, #196]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062fe:	e01c      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006304:	3308      	adds	r3, #8
 8006306:	2100      	movs	r1, #0
 8006308:	4618      	mov	r0, r3
 800630a:	f002 fa55 	bl	80087b8 <RCCEx_PLL2_Config>
 800630e:	4603      	mov	r3, r0
 8006310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006314:	e011      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631a:	3328      	adds	r3, #40	@ 0x28
 800631c:	2100      	movs	r1, #0
 800631e:	4618      	mov	r0, r3
 8006320:	f002 fafc 	bl	800891c <RCCEx_PLL3_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800632a:	e006      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006332:	e002      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006334:	bf00      	nop
 8006336:	e000      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800633a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10b      	bne.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006342:	4b1e      	ldr	r3, [pc, #120]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006346:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800634a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006352:	4a1a      	ldr	r2, [pc, #104]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006354:	430b      	orrs	r3, r1
 8006356:	6593      	str	r3, [r2, #88]	@ 0x58
 8006358:	e003      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800635e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800636e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006372:	2300      	movs	r3, #0
 8006374:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006378:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800637c:	460b      	mov	r3, r1
 800637e:	4313      	orrs	r3, r2
 8006380:	d056      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006386:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800638a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800638e:	d038      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006390:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006394:	d831      	bhi.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006396:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800639a:	d034      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800639c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80063a0:	d82b      	bhi.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063a6:	d01d      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80063a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063ac:	d825      	bhi.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d006      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80063b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063b6:	d00a      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80063b8:	e01f      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063ba:	bf00      	nop
 80063bc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063c0:	4ba2      	ldr	r3, [pc, #648]	@ (800664c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c4:	4aa1      	ldr	r2, [pc, #644]	@ (800664c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063cc:	e01c      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d2:	3308      	adds	r3, #8
 80063d4:	2100      	movs	r1, #0
 80063d6:	4618      	mov	r0, r3
 80063d8:	f002 f9ee 	bl	80087b8 <RCCEx_PLL2_Config>
 80063dc:	4603      	mov	r3, r0
 80063de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80063e2:	e011      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e8:	3328      	adds	r3, #40	@ 0x28
 80063ea:	2100      	movs	r1, #0
 80063ec:	4618      	mov	r0, r3
 80063ee:	f002 fa95 	bl	800891c <RCCEx_PLL3_Config>
 80063f2:	4603      	mov	r3, r0
 80063f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063f8:	e006      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006400:	e002      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006402:	bf00      	nop
 8006404:	e000      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10b      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006410:	4b8e      	ldr	r3, [pc, #568]	@ (800664c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006414:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800641c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006420:	4a8a      	ldr	r2, [pc, #552]	@ (800664c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006422:	430b      	orrs	r3, r1
 8006424:	6593      	str	r3, [r2, #88]	@ 0x58
 8006426:	e003      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800642c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006438:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800643c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006440:	2300      	movs	r3, #0
 8006442:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006446:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800644a:	460b      	mov	r3, r1
 800644c:	4313      	orrs	r3, r2
 800644e:	d03a      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006456:	2b30      	cmp	r3, #48	@ 0x30
 8006458:	d01f      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800645a:	2b30      	cmp	r3, #48	@ 0x30
 800645c:	d819      	bhi.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800645e:	2b20      	cmp	r3, #32
 8006460:	d00c      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006462:	2b20      	cmp	r3, #32
 8006464:	d815      	bhi.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d019      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800646a:	2b10      	cmp	r3, #16
 800646c:	d111      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800646e:	4b77      	ldr	r3, [pc, #476]	@ (800664c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006472:	4a76      	ldr	r2, [pc, #472]	@ (800664c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006478:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800647a:	e011      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800647c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006480:	3308      	adds	r3, #8
 8006482:	2102      	movs	r1, #2
 8006484:	4618      	mov	r0, r3
 8006486:	f002 f997 	bl	80087b8 <RCCEx_PLL2_Config>
 800648a:	4603      	mov	r3, r0
 800648c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006490:	e006      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006498:	e002      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800649a:	bf00      	nop
 800649c:	e000      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800649e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10a      	bne.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80064a8:	4b68      	ldr	r3, [pc, #416]	@ (800664c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064ac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80064b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064b6:	4a65      	ldr	r2, [pc, #404]	@ (800664c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064b8:	430b      	orrs	r3, r1
 80064ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064bc:	e003      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80064c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80064d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80064d6:	2300      	movs	r3, #0
 80064d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80064dc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80064e0:	460b      	mov	r3, r1
 80064e2:	4313      	orrs	r3, r2
 80064e4:	d051      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80064e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064f0:	d035      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80064f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064f6:	d82e      	bhi.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80064f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064fc:	d031      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80064fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006502:	d828      	bhi.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006504:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006508:	d01a      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800650a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800650e:	d822      	bhi.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006514:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006518:	d007      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800651a:	e01c      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800651c:	4b4b      	ldr	r3, [pc, #300]	@ (800664c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800651e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006520:	4a4a      	ldr	r2, [pc, #296]	@ (800664c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006526:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006528:	e01c      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800652a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652e:	3308      	adds	r3, #8
 8006530:	2100      	movs	r1, #0
 8006532:	4618      	mov	r0, r3
 8006534:	f002 f940 	bl	80087b8 <RCCEx_PLL2_Config>
 8006538:	4603      	mov	r3, r0
 800653a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800653e:	e011      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006544:	3328      	adds	r3, #40	@ 0x28
 8006546:	2100      	movs	r1, #0
 8006548:	4618      	mov	r0, r3
 800654a:	f002 f9e7 	bl	800891c <RCCEx_PLL3_Config>
 800654e:	4603      	mov	r3, r0
 8006550:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006554:	e006      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800655c:	e002      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800655e:	bf00      	nop
 8006560:	e000      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006562:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006564:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10a      	bne.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800656c:	4b37      	ldr	r3, [pc, #220]	@ (800664c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800656e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006570:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800657a:	4a34      	ldr	r2, [pc, #208]	@ (800664c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800657c:	430b      	orrs	r3, r1
 800657e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006580:	e003      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006586:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800658a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006596:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800659a:	2300      	movs	r3, #0
 800659c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80065a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80065a4:	460b      	mov	r3, r1
 80065a6:	4313      	orrs	r3, r2
 80065a8:	d056      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80065aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065b4:	d033      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80065b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065ba:	d82c      	bhi.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065c0:	d02f      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80065c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065c6:	d826      	bhi.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065cc:	d02b      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80065ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065d2:	d820      	bhi.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065d8:	d012      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80065da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065de:	d81a      	bhi.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d022      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80065e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065e8:	d115      	bne.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ee:	3308      	adds	r3, #8
 80065f0:	2101      	movs	r1, #1
 80065f2:	4618      	mov	r0, r3
 80065f4:	f002 f8e0 	bl	80087b8 <RCCEx_PLL2_Config>
 80065f8:	4603      	mov	r3, r0
 80065fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80065fe:	e015      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006604:	3328      	adds	r3, #40	@ 0x28
 8006606:	2101      	movs	r1, #1
 8006608:	4618      	mov	r0, r3
 800660a:	f002 f987 	bl	800891c <RCCEx_PLL3_Config>
 800660e:	4603      	mov	r3, r0
 8006610:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006614:	e00a      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800661c:	e006      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800661e:	bf00      	nop
 8006620:	e004      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006622:	bf00      	nop
 8006624:	e002      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006626:	bf00      	nop
 8006628:	e000      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800662a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800662c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10d      	bne.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006634:	4b05      	ldr	r3, [pc, #20]	@ (800664c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006638:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800663c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006640:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006642:	4a02      	ldr	r2, [pc, #8]	@ (800664c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006644:	430b      	orrs	r3, r1
 8006646:	6513      	str	r3, [r2, #80]	@ 0x50
 8006648:	e006      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800664a:	bf00      	nop
 800664c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006654:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800665c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006660:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006664:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006668:	2300      	movs	r3, #0
 800666a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800666e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006672:	460b      	mov	r3, r1
 8006674:	4313      	orrs	r3, r2
 8006676:	d055      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006680:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006684:	d033      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006686:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800668a:	d82c      	bhi.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800668c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006690:	d02f      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006696:	d826      	bhi.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006698:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800669c:	d02b      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800669e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066a2:	d820      	bhi.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066a8:	d012      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80066aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066ae:	d81a      	bhi.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d022      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x676>
 80066b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066b8:	d115      	bne.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066be:	3308      	adds	r3, #8
 80066c0:	2101      	movs	r1, #1
 80066c2:	4618      	mov	r0, r3
 80066c4:	f002 f878 	bl	80087b8 <RCCEx_PLL2_Config>
 80066c8:	4603      	mov	r3, r0
 80066ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80066ce:	e015      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d4:	3328      	adds	r3, #40	@ 0x28
 80066d6:	2101      	movs	r1, #1
 80066d8:	4618      	mov	r0, r3
 80066da:	f002 f91f 	bl	800891c <RCCEx_PLL3_Config>
 80066de:	4603      	mov	r3, r0
 80066e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80066e4:	e00a      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066ec:	e006      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80066ee:	bf00      	nop
 80066f0:	e004      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80066f2:	bf00      	nop
 80066f4:	e002      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80066f6:	bf00      	nop
 80066f8:	e000      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80066fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10b      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006704:	4ba3      	ldr	r3, [pc, #652]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006708:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800670c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006710:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006714:	4a9f      	ldr	r2, [pc, #636]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006716:	430b      	orrs	r3, r1
 8006718:	6593      	str	r3, [r2, #88]	@ 0x58
 800671a:	e003      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006720:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006730:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006734:	2300      	movs	r3, #0
 8006736:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800673a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800673e:	460b      	mov	r3, r1
 8006740:	4313      	orrs	r3, r2
 8006742:	d037      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800674a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800674e:	d00e      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006754:	d816      	bhi.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006756:	2b00      	cmp	r3, #0
 8006758:	d018      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800675a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800675e:	d111      	bne.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006760:	4b8c      	ldr	r3, [pc, #560]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006764:	4a8b      	ldr	r2, [pc, #556]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800676a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800676c:	e00f      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800676e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006772:	3308      	adds	r3, #8
 8006774:	2101      	movs	r1, #1
 8006776:	4618      	mov	r0, r3
 8006778:	f002 f81e 	bl	80087b8 <RCCEx_PLL2_Config>
 800677c:	4603      	mov	r3, r0
 800677e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006782:	e004      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800678a:	e000      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800678c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800678e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10a      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006796:	4b7f      	ldr	r3, [pc, #508]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800679a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800679e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a4:	4a7b      	ldr	r2, [pc, #492]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067a6:	430b      	orrs	r3, r1
 80067a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80067aa:	e003      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80067b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80067c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067c4:	2300      	movs	r3, #0
 80067c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80067ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4313      	orrs	r3, r2
 80067d2:	d039      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80067d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067da:	2b03      	cmp	r3, #3
 80067dc:	d81c      	bhi.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80067de:	a201      	add	r2, pc, #4	@ (adr r2, 80067e4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80067e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e4:	08006821 	.word	0x08006821
 80067e8:	080067f5 	.word	0x080067f5
 80067ec:	08006803 	.word	0x08006803
 80067f0:	08006821 	.word	0x08006821
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067f4:	4b67      	ldr	r3, [pc, #412]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f8:	4a66      	ldr	r2, [pc, #408]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006800:	e00f      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006806:	3308      	adds	r3, #8
 8006808:	2102      	movs	r1, #2
 800680a:	4618      	mov	r0, r3
 800680c:	f001 ffd4 	bl	80087b8 <RCCEx_PLL2_Config>
 8006810:	4603      	mov	r3, r0
 8006812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006816:	e004      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800681e:	e000      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10a      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800682a:	4b5a      	ldr	r3, [pc, #360]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800682c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800682e:	f023 0103 	bic.w	r1, r3, #3
 8006832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006838:	4a56      	ldr	r2, [pc, #344]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800683a:	430b      	orrs	r3, r1
 800683c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800683e:	e003      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006840:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006844:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006854:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006858:	2300      	movs	r3, #0
 800685a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800685e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006862:	460b      	mov	r3, r1
 8006864:	4313      	orrs	r3, r2
 8006866:	f000 809f 	beq.w	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800686a:	4b4b      	ldr	r3, [pc, #300]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a4a      	ldr	r2, [pc, #296]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006874:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006876:	f7fd faab 	bl	8003dd0 <HAL_GetTick>
 800687a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800687e:	e00b      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006880:	f7fd faa6 	bl	8003dd0 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b64      	cmp	r3, #100	@ 0x64
 800688e:	d903      	bls.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006896:	e005      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006898:	4b3f      	ldr	r3, [pc, #252]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0ed      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80068a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d179      	bne.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80068ac:	4b39      	ldr	r3, [pc, #228]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80068b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068b8:	4053      	eors	r3, r2
 80068ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d015      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068c2:	4b34      	ldr	r3, [pc, #208]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068ce:	4b31      	ldr	r3, [pc, #196]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068d2:	4a30      	ldr	r2, [pc, #192]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068d8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068da:	4b2e      	ldr	r3, [pc, #184]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068de:	4a2d      	ldr	r2, [pc, #180]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068e4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80068e6:	4a2b      	ldr	r2, [pc, #172]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068ec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80068ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068fa:	d118      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068fc:	f7fd fa68 	bl	8003dd0 <HAL_GetTick>
 8006900:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006904:	e00d      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006906:	f7fd fa63 	bl	8003dd0 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006910:	1ad2      	subs	r2, r2, r3
 8006912:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006916:	429a      	cmp	r2, r3
 8006918:	d903      	bls.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006920:	e005      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006922:	4b1c      	ldr	r3, [pc, #112]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0eb      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800692e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006932:	2b00      	cmp	r3, #0
 8006934:	d129      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800693e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006942:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006946:	d10e      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006948:	4b12      	ldr	r3, [pc, #72]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006954:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006958:	091a      	lsrs	r2, r3, #4
 800695a:	4b10      	ldr	r3, [pc, #64]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800695c:	4013      	ands	r3, r2
 800695e:	4a0d      	ldr	r2, [pc, #52]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006960:	430b      	orrs	r3, r1
 8006962:	6113      	str	r3, [r2, #16]
 8006964:	e005      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006966:	4b0b      	ldr	r3, [pc, #44]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	4a0a      	ldr	r2, [pc, #40]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800696c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006970:	6113      	str	r3, [r2, #16]
 8006972:	4b08      	ldr	r3, [pc, #32]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006974:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800697e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006982:	4a04      	ldr	r2, [pc, #16]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006984:	430b      	orrs	r3, r1
 8006986:	6713      	str	r3, [r2, #112]	@ 0x70
 8006988:	e00e      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800698a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800698e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006992:	e009      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006994:	58024400 	.word	0x58024400
 8006998:	58024800 	.word	0x58024800
 800699c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80069a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b0:	f002 0301 	and.w	r3, r2, #1
 80069b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069b8:	2300      	movs	r3, #0
 80069ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80069be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80069c2:	460b      	mov	r3, r1
 80069c4:	4313      	orrs	r3, r2
 80069c6:	f000 8089 	beq.w	8006adc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80069ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069d0:	2b28      	cmp	r3, #40	@ 0x28
 80069d2:	d86b      	bhi.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80069d4:	a201      	add	r2, pc, #4	@ (adr r2, 80069dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80069d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069da:	bf00      	nop
 80069dc:	08006ab5 	.word	0x08006ab5
 80069e0:	08006aad 	.word	0x08006aad
 80069e4:	08006aad 	.word	0x08006aad
 80069e8:	08006aad 	.word	0x08006aad
 80069ec:	08006aad 	.word	0x08006aad
 80069f0:	08006aad 	.word	0x08006aad
 80069f4:	08006aad 	.word	0x08006aad
 80069f8:	08006aad 	.word	0x08006aad
 80069fc:	08006a81 	.word	0x08006a81
 8006a00:	08006aad 	.word	0x08006aad
 8006a04:	08006aad 	.word	0x08006aad
 8006a08:	08006aad 	.word	0x08006aad
 8006a0c:	08006aad 	.word	0x08006aad
 8006a10:	08006aad 	.word	0x08006aad
 8006a14:	08006aad 	.word	0x08006aad
 8006a18:	08006aad 	.word	0x08006aad
 8006a1c:	08006a97 	.word	0x08006a97
 8006a20:	08006aad 	.word	0x08006aad
 8006a24:	08006aad 	.word	0x08006aad
 8006a28:	08006aad 	.word	0x08006aad
 8006a2c:	08006aad 	.word	0x08006aad
 8006a30:	08006aad 	.word	0x08006aad
 8006a34:	08006aad 	.word	0x08006aad
 8006a38:	08006aad 	.word	0x08006aad
 8006a3c:	08006ab5 	.word	0x08006ab5
 8006a40:	08006aad 	.word	0x08006aad
 8006a44:	08006aad 	.word	0x08006aad
 8006a48:	08006aad 	.word	0x08006aad
 8006a4c:	08006aad 	.word	0x08006aad
 8006a50:	08006aad 	.word	0x08006aad
 8006a54:	08006aad 	.word	0x08006aad
 8006a58:	08006aad 	.word	0x08006aad
 8006a5c:	08006ab5 	.word	0x08006ab5
 8006a60:	08006aad 	.word	0x08006aad
 8006a64:	08006aad 	.word	0x08006aad
 8006a68:	08006aad 	.word	0x08006aad
 8006a6c:	08006aad 	.word	0x08006aad
 8006a70:	08006aad 	.word	0x08006aad
 8006a74:	08006aad 	.word	0x08006aad
 8006a78:	08006aad 	.word	0x08006aad
 8006a7c:	08006ab5 	.word	0x08006ab5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a84:	3308      	adds	r3, #8
 8006a86:	2101      	movs	r1, #1
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f001 fe95 	bl	80087b8 <RCCEx_PLL2_Config>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a94:	e00f      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a9a:	3328      	adds	r3, #40	@ 0x28
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f001 ff3c 	bl	800891c <RCCEx_PLL3_Config>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006aaa:	e004      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ab2:	e000      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10a      	bne.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006abe:	4bbf      	ldr	r3, [pc, #764]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006acc:	4abb      	ldr	r2, [pc, #748]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ace:	430b      	orrs	r3, r1
 8006ad0:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ad2:	e003      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ad8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	f002 0302 	and.w	r3, r2, #2
 8006ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006aec:	2300      	movs	r3, #0
 8006aee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006af2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006af6:	460b      	mov	r3, r1
 8006af8:	4313      	orrs	r3, r2
 8006afa:	d041      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b02:	2b05      	cmp	r3, #5
 8006b04:	d824      	bhi.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006b06:	a201      	add	r2, pc, #4	@ (adr r2, 8006b0c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b59 	.word	0x08006b59
 8006b10:	08006b25 	.word	0x08006b25
 8006b14:	08006b3b 	.word	0x08006b3b
 8006b18:	08006b59 	.word	0x08006b59
 8006b1c:	08006b59 	.word	0x08006b59
 8006b20:	08006b59 	.word	0x08006b59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b28:	3308      	adds	r3, #8
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f001 fe43 	bl	80087b8 <RCCEx_PLL2_Config>
 8006b32:	4603      	mov	r3, r0
 8006b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006b38:	e00f      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b3e:	3328      	adds	r3, #40	@ 0x28
 8006b40:	2101      	movs	r1, #1
 8006b42:	4618      	mov	r0, r3
 8006b44:	f001 feea 	bl	800891c <RCCEx_PLL3_Config>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006b4e:	e004      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b56:	e000      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10a      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b62:	4b96      	ldr	r3, [pc, #600]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b66:	f023 0107 	bic.w	r1, r3, #7
 8006b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b70:	4a92      	ldr	r2, [pc, #584]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b72:	430b      	orrs	r3, r1
 8006b74:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b76:	e003      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b88:	f002 0304 	and.w	r3, r2, #4
 8006b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b90:	2300      	movs	r3, #0
 8006b92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b96:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	d044      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ba8:	2b05      	cmp	r3, #5
 8006baa:	d825      	bhi.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006bac:	a201      	add	r2, pc, #4	@ (adr r2, 8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb2:	bf00      	nop
 8006bb4:	08006c01 	.word	0x08006c01
 8006bb8:	08006bcd 	.word	0x08006bcd
 8006bbc:	08006be3 	.word	0x08006be3
 8006bc0:	08006c01 	.word	0x08006c01
 8006bc4:	08006c01 	.word	0x08006c01
 8006bc8:	08006c01 	.word	0x08006c01
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f001 fdef 	bl	80087b8 <RCCEx_PLL2_Config>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006be0:	e00f      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be6:	3328      	adds	r3, #40	@ 0x28
 8006be8:	2101      	movs	r1, #1
 8006bea:	4618      	mov	r0, r3
 8006bec:	f001 fe96 	bl	800891c <RCCEx_PLL3_Config>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006bf6:	e004      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bfe:	e000      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10b      	bne.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c0a:	4b6c      	ldr	r3, [pc, #432]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c0e:	f023 0107 	bic.w	r1, r3, #7
 8006c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c1a:	4a68      	ldr	r2, [pc, #416]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c1c:	430b      	orrs	r3, r1
 8006c1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c20:	e003      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c32:	f002 0320 	and.w	r3, r2, #32
 8006c36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c44:	460b      	mov	r3, r1
 8006c46:	4313      	orrs	r3, r2
 8006c48:	d055      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c56:	d033      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c5c:	d82c      	bhi.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c62:	d02f      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c68:	d826      	bhi.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c6e:	d02b      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006c70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c74:	d820      	bhi.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c7a:	d012      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006c7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c80:	d81a      	bhi.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d022      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006c86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c8a:	d115      	bne.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c90:	3308      	adds	r3, #8
 8006c92:	2100      	movs	r1, #0
 8006c94:	4618      	mov	r0, r3
 8006c96:	f001 fd8f 	bl	80087b8 <RCCEx_PLL2_Config>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006ca0:	e015      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca6:	3328      	adds	r3, #40	@ 0x28
 8006ca8:	2102      	movs	r1, #2
 8006caa:	4618      	mov	r0, r3
 8006cac:	f001 fe36 	bl	800891c <RCCEx_PLL3_Config>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006cb6:	e00a      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cbe:	e006      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006cc0:	bf00      	nop
 8006cc2:	e004      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006cc4:	bf00      	nop
 8006cc6:	e002      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006cc8:	bf00      	nop
 8006cca:	e000      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10b      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cd6:	4b39      	ldr	r3, [pc, #228]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cda:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ce6:	4a35      	ldr	r2, [pc, #212]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ce8:	430b      	orrs	r3, r1
 8006cea:	6553      	str	r3, [r2, #84]	@ 0x54
 8006cec:	e003      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006d02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d06:	2300      	movs	r3, #0
 8006d08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006d0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006d10:	460b      	mov	r3, r1
 8006d12:	4313      	orrs	r3, r2
 8006d14:	d058      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d1e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006d22:	d033      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006d24:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006d28:	d82c      	bhi.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d2e:	d02f      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d34:	d826      	bhi.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d3a:	d02b      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006d3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d40:	d820      	bhi.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d46:	d012      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006d48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d4c:	d81a      	bhi.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d022      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d56:	d115      	bne.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	2100      	movs	r1, #0
 8006d60:	4618      	mov	r0, r3
 8006d62:	f001 fd29 	bl	80087b8 <RCCEx_PLL2_Config>
 8006d66:	4603      	mov	r3, r0
 8006d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006d6c:	e015      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d72:	3328      	adds	r3, #40	@ 0x28
 8006d74:	2102      	movs	r1, #2
 8006d76:	4618      	mov	r0, r3
 8006d78:	f001 fdd0 	bl	800891c <RCCEx_PLL3_Config>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006d82:	e00a      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d8a:	e006      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d8c:	bf00      	nop
 8006d8e:	e004      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d90:	bf00      	nop
 8006d92:	e002      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d94:	bf00      	nop
 8006d96:	e000      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10e      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006da2:	4b06      	ldr	r3, [pc, #24]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006da6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006db2:	4a02      	ldr	r2, [pc, #8]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006db4:	430b      	orrs	r3, r1
 8006db6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006db8:	e006      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006dba:	bf00      	nop
 8006dbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006dd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006dde:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006de2:	460b      	mov	r3, r1
 8006de4:	4313      	orrs	r3, r2
 8006de6:	d055      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006df0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006df4:	d033      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006df6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006dfa:	d82c      	bhi.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e00:	d02f      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006e02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e06:	d826      	bhi.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e08:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006e0c:	d02b      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006e0e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006e12:	d820      	bhi.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e18:	d012      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006e1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e1e:	d81a      	bhi.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d022      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006e24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e28:	d115      	bne.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e2e:	3308      	adds	r3, #8
 8006e30:	2100      	movs	r1, #0
 8006e32:	4618      	mov	r0, r3
 8006e34:	f001 fcc0 	bl	80087b8 <RCCEx_PLL2_Config>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006e3e:	e015      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e44:	3328      	adds	r3, #40	@ 0x28
 8006e46:	2102      	movs	r1, #2
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f001 fd67 	bl	800891c <RCCEx_PLL3_Config>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006e54:	e00a      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e5c:	e006      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e5e:	bf00      	nop
 8006e60:	e004      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e62:	bf00      	nop
 8006e64:	e002      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e66:	bf00      	nop
 8006e68:	e000      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10b      	bne.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006e74:	4ba1      	ldr	r3, [pc, #644]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e78:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006e84:	4a9d      	ldr	r2, [pc, #628]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e86:	430b      	orrs	r3, r1
 8006e88:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e8a:	e003      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	f002 0308 	and.w	r3, r2, #8
 8006ea0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006eaa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	d01e      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ec0:	d10c      	bne.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec6:	3328      	adds	r3, #40	@ 0x28
 8006ec8:	2102      	movs	r1, #2
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f001 fd26 	bl	800891c <RCCEx_PLL3_Config>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006edc:	4b87      	ldr	r3, [pc, #540]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ee0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006eec:	4a83      	ldr	r2, [pc, #524]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006eee:	430b      	orrs	r3, r1
 8006ef0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efa:	f002 0310 	and.w	r3, r2, #16
 8006efe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f02:	2300      	movs	r3, #0
 8006f04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f08:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	d01e      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f1e:	d10c      	bne.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f24:	3328      	adds	r3, #40	@ 0x28
 8006f26:	2102      	movs	r1, #2
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f001 fcf7 	bl	800891c <RCCEx_PLL3_Config>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f3a:	4b70      	ldr	r3, [pc, #448]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f4a:	4a6c      	ldr	r2, [pc, #432]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f58:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006f5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f60:	2300      	movs	r3, #0
 8006f62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f66:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	d03e      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f7c:	d022      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006f7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f82:	d81b      	bhi.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d003      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f8c:	d00b      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006f8e:	e015      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f94:	3308      	adds	r3, #8
 8006f96:	2100      	movs	r1, #0
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f001 fc0d 	bl	80087b8 <RCCEx_PLL2_Config>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006fa4:	e00f      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006faa:	3328      	adds	r3, #40	@ 0x28
 8006fac:	2102      	movs	r1, #2
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f001 fcb4 	bl	800891c <RCCEx_PLL3_Config>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006fba:	e004      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fc2:	e000      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10b      	bne.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006fce:	4b4b      	ldr	r3, [pc, #300]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fd2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006fde:	4a47      	ldr	r2, [pc, #284]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fe0:	430b      	orrs	r3, r1
 8006fe2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fe4:	e003      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006ffa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007000:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007004:	460b      	mov	r3, r1
 8007006:	4313      	orrs	r3, r2
 8007008:	d03b      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800700a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800700e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007012:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007016:	d01f      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007018:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800701c:	d818      	bhi.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800701e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007022:	d003      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007024:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007028:	d007      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800702a:	e011      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800702c:	4b33      	ldr	r3, [pc, #204]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800702e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007030:	4a32      	ldr	r2, [pc, #200]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007036:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007038:	e00f      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800703a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800703e:	3328      	adds	r3, #40	@ 0x28
 8007040:	2101      	movs	r1, #1
 8007042:	4618      	mov	r0, r3
 8007044:	f001 fc6a 	bl	800891c <RCCEx_PLL3_Config>
 8007048:	4603      	mov	r3, r0
 800704a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800704e:	e004      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007056:	e000      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800705a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10b      	bne.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007062:	4b26      	ldr	r3, [pc, #152]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007066:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800706a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800706e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007072:	4a22      	ldr	r2, [pc, #136]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007074:	430b      	orrs	r3, r1
 8007076:	6553      	str	r3, [r2, #84]	@ 0x54
 8007078:	e003      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800707e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800708e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007090:	2300      	movs	r3, #0
 8007092:	677b      	str	r3, [r7, #116]	@ 0x74
 8007094:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007098:	460b      	mov	r3, r1
 800709a:	4313      	orrs	r3, r2
 800709c:	d034      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800709e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d003      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80070a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070ac:	d007      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80070ae:	e011      	b.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070b0:	4b12      	ldr	r3, [pc, #72]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b4:	4a11      	ldr	r2, [pc, #68]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80070bc:	e00e      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c2:	3308      	adds	r3, #8
 80070c4:	2102      	movs	r1, #2
 80070c6:	4618      	mov	r0, r3
 80070c8:	f001 fb76 	bl	80087b8 <RCCEx_PLL2_Config>
 80070cc:	4603      	mov	r3, r0
 80070ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80070d2:	e003      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10d      	bne.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80070e4:	4b05      	ldr	r3, [pc, #20]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070e8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80070ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070f2:	4a02      	ldr	r2, [pc, #8]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070f4:	430b      	orrs	r3, r1
 80070f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80070f8:	e006      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80070fa:	bf00      	nop
 80070fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007104:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800710c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007110:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007114:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007116:	2300      	movs	r3, #0
 8007118:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800711a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800711e:	460b      	mov	r3, r1
 8007120:	4313      	orrs	r3, r2
 8007122:	d00c      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007128:	3328      	adds	r3, #40	@ 0x28
 800712a:	2102      	movs	r1, #2
 800712c:	4618      	mov	r0, r3
 800712e:	f001 fbf5 	bl	800891c <RCCEx_PLL3_Config>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800713e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007146:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800714a:	663b      	str	r3, [r7, #96]	@ 0x60
 800714c:	2300      	movs	r3, #0
 800714e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007150:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007154:	460b      	mov	r3, r1
 8007156:	4313      	orrs	r3, r2
 8007158:	d038      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800715a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800715e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007162:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007166:	d018      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007168:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800716c:	d811      	bhi.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800716e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007172:	d014      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007178:	d80b      	bhi.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800717a:	2b00      	cmp	r3, #0
 800717c:	d011      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800717e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007182:	d106      	bne.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007184:	4bc3      	ldr	r3, [pc, #780]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007188:	4ac2      	ldr	r2, [pc, #776]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800718a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800718e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007190:	e008      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007198:	e004      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800719a:	bf00      	nop
 800719c:	e002      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800719e:	bf00      	nop
 80071a0:	e000      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80071a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10b      	bne.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071ac:	4bb9      	ldr	r3, [pc, #740]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071b0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80071b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071bc:	4ab5      	ldr	r2, [pc, #724]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071be:	430b      	orrs	r3, r1
 80071c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80071c2:	e003      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80071cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80071d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071da:	2300      	movs	r3, #0
 80071dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80071e2:	460b      	mov	r3, r1
 80071e4:	4313      	orrs	r3, r2
 80071e6:	d009      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80071e8:	4baa      	ldr	r3, [pc, #680]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80071f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071f6:	4aa7      	ldr	r2, [pc, #668]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071f8:	430b      	orrs	r3, r1
 80071fa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80071fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007208:	653b      	str	r3, [r7, #80]	@ 0x50
 800720a:	2300      	movs	r3, #0
 800720c:	657b      	str	r3, [r7, #84]	@ 0x54
 800720e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007212:	460b      	mov	r3, r1
 8007214:	4313      	orrs	r3, r2
 8007216:	d00a      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007218:	4b9e      	ldr	r3, [pc, #632]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007224:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007228:	4a9a      	ldr	r2, [pc, #616]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800722a:	430b      	orrs	r3, r1
 800722c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800722e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007236:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800723a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800723c:	2300      	movs	r3, #0
 800723e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007240:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007244:	460b      	mov	r3, r1
 8007246:	4313      	orrs	r3, r2
 8007248:	d009      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800724a:	4b92      	ldr	r3, [pc, #584]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800724c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800724e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007258:	4a8e      	ldr	r2, [pc, #568]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800725a:	430b      	orrs	r3, r1
 800725c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800725e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007266:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800726a:	643b      	str	r3, [r7, #64]	@ 0x40
 800726c:	2300      	movs	r3, #0
 800726e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007270:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007274:	460b      	mov	r3, r1
 8007276:	4313      	orrs	r3, r2
 8007278:	d00e      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800727a:	4b86      	ldr	r3, [pc, #536]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	4a85      	ldr	r2, [pc, #532]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007280:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007284:	6113      	str	r3, [r2, #16]
 8007286:	4b83      	ldr	r3, [pc, #524]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007288:	6919      	ldr	r1, [r3, #16]
 800728a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800728e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007292:	4a80      	ldr	r2, [pc, #512]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007294:	430b      	orrs	r3, r1
 8007296:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80072a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072a6:	2300      	movs	r3, #0
 80072a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072aa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80072ae:	460b      	mov	r3, r1
 80072b0:	4313      	orrs	r3, r2
 80072b2:	d009      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80072b4:	4b77      	ldr	r3, [pc, #476]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072b8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80072bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072c2:	4a74      	ldr	r2, [pc, #464]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072c4:	430b      	orrs	r3, r1
 80072c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80072d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80072d6:	2300      	movs	r3, #0
 80072d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80072de:	460b      	mov	r3, r1
 80072e0:	4313      	orrs	r3, r2
 80072e2:	d00a      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072e4:	4b6b      	ldr	r3, [pc, #428]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072e8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80072ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072f4:	4a67      	ldr	r2, [pc, #412]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072f6:	430b      	orrs	r3, r1
 80072f8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80072fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007302:	2100      	movs	r1, #0
 8007304:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800730c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007310:	460b      	mov	r3, r1
 8007312:	4313      	orrs	r3, r2
 8007314:	d011      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800731a:	3308      	adds	r3, #8
 800731c:	2100      	movs	r1, #0
 800731e:	4618      	mov	r0, r3
 8007320:	f001 fa4a 	bl	80087b8 <RCCEx_PLL2_Config>
 8007324:	4603      	mov	r3, r0
 8007326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800732a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007336:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800733a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007342:	2100      	movs	r1, #0
 8007344:	6239      	str	r1, [r7, #32]
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	627b      	str	r3, [r7, #36]	@ 0x24
 800734c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007350:	460b      	mov	r3, r1
 8007352:	4313      	orrs	r3, r2
 8007354:	d011      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800735a:	3308      	adds	r3, #8
 800735c:	2101      	movs	r1, #1
 800735e:	4618      	mov	r0, r3
 8007360:	f001 fa2a 	bl	80087b8 <RCCEx_PLL2_Config>
 8007364:	4603      	mov	r3, r0
 8007366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800736a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007376:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800737a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	2100      	movs	r1, #0
 8007384:	61b9      	str	r1, [r7, #24]
 8007386:	f003 0304 	and.w	r3, r3, #4
 800738a:	61fb      	str	r3, [r7, #28]
 800738c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007390:	460b      	mov	r3, r1
 8007392:	4313      	orrs	r3, r2
 8007394:	d011      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739a:	3308      	adds	r3, #8
 800739c:	2102      	movs	r1, #2
 800739e:	4618      	mov	r0, r3
 80073a0:	f001 fa0a 	bl	80087b8 <RCCEx_PLL2_Config>
 80073a4:	4603      	mov	r3, r0
 80073a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80073aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80073ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	2100      	movs	r1, #0
 80073c4:	6139      	str	r1, [r7, #16]
 80073c6:	f003 0308 	and.w	r3, r3, #8
 80073ca:	617b      	str	r3, [r7, #20]
 80073cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80073d0:	460b      	mov	r3, r1
 80073d2:	4313      	orrs	r3, r2
 80073d4:	d011      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073da:	3328      	adds	r3, #40	@ 0x28
 80073dc:	2100      	movs	r1, #0
 80073de:	4618      	mov	r0, r3
 80073e0:	f001 fa9c 	bl	800891c <RCCEx_PLL3_Config>
 80073e4:	4603      	mov	r3, r0
 80073e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80073ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80073fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	2100      	movs	r1, #0
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	f003 0310 	and.w	r3, r3, #16
 800740a:	60fb      	str	r3, [r7, #12]
 800740c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007410:	460b      	mov	r3, r1
 8007412:	4313      	orrs	r3, r2
 8007414:	d011      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741a:	3328      	adds	r3, #40	@ 0x28
 800741c:	2101      	movs	r1, #1
 800741e:	4618      	mov	r0, r3
 8007420:	f001 fa7c 	bl	800891c <RCCEx_PLL3_Config>
 8007424:	4603      	mov	r3, r0
 8007426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800742a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007436:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800743a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	2100      	movs	r1, #0
 8007444:	6039      	str	r1, [r7, #0]
 8007446:	f003 0320 	and.w	r3, r3, #32
 800744a:	607b      	str	r3, [r7, #4]
 800744c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007450:	460b      	mov	r3, r1
 8007452:	4313      	orrs	r3, r2
 8007454:	d011      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745a:	3328      	adds	r3, #40	@ 0x28
 800745c:	2102      	movs	r1, #2
 800745e:	4618      	mov	r0, r3
 8007460:	f001 fa5c 	bl	800891c <RCCEx_PLL3_Config>
 8007464:	4603      	mov	r3, r0
 8007466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800746a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007476:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800747a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	e000      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
}
 8007488:	4618      	mov	r0, r3
 800748a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800748e:	46bd      	mov	sp, r7
 8007490:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007494:	58024400 	.word	0x58024400

08007498 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b090      	sub	sp, #64	@ 0x40
 800749c:	af00      	add	r7, sp, #0
 800749e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80074a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074a6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80074aa:	430b      	orrs	r3, r1
 80074ac:	f040 8094 	bne.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80074b0:	4b9e      	ldr	r3, [pc, #632]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80074ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074bc:	2b04      	cmp	r3, #4
 80074be:	f200 8087 	bhi.w	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80074c2:	a201      	add	r2, pc, #4	@ (adr r2, 80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80074c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c8:	080074dd 	.word	0x080074dd
 80074cc:	08007505 	.word	0x08007505
 80074d0:	0800752d 	.word	0x0800752d
 80074d4:	080075c9 	.word	0x080075c9
 80074d8:	08007555 	.word	0x08007555
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80074dc:	4b93      	ldr	r3, [pc, #588]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074e8:	d108      	bne.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074ee:	4618      	mov	r0, r3
 80074f0:	f001 f810 	bl	8008514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074f8:	f000 bd45 	b.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074fc:	2300      	movs	r3, #0
 80074fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007500:	f000 bd41 	b.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007504:	4b89      	ldr	r3, [pc, #548]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800750c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007510:	d108      	bne.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007512:	f107 0318 	add.w	r3, r7, #24
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fd54 	bl	8007fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007520:	f000 bd31 	b.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007524:	2300      	movs	r3, #0
 8007526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007528:	f000 bd2d 	b.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800752c:	4b7f      	ldr	r3, [pc, #508]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007538:	d108      	bne.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800753a:	f107 030c 	add.w	r3, r7, #12
 800753e:	4618      	mov	r0, r3
 8007540:	f000 fe94 	bl	800826c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007548:	f000 bd1d 	b.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800754c:	2300      	movs	r3, #0
 800754e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007550:	f000 bd19 	b.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007554:	4b75      	ldr	r3, [pc, #468]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007558:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800755c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800755e:	4b73      	ldr	r3, [pc, #460]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0304 	and.w	r3, r3, #4
 8007566:	2b04      	cmp	r3, #4
 8007568:	d10c      	bne.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800756a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800756c:	2b00      	cmp	r3, #0
 800756e:	d109      	bne.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007570:	4b6e      	ldr	r3, [pc, #440]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	08db      	lsrs	r3, r3, #3
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	4a6d      	ldr	r2, [pc, #436]	@ (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800757c:	fa22 f303 	lsr.w	r3, r2, r3
 8007580:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007582:	e01f      	b.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007584:	4b69      	ldr	r3, [pc, #420]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800758c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007590:	d106      	bne.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007594:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007598:	d102      	bne.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800759a:	4b66      	ldr	r3, [pc, #408]	@ (8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800759c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800759e:	e011      	b.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80075a0:	4b62      	ldr	r3, [pc, #392]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075ac:	d106      	bne.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80075ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075b4:	d102      	bne.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80075b6:	4b60      	ldr	r3, [pc, #384]	@ (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80075b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075ba:	e003      	b.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80075bc:	2300      	movs	r3, #0
 80075be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80075c0:	f000 bce1 	b.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80075c4:	f000 bcdf 	b.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80075c8:	4b5c      	ldr	r3, [pc, #368]	@ (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80075ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075cc:	f000 bcdb 	b.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80075d0:	2300      	movs	r3, #0
 80075d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075d4:	f000 bcd7 	b.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80075d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075dc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80075e0:	430b      	orrs	r3, r1
 80075e2:	f040 80ad 	bne.w	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80075e6:	4b51      	ldr	r3, [pc, #324]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ea:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80075ee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80075f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075f6:	d056      	beq.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80075f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075fe:	f200 8090 	bhi.w	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007604:	2bc0      	cmp	r3, #192	@ 0xc0
 8007606:	f000 8088 	beq.w	800771a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800760a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760c:	2bc0      	cmp	r3, #192	@ 0xc0
 800760e:	f200 8088 	bhi.w	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007614:	2b80      	cmp	r3, #128	@ 0x80
 8007616:	d032      	beq.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761a:	2b80      	cmp	r3, #128	@ 0x80
 800761c:	f200 8081 	bhi.w	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007628:	2b40      	cmp	r3, #64	@ 0x40
 800762a:	d014      	beq.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800762c:	e079      	b.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800762e:	4b3f      	ldr	r3, [pc, #252]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007636:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800763a:	d108      	bne.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800763c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007640:	4618      	mov	r0, r3
 8007642:	f000 ff67 	bl	8008514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800764a:	f000 bc9c 	b.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800764e:	2300      	movs	r3, #0
 8007650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007652:	f000 bc98 	b.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007656:	4b35      	ldr	r3, [pc, #212]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800765e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007662:	d108      	bne.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007664:	f107 0318 	add.w	r3, r7, #24
 8007668:	4618      	mov	r0, r3
 800766a:	f000 fcab 	bl	8007fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007672:	f000 bc88 	b.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007676:	2300      	movs	r3, #0
 8007678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800767a:	f000 bc84 	b.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800767e:	4b2b      	ldr	r3, [pc, #172]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007686:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800768a:	d108      	bne.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800768c:	f107 030c 	add.w	r3, r7, #12
 8007690:	4618      	mov	r0, r3
 8007692:	f000 fdeb 	bl	800826c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800769a:	f000 bc74 	b.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800769e:	2300      	movs	r3, #0
 80076a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076a2:	f000 bc70 	b.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80076a6:	4b21      	ldr	r3, [pc, #132]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80076ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80076b0:	4b1e      	ldr	r3, [pc, #120]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	2b04      	cmp	r3, #4
 80076ba:	d10c      	bne.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80076bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d109      	bne.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076c2:	4b1a      	ldr	r3, [pc, #104]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	08db      	lsrs	r3, r3, #3
 80076c8:	f003 0303 	and.w	r3, r3, #3
 80076cc:	4a18      	ldr	r2, [pc, #96]	@ (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80076ce:	fa22 f303 	lsr.w	r3, r2, r3
 80076d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076d4:	e01f      	b.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076d6:	4b15      	ldr	r3, [pc, #84]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076e2:	d106      	bne.n	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80076e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076ea:	d102      	bne.n	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80076ec:	4b11      	ldr	r3, [pc, #68]	@ (8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80076ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076f0:	e011      	b.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076f2:	4b0e      	ldr	r3, [pc, #56]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076fe:	d106      	bne.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007702:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007706:	d102      	bne.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007708:	4b0b      	ldr	r3, [pc, #44]	@ (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800770a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800770c:	e003      	b.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007712:	f000 bc38 	b.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007716:	f000 bc36 	b.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800771a:	4b08      	ldr	r3, [pc, #32]	@ (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800771c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800771e:	f000 bc32 	b.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007722:	2300      	movs	r3, #0
 8007724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007726:	f000 bc2e 	b.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800772a:	bf00      	nop
 800772c:	58024400 	.word	0x58024400
 8007730:	03d09000 	.word	0x03d09000
 8007734:	003d0900 	.word	0x003d0900
 8007738:	017d7840 	.word	0x017d7840
 800773c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007744:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007748:	430b      	orrs	r3, r1
 800774a:	f040 809c 	bne.w	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800774e:	4b9e      	ldr	r3, [pc, #632]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007752:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007756:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800775e:	d054      	beq.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007762:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007766:	f200 808b 	bhi.w	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800776a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007770:	f000 8083 	beq.w	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007776:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800777a:	f200 8081 	bhi.w	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800777e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007780:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007784:	d02f      	beq.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007788:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800778c:	d878      	bhi.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800778e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007790:	2b00      	cmp	r3, #0
 8007792:	d004      	beq.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007796:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800779a:	d012      	beq.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800779c:	e070      	b.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800779e:	4b8a      	ldr	r3, [pc, #552]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077aa:	d107      	bne.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 feaf 	bl	8008514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80077b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077ba:	e3e4      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077c0:	e3e1      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077c2:	4b81      	ldr	r3, [pc, #516]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077ce:	d107      	bne.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077d0:	f107 0318 	add.w	r3, r7, #24
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 fbf5 	bl	8007fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077de:	e3d2      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077e0:	2300      	movs	r3, #0
 80077e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077e4:	e3cf      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077e6:	4b78      	ldr	r3, [pc, #480]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077f2:	d107      	bne.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077f4:	f107 030c 	add.w	r3, r7, #12
 80077f8:	4618      	mov	r0, r3
 80077fa:	f000 fd37 	bl	800826c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007802:	e3c0      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007808:	e3bd      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800780a:	4b6f      	ldr	r3, [pc, #444]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800780c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800780e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007812:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007814:	4b6c      	ldr	r3, [pc, #432]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0304 	and.w	r3, r3, #4
 800781c:	2b04      	cmp	r3, #4
 800781e:	d10c      	bne.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007822:	2b00      	cmp	r3, #0
 8007824:	d109      	bne.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007826:	4b68      	ldr	r3, [pc, #416]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	08db      	lsrs	r3, r3, #3
 800782c:	f003 0303 	and.w	r3, r3, #3
 8007830:	4a66      	ldr	r2, [pc, #408]	@ (80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007832:	fa22 f303 	lsr.w	r3, r2, r3
 8007836:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007838:	e01e      	b.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800783a:	4b63      	ldr	r3, [pc, #396]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007846:	d106      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800784a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800784e:	d102      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007850:	4b5f      	ldr	r3, [pc, #380]	@ (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007852:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007854:	e010      	b.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007856:	4b5c      	ldr	r3, [pc, #368]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800785e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007862:	d106      	bne.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800786a:	d102      	bne.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800786c:	4b59      	ldr	r3, [pc, #356]	@ (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800786e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007870:	e002      	b.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007872:	2300      	movs	r3, #0
 8007874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007876:	e386      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007878:	e385      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800787a:	4b57      	ldr	r3, [pc, #348]	@ (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800787c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800787e:	e382      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007880:	2300      	movs	r3, #0
 8007882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007884:	e37f      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800788a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800788e:	430b      	orrs	r3, r1
 8007890:	f040 80a7 	bne.w	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007894:	4b4c      	ldr	r3, [pc, #304]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007898:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800789c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800789e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80078a4:	d055      	beq.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80078a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80078ac:	f200 8096 	bhi.w	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80078b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80078b6:	f000 8084 	beq.w	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80078ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80078c0:	f200 808c 	bhi.w	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80078c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078ca:	d030      	beq.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80078cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078d2:	f200 8083 	bhi.w	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d004      	beq.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80078dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078e2:	d012      	beq.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80078e4:	e07a      	b.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078e6:	4b38      	ldr	r3, [pc, #224]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078f2:	d107      	bne.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 fe0b 	bl	8008514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007902:	e340      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007904:	2300      	movs	r3, #0
 8007906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007908:	e33d      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800790a:	4b2f      	ldr	r3, [pc, #188]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007912:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007916:	d107      	bne.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007918:	f107 0318 	add.w	r3, r7, #24
 800791c:	4618      	mov	r0, r3
 800791e:	f000 fb51 	bl	8007fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007926:	e32e      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007928:	2300      	movs	r3, #0
 800792a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800792c:	e32b      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800792e:	4b26      	ldr	r3, [pc, #152]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800793a:	d107      	bne.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800793c:	f107 030c 	add.w	r3, r7, #12
 8007940:	4618      	mov	r0, r3
 8007942:	f000 fc93 	bl	800826c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800794a:	e31c      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800794c:	2300      	movs	r3, #0
 800794e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007950:	e319      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007952:	4b1d      	ldr	r3, [pc, #116]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007956:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800795a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800795c:	4b1a      	ldr	r3, [pc, #104]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0304 	and.w	r3, r3, #4
 8007964:	2b04      	cmp	r3, #4
 8007966:	d10c      	bne.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800796a:	2b00      	cmp	r3, #0
 800796c:	d109      	bne.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800796e:	4b16      	ldr	r3, [pc, #88]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	08db      	lsrs	r3, r3, #3
 8007974:	f003 0303 	and.w	r3, r3, #3
 8007978:	4a14      	ldr	r2, [pc, #80]	@ (80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800797a:	fa22 f303 	lsr.w	r3, r2, r3
 800797e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007980:	e01e      	b.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007982:	4b11      	ldr	r3, [pc, #68]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800798a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800798e:	d106      	bne.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007992:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007996:	d102      	bne.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007998:	4b0d      	ldr	r3, [pc, #52]	@ (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800799a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800799c:	e010      	b.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800799e:	4b0a      	ldr	r3, [pc, #40]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079aa:	d106      	bne.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80079ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079b2:	d102      	bne.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80079b4:	4b07      	ldr	r3, [pc, #28]	@ (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80079b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079b8:	e002      	b.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80079ba:	2300      	movs	r3, #0
 80079bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80079be:	e2e2      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80079c0:	e2e1      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80079c2:	4b05      	ldr	r3, [pc, #20]	@ (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80079c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079c6:	e2de      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80079c8:	58024400 	.word	0x58024400
 80079cc:	03d09000 	.word	0x03d09000
 80079d0:	003d0900 	.word	0x003d0900
 80079d4:	017d7840 	.word	0x017d7840
 80079d8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079e0:	e2d1      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80079e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079e6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80079ea:	430b      	orrs	r3, r1
 80079ec:	f040 809c 	bne.w	8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80079f0:	4b93      	ldr	r3, [pc, #588]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079f4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80079f8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80079fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a00:	d054      	beq.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a08:	f200 808b 	bhi.w	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a12:	f000 8083 	beq.w	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a1c:	f200 8081 	bhi.w	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a26:	d02f      	beq.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a2e:	d878      	bhi.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d004      	beq.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a3c:	d012      	beq.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007a3e:	e070      	b.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a40:	4b7f      	ldr	r3, [pc, #508]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a4c:	d107      	bne.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 fd5e 	bl	8008514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a5c:	e293      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a62:	e290      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a64:	4b76      	ldr	r3, [pc, #472]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a70:	d107      	bne.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a72:	f107 0318 	add.w	r3, r7, #24
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 faa4 	bl	8007fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a80:	e281      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a82:	2300      	movs	r3, #0
 8007a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a86:	e27e      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a88:	4b6d      	ldr	r3, [pc, #436]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a94:	d107      	bne.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a96:	f107 030c 	add.w	r3, r7, #12
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 fbe6 	bl	800826c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007aa4:	e26f      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aaa:	e26c      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007aac:	4b64      	ldr	r3, [pc, #400]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ab0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ab4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ab6:	4b62      	ldr	r3, [pc, #392]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0304 	and.w	r3, r3, #4
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d10c      	bne.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d109      	bne.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ac8:	4b5d      	ldr	r3, [pc, #372]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	08db      	lsrs	r3, r3, #3
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	4a5c      	ldr	r2, [pc, #368]	@ (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ada:	e01e      	b.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007adc:	4b58      	ldr	r3, [pc, #352]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ae8:	d106      	bne.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007af0:	d102      	bne.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007af2:	4b55      	ldr	r3, [pc, #340]	@ (8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007af6:	e010      	b.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007af8:	4b51      	ldr	r3, [pc, #324]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b04:	d106      	bne.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b0c:	d102      	bne.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b0e:	4b4f      	ldr	r3, [pc, #316]	@ (8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b12:	e002      	b.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b14:	2300      	movs	r3, #0
 8007b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007b18:	e235      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b1a:	e234      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b1c:	4b4c      	ldr	r3, [pc, #304]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b20:	e231      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b26:	e22e      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b2c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007b30:	430b      	orrs	r3, r1
 8007b32:	f040 808f 	bne.w	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007b36:	4b42      	ldr	r3, [pc, #264]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b3a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b46:	d06b      	beq.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b4e:	d874      	bhi.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b56:	d056      	beq.n	8007c06 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b5e:	d86c      	bhi.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b66:	d03b      	beq.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b6e:	d864      	bhi.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b76:	d021      	beq.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b7e:	d85c      	bhi.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d004      	beq.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b8c:	d004      	beq.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007b8e:	e054      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007b90:	f7fe fa0a 	bl	8005fa8 <HAL_RCC_GetPCLK1Freq>
 8007b94:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b96:	e1f6      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b98:	4b29      	ldr	r3, [pc, #164]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ba0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ba4:	d107      	bne.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ba6:	f107 0318 	add.w	r3, r7, #24
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 fa0a 	bl	8007fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bb4:	e1e7      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bba:	e1e4      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bbc:	4b20      	ldr	r3, [pc, #128]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bc8:	d107      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bca:	f107 030c 	add.w	r3, r7, #12
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 fb4c 	bl	800826c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bd8:	e1d5      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bde:	e1d2      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007be0:	4b17      	ldr	r3, [pc, #92]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0304 	and.w	r3, r3, #4
 8007be8:	2b04      	cmp	r3, #4
 8007bea:	d109      	bne.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bec:	4b14      	ldr	r3, [pc, #80]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	08db      	lsrs	r3, r3, #3
 8007bf2:	f003 0303 	and.w	r3, r3, #3
 8007bf6:	4a13      	ldr	r2, [pc, #76]	@ (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bfe:	e1c2      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c00:	2300      	movs	r3, #0
 8007c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c04:	e1bf      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007c06:	4b0e      	ldr	r3, [pc, #56]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c12:	d102      	bne.n	8007c1a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007c14:	4b0c      	ldr	r3, [pc, #48]	@ (8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c18:	e1b5      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c1e:	e1b2      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007c20:	4b07      	ldr	r3, [pc, #28]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c2c:	d102      	bne.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007c2e:	4b07      	ldr	r3, [pc, #28]	@ (8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c32:	e1a8      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c38:	e1a5      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c3e:	e1a2      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c40:	58024400 	.word	0x58024400
 8007c44:	03d09000 	.word	0x03d09000
 8007c48:	003d0900 	.word	0x003d0900
 8007c4c:	017d7840 	.word	0x017d7840
 8007c50:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007c54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c58:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007c5c:	430b      	orrs	r3, r1
 8007c5e:	d173      	bne.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007c60:	4b9c      	ldr	r3, [pc, #624]	@ (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007c68:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c70:	d02f      	beq.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c78:	d863      	bhi.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d004      	beq.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c86:	d012      	beq.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007c88:	e05b      	b.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c8a:	4b92      	ldr	r3, [pc, #584]	@ (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c96:	d107      	bne.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c98:	f107 0318 	add.w	r3, r7, #24
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f000 f991 	bl	8007fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ca6:	e16e      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cac:	e16b      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007cae:	4b89      	ldr	r3, [pc, #548]	@ (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007cb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cba:	d107      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cbc:	f107 030c 	add.w	r3, r7, #12
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 fad3 	bl	800826c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cca:	e15c      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cd0:	e159      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007cd2:	4b80      	ldr	r3, [pc, #512]	@ (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007cda:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007cdc:	4b7d      	ldr	r3, [pc, #500]	@ (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0304 	and.w	r3, r3, #4
 8007ce4:	2b04      	cmp	r3, #4
 8007ce6:	d10c      	bne.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d109      	bne.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cee:	4b79      	ldr	r3, [pc, #484]	@ (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	08db      	lsrs	r3, r3, #3
 8007cf4:	f003 0303 	and.w	r3, r3, #3
 8007cf8:	4a77      	ldr	r2, [pc, #476]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8007cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d00:	e01e      	b.n	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d02:	4b74      	ldr	r3, [pc, #464]	@ (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d0e:	d106      	bne.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d16:	d102      	bne.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d18:	4b70      	ldr	r3, [pc, #448]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d1c:	e010      	b.n	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d2a:	d106      	bne.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d32:	d102      	bne.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007d34:	4b6a      	ldr	r3, [pc, #424]	@ (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d38:	e002      	b.n	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007d3e:	e122      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d40:	e121      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007d42:	2300      	movs	r3, #0
 8007d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d46:	e11e      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d4c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007d50:	430b      	orrs	r3, r1
 8007d52:	d133      	bne.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007d54:	4b5f      	ldr	r3, [pc, #380]	@ (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d5c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d004      	beq.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d6a:	d012      	beq.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007d6c:	e023      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d6e:	4b59      	ldr	r3, [pc, #356]	@ (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d7a:	d107      	bne.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 fbc7 	bl	8008514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d8a:	e0fc      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d90:	e0f9      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d92:	4b50      	ldr	r3, [pc, #320]	@ (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d9e:	d107      	bne.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007da0:	f107 0318 	add.w	r3, r7, #24
 8007da4:	4618      	mov	r0, r3
 8007da6:	f000 f90d 	bl	8007fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dae:	e0ea      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007db0:	2300      	movs	r3, #0
 8007db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007db4:	e0e7      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007db6:	2300      	movs	r3, #0
 8007db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dba:	e0e4      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dc0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007dc4:	430b      	orrs	r3, r1
 8007dc6:	f040 808d 	bne.w	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007dca:	4b42      	ldr	r3, [pc, #264]	@ (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dce:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007dd2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007dda:	d06b      	beq.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007de2:	d874      	bhi.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dea:	d056      	beq.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007df2:	d86c      	bhi.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007dfa:	d03b      	beq.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e02:	d864      	bhi.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e0a:	d021      	beq.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e12:	d85c      	bhi.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d004      	beq.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e20:	d004      	beq.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007e22:	e054      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007e24:	f000 f8b8 	bl	8007f98 <HAL_RCCEx_GetD3PCLK1Freq>
 8007e28:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e2a:	e0ac      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e2c:	4b29      	ldr	r3, [pc, #164]	@ (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e38:	d107      	bne.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e3a:	f107 0318 	add.w	r3, r7, #24
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 f8c0 	bl	8007fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e48:	e09d      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e4e:	e09a      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e50:	4b20      	ldr	r3, [pc, #128]	@ (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e5c:	d107      	bne.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e5e:	f107 030c 	add.w	r3, r7, #12
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 fa02 	bl	800826c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e6c:	e08b      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e72:	e088      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e74:	4b17      	ldr	r3, [pc, #92]	@ (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0304 	and.w	r3, r3, #4
 8007e7c:	2b04      	cmp	r3, #4
 8007e7e:	d109      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e80:	4b14      	ldr	r3, [pc, #80]	@ (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	08db      	lsrs	r3, r3, #3
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	4a13      	ldr	r2, [pc, #76]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e92:	e078      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e94:	2300      	movs	r3, #0
 8007e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e98:	e075      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ea6:	d102      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eac:	e06b      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eb2:	e068      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007eb4:	4b07      	ldr	r3, [pc, #28]	@ (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ebc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ec0:	d102      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007ec2:	4b07      	ldr	r3, [pc, #28]	@ (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ec6:	e05e      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ecc:	e05b      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ed2:	e058      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ed4:	58024400 	.word	0x58024400
 8007ed8:	03d09000 	.word	0x03d09000
 8007edc:	003d0900 	.word	0x003d0900
 8007ee0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ee8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007eec:	430b      	orrs	r3, r1
 8007eee:	d148      	bne.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007ef0:	4b27      	ldr	r3, [pc, #156]	@ (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ef4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ef8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f00:	d02a      	beq.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f08:	d838      	bhi.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d004      	beq.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f16:	d00d      	beq.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007f18:	e030      	b.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f26:	d102      	bne.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007f28:	4b1a      	ldr	r3, [pc, #104]	@ (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f2c:	e02b      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f32:	e028      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f34:	4b16      	ldr	r3, [pc, #88]	@ (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f40:	d107      	bne.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 fae4 	bl	8008514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f50:	e019      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f52:	2300      	movs	r3, #0
 8007f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f56:	e016      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f58:	4b0d      	ldr	r3, [pc, #52]	@ (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f64:	d107      	bne.n	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f66:	f107 0318 	add.w	r3, r7, #24
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 f82a 	bl	8007fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f74:	e007      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f76:	2300      	movs	r3, #0
 8007f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f7a:	e004      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f80:	e001      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007f82:	2300      	movs	r3, #0
 8007f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3740      	adds	r7, #64	@ 0x40
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	58024400 	.word	0x58024400
 8007f94:	017d7840 	.word	0x017d7840

08007f98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f9c:	f7fd ffd4 	bl	8005f48 <HAL_RCC_GetHCLKFreq>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	4b06      	ldr	r3, [pc, #24]	@ (8007fbc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	091b      	lsrs	r3, r3, #4
 8007fa8:	f003 0307 	and.w	r3, r3, #7
 8007fac:	4904      	ldr	r1, [pc, #16]	@ (8007fc0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007fae:	5ccb      	ldrb	r3, [r1, r3]
 8007fb0:	f003 031f 	and.w	r3, r3, #31
 8007fb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	58024400 	.word	0x58024400
 8007fc0:	08017d04 	.word	0x08017d04

08007fc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b089      	sub	sp, #36	@ 0x24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007fcc:	4ba1      	ldr	r3, [pc, #644]	@ (8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd0:	f003 0303 	and.w	r3, r3, #3
 8007fd4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007fd6:	4b9f      	ldr	r3, [pc, #636]	@ (8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fda:	0b1b      	lsrs	r3, r3, #12
 8007fdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007fe0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007fe2:	4b9c      	ldr	r3, [pc, #624]	@ (8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe6:	091b      	lsrs	r3, r3, #4
 8007fe8:	f003 0301 	and.w	r3, r3, #1
 8007fec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007fee:	4b99      	ldr	r3, [pc, #612]	@ (8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ff2:	08db      	lsrs	r3, r3, #3
 8007ff4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	fb02 f303 	mul.w	r3, r2, r3
 8007ffe:	ee07 3a90 	vmov	s15, r3
 8008002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008006:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2b00      	cmp	r3, #0
 800800e:	f000 8111 	beq.w	8008234 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	2b02      	cmp	r3, #2
 8008016:	f000 8083 	beq.w	8008120 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	2b02      	cmp	r3, #2
 800801e:	f200 80a1 	bhi.w	8008164 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d003      	beq.n	8008030 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d056      	beq.n	80080dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800802e:	e099      	b.n	8008164 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008030:	4b88      	ldr	r3, [pc, #544]	@ (8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0320 	and.w	r3, r3, #32
 8008038:	2b00      	cmp	r3, #0
 800803a:	d02d      	beq.n	8008098 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800803c:	4b85      	ldr	r3, [pc, #532]	@ (8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	08db      	lsrs	r3, r3, #3
 8008042:	f003 0303 	and.w	r3, r3, #3
 8008046:	4a84      	ldr	r2, [pc, #528]	@ (8008258 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008048:	fa22 f303 	lsr.w	r3, r2, r3
 800804c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	ee07 3a90 	vmov	s15, r3
 8008054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	ee07 3a90 	vmov	s15, r3
 800805e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008066:	4b7b      	ldr	r3, [pc, #492]	@ (8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800806a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806e:	ee07 3a90 	vmov	s15, r3
 8008072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008076:	ed97 6a03 	vldr	s12, [r7, #12]
 800807a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800825c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800807e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800808a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800808e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008092:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008096:	e087      	b.n	80081a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008260 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80080a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080aa:	4b6a      	ldr	r3, [pc, #424]	@ (8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b2:	ee07 3a90 	vmov	s15, r3
 80080b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80080be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800825c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080da:	e065      	b.n	80081a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	ee07 3a90 	vmov	s15, r3
 80080e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ee:	4b59      	ldr	r3, [pc, #356]	@ (8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f6:	ee07 3a90 	vmov	s15, r3
 80080fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008102:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800825c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800810a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800810e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800811a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800811e:	e043      	b.n	80081a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	ee07 3a90 	vmov	s15, r3
 8008126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800812a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008268 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800812e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008132:	4b48      	ldr	r3, [pc, #288]	@ (8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800813a:	ee07 3a90 	vmov	s15, r3
 800813e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008142:	ed97 6a03 	vldr	s12, [r7, #12]
 8008146:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800825c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800814a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800814e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800815a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800815e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008162:	e021      	b.n	80081a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	ee07 3a90 	vmov	s15, r3
 800816a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800816e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008176:	4b37      	ldr	r3, [pc, #220]	@ (8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800817a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800817e:	ee07 3a90 	vmov	s15, r3
 8008182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008186:	ed97 6a03 	vldr	s12, [r7, #12]
 800818a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800825c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800818e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800819a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800819e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80081a8:	4b2a      	ldr	r3, [pc, #168]	@ (8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ac:	0a5b      	lsrs	r3, r3, #9
 80081ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081b2:	ee07 3a90 	vmov	s15, r3
 80081b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80081c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081ce:	ee17 2a90 	vmov	r2, s15
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80081d6:	4b1f      	ldr	r3, [pc, #124]	@ (8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081da:	0c1b      	lsrs	r3, r3, #16
 80081dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081e0:	ee07 3a90 	vmov	s15, r3
 80081e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80081f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081fc:	ee17 2a90 	vmov	r2, s15
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008204:	4b13      	ldr	r3, [pc, #76]	@ (8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008208:	0e1b      	lsrs	r3, r3, #24
 800820a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800820e:	ee07 3a90 	vmov	s15, r3
 8008212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008216:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800821a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800821e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800822a:	ee17 2a90 	vmov	r2, s15
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008232:	e008      	b.n	8008246 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	609a      	str	r2, [r3, #8]
}
 8008246:	bf00      	nop
 8008248:	3724      	adds	r7, #36	@ 0x24
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	58024400 	.word	0x58024400
 8008258:	03d09000 	.word	0x03d09000
 800825c:	46000000 	.word	0x46000000
 8008260:	4c742400 	.word	0x4c742400
 8008264:	4a742400 	.word	0x4a742400
 8008268:	4bbebc20 	.word	0x4bbebc20

0800826c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800826c:	b480      	push	{r7}
 800826e:	b089      	sub	sp, #36	@ 0x24
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008274:	4ba1      	ldr	r3, [pc, #644]	@ (80084fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008278:	f003 0303 	and.w	r3, r3, #3
 800827c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800827e:	4b9f      	ldr	r3, [pc, #636]	@ (80084fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008282:	0d1b      	lsrs	r3, r3, #20
 8008284:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008288:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800828a:	4b9c      	ldr	r3, [pc, #624]	@ (80084fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800828c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800828e:	0a1b      	lsrs	r3, r3, #8
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008296:	4b99      	ldr	r3, [pc, #612]	@ (80084fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800829a:	08db      	lsrs	r3, r3, #3
 800829c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	fb02 f303 	mul.w	r3, r2, r3
 80082a6:	ee07 3a90 	vmov	s15, r3
 80082aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 8111 	beq.w	80084dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	2b02      	cmp	r3, #2
 80082be:	f000 8083 	beq.w	80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	f200 80a1 	bhi.w	800840c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d003      	beq.n	80082d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d056      	beq.n	8008384 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80082d6:	e099      	b.n	800840c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082d8:	4b88      	ldr	r3, [pc, #544]	@ (80084fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 0320 	and.w	r3, r3, #32
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d02d      	beq.n	8008340 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082e4:	4b85      	ldr	r3, [pc, #532]	@ (80084fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	08db      	lsrs	r3, r3, #3
 80082ea:	f003 0303 	and.w	r3, r3, #3
 80082ee:	4a84      	ldr	r2, [pc, #528]	@ (8008500 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80082f0:	fa22 f303 	lsr.w	r3, r2, r3
 80082f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	ee07 3a90 	vmov	s15, r3
 80082fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	ee07 3a90 	vmov	s15, r3
 8008306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800830e:	4b7b      	ldr	r3, [pc, #492]	@ (80084fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008316:	ee07 3a90 	vmov	s15, r3
 800831a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800831e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008322:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800832a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800832e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800833a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800833e:	e087      	b.n	8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	ee07 3a90 	vmov	s15, r3
 8008346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800834a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008508 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800834e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008352:	4b6a      	ldr	r3, [pc, #424]	@ (80084fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800835a:	ee07 3a90 	vmov	s15, r3
 800835e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008362:	ed97 6a03 	vldr	s12, [r7, #12]
 8008366:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800836a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800836e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800837a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800837e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008382:	e065      	b.n	8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	ee07 3a90 	vmov	s15, r3
 800838a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800838e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800850c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008396:	4b59      	ldr	r3, [pc, #356]	@ (80084fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800839a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800839e:	ee07 3a90 	vmov	s15, r3
 80083a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80083aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083c6:	e043      	b.n	8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	ee07 3a90 	vmov	s15, r3
 80083ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008510 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80083d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083da:	4b48      	ldr	r3, [pc, #288]	@ (80084fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083e2:	ee07 3a90 	vmov	s15, r3
 80083e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800840a:	e021      	b.n	8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	ee07 3a90 	vmov	s15, r3
 8008412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008416:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800850c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800841a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800841e:	4b37      	ldr	r3, [pc, #220]	@ (80084fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008426:	ee07 3a90 	vmov	s15, r3
 800842a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800842e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008432:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800843a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800843e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800844a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800844e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008450:	4b2a      	ldr	r3, [pc, #168]	@ (80084fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008454:	0a5b      	lsrs	r3, r3, #9
 8008456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800845a:	ee07 3a90 	vmov	s15, r3
 800845e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008462:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008466:	ee37 7a87 	vadd.f32	s14, s15, s14
 800846a:	edd7 6a07 	vldr	s13, [r7, #28]
 800846e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008476:	ee17 2a90 	vmov	r2, s15
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800847e:	4b1f      	ldr	r3, [pc, #124]	@ (80084fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008482:	0c1b      	lsrs	r3, r3, #16
 8008484:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008488:	ee07 3a90 	vmov	s15, r3
 800848c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008490:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008494:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008498:	edd7 6a07 	vldr	s13, [r7, #28]
 800849c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084a4:	ee17 2a90 	vmov	r2, s15
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80084ac:	4b13      	ldr	r3, [pc, #76]	@ (80084fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b0:	0e1b      	lsrs	r3, r3, #24
 80084b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084b6:	ee07 3a90 	vmov	s15, r3
 80084ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80084ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084d2:	ee17 2a90 	vmov	r2, s15
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80084da:	e008      	b.n	80084ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	609a      	str	r2, [r3, #8]
}
 80084ee:	bf00      	nop
 80084f0:	3724      	adds	r7, #36	@ 0x24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	58024400 	.word	0x58024400
 8008500:	03d09000 	.word	0x03d09000
 8008504:	46000000 	.word	0x46000000
 8008508:	4c742400 	.word	0x4c742400
 800850c:	4a742400 	.word	0x4a742400
 8008510:	4bbebc20 	.word	0x4bbebc20

08008514 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008514:	b480      	push	{r7}
 8008516:	b089      	sub	sp, #36	@ 0x24
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800851c:	4ba0      	ldr	r3, [pc, #640]	@ (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800851e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008520:	f003 0303 	and.w	r3, r3, #3
 8008524:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008526:	4b9e      	ldr	r3, [pc, #632]	@ (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852a:	091b      	lsrs	r3, r3, #4
 800852c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008530:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008532:	4b9b      	ldr	r3, [pc, #620]	@ (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800853c:	4b98      	ldr	r3, [pc, #608]	@ (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800853e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008540:	08db      	lsrs	r3, r3, #3
 8008542:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	fb02 f303 	mul.w	r3, r2, r3
 800854c:	ee07 3a90 	vmov	s15, r3
 8008550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008554:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 8111 	beq.w	8008782 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	2b02      	cmp	r3, #2
 8008564:	f000 8083 	beq.w	800866e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	2b02      	cmp	r3, #2
 800856c:	f200 80a1 	bhi.w	80086b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d003      	beq.n	800857e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d056      	beq.n	800862a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800857c:	e099      	b.n	80086b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800857e:	4b88      	ldr	r3, [pc, #544]	@ (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 0320 	and.w	r3, r3, #32
 8008586:	2b00      	cmp	r3, #0
 8008588:	d02d      	beq.n	80085e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800858a:	4b85      	ldr	r3, [pc, #532]	@ (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	08db      	lsrs	r3, r3, #3
 8008590:	f003 0303 	and.w	r3, r3, #3
 8008594:	4a83      	ldr	r2, [pc, #524]	@ (80087a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008596:	fa22 f303 	lsr.w	r3, r2, r3
 800859a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	ee07 3a90 	vmov	s15, r3
 80085a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	ee07 3a90 	vmov	s15, r3
 80085ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085b4:	4b7a      	ldr	r3, [pc, #488]	@ (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085bc:	ee07 3a90 	vmov	s15, r3
 80085c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80085c8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80087a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085e0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80085e4:	e087      	b.n	80086f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	ee07 3a90 	vmov	s15, r3
 80085ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085f0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80087ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80085f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085f8:	4b69      	ldr	r3, [pc, #420]	@ (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008600:	ee07 3a90 	vmov	s15, r3
 8008604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008608:	ed97 6a03 	vldr	s12, [r7, #12]
 800860c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80087a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008610:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008614:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008618:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800861c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008624:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008628:	e065      	b.n	80086f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	ee07 3a90 	vmov	s15, r3
 8008630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008634:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80087b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008638:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800863c:	4b58      	ldr	r3, [pc, #352]	@ (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800863e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008644:	ee07 3a90 	vmov	s15, r3
 8008648:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800864c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008650:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80087a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008654:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008658:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800865c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008660:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008668:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800866c:	e043      	b.n	80086f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	ee07 3a90 	vmov	s15, r3
 8008674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008678:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80087b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800867c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008680:	4b47      	ldr	r3, [pc, #284]	@ (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008688:	ee07 3a90 	vmov	s15, r3
 800868c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008690:	ed97 6a03 	vldr	s12, [r7, #12]
 8008694:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80087a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008698:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800869c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086b0:	e021      	b.n	80086f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	ee07 3a90 	vmov	s15, r3
 80086b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086bc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80087ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80086c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086c4:	4b36      	ldr	r3, [pc, #216]	@ (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086cc:	ee07 3a90 	vmov	s15, r3
 80086d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80086d8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80087a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80086dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80086f6:	4b2a      	ldr	r3, [pc, #168]	@ (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086fa:	0a5b      	lsrs	r3, r3, #9
 80086fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008700:	ee07 3a90 	vmov	s15, r3
 8008704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008708:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800870c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008710:	edd7 6a07 	vldr	s13, [r7, #28]
 8008714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800871c:	ee17 2a90 	vmov	r2, s15
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008724:	4b1e      	ldr	r3, [pc, #120]	@ (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008728:	0c1b      	lsrs	r3, r3, #16
 800872a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008736:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800873a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800873e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800874a:	ee17 2a90 	vmov	r2, s15
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008752:	4b13      	ldr	r3, [pc, #76]	@ (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008756:	0e1b      	lsrs	r3, r3, #24
 8008758:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800875c:	ee07 3a90 	vmov	s15, r3
 8008760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008764:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008768:	ee37 7a87 	vadd.f32	s14, s15, s14
 800876c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008778:	ee17 2a90 	vmov	r2, s15
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008780:	e008      	b.n	8008794 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	609a      	str	r2, [r3, #8]
}
 8008794:	bf00      	nop
 8008796:	3724      	adds	r7, #36	@ 0x24
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	58024400 	.word	0x58024400
 80087a4:	03d09000 	.word	0x03d09000
 80087a8:	46000000 	.word	0x46000000
 80087ac:	4c742400 	.word	0x4c742400
 80087b0:	4a742400 	.word	0x4a742400
 80087b4:	4bbebc20 	.word	0x4bbebc20

080087b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80087c6:	4b53      	ldr	r3, [pc, #332]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 80087c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ca:	f003 0303 	and.w	r3, r3, #3
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d101      	bne.n	80087d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e099      	b.n	800890a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80087d6:	4b4f      	ldr	r3, [pc, #316]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a4e      	ldr	r2, [pc, #312]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 80087dc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80087e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087e2:	f7fb faf5 	bl	8003dd0 <HAL_GetTick>
 80087e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087e8:	e008      	b.n	80087fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80087ea:	f7fb faf1 	bl	8003dd0 <HAL_GetTick>
 80087ee:	4602      	mov	r2, r0
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d901      	bls.n	80087fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80087f8:	2303      	movs	r3, #3
 80087fa:	e086      	b.n	800890a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087fc:	4b45      	ldr	r3, [pc, #276]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1f0      	bne.n	80087ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008808:	4b42      	ldr	r3, [pc, #264]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 800880a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800880c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	031b      	lsls	r3, r3, #12
 8008816:	493f      	ldr	r1, [pc, #252]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 8008818:	4313      	orrs	r3, r2
 800881a:	628b      	str	r3, [r1, #40]	@ 0x28
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	3b01      	subs	r3, #1
 8008822:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	3b01      	subs	r3, #1
 800882c:	025b      	lsls	r3, r3, #9
 800882e:	b29b      	uxth	r3, r3
 8008830:	431a      	orrs	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	3b01      	subs	r3, #1
 8008838:	041b      	lsls	r3, r3, #16
 800883a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800883e:	431a      	orrs	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	3b01      	subs	r3, #1
 8008846:	061b      	lsls	r3, r3, #24
 8008848:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800884c:	4931      	ldr	r1, [pc, #196]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 800884e:	4313      	orrs	r3, r2
 8008850:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008852:	4b30      	ldr	r3, [pc, #192]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 8008854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008856:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	492d      	ldr	r1, [pc, #180]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 8008860:	4313      	orrs	r3, r2
 8008862:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008864:	4b2b      	ldr	r3, [pc, #172]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 8008866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008868:	f023 0220 	bic.w	r2, r3, #32
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	699b      	ldr	r3, [r3, #24]
 8008870:	4928      	ldr	r1, [pc, #160]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 8008872:	4313      	orrs	r3, r2
 8008874:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008876:	4b27      	ldr	r3, [pc, #156]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 8008878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800887a:	4a26      	ldr	r2, [pc, #152]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 800887c:	f023 0310 	bic.w	r3, r3, #16
 8008880:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008882:	4b24      	ldr	r3, [pc, #144]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 8008884:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008886:	4b24      	ldr	r3, [pc, #144]	@ (8008918 <RCCEx_PLL2_Config+0x160>)
 8008888:	4013      	ands	r3, r2
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	69d2      	ldr	r2, [r2, #28]
 800888e:	00d2      	lsls	r2, r2, #3
 8008890:	4920      	ldr	r1, [pc, #128]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 8008892:	4313      	orrs	r3, r2
 8008894:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008896:	4b1f      	ldr	r3, [pc, #124]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 8008898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800889a:	4a1e      	ldr	r2, [pc, #120]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 800889c:	f043 0310 	orr.w	r3, r3, #16
 80088a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d106      	bne.n	80088b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80088a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 80088aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ac:	4a19      	ldr	r2, [pc, #100]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 80088ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80088b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80088b4:	e00f      	b.n	80088d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d106      	bne.n	80088ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80088bc:	4b15      	ldr	r3, [pc, #84]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 80088be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088c0:	4a14      	ldr	r2, [pc, #80]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 80088c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80088c8:	e005      	b.n	80088d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80088ca:	4b12      	ldr	r3, [pc, #72]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 80088cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ce:	4a11      	ldr	r2, [pc, #68]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 80088d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80088d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80088d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a0e      	ldr	r2, [pc, #56]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 80088dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80088e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088e2:	f7fb fa75 	bl	8003dd0 <HAL_GetTick>
 80088e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088e8:	e008      	b.n	80088fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80088ea:	f7fb fa71 	bl	8003dd0 <HAL_GetTick>
 80088ee:	4602      	mov	r2, r0
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d901      	bls.n	80088fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e006      	b.n	800890a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088fc:	4b05      	ldr	r3, [pc, #20]	@ (8008914 <RCCEx_PLL2_Config+0x15c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d0f0      	beq.n	80088ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008908:	7bfb      	ldrb	r3, [r7, #15]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	58024400 	.word	0x58024400
 8008918:	ffff0007 	.word	0xffff0007

0800891c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800892a:	4b53      	ldr	r3, [pc, #332]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 800892c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800892e:	f003 0303 	and.w	r3, r3, #3
 8008932:	2b03      	cmp	r3, #3
 8008934:	d101      	bne.n	800893a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e099      	b.n	8008a6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800893a:	4b4f      	ldr	r3, [pc, #316]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a4e      	ldr	r2, [pc, #312]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008940:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008946:	f7fb fa43 	bl	8003dd0 <HAL_GetTick>
 800894a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800894c:	e008      	b.n	8008960 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800894e:	f7fb fa3f 	bl	8003dd0 <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	2b02      	cmp	r3, #2
 800895a:	d901      	bls.n	8008960 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e086      	b.n	8008a6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008960:	4b45      	ldr	r3, [pc, #276]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1f0      	bne.n	800894e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800896c:	4b42      	ldr	r3, [pc, #264]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 800896e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008970:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	051b      	lsls	r3, r3, #20
 800897a:	493f      	ldr	r1, [pc, #252]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 800897c:	4313      	orrs	r3, r2
 800897e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	3b01      	subs	r3, #1
 8008986:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	3b01      	subs	r3, #1
 8008990:	025b      	lsls	r3, r3, #9
 8008992:	b29b      	uxth	r3, r3
 8008994:	431a      	orrs	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	3b01      	subs	r3, #1
 800899c:	041b      	lsls	r3, r3, #16
 800899e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80089a2:	431a      	orrs	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	3b01      	subs	r3, #1
 80089aa:	061b      	lsls	r3, r3, #24
 80089ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80089b0:	4931      	ldr	r1, [pc, #196]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80089b6:	4b30      	ldr	r3, [pc, #192]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 80089b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	492d      	ldr	r1, [pc, #180]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 80089c4:	4313      	orrs	r3, r2
 80089c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80089c8:	4b2b      	ldr	r3, [pc, #172]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 80089ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	4928      	ldr	r1, [pc, #160]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 80089d6:	4313      	orrs	r3, r2
 80089d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80089da:	4b27      	ldr	r3, [pc, #156]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 80089dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089de:	4a26      	ldr	r2, [pc, #152]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 80089e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80089e6:	4b24      	ldr	r3, [pc, #144]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 80089e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089ea:	4b24      	ldr	r3, [pc, #144]	@ (8008a7c <RCCEx_PLL3_Config+0x160>)
 80089ec:	4013      	ands	r3, r2
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	69d2      	ldr	r2, [r2, #28]
 80089f2:	00d2      	lsls	r2, r2, #3
 80089f4:	4920      	ldr	r1, [pc, #128]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 80089f6:	4313      	orrs	r3, r2
 80089f8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80089fa:	4b1f      	ldr	r3, [pc, #124]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 80089fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fe:	4a1e      	ldr	r2, [pc, #120]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d106      	bne.n	8008a1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a10:	4a19      	ldr	r2, [pc, #100]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008a12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008a16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a18:	e00f      	b.n	8008a3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d106      	bne.n	8008a2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008a20:	4b15      	ldr	r3, [pc, #84]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a24:	4a14      	ldr	r2, [pc, #80]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008a26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a2c:	e005      	b.n	8008a3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008a2e:	4b12      	ldr	r3, [pc, #72]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a32:	4a11      	ldr	r2, [pc, #68]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008a34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a46:	f7fb f9c3 	bl	8003dd0 <HAL_GetTick>
 8008a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a4c:	e008      	b.n	8008a60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a4e:	f7fb f9bf 	bl	8003dd0 <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d901      	bls.n	8008a60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e006      	b.n	8008a6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a60:	4b05      	ldr	r3, [pc, #20]	@ (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d0f0      	beq.n	8008a4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	58024400 	.word	0x58024400
 8008a7c:	ffff0007 	.word	0xffff0007

08008a80 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b08a      	sub	sp, #40	@ 0x28
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e075      	b.n	8008b7e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d105      	bne.n	8008aaa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7f8 fcdd 	bl	8001464 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2204      	movs	r2, #4
 8008aae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f868 	bl	8008b88 <HAL_SD_InitCard>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d001      	beq.n	8008ac2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e05d      	b.n	8008b7e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008ac2:	f107 0308 	add.w	r3, r7, #8
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fdaf 	bl	800962c <HAL_SD_GetCardStatus>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e052      	b.n	8008b7e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008ad8:	7e3b      	ldrb	r3, [r7, #24]
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008ade:	7e7b      	ldrb	r3, [r7, #25]
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d10a      	bne.n	8008b02 <HAL_SD_Init+0x82>
 8008aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d102      	bne.n	8008af8 <HAL_SD_Init+0x78>
 8008af2:	6a3b      	ldr	r3, [r7, #32]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d004      	beq.n	8008b02 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008afe:	659a      	str	r2, [r3, #88]	@ 0x58
 8008b00:	e00b      	b.n	8008b1a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d104      	bne.n	8008b14 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b10:	659a      	str	r2, [r3, #88]	@ 0x58
 8008b12:	e002      	b.n	8008b1a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fe6d 	bl	8009800 <HAL_SD_ConfigWideBusOperation>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d001      	beq.n	8008b30 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e026      	b.n	8008b7e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008b30:	f7fb f94e 	bl	8003dd0 <HAL_GetTick>
 8008b34:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008b36:	e011      	b.n	8008b5c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008b38:	f7fb f94a 	bl	8003dd0 <HAL_GetTick>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b46:	d109      	bne.n	8008b5c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b4e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e010      	b.n	8008b7e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 ff61 	bl	8009a24 <HAL_SD_GetCardState>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b04      	cmp	r3, #4
 8008b66:	d1e7      	bne.n	8008b38 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3728      	adds	r7, #40	@ 0x28
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
	...

08008b88 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008b88:	b590      	push	{r4, r7, lr}
 8008b8a:	b08d      	sub	sp, #52	@ 0x34
 8008b8c:	af02      	add	r7, sp, #8
 8008b8e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008b90:	2300      	movs	r3, #0
 8008b92:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008b94:	2300      	movs	r3, #0
 8008b96:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008ba0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008ba4:	f04f 0100 	mov.w	r1, #0
 8008ba8:	f7fe fc76 	bl	8007498 <HAL_RCCEx_GetPeriphCLKFreq>
 8008bac:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8008bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d109      	bne.n	8008bc8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008bc2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e070      	b.n	8008caa <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bca:	0a1b      	lsrs	r3, r3, #8
 8008bcc:	4a39      	ldr	r2, [pc, #228]	@ (8008cb4 <HAL_SD_InitCard+0x12c>)
 8008bce:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd2:	091b      	lsrs	r3, r3, #4
 8008bd4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681c      	ldr	r4, [r3, #0]
 8008bda:	466a      	mov	r2, sp
 8008bdc:	f107 0318 	add.w	r3, r7, #24
 8008be0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008be4:	e882 0003 	stmia.w	r2, {r0, r1}
 8008be8:	f107 030c 	add.w	r3, r7, #12
 8008bec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f005 fb8e 	bl	800e310 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f005 fbd1 	bl	800e3a0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d005      	beq.n	8008c10 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	005b      	lsls	r3, r3, #1
 8008c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d007      	beq.n	8008c26 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008c16:	4a28      	ldr	r2, [pc, #160]	@ (8008cb8 <HAL_SD_InitCard+0x130>)
 8008c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c1e:	3301      	adds	r3, #1
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fb f8e1 	bl	8003de8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 ffea 	bl	8009c00 <SD_PowerON>
 8008c2c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c2e:	6a3b      	ldr	r3, [r7, #32]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00b      	beq.n	8008c4c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c40:	6a3b      	ldr	r3, [r7, #32]
 8008c42:	431a      	orrs	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e02e      	b.n	8008caa <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 ff09 	bl	8009a64 <SD_InitCard>
 8008c52:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c54:	6a3b      	ldr	r3, [r7, #32]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00b      	beq.n	8008c72 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c66:	6a3b      	ldr	r3, [r7, #32]
 8008c68:	431a      	orrs	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e01b      	b.n	8008caa <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f005 fc26 	bl	800e4cc <SDMMC_CmdBlockLength>
 8008c80:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c82:	6a3b      	ldr	r3, [r7, #32]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00f      	beq.n	8008ca8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8008cbc <HAL_SD_InitCard+0x134>)
 8008c8e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c94:	6a3b      	ldr	r3, [r7, #32]
 8008c96:	431a      	orrs	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e000      	b.n	8008caa <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	372c      	adds	r7, #44	@ 0x2c
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd90      	pop	{r4, r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	014f8b59 	.word	0x014f8b59
 8008cb8:	00012110 	.word	0x00012110
 8008cbc:	1fe00fff 	.word	0x1fe00fff

08008cc0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b08c      	sub	sp, #48	@ 0x30
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
 8008ccc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d107      	bne.n	8008ce8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cdc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e08d      	b.n	8008e04 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	f040 8086 	bne.w	8008e02 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008cfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	441a      	add	r2, r3
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d907      	bls.n	8008d1a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d0e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e074      	b.n	8008e04 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2203      	movs	r2, #3
 8008d1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2200      	movs	r2, #0
 8008d28:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	025a      	lsls	r2, r3, #9
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d002      	beq.n	8008d46 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8008d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d42:	025b      	lsls	r3, r3, #9
 8008d44:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d4a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	025b      	lsls	r3, r3, #9
 8008d50:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008d52:	2390      	movs	r3, #144	@ 0x90
 8008d54:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008d56:	2302      	movs	r3, #2
 8008d58:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f107 0210 	add.w	r2, r7, #16
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f005 fb81 	bl	800e474 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68da      	ldr	r2, [r3, #12]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d80:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d90a      	bls.n	8008dae <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2282      	movs	r2, #130	@ 0x82
 8008d9c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008da4:	4618      	mov	r0, r3
 8008da6:	f005 fbd7 	bl	800e558 <SDMMC_CmdReadMultiBlock>
 8008daa:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008dac:	e009      	b.n	8008dc2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2281      	movs	r2, #129	@ 0x81
 8008db2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f005 fba9 	bl	800e512 <SDMMC_CmdReadSingleBlock>
 8008dc0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d012      	beq.n	8008dee <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a0f      	ldr	r2, [pc, #60]	@ (8008e0c <HAL_SD_ReadBlocks_DMA+0x14c>)
 8008dce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd6:	431a      	orrs	r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e00a      	b.n	8008e04 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8008dfc:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	e000      	b.n	8008e04 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008e02:	2302      	movs	r3, #2
  }
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3730      	adds	r7, #48	@ 0x30
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	1fe00fff 	.word	0x1fe00fff

08008e10 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b08c      	sub	sp, #48	@ 0x30
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
 8008e1c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d107      	bne.n	8008e38 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e2c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	e08d      	b.n	8008f54 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	f040 8086 	bne.w	8008f52 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008e4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	441a      	add	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d907      	bls.n	8008e6a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e5e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e074      	b.n	8008f54 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2203      	movs	r2, #3
 8008e6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2200      	movs	r2, #0
 8008e78:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	025a      	lsls	r2, r3, #9
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d002      	beq.n	8008e96 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e92:	025b      	lsls	r3, r3, #9
 8008e94:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e9a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	025b      	lsls	r3, r3, #9
 8008ea0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008ea2:	2390      	movs	r3, #144	@ 0x90
 8008ea4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f107 0210 	add.w	r2, r7, #16
 8008eba:	4611      	mov	r1, r2
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f005 fad9 	bl	800e474 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68da      	ldr	r2, [r3, #12]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ed0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d90a      	bls.n	8008efe <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	22a0      	movs	r2, #160	@ 0xa0
 8008eec:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f005 fb75 	bl	800e5e4 <SDMMC_CmdWriteMultiBlock>
 8008efa:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008efc:	e009      	b.n	8008f12 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2290      	movs	r2, #144	@ 0x90
 8008f02:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f005 fb47 	bl	800e59e <SDMMC_CmdWriteSingleBlock>
 8008f10:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d012      	beq.n	8008f3e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a0f      	ldr	r2, [pc, #60]	@ (8008f5c <HAL_SD_WriteBlocks_DMA+0x14c>)
 8008f1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f26:	431a      	orrs	r2, r3
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e00a      	b.n	8008f54 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8008f4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	e000      	b.n	8008f54 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008f52:	2302      	movs	r3, #2
  }
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3730      	adds	r7, #48	@ 0x30
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	1fe00fff 	.word	0x1fe00fff

08008f60 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f6c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d008      	beq.n	8008f8e <HAL_SD_IRQHandler+0x2e>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f003 0308 	and.w	r3, r3, #8
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d003      	beq.n	8008f8e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f001 f926 	bl	800a1d8 <SD_Read_IT>
 8008f8c:	e19a      	b.n	80092c4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f000 80ac 	beq.w	80090f6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008fa6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	4b59      	ldr	r3, [pc, #356]	@ (8009118 <HAL_SD_IRQHandler+0x1b8>)
 8008fb4:	400b      	ands	r3, r1
 8008fb6:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8008fc6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68da      	ldr	r2, [r3, #12]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008fd6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f003 0308 	and.w	r3, r3, #8
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d038      	beq.n	8009054 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f003 0302 	and.w	r3, r3, #2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d104      	bne.n	8008ff6 <HAL_SD_IRQHandler+0x96>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f003 0320 	and.w	r3, r3, #32
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d011      	beq.n	800901a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f005 fb16 	bl	800e62c <SDMMC_CmdStopTransfer>
 8009000:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d008      	beq.n	800901a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	431a      	orrs	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 f95b 	bl	80092d0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a3f      	ldr	r2, [pc, #252]	@ (800911c <HAL_SD_IRQHandler+0x1bc>)
 8009020:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	d104      	bne.n	8009044 <HAL_SD_IRQHandler+0xe4>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f003 0302 	and.w	r3, r3, #2
 8009040:	2b00      	cmp	r3, #0
 8009042:	d003      	beq.n	800904c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f005 ffc9 	bl	800efdc <HAL_SD_RxCpltCallback>
 800904a:	e13b      	b.n	80092c4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f005 ffbb 	bl	800efc8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009052:	e137      	b.n	80092c4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 8132 	beq.w	80092c4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2200      	movs	r2, #0
 8009066:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2200      	movs	r2, #0
 800906e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2200      	movs	r2, #0
 8009076:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f003 0302 	and.w	r3, r3, #2
 800907e:	2b00      	cmp	r3, #0
 8009080:	d104      	bne.n	800908c <HAL_SD_IRQHandler+0x12c>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f003 0320 	and.w	r3, r3, #32
 8009088:	2b00      	cmp	r3, #0
 800908a:	d011      	beq.n	80090b0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4618      	mov	r0, r3
 8009092:	f005 facb 	bl	800e62c <SDMMC_CmdStopTransfer>
 8009096:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d008      	beq.n	80090b0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	431a      	orrs	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f910 	bl	80092d0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f003 0310 	and.w	r3, r3, #16
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d104      	bne.n	80090d2 <HAL_SD_IRQHandler+0x172>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f003 0320 	and.w	r3, r3, #32
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d002      	beq.n	80090d8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f005 ff78 	bl	800efc8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d105      	bne.n	80090ee <HAL_SD_IRQHandler+0x18e>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f003 0302 	and.w	r3, r3, #2
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f000 80eb 	beq.w	80092c4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f005 ff74 	bl	800efdc <HAL_SD_RxCpltCallback>
}
 80090f4:	e0e6      	b.n	80092c4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00d      	beq.n	8009120 <HAL_SD_IRQHandler+0x1c0>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f003 0308 	and.w	r3, r3, #8
 800910a:	2b00      	cmp	r3, #0
 800910c:	d008      	beq.n	8009120 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f001 f8a8 	bl	800a264 <SD_Write_IT>
 8009114:	e0d6      	b.n	80092c4 <HAL_SD_IRQHandler+0x364>
 8009116:	bf00      	nop
 8009118:	ffff3ec5 	.word	0xffff3ec5
 800911c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009126:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800912a:	2b00      	cmp	r3, #0
 800912c:	f000 809d 	beq.w	800926a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d005      	beq.n	800914a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009142:	f043 0202 	orr.w	r2, r3, #2
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009150:	f003 0308 	and.w	r3, r3, #8
 8009154:	2b00      	cmp	r3, #0
 8009156:	d005      	beq.n	8009164 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800915c:	f043 0208 	orr.w	r2, r3, #8
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800916a:	f003 0320 	and.w	r3, r3, #32
 800916e:	2b00      	cmp	r3, #0
 8009170:	d005      	beq.n	800917e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009176:	f043 0220 	orr.w	r2, r3, #32
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009184:	f003 0310 	and.w	r3, r3, #16
 8009188:	2b00      	cmp	r3, #0
 800918a:	d005      	beq.n	8009198 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009190:	f043 0210 	orr.w	r2, r3, #16
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a4b      	ldr	r2, [pc, #300]	@ (80092cc <HAL_SD_IRQHandler+0x36c>)
 800919e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80091ae:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68da      	ldr	r2, [r3, #12]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091be:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80091ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68da      	ldr	r2, [r3, #12]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80091de:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f005 fa21 	bl	800e62c <SDMMC_CmdStopTransfer>
 80091ea:	4602      	mov	r2, r0
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091f0:	431a      	orrs	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68da      	ldr	r2, [r3, #12]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009204:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800920e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f003 0308 	and.w	r3, r3, #8
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00a      	beq.n	8009230 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f851 	bl	80092d0 <HAL_SD_ErrorCallback>
}
 800922e:	e049      	b.n	80092c4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009236:	2b00      	cmp	r3, #0
 8009238:	d044      	beq.n	80092c4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800923e:	2b00      	cmp	r3, #0
 8009240:	d040      	beq.n	80092c4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8009250:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2200      	movs	r2, #0
 8009258:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f834 	bl	80092d0 <HAL_SD_ErrorCallback>
}
 8009268:	e02c      	b.n	80092c4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d025      	beq.n	80092c4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009280:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009288:	f003 0304 	and.w	r3, r3, #4
 800928c:	2b00      	cmp	r3, #0
 800928e:	d10c      	bne.n	80092aa <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f003 0320 	and.w	r3, r3, #32
 8009296:	2b00      	cmp	r3, #0
 8009298:	d003      	beq.n	80092a2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f001 f84a 	bl	800a334 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80092a0:	e010      	b.n	80092c4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f001 f832 	bl	800a30c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80092a8:	e00c      	b.n	80092c4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f003 0320 	and.w	r3, r3, #32
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d003      	beq.n	80092bc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f001 f833 	bl	800a320 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80092ba:	e003      	b.n	80092c4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f001 f81b 	bl	800a2f8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80092c2:	e7ff      	b.n	80092c4 <HAL_SD_IRQHandler+0x364>
 80092c4:	bf00      	nop
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	18000f3a 	.word	0x18000f3a

080092d0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092f2:	0f9b      	lsrs	r3, r3, #30
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092fe:	0e9b      	lsrs	r3, r3, #26
 8009300:	b2db      	uxtb	r3, r3
 8009302:	f003 030f 	and.w	r3, r3, #15
 8009306:	b2da      	uxtb	r2, r3
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009310:	0e1b      	lsrs	r3, r3, #24
 8009312:	b2db      	uxtb	r3, r3
 8009314:	f003 0303 	and.w	r3, r3, #3
 8009318:	b2da      	uxtb	r2, r3
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009322:	0c1b      	lsrs	r3, r3, #16
 8009324:	b2da      	uxtb	r2, r3
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800932e:	0a1b      	lsrs	r3, r3, #8
 8009330:	b2da      	uxtb	r2, r3
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800933a:	b2da      	uxtb	r2, r3
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009344:	0d1b      	lsrs	r3, r3, #20
 8009346:	b29a      	uxth	r2, r3
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009350:	0c1b      	lsrs	r3, r3, #16
 8009352:	b2db      	uxtb	r3, r3
 8009354:	f003 030f 	and.w	r3, r3, #15
 8009358:	b2da      	uxtb	r2, r3
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009362:	0bdb      	lsrs	r3, r3, #15
 8009364:	b2db      	uxtb	r3, r3
 8009366:	f003 0301 	and.w	r3, r3, #1
 800936a:	b2da      	uxtb	r2, r3
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009374:	0b9b      	lsrs	r3, r3, #14
 8009376:	b2db      	uxtb	r3, r3
 8009378:	f003 0301 	and.w	r3, r3, #1
 800937c:	b2da      	uxtb	r2, r3
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009386:	0b5b      	lsrs	r3, r3, #13
 8009388:	b2db      	uxtb	r3, r3
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	b2da      	uxtb	r2, r3
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009398:	0b1b      	lsrs	r3, r3, #12
 800939a:	b2db      	uxtb	r3, r3
 800939c:	f003 0301 	and.w	r3, r3, #1
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	2200      	movs	r2, #0
 80093aa:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d163      	bne.n	800947c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093b8:	009a      	lsls	r2, r3, #2
 80093ba:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80093be:	4013      	ands	r3, r2
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80093c4:	0f92      	lsrs	r2, r2, #30
 80093c6:	431a      	orrs	r2, r3
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093d0:	0edb      	lsrs	r3, r3, #27
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	f003 0307 	and.w	r3, r3, #7
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093e2:	0e1b      	lsrs	r3, r3, #24
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	f003 0307 	and.w	r3, r3, #7
 80093ea:	b2da      	uxtb	r2, r3
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093f4:	0d5b      	lsrs	r3, r3, #21
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	f003 0307 	and.w	r3, r3, #7
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009406:	0c9b      	lsrs	r3, r3, #18
 8009408:	b2db      	uxtb	r3, r3
 800940a:	f003 0307 	and.w	r3, r3, #7
 800940e:	b2da      	uxtb	r2, r3
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009418:	0bdb      	lsrs	r3, r3, #15
 800941a:	b2db      	uxtb	r3, r3
 800941c:	f003 0307 	and.w	r3, r3, #7
 8009420:	b2da      	uxtb	r2, r3
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	1c5a      	adds	r2, r3, #1
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	7e1b      	ldrb	r3, [r3, #24]
 8009434:	b2db      	uxtb	r3, r3
 8009436:	f003 0307 	and.w	r3, r3, #7
 800943a:	3302      	adds	r3, #2
 800943c:	2201      	movs	r2, #1
 800943e:	fa02 f303 	lsl.w	r3, r2, r3
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009446:	fb03 f202 	mul.w	r2, r3, r2
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	7a1b      	ldrb	r3, [r3, #8]
 8009452:	b2db      	uxtb	r3, r3
 8009454:	f003 030f 	and.w	r3, r3, #15
 8009458:	2201      	movs	r2, #1
 800945a:	409a      	lsls	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009468:	0a52      	lsrs	r2, r2, #9
 800946a:	fb03 f202 	mul.w	r2, r3, r2
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009478:	655a      	str	r2, [r3, #84]	@ 0x54
 800947a:	e031      	b.n	80094e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009480:	2b01      	cmp	r3, #1
 8009482:	d11d      	bne.n	80094c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009488:	041b      	lsls	r3, r3, #16
 800948a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009492:	0c1b      	lsrs	r3, r3, #16
 8009494:	431a      	orrs	r2, r3
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	3301      	adds	r3, #1
 80094a0:	029a      	lsls	r2, r3, #10
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094b4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	655a      	str	r2, [r3, #84]	@ 0x54
 80094be:	e00f      	b.n	80094e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a58      	ldr	r2, [pc, #352]	@ (8009628 <HAL_SD_GetCardCSD+0x344>)
 80094c6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e09d      	b.n	800961c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094e4:	0b9b      	lsrs	r3, r3, #14
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	f003 0301 	and.w	r3, r3, #1
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094f6:	09db      	lsrs	r3, r3, #7
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009508:	b2db      	uxtb	r3, r3
 800950a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800950e:	b2da      	uxtb	r2, r3
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009518:	0fdb      	lsrs	r3, r3, #31
 800951a:	b2da      	uxtb	r2, r3
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009524:	0f5b      	lsrs	r3, r3, #29
 8009526:	b2db      	uxtb	r3, r3
 8009528:	f003 0303 	and.w	r3, r3, #3
 800952c:	b2da      	uxtb	r2, r3
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009536:	0e9b      	lsrs	r3, r3, #26
 8009538:	b2db      	uxtb	r3, r3
 800953a:	f003 0307 	and.w	r3, r3, #7
 800953e:	b2da      	uxtb	r2, r3
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009548:	0d9b      	lsrs	r3, r3, #22
 800954a:	b2db      	uxtb	r3, r3
 800954c:	f003 030f 	and.w	r3, r3, #15
 8009550:	b2da      	uxtb	r2, r3
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800955a:	0d5b      	lsrs	r3, r3, #21
 800955c:	b2db      	uxtb	r3, r3
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	b2da      	uxtb	r2, r3
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009576:	0c1b      	lsrs	r3, r3, #16
 8009578:	b2db      	uxtb	r3, r3
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	b2da      	uxtb	r2, r3
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800958a:	0bdb      	lsrs	r3, r3, #15
 800958c:	b2db      	uxtb	r3, r3
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	b2da      	uxtb	r2, r3
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800959e:	0b9b      	lsrs	r3, r3, #14
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	f003 0301 	and.w	r3, r3, #1
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80095b2:	0b5b      	lsrs	r3, r3, #13
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	f003 0301 	and.w	r3, r3, #1
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80095c6:	0b1b      	lsrs	r3, r3, #12
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80095da:	0a9b      	lsrs	r3, r3, #10
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	f003 0303 	and.w	r3, r3, #3
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80095ee:	0a1b      	lsrs	r3, r3, #8
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	f003 0303 	and.w	r3, r3, #3
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009602:	085b      	lsrs	r3, r3, #1
 8009604:	b2db      	uxtb	r3, r3
 8009606:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800960a:	b2da      	uxtb	r2, r3
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	1fe00fff 	.word	0x1fe00fff

0800962c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b094      	sub	sp, #80	@ 0x50
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009636:	2300      	movs	r3, #0
 8009638:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009642:	b2db      	uxtb	r3, r3
 8009644:	2b03      	cmp	r3, #3
 8009646:	d101      	bne.n	800964c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	e0a7      	b.n	800979c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800964c:	f107 0308 	add.w	r3, r7, #8
 8009650:	4619      	mov	r1, r3
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 fb62 	bl	8009d1c <SD_SendSDStatus>
 8009658:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800965a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800965c:	2b00      	cmp	r3, #0
 800965e:	d011      	beq.n	8009684 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a4f      	ldr	r2, [pc, #316]	@ (80097a4 <HAL_SD_GetCardStatus+0x178>)
 8009666:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800966c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800966e:	431a      	orrs	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8009682:	e070      	b.n	8009766 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	099b      	lsrs	r3, r3, #6
 8009688:	b2db      	uxtb	r3, r3
 800968a:	f003 0303 	and.w	r3, r3, #3
 800968e:	b2da      	uxtb	r2, r3
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	095b      	lsrs	r3, r3, #5
 8009698:	b2db      	uxtb	r3, r3
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	b2da      	uxtb	r2, r3
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	0a1b      	lsrs	r3, r3, #8
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	0e1b      	lsrs	r3, r3, #24
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	4313      	orrs	r3, r2
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	061a      	lsls	r2, r3, #24
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	021b      	lsls	r3, r3, #8
 80096c6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80096ca:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	0a1b      	lsrs	r3, r3, #8
 80096d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80096d4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	0e1b      	lsrs	r3, r3, #24
 80096da:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	0a1b      	lsrs	r3, r3, #8
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	0d1b      	lsrs	r3, r3, #20
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	f003 030f 	and.w	r3, r3, #15
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	0c1b      	lsrs	r3, r3, #16
 8009706:	b29b      	uxth	r3, r3
 8009708:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800970c:	b29a      	uxth	r2, r3
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	b29b      	uxth	r3, r3
 8009712:	b2db      	uxtb	r3, r3
 8009714:	b29b      	uxth	r3, r3
 8009716:	4313      	orrs	r3, r2
 8009718:	b29a      	uxth	r2, r3
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	0a9b      	lsrs	r3, r3, #10
 8009722:	b2db      	uxtb	r3, r3
 8009724:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009728:	b2da      	uxtb	r2, r3
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	0a1b      	lsrs	r3, r3, #8
 8009732:	b2db      	uxtb	r3, r3
 8009734:	f003 0303 	and.w	r3, r3, #3
 8009738:	b2da      	uxtb	r2, r3
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	091b      	lsrs	r3, r3, #4
 8009742:	b2db      	uxtb	r3, r3
 8009744:	f003 030f 	and.w	r3, r3, #15
 8009748:	b2da      	uxtb	r2, r3
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	b2db      	uxtb	r3, r3
 8009752:	f003 030f 	and.w	r3, r3, #15
 8009756:	b2da      	uxtb	r2, r3
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	0e1b      	lsrs	r3, r3, #24
 8009760:	b2da      	uxtb	r2, r3
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800976e:	4618      	mov	r0, r3
 8009770:	f004 feac 	bl	800e4cc <SDMMC_CmdBlockLength>
 8009774:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00d      	beq.n	8009798 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a08      	ldr	r2, [pc, #32]	@ (80097a4 <HAL_SD_GetCardStatus+0x178>)
 8009782:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009788:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2201      	movs	r2, #1
 800978e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8009798:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800979c:	4618      	mov	r0, r3
 800979e:	3750      	adds	r7, #80	@ 0x50
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	1fe00fff 	.word	0x1fe00fff

080097a8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009800:	b590      	push	{r4, r7, lr}
 8009802:	b08d      	sub	sp, #52	@ 0x34
 8009804:	af02      	add	r7, sp, #8
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2203      	movs	r2, #3
 8009814:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800981c:	2b03      	cmp	r3, #3
 800981e:	d02e      	beq.n	800987e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009826:	d106      	bne.n	8009836 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800982c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	635a      	str	r2, [r3, #52]	@ 0x34
 8009834:	e029      	b.n	800988a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800983c:	d10a      	bne.n	8009854 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fb64 	bl	8009f0c <SD_WideBus_Enable>
 8009844:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800984a:	6a3b      	ldr	r3, [r7, #32]
 800984c:	431a      	orrs	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	635a      	str	r2, [r3, #52]	@ 0x34
 8009852:	e01a      	b.n	800988a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d10a      	bne.n	8009870 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fba1 	bl	8009fa2 <SD_WideBus_Disable>
 8009860:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009866:	6a3b      	ldr	r3, [r7, #32]
 8009868:	431a      	orrs	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	635a      	str	r2, [r3, #52]	@ 0x34
 800986e:	e00c      	b.n	800988a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009874:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	635a      	str	r2, [r3, #52]	@ 0x34
 800987c:	e005      	b.n	800988a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009882:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800988e:	2b00      	cmp	r3, #0
 8009890:	d007      	beq.n	80098a2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a5f      	ldr	r2, [pc, #380]	@ (8009a14 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009898:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80098a0:	e096      	b.n	80099d0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80098a2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80098a6:	f04f 0100 	mov.w	r1, #0
 80098aa:	f7fd fdf5 	bl	8007498 <HAL_RCCEx_GetPeriphCLKFreq>
 80098ae:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f000 8083 	beq.w	80099be <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	695a      	ldr	r2, [r3, #20]
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	4950      	ldr	r1, [pc, #320]	@ (8009a18 <HAL_SD_ConfigWideBusOperation+0x218>)
 80098d6:	fba1 1303 	umull	r1, r3, r1, r3
 80098da:	0e1b      	lsrs	r3, r3, #24
 80098dc:	429a      	cmp	r2, r3
 80098de:	d303      	bcc.n	80098e8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	695b      	ldr	r3, [r3, #20]
 80098e4:	61bb      	str	r3, [r7, #24]
 80098e6:	e05a      	b.n	800999e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098f0:	d103      	bne.n	80098fa <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	695b      	ldr	r3, [r3, #20]
 80098f6:	61bb      	str	r3, [r7, #24]
 80098f8:	e051      	b.n	800999e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009902:	d126      	bne.n	8009952 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	695b      	ldr	r3, [r3, #20]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10e      	bne.n	800992a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	4a43      	ldr	r2, [pc, #268]	@ (8009a1c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d906      	bls.n	8009922 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	4a40      	ldr	r2, [pc, #256]	@ (8009a18 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009918:	fba2 2303 	umull	r2, r3, r2, r3
 800991c:	0e5b      	lsrs	r3, r3, #25
 800991e:	61bb      	str	r3, [r7, #24]
 8009920:	e03d      	b.n	800999e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	695b      	ldr	r3, [r3, #20]
 8009926:	61bb      	str	r3, [r7, #24]
 8009928:	e039      	b.n	800999e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	695b      	ldr	r3, [r3, #20]
 800992e:	005b      	lsls	r3, r3, #1
 8009930:	69fa      	ldr	r2, [r7, #28]
 8009932:	fbb2 f3f3 	udiv	r3, r2, r3
 8009936:	4a39      	ldr	r2, [pc, #228]	@ (8009a1c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d906      	bls.n	800994a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	4a36      	ldr	r2, [pc, #216]	@ (8009a18 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009940:	fba2 2303 	umull	r2, r3, r2, r3
 8009944:	0e5b      	lsrs	r3, r3, #25
 8009946:	61bb      	str	r3, [r7, #24]
 8009948:	e029      	b.n	800999e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	695b      	ldr	r3, [r3, #20]
 800994e:	61bb      	str	r3, [r7, #24]
 8009950:	e025      	b.n	800999e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10e      	bne.n	8009978 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	4a30      	ldr	r2, [pc, #192]	@ (8009a20 <HAL_SD_ConfigWideBusOperation+0x220>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d906      	bls.n	8009970 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	4a2c      	ldr	r2, [pc, #176]	@ (8009a18 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009966:	fba2 2303 	umull	r2, r3, r2, r3
 800996a:	0e1b      	lsrs	r3, r3, #24
 800996c:	61bb      	str	r3, [r7, #24]
 800996e:	e016      	b.n	800999e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	61bb      	str	r3, [r7, #24]
 8009976:	e012      	b.n	800999e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	695b      	ldr	r3, [r3, #20]
 800997c:	005b      	lsls	r3, r3, #1
 800997e:	69fa      	ldr	r2, [r7, #28]
 8009980:	fbb2 f3f3 	udiv	r3, r2, r3
 8009984:	4a26      	ldr	r2, [pc, #152]	@ (8009a20 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d906      	bls.n	8009998 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	4a22      	ldr	r2, [pc, #136]	@ (8009a18 <HAL_SD_ConfigWideBusOperation+0x218>)
 800998e:	fba2 2303 	umull	r2, r3, r2, r3
 8009992:	0e1b      	lsrs	r3, r3, #24
 8009994:	61bb      	str	r3, [r7, #24]
 8009996:	e002      	b.n	800999e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	695b      	ldr	r3, [r3, #20]
 800999c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681c      	ldr	r4, [r3, #0]
 80099a2:	466a      	mov	r2, sp
 80099a4:	f107 0314 	add.w	r3, r7, #20
 80099a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80099ac:	e882 0003 	stmia.w	r2, {r0, r1}
 80099b0:	f107 0308 	add.w	r3, r7, #8
 80099b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099b6:	4620      	mov	r0, r4
 80099b8:	f004 fcaa 	bl	800e310 <SDMMC_Init>
 80099bc:	e008      	b.n	80099d0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099c2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80099d8:	4618      	mov	r0, r3
 80099da:	f004 fd77 	bl	800e4cc <SDMMC_CmdBlockLength>
 80099de:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80099e0:	6a3b      	ldr	r3, [r7, #32]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00c      	beq.n	8009a00 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a0a      	ldr	r2, [pc, #40]	@ (8009a14 <HAL_SD_ConfigWideBusOperation+0x214>)
 80099ec:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099f2:	6a3b      	ldr	r3, [r7, #32]
 80099f4:	431a      	orrs	r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8009a08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	372c      	adds	r7, #44	@ 0x2c
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd90      	pop	{r4, r7, pc}
 8009a14:	1fe00fff 	.word	0x1fe00fff
 8009a18:	55e63b89 	.word	0x55e63b89
 8009a1c:	02faf080 	.word	0x02faf080
 8009a20:	017d7840 	.word	0x017d7840

08009a24 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b086      	sub	sp, #24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009a30:	f107 030c 	add.w	r3, r7, #12
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fa40 	bl	8009ebc <SD_SendStatus>
 8009a3c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d005      	beq.n	8009a50 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	431a      	orrs	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	0a5b      	lsrs	r3, r3, #9
 8009a54:	f003 030f 	and.w	r3, r3, #15
 8009a58:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009a5a:	693b      	ldr	r3, [r7, #16]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3718      	adds	r7, #24
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b090      	sub	sp, #64	@ 0x40
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009a70:	f7fa f9ae 	bl	8003dd0 <HAL_GetTick>
 8009a74:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f004 fca1 	bl	800e3c2 <SDMMC_GetPowerState>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d102      	bne.n	8009a8c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009a86:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009a8a:	e0b5      	b.n	8009bf8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a90:	2b03      	cmp	r3, #3
 8009a92:	d02e      	beq.n	8009af2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f004 feec 	bl	800e876 <SDMMC_CmdSendCID>
 8009a9e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <SD_InitCard+0x46>
    {
      return errorstate;
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa8:	e0a6      	b.n	8009bf8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2100      	movs	r1, #0
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f004 fccc 	bl	800e44e <SDMMC_GetResponse>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2104      	movs	r1, #4
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f004 fcc3 	bl	800e44e <SDMMC_GetResponse>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2108      	movs	r1, #8
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f004 fcba 	bl	800e44e <SDMMC_GetResponse>
 8009ada:	4602      	mov	r2, r0
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	210c      	movs	r1, #12
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f004 fcb1 	bl	800e44e <SDMMC_GetResponse>
 8009aec:	4602      	mov	r2, r0
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009af6:	2b03      	cmp	r3, #3
 8009af8:	d01d      	beq.n	8009b36 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009afa:	e019      	b.n	8009b30 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f107 020a 	add.w	r2, r7, #10
 8009b04:	4611      	mov	r1, r2
 8009b06:	4618      	mov	r0, r3
 8009b08:	f004 fef4 	bl	800e8f4 <SDMMC_CmdSetRelAdd>
 8009b0c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d001      	beq.n	8009b18 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b16:	e06f      	b.n	8009bf8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009b18:	f7fa f95a 	bl	8003dd0 <HAL_GetTick>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	f241 3287 	movw	r2, #4999	@ 0x1387
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d902      	bls.n	8009b30 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009b2a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009b2e:	e063      	b.n	8009bf8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009b30:	897b      	ldrh	r3, [r7, #10]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d0e2      	beq.n	8009afc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b3a:	2b03      	cmp	r3, #3
 8009b3c:	d036      	beq.n	8009bac <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009b3e:	897b      	ldrh	r3, [r7, #10]
 8009b40:	461a      	mov	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b4e:	041b      	lsls	r3, r3, #16
 8009b50:	4619      	mov	r1, r3
 8009b52:	4610      	mov	r0, r2
 8009b54:	f004 feae 	bl	800e8b4 <SDMMC_CmdSendCSD>
 8009b58:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <SD_InitCard+0x100>
    {
      return errorstate;
 8009b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b62:	e049      	b.n	8009bf8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2100      	movs	r1, #0
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f004 fc6f 	bl	800e44e <SDMMC_GetResponse>
 8009b70:	4602      	mov	r2, r0
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2104      	movs	r1, #4
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f004 fc66 	bl	800e44e <SDMMC_GetResponse>
 8009b82:	4602      	mov	r2, r0
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2108      	movs	r1, #8
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f004 fc5d 	bl	800e44e <SDMMC_GetResponse>
 8009b94:	4602      	mov	r2, r0
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	210c      	movs	r1, #12
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f004 fc54 	bl	800e44e <SDMMC_GetResponse>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2104      	movs	r1, #4
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f004 fc4b 	bl	800e44e <SDMMC_GetResponse>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	0d1a      	lsrs	r2, r3, #20
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009bc0:	f107 030c 	add.w	r3, r7, #12
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7ff fb8c 	bl	80092e4 <HAL_SD_GetCardCSD>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d002      	beq.n	8009bd8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bd2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009bd6:	e00f      	b.n	8009bf8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009be0:	041b      	lsls	r3, r3, #16
 8009be2:	4619      	mov	r1, r3
 8009be4:	4610      	mov	r0, r2
 8009be6:	f004 fd5d 	bl	800e6a4 <SDMMC_CmdSelDesel>
 8009bea:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d001      	beq.n	8009bf6 <SD_InitCard+0x192>
  {
    return errorstate;
 8009bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf4:	e000      	b.n	8009bf8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3740      	adds	r7, #64	@ 0x40
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009c10:	2300      	movs	r3, #0
 8009c12:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f004 fd66 	bl	800e6ea <SDMMC_CmdGoIdleState>
 8009c1e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d001      	beq.n	8009c2a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	e072      	b.n	8009d10 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f004 fd79 	bl	800e726 <SDMMC_CmdOperCond>
 8009c34:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c3c:	d10d      	bne.n	8009c5a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f004 fd4e 	bl	800e6ea <SDMMC_CmdGoIdleState>
 8009c4e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d004      	beq.n	8009c60 <SD_PowerON+0x60>
    {
      return errorstate;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	e05a      	b.n	8009d10 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d137      	bne.n	8009cd8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f004 fd79 	bl	800e766 <SDMMC_CmdAppCommand>
 8009c74:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d02d      	beq.n	8009cd8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c7c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009c80:	e046      	b.n	8009d10 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2100      	movs	r1, #0
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f004 fd6c 	bl	800e766 <SDMMC_CmdAppCommand>
 8009c8e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d001      	beq.n	8009c9a <SD_PowerON+0x9a>
    {
      return errorstate;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	e03a      	b.n	8009d10 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	491e      	ldr	r1, [pc, #120]	@ (8009d18 <SD_PowerON+0x118>)
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f004 fd83 	bl	800e7ac <SDMMC_CmdAppOperCommand>
 8009ca6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d002      	beq.n	8009cb4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009cae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009cb2:	e02d      	b.n	8009d10 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2100      	movs	r1, #0
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f004 fbc7 	bl	800e44e <SDMMC_GetResponse>
 8009cc0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	0fdb      	lsrs	r3, r3, #31
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d101      	bne.n	8009cce <SD_PowerON+0xce>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e000      	b.n	8009cd0 <SD_PowerON+0xd0>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	613b      	str	r3, [r7, #16]

    count++;
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d802      	bhi.n	8009ce8 <SD_PowerON+0xe8>
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d0cc      	beq.n	8009c82 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d902      	bls.n	8009cf8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009cf2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009cf6:	e00b      	b.n	8009d10 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d002      	beq.n	8009d0e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3718      	adds	r7, #24
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	c1100000 	.word	0xc1100000

08009d1c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b08c      	sub	sp, #48	@ 0x30
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009d26:	f7fa f853 	bl	8003dd0 <HAL_GetTick>
 8009d2a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2100      	movs	r1, #0
 8009d36:	4618      	mov	r0, r3
 8009d38:	f004 fb89 	bl	800e44e <SDMMC_GetResponse>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d46:	d102      	bne.n	8009d4e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009d48:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009d4c:	e0b0      	b.n	8009eb0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2140      	movs	r1, #64	@ 0x40
 8009d54:	4618      	mov	r0, r3
 8009d56:	f004 fbb9 	bl	800e4cc <SDMMC_CmdBlockLength>
 8009d5a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d5c:	6a3b      	ldr	r3, [r7, #32]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d005      	beq.n	8009d6e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009d6a:	6a3b      	ldr	r3, [r7, #32]
 8009d6c:	e0a0      	b.n	8009eb0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d76:	041b      	lsls	r3, r3, #16
 8009d78:	4619      	mov	r1, r3
 8009d7a:	4610      	mov	r0, r2
 8009d7c:	f004 fcf3 	bl	800e766 <SDMMC_CmdAppCommand>
 8009d80:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d005      	beq.n	8009d94 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009d90:	6a3b      	ldr	r3, [r7, #32]
 8009d92:	e08d      	b.n	8009eb0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009d98:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009d9a:	2340      	movs	r3, #64	@ 0x40
 8009d9c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009d9e:	2360      	movs	r3, #96	@ 0x60
 8009da0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009da2:	2302      	movs	r3, #2
 8009da4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009da6:	2300      	movs	r3, #0
 8009da8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009daa:	2301      	movs	r3, #1
 8009dac:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f107 0208 	add.w	r2, r7, #8
 8009db6:	4611      	mov	r1, r2
 8009db8:	4618      	mov	r0, r3
 8009dba:	f004 fb5b 	bl	800e474 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f004 fddb 	bl	800e97e <SDMMC_CmdStatusRegister>
 8009dc8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d02b      	beq.n	8009e28 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009dd8:	6a3b      	ldr	r3, [r7, #32]
 8009dda:	e069      	b.n	8009eb0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009de2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d013      	beq.n	8009e12 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009dea:	2300      	movs	r3, #0
 8009dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009dee:	e00d      	b.n	8009e0c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4618      	mov	r0, r3
 8009df6:	f004 fab5 	bl	800e364 <SDMMC_ReadFIFO>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dfe:	601a      	str	r2, [r3, #0]
        pData++;
 8009e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e02:	3304      	adds	r3, #4
 8009e04:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8009e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e08:	3301      	adds	r3, #1
 8009e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e0e:	2b07      	cmp	r3, #7
 8009e10:	d9ee      	bls.n	8009df0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e12:	f7f9 ffdd 	bl	8003dd0 <HAL_GetTick>
 8009e16:	4602      	mov	r2, r0
 8009e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e20:	d102      	bne.n	8009e28 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009e22:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009e26:	e043      	b.n	8009eb0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e2e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d0d2      	beq.n	8009ddc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e3c:	f003 0308 	and.w	r3, r3, #8
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d001      	beq.n	8009e48 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009e44:	2308      	movs	r3, #8
 8009e46:	e033      	b.n	8009eb0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e4e:	f003 0302 	and.w	r3, r3, #2
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d001      	beq.n	8009e5a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009e56:	2302      	movs	r3, #2
 8009e58:	e02a      	b.n	8009eb0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e60:	f003 0320 	and.w	r3, r3, #32
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d017      	beq.n	8009e98 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009e68:	2320      	movs	r3, #32
 8009e6a:	e021      	b.n	8009eb0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4618      	mov	r0, r3
 8009e72:	f004 fa77 	bl	800e364 <SDMMC_ReadFIFO>
 8009e76:	4602      	mov	r2, r0
 8009e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e7a:	601a      	str	r2, [r3, #0]
    pData++;
 8009e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e7e:	3304      	adds	r3, #4
 8009e80:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e82:	f7f9 ffa5 	bl	8003dd0 <HAL_GetTick>
 8009e86:	4602      	mov	r2, r0
 8009e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e90:	d102      	bne.n	8009e98 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009e92:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009e96:	e00b      	b.n	8009eb0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1e2      	bne.n	8009e6c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a03      	ldr	r2, [pc, #12]	@ (8009eb8 <SD_SendSDStatus+0x19c>)
 8009eac:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3730      	adds	r7, #48	@ 0x30
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	18000f3a 	.word	0x18000f3a

08009ebc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d102      	bne.n	8009ed2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009ecc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009ed0:	e018      	b.n	8009f04 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eda:	041b      	lsls	r3, r3, #16
 8009edc:	4619      	mov	r1, r3
 8009ede:	4610      	mov	r0, r2
 8009ee0:	f004 fd2a 	bl	800e938 <SDMMC_CmdSendStatus>
 8009ee4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d001      	beq.n	8009ef0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	e009      	b.n	8009f04 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f004 faa9 	bl	800e44e <SDMMC_GetResponse>
 8009efc:	4602      	mov	r2, r0
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009f14:	2300      	movs	r3, #0
 8009f16:	60fb      	str	r3, [r7, #12]
 8009f18:	2300      	movs	r3, #0
 8009f1a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2100      	movs	r1, #0
 8009f22:	4618      	mov	r0, r3
 8009f24:	f004 fa93 	bl	800e44e <SDMMC_GetResponse>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f32:	d102      	bne.n	8009f3a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009f34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009f38:	e02f      	b.n	8009f9a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009f3a:	f107 030c 	add.w	r3, r7, #12
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 f879 	bl	800a038 <SD_FindSCR>
 8009f46:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d001      	beq.n	8009f52 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	e023      	b.n	8009f9a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d01c      	beq.n	8009f96 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f64:	041b      	lsls	r3, r3, #16
 8009f66:	4619      	mov	r1, r3
 8009f68:	4610      	mov	r0, r2
 8009f6a:	f004 fbfc 	bl	800e766 <SDMMC_CmdAppCommand>
 8009f6e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d001      	beq.n	8009f7a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	e00f      	b.n	8009f9a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2102      	movs	r1, #2
 8009f80:	4618      	mov	r0, r3
 8009f82:	f004 fc33 	bl	800e7ec <SDMMC_CmdBusWidth>
 8009f86:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d001      	beq.n	8009f92 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	e003      	b.n	8009f9a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f92:	2300      	movs	r3, #0
 8009f94:	e001      	b.n	8009f9a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f96:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3718      	adds	r7, #24
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b086      	sub	sp, #24
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009faa:	2300      	movs	r3, #0
 8009fac:	60fb      	str	r3, [r7, #12]
 8009fae:	2300      	movs	r3, #0
 8009fb0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f004 fa48 	bl	800e44e <SDMMC_GetResponse>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fc8:	d102      	bne.n	8009fd0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009fca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009fce:	e02f      	b.n	800a030 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009fd0:	f107 030c 	add.w	r3, r7, #12
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f82e 	bl	800a038 <SD_FindSCR>
 8009fdc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	e023      	b.n	800a030 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d01c      	beq.n	800a02c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ffa:	041b      	lsls	r3, r3, #16
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	4610      	mov	r0, r2
 800a000:	f004 fbb1 	bl	800e766 <SDMMC_CmdAppCommand>
 800a004:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	e00f      	b.n	800a030 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2100      	movs	r1, #0
 800a016:	4618      	mov	r0, r3
 800a018:	f004 fbe8 	bl	800e7ec <SDMMC_CmdBusWidth>
 800a01c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d001      	beq.n	800a028 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	e003      	b.n	800a030 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a028:	2300      	movs	r3, #0
 800a02a:	e001      	b.n	800a030 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a02c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a030:	4618      	mov	r0, r3
 800a032:	3718      	adds	r7, #24
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b08e      	sub	sp, #56	@ 0x38
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a042:	f7f9 fec5 	bl	8003dd0 <HAL_GetTick>
 800a046:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800a048:	2300      	movs	r3, #0
 800a04a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a04c:	2300      	movs	r3, #0
 800a04e:	60bb      	str	r3, [r7, #8]
 800a050:	2300      	movs	r3, #0
 800a052:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	2108      	movs	r1, #8
 800a05e:	4618      	mov	r0, r3
 800a060:	f004 fa34 	bl	800e4cc <SDMMC_CmdBlockLength>
 800a064:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d001      	beq.n	800a070 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a06e:	e0ad      	b.n	800a1cc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a078:	041b      	lsls	r3, r3, #16
 800a07a:	4619      	mov	r1, r3
 800a07c:	4610      	mov	r0, r2
 800a07e:	f004 fb72 	bl	800e766 <SDMMC_CmdAppCommand>
 800a082:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <SD_FindSCR+0x56>
  {
    return errorstate;
 800a08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08c:	e09e      	b.n	800a1cc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a08e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a092:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a094:	2308      	movs	r3, #8
 800a096:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a098:	2330      	movs	r3, #48	@ 0x30
 800a09a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a09c:	2302      	movs	r3, #2
 800a09e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f107 0210 	add.w	r2, r7, #16
 800a0b0:	4611      	mov	r1, r2
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f004 f9de 	bl	800e474 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f004 fbb8 	bl	800e832 <SDMMC_CmdSendSCR>
 800a0c2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d027      	beq.n	800a11a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0cc:	e07e      	b.n	800a1cc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d113      	bne.n	800a104 <SD_FindSCR+0xcc>
 800a0dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d110      	bne.n	800a104 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f004 f93c 	bl	800e364 <SDMMC_ReadFIFO>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f004 f935 	bl	800e364 <SDMMC_ReadFIFO>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	60fb      	str	r3, [r7, #12]
      index++;
 800a0fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a100:	3301      	adds	r3, #1
 800a102:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a104:	f7f9 fe64 	bl	8003dd0 <HAL_GetTick>
 800a108:	4602      	mov	r2, r0
 800a10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10c:	1ad3      	subs	r3, r2, r3
 800a10e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a112:	d102      	bne.n	800a11a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a114:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a118:	e058      	b.n	800a1cc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a120:	f240 532a 	movw	r3, #1322	@ 0x52a
 800a124:	4013      	ands	r3, r2
 800a126:	2b00      	cmp	r3, #0
 800a128:	d0d1      	beq.n	800a0ce <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a130:	f003 0308 	and.w	r3, r3, #8
 800a134:	2b00      	cmp	r3, #0
 800a136:	d005      	beq.n	800a144 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2208      	movs	r2, #8
 800a13e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a140:	2308      	movs	r3, #8
 800a142:	e043      	b.n	800a1cc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a14a:	f003 0302 	and.w	r3, r3, #2
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d005      	beq.n	800a15e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2202      	movs	r2, #2
 800a158:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a15a:	2302      	movs	r3, #2
 800a15c:	e036      	b.n	800a1cc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a164:	f003 0320 	and.w	r3, r3, #32
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d005      	beq.n	800a178 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2220      	movs	r2, #32
 800a172:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a174:	2320      	movs	r3, #32
 800a176:	e029      	b.n	800a1cc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a15      	ldr	r2, [pc, #84]	@ (800a1d4 <SD_FindSCR+0x19c>)
 800a17e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	061a      	lsls	r2, r3, #24
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	021b      	lsls	r3, r3, #8
 800a188:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a18c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	0a1b      	lsrs	r3, r3, #8
 800a192:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a196:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	0e1b      	lsrs	r3, r3, #24
 800a19c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a19e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a0:	601a      	str	r2, [r3, #0]
    scr++;
 800a1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	061a      	lsls	r2, r3, #24
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	021b      	lsls	r3, r3, #8
 800a1b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a1b4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	0a1b      	lsrs	r3, r3, #8
 800a1ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a1be:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	0e1b      	lsrs	r3, r3, #24
 800a1c4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1c8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3738      	adds	r7, #56	@ 0x38
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	18000f3a 	.word	0x18000f3a

0800a1d8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1e4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ea:	2b1f      	cmp	r3, #31
 800a1ec:	d936      	bls.n	800a25c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	617b      	str	r3, [r7, #20]
 800a1f2:	e027      	b.n	800a244 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f004 f8b3 	bl	800e364 <SDMMC_ReadFIFO>
 800a1fe:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	b2da      	uxtb	r2, r3
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	3301      	adds	r3, #1
 800a20c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	0a1b      	lsrs	r3, r3, #8
 800a212:	b2da      	uxtb	r2, r3
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	3301      	adds	r3, #1
 800a21c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	0c1b      	lsrs	r3, r3, #16
 800a222:	b2da      	uxtb	r2, r3
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	3301      	adds	r3, #1
 800a22c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	0e1b      	lsrs	r3, r3, #24
 800a232:	b2da      	uxtb	r2, r3
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	3301      	adds	r3, #1
 800a23c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	3301      	adds	r3, #1
 800a242:	617b      	str	r3, [r7, #20]
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	2b07      	cmp	r3, #7
 800a248:	d9d4      	bls.n	800a1f4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a254:	f1a3 0220 	sub.w	r2, r3, #32
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800a25c:	bf00      	nop
 800a25e:	3718      	adds	r7, #24
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	69db      	ldr	r3, [r3, #28]
 800a270:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	2b1f      	cmp	r3, #31
 800a278:	d93a      	bls.n	800a2f0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800a27a:	2300      	movs	r3, #0
 800a27c:	617b      	str	r3, [r7, #20]
 800a27e:	e02b      	b.n	800a2d8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	3301      	adds	r3, #1
 800a28a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	021a      	lsls	r2, r3, #8
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	4313      	orrs	r3, r2
 800a296:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	3301      	adds	r3, #1
 800a29c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	041a      	lsls	r2, r3, #16
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	061a      	lsls	r2, r3, #24
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f107 020c 	add.w	r2, r7, #12
 800a2ca:	4611      	mov	r1, r2
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f004 f856 	bl	800e37e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	617b      	str	r3, [r7, #20]
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	2b07      	cmp	r3, #7
 800a2dc:	d9d0      	bls.n	800a280 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a1b      	ldr	r3, [r3, #32]
 800a2e8:	f1a3 0220 	sub.w	r2, r3, #32
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	621a      	str	r2, [r3, #32]
  }
}
 800a2f0:	bf00      	nop
 800a2f2:	3718      	adds	r7, #24
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a300:	bf00      	nop
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a314:	bf00      	nop
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a328:	bf00      	nop
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d101      	bne.n	800a35a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a356:	2301      	movs	r3, #1
 800a358:	e049      	b.n	800a3ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a360:	b2db      	uxtb	r3, r3
 800a362:	2b00      	cmp	r3, #0
 800a364:	d106      	bne.n	800a374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f841 	bl	800a3f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2202      	movs	r2, #2
 800a378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	3304      	adds	r3, #4
 800a384:	4619      	mov	r1, r3
 800a386:	4610      	mov	r0, r2
 800a388:	f000 fad0 	bl	800a92c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3708      	adds	r7, #8
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	b083      	sub	sp, #12
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a3fe:	bf00      	nop
 800a400:	370c      	adds	r7, #12
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
	...

0800a40c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d001      	beq.n	800a424 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e054      	b.n	800a4ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2202      	movs	r2, #2
 800a428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68da      	ldr	r2, [r3, #12]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f042 0201 	orr.w	r2, r2, #1
 800a43a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a26      	ldr	r2, [pc, #152]	@ (800a4dc <HAL_TIM_Base_Start_IT+0xd0>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d022      	beq.n	800a48c <HAL_TIM_Base_Start_IT+0x80>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a44e:	d01d      	beq.n	800a48c <HAL_TIM_Base_Start_IT+0x80>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a22      	ldr	r2, [pc, #136]	@ (800a4e0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d018      	beq.n	800a48c <HAL_TIM_Base_Start_IT+0x80>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a21      	ldr	r2, [pc, #132]	@ (800a4e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d013      	beq.n	800a48c <HAL_TIM_Base_Start_IT+0x80>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a1f      	ldr	r2, [pc, #124]	@ (800a4e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d00e      	beq.n	800a48c <HAL_TIM_Base_Start_IT+0x80>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a1e      	ldr	r2, [pc, #120]	@ (800a4ec <HAL_TIM_Base_Start_IT+0xe0>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d009      	beq.n	800a48c <HAL_TIM_Base_Start_IT+0x80>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a1c      	ldr	r2, [pc, #112]	@ (800a4f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d004      	beq.n	800a48c <HAL_TIM_Base_Start_IT+0x80>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a1b      	ldr	r2, [pc, #108]	@ (800a4f4 <HAL_TIM_Base_Start_IT+0xe8>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d115      	bne.n	800a4b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	689a      	ldr	r2, [r3, #8]
 800a492:	4b19      	ldr	r3, [pc, #100]	@ (800a4f8 <HAL_TIM_Base_Start_IT+0xec>)
 800a494:	4013      	ands	r3, r2
 800a496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2b06      	cmp	r3, #6
 800a49c:	d015      	beq.n	800a4ca <HAL_TIM_Base_Start_IT+0xbe>
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4a4:	d011      	beq.n	800a4ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f042 0201 	orr.w	r2, r2, #1
 800a4b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4b6:	e008      	b.n	800a4ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f042 0201 	orr.w	r2, r2, #1
 800a4c6:	601a      	str	r2, [r3, #0]
 800a4c8:	e000      	b.n	800a4cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3714      	adds	r7, #20
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	40010000 	.word	0x40010000
 800a4e0:	40000400 	.word	0x40000400
 800a4e4:	40000800 	.word	0x40000800
 800a4e8:	40000c00 	.word	0x40000c00
 800a4ec:	40010400 	.word	0x40010400
 800a4f0:	40001800 	.word	0x40001800
 800a4f4:	40014000 	.word	0x40014000
 800a4f8:	00010007 	.word	0x00010007

0800a4fc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d101      	bne.n	800a50e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e049      	b.n	800a5a2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	d106      	bne.n	800a528 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f7f7 f812 	bl	800154c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2202      	movs	r2, #2
 800a52c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	3304      	adds	r3, #4
 800a538:	4619      	mov	r1, r3
 800a53a:	4610      	mov	r0, r2
 800a53c:	f000 f9f6 	bl	800a92c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3708      	adds	r7, #8
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b082      	sub	sp, #8
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	f003 0302 	and.w	r3, r3, #2
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d122      	bne.n	800a606 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	f003 0302 	and.w	r3, r3, #2
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d11b      	bne.n	800a606 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f06f 0202 	mvn.w	r2, #2
 800a5d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	699b      	ldr	r3, [r3, #24]
 800a5e4:	f003 0303 	and.w	r3, r3, #3
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d003      	beq.n	800a5f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 f97f 	bl	800a8f0 <HAL_TIM_IC_CaptureCallback>
 800a5f2:	e005      	b.n	800a600 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 f971 	bl	800a8dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f982 	bl	800a904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	f003 0304 	and.w	r3, r3, #4
 800a610:	2b04      	cmp	r3, #4
 800a612:	d122      	bne.n	800a65a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	f003 0304 	and.w	r3, r3, #4
 800a61e:	2b04      	cmp	r3, #4
 800a620:	d11b      	bne.n	800a65a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f06f 0204 	mvn.w	r2, #4
 800a62a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2202      	movs	r2, #2
 800a630:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d003      	beq.n	800a648 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f955 	bl	800a8f0 <HAL_TIM_IC_CaptureCallback>
 800a646:	e005      	b.n	800a654 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 f947 	bl	800a8dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 f958 	bl	800a904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	f003 0308 	and.w	r3, r3, #8
 800a664:	2b08      	cmp	r3, #8
 800a666:	d122      	bne.n	800a6ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	f003 0308 	and.w	r3, r3, #8
 800a672:	2b08      	cmp	r3, #8
 800a674:	d11b      	bne.n	800a6ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f06f 0208 	mvn.w	r2, #8
 800a67e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2204      	movs	r2, #4
 800a684:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	69db      	ldr	r3, [r3, #28]
 800a68c:	f003 0303 	and.w	r3, r3, #3
 800a690:	2b00      	cmp	r3, #0
 800a692:	d003      	beq.n	800a69c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 f92b 	bl	800a8f0 <HAL_TIM_IC_CaptureCallback>
 800a69a:	e005      	b.n	800a6a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 f91d 	bl	800a8dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f92e 	bl	800a904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	691b      	ldr	r3, [r3, #16]
 800a6b4:	f003 0310 	and.w	r3, r3, #16
 800a6b8:	2b10      	cmp	r3, #16
 800a6ba:	d122      	bne.n	800a702 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	f003 0310 	and.w	r3, r3, #16
 800a6c6:	2b10      	cmp	r3, #16
 800a6c8:	d11b      	bne.n	800a702 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f06f 0210 	mvn.w	r2, #16
 800a6d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2208      	movs	r2, #8
 800a6d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	69db      	ldr	r3, [r3, #28]
 800a6e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d003      	beq.n	800a6f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f901 	bl	800a8f0 <HAL_TIM_IC_CaptureCallback>
 800a6ee:	e005      	b.n	800a6fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 f8f3 	bl	800a8dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 f904 	bl	800a904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d10e      	bne.n	800a72e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	f003 0301 	and.w	r3, r3, #1
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d107      	bne.n	800a72e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f06f 0201 	mvn.w	r2, #1
 800a726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f7f6 fd37 	bl	800119c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a738:	2b80      	cmp	r3, #128	@ 0x80
 800a73a:	d10e      	bne.n	800a75a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a746:	2b80      	cmp	r3, #128	@ 0x80
 800a748:	d107      	bne.n	800a75a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 fcf1 	bl	800b13c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	691b      	ldr	r3, [r3, #16]
 800a760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a764:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a768:	d10e      	bne.n	800a788 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a774:	2b80      	cmp	r3, #128	@ 0x80
 800a776:	d107      	bne.n	800a788 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fce4 	bl	800b150 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a792:	2b40      	cmp	r3, #64	@ 0x40
 800a794:	d10e      	bne.n	800a7b4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7a0:	2b40      	cmp	r3, #64	@ 0x40
 800a7a2:	d107      	bne.n	800a7b4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a7ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 f8b2 	bl	800a918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	691b      	ldr	r3, [r3, #16]
 800a7ba:	f003 0320 	and.w	r3, r3, #32
 800a7be:	2b20      	cmp	r3, #32
 800a7c0:	d10e      	bne.n	800a7e0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	f003 0320 	and.w	r3, r3, #32
 800a7cc:	2b20      	cmp	r3, #32
 800a7ce:	d107      	bne.n	800a7e0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f06f 0220 	mvn.w	r2, #32
 800a7d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 fca4 	bl	800b128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a7e0:	bf00      	nop
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b086      	sub	sp, #24
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d101      	bne.n	800a806 <HAL_TIM_OC_ConfigChannel+0x1e>
 800a802:	2302      	movs	r3, #2
 800a804:	e066      	b.n	800a8d4 <HAL_TIM_OC_ConfigChannel+0xec>
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2201      	movs	r2, #1
 800a80a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2b14      	cmp	r3, #20
 800a812:	d857      	bhi.n	800a8c4 <HAL_TIM_OC_ConfigChannel+0xdc>
 800a814:	a201      	add	r2, pc, #4	@ (adr r2, 800a81c <HAL_TIM_OC_ConfigChannel+0x34>)
 800a816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81a:	bf00      	nop
 800a81c:	0800a871 	.word	0x0800a871
 800a820:	0800a8c5 	.word	0x0800a8c5
 800a824:	0800a8c5 	.word	0x0800a8c5
 800a828:	0800a8c5 	.word	0x0800a8c5
 800a82c:	0800a87f 	.word	0x0800a87f
 800a830:	0800a8c5 	.word	0x0800a8c5
 800a834:	0800a8c5 	.word	0x0800a8c5
 800a838:	0800a8c5 	.word	0x0800a8c5
 800a83c:	0800a88d 	.word	0x0800a88d
 800a840:	0800a8c5 	.word	0x0800a8c5
 800a844:	0800a8c5 	.word	0x0800a8c5
 800a848:	0800a8c5 	.word	0x0800a8c5
 800a84c:	0800a89b 	.word	0x0800a89b
 800a850:	0800a8c5 	.word	0x0800a8c5
 800a854:	0800a8c5 	.word	0x0800a8c5
 800a858:	0800a8c5 	.word	0x0800a8c5
 800a85c:	0800a8a9 	.word	0x0800a8a9
 800a860:	0800a8c5 	.word	0x0800a8c5
 800a864:	0800a8c5 	.word	0x0800a8c5
 800a868:	0800a8c5 	.word	0x0800a8c5
 800a86c:	0800a8b7 	.word	0x0800a8b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	68b9      	ldr	r1, [r7, #8]
 800a876:	4618      	mov	r0, r3
 800a878:	f000 f8f2 	bl	800aa60 <TIM_OC1_SetConfig>
      break;
 800a87c:	e025      	b.n	800a8ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	68b9      	ldr	r1, [r7, #8]
 800a884:	4618      	mov	r0, r3
 800a886:	f000 f97b 	bl	800ab80 <TIM_OC2_SetConfig>
      break;
 800a88a:	e01e      	b.n	800a8ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68b9      	ldr	r1, [r7, #8]
 800a892:	4618      	mov	r0, r3
 800a894:	f000 f9fe 	bl	800ac94 <TIM_OC3_SetConfig>
      break;
 800a898:	e017      	b.n	800a8ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	68b9      	ldr	r1, [r7, #8]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 fa7f 	bl	800ada4 <TIM_OC4_SetConfig>
      break;
 800a8a6:	e010      	b.n	800a8ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68b9      	ldr	r1, [r7, #8]
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f000 fae2 	bl	800ae78 <TIM_OC5_SetConfig>
      break;
 800a8b4:	e009      	b.n	800a8ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68b9      	ldr	r1, [r7, #8]
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f000 fb3f 	bl	800af40 <TIM_OC6_SetConfig>
      break;
 800a8c2:	e002      	b.n	800a8ca <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	75fb      	strb	r3, [r7, #23]
      break;
 800a8c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a8d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3718      	adds	r7, #24
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8e4:	bf00      	nop
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a8f8:	bf00      	nop
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a90c:	bf00      	nop
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a920:	bf00      	nop
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a40      	ldr	r2, [pc, #256]	@ (800aa40 <TIM_Base_SetConfig+0x114>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d013      	beq.n	800a96c <TIM_Base_SetConfig+0x40>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a94a:	d00f      	beq.n	800a96c <TIM_Base_SetConfig+0x40>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4a3d      	ldr	r2, [pc, #244]	@ (800aa44 <TIM_Base_SetConfig+0x118>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d00b      	beq.n	800a96c <TIM_Base_SetConfig+0x40>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	4a3c      	ldr	r2, [pc, #240]	@ (800aa48 <TIM_Base_SetConfig+0x11c>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d007      	beq.n	800a96c <TIM_Base_SetConfig+0x40>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4a3b      	ldr	r2, [pc, #236]	@ (800aa4c <TIM_Base_SetConfig+0x120>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d003      	beq.n	800a96c <TIM_Base_SetConfig+0x40>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a3a      	ldr	r2, [pc, #232]	@ (800aa50 <TIM_Base_SetConfig+0x124>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d108      	bne.n	800a97e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4a2f      	ldr	r2, [pc, #188]	@ (800aa40 <TIM_Base_SetConfig+0x114>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d01f      	beq.n	800a9c6 <TIM_Base_SetConfig+0x9a>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a98c:	d01b      	beq.n	800a9c6 <TIM_Base_SetConfig+0x9a>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4a2c      	ldr	r2, [pc, #176]	@ (800aa44 <TIM_Base_SetConfig+0x118>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d017      	beq.n	800a9c6 <TIM_Base_SetConfig+0x9a>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	4a2b      	ldr	r2, [pc, #172]	@ (800aa48 <TIM_Base_SetConfig+0x11c>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d013      	beq.n	800a9c6 <TIM_Base_SetConfig+0x9a>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	4a2a      	ldr	r2, [pc, #168]	@ (800aa4c <TIM_Base_SetConfig+0x120>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d00f      	beq.n	800a9c6 <TIM_Base_SetConfig+0x9a>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4a29      	ldr	r2, [pc, #164]	@ (800aa50 <TIM_Base_SetConfig+0x124>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d00b      	beq.n	800a9c6 <TIM_Base_SetConfig+0x9a>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4a28      	ldr	r2, [pc, #160]	@ (800aa54 <TIM_Base_SetConfig+0x128>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d007      	beq.n	800a9c6 <TIM_Base_SetConfig+0x9a>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4a27      	ldr	r2, [pc, #156]	@ (800aa58 <TIM_Base_SetConfig+0x12c>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d003      	beq.n	800a9c6 <TIM_Base_SetConfig+0x9a>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4a26      	ldr	r2, [pc, #152]	@ (800aa5c <TIM_Base_SetConfig+0x130>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d108      	bne.n	800a9d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	695b      	ldr	r3, [r3, #20]
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	689a      	ldr	r2, [r3, #8]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a10      	ldr	r2, [pc, #64]	@ (800aa40 <TIM_Base_SetConfig+0x114>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d00f      	beq.n	800aa24 <TIM_Base_SetConfig+0xf8>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a12      	ldr	r2, [pc, #72]	@ (800aa50 <TIM_Base_SetConfig+0x124>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d00b      	beq.n	800aa24 <TIM_Base_SetConfig+0xf8>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a11      	ldr	r2, [pc, #68]	@ (800aa54 <TIM_Base_SetConfig+0x128>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d007      	beq.n	800aa24 <TIM_Base_SetConfig+0xf8>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a10      	ldr	r2, [pc, #64]	@ (800aa58 <TIM_Base_SetConfig+0x12c>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d003      	beq.n	800aa24 <TIM_Base_SetConfig+0xf8>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4a0f      	ldr	r2, [pc, #60]	@ (800aa5c <TIM_Base_SetConfig+0x130>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d103      	bne.n	800aa2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	691a      	ldr	r2, [r3, #16]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	615a      	str	r2, [r3, #20]
}
 800aa32:	bf00      	nop
 800aa34:	3714      	adds	r7, #20
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	40010000 	.word	0x40010000
 800aa44:	40000400 	.word	0x40000400
 800aa48:	40000800 	.word	0x40000800
 800aa4c:	40000c00 	.word	0x40000c00
 800aa50:	40010400 	.word	0x40010400
 800aa54:	40014000 	.word	0x40014000
 800aa58:	40014400 	.word	0x40014400
 800aa5c:	40014800 	.word	0x40014800

0800aa60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b087      	sub	sp, #28
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a1b      	ldr	r3, [r3, #32]
 800aa6e:	f023 0201 	bic.w	r2, r3, #1
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6a1b      	ldr	r3, [r3, #32]
 800aa7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	699b      	ldr	r3, [r3, #24]
 800aa86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	4b37      	ldr	r3, [pc, #220]	@ (800ab68 <TIM_OC1_SetConfig+0x108>)
 800aa8c:	4013      	ands	r3, r2
 800aa8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f023 0303 	bic.w	r3, r3, #3
 800aa96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	f023 0302 	bic.w	r3, r3, #2
 800aaa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	697a      	ldr	r2, [r7, #20]
 800aab0:	4313      	orrs	r3, r2
 800aab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a2d      	ldr	r2, [pc, #180]	@ (800ab6c <TIM_OC1_SetConfig+0x10c>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d00f      	beq.n	800aadc <TIM_OC1_SetConfig+0x7c>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a2c      	ldr	r2, [pc, #176]	@ (800ab70 <TIM_OC1_SetConfig+0x110>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d00b      	beq.n	800aadc <TIM_OC1_SetConfig+0x7c>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4a2b      	ldr	r2, [pc, #172]	@ (800ab74 <TIM_OC1_SetConfig+0x114>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d007      	beq.n	800aadc <TIM_OC1_SetConfig+0x7c>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a2a      	ldr	r2, [pc, #168]	@ (800ab78 <TIM_OC1_SetConfig+0x118>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d003      	beq.n	800aadc <TIM_OC1_SetConfig+0x7c>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a29      	ldr	r2, [pc, #164]	@ (800ab7c <TIM_OC1_SetConfig+0x11c>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d10c      	bne.n	800aaf6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	f023 0308 	bic.w	r3, r3, #8
 800aae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	697a      	ldr	r2, [r7, #20]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	f023 0304 	bic.w	r3, r3, #4
 800aaf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4a1c      	ldr	r2, [pc, #112]	@ (800ab6c <TIM_OC1_SetConfig+0x10c>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d00f      	beq.n	800ab1e <TIM_OC1_SetConfig+0xbe>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4a1b      	ldr	r2, [pc, #108]	@ (800ab70 <TIM_OC1_SetConfig+0x110>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d00b      	beq.n	800ab1e <TIM_OC1_SetConfig+0xbe>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a1a      	ldr	r2, [pc, #104]	@ (800ab74 <TIM_OC1_SetConfig+0x114>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d007      	beq.n	800ab1e <TIM_OC1_SetConfig+0xbe>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4a19      	ldr	r2, [pc, #100]	@ (800ab78 <TIM_OC1_SetConfig+0x118>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d003      	beq.n	800ab1e <TIM_OC1_SetConfig+0xbe>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	4a18      	ldr	r2, [pc, #96]	@ (800ab7c <TIM_OC1_SetConfig+0x11c>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d111      	bne.n	800ab42 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ab2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	695b      	ldr	r3, [r3, #20]
 800ab32:	693a      	ldr	r2, [r7, #16]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	699b      	ldr	r3, [r3, #24]
 800ab3c:	693a      	ldr	r2, [r7, #16]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	693a      	ldr	r2, [r7, #16]
 800ab46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	685a      	ldr	r2, [r3, #4]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	697a      	ldr	r2, [r7, #20]
 800ab5a:	621a      	str	r2, [r3, #32]
}
 800ab5c:	bf00      	nop
 800ab5e:	371c      	adds	r7, #28
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr
 800ab68:	fffeff8f 	.word	0xfffeff8f
 800ab6c:	40010000 	.word	0x40010000
 800ab70:	40010400 	.word	0x40010400
 800ab74:	40014000 	.word	0x40014000
 800ab78:	40014400 	.word	0x40014400
 800ab7c:	40014800 	.word	0x40014800

0800ab80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b087      	sub	sp, #28
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	f023 0210 	bic.w	r2, r3, #16
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	4b34      	ldr	r3, [pc, #208]	@ (800ac7c <TIM_OC2_SetConfig+0xfc>)
 800abac:	4013      	ands	r3, r2
 800abae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800abb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	021b      	lsls	r3, r3, #8
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	f023 0320 	bic.w	r3, r3, #32
 800abca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	011b      	lsls	r3, r3, #4
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4a29      	ldr	r2, [pc, #164]	@ (800ac80 <TIM_OC2_SetConfig+0x100>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d003      	beq.n	800abe8 <TIM_OC2_SetConfig+0x68>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4a28      	ldr	r2, [pc, #160]	@ (800ac84 <TIM_OC2_SetConfig+0x104>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d10d      	bne.n	800ac04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	011b      	lsls	r3, r3, #4
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	4313      	orrs	r3, r2
 800abfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	4a1e      	ldr	r2, [pc, #120]	@ (800ac80 <TIM_OC2_SetConfig+0x100>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d00f      	beq.n	800ac2c <TIM_OC2_SetConfig+0xac>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a1d      	ldr	r2, [pc, #116]	@ (800ac84 <TIM_OC2_SetConfig+0x104>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d00b      	beq.n	800ac2c <TIM_OC2_SetConfig+0xac>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	4a1c      	ldr	r2, [pc, #112]	@ (800ac88 <TIM_OC2_SetConfig+0x108>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d007      	beq.n	800ac2c <TIM_OC2_SetConfig+0xac>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	4a1b      	ldr	r2, [pc, #108]	@ (800ac8c <TIM_OC2_SetConfig+0x10c>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d003      	beq.n	800ac2c <TIM_OC2_SetConfig+0xac>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a1a      	ldr	r2, [pc, #104]	@ (800ac90 <TIM_OC2_SetConfig+0x110>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d113      	bne.n	800ac54 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ac32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ac3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	695b      	ldr	r3, [r3, #20]
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	693a      	ldr	r2, [r7, #16]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	693a      	ldr	r2, [r7, #16]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	693a      	ldr	r2, [r7, #16]
 800ac58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	685a      	ldr	r2, [r3, #4]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	621a      	str	r2, [r3, #32]
}
 800ac6e:	bf00      	nop
 800ac70:	371c      	adds	r7, #28
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	feff8fff 	.word	0xfeff8fff
 800ac80:	40010000 	.word	0x40010000
 800ac84:	40010400 	.word	0x40010400
 800ac88:	40014000 	.word	0x40014000
 800ac8c:	40014400 	.word	0x40014400
 800ac90:	40014800 	.word	0x40014800

0800ac94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b087      	sub	sp, #28
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a1b      	ldr	r3, [r3, #32]
 800aca2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a1b      	ldr	r3, [r3, #32]
 800acae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	69db      	ldr	r3, [r3, #28]
 800acba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	4b33      	ldr	r3, [pc, #204]	@ (800ad8c <TIM_OC3_SetConfig+0xf8>)
 800acc0:	4013      	ands	r3, r2
 800acc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f023 0303 	bic.w	r3, r3, #3
 800acca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800acdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	021b      	lsls	r3, r3, #8
 800ace4:	697a      	ldr	r2, [r7, #20]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a28      	ldr	r2, [pc, #160]	@ (800ad90 <TIM_OC3_SetConfig+0xfc>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d003      	beq.n	800acfa <TIM_OC3_SetConfig+0x66>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a27      	ldr	r2, [pc, #156]	@ (800ad94 <TIM_OC3_SetConfig+0x100>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d10d      	bne.n	800ad16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ad00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	021b      	lsls	r3, r3, #8
 800ad08:	697a      	ldr	r2, [r7, #20]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ad14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4a1d      	ldr	r2, [pc, #116]	@ (800ad90 <TIM_OC3_SetConfig+0xfc>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d00f      	beq.n	800ad3e <TIM_OC3_SetConfig+0xaa>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a1c      	ldr	r2, [pc, #112]	@ (800ad94 <TIM_OC3_SetConfig+0x100>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d00b      	beq.n	800ad3e <TIM_OC3_SetConfig+0xaa>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4a1b      	ldr	r2, [pc, #108]	@ (800ad98 <TIM_OC3_SetConfig+0x104>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d007      	beq.n	800ad3e <TIM_OC3_SetConfig+0xaa>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a1a      	ldr	r2, [pc, #104]	@ (800ad9c <TIM_OC3_SetConfig+0x108>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d003      	beq.n	800ad3e <TIM_OC3_SetConfig+0xaa>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4a19      	ldr	r2, [pc, #100]	@ (800ada0 <TIM_OC3_SetConfig+0x10c>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d113      	bne.n	800ad66 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ad4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	695b      	ldr	r3, [r3, #20]
 800ad52:	011b      	lsls	r3, r3, #4
 800ad54:	693a      	ldr	r2, [r7, #16]
 800ad56:	4313      	orrs	r3, r2
 800ad58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	699b      	ldr	r3, [r3, #24]
 800ad5e:	011b      	lsls	r3, r3, #4
 800ad60:	693a      	ldr	r2, [r7, #16]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	693a      	ldr	r2, [r7, #16]
 800ad6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	685a      	ldr	r2, [r3, #4]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	697a      	ldr	r2, [r7, #20]
 800ad7e:	621a      	str	r2, [r3, #32]
}
 800ad80:	bf00      	nop
 800ad82:	371c      	adds	r7, #28
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr
 800ad8c:	fffeff8f 	.word	0xfffeff8f
 800ad90:	40010000 	.word	0x40010000
 800ad94:	40010400 	.word	0x40010400
 800ad98:	40014000 	.word	0x40014000
 800ad9c:	40014400 	.word	0x40014400
 800ada0:	40014800 	.word	0x40014800

0800ada4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b087      	sub	sp, #28
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a1b      	ldr	r3, [r3, #32]
 800adb2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	69db      	ldr	r3, [r3, #28]
 800adca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	4b24      	ldr	r3, [pc, #144]	@ (800ae60 <TIM_OC4_SetConfig+0xbc>)
 800add0:	4013      	ands	r3, r2
 800add2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800adda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	021b      	lsls	r3, r3, #8
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	4313      	orrs	r3, r2
 800ade6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800adee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	031b      	lsls	r3, r3, #12
 800adf6:	693a      	ldr	r2, [r7, #16]
 800adf8:	4313      	orrs	r3, r2
 800adfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a19      	ldr	r2, [pc, #100]	@ (800ae64 <TIM_OC4_SetConfig+0xc0>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d00f      	beq.n	800ae24 <TIM_OC4_SetConfig+0x80>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a18      	ldr	r2, [pc, #96]	@ (800ae68 <TIM_OC4_SetConfig+0xc4>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d00b      	beq.n	800ae24 <TIM_OC4_SetConfig+0x80>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a17      	ldr	r2, [pc, #92]	@ (800ae6c <TIM_OC4_SetConfig+0xc8>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d007      	beq.n	800ae24 <TIM_OC4_SetConfig+0x80>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4a16      	ldr	r2, [pc, #88]	@ (800ae70 <TIM_OC4_SetConfig+0xcc>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d003      	beq.n	800ae24 <TIM_OC4_SetConfig+0x80>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	4a15      	ldr	r2, [pc, #84]	@ (800ae74 <TIM_OC4_SetConfig+0xd0>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d109      	bne.n	800ae38 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	695b      	ldr	r3, [r3, #20]
 800ae30:	019b      	lsls	r3, r3, #6
 800ae32:	697a      	ldr	r2, [r7, #20]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	697a      	ldr	r2, [r7, #20]
 800ae3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	685a      	ldr	r2, [r3, #4]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	693a      	ldr	r2, [r7, #16]
 800ae50:	621a      	str	r2, [r3, #32]
}
 800ae52:	bf00      	nop
 800ae54:	371c      	adds	r7, #28
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop
 800ae60:	feff8fff 	.word	0xfeff8fff
 800ae64:	40010000 	.word	0x40010000
 800ae68:	40010400 	.word	0x40010400
 800ae6c:	40014000 	.word	0x40014000
 800ae70:	40014400 	.word	0x40014400
 800ae74:	40014800 	.word	0x40014800

0800ae78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b087      	sub	sp, #28
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a1b      	ldr	r3, [r3, #32]
 800ae86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6a1b      	ldr	r3, [r3, #32]
 800ae92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	4b21      	ldr	r3, [pc, #132]	@ (800af28 <TIM_OC5_SetConfig+0xb0>)
 800aea4:	4013      	ands	r3, r2
 800aea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	68fa      	ldr	r2, [r7, #12]
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800aeb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	041b      	lsls	r3, r3, #16
 800aec0:	693a      	ldr	r2, [r7, #16]
 800aec2:	4313      	orrs	r3, r2
 800aec4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	4a18      	ldr	r2, [pc, #96]	@ (800af2c <TIM_OC5_SetConfig+0xb4>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d00f      	beq.n	800aeee <TIM_OC5_SetConfig+0x76>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4a17      	ldr	r2, [pc, #92]	@ (800af30 <TIM_OC5_SetConfig+0xb8>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d00b      	beq.n	800aeee <TIM_OC5_SetConfig+0x76>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4a16      	ldr	r2, [pc, #88]	@ (800af34 <TIM_OC5_SetConfig+0xbc>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d007      	beq.n	800aeee <TIM_OC5_SetConfig+0x76>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4a15      	ldr	r2, [pc, #84]	@ (800af38 <TIM_OC5_SetConfig+0xc0>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d003      	beq.n	800aeee <TIM_OC5_SetConfig+0x76>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4a14      	ldr	r2, [pc, #80]	@ (800af3c <TIM_OC5_SetConfig+0xc4>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d109      	bne.n	800af02 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aef4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	695b      	ldr	r3, [r3, #20]
 800aefa:	021b      	lsls	r3, r3, #8
 800aefc:	697a      	ldr	r2, [r7, #20]
 800aefe:	4313      	orrs	r3, r2
 800af00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	697a      	ldr	r2, [r7, #20]
 800af06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	685a      	ldr	r2, [r3, #4]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	621a      	str	r2, [r3, #32]
}
 800af1c:	bf00      	nop
 800af1e:	371c      	adds	r7, #28
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr
 800af28:	fffeff8f 	.word	0xfffeff8f
 800af2c:	40010000 	.word	0x40010000
 800af30:	40010400 	.word	0x40010400
 800af34:	40014000 	.word	0x40014000
 800af38:	40014400 	.word	0x40014400
 800af3c:	40014800 	.word	0x40014800

0800af40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800af40:	b480      	push	{r7}
 800af42:	b087      	sub	sp, #28
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a1b      	ldr	r3, [r3, #32]
 800af4e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a1b      	ldr	r3, [r3, #32]
 800af5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800af68:	68fa      	ldr	r2, [r7, #12]
 800af6a:	4b22      	ldr	r3, [pc, #136]	@ (800aff4 <TIM_OC6_SetConfig+0xb4>)
 800af6c:	4013      	ands	r3, r2
 800af6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	021b      	lsls	r3, r3, #8
 800af76:	68fa      	ldr	r2, [r7, #12]
 800af78:	4313      	orrs	r3, r2
 800af7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800af82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	051b      	lsls	r3, r3, #20
 800af8a:	693a      	ldr	r2, [r7, #16]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a19      	ldr	r2, [pc, #100]	@ (800aff8 <TIM_OC6_SetConfig+0xb8>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d00f      	beq.n	800afb8 <TIM_OC6_SetConfig+0x78>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4a18      	ldr	r2, [pc, #96]	@ (800affc <TIM_OC6_SetConfig+0xbc>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d00b      	beq.n	800afb8 <TIM_OC6_SetConfig+0x78>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4a17      	ldr	r2, [pc, #92]	@ (800b000 <TIM_OC6_SetConfig+0xc0>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d007      	beq.n	800afb8 <TIM_OC6_SetConfig+0x78>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4a16      	ldr	r2, [pc, #88]	@ (800b004 <TIM_OC6_SetConfig+0xc4>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d003      	beq.n	800afb8 <TIM_OC6_SetConfig+0x78>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4a15      	ldr	r2, [pc, #84]	@ (800b008 <TIM_OC6_SetConfig+0xc8>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d109      	bne.n	800afcc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800afbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	695b      	ldr	r3, [r3, #20]
 800afc4:	029b      	lsls	r3, r3, #10
 800afc6:	697a      	ldr	r2, [r7, #20]
 800afc8:	4313      	orrs	r3, r2
 800afca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	697a      	ldr	r2, [r7, #20]
 800afd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	685a      	ldr	r2, [r3, #4]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	693a      	ldr	r2, [r7, #16]
 800afe4:	621a      	str	r2, [r3, #32]
}
 800afe6:	bf00      	nop
 800afe8:	371c      	adds	r7, #28
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	feff8fff 	.word	0xfeff8fff
 800aff8:	40010000 	.word	0x40010000
 800affc:	40010400 	.word	0x40010400
 800b000:	40014000 	.word	0x40014000
 800b004:	40014400 	.word	0x40014400
 800b008:	40014800 	.word	0x40014800

0800b00c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d101      	bne.n	800b024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b020:	2302      	movs	r3, #2
 800b022:	e06d      	b.n	800b100 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2202      	movs	r2, #2
 800b030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a30      	ldr	r2, [pc, #192]	@ (800b10c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d004      	beq.n	800b058 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a2f      	ldr	r2, [pc, #188]	@ (800b110 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d108      	bne.n	800b06a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b05e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	68fa      	ldr	r2, [r7, #12]
 800b066:	4313      	orrs	r3, r2
 800b068:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b070:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	4313      	orrs	r3, r2
 800b07a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a20      	ldr	r2, [pc, #128]	@ (800b10c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d022      	beq.n	800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b096:	d01d      	beq.n	800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a1d      	ldr	r2, [pc, #116]	@ (800b114 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d018      	beq.n	800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a1c      	ldr	r2, [pc, #112]	@ (800b118 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d013      	beq.n	800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a1a      	ldr	r2, [pc, #104]	@ (800b11c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d00e      	beq.n	800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a15      	ldr	r2, [pc, #84]	@ (800b110 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d009      	beq.n	800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a16      	ldr	r2, [pc, #88]	@ (800b120 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d004      	beq.n	800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a15      	ldr	r2, [pc, #84]	@ (800b124 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d10c      	bne.n	800b0ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b0da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	68ba      	ldr	r2, [r7, #8]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	68ba      	ldr	r2, [r7, #8]
 800b0ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3714      	adds	r7, #20
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	40010000 	.word	0x40010000
 800b110:	40010400 	.word	0x40010400
 800b114:	40000400 	.word	0x40000400
 800b118:	40000800 	.word	0x40000800
 800b11c:	40000c00 	.word	0x40000c00
 800b120:	40001800 	.word	0x40001800
 800b124:	40014000 	.word	0x40014000

0800b128 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b144:	bf00      	nop
 800b146:	370c      	adds	r7, #12
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b158:	bf00      	nop
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d101      	bne.n	800b176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b172:	2301      	movs	r3, #1
 800b174:	e042      	b.n	800b1fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d106      	bne.n	800b18e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f7f6 fa07 	bl	800159c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2224      	movs	r2, #36	@ 0x24
 800b192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f022 0201 	bic.w	r2, r2, #1
 800b1a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 ffc8 	bl	800c13c <UART_SetConfig>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d101      	bne.n	800b1b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e022      	b.n	800b1fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d002      	beq.n	800b1c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f001 fd24 	bl	800cc0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	685a      	ldr	r2, [r3, #4]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b1d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	689a      	ldr	r2, [r3, #8]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b1e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f042 0201 	orr.w	r2, r2, #1
 800b1f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f001 fdab 	bl	800cd50 <UART_CheckIdleState>
 800b1fa:	4603      	mov	r3, r0
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3708      	adds	r7, #8
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b08a      	sub	sp, #40	@ 0x28
 800b208:	af02      	add	r7, sp, #8
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	603b      	str	r3, [r7, #0]
 800b210:	4613      	mov	r3, r2
 800b212:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b21a:	2b20      	cmp	r3, #32
 800b21c:	d17b      	bne.n	800b316 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d002      	beq.n	800b22a <HAL_UART_Transmit+0x26>
 800b224:	88fb      	ldrh	r3, [r7, #6]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d101      	bne.n	800b22e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b22a:	2301      	movs	r3, #1
 800b22c:	e074      	b.n	800b318 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2200      	movs	r2, #0
 800b232:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2221      	movs	r2, #33	@ 0x21
 800b23a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b23e:	f7f8 fdc7 	bl	8003dd0 <HAL_GetTick>
 800b242:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	88fa      	ldrh	r2, [r7, #6]
 800b248:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	88fa      	ldrh	r2, [r7, #6]
 800b250:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b25c:	d108      	bne.n	800b270 <HAL_UART_Transmit+0x6c>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	691b      	ldr	r3, [r3, #16]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d104      	bne.n	800b270 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b266:	2300      	movs	r3, #0
 800b268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	61bb      	str	r3, [r7, #24]
 800b26e:	e003      	b.n	800b278 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b274:	2300      	movs	r3, #0
 800b276:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b278:	e030      	b.n	800b2dc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	2200      	movs	r2, #0
 800b282:	2180      	movs	r1, #128	@ 0x80
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	f001 fe0d 	bl	800cea4 <UART_WaitOnFlagUntilTimeout>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d005      	beq.n	800b29c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2220      	movs	r2, #32
 800b294:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b298:	2303      	movs	r3, #3
 800b29a:	e03d      	b.n	800b318 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d10b      	bne.n	800b2ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	881b      	ldrh	r3, [r3, #0]
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b2b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	3302      	adds	r3, #2
 800b2b6:	61bb      	str	r3, [r7, #24]
 800b2b8:	e007      	b.n	800b2ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	781a      	ldrb	r2, [r3, #0]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	3b01      	subs	r3, #1
 800b2d4:	b29a      	uxth	r2, r3
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d1c8      	bne.n	800b27a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	2140      	movs	r1, #64	@ 0x40
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f001 fdd6 	bl	800cea4 <UART_WaitOnFlagUntilTimeout>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d005      	beq.n	800b30a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2220      	movs	r2, #32
 800b302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b306:	2303      	movs	r3, #3
 800b308:	e006      	b.n	800b318 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2220      	movs	r2, #32
 800b30e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b312:	2300      	movs	r3, #0
 800b314:	e000      	b.n	800b318 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b316:	2302      	movs	r3, #2
  }
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3720      	adds	r7, #32
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b08a      	sub	sp, #40	@ 0x28
 800b324:	af02      	add	r7, sp, #8
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	60b9      	str	r1, [r7, #8]
 800b32a:	603b      	str	r3, [r7, #0]
 800b32c:	4613      	mov	r3, r2
 800b32e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b336:	2b20      	cmp	r3, #32
 800b338:	f040 80b5 	bne.w	800b4a6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d002      	beq.n	800b348 <HAL_UART_Receive+0x28>
 800b342:	88fb      	ldrh	r3, [r7, #6]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d101      	bne.n	800b34c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	e0ad      	b.n	800b4a8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2200      	movs	r2, #0
 800b350:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2222      	movs	r2, #34	@ 0x22
 800b358:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2200      	movs	r2, #0
 800b360:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b362:	f7f8 fd35 	bl	8003dd0 <HAL_GetTick>
 800b366:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	88fa      	ldrh	r2, [r7, #6]
 800b36c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	88fa      	ldrh	r2, [r7, #6]
 800b374:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b380:	d10e      	bne.n	800b3a0 <HAL_UART_Receive+0x80>
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	691b      	ldr	r3, [r3, #16]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d105      	bne.n	800b396 <HAL_UART_Receive+0x76>
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b390:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b394:	e02d      	b.n	800b3f2 <HAL_UART_Receive+0xd2>
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	22ff      	movs	r2, #255	@ 0xff
 800b39a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b39e:	e028      	b.n	800b3f2 <HAL_UART_Receive+0xd2>
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10d      	bne.n	800b3c4 <HAL_UART_Receive+0xa4>
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d104      	bne.n	800b3ba <HAL_UART_Receive+0x9a>
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	22ff      	movs	r2, #255	@ 0xff
 800b3b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b3b8:	e01b      	b.n	800b3f2 <HAL_UART_Receive+0xd2>
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	227f      	movs	r2, #127	@ 0x7f
 800b3be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b3c2:	e016      	b.n	800b3f2 <HAL_UART_Receive+0xd2>
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3cc:	d10d      	bne.n	800b3ea <HAL_UART_Receive+0xca>
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d104      	bne.n	800b3e0 <HAL_UART_Receive+0xc0>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	227f      	movs	r2, #127	@ 0x7f
 800b3da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b3de:	e008      	b.n	800b3f2 <HAL_UART_Receive+0xd2>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	223f      	movs	r2, #63	@ 0x3f
 800b3e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b3e8:	e003      	b.n	800b3f2 <HAL_UART_Receive+0xd2>
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b3f8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b402:	d108      	bne.n	800b416 <HAL_UART_Receive+0xf6>
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	691b      	ldr	r3, [r3, #16]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d104      	bne.n	800b416 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800b40c:	2300      	movs	r3, #0
 800b40e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	61bb      	str	r3, [r7, #24]
 800b414:	e003      	b.n	800b41e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b41a:	2300      	movs	r3, #0
 800b41c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b41e:	e036      	b.n	800b48e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	9300      	str	r3, [sp, #0]
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	2200      	movs	r2, #0
 800b428:	2120      	movs	r1, #32
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f001 fd3a 	bl	800cea4 <UART_WaitOnFlagUntilTimeout>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d005      	beq.n	800b442 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2220      	movs	r2, #32
 800b43a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800b43e:	2303      	movs	r3, #3
 800b440:	e032      	b.n	800b4a8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d10c      	bne.n	800b462 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b44e:	b29a      	uxth	r2, r3
 800b450:	8a7b      	ldrh	r3, [r7, #18]
 800b452:	4013      	ands	r3, r2
 800b454:	b29a      	uxth	r2, r3
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	3302      	adds	r3, #2
 800b45e:	61bb      	str	r3, [r7, #24]
 800b460:	e00c      	b.n	800b47c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b468:	b2da      	uxtb	r2, r3
 800b46a:	8a7b      	ldrh	r3, [r7, #18]
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	4013      	ands	r3, r2
 800b470:	b2da      	uxtb	r2, r3
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	3301      	adds	r3, #1
 800b47a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b482:	b29b      	uxth	r3, r3
 800b484:	3b01      	subs	r3, #1
 800b486:	b29a      	uxth	r2, r3
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b494:	b29b      	uxth	r3, r3
 800b496:	2b00      	cmp	r3, #0
 800b498:	d1c2      	bne.n	800b420 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2220      	movs	r2, #32
 800b49e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	e000      	b.n	800b4a8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800b4a6:	2302      	movs	r3, #2
  }
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3720      	adds	r7, #32
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b091      	sub	sp, #68	@ 0x44
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4c4:	2b20      	cmp	r3, #32
 800b4c6:	d178      	bne.n	800b5ba <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d002      	beq.n	800b4d4 <HAL_UART_Transmit_IT+0x24>
 800b4ce:	88fb      	ldrh	r3, [r7, #6]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e071      	b.n	800b5bc <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	88fa      	ldrh	r2, [r7, #6]
 800b4e2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	88fa      	ldrh	r2, [r7, #6]
 800b4ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2221      	movs	r2, #33	@ 0x21
 800b500:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b508:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b50c:	d12a      	bne.n	800b564 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b516:	d107      	bne.n	800b528 <HAL_UART_Transmit_IT+0x78>
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d103      	bne.n	800b528 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	4a29      	ldr	r2, [pc, #164]	@ (800b5c8 <HAL_UART_Transmit_IT+0x118>)
 800b524:	679a      	str	r2, [r3, #120]	@ 0x78
 800b526:	e002      	b.n	800b52e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	4a28      	ldr	r2, [pc, #160]	@ (800b5cc <HAL_UART_Transmit_IT+0x11c>)
 800b52c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	3308      	adds	r3, #8
 800b534:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b538:	e853 3f00 	ldrex	r3, [r3]
 800b53c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b540:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b544:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	3308      	adds	r3, #8
 800b54c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b54e:	637a      	str	r2, [r7, #52]	@ 0x34
 800b550:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b552:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b554:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b556:	e841 2300 	strex	r3, r2, [r1]
 800b55a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d1e5      	bne.n	800b52e <HAL_UART_Transmit_IT+0x7e>
 800b562:	e028      	b.n	800b5b6 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b56c:	d107      	bne.n	800b57e <HAL_UART_Transmit_IT+0xce>
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	691b      	ldr	r3, [r3, #16]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d103      	bne.n	800b57e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	4a15      	ldr	r2, [pc, #84]	@ (800b5d0 <HAL_UART_Transmit_IT+0x120>)
 800b57a:	679a      	str	r2, [r3, #120]	@ 0x78
 800b57c:	e002      	b.n	800b584 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	4a14      	ldr	r2, [pc, #80]	@ (800b5d4 <HAL_UART_Transmit_IT+0x124>)
 800b582:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	e853 3f00 	ldrex	r3, [r3]
 800b590:	613b      	str	r3, [r7, #16]
   return(result);
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5a2:	623b      	str	r3, [r7, #32]
 800b5a4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a6:	69f9      	ldr	r1, [r7, #28]
 800b5a8:	6a3a      	ldr	r2, [r7, #32]
 800b5aa:	e841 2300 	strex	r3, r2, [r1]
 800b5ae:	61bb      	str	r3, [r7, #24]
   return(result);
 800b5b0:	69bb      	ldr	r3, [r7, #24]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d1e6      	bne.n	800b584 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	e000      	b.n	800b5bc <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800b5ba:	2302      	movs	r3, #2
  }
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3744      	adds	r7, #68	@ 0x44
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr
 800b5c8:	0800d555 	.word	0x0800d555
 800b5cc:	0800d475 	.word	0x0800d475
 800b5d0:	0800d3b3 	.word	0x0800d3b3
 800b5d4:	0800d2fb 	.word	0x0800d2fb

0800b5d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b08a      	sub	sp, #40	@ 0x28
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5ec:	2b20      	cmp	r3, #32
 800b5ee:	d137      	bne.n	800b660 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d002      	beq.n	800b5fc <HAL_UART_Receive_IT+0x24>
 800b5f6:	88fb      	ldrh	r3, [r7, #6]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d101      	bne.n	800b600 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	e030      	b.n	800b662 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2200      	movs	r2, #0
 800b604:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a18      	ldr	r2, [pc, #96]	@ (800b66c <HAL_UART_Receive_IT+0x94>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d01f      	beq.n	800b650 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d018      	beq.n	800b650 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	e853 3f00 	ldrex	r3, [r3]
 800b62a:	613b      	str	r3, [r7, #16]
   return(result);
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b632:	627b      	str	r3, [r7, #36]	@ 0x24
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	461a      	mov	r2, r3
 800b63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63c:	623b      	str	r3, [r7, #32]
 800b63e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b640:	69f9      	ldr	r1, [r7, #28]
 800b642:	6a3a      	ldr	r2, [r7, #32]
 800b644:	e841 2300 	strex	r3, r2, [r1]
 800b648:	61bb      	str	r3, [r7, #24]
   return(result);
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1e6      	bne.n	800b61e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b650:	88fb      	ldrh	r3, [r7, #6]
 800b652:	461a      	mov	r2, r3
 800b654:	68b9      	ldr	r1, [r7, #8]
 800b656:	68f8      	ldr	r0, [r7, #12]
 800b658:	f001 fc8c 	bl	800cf74 <UART_Start_Receive_IT>
 800b65c:	4603      	mov	r3, r0
 800b65e:	e000      	b.n	800b662 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b660:	2302      	movs	r3, #2
  }
}
 800b662:	4618      	mov	r0, r3
 800b664:	3728      	adds	r7, #40	@ 0x28
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	58000c00 	.word	0x58000c00

0800b670 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b09a      	sub	sp, #104	@ 0x68
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b680:	e853 3f00 	ldrex	r3, [r3]
 800b684:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b688:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b68c:	667b      	str	r3, [r7, #100]	@ 0x64
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	461a      	mov	r2, r3
 800b694:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b696:	657b      	str	r3, [r7, #84]	@ 0x54
 800b698:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b69c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b69e:	e841 2300 	strex	r3, r2, [r1]
 800b6a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b6a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1e6      	bne.n	800b678 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	3308      	adds	r3, #8
 800b6b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6b4:	e853 3f00 	ldrex	r3, [r3]
 800b6b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b6ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6bc:	4b51      	ldr	r3, [pc, #324]	@ (800b804 <HAL_UART_AbortReceive_IT+0x194>)
 800b6be:	4013      	ands	r3, r2
 800b6c0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	3308      	adds	r3, #8
 800b6c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b6ca:	643a      	str	r2, [r7, #64]	@ 0x40
 800b6cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b6d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b6d2:	e841 2300 	strex	r3, r2, [r1]
 800b6d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1e5      	bne.n	800b6aa <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d118      	bne.n	800b718 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ec:	6a3b      	ldr	r3, [r7, #32]
 800b6ee:	e853 3f00 	ldrex	r3, [r3]
 800b6f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	f023 0310 	bic.w	r3, r3, #16
 800b6fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	461a      	mov	r2, r3
 800b702:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b704:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b706:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b708:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b70a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b70c:	e841 2300 	strex	r3, r2, [r1]
 800b710:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b714:	2b00      	cmp	r3, #0
 800b716:	d1e6      	bne.n	800b6e6 <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	689b      	ldr	r3, [r3, #8]
 800b71e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b722:	2b40      	cmp	r3, #64	@ 0x40
 800b724:	d154      	bne.n	800b7d0 <HAL_UART_AbortReceive_IT+0x160>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	3308      	adds	r3, #8
 800b72c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	e853 3f00 	ldrex	r3, [r3]
 800b734:	60bb      	str	r3, [r7, #8]
   return(result);
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b73c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	3308      	adds	r3, #8
 800b744:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b746:	61ba      	str	r2, [r7, #24]
 800b748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74a:	6979      	ldr	r1, [r7, #20]
 800b74c:	69ba      	ldr	r2, [r7, #24]
 800b74e:	e841 2300 	strex	r3, r2, [r1]
 800b752:	613b      	str	r3, [r7, #16]
   return(result);
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d1e5      	bne.n	800b726 <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b760:	2b00      	cmp	r3, #0
 800b762:	d017      	beq.n	800b794 <HAL_UART_AbortReceive_IT+0x124>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b76a:	4a27      	ldr	r2, [pc, #156]	@ (800b808 <HAL_UART_AbortReceive_IT+0x198>)
 800b76c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b774:	4618      	mov	r0, r3
 800b776:	f7f8 ffe1 	bl	800473c <HAL_DMA_Abort_IT>
 800b77a:	4603      	mov	r3, r0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d03c      	beq.n	800b7fa <HAL_UART_AbortReceive_IT+0x18a>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b78e:	4610      	mov	r0, r2
 800b790:	4798      	blx	r3
 800b792:	e032      	b.n	800b7fa <HAL_UART_AbortReceive_IT+0x18a>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	220f      	movs	r2, #15
 800b7a8:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	699a      	ldr	r2, [r3, #24]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f042 0208 	orr.w	r2, r2, #8
 800b7b8:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2220      	movs	r2, #32
 800b7be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 fbe3 	bl	800bf94 <HAL_UART_AbortReceiveCpltCallback>
 800b7ce:	e014      	b.n	800b7fa <HAL_UART_AbortReceive_IT+0x18a>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	220f      	movs	r2, #15
 800b7e4:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2220      	movs	r2, #32
 800b7ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fbcd 	bl	800bf94 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b7fa:	2300      	movs	r3, #0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3768      	adds	r7, #104	@ 0x68
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}
 800b804:	effffffe 	.word	0xeffffffe
 800b808:	0800d2b1 	.word	0x0800d2b1

0800b80c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b0ba      	sub	sp, #232	@ 0xe8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	69db      	ldr	r3, [r3, #28]
 800b81a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b832:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b836:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b83a:	4013      	ands	r3, r2
 800b83c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b840:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b844:	2b00      	cmp	r3, #0
 800b846:	d11b      	bne.n	800b880 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b84c:	f003 0320 	and.w	r3, r3, #32
 800b850:	2b00      	cmp	r3, #0
 800b852:	d015      	beq.n	800b880 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b858:	f003 0320 	and.w	r3, r3, #32
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d105      	bne.n	800b86c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d009      	beq.n	800b880 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b870:	2b00      	cmp	r3, #0
 800b872:	f000 8377 	beq.w	800bf64 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	4798      	blx	r3
      }
      return;
 800b87e:	e371      	b.n	800bf64 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b880:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b884:	2b00      	cmp	r3, #0
 800b886:	f000 8123 	beq.w	800bad0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b88a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b88e:	4b8d      	ldr	r3, [pc, #564]	@ (800bac4 <HAL_UART_IRQHandler+0x2b8>)
 800b890:	4013      	ands	r3, r2
 800b892:	2b00      	cmp	r3, #0
 800b894:	d106      	bne.n	800b8a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b896:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b89a:	4b8b      	ldr	r3, [pc, #556]	@ (800bac8 <HAL_UART_IRQHandler+0x2bc>)
 800b89c:	4013      	ands	r3, r2
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	f000 8116 	beq.w	800bad0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b8a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8a8:	f003 0301 	and.w	r3, r3, #1
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d011      	beq.n	800b8d4 <HAL_UART_IRQHandler+0xc8>
 800b8b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00b      	beq.n	800b8d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8ca:	f043 0201 	orr.w	r2, r3, #1
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8d8:	f003 0302 	and.w	r3, r3, #2
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d011      	beq.n	800b904 <HAL_UART_IRQHandler+0xf8>
 800b8e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b8e4:	f003 0301 	and.w	r3, r3, #1
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d00b      	beq.n	800b904 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2202      	movs	r2, #2
 800b8f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8fa:	f043 0204 	orr.w	r2, r3, #4
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b908:	f003 0304 	and.w	r3, r3, #4
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d011      	beq.n	800b934 <HAL_UART_IRQHandler+0x128>
 800b910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b914:	f003 0301 	and.w	r3, r3, #1
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00b      	beq.n	800b934 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2204      	movs	r2, #4
 800b922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b92a:	f043 0202 	orr.w	r2, r3, #2
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b938:	f003 0308 	and.w	r3, r3, #8
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d017      	beq.n	800b970 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b944:	f003 0320 	and.w	r3, r3, #32
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d105      	bne.n	800b958 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b94c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b950:	4b5c      	ldr	r3, [pc, #368]	@ (800bac4 <HAL_UART_IRQHandler+0x2b8>)
 800b952:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b954:	2b00      	cmp	r3, #0
 800b956:	d00b      	beq.n	800b970 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2208      	movs	r2, #8
 800b95e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b966:	f043 0208 	orr.w	r2, r3, #8
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d012      	beq.n	800b9a2 <HAL_UART_IRQHandler+0x196>
 800b97c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b980:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b984:	2b00      	cmp	r3, #0
 800b986:	d00c      	beq.n	800b9a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b990:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b998:	f043 0220 	orr.w	r2, r3, #32
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f000 82dd 	beq.w	800bf68 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b9ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9b2:	f003 0320 	and.w	r3, r3, #32
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d013      	beq.n	800b9e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b9ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9be:	f003 0320 	and.w	r3, r3, #32
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d105      	bne.n	800b9d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b9c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b9ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d007      	beq.n	800b9e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d003      	beq.n	800b9e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9f6:	2b40      	cmp	r3, #64	@ 0x40
 800b9f8:	d005      	beq.n	800ba06 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b9fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b9fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d054      	beq.n	800bab0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f001 fbd6 	bl	800d1b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba16:	2b40      	cmp	r3, #64	@ 0x40
 800ba18:	d146      	bne.n	800baa8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	3308      	adds	r3, #8
 800ba20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ba28:	e853 3f00 	ldrex	r3, [r3]
 800ba2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ba30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ba34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	3308      	adds	r3, #8
 800ba42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ba46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ba4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ba52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ba56:	e841 2300 	strex	r3, r2, [r1]
 800ba5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ba5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d1d9      	bne.n	800ba1a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d017      	beq.n	800baa0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba76:	4a15      	ldr	r2, [pc, #84]	@ (800bacc <HAL_UART_IRQHandler+0x2c0>)
 800ba78:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7f8 fe5b 	bl	800473c <HAL_DMA_Abort_IT>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d019      	beq.n	800bac0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ba9a:	4610      	mov	r0, r2
 800ba9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba9e:	e00f      	b.n	800bac0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 fa6d 	bl	800bf80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baa6:	e00b      	b.n	800bac0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 fa69 	bl	800bf80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baae:	e007      	b.n	800bac0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 fa65 	bl	800bf80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800babe:	e253      	b.n	800bf68 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bac0:	bf00      	nop
    return;
 800bac2:	e251      	b.n	800bf68 <HAL_UART_IRQHandler+0x75c>
 800bac4:	10000001 	.word	0x10000001
 800bac8:	04000120 	.word	0x04000120
 800bacc:	0800d285 	.word	0x0800d285

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	f040 81e7 	bne.w	800bea8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bade:	f003 0310 	and.w	r3, r3, #16
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	f000 81e0 	beq.w	800bea8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800baec:	f003 0310 	and.w	r3, r3, #16
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f000 81d9 	beq.w	800bea8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2210      	movs	r2, #16
 800bafc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb08:	2b40      	cmp	r3, #64	@ 0x40
 800bb0a:	f040 8151 	bne.w	800bdb0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a96      	ldr	r2, [pc, #600]	@ (800bd70 <HAL_UART_IRQHandler+0x564>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d068      	beq.n	800bbee <HAL_UART_IRQHandler+0x3e2>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a93      	ldr	r2, [pc, #588]	@ (800bd74 <HAL_UART_IRQHandler+0x568>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d061      	beq.n	800bbee <HAL_UART_IRQHandler+0x3e2>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a91      	ldr	r2, [pc, #580]	@ (800bd78 <HAL_UART_IRQHandler+0x56c>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d05a      	beq.n	800bbee <HAL_UART_IRQHandler+0x3e2>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a8e      	ldr	r2, [pc, #568]	@ (800bd7c <HAL_UART_IRQHandler+0x570>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d053      	beq.n	800bbee <HAL_UART_IRQHandler+0x3e2>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	4a8c      	ldr	r2, [pc, #560]	@ (800bd80 <HAL_UART_IRQHandler+0x574>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d04c      	beq.n	800bbee <HAL_UART_IRQHandler+0x3e2>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a89      	ldr	r2, [pc, #548]	@ (800bd84 <HAL_UART_IRQHandler+0x578>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d045      	beq.n	800bbee <HAL_UART_IRQHandler+0x3e2>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4a87      	ldr	r2, [pc, #540]	@ (800bd88 <HAL_UART_IRQHandler+0x57c>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d03e      	beq.n	800bbee <HAL_UART_IRQHandler+0x3e2>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a84      	ldr	r2, [pc, #528]	@ (800bd8c <HAL_UART_IRQHandler+0x580>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d037      	beq.n	800bbee <HAL_UART_IRQHandler+0x3e2>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a82      	ldr	r2, [pc, #520]	@ (800bd90 <HAL_UART_IRQHandler+0x584>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d030      	beq.n	800bbee <HAL_UART_IRQHandler+0x3e2>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	4a7f      	ldr	r2, [pc, #508]	@ (800bd94 <HAL_UART_IRQHandler+0x588>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d029      	beq.n	800bbee <HAL_UART_IRQHandler+0x3e2>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a7d      	ldr	r2, [pc, #500]	@ (800bd98 <HAL_UART_IRQHandler+0x58c>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d022      	beq.n	800bbee <HAL_UART_IRQHandler+0x3e2>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a7a      	ldr	r2, [pc, #488]	@ (800bd9c <HAL_UART_IRQHandler+0x590>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d01b      	beq.n	800bbee <HAL_UART_IRQHandler+0x3e2>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a78      	ldr	r2, [pc, #480]	@ (800bda0 <HAL_UART_IRQHandler+0x594>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d014      	beq.n	800bbee <HAL_UART_IRQHandler+0x3e2>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a75      	ldr	r2, [pc, #468]	@ (800bda4 <HAL_UART_IRQHandler+0x598>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d00d      	beq.n	800bbee <HAL_UART_IRQHandler+0x3e2>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4a73      	ldr	r2, [pc, #460]	@ (800bda8 <HAL_UART_IRQHandler+0x59c>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d006      	beq.n	800bbee <HAL_UART_IRQHandler+0x3e2>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4a70      	ldr	r2, [pc, #448]	@ (800bdac <HAL_UART_IRQHandler+0x5a0>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d106      	bne.n	800bbfc <HAL_UART_IRQHandler+0x3f0>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	e005      	b.n	800bc08 <HAL_UART_IRQHandler+0x3fc>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f000 81ab 	beq.w	800bf6c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bc1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bc20:	429a      	cmp	r2, r3
 800bc22:	f080 81a3 	bcs.w	800bf6c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bc2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc36:	69db      	ldr	r3, [r3, #28]
 800bc38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc3c:	f000 8087 	beq.w	800bd4e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bc4c:	e853 3f00 	ldrex	r3, [r3]
 800bc50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bc54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bc58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	461a      	mov	r2, r3
 800bc66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bc6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bc6e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc72:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bc76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bc7a:	e841 2300 	strex	r3, r2, [r1]
 800bc7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bc82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d1da      	bne.n	800bc40 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	3308      	adds	r3, #8
 800bc90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc94:	e853 3f00 	ldrex	r3, [r3]
 800bc98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bc9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc9c:	f023 0301 	bic.w	r3, r3, #1
 800bca0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	3308      	adds	r3, #8
 800bcaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bcae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bcb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bcb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bcba:	e841 2300 	strex	r3, r2, [r1]
 800bcbe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bcc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1e1      	bne.n	800bc8a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	3308      	adds	r3, #8
 800bccc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bcd0:	e853 3f00 	ldrex	r3, [r3]
 800bcd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bcd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bcd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	3308      	adds	r3, #8
 800bce6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bcea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bcec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bcf0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bcf2:	e841 2300 	strex	r3, r2, [r1]
 800bcf6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bcf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1e3      	bne.n	800bcc6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2220      	movs	r2, #32
 800bd02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd14:	e853 3f00 	ldrex	r3, [r3]
 800bd18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bd1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd1c:	f023 0310 	bic.w	r3, r3, #16
 800bd20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	461a      	mov	r2, r3
 800bd2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bd34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd36:	e841 2300 	strex	r3, r2, [r1]
 800bd3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bd3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d1e4      	bne.n	800bd0c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7f8 f9d9 	bl	8004100 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2202      	movs	r2, #2
 800bd52:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	1ad3      	subs	r3, r2, r3
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	4619      	mov	r1, r3
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 f91d 	bl	800bfa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bd6e:	e0fd      	b.n	800bf6c <HAL_UART_IRQHandler+0x760>
 800bd70:	40020010 	.word	0x40020010
 800bd74:	40020028 	.word	0x40020028
 800bd78:	40020040 	.word	0x40020040
 800bd7c:	40020058 	.word	0x40020058
 800bd80:	40020070 	.word	0x40020070
 800bd84:	40020088 	.word	0x40020088
 800bd88:	400200a0 	.word	0x400200a0
 800bd8c:	400200b8 	.word	0x400200b8
 800bd90:	40020410 	.word	0x40020410
 800bd94:	40020428 	.word	0x40020428
 800bd98:	40020440 	.word	0x40020440
 800bd9c:	40020458 	.word	0x40020458
 800bda0:	40020470 	.word	0x40020470
 800bda4:	40020488 	.word	0x40020488
 800bda8:	400204a0 	.word	0x400204a0
 800bdac:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	1ad3      	subs	r3, r2, r3
 800bdc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f000 80cf 	beq.w	800bf70 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bdd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	f000 80ca 	beq.w	800bf70 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bde4:	e853 3f00 	ldrex	r3, [r3]
 800bde8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bdea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bdf0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bdfe:	647b      	str	r3, [r7, #68]	@ 0x44
 800be00:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be06:	e841 2300 	strex	r3, r2, [r1]
 800be0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d1e4      	bne.n	800bddc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	3308      	adds	r3, #8
 800be18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be1c:	e853 3f00 	ldrex	r3, [r3]
 800be20:	623b      	str	r3, [r7, #32]
   return(result);
 800be22:	6a3a      	ldr	r2, [r7, #32]
 800be24:	4b55      	ldr	r3, [pc, #340]	@ (800bf7c <HAL_UART_IRQHandler+0x770>)
 800be26:	4013      	ands	r3, r2
 800be28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	3308      	adds	r3, #8
 800be32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800be36:	633a      	str	r2, [r7, #48]	@ 0x30
 800be38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be3e:	e841 2300 	strex	r3, r2, [r1]
 800be42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800be44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1e3      	bne.n	800be12 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2220      	movs	r2, #32
 800be4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2200      	movs	r2, #0
 800be56:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2200      	movs	r2, #0
 800be5c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	e853 3f00 	ldrex	r3, [r3]
 800be6a:	60fb      	str	r3, [r7, #12]
   return(result);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f023 0310 	bic.w	r3, r3, #16
 800be72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	461a      	mov	r2, r3
 800be7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800be80:	61fb      	str	r3, [r7, #28]
 800be82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be84:	69b9      	ldr	r1, [r7, #24]
 800be86:	69fa      	ldr	r2, [r7, #28]
 800be88:	e841 2300 	strex	r3, r2, [r1]
 800be8c:	617b      	str	r3, [r7, #20]
   return(result);
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1e4      	bne.n	800be5e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2202      	movs	r2, #2
 800be98:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800be9e:	4619      	mov	r1, r3
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 f881 	bl	800bfa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bea6:	e063      	b.n	800bf70 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800beac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00e      	beq.n	800bed2 <HAL_UART_IRQHandler+0x6c6>
 800beb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800beb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d008      	beq.n	800bed2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800bec8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f002 f8fe 	bl	800e0cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bed0:	e051      	b.n	800bf76 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d014      	beq.n	800bf08 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d105      	bne.n	800bef6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800beea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800beee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d008      	beq.n	800bf08 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800befa:	2b00      	cmp	r3, #0
 800befc:	d03a      	beq.n	800bf74 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	4798      	blx	r3
    }
    return;
 800bf06:	e035      	b.n	800bf74 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bf08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d009      	beq.n	800bf28 <HAL_UART_IRQHandler+0x71c>
 800bf14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d003      	beq.n	800bf28 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f001 fb8c 	bl	800d63e <UART_EndTransmit_IT>
    return;
 800bf26:	e026      	b.n	800bf76 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bf28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d009      	beq.n	800bf48 <HAL_UART_IRQHandler+0x73c>
 800bf34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d003      	beq.n	800bf48 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f002 f8d7 	bl	800e0f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf46:	e016      	b.n	800bf76 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bf48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d010      	beq.n	800bf76 <HAL_UART_IRQHandler+0x76a>
 800bf54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	da0c      	bge.n	800bf76 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f002 f8bf 	bl	800e0e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf62:	e008      	b.n	800bf76 <HAL_UART_IRQHandler+0x76a>
      return;
 800bf64:	bf00      	nop
 800bf66:	e006      	b.n	800bf76 <HAL_UART_IRQHandler+0x76a>
    return;
 800bf68:	bf00      	nop
 800bf6a:	e004      	b.n	800bf76 <HAL_UART_IRQHandler+0x76a>
      return;
 800bf6c:	bf00      	nop
 800bf6e:	e002      	b.n	800bf76 <HAL_UART_IRQHandler+0x76a>
      return;
 800bf70:	bf00      	nop
 800bf72:	e000      	b.n	800bf76 <HAL_UART_IRQHandler+0x76a>
    return;
 800bf74:	bf00      	nop
  }
}
 800bf76:	37e8      	adds	r7, #232	@ 0xe8
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	effffffe 	.word	0xeffffffe

0800bf80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b083      	sub	sp, #12
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bf88:	bf00      	nop
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bf9c:	bf00      	nop
 800bf9e:	370c      	adds	r7, #12
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b083      	sub	sp, #12
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bfb4:	bf00      	nop
 800bfb6:	370c      	adds	r7, #12
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr

0800bfc0 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b08f      	sub	sp, #60	@ 0x3c
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d101      	bne.n	800bfd6 <HAL_HalfDuplex_EnableTransmitter+0x16>
 800bfd2:	2302      	movs	r3, #2
 800bfd4:	e042      	b.n	800c05c <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2201      	movs	r2, #1
 800bfda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2224      	movs	r2, #36	@ 0x24
 800bfe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfec:	6a3b      	ldr	r3, [r7, #32]
 800bfee:	e853 3f00 	ldrex	r3, [r3]
 800bff2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	f023 030c 	bic.w	r3, r3, #12
 800bffa:	637b      	str	r3, [r7, #52]	@ 0x34
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	461a      	mov	r2, r3
 800c002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c004:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c006:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c008:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c00a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c00c:	e841 2300 	strex	r3, r2, [r1]
 800c010:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1e6      	bne.n	800bfe6 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	e853 3f00 	ldrex	r3, [r3]
 800c024:	60bb      	str	r3, [r7, #8]
   return(result);
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	f043 0308 	orr.w	r3, r3, #8
 800c02c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	461a      	mov	r2, r3
 800c034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c036:	61bb      	str	r3, [r7, #24]
 800c038:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03a:	6979      	ldr	r1, [r7, #20]
 800c03c:	69ba      	ldr	r2, [r7, #24]
 800c03e:	e841 2300 	strex	r3, r2, [r1]
 800c042:	613b      	str	r3, [r7, #16]
   return(result);
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1e6      	bne.n	800c018 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2220      	movs	r2, #32
 800c04e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2200      	movs	r2, #0
 800c056:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	373c      	adds	r7, #60	@ 0x3c
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800c068:	b480      	push	{r7}
 800c06a:	b08f      	sub	sp, #60	@ 0x3c
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c076:	2b01      	cmp	r3, #1
 800c078:	d101      	bne.n	800c07e <HAL_HalfDuplex_EnableReceiver+0x16>
 800c07a:	2302      	movs	r3, #2
 800c07c:	e042      	b.n	800c104 <HAL_HalfDuplex_EnableReceiver+0x9c>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2201      	movs	r2, #1
 800c082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2224      	movs	r2, #36	@ 0x24
 800c08a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c094:	6a3b      	ldr	r3, [r7, #32]
 800c096:	e853 3f00 	ldrex	r3, [r3]
 800c09a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	f023 030c 	bic.w	r3, r3, #12
 800c0a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c0ae:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0b4:	e841 2300 	strex	r3, r2, [r1]
 800c0b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d1e6      	bne.n	800c08e <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	e853 3f00 	ldrex	r3, [r3]
 800c0cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	f043 0304 	orr.w	r3, r3, #4
 800c0d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0de:	61bb      	str	r3, [r7, #24]
 800c0e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e2:	6979      	ldr	r1, [r7, #20]
 800c0e4:	69ba      	ldr	r2, [r7, #24]
 800c0e6:	e841 2300 	strex	r3, r2, [r1]
 800c0ea:	613b      	str	r3, [r7, #16]
   return(result);
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d1e6      	bne.n	800c0c0 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2220      	movs	r2, #32
 800c0f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c102:	2300      	movs	r3, #0
}
 800c104:	4618      	mov	r0, r3
 800c106:	373c      	adds	r7, #60	@ 0x3c
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800c110:	b480      	push	{r7}
 800c112:	b085      	sub	sp, #20
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c11e:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c126:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	4313      	orrs	r3, r2
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3714      	adds	r7, #20
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr
	...

0800c13c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c13c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c140:	b092      	sub	sp, #72	@ 0x48
 800c142:	af00      	add	r7, sp, #0
 800c144:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c146:	2300      	movs	r3, #0
 800c148:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	689a      	ldr	r2, [r3, #8]
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	691b      	ldr	r3, [r3, #16]
 800c154:	431a      	orrs	r2, r3
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	695b      	ldr	r3, [r3, #20]
 800c15a:	431a      	orrs	r2, r3
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	69db      	ldr	r3, [r3, #28]
 800c160:	4313      	orrs	r3, r2
 800c162:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	4bbe      	ldr	r3, [pc, #760]	@ (800c464 <UART_SetConfig+0x328>)
 800c16c:	4013      	ands	r3, r2
 800c16e:	697a      	ldr	r2, [r7, #20]
 800c170:	6812      	ldr	r2, [r2, #0]
 800c172:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c174:	430b      	orrs	r3, r1
 800c176:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	68da      	ldr	r2, [r3, #12]
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	430a      	orrs	r2, r1
 800c18c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	699b      	ldr	r3, [r3, #24]
 800c192:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4ab3      	ldr	r2, [pc, #716]	@ (800c468 <UART_SetConfig+0x32c>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d004      	beq.n	800c1a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	6a1b      	ldr	r3, [r3, #32]
 800c1a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	689a      	ldr	r2, [r3, #8]
 800c1ae:	4baf      	ldr	r3, [pc, #700]	@ (800c46c <UART_SetConfig+0x330>)
 800c1b0:	4013      	ands	r3, r2
 800c1b2:	697a      	ldr	r2, [r7, #20]
 800c1b4:	6812      	ldr	r2, [r2, #0]
 800c1b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c1b8:	430b      	orrs	r3, r1
 800c1ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1c2:	f023 010f 	bic.w	r1, r3, #15
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	430a      	orrs	r2, r1
 800c1d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4aa6      	ldr	r2, [pc, #664]	@ (800c470 <UART_SetConfig+0x334>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d177      	bne.n	800c2cc <UART_SetConfig+0x190>
 800c1dc:	4ba5      	ldr	r3, [pc, #660]	@ (800c474 <UART_SetConfig+0x338>)
 800c1de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c1e4:	2b28      	cmp	r3, #40	@ 0x28
 800c1e6:	d86d      	bhi.n	800c2c4 <UART_SetConfig+0x188>
 800c1e8:	a201      	add	r2, pc, #4	@ (adr r2, 800c1f0 <UART_SetConfig+0xb4>)
 800c1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ee:	bf00      	nop
 800c1f0:	0800c295 	.word	0x0800c295
 800c1f4:	0800c2c5 	.word	0x0800c2c5
 800c1f8:	0800c2c5 	.word	0x0800c2c5
 800c1fc:	0800c2c5 	.word	0x0800c2c5
 800c200:	0800c2c5 	.word	0x0800c2c5
 800c204:	0800c2c5 	.word	0x0800c2c5
 800c208:	0800c2c5 	.word	0x0800c2c5
 800c20c:	0800c2c5 	.word	0x0800c2c5
 800c210:	0800c29d 	.word	0x0800c29d
 800c214:	0800c2c5 	.word	0x0800c2c5
 800c218:	0800c2c5 	.word	0x0800c2c5
 800c21c:	0800c2c5 	.word	0x0800c2c5
 800c220:	0800c2c5 	.word	0x0800c2c5
 800c224:	0800c2c5 	.word	0x0800c2c5
 800c228:	0800c2c5 	.word	0x0800c2c5
 800c22c:	0800c2c5 	.word	0x0800c2c5
 800c230:	0800c2a5 	.word	0x0800c2a5
 800c234:	0800c2c5 	.word	0x0800c2c5
 800c238:	0800c2c5 	.word	0x0800c2c5
 800c23c:	0800c2c5 	.word	0x0800c2c5
 800c240:	0800c2c5 	.word	0x0800c2c5
 800c244:	0800c2c5 	.word	0x0800c2c5
 800c248:	0800c2c5 	.word	0x0800c2c5
 800c24c:	0800c2c5 	.word	0x0800c2c5
 800c250:	0800c2ad 	.word	0x0800c2ad
 800c254:	0800c2c5 	.word	0x0800c2c5
 800c258:	0800c2c5 	.word	0x0800c2c5
 800c25c:	0800c2c5 	.word	0x0800c2c5
 800c260:	0800c2c5 	.word	0x0800c2c5
 800c264:	0800c2c5 	.word	0x0800c2c5
 800c268:	0800c2c5 	.word	0x0800c2c5
 800c26c:	0800c2c5 	.word	0x0800c2c5
 800c270:	0800c2b5 	.word	0x0800c2b5
 800c274:	0800c2c5 	.word	0x0800c2c5
 800c278:	0800c2c5 	.word	0x0800c2c5
 800c27c:	0800c2c5 	.word	0x0800c2c5
 800c280:	0800c2c5 	.word	0x0800c2c5
 800c284:	0800c2c5 	.word	0x0800c2c5
 800c288:	0800c2c5 	.word	0x0800c2c5
 800c28c:	0800c2c5 	.word	0x0800c2c5
 800c290:	0800c2bd 	.word	0x0800c2bd
 800c294:	2301      	movs	r3, #1
 800c296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c29a:	e222      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c29c:	2304      	movs	r3, #4
 800c29e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2a2:	e21e      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c2a4:	2308      	movs	r3, #8
 800c2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2aa:	e21a      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c2ac:	2310      	movs	r3, #16
 800c2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2b2:	e216      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c2b4:	2320      	movs	r3, #32
 800c2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ba:	e212      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c2bc:	2340      	movs	r3, #64	@ 0x40
 800c2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2c2:	e20e      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c2c4:	2380      	movs	r3, #128	@ 0x80
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ca:	e20a      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a69      	ldr	r2, [pc, #420]	@ (800c478 <UART_SetConfig+0x33c>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d130      	bne.n	800c338 <UART_SetConfig+0x1fc>
 800c2d6:	4b67      	ldr	r3, [pc, #412]	@ (800c474 <UART_SetConfig+0x338>)
 800c2d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2da:	f003 0307 	and.w	r3, r3, #7
 800c2de:	2b05      	cmp	r3, #5
 800c2e0:	d826      	bhi.n	800c330 <UART_SetConfig+0x1f4>
 800c2e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c2e8 <UART_SetConfig+0x1ac>)
 800c2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e8:	0800c301 	.word	0x0800c301
 800c2ec:	0800c309 	.word	0x0800c309
 800c2f0:	0800c311 	.word	0x0800c311
 800c2f4:	0800c319 	.word	0x0800c319
 800c2f8:	0800c321 	.word	0x0800c321
 800c2fc:	0800c329 	.word	0x0800c329
 800c300:	2300      	movs	r3, #0
 800c302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c306:	e1ec      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c308:	2304      	movs	r3, #4
 800c30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c30e:	e1e8      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c310:	2308      	movs	r3, #8
 800c312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c316:	e1e4      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c318:	2310      	movs	r3, #16
 800c31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c31e:	e1e0      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c320:	2320      	movs	r3, #32
 800c322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c326:	e1dc      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c328:	2340      	movs	r3, #64	@ 0x40
 800c32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c32e:	e1d8      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c330:	2380      	movs	r3, #128	@ 0x80
 800c332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c336:	e1d4      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a4f      	ldr	r2, [pc, #316]	@ (800c47c <UART_SetConfig+0x340>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d130      	bne.n	800c3a4 <UART_SetConfig+0x268>
 800c342:	4b4c      	ldr	r3, [pc, #304]	@ (800c474 <UART_SetConfig+0x338>)
 800c344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c346:	f003 0307 	and.w	r3, r3, #7
 800c34a:	2b05      	cmp	r3, #5
 800c34c:	d826      	bhi.n	800c39c <UART_SetConfig+0x260>
 800c34e:	a201      	add	r2, pc, #4	@ (adr r2, 800c354 <UART_SetConfig+0x218>)
 800c350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c354:	0800c36d 	.word	0x0800c36d
 800c358:	0800c375 	.word	0x0800c375
 800c35c:	0800c37d 	.word	0x0800c37d
 800c360:	0800c385 	.word	0x0800c385
 800c364:	0800c38d 	.word	0x0800c38d
 800c368:	0800c395 	.word	0x0800c395
 800c36c:	2300      	movs	r3, #0
 800c36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c372:	e1b6      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c374:	2304      	movs	r3, #4
 800c376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c37a:	e1b2      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c37c:	2308      	movs	r3, #8
 800c37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c382:	e1ae      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c384:	2310      	movs	r3, #16
 800c386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c38a:	e1aa      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c38c:	2320      	movs	r3, #32
 800c38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c392:	e1a6      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c394:	2340      	movs	r3, #64	@ 0x40
 800c396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c39a:	e1a2      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c39c:	2380      	movs	r3, #128	@ 0x80
 800c39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3a2:	e19e      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a35      	ldr	r2, [pc, #212]	@ (800c480 <UART_SetConfig+0x344>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d130      	bne.n	800c410 <UART_SetConfig+0x2d4>
 800c3ae:	4b31      	ldr	r3, [pc, #196]	@ (800c474 <UART_SetConfig+0x338>)
 800c3b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3b2:	f003 0307 	and.w	r3, r3, #7
 800c3b6:	2b05      	cmp	r3, #5
 800c3b8:	d826      	bhi.n	800c408 <UART_SetConfig+0x2cc>
 800c3ba:	a201      	add	r2, pc, #4	@ (adr r2, 800c3c0 <UART_SetConfig+0x284>)
 800c3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c0:	0800c3d9 	.word	0x0800c3d9
 800c3c4:	0800c3e1 	.word	0x0800c3e1
 800c3c8:	0800c3e9 	.word	0x0800c3e9
 800c3cc:	0800c3f1 	.word	0x0800c3f1
 800c3d0:	0800c3f9 	.word	0x0800c3f9
 800c3d4:	0800c401 	.word	0x0800c401
 800c3d8:	2300      	movs	r3, #0
 800c3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3de:	e180      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c3e0:	2304      	movs	r3, #4
 800c3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3e6:	e17c      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c3e8:	2308      	movs	r3, #8
 800c3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ee:	e178      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c3f0:	2310      	movs	r3, #16
 800c3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3f6:	e174      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c3f8:	2320      	movs	r3, #32
 800c3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3fe:	e170      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c400:	2340      	movs	r3, #64	@ 0x40
 800c402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c406:	e16c      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c408:	2380      	movs	r3, #128	@ 0x80
 800c40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c40e:	e168      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a1b      	ldr	r2, [pc, #108]	@ (800c484 <UART_SetConfig+0x348>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d142      	bne.n	800c4a0 <UART_SetConfig+0x364>
 800c41a:	4b16      	ldr	r3, [pc, #88]	@ (800c474 <UART_SetConfig+0x338>)
 800c41c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c41e:	f003 0307 	and.w	r3, r3, #7
 800c422:	2b05      	cmp	r3, #5
 800c424:	d838      	bhi.n	800c498 <UART_SetConfig+0x35c>
 800c426:	a201      	add	r2, pc, #4	@ (adr r2, 800c42c <UART_SetConfig+0x2f0>)
 800c428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c42c:	0800c445 	.word	0x0800c445
 800c430:	0800c44d 	.word	0x0800c44d
 800c434:	0800c455 	.word	0x0800c455
 800c438:	0800c45d 	.word	0x0800c45d
 800c43c:	0800c489 	.word	0x0800c489
 800c440:	0800c491 	.word	0x0800c491
 800c444:	2300      	movs	r3, #0
 800c446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c44a:	e14a      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c44c:	2304      	movs	r3, #4
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c452:	e146      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c454:	2308      	movs	r3, #8
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c45a:	e142      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c45c:	2310      	movs	r3, #16
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c462:	e13e      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c464:	cfff69f3 	.word	0xcfff69f3
 800c468:	58000c00 	.word	0x58000c00
 800c46c:	11fff4ff 	.word	0x11fff4ff
 800c470:	40011000 	.word	0x40011000
 800c474:	58024400 	.word	0x58024400
 800c478:	40004400 	.word	0x40004400
 800c47c:	40004800 	.word	0x40004800
 800c480:	40004c00 	.word	0x40004c00
 800c484:	40005000 	.word	0x40005000
 800c488:	2320      	movs	r3, #32
 800c48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c48e:	e128      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c490:	2340      	movs	r3, #64	@ 0x40
 800c492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c496:	e124      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c498:	2380      	movs	r3, #128	@ 0x80
 800c49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c49e:	e120      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4acb      	ldr	r2, [pc, #812]	@ (800c7d4 <UART_SetConfig+0x698>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d176      	bne.n	800c598 <UART_SetConfig+0x45c>
 800c4aa:	4bcb      	ldr	r3, [pc, #812]	@ (800c7d8 <UART_SetConfig+0x69c>)
 800c4ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c4b2:	2b28      	cmp	r3, #40	@ 0x28
 800c4b4:	d86c      	bhi.n	800c590 <UART_SetConfig+0x454>
 800c4b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c4bc <UART_SetConfig+0x380>)
 800c4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4bc:	0800c561 	.word	0x0800c561
 800c4c0:	0800c591 	.word	0x0800c591
 800c4c4:	0800c591 	.word	0x0800c591
 800c4c8:	0800c591 	.word	0x0800c591
 800c4cc:	0800c591 	.word	0x0800c591
 800c4d0:	0800c591 	.word	0x0800c591
 800c4d4:	0800c591 	.word	0x0800c591
 800c4d8:	0800c591 	.word	0x0800c591
 800c4dc:	0800c569 	.word	0x0800c569
 800c4e0:	0800c591 	.word	0x0800c591
 800c4e4:	0800c591 	.word	0x0800c591
 800c4e8:	0800c591 	.word	0x0800c591
 800c4ec:	0800c591 	.word	0x0800c591
 800c4f0:	0800c591 	.word	0x0800c591
 800c4f4:	0800c591 	.word	0x0800c591
 800c4f8:	0800c591 	.word	0x0800c591
 800c4fc:	0800c571 	.word	0x0800c571
 800c500:	0800c591 	.word	0x0800c591
 800c504:	0800c591 	.word	0x0800c591
 800c508:	0800c591 	.word	0x0800c591
 800c50c:	0800c591 	.word	0x0800c591
 800c510:	0800c591 	.word	0x0800c591
 800c514:	0800c591 	.word	0x0800c591
 800c518:	0800c591 	.word	0x0800c591
 800c51c:	0800c579 	.word	0x0800c579
 800c520:	0800c591 	.word	0x0800c591
 800c524:	0800c591 	.word	0x0800c591
 800c528:	0800c591 	.word	0x0800c591
 800c52c:	0800c591 	.word	0x0800c591
 800c530:	0800c591 	.word	0x0800c591
 800c534:	0800c591 	.word	0x0800c591
 800c538:	0800c591 	.word	0x0800c591
 800c53c:	0800c581 	.word	0x0800c581
 800c540:	0800c591 	.word	0x0800c591
 800c544:	0800c591 	.word	0x0800c591
 800c548:	0800c591 	.word	0x0800c591
 800c54c:	0800c591 	.word	0x0800c591
 800c550:	0800c591 	.word	0x0800c591
 800c554:	0800c591 	.word	0x0800c591
 800c558:	0800c591 	.word	0x0800c591
 800c55c:	0800c589 	.word	0x0800c589
 800c560:	2301      	movs	r3, #1
 800c562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c566:	e0bc      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c568:	2304      	movs	r3, #4
 800c56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c56e:	e0b8      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c570:	2308      	movs	r3, #8
 800c572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c576:	e0b4      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c578:	2310      	movs	r3, #16
 800c57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c57e:	e0b0      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c580:	2320      	movs	r3, #32
 800c582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c586:	e0ac      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c588:	2340      	movs	r3, #64	@ 0x40
 800c58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c58e:	e0a8      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c590:	2380      	movs	r3, #128	@ 0x80
 800c592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c596:	e0a4      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a8f      	ldr	r2, [pc, #572]	@ (800c7dc <UART_SetConfig+0x6a0>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d130      	bne.n	800c604 <UART_SetConfig+0x4c8>
 800c5a2:	4b8d      	ldr	r3, [pc, #564]	@ (800c7d8 <UART_SetConfig+0x69c>)
 800c5a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5a6:	f003 0307 	and.w	r3, r3, #7
 800c5aa:	2b05      	cmp	r3, #5
 800c5ac:	d826      	bhi.n	800c5fc <UART_SetConfig+0x4c0>
 800c5ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c5b4 <UART_SetConfig+0x478>)
 800c5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b4:	0800c5cd 	.word	0x0800c5cd
 800c5b8:	0800c5d5 	.word	0x0800c5d5
 800c5bc:	0800c5dd 	.word	0x0800c5dd
 800c5c0:	0800c5e5 	.word	0x0800c5e5
 800c5c4:	0800c5ed 	.word	0x0800c5ed
 800c5c8:	0800c5f5 	.word	0x0800c5f5
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5d2:	e086      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c5d4:	2304      	movs	r3, #4
 800c5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5da:	e082      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c5dc:	2308      	movs	r3, #8
 800c5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5e2:	e07e      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c5e4:	2310      	movs	r3, #16
 800c5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ea:	e07a      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c5ec:	2320      	movs	r3, #32
 800c5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5f2:	e076      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c5f4:	2340      	movs	r3, #64	@ 0x40
 800c5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5fa:	e072      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c5fc:	2380      	movs	r3, #128	@ 0x80
 800c5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c602:	e06e      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4a75      	ldr	r2, [pc, #468]	@ (800c7e0 <UART_SetConfig+0x6a4>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d130      	bne.n	800c670 <UART_SetConfig+0x534>
 800c60e:	4b72      	ldr	r3, [pc, #456]	@ (800c7d8 <UART_SetConfig+0x69c>)
 800c610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c612:	f003 0307 	and.w	r3, r3, #7
 800c616:	2b05      	cmp	r3, #5
 800c618:	d826      	bhi.n	800c668 <UART_SetConfig+0x52c>
 800c61a:	a201      	add	r2, pc, #4	@ (adr r2, 800c620 <UART_SetConfig+0x4e4>)
 800c61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c620:	0800c639 	.word	0x0800c639
 800c624:	0800c641 	.word	0x0800c641
 800c628:	0800c649 	.word	0x0800c649
 800c62c:	0800c651 	.word	0x0800c651
 800c630:	0800c659 	.word	0x0800c659
 800c634:	0800c661 	.word	0x0800c661
 800c638:	2300      	movs	r3, #0
 800c63a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c63e:	e050      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c640:	2304      	movs	r3, #4
 800c642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c646:	e04c      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c648:	2308      	movs	r3, #8
 800c64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c64e:	e048      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c650:	2310      	movs	r3, #16
 800c652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c656:	e044      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c658:	2320      	movs	r3, #32
 800c65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c65e:	e040      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c660:	2340      	movs	r3, #64	@ 0x40
 800c662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c666:	e03c      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c668:	2380      	movs	r3, #128	@ 0x80
 800c66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c66e:	e038      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4a5b      	ldr	r2, [pc, #364]	@ (800c7e4 <UART_SetConfig+0x6a8>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d130      	bne.n	800c6dc <UART_SetConfig+0x5a0>
 800c67a:	4b57      	ldr	r3, [pc, #348]	@ (800c7d8 <UART_SetConfig+0x69c>)
 800c67c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c67e:	f003 0307 	and.w	r3, r3, #7
 800c682:	2b05      	cmp	r3, #5
 800c684:	d826      	bhi.n	800c6d4 <UART_SetConfig+0x598>
 800c686:	a201      	add	r2, pc, #4	@ (adr r2, 800c68c <UART_SetConfig+0x550>)
 800c688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c68c:	0800c6a5 	.word	0x0800c6a5
 800c690:	0800c6ad 	.word	0x0800c6ad
 800c694:	0800c6b5 	.word	0x0800c6b5
 800c698:	0800c6bd 	.word	0x0800c6bd
 800c69c:	0800c6c5 	.word	0x0800c6c5
 800c6a0:	0800c6cd 	.word	0x0800c6cd
 800c6a4:	2302      	movs	r3, #2
 800c6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6aa:	e01a      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c6ac:	2304      	movs	r3, #4
 800c6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6b2:	e016      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c6b4:	2308      	movs	r3, #8
 800c6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ba:	e012      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c6bc:	2310      	movs	r3, #16
 800c6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6c2:	e00e      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c6c4:	2320      	movs	r3, #32
 800c6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ca:	e00a      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c6cc:	2340      	movs	r3, #64	@ 0x40
 800c6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6d2:	e006      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c6d4:	2380      	movs	r3, #128	@ 0x80
 800c6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6da:	e002      	b.n	800c6e2 <UART_SetConfig+0x5a6>
 800c6dc:	2380      	movs	r3, #128	@ 0x80
 800c6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4a3f      	ldr	r2, [pc, #252]	@ (800c7e4 <UART_SetConfig+0x6a8>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	f040 80f8 	bne.w	800c8de <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c6ee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c6f2:	2b20      	cmp	r3, #32
 800c6f4:	dc46      	bgt.n	800c784 <UART_SetConfig+0x648>
 800c6f6:	2b02      	cmp	r3, #2
 800c6f8:	f2c0 8082 	blt.w	800c800 <UART_SetConfig+0x6c4>
 800c6fc:	3b02      	subs	r3, #2
 800c6fe:	2b1e      	cmp	r3, #30
 800c700:	d87e      	bhi.n	800c800 <UART_SetConfig+0x6c4>
 800c702:	a201      	add	r2, pc, #4	@ (adr r2, 800c708 <UART_SetConfig+0x5cc>)
 800c704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c708:	0800c78b 	.word	0x0800c78b
 800c70c:	0800c801 	.word	0x0800c801
 800c710:	0800c793 	.word	0x0800c793
 800c714:	0800c801 	.word	0x0800c801
 800c718:	0800c801 	.word	0x0800c801
 800c71c:	0800c801 	.word	0x0800c801
 800c720:	0800c7a3 	.word	0x0800c7a3
 800c724:	0800c801 	.word	0x0800c801
 800c728:	0800c801 	.word	0x0800c801
 800c72c:	0800c801 	.word	0x0800c801
 800c730:	0800c801 	.word	0x0800c801
 800c734:	0800c801 	.word	0x0800c801
 800c738:	0800c801 	.word	0x0800c801
 800c73c:	0800c801 	.word	0x0800c801
 800c740:	0800c7b3 	.word	0x0800c7b3
 800c744:	0800c801 	.word	0x0800c801
 800c748:	0800c801 	.word	0x0800c801
 800c74c:	0800c801 	.word	0x0800c801
 800c750:	0800c801 	.word	0x0800c801
 800c754:	0800c801 	.word	0x0800c801
 800c758:	0800c801 	.word	0x0800c801
 800c75c:	0800c801 	.word	0x0800c801
 800c760:	0800c801 	.word	0x0800c801
 800c764:	0800c801 	.word	0x0800c801
 800c768:	0800c801 	.word	0x0800c801
 800c76c:	0800c801 	.word	0x0800c801
 800c770:	0800c801 	.word	0x0800c801
 800c774:	0800c801 	.word	0x0800c801
 800c778:	0800c801 	.word	0x0800c801
 800c77c:	0800c801 	.word	0x0800c801
 800c780:	0800c7f3 	.word	0x0800c7f3
 800c784:	2b40      	cmp	r3, #64	@ 0x40
 800c786:	d037      	beq.n	800c7f8 <UART_SetConfig+0x6bc>
 800c788:	e03a      	b.n	800c800 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c78a:	f7fb fc05 	bl	8007f98 <HAL_RCCEx_GetD3PCLK1Freq>
 800c78e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c790:	e03c      	b.n	800c80c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c796:	4618      	mov	r0, r3
 800c798:	f7fb fc14 	bl	8007fc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c79c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7a0:	e034      	b.n	800c80c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7a2:	f107 0318 	add.w	r3, r7, #24
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7fb fd60 	bl	800826c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7b0:	e02c      	b.n	800c80c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7b2:	4b09      	ldr	r3, [pc, #36]	@ (800c7d8 <UART_SetConfig+0x69c>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f003 0320 	and.w	r3, r3, #32
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d016      	beq.n	800c7ec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c7be:	4b06      	ldr	r3, [pc, #24]	@ (800c7d8 <UART_SetConfig+0x69c>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	08db      	lsrs	r3, r3, #3
 800c7c4:	f003 0303 	and.w	r3, r3, #3
 800c7c8:	4a07      	ldr	r2, [pc, #28]	@ (800c7e8 <UART_SetConfig+0x6ac>)
 800c7ca:	fa22 f303 	lsr.w	r3, r2, r3
 800c7ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c7d0:	e01c      	b.n	800c80c <UART_SetConfig+0x6d0>
 800c7d2:	bf00      	nop
 800c7d4:	40011400 	.word	0x40011400
 800c7d8:	58024400 	.word	0x58024400
 800c7dc:	40007800 	.word	0x40007800
 800c7e0:	40007c00 	.word	0x40007c00
 800c7e4:	58000c00 	.word	0x58000c00
 800c7e8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c7ec:	4b9d      	ldr	r3, [pc, #628]	@ (800ca64 <UART_SetConfig+0x928>)
 800c7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7f0:	e00c      	b.n	800c80c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c7f2:	4b9d      	ldr	r3, [pc, #628]	@ (800ca68 <UART_SetConfig+0x92c>)
 800c7f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7f6:	e009      	b.n	800c80c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c7f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c7fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7fe:	e005      	b.n	800c80c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c800:	2300      	movs	r3, #0
 800c802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c804:	2301      	movs	r3, #1
 800c806:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c80a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c80c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c80e:	2b00      	cmp	r3, #0
 800c810:	f000 81de 	beq.w	800cbd0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c818:	4a94      	ldr	r2, [pc, #592]	@ (800ca6c <UART_SetConfig+0x930>)
 800c81a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c81e:	461a      	mov	r2, r3
 800c820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c822:	fbb3 f3f2 	udiv	r3, r3, r2
 800c826:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	4613      	mov	r3, r2
 800c82e:	005b      	lsls	r3, r3, #1
 800c830:	4413      	add	r3, r2
 800c832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c834:	429a      	cmp	r2, r3
 800c836:	d305      	bcc.n	800c844 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c83e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c840:	429a      	cmp	r2, r3
 800c842:	d903      	bls.n	800c84c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c844:	2301      	movs	r3, #1
 800c846:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c84a:	e1c1      	b.n	800cbd0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c84c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c84e:	2200      	movs	r2, #0
 800c850:	60bb      	str	r3, [r7, #8]
 800c852:	60fa      	str	r2, [r7, #12]
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c858:	4a84      	ldr	r2, [pc, #528]	@ (800ca6c <UART_SetConfig+0x930>)
 800c85a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c85e:	b29b      	uxth	r3, r3
 800c860:	2200      	movs	r2, #0
 800c862:	603b      	str	r3, [r7, #0]
 800c864:	607a      	str	r2, [r7, #4]
 800c866:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c86a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c86e:	f7f3 fd8f 	bl	8000390 <__aeabi_uldivmod>
 800c872:	4602      	mov	r2, r0
 800c874:	460b      	mov	r3, r1
 800c876:	4610      	mov	r0, r2
 800c878:	4619      	mov	r1, r3
 800c87a:	f04f 0200 	mov.w	r2, #0
 800c87e:	f04f 0300 	mov.w	r3, #0
 800c882:	020b      	lsls	r3, r1, #8
 800c884:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c888:	0202      	lsls	r2, r0, #8
 800c88a:	6979      	ldr	r1, [r7, #20]
 800c88c:	6849      	ldr	r1, [r1, #4]
 800c88e:	0849      	lsrs	r1, r1, #1
 800c890:	2000      	movs	r0, #0
 800c892:	460c      	mov	r4, r1
 800c894:	4605      	mov	r5, r0
 800c896:	eb12 0804 	adds.w	r8, r2, r4
 800c89a:	eb43 0905 	adc.w	r9, r3, r5
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	469a      	mov	sl, r3
 800c8a6:	4693      	mov	fp, r2
 800c8a8:	4652      	mov	r2, sl
 800c8aa:	465b      	mov	r3, fp
 800c8ac:	4640      	mov	r0, r8
 800c8ae:	4649      	mov	r1, r9
 800c8b0:	f7f3 fd6e 	bl	8000390 <__aeabi_uldivmod>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c8c2:	d308      	bcc.n	800c8d6 <UART_SetConfig+0x79a>
 800c8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c8ca:	d204      	bcs.n	800c8d6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8d2:	60da      	str	r2, [r3, #12]
 800c8d4:	e17c      	b.n	800cbd0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c8dc:	e178      	b.n	800cbd0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	69db      	ldr	r3, [r3, #28]
 800c8e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c8e6:	f040 80c5 	bne.w	800ca74 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c8ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c8ee:	2b20      	cmp	r3, #32
 800c8f0:	dc48      	bgt.n	800c984 <UART_SetConfig+0x848>
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	db7b      	blt.n	800c9ee <UART_SetConfig+0x8b2>
 800c8f6:	2b20      	cmp	r3, #32
 800c8f8:	d879      	bhi.n	800c9ee <UART_SetConfig+0x8b2>
 800c8fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c900 <UART_SetConfig+0x7c4>)
 800c8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c900:	0800c98b 	.word	0x0800c98b
 800c904:	0800c993 	.word	0x0800c993
 800c908:	0800c9ef 	.word	0x0800c9ef
 800c90c:	0800c9ef 	.word	0x0800c9ef
 800c910:	0800c99b 	.word	0x0800c99b
 800c914:	0800c9ef 	.word	0x0800c9ef
 800c918:	0800c9ef 	.word	0x0800c9ef
 800c91c:	0800c9ef 	.word	0x0800c9ef
 800c920:	0800c9ab 	.word	0x0800c9ab
 800c924:	0800c9ef 	.word	0x0800c9ef
 800c928:	0800c9ef 	.word	0x0800c9ef
 800c92c:	0800c9ef 	.word	0x0800c9ef
 800c930:	0800c9ef 	.word	0x0800c9ef
 800c934:	0800c9ef 	.word	0x0800c9ef
 800c938:	0800c9ef 	.word	0x0800c9ef
 800c93c:	0800c9ef 	.word	0x0800c9ef
 800c940:	0800c9bb 	.word	0x0800c9bb
 800c944:	0800c9ef 	.word	0x0800c9ef
 800c948:	0800c9ef 	.word	0x0800c9ef
 800c94c:	0800c9ef 	.word	0x0800c9ef
 800c950:	0800c9ef 	.word	0x0800c9ef
 800c954:	0800c9ef 	.word	0x0800c9ef
 800c958:	0800c9ef 	.word	0x0800c9ef
 800c95c:	0800c9ef 	.word	0x0800c9ef
 800c960:	0800c9ef 	.word	0x0800c9ef
 800c964:	0800c9ef 	.word	0x0800c9ef
 800c968:	0800c9ef 	.word	0x0800c9ef
 800c96c:	0800c9ef 	.word	0x0800c9ef
 800c970:	0800c9ef 	.word	0x0800c9ef
 800c974:	0800c9ef 	.word	0x0800c9ef
 800c978:	0800c9ef 	.word	0x0800c9ef
 800c97c:	0800c9ef 	.word	0x0800c9ef
 800c980:	0800c9e1 	.word	0x0800c9e1
 800c984:	2b40      	cmp	r3, #64	@ 0x40
 800c986:	d02e      	beq.n	800c9e6 <UART_SetConfig+0x8aa>
 800c988:	e031      	b.n	800c9ee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c98a:	f7f9 fb0d 	bl	8005fa8 <HAL_RCC_GetPCLK1Freq>
 800c98e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c990:	e033      	b.n	800c9fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c992:	f7f9 fb1f 	bl	8005fd4 <HAL_RCC_GetPCLK2Freq>
 800c996:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c998:	e02f      	b.n	800c9fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c99a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7fb fb10 	bl	8007fc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9a8:	e027      	b.n	800c9fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9aa:	f107 0318 	add.w	r3, r7, #24
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7fb fc5c 	bl	800826c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9b8:	e01f      	b.n	800c9fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9ba:	4b2d      	ldr	r3, [pc, #180]	@ (800ca70 <UART_SetConfig+0x934>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f003 0320 	and.w	r3, r3, #32
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d009      	beq.n	800c9da <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c9c6:	4b2a      	ldr	r3, [pc, #168]	@ (800ca70 <UART_SetConfig+0x934>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	08db      	lsrs	r3, r3, #3
 800c9cc:	f003 0303 	and.w	r3, r3, #3
 800c9d0:	4a24      	ldr	r2, [pc, #144]	@ (800ca64 <UART_SetConfig+0x928>)
 800c9d2:	fa22 f303 	lsr.w	r3, r2, r3
 800c9d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c9d8:	e00f      	b.n	800c9fa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c9da:	4b22      	ldr	r3, [pc, #136]	@ (800ca64 <UART_SetConfig+0x928>)
 800c9dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9de:	e00c      	b.n	800c9fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9e0:	4b21      	ldr	r3, [pc, #132]	@ (800ca68 <UART_SetConfig+0x92c>)
 800c9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9e4:	e009      	b.n	800c9fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9ec:	e005      	b.n	800c9fa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c9f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c9fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	f000 80e7 	beq.w	800cbd0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca06:	4a19      	ldr	r2, [pc, #100]	@ (800ca6c <UART_SetConfig+0x930>)
 800ca08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca10:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca14:	005a      	lsls	r2, r3, #1
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	085b      	lsrs	r3, r3, #1
 800ca1c:	441a      	add	r2, r3
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca26:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca2a:	2b0f      	cmp	r3, #15
 800ca2c:	d916      	bls.n	800ca5c <UART_SetConfig+0x920>
 800ca2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca34:	d212      	bcs.n	800ca5c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ca36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca38:	b29b      	uxth	r3, r3
 800ca3a:	f023 030f 	bic.w	r3, r3, #15
 800ca3e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca42:	085b      	lsrs	r3, r3, #1
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	f003 0307 	and.w	r3, r3, #7
 800ca4a:	b29a      	uxth	r2, r3
 800ca4c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ca58:	60da      	str	r2, [r3, #12]
 800ca5a:	e0b9      	b.n	800cbd0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ca62:	e0b5      	b.n	800cbd0 <UART_SetConfig+0xa94>
 800ca64:	03d09000 	.word	0x03d09000
 800ca68:	003d0900 	.word	0x003d0900
 800ca6c:	08017e28 	.word	0x08017e28
 800ca70:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ca74:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ca78:	2b20      	cmp	r3, #32
 800ca7a:	dc49      	bgt.n	800cb10 <UART_SetConfig+0x9d4>
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	db7c      	blt.n	800cb7a <UART_SetConfig+0xa3e>
 800ca80:	2b20      	cmp	r3, #32
 800ca82:	d87a      	bhi.n	800cb7a <UART_SetConfig+0xa3e>
 800ca84:	a201      	add	r2, pc, #4	@ (adr r2, 800ca8c <UART_SetConfig+0x950>)
 800ca86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca8a:	bf00      	nop
 800ca8c:	0800cb17 	.word	0x0800cb17
 800ca90:	0800cb1f 	.word	0x0800cb1f
 800ca94:	0800cb7b 	.word	0x0800cb7b
 800ca98:	0800cb7b 	.word	0x0800cb7b
 800ca9c:	0800cb27 	.word	0x0800cb27
 800caa0:	0800cb7b 	.word	0x0800cb7b
 800caa4:	0800cb7b 	.word	0x0800cb7b
 800caa8:	0800cb7b 	.word	0x0800cb7b
 800caac:	0800cb37 	.word	0x0800cb37
 800cab0:	0800cb7b 	.word	0x0800cb7b
 800cab4:	0800cb7b 	.word	0x0800cb7b
 800cab8:	0800cb7b 	.word	0x0800cb7b
 800cabc:	0800cb7b 	.word	0x0800cb7b
 800cac0:	0800cb7b 	.word	0x0800cb7b
 800cac4:	0800cb7b 	.word	0x0800cb7b
 800cac8:	0800cb7b 	.word	0x0800cb7b
 800cacc:	0800cb47 	.word	0x0800cb47
 800cad0:	0800cb7b 	.word	0x0800cb7b
 800cad4:	0800cb7b 	.word	0x0800cb7b
 800cad8:	0800cb7b 	.word	0x0800cb7b
 800cadc:	0800cb7b 	.word	0x0800cb7b
 800cae0:	0800cb7b 	.word	0x0800cb7b
 800cae4:	0800cb7b 	.word	0x0800cb7b
 800cae8:	0800cb7b 	.word	0x0800cb7b
 800caec:	0800cb7b 	.word	0x0800cb7b
 800caf0:	0800cb7b 	.word	0x0800cb7b
 800caf4:	0800cb7b 	.word	0x0800cb7b
 800caf8:	0800cb7b 	.word	0x0800cb7b
 800cafc:	0800cb7b 	.word	0x0800cb7b
 800cb00:	0800cb7b 	.word	0x0800cb7b
 800cb04:	0800cb7b 	.word	0x0800cb7b
 800cb08:	0800cb7b 	.word	0x0800cb7b
 800cb0c:	0800cb6d 	.word	0x0800cb6d
 800cb10:	2b40      	cmp	r3, #64	@ 0x40
 800cb12:	d02e      	beq.n	800cb72 <UART_SetConfig+0xa36>
 800cb14:	e031      	b.n	800cb7a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb16:	f7f9 fa47 	bl	8005fa8 <HAL_RCC_GetPCLK1Freq>
 800cb1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cb1c:	e033      	b.n	800cb86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb1e:	f7f9 fa59 	bl	8005fd4 <HAL_RCC_GetPCLK2Freq>
 800cb22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cb24:	e02f      	b.n	800cb86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7fb fa4a 	bl	8007fc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb34:	e027      	b.n	800cb86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb36:	f107 0318 	add.w	r3, r7, #24
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7fb fb96 	bl	800826c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb44:	e01f      	b.n	800cb86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb46:	4b2d      	ldr	r3, [pc, #180]	@ (800cbfc <UART_SetConfig+0xac0>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f003 0320 	and.w	r3, r3, #32
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d009      	beq.n	800cb66 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb52:	4b2a      	ldr	r3, [pc, #168]	@ (800cbfc <UART_SetConfig+0xac0>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	08db      	lsrs	r3, r3, #3
 800cb58:	f003 0303 	and.w	r3, r3, #3
 800cb5c:	4a28      	ldr	r2, [pc, #160]	@ (800cc00 <UART_SetConfig+0xac4>)
 800cb5e:	fa22 f303 	lsr.w	r3, r2, r3
 800cb62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb64:	e00f      	b.n	800cb86 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800cb66:	4b26      	ldr	r3, [pc, #152]	@ (800cc00 <UART_SetConfig+0xac4>)
 800cb68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb6a:	e00c      	b.n	800cb86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb6c:	4b25      	ldr	r3, [pc, #148]	@ (800cc04 <UART_SetConfig+0xac8>)
 800cb6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb70:	e009      	b.n	800cb86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb78:	e005      	b.n	800cb86 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cb84:	bf00      	nop
    }

    if (pclk != 0U)
 800cb86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d021      	beq.n	800cbd0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb90:	4a1d      	ldr	r2, [pc, #116]	@ (800cc08 <UART_SetConfig+0xacc>)
 800cb92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb96:	461a      	mov	r2, r3
 800cb98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb9a:	fbb3 f2f2 	udiv	r2, r3, r2
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	085b      	lsrs	r3, r3, #1
 800cba4:	441a      	add	r2, r3
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbb2:	2b0f      	cmp	r3, #15
 800cbb4:	d909      	bls.n	800cbca <UART_SetConfig+0xa8e>
 800cbb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbbc:	d205      	bcs.n	800cbca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cbbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbc0:	b29a      	uxth	r2, r3
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	60da      	str	r2, [r3, #12]
 800cbc8:	e002      	b.n	800cbd0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	2201      	movs	r2, #1
 800cbdc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cbec:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3748      	adds	r7, #72	@ 0x48
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cbfa:	bf00      	nop
 800cbfc:	58024400 	.word	0x58024400
 800cc00:	03d09000 	.word	0x03d09000
 800cc04:	003d0900 	.word	0x003d0900
 800cc08:	08017e28 	.word	0x08017e28

0800cc0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc18:	f003 0301 	and.w	r3, r3, #1
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d00a      	beq.n	800cc36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	430a      	orrs	r2, r1
 800cc34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc3a:	f003 0302 	and.w	r3, r3, #2
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d00a      	beq.n	800cc58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	430a      	orrs	r2, r1
 800cc56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc5c:	f003 0304 	and.w	r3, r3, #4
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d00a      	beq.n	800cc7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	430a      	orrs	r2, r1
 800cc78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc7e:	f003 0308 	and.w	r3, r3, #8
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d00a      	beq.n	800cc9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	430a      	orrs	r2, r1
 800cc9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cca0:	f003 0310 	and.w	r3, r3, #16
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d00a      	beq.n	800ccbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	689b      	ldr	r3, [r3, #8]
 800ccae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	430a      	orrs	r2, r1
 800ccbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccc2:	f003 0320 	and.w	r3, r3, #32
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d00a      	beq.n	800cce0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	689b      	ldr	r3, [r3, #8]
 800ccd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	430a      	orrs	r2, r1
 800ccde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d01a      	beq.n	800cd22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	430a      	orrs	r2, r1
 800cd00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cd0a:	d10a      	bne.n	800cd22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	430a      	orrs	r2, r1
 800cd20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00a      	beq.n	800cd44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	430a      	orrs	r2, r1
 800cd42:	605a      	str	r2, [r3, #4]
  }
}
 800cd44:	bf00      	nop
 800cd46:	370c      	adds	r7, #12
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr

0800cd50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b098      	sub	sp, #96	@ 0x60
 800cd54:	af02      	add	r7, sp, #8
 800cd56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cd60:	f7f7 f836 	bl	8003dd0 <HAL_GetTick>
 800cd64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f003 0308 	and.w	r3, r3, #8
 800cd70:	2b08      	cmp	r3, #8
 800cd72:	d12f      	bne.n	800cdd4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cd78:	9300      	str	r3, [sp, #0]
 800cd7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f000 f88e 	bl	800cea4 <UART_WaitOnFlagUntilTimeout>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d022      	beq.n	800cdd4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd96:	e853 3f00 	ldrex	r3, [r3]
 800cd9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cd9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cda2:	653b      	str	r3, [r7, #80]	@ 0x50
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	461a      	mov	r2, r3
 800cdaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdac:	647b      	str	r3, [r7, #68]	@ 0x44
 800cdae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cdb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cdb4:	e841 2300 	strex	r3, r2, [r1]
 800cdb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cdba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d1e6      	bne.n	800cd8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2220      	movs	r2, #32
 800cdc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cdd0:	2303      	movs	r3, #3
 800cdd2:	e063      	b.n	800ce9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f003 0304 	and.w	r3, r3, #4
 800cdde:	2b04      	cmp	r3, #4
 800cde0:	d149      	bne.n	800ce76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cde2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cde6:	9300      	str	r3, [sp, #0]
 800cde8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdea:	2200      	movs	r2, #0
 800cdec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f000 f857 	bl	800cea4 <UART_WaitOnFlagUntilTimeout>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d03c      	beq.n	800ce76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce04:	e853 3f00 	ldrex	r3, [r3]
 800ce08:	623b      	str	r3, [r7, #32]
   return(result);
 800ce0a:	6a3b      	ldr	r3, [r7, #32]
 800ce0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	461a      	mov	r2, r3
 800ce18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce1a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce22:	e841 2300 	strex	r3, r2, [r1]
 800ce26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d1e6      	bne.n	800cdfc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	3308      	adds	r3, #8
 800ce34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	e853 3f00 	ldrex	r3, [r3]
 800ce3c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f023 0301 	bic.w	r3, r3, #1
 800ce44:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	3308      	adds	r3, #8
 800ce4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce4e:	61fa      	str	r2, [r7, #28]
 800ce50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce52:	69b9      	ldr	r1, [r7, #24]
 800ce54:	69fa      	ldr	r2, [r7, #28]
 800ce56:	e841 2300 	strex	r3, r2, [r1]
 800ce5a:	617b      	str	r3, [r7, #20]
   return(result);
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d1e5      	bne.n	800ce2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2220      	movs	r2, #32
 800ce66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce72:	2303      	movs	r3, #3
 800ce74:	e012      	b.n	800ce9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2220      	movs	r2, #32
 800ce7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2220      	movs	r2, #32
 800ce82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce9a:	2300      	movs	r3, #0
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3758      	adds	r7, #88	@ 0x58
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	603b      	str	r3, [r7, #0]
 800ceb0:	4613      	mov	r3, r2
 800ceb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ceb4:	e049      	b.n	800cf4a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ceb6:	69bb      	ldr	r3, [r7, #24]
 800ceb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cebc:	d045      	beq.n	800cf4a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cebe:	f7f6 ff87 	bl	8003dd0 <HAL_GetTick>
 800cec2:	4602      	mov	r2, r0
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	1ad3      	subs	r3, r2, r3
 800cec8:	69ba      	ldr	r2, [r7, #24]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d302      	bcc.n	800ced4 <UART_WaitOnFlagUntilTimeout+0x30>
 800cece:	69bb      	ldr	r3, [r7, #24]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d101      	bne.n	800ced8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ced4:	2303      	movs	r3, #3
 800ced6:	e048      	b.n	800cf6a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f003 0304 	and.w	r3, r3, #4
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d031      	beq.n	800cf4a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	69db      	ldr	r3, [r3, #28]
 800ceec:	f003 0308 	and.w	r3, r3, #8
 800cef0:	2b08      	cmp	r3, #8
 800cef2:	d110      	bne.n	800cf16 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	2208      	movs	r2, #8
 800cefa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800cefc:	68f8      	ldr	r0, [r7, #12]
 800cefe:	f000 f95b 	bl	800d1b8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2208      	movs	r2, #8
 800cf06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800cf12:	2301      	movs	r3, #1
 800cf14:	e029      	b.n	800cf6a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	69db      	ldr	r3, [r3, #28]
 800cf1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cf20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf24:	d111      	bne.n	800cf4a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cf2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf30:	68f8      	ldr	r0, [r7, #12]
 800cf32:	f000 f941 	bl	800d1b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2220      	movs	r2, #32
 800cf3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2200      	movs	r2, #0
 800cf42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cf46:	2303      	movs	r3, #3
 800cf48:	e00f      	b.n	800cf6a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	69da      	ldr	r2, [r3, #28]
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	4013      	ands	r3, r2
 800cf54:	68ba      	ldr	r2, [r7, #8]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	bf0c      	ite	eq
 800cf5a:	2301      	moveq	r3, #1
 800cf5c:	2300      	movne	r3, #0
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	461a      	mov	r2, r3
 800cf62:	79fb      	ldrb	r3, [r7, #7]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d0a6      	beq.n	800ceb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cf68:	2300      	movs	r3, #0
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3710      	adds	r7, #16
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
	...

0800cf74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b0a3      	sub	sp, #140	@ 0x8c
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	4613      	mov	r3, r2
 800cf80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	68ba      	ldr	r2, [r7, #8]
 800cf86:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	88fa      	ldrh	r2, [r7, #6]
 800cf8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	88fa      	ldrh	r2, [r7, #6]
 800cf94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	689b      	ldr	r3, [r3, #8]
 800cfa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cfa6:	d10e      	bne.n	800cfc6 <UART_Start_Receive_IT+0x52>
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	691b      	ldr	r3, [r3, #16]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d105      	bne.n	800cfbc <UART_Start_Receive_IT+0x48>
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800cfb6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cfba:	e02d      	b.n	800d018 <UART_Start_Receive_IT+0xa4>
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	22ff      	movs	r2, #255	@ 0xff
 800cfc0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cfc4:	e028      	b.n	800d018 <UART_Start_Receive_IT+0xa4>
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d10d      	bne.n	800cfea <UART_Start_Receive_IT+0x76>
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	691b      	ldr	r3, [r3, #16]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d104      	bne.n	800cfe0 <UART_Start_Receive_IT+0x6c>
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	22ff      	movs	r2, #255	@ 0xff
 800cfda:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cfde:	e01b      	b.n	800d018 <UART_Start_Receive_IT+0xa4>
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	227f      	movs	r2, #127	@ 0x7f
 800cfe4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cfe8:	e016      	b.n	800d018 <UART_Start_Receive_IT+0xa4>
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	689b      	ldr	r3, [r3, #8]
 800cfee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cff2:	d10d      	bne.n	800d010 <UART_Start_Receive_IT+0x9c>
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	691b      	ldr	r3, [r3, #16]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d104      	bne.n	800d006 <UART_Start_Receive_IT+0x92>
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	227f      	movs	r2, #127	@ 0x7f
 800d000:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d004:	e008      	b.n	800d018 <UART_Start_Receive_IT+0xa4>
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	223f      	movs	r2, #63	@ 0x3f
 800d00a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d00e:	e003      	b.n	800d018 <UART_Start_Receive_IT+0xa4>
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2200      	movs	r2, #0
 800d014:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2200      	movs	r2, #0
 800d01c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2222      	movs	r2, #34	@ 0x22
 800d024:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	3308      	adds	r3, #8
 800d02e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d030:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d032:	e853 3f00 	ldrex	r3, [r3]
 800d036:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d038:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d03a:	f043 0301 	orr.w	r3, r3, #1
 800d03e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	3308      	adds	r3, #8
 800d048:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d04c:	673a      	str	r2, [r7, #112]	@ 0x70
 800d04e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d050:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d052:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d054:	e841 2300 	strex	r3, r2, [r1]
 800d058:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800d05a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d1e3      	bne.n	800d028 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d064:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d068:	d14f      	bne.n	800d10a <UART_Start_Receive_IT+0x196>
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d070:	88fa      	ldrh	r2, [r7, #6]
 800d072:	429a      	cmp	r2, r3
 800d074:	d349      	bcc.n	800d10a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	689b      	ldr	r3, [r3, #8]
 800d07a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d07e:	d107      	bne.n	800d090 <UART_Start_Receive_IT+0x11c>
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	691b      	ldr	r3, [r3, #16]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d103      	bne.n	800d090 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	4a47      	ldr	r2, [pc, #284]	@ (800d1a8 <UART_Start_Receive_IT+0x234>)
 800d08c:	675a      	str	r2, [r3, #116]	@ 0x74
 800d08e:	e002      	b.n	800d096 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	4a46      	ldr	r2, [pc, #280]	@ (800d1ac <UART_Start_Receive_IT+0x238>)
 800d094:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	691b      	ldr	r3, [r3, #16]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d01a      	beq.n	800d0d4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0a6:	e853 3f00 	ldrex	r3, [r3]
 800d0aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d0ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d0b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d0c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d0c2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0c4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d0c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d0c8:	e841 2300 	strex	r3, r2, [r1]
 800d0cc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800d0ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d1e4      	bne.n	800d09e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	3308      	adds	r3, #8
 800d0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0de:	e853 3f00 	ldrex	r3, [r3]
 800d0e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d0ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	3308      	adds	r3, #8
 800d0f2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d0f4:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d0f6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d0fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d0fc:	e841 2300 	strex	r3, r2, [r1]
 800d100:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d104:	2b00      	cmp	r3, #0
 800d106:	d1e5      	bne.n	800d0d4 <UART_Start_Receive_IT+0x160>
 800d108:	e046      	b.n	800d198 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	689b      	ldr	r3, [r3, #8]
 800d10e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d112:	d107      	bne.n	800d124 <UART_Start_Receive_IT+0x1b0>
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	691b      	ldr	r3, [r3, #16]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d103      	bne.n	800d124 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	4a24      	ldr	r2, [pc, #144]	@ (800d1b0 <UART_Start_Receive_IT+0x23c>)
 800d120:	675a      	str	r2, [r3, #116]	@ 0x74
 800d122:	e002      	b.n	800d12a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	4a23      	ldr	r2, [pc, #140]	@ (800d1b4 <UART_Start_Receive_IT+0x240>)
 800d128:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	691b      	ldr	r3, [r3, #16]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d019      	beq.n	800d166 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d13a:	e853 3f00 	ldrex	r3, [r3]
 800d13e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d142:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800d146:	677b      	str	r3, [r7, #116]	@ 0x74
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	461a      	mov	r2, r3
 800d14e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d150:	637b      	str	r3, [r7, #52]	@ 0x34
 800d152:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d154:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d156:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d158:	e841 2300 	strex	r3, r2, [r1]
 800d15c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d160:	2b00      	cmp	r3, #0
 800d162:	d1e6      	bne.n	800d132 <UART_Start_Receive_IT+0x1be>
 800d164:	e018      	b.n	800d198 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	e853 3f00 	ldrex	r3, [r3]
 800d172:	613b      	str	r3, [r7, #16]
   return(result);
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	f043 0320 	orr.w	r3, r3, #32
 800d17a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	461a      	mov	r2, r3
 800d182:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d184:	623b      	str	r3, [r7, #32]
 800d186:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d188:	69f9      	ldr	r1, [r7, #28]
 800d18a:	6a3a      	ldr	r2, [r7, #32]
 800d18c:	e841 2300 	strex	r3, r2, [r1]
 800d190:	61bb      	str	r3, [r7, #24]
   return(result);
 800d192:	69bb      	ldr	r3, [r7, #24]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d1e6      	bne.n	800d166 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d198:	2300      	movs	r3, #0
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	378c      	adds	r7, #140	@ 0x8c
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a4:	4770      	bx	lr
 800d1a6:	bf00      	nop
 800d1a8:	0800dd65 	.word	0x0800dd65
 800d1ac:	0800da05 	.word	0x0800da05
 800d1b0:	0800d84d 	.word	0x0800d84d
 800d1b4:	0800d695 	.word	0x0800d695

0800d1b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b095      	sub	sp, #84	@ 0x54
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c8:	e853 3f00 	ldrex	r3, [r3]
 800d1cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d1d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	461a      	mov	r2, r3
 800d1dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1de:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d1e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d1e6:	e841 2300 	strex	r3, r2, [r1]
 800d1ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d1e6      	bne.n	800d1c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	3308      	adds	r3, #8
 800d1f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1fa:	6a3b      	ldr	r3, [r7, #32]
 800d1fc:	e853 3f00 	ldrex	r3, [r3]
 800d200:	61fb      	str	r3, [r7, #28]
   return(result);
 800d202:	69fa      	ldr	r2, [r7, #28]
 800d204:	4b1e      	ldr	r3, [pc, #120]	@ (800d280 <UART_EndRxTransfer+0xc8>)
 800d206:	4013      	ands	r3, r2
 800d208:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	3308      	adds	r3, #8
 800d210:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d212:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d214:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d216:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d218:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d21a:	e841 2300 	strex	r3, r2, [r1]
 800d21e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d222:	2b00      	cmp	r3, #0
 800d224:	d1e5      	bne.n	800d1f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d118      	bne.n	800d260 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	e853 3f00 	ldrex	r3, [r3]
 800d23a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	f023 0310 	bic.w	r3, r3, #16
 800d242:	647b      	str	r3, [r7, #68]	@ 0x44
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	461a      	mov	r2, r3
 800d24a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d24c:	61bb      	str	r3, [r7, #24]
 800d24e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d250:	6979      	ldr	r1, [r7, #20]
 800d252:	69ba      	ldr	r2, [r7, #24]
 800d254:	e841 2300 	strex	r3, r2, [r1]
 800d258:	613b      	str	r3, [r7, #16]
   return(result);
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d1e6      	bne.n	800d22e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2220      	movs	r2, #32
 800d264:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2200      	movs	r2, #0
 800d26c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d274:	bf00      	nop
 800d276:	3754      	adds	r7, #84	@ 0x54
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr
 800d280:	effffffe 	.word	0xeffffffe

0800d284 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d290:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2200      	movs	r2, #0
 800d296:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2200      	movs	r2, #0
 800d29e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d2a2:	68f8      	ldr	r0, [r7, #12]
 800d2a4:	f7fe fe6c 	bl	800bf80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d2a8:	bf00      	nop
 800d2aa:	3710      	adds	r7, #16
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b084      	sub	sp, #16
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2bc:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	220f      	movs	r2, #15
 800d2cc:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	699a      	ldr	r2, [r3, #24]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f042 0208 	orr.w	r2, r2, #8
 800d2dc:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2220      	movs	r2, #32
 800d2e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	f7fe fe51 	bl	800bf94 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d2f2:	bf00      	nop
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d2fa:	b480      	push	{r7}
 800d2fc:	b08f      	sub	sp, #60	@ 0x3c
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d308:	2b21      	cmp	r3, #33	@ 0x21
 800d30a:	d14c      	bne.n	800d3a6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d312:	b29b      	uxth	r3, r3
 800d314:	2b00      	cmp	r3, #0
 800d316:	d132      	bne.n	800d37e <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d31e:	6a3b      	ldr	r3, [r7, #32]
 800d320:	e853 3f00 	ldrex	r3, [r3]
 800d324:	61fb      	str	r3, [r7, #28]
   return(result);
 800d326:	69fb      	ldr	r3, [r7, #28]
 800d328:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d32c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	461a      	mov	r2, r3
 800d334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d336:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d338:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d33a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d33c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d33e:	e841 2300 	strex	r3, r2, [r1]
 800d342:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d346:	2b00      	cmp	r3, #0
 800d348:	d1e6      	bne.n	800d318 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	e853 3f00 	ldrex	r3, [r3]
 800d356:	60bb      	str	r3, [r7, #8]
   return(result);
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d35e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	461a      	mov	r2, r3
 800d366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d368:	61bb      	str	r3, [r7, #24]
 800d36a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d36c:	6979      	ldr	r1, [r7, #20]
 800d36e:	69ba      	ldr	r2, [r7, #24]
 800d370:	e841 2300 	strex	r3, r2, [r1]
 800d374:	613b      	str	r3, [r7, #16]
   return(result);
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d1e6      	bne.n	800d34a <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d37c:	e013      	b.n	800d3a6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d382:	781a      	ldrb	r2, [r3, #0]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d38e:	1c5a      	adds	r2, r3, #1
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	3b01      	subs	r3, #1
 800d39e:	b29a      	uxth	r2, r3
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800d3a6:	bf00      	nop
 800d3a8:	373c      	adds	r7, #60	@ 0x3c
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr

0800d3b2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d3b2:	b480      	push	{r7}
 800d3b4:	b091      	sub	sp, #68	@ 0x44
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d3c0:	2b21      	cmp	r3, #33	@ 0x21
 800d3c2:	d151      	bne.n	800d468 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d132      	bne.n	800d436 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d8:	e853 3f00 	ldrex	r3, [r3]
 800d3dc:	623b      	str	r3, [r7, #32]
   return(result);
 800d3de:	6a3b      	ldr	r3, [r7, #32]
 800d3e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d3e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d3f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3f6:	e841 2300 	strex	r3, r2, [r1]
 800d3fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d1e6      	bne.n	800d3d0 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	e853 3f00 	ldrex	r3, [r3]
 800d40e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d416:	637b      	str	r3, [r7, #52]	@ 0x34
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	461a      	mov	r2, r3
 800d41e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d420:	61fb      	str	r3, [r7, #28]
 800d422:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d424:	69b9      	ldr	r1, [r7, #24]
 800d426:	69fa      	ldr	r2, [r7, #28]
 800d428:	e841 2300 	strex	r3, r2, [r1]
 800d42c:	617b      	str	r3, [r7, #20]
   return(result);
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d1e6      	bne.n	800d402 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d434:	e018      	b.n	800d468 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d43c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d43e:	881b      	ldrh	r3, [r3, #0]
 800d440:	461a      	mov	r2, r3
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d44a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d450:	1c9a      	adds	r2, r3, #2
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	3b01      	subs	r3, #1
 800d460:	b29a      	uxth	r2, r3
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800d468:	bf00      	nop
 800d46a:	3744      	adds	r7, #68	@ 0x44
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr

0800d474 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d474:	b480      	push	{r7}
 800d476:	b091      	sub	sp, #68	@ 0x44
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d482:	2b21      	cmp	r3, #33	@ 0x21
 800d484:	d160      	bne.n	800d548 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d48c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d48e:	e057      	b.n	800d540 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d496:	b29b      	uxth	r3, r3
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d133      	bne.n	800d504 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	3308      	adds	r3, #8
 800d4a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4a6:	e853 3f00 	ldrex	r3, [r3]
 800d4aa:	623b      	str	r3, [r7, #32]
   return(result);
 800d4ac:	6a3b      	ldr	r3, [r7, #32]
 800d4ae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d4b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	3308      	adds	r3, #8
 800d4ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4bc:	633a      	str	r2, [r7, #48]	@ 0x30
 800d4be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4c4:	e841 2300 	strex	r3, r2, [r1]
 800d4c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d1e5      	bne.n	800d49c <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	e853 3f00 	ldrex	r3, [r3]
 800d4dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4ee:	61fb      	str	r3, [r7, #28]
 800d4f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f2:	69b9      	ldr	r1, [r7, #24]
 800d4f4:	69fa      	ldr	r2, [r7, #28]
 800d4f6:	e841 2300 	strex	r3, r2, [r1]
 800d4fa:	617b      	str	r3, [r7, #20]
   return(result);
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d1e6      	bne.n	800d4d0 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800d502:	e021      	b.n	800d548 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	69db      	ldr	r3, [r3, #28]
 800d50a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d013      	beq.n	800d53a <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d516:	781a      	ldrb	r2, [r3, #0]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d522:	1c5a      	adds	r2, r3, #1
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d52e:	b29b      	uxth	r3, r3
 800d530:	3b01      	subs	r3, #1
 800d532:	b29a      	uxth	r2, r3
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d53a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d53c:	3b01      	subs	r3, #1
 800d53e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d540:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d542:	2b00      	cmp	r3, #0
 800d544:	d1a4      	bne.n	800d490 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d546:	e7ff      	b.n	800d548 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800d548:	bf00      	nop
 800d54a:	3744      	adds	r7, #68	@ 0x44
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr

0800d554 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d554:	b480      	push	{r7}
 800d556:	b091      	sub	sp, #68	@ 0x44
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d562:	2b21      	cmp	r3, #33	@ 0x21
 800d564:	d165      	bne.n	800d632 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d56c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d56e:	e05c      	b.n	800d62a <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d576:	b29b      	uxth	r3, r3
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d133      	bne.n	800d5e4 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	3308      	adds	r3, #8
 800d582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d584:	6a3b      	ldr	r3, [r7, #32]
 800d586:	e853 3f00 	ldrex	r3, [r3]
 800d58a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d592:	637b      	str	r3, [r7, #52]	@ 0x34
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	3308      	adds	r3, #8
 800d59a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d59c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d59e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d5a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d5a4:	e841 2300 	strex	r3, r2, [r1]
 800d5a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d1e5      	bne.n	800d57c <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	e853 3f00 	ldrex	r3, [r3]
 800d5bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5c4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ce:	61bb      	str	r3, [r7, #24]
 800d5d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5d2:	6979      	ldr	r1, [r7, #20]
 800d5d4:	69ba      	ldr	r2, [r7, #24]
 800d5d6:	e841 2300 	strex	r3, r2, [r1]
 800d5da:	613b      	str	r3, [r7, #16]
   return(result);
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d1e6      	bne.n	800d5b0 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800d5e2:	e026      	b.n	800d632 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	69db      	ldr	r3, [r3, #28]
 800d5ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d018      	beq.n	800d624 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5f6:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5fa:	881b      	ldrh	r3, [r3, #0]
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d606:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d60c:	1c9a      	adds	r2, r3, #2
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d618:	b29b      	uxth	r3, r3
 800d61a:	3b01      	subs	r3, #1
 800d61c:	b29a      	uxth	r2, r3
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d624:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d626:	3b01      	subs	r3, #1
 800d628:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d62a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d19f      	bne.n	800d570 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d630:	e7ff      	b.n	800d632 <UART_TxISR_16BIT_FIFOEN+0xde>
 800d632:	bf00      	nop
 800d634:	3744      	adds	r7, #68	@ 0x44
 800d636:	46bd      	mov	sp, r7
 800d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63c:	4770      	bx	lr

0800d63e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d63e:	b580      	push	{r7, lr}
 800d640:	b088      	sub	sp, #32
 800d642:	af00      	add	r7, sp, #0
 800d644:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	e853 3f00 	ldrex	r3, [r3]
 800d652:	60bb      	str	r3, [r7, #8]
   return(result);
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d65a:	61fb      	str	r3, [r7, #28]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	461a      	mov	r2, r3
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	61bb      	str	r3, [r7, #24]
 800d666:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d668:	6979      	ldr	r1, [r7, #20]
 800d66a:	69ba      	ldr	r2, [r7, #24]
 800d66c:	e841 2300 	strex	r3, r2, [r1]
 800d670:	613b      	str	r3, [r7, #16]
   return(result);
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d1e6      	bne.n	800d646 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2220      	movs	r2, #32
 800d67c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f7f6 faaa 	bl	8003be0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d68c:	bf00      	nop
 800d68e:	3720      	adds	r7, #32
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b09c      	sub	sp, #112	@ 0x70
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d6a2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d6ac:	2b22      	cmp	r3, #34	@ 0x22
 800d6ae:	f040 80be 	bne.w	800d82e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d6bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d6c0:	b2d9      	uxtb	r1, r3
 800d6c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d6c6:	b2da      	uxtb	r2, r3
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d6cc:	400a      	ands	r2, r1
 800d6ce:	b2d2      	uxtb	r2, r2
 800d6d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d6d6:	1c5a      	adds	r2, r3, #1
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	3b01      	subs	r3, #1
 800d6e6:	b29a      	uxth	r2, r3
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	f040 80a1 	bne.w	800d83e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d702:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d704:	e853 3f00 	ldrex	r3, [r3]
 800d708:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d70a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d70c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d710:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	461a      	mov	r2, r3
 800d718:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d71a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d71c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d71e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d720:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d722:	e841 2300 	strex	r3, r2, [r1]
 800d726:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d1e6      	bne.n	800d6fc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	3308      	adds	r3, #8
 800d734:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d738:	e853 3f00 	ldrex	r3, [r3]
 800d73c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d73e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d740:	f023 0301 	bic.w	r3, r3, #1
 800d744:	667b      	str	r3, [r7, #100]	@ 0x64
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	3308      	adds	r3, #8
 800d74c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d74e:	647a      	str	r2, [r7, #68]	@ 0x44
 800d750:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d752:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d754:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d756:	e841 2300 	strex	r3, r2, [r1]
 800d75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d75c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d1e5      	bne.n	800d72e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2220      	movs	r2, #32
 800d766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2200      	movs	r2, #0
 800d76e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2200      	movs	r2, #0
 800d774:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a33      	ldr	r2, [pc, #204]	@ (800d848 <UART_RxISR_8BIT+0x1b4>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d01f      	beq.n	800d7c0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	685b      	ldr	r3, [r3, #4]
 800d786:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d018      	beq.n	800d7c0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d796:	e853 3f00 	ldrex	r3, [r3]
 800d79a:	623b      	str	r3, [r7, #32]
   return(result);
 800d79c:	6a3b      	ldr	r3, [r7, #32]
 800d79e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d7a2:	663b      	str	r3, [r7, #96]	@ 0x60
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d7ac:	633b      	str	r3, [r7, #48]	@ 0x30
 800d7ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d7b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7b4:	e841 2300 	strex	r3, r2, [r1]
 800d7b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d1e6      	bne.n	800d78e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d12e      	bne.n	800d826 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	e853 3f00 	ldrex	r3, [r3]
 800d7da:	60fb      	str	r3, [r7, #12]
   return(result);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f023 0310 	bic.w	r3, r3, #16
 800d7e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d7ec:	61fb      	str	r3, [r7, #28]
 800d7ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7f0:	69b9      	ldr	r1, [r7, #24]
 800d7f2:	69fa      	ldr	r2, [r7, #28]
 800d7f4:	e841 2300 	strex	r3, r2, [r1]
 800d7f8:	617b      	str	r3, [r7, #20]
   return(result);
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d1e6      	bne.n	800d7ce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	69db      	ldr	r3, [r3, #28]
 800d806:	f003 0310 	and.w	r3, r3, #16
 800d80a:	2b10      	cmp	r3, #16
 800d80c:	d103      	bne.n	800d816 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	2210      	movs	r2, #16
 800d814:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d81c:	4619      	mov	r1, r3
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f7fe fbc2 	bl	800bfa8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d824:	e00b      	b.n	800d83e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f7f6 fa18 	bl	8003c5c <HAL_UART_RxCpltCallback>
}
 800d82c:	e007      	b.n	800d83e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	699a      	ldr	r2, [r3, #24]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f042 0208 	orr.w	r2, r2, #8
 800d83c:	619a      	str	r2, [r3, #24]
}
 800d83e:	bf00      	nop
 800d840:	3770      	adds	r7, #112	@ 0x70
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	58000c00 	.word	0x58000c00

0800d84c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b09c      	sub	sp, #112	@ 0x70
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d85a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d864:	2b22      	cmp	r3, #34	@ 0x22
 800d866:	f040 80be 	bne.w	800d9e6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d870:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d878:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d87a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800d87e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d882:	4013      	ands	r3, r2
 800d884:	b29a      	uxth	r2, r3
 800d886:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d888:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d88e:	1c9a      	adds	r2, r3, #2
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	3b01      	subs	r3, #1
 800d89e:	b29a      	uxth	r2, r3
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	f040 80a1 	bne.w	800d9f6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8bc:	e853 3f00 	ldrex	r3, [r3]
 800d8c0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d8c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d8c8:	667b      	str	r3, [r7, #100]	@ 0x64
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d8d2:	657b      	str	r3, [r7, #84]	@ 0x54
 800d8d4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d8d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d8da:	e841 2300 	strex	r3, r2, [r1]
 800d8de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d8e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d1e6      	bne.n	800d8b4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	3308      	adds	r3, #8
 800d8ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8f0:	e853 3f00 	ldrex	r3, [r3]
 800d8f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8f8:	f023 0301 	bic.w	r3, r3, #1
 800d8fc:	663b      	str	r3, [r7, #96]	@ 0x60
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	3308      	adds	r3, #8
 800d904:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d906:	643a      	str	r2, [r7, #64]	@ 0x40
 800d908:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d90a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d90c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d90e:	e841 2300 	strex	r3, r2, [r1]
 800d912:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d916:	2b00      	cmp	r3, #0
 800d918:	d1e5      	bne.n	800d8e6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2220      	movs	r2, #32
 800d91e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2200      	movs	r2, #0
 800d926:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4a33      	ldr	r2, [pc, #204]	@ (800da00 <UART_RxISR_16BIT+0x1b4>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d01f      	beq.n	800d978 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	685b      	ldr	r3, [r3, #4]
 800d93e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d942:	2b00      	cmp	r3, #0
 800d944:	d018      	beq.n	800d978 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d94c:	6a3b      	ldr	r3, [r7, #32]
 800d94e:	e853 3f00 	ldrex	r3, [r3]
 800d952:	61fb      	str	r3, [r7, #28]
   return(result);
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d95a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	461a      	mov	r2, r3
 800d962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d966:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d968:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d96a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d96c:	e841 2300 	strex	r3, r2, [r1]
 800d970:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d974:	2b00      	cmp	r3, #0
 800d976:	d1e6      	bne.n	800d946 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d12e      	bne.n	800d9de <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	e853 3f00 	ldrex	r3, [r3]
 800d992:	60bb      	str	r3, [r7, #8]
   return(result);
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	f023 0310 	bic.w	r3, r3, #16
 800d99a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d9a4:	61bb      	str	r3, [r7, #24]
 800d9a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9a8:	6979      	ldr	r1, [r7, #20]
 800d9aa:	69ba      	ldr	r2, [r7, #24]
 800d9ac:	e841 2300 	strex	r3, r2, [r1]
 800d9b0:	613b      	str	r3, [r7, #16]
   return(result);
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d1e6      	bne.n	800d986 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	69db      	ldr	r3, [r3, #28]
 800d9be:	f003 0310 	and.w	r3, r3, #16
 800d9c2:	2b10      	cmp	r3, #16
 800d9c4:	d103      	bne.n	800d9ce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2210      	movs	r2, #16
 800d9cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f7fe fae6 	bl	800bfa8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d9dc:	e00b      	b.n	800d9f6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f7f6 f93c 	bl	8003c5c <HAL_UART_RxCpltCallback>
}
 800d9e4:	e007      	b.n	800d9f6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	699a      	ldr	r2, [r3, #24]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f042 0208 	orr.w	r2, r2, #8
 800d9f4:	619a      	str	r2, [r3, #24]
}
 800d9f6:	bf00      	nop
 800d9f8:	3770      	adds	r7, #112	@ 0x70
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	58000c00 	.word	0x58000c00

0800da04 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b0ac      	sub	sp, #176	@ 0xb0
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800da12:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	69db      	ldr	r3, [r3, #28]
 800da1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	689b      	ldr	r3, [r3, #8]
 800da30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800da3a:	2b22      	cmp	r3, #34	@ 0x22
 800da3c:	f040 8180 	bne.w	800dd40 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800da46:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800da4a:	e123      	b.n	800dc94 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da52:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800da56:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800da5a:	b2d9      	uxtb	r1, r3
 800da5c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800da60:	b2da      	uxtb	r2, r3
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da66:	400a      	ands	r2, r1
 800da68:	b2d2      	uxtb	r2, r2
 800da6a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da70:	1c5a      	adds	r2, r3, #1
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	3b01      	subs	r3, #1
 800da80:	b29a      	uxth	r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	69db      	ldr	r3, [r3, #28]
 800da8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800da92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da96:	f003 0307 	and.w	r3, r3, #7
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d053      	beq.n	800db46 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800da9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800daa2:	f003 0301 	and.w	r3, r3, #1
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d011      	beq.n	800dace <UART_RxISR_8BIT_FIFOEN+0xca>
 800daaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800daae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d00b      	beq.n	800dace <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	2201      	movs	r2, #1
 800dabc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dac4:	f043 0201 	orr.w	r2, r3, #1
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dad2:	f003 0302 	and.w	r3, r3, #2
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d011      	beq.n	800dafe <UART_RxISR_8BIT_FIFOEN+0xfa>
 800dada:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dade:	f003 0301 	and.w	r3, r3, #1
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00b      	beq.n	800dafe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	2202      	movs	r2, #2
 800daec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800daf4:	f043 0204 	orr.w	r2, r3, #4
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dafe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db02:	f003 0304 	and.w	r3, r3, #4
 800db06:	2b00      	cmp	r3, #0
 800db08:	d011      	beq.n	800db2e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800db0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800db0e:	f003 0301 	and.w	r3, r3, #1
 800db12:	2b00      	cmp	r3, #0
 800db14:	d00b      	beq.n	800db2e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2204      	movs	r2, #4
 800db1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db24:	f043 0202 	orr.w	r2, r3, #2
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db34:	2b00      	cmp	r3, #0
 800db36:	d006      	beq.n	800db46 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f7fe fa21 	bl	800bf80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2200      	movs	r2, #0
 800db42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	2b00      	cmp	r3, #0
 800db50:	f040 80a0 	bne.w	800dc94 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800db5c:	e853 3f00 	ldrex	r3, [r3]
 800db60:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800db62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800db68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	461a      	mov	r2, r3
 800db72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800db78:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db7a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800db7c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800db7e:	e841 2300 	strex	r3, r2, [r1]
 800db82:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800db84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800db86:	2b00      	cmp	r3, #0
 800db88:	d1e4      	bne.n	800db54 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	3308      	adds	r3, #8
 800db90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800db94:	e853 3f00 	ldrex	r3, [r3]
 800db98:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800db9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800db9c:	4b6e      	ldr	r3, [pc, #440]	@ (800dd58 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800db9e:	4013      	ands	r3, r2
 800dba0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	3308      	adds	r3, #8
 800dbaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800dbae:	66ba      	str	r2, [r7, #104]	@ 0x68
 800dbb0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbb2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800dbb4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800dbb6:	e841 2300 	strex	r3, r2, [r1]
 800dbba:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800dbbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d1e3      	bne.n	800db8a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2220      	movs	r2, #32
 800dbc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4a60      	ldr	r2, [pc, #384]	@ (800dd5c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	d021      	beq.n	800dc24 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d01a      	beq.n	800dc24 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbf6:	e853 3f00 	ldrex	r3, [r3]
 800dbfa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800dbfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbfe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dc02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	461a      	mov	r2, r3
 800dc0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dc10:	657b      	str	r3, [r7, #84]	@ 0x54
 800dc12:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc14:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dc16:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dc18:	e841 2300 	strex	r3, r2, [r1]
 800dc1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800dc1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d1e4      	bne.n	800dbee <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d130      	bne.n	800dc8e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc3a:	e853 3f00 	ldrex	r3, [r3]
 800dc3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dc40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc42:	f023 0310 	bic.w	r3, r3, #16
 800dc46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	461a      	mov	r2, r3
 800dc50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dc54:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc56:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dc5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dc5c:	e841 2300 	strex	r3, r2, [r1]
 800dc60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dc62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d1e4      	bne.n	800dc32 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	69db      	ldr	r3, [r3, #28]
 800dc6e:	f003 0310 	and.w	r3, r3, #16
 800dc72:	2b10      	cmp	r3, #16
 800dc74:	d103      	bne.n	800dc7e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2210      	movs	r2, #16
 800dc7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dc84:	4619      	mov	r1, r3
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f7fe f98e 	bl	800bfa8 <HAL_UARTEx_RxEventCallback>
 800dc8c:	e002      	b.n	800dc94 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f7f5 ffe4 	bl	8003c5c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dc94:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d006      	beq.n	800dcaa <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800dc9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dca0:	f003 0320 	and.w	r3, r3, #32
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	f47f aed1 	bne.w	800da4c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dcb0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dcb4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d049      	beq.n	800dd50 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dcc2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d242      	bcs.n	800dd50 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	3308      	adds	r3, #8
 800dcd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcd2:	6a3b      	ldr	r3, [r7, #32]
 800dcd4:	e853 3f00 	ldrex	r3, [r3]
 800dcd8:	61fb      	str	r3, [r7, #28]
   return(result);
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dce0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	3308      	adds	r3, #8
 800dcea:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800dcee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dcf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcf2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dcf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dcf6:	e841 2300 	strex	r3, r2, [r1]
 800dcfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dcfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d1e3      	bne.n	800dcca <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	4a16      	ldr	r2, [pc, #88]	@ (800dd60 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800dd06:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	e853 3f00 	ldrex	r3, [r3]
 800dd14:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	f043 0320 	orr.w	r3, r3, #32
 800dd1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	461a      	mov	r2, r3
 800dd26:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dd2a:	61bb      	str	r3, [r7, #24]
 800dd2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd2e:	6979      	ldr	r1, [r7, #20]
 800dd30:	69ba      	ldr	r2, [r7, #24]
 800dd32:	e841 2300 	strex	r3, r2, [r1]
 800dd36:	613b      	str	r3, [r7, #16]
   return(result);
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d1e4      	bne.n	800dd08 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dd3e:	e007      	b.n	800dd50 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	699a      	ldr	r2, [r3, #24]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f042 0208 	orr.w	r2, r2, #8
 800dd4e:	619a      	str	r2, [r3, #24]
}
 800dd50:	bf00      	nop
 800dd52:	37b0      	adds	r7, #176	@ 0xb0
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	effffffe 	.word	0xeffffffe
 800dd5c:	58000c00 	.word	0x58000c00
 800dd60:	0800d695 	.word	0x0800d695

0800dd64 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b0ae      	sub	sp, #184	@ 0xb8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dd72:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	69db      	ldr	r3, [r3, #28]
 800dd7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dd9a:	2b22      	cmp	r3, #34	@ 0x22
 800dd9c:	f040 8184 	bne.w	800e0a8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dda6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ddaa:	e127      	b.n	800dffc <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddb2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ddbe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ddc2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ddc6:	4013      	ands	r3, r2
 800ddc8:	b29a      	uxth	r2, r3
 800ddca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ddce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddd4:	1c9a      	adds	r2, r3, #2
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dde0:	b29b      	uxth	r3, r3
 800dde2:	3b01      	subs	r3, #1
 800dde4:	b29a      	uxth	r2, r3
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	69db      	ldr	r3, [r3, #28]
 800ddf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ddf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ddfa:	f003 0307 	and.w	r3, r3, #7
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d053      	beq.n	800deaa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800de02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800de06:	f003 0301 	and.w	r3, r3, #1
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d011      	beq.n	800de32 <UART_RxISR_16BIT_FIFOEN+0xce>
 800de0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de16:	2b00      	cmp	r3, #0
 800de18:	d00b      	beq.n	800de32 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2201      	movs	r2, #1
 800de20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de28:	f043 0201 	orr.w	r2, r3, #1
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800de36:	f003 0302 	and.w	r3, r3, #2
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d011      	beq.n	800de62 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800de3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800de42:	f003 0301 	and.w	r3, r3, #1
 800de46:	2b00      	cmp	r3, #0
 800de48:	d00b      	beq.n	800de62 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2202      	movs	r2, #2
 800de50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de58:	f043 0204 	orr.w	r2, r3, #4
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800de66:	f003 0304 	and.w	r3, r3, #4
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d011      	beq.n	800de92 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800de6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800de72:	f003 0301 	and.w	r3, r3, #1
 800de76:	2b00      	cmp	r3, #0
 800de78:	d00b      	beq.n	800de92 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	2204      	movs	r2, #4
 800de80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de88:	f043 0202 	orr.w	r2, r3, #2
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d006      	beq.n	800deaa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f7fe f86f 	bl	800bf80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2200      	movs	r2, #0
 800dea6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800deb0:	b29b      	uxth	r3, r3
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	f040 80a2 	bne.w	800dffc <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800debe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dec0:	e853 3f00 	ldrex	r3, [r3]
 800dec4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800dec6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dec8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800decc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	461a      	mov	r2, r3
 800ded6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800deda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dede:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dee0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800dee2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800dee6:	e841 2300 	strex	r3, r2, [r1]
 800deea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800deec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800deee:	2b00      	cmp	r3, #0
 800def0:	d1e2      	bne.n	800deb8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	3308      	adds	r3, #8
 800def8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800defa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800defc:	e853 3f00 	ldrex	r3, [r3]
 800df00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800df02:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800df04:	4b6e      	ldr	r3, [pc, #440]	@ (800e0c0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800df06:	4013      	ands	r3, r2
 800df08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	3308      	adds	r3, #8
 800df12:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800df16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800df18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800df1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800df1e:	e841 2300 	strex	r3, r2, [r1]
 800df22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800df24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800df26:	2b00      	cmp	r3, #0
 800df28:	d1e3      	bne.n	800def2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2220      	movs	r2, #32
 800df2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2200      	movs	r2, #0
 800df36:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	4a60      	ldr	r2, [pc, #384]	@ (800e0c4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d021      	beq.n	800df8c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800df52:	2b00      	cmp	r3, #0
 800df54:	d01a      	beq.n	800df8c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df5e:	e853 3f00 	ldrex	r3, [r3]
 800df62:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800df64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800df6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	461a      	mov	r2, r3
 800df74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800df78:	65bb      	str	r3, [r7, #88]	@ 0x58
 800df7a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800df7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800df80:	e841 2300 	strex	r3, r2, [r1]
 800df84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800df86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d1e4      	bne.n	800df56 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df90:	2b01      	cmp	r3, #1
 800df92:	d130      	bne.n	800dff6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2200      	movs	r2, #0
 800df98:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa2:	e853 3f00 	ldrex	r3, [r3]
 800dfa6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dfa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfaa:	f023 0310 	bic.w	r3, r3, #16
 800dfae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dfbc:	647b      	str	r3, [r7, #68]	@ 0x44
 800dfbe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dfc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dfc4:	e841 2300 	strex	r3, r2, [r1]
 800dfc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dfca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d1e4      	bne.n	800df9a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	69db      	ldr	r3, [r3, #28]
 800dfd6:	f003 0310 	and.w	r3, r3, #16
 800dfda:	2b10      	cmp	r3, #16
 800dfdc:	d103      	bne.n	800dfe6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	2210      	movs	r2, #16
 800dfe4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dfec:	4619      	mov	r1, r3
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f7fd ffda 	bl	800bfa8 <HAL_UARTEx_RxEventCallback>
 800dff4:	e002      	b.n	800dffc <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f7f5 fe30 	bl	8003c5c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dffc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800e000:	2b00      	cmp	r3, #0
 800e002:	d006      	beq.n	800e012 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800e004:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e008:	f003 0320 	and.w	r3, r3, #32
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f47f aecd 	bne.w	800ddac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e018:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e01c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e020:	2b00      	cmp	r3, #0
 800e022:	d049      	beq.n	800e0b8 <UART_RxISR_16BIT_FIFOEN+0x354>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e02a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800e02e:	429a      	cmp	r2, r3
 800e030:	d242      	bcs.n	800e0b8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	3308      	adds	r3, #8
 800e038:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e03c:	e853 3f00 	ldrex	r3, [r3]
 800e040:	623b      	str	r3, [r7, #32]
   return(result);
 800e042:	6a3b      	ldr	r3, [r7, #32]
 800e044:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e048:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	3308      	adds	r3, #8
 800e052:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e056:	633a      	str	r2, [r7, #48]	@ 0x30
 800e058:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e05a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e05c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e05e:	e841 2300 	strex	r3, r2, [r1]
 800e062:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e066:	2b00      	cmp	r3, #0
 800e068:	d1e3      	bne.n	800e032 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	4a16      	ldr	r2, [pc, #88]	@ (800e0c8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800e06e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	e853 3f00 	ldrex	r3, [r3]
 800e07c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	f043 0320 	orr.w	r3, r3, #32
 800e084:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	461a      	mov	r2, r3
 800e08e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e092:	61fb      	str	r3, [r7, #28]
 800e094:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e096:	69b9      	ldr	r1, [r7, #24]
 800e098:	69fa      	ldr	r2, [r7, #28]
 800e09a:	e841 2300 	strex	r3, r2, [r1]
 800e09e:	617b      	str	r3, [r7, #20]
   return(result);
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d1e4      	bne.n	800e070 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e0a6:	e007      	b.n	800e0b8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	699a      	ldr	r2, [r3, #24]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f042 0208 	orr.w	r2, r2, #8
 800e0b6:	619a      	str	r2, [r3, #24]
}
 800e0b8:	bf00      	nop
 800e0ba:	37b8      	adds	r7, #184	@ 0xb8
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	effffffe 	.word	0xeffffffe
 800e0c4:	58000c00 	.word	0x58000c00
 800e0c8:	0800d84d 	.word	0x0800d84d

0800e0cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b083      	sub	sp, #12
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e0d4:	bf00      	nop
 800e0d6:	370c      	adds	r7, #12
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0de:	4770      	bx	lr

0800e0e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b083      	sub	sp, #12
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e0e8:	bf00      	nop
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr

0800e0f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b083      	sub	sp, #12
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e0fc:	bf00      	nop
 800e0fe:	370c      	adds	r7, #12
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr

0800e108 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e108:	b480      	push	{r7}
 800e10a:	b085      	sub	sp, #20
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e116:	2b01      	cmp	r3, #1
 800e118:	d101      	bne.n	800e11e <HAL_UARTEx_DisableFifoMode+0x16>
 800e11a:	2302      	movs	r3, #2
 800e11c:	e027      	b.n	800e16e <HAL_UARTEx_DisableFifoMode+0x66>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2201      	movs	r2, #1
 800e122:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2224      	movs	r2, #36	@ 0x24
 800e12a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	681a      	ldr	r2, [r3, #0]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f022 0201 	bic.w	r2, r2, #1
 800e144:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e14c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2200      	movs	r2, #0
 800e152:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	68fa      	ldr	r2, [r7, #12]
 800e15a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2220      	movs	r2, #32
 800e160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2200      	movs	r2, #0
 800e168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e16c:	2300      	movs	r3, #0
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3714      	adds	r7, #20
 800e172:	46bd      	mov	sp, r7
 800e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e178:	4770      	bx	lr

0800e17a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e17a:	b580      	push	{r7, lr}
 800e17c:	b084      	sub	sp, #16
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
 800e182:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	d101      	bne.n	800e192 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e18e:	2302      	movs	r3, #2
 800e190:	e02d      	b.n	800e1ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2201      	movs	r2, #1
 800e196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2224      	movs	r2, #36	@ 0x24
 800e19e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f022 0201 	bic.w	r2, r2, #1
 800e1b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	689b      	ldr	r3, [r3, #8]
 800e1c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	683a      	ldr	r2, [r7, #0]
 800e1ca:	430a      	orrs	r2, r1
 800e1cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f000 f850 	bl	800e274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	68fa      	ldr	r2, [r7, #12]
 800e1da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2220      	movs	r2, #32
 800e1e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e1ec:	2300      	movs	r3, #0
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3710      	adds	r7, #16
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}

0800e1f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e1f6:	b580      	push	{r7, lr}
 800e1f8:	b084      	sub	sp, #16
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
 800e1fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e206:	2b01      	cmp	r3, #1
 800e208:	d101      	bne.n	800e20e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e20a:	2302      	movs	r3, #2
 800e20c:	e02d      	b.n	800e26a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2201      	movs	r2, #1
 800e212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2224      	movs	r2, #36	@ 0x24
 800e21a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f022 0201 	bic.w	r2, r2, #1
 800e234:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	689b      	ldr	r3, [r3, #8]
 800e23c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	683a      	ldr	r2, [r7, #0]
 800e246:	430a      	orrs	r2, r1
 800e248:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 f812 	bl	800e274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	68fa      	ldr	r2, [r7, #12]
 800e256:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2220      	movs	r2, #32
 800e25c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e268:	2300      	movs	r3, #0
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
	...

0800e274 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e274:	b480      	push	{r7}
 800e276:	b085      	sub	sp, #20
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e280:	2b00      	cmp	r3, #0
 800e282:	d108      	bne.n	800e296 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2201      	movs	r2, #1
 800e288:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2201      	movs	r2, #1
 800e290:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e294:	e031      	b.n	800e2fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e296:	2310      	movs	r3, #16
 800e298:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e29a:	2310      	movs	r3, #16
 800e29c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	689b      	ldr	r3, [r3, #8]
 800e2a4:	0e5b      	lsrs	r3, r3, #25
 800e2a6:	b2db      	uxtb	r3, r3
 800e2a8:	f003 0307 	and.w	r3, r3, #7
 800e2ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	689b      	ldr	r3, [r3, #8]
 800e2b4:	0f5b      	lsrs	r3, r3, #29
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	f003 0307 	and.w	r3, r3, #7
 800e2bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e2be:	7bbb      	ldrb	r3, [r7, #14]
 800e2c0:	7b3a      	ldrb	r2, [r7, #12]
 800e2c2:	4911      	ldr	r1, [pc, #68]	@ (800e308 <UARTEx_SetNbDataToProcess+0x94>)
 800e2c4:	5c8a      	ldrb	r2, [r1, r2]
 800e2c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e2ca:	7b3a      	ldrb	r2, [r7, #12]
 800e2cc:	490f      	ldr	r1, [pc, #60]	@ (800e30c <UARTEx_SetNbDataToProcess+0x98>)
 800e2ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e2d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e2d4:	b29a      	uxth	r2, r3
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e2dc:	7bfb      	ldrb	r3, [r7, #15]
 800e2de:	7b7a      	ldrb	r2, [r7, #13]
 800e2e0:	4909      	ldr	r1, [pc, #36]	@ (800e308 <UARTEx_SetNbDataToProcess+0x94>)
 800e2e2:	5c8a      	ldrb	r2, [r1, r2]
 800e2e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e2e8:	7b7a      	ldrb	r2, [r7, #13]
 800e2ea:	4908      	ldr	r1, [pc, #32]	@ (800e30c <UARTEx_SetNbDataToProcess+0x98>)
 800e2ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e2ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800e2f2:	b29a      	uxth	r2, r3
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e2fa:	bf00      	nop
 800e2fc:	3714      	adds	r7, #20
 800e2fe:	46bd      	mov	sp, r7
 800e300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e304:	4770      	bx	lr
 800e306:	bf00      	nop
 800e308:	08017e40 	.word	0x08017e40
 800e30c:	08017e48 	.word	0x08017e48

0800e310 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e310:	b084      	sub	sp, #16
 800e312:	b480      	push	{r7}
 800e314:	b085      	sub	sp, #20
 800e316:	af00      	add	r7, sp, #0
 800e318:	6078      	str	r0, [r7, #4]
 800e31a:	f107 001c 	add.w	r0, r7, #28
 800e31e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e322:	2300      	movs	r3, #0
 800e324:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800e326:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800e328:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800e32a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800e32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800e32e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800e330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800e332:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800e336:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800e338:	68fa      	ldr	r2, [r7, #12]
 800e33a:	4313      	orrs	r3, r2
 800e33c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	685a      	ldr	r2, [r3, #4]
 800e342:	4b07      	ldr	r3, [pc, #28]	@ (800e360 <SDMMC_Init+0x50>)
 800e344:	4013      	ands	r3, r2
 800e346:	68fa      	ldr	r2, [r7, #12]
 800e348:	431a      	orrs	r2, r3
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e34e:	2300      	movs	r3, #0
}
 800e350:	4618      	mov	r0, r3
 800e352:	3714      	adds	r7, #20
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	b004      	add	sp, #16
 800e35c:	4770      	bx	lr
 800e35e:	bf00      	nop
 800e360:	ffc02c00 	.word	0xffc02c00

0800e364 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e364:	b480      	push	{r7}
 800e366:	b083      	sub	sp, #12
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800e372:	4618      	mov	r0, r3
 800e374:	370c      	adds	r7, #12
 800e376:	46bd      	mov	sp, r7
 800e378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37c:	4770      	bx	lr

0800e37e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800e37e:	b480      	push	{r7}
 800e380:	b083      	sub	sp, #12
 800e382:	af00      	add	r7, sp, #0
 800e384:	6078      	str	r0, [r7, #4]
 800e386:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	681a      	ldr	r2, [r3, #0]
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800e392:	2300      	movs	r3, #0
}
 800e394:	4618      	mov	r0, r3
 800e396:	370c      	adds	r7, #12
 800e398:	46bd      	mov	sp, r7
 800e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39e:	4770      	bx	lr

0800e3a0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b083      	sub	sp, #12
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	f043 0203 	orr.w	r2, r3, #3
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e3b4:	2300      	movs	r3, #0
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	370c      	adds	r7, #12
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c0:	4770      	bx	lr

0800e3c2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800e3c2:	b480      	push	{r7}
 800e3c4:	b083      	sub	sp, #12
 800e3c6:	af00      	add	r7, sp, #0
 800e3c8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f003 0303 	and.w	r3, r3, #3
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	370c      	adds	r7, #12
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr
	...

0800e3e0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b085      	sub	sp, #20
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	681a      	ldr	r2, [r3, #0]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e3fe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800e404:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800e40a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e40c:	68fa      	ldr	r2, [r7, #12]
 800e40e:	4313      	orrs	r3, r2
 800e410:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	68da      	ldr	r2, [r3, #12]
 800e416:	4b06      	ldr	r3, [pc, #24]	@ (800e430 <SDMMC_SendCommand+0x50>)
 800e418:	4013      	ands	r3, r2
 800e41a:	68fa      	ldr	r2, [r7, #12]
 800e41c:	431a      	orrs	r2, r3
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e422:	2300      	movs	r3, #0
}
 800e424:	4618      	mov	r0, r3
 800e426:	3714      	adds	r7, #20
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr
 800e430:	fffee0c0 	.word	0xfffee0c0

0800e434 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e434:	b480      	push	{r7}
 800e436:	b083      	sub	sp, #12
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	691b      	ldr	r3, [r3, #16]
 800e440:	b2db      	uxtb	r3, r3
}
 800e442:	4618      	mov	r0, r3
 800e444:	370c      	adds	r7, #12
 800e446:	46bd      	mov	sp, r7
 800e448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44c:	4770      	bx	lr

0800e44e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e44e:	b480      	push	{r7}
 800e450:	b085      	sub	sp, #20
 800e452:	af00      	add	r7, sp, #0
 800e454:	6078      	str	r0, [r7, #4]
 800e456:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	3314      	adds	r3, #20
 800e45c:	461a      	mov	r2, r3
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	4413      	add	r3, r2
 800e462:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3714      	adds	r7, #20
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800e474:	b480      	push	{r7}
 800e476:	b085      	sub	sp, #20
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e47e:	2300      	movs	r3, #0
 800e480:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	685a      	ldr	r2, [r3, #4]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e49a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800e4a0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800e4a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e4a8:	68fa      	ldr	r2, [r7, #12]
 800e4aa:	4313      	orrs	r3, r2
 800e4ac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	431a      	orrs	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e4be:	2300      	movs	r3, #0

}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3714      	adds	r7, #20
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr

0800e4cc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b088      	sub	sp, #32
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e4da:	2310      	movs	r3, #16
 800e4dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e4e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e4ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4ee:	f107 0308 	add.w	r3, r7, #8
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f7ff ff73 	bl	800e3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e4fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e4fe:	2110      	movs	r1, #16
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f000 fa5f 	bl	800e9c4 <SDMMC_GetCmdResp1>
 800e506:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e508:	69fb      	ldr	r3, [r7, #28]
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3720      	adds	r7, #32
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}

0800e512 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e512:	b580      	push	{r7, lr}
 800e514:	b088      	sub	sp, #32
 800e516:	af00      	add	r7, sp, #0
 800e518:	6078      	str	r0, [r7, #4]
 800e51a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e520:	2311      	movs	r3, #17
 800e522:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e524:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e52a:	2300      	movs	r3, #0
 800e52c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e52e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e532:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e534:	f107 0308 	add.w	r3, r7, #8
 800e538:	4619      	mov	r1, r3
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f7ff ff50 	bl	800e3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e540:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e544:	2111      	movs	r1, #17
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f000 fa3c 	bl	800e9c4 <SDMMC_GetCmdResp1>
 800e54c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e54e:	69fb      	ldr	r3, [r7, #28]
}
 800e550:	4618      	mov	r0, r3
 800e552:	3720      	adds	r7, #32
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}

0800e558 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b088      	sub	sp, #32
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e566:	2312      	movs	r3, #18
 800e568:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e56a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e56e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e570:	2300      	movs	r3, #0
 800e572:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e574:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e578:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e57a:	f107 0308 	add.w	r3, r7, #8
 800e57e:	4619      	mov	r1, r3
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f7ff ff2d 	bl	800e3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e58a:	2112      	movs	r1, #18
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f000 fa19 	bl	800e9c4 <SDMMC_GetCmdResp1>
 800e592:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e594:	69fb      	ldr	r3, [r7, #28]
}
 800e596:	4618      	mov	r0, r3
 800e598:	3720      	adds	r7, #32
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}

0800e59e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b088      	sub	sp, #32
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
 800e5a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e5ac:	2318      	movs	r3, #24
 800e5ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e5b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e5be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5c0:	f107 0308 	add.w	r3, r7, #8
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f7ff ff0a 	bl	800e3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e5cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e5d0:	2118      	movs	r1, #24
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f000 f9f6 	bl	800e9c4 <SDMMC_GetCmdResp1>
 800e5d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5da:	69fb      	ldr	r3, [r7, #28]
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3720      	adds	r7, #32
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b088      	sub	sp, #32
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e5f2:	2319      	movs	r3, #25
 800e5f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e5fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e600:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e604:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e606:	f107 0308 	add.w	r3, r7, #8
 800e60a:	4619      	mov	r1, r3
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f7ff fee7 	bl	800e3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e612:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e616:	2119      	movs	r1, #25
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f000 f9d3 	bl	800e9c4 <SDMMC_GetCmdResp1>
 800e61e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e620:	69fb      	ldr	r3, [r7, #28]
}
 800e622:	4618      	mov	r0, r3
 800e624:	3720      	adds	r7, #32
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
	...

0800e62c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b088      	sub	sp, #32
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e634:	2300      	movs	r3, #0
 800e636:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e638:	230c      	movs	r3, #12
 800e63a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e63c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e640:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e642:	2300      	movs	r3, #0
 800e644:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e646:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e64a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	68db      	ldr	r3, [r3, #12]
 800e650:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	68db      	ldr	r3, [r3, #12]
 800e65c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e664:	f107 0308 	add.w	r3, r7, #8
 800e668:	4619      	mov	r1, r3
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f7ff feb8 	bl	800e3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e670:	4a0b      	ldr	r2, [pc, #44]	@ (800e6a0 <SDMMC_CmdStopTransfer+0x74>)
 800e672:	210c      	movs	r1, #12
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f000 f9a5 	bl	800e9c4 <SDMMC_GetCmdResp1>
 800e67a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	68db      	ldr	r3, [r3, #12]
 800e680:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e688:	69fb      	ldr	r3, [r7, #28]
 800e68a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e68e:	d101      	bne.n	800e694 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800e690:	2300      	movs	r3, #0
 800e692:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800e694:	69fb      	ldr	r3, [r7, #28]
}
 800e696:	4618      	mov	r0, r3
 800e698:	3720      	adds	r7, #32
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	05f5e100 	.word	0x05f5e100

0800e6a4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b088      	sub	sp, #32
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e6b2:	2307      	movs	r3, #7
 800e6b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e6ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e6c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6c6:	f107 0308 	add.w	r3, r7, #8
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f7ff fe87 	bl	800e3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e6d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e6d6:	2107      	movs	r1, #7
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 f973 	bl	800e9c4 <SDMMC_GetCmdResp1>
 800e6de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6e0:	69fb      	ldr	r3, [r7, #28]
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3720      	adds	r7, #32
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e6ea:	b580      	push	{r7, lr}
 800e6ec:	b088      	sub	sp, #32
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6fe:	2300      	movs	r3, #0
 800e700:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e706:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e708:	f107 0308 	add.w	r3, r7, #8
 800e70c:	4619      	mov	r1, r3
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f7ff fe66 	bl	800e3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f000 fb97 	bl	800ee48 <SDMMC_GetCmdError>
 800e71a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e71c:	69fb      	ldr	r3, [r7, #28]
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3720      	adds	r7, #32
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}

0800e726 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e726:	b580      	push	{r7, lr}
 800e728:	b088      	sub	sp, #32
 800e72a:	af00      	add	r7, sp, #0
 800e72c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e72e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800e732:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e734:	2308      	movs	r3, #8
 800e736:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e738:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e73c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e73e:	2300      	movs	r3, #0
 800e740:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e746:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e748:	f107 0308 	add.w	r3, r7, #8
 800e74c:	4619      	mov	r1, r3
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f7ff fe46 	bl	800e3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f000 fb29 	bl	800edac <SDMMC_GetCmdResp7>
 800e75a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e75c:	69fb      	ldr	r3, [r7, #28]
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3720      	adds	r7, #32
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}

0800e766 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e766:	b580      	push	{r7, lr}
 800e768:	b088      	sub	sp, #32
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	6078      	str	r0, [r7, #4]
 800e76e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e774:	2337      	movs	r3, #55	@ 0x37
 800e776:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e778:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e77c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e77e:	2300      	movs	r3, #0
 800e780:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e782:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e786:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e788:	f107 0308 	add.w	r3, r7, #8
 800e78c:	4619      	mov	r1, r3
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f7ff fe26 	bl	800e3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e794:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e798:	2137      	movs	r1, #55	@ 0x37
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f000 f912 	bl	800e9c4 <SDMMC_GetCmdResp1>
 800e7a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7a2:	69fb      	ldr	r3, [r7, #28]
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3720      	adds	r7, #32
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b088      	sub	sp, #32
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e7ba:	2329      	movs	r3, #41	@ 0x29
 800e7bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e7be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e7c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e7c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e7cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e7ce:	f107 0308 	add.w	r3, r7, #8
 800e7d2:	4619      	mov	r1, r3
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f7ff fe03 	bl	800e3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f000 fa2e 	bl	800ec3c <SDMMC_GetCmdResp3>
 800e7e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7e2:	69fb      	ldr	r3, [r7, #28]
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3720      	adds	r7, #32
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b088      	sub	sp, #32
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e7fa:	2306      	movs	r3, #6
 800e7fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e7fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e802:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e804:	2300      	movs	r3, #0
 800e806:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e808:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e80c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e80e:	f107 0308 	add.w	r3, r7, #8
 800e812:	4619      	mov	r1, r3
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f7ff fde3 	bl	800e3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e81a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e81e:	2106      	movs	r1, #6
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f000 f8cf 	bl	800e9c4 <SDMMC_GetCmdResp1>
 800e826:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e828:	69fb      	ldr	r3, [r7, #28]
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3720      	adds	r7, #32
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}

0800e832 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e832:	b580      	push	{r7, lr}
 800e834:	b088      	sub	sp, #32
 800e836:	af00      	add	r7, sp, #0
 800e838:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e83a:	2300      	movs	r3, #0
 800e83c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e83e:	2333      	movs	r3, #51	@ 0x33
 800e840:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e842:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e846:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e848:	2300      	movs	r3, #0
 800e84a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e84c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e850:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e852:	f107 0308 	add.w	r3, r7, #8
 800e856:	4619      	mov	r1, r3
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f7ff fdc1 	bl	800e3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e85e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e862:	2133      	movs	r1, #51	@ 0x33
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f000 f8ad 	bl	800e9c4 <SDMMC_GetCmdResp1>
 800e86a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e86c:	69fb      	ldr	r3, [r7, #28]
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3720      	adds	r7, #32
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e876:	b580      	push	{r7, lr}
 800e878:	b088      	sub	sp, #32
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e87e:	2300      	movs	r3, #0
 800e880:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e882:	2302      	movs	r3, #2
 800e884:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e886:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e88a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e88c:	2300      	movs	r3, #0
 800e88e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e890:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e894:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e896:	f107 0308 	add.w	r3, r7, #8
 800e89a:	4619      	mov	r1, r3
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f7ff fd9f 	bl	800e3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f000 f980 	bl	800eba8 <SDMMC_GetCmdResp2>
 800e8a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8aa:	69fb      	ldr	r3, [r7, #28]
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3720      	adds	r7, #32
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}

0800e8b4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b088      	sub	sp, #32
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e8c2:	2309      	movs	r3, #9
 800e8c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e8c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e8ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e8d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e8d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e8d6:	f107 0308 	add.w	r3, r7, #8
 800e8da:	4619      	mov	r1, r3
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f7ff fd7f 	bl	800e3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f000 f960 	bl	800eba8 <SDMMC_GetCmdResp2>
 800e8e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8ea:	69fb      	ldr	r3, [r7, #28]
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3720      	adds	r7, #32
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b088      	sub	sp, #32
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e8fe:	2300      	movs	r3, #0
 800e900:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e902:	2303      	movs	r3, #3
 800e904:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e906:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e90a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e90c:	2300      	movs	r3, #0
 800e90e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e910:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e914:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e916:	f107 0308 	add.w	r3, r7, #8
 800e91a:	4619      	mov	r1, r3
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f7ff fd5f 	bl	800e3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e922:	683a      	ldr	r2, [r7, #0]
 800e924:	2103      	movs	r1, #3
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f000 f9c8 	bl	800ecbc <SDMMC_GetCmdResp6>
 800e92c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e92e:	69fb      	ldr	r3, [r7, #28]
}
 800e930:	4618      	mov	r0, r3
 800e932:	3720      	adds	r7, #32
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}

0800e938 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b088      	sub	sp, #32
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e946:	230d      	movs	r3, #13
 800e948:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e94a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e94e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e950:	2300      	movs	r3, #0
 800e952:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e954:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e958:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e95a:	f107 0308 	add.w	r3, r7, #8
 800e95e:	4619      	mov	r1, r3
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f7ff fd3d 	bl	800e3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e96a:	210d      	movs	r1, #13
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f000 f829 	bl	800e9c4 <SDMMC_GetCmdResp1>
 800e972:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e974:	69fb      	ldr	r3, [r7, #28]
}
 800e976:	4618      	mov	r0, r3
 800e978:	3720      	adds	r7, #32
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}

0800e97e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800e97e:	b580      	push	{r7, lr}
 800e980:	b088      	sub	sp, #32
 800e982:	af00      	add	r7, sp, #0
 800e984:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e986:	2300      	movs	r3, #0
 800e988:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800e98a:	230d      	movs	r3, #13
 800e98c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e98e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e992:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e994:	2300      	movs	r3, #0
 800e996:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e998:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e99c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e99e:	f107 0308 	add.w	r3, r7, #8
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f7ff fd1b 	bl	800e3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800e9aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e9ae:	210d      	movs	r1, #13
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f000 f807 	bl	800e9c4 <SDMMC_GetCmdResp1>
 800e9b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9b8:	69fb      	ldr	r3, [r7, #28]
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3720      	adds	r7, #32
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
	...

0800e9c4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b088      	sub	sp, #32
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	60f8      	str	r0, [r7, #12]
 800e9cc:	460b      	mov	r3, r1
 800e9ce:	607a      	str	r2, [r7, #4]
 800e9d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e9d2:	4b70      	ldr	r3, [pc, #448]	@ (800eb94 <SDMMC_GetCmdResp1+0x1d0>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	4a70      	ldr	r2, [pc, #448]	@ (800eb98 <SDMMC_GetCmdResp1+0x1d4>)
 800e9d8:	fba2 2303 	umull	r2, r3, r2, r3
 800e9dc:	0a5a      	lsrs	r2, r3, #9
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	fb02 f303 	mul.w	r3, r2, r3
 800e9e4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	1e5a      	subs	r2, r3, #1
 800e9ea:	61fa      	str	r2, [r7, #28]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d102      	bne.n	800e9f6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e9f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e9f4:	e0c9      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9fa:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e9fc:	69ba      	ldr	r2, [r7, #24]
 800e9fe:	4b67      	ldr	r3, [pc, #412]	@ (800eb9c <SDMMC_GetCmdResp1+0x1d8>)
 800ea00:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d0ef      	beq.n	800e9e6 <SDMMC_GetCmdResp1+0x22>
 800ea06:	69bb      	ldr	r3, [r7, #24]
 800ea08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d1ea      	bne.n	800e9e6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea14:	f003 0304 	and.w	r3, r3, #4
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d004      	beq.n	800ea26 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2204      	movs	r2, #4
 800ea20:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea22:	2304      	movs	r3, #4
 800ea24:	e0b1      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea2a:	f003 0301 	and.w	r3, r3, #1
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d004      	beq.n	800ea3c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2201      	movs	r2, #1
 800ea36:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea38:	2301      	movs	r3, #1
 800ea3a:	e0a6      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	4a58      	ldr	r2, [pc, #352]	@ (800eba0 <SDMMC_GetCmdResp1+0x1dc>)
 800ea40:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ea42:	68f8      	ldr	r0, [r7, #12]
 800ea44:	f7ff fcf6 	bl	800e434 <SDMMC_GetCommandResponse>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	7afb      	ldrb	r3, [r7, #11]
 800ea4e:	4293      	cmp	r3, r2
 800ea50:	d001      	beq.n	800ea56 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea52:	2301      	movs	r3, #1
 800ea54:	e099      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ea56:	2100      	movs	r1, #0
 800ea58:	68f8      	ldr	r0, [r7, #12]
 800ea5a:	f7ff fcf8 	bl	800e44e <SDMMC_GetResponse>
 800ea5e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ea60:	697a      	ldr	r2, [r7, #20]
 800ea62:	4b50      	ldr	r3, [pc, #320]	@ (800eba4 <SDMMC_GetCmdResp1+0x1e0>)
 800ea64:	4013      	ands	r3, r2
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d101      	bne.n	800ea6e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	e08d      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	da02      	bge.n	800ea7a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ea74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ea78:	e087      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d001      	beq.n	800ea88 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ea84:	2340      	movs	r3, #64	@ 0x40
 800ea86:	e080      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d001      	beq.n	800ea96 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ea92:	2380      	movs	r3, #128	@ 0x80
 800ea94:	e079      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d002      	beq.n	800eaa6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800eaa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eaa4:	e071      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d002      	beq.n	800eab6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800eab0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eab4:	e069      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d002      	beq.n	800eac6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800eac0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eac4:	e061      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d002      	beq.n	800ead6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ead0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ead4:	e059      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d002      	beq.n	800eae6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800eae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eae4:	e051      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d002      	beq.n	800eaf6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eaf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800eaf4:	e049      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d002      	beq.n	800eb06 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800eb00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800eb04:	e041      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d002      	beq.n	800eb16 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800eb10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eb14:	e039      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d002      	beq.n	800eb26 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800eb20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800eb24:	e031      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d002      	beq.n	800eb36 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800eb30:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800eb34:	e029      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d002      	beq.n	800eb46 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800eb40:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800eb44:	e021      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d002      	beq.n	800eb56 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800eb50:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800eb54:	e019      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d002      	beq.n	800eb66 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800eb60:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800eb64:	e011      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d002      	beq.n	800eb76 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800eb70:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800eb74:	e009      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	f003 0308 	and.w	r3, r3, #8
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d002      	beq.n	800eb86 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800eb80:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800eb84:	e001      	b.n	800eb8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eb86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3720      	adds	r7, #32
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	24000000 	.word	0x24000000
 800eb98:	10624dd3 	.word	0x10624dd3
 800eb9c:	00200045 	.word	0x00200045
 800eba0:	002000c5 	.word	0x002000c5
 800eba4:	fdffe008 	.word	0xfdffe008

0800eba8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b085      	sub	sp, #20
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ebb0:	4b1f      	ldr	r3, [pc, #124]	@ (800ec30 <SDMMC_GetCmdResp2+0x88>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	4a1f      	ldr	r2, [pc, #124]	@ (800ec34 <SDMMC_GetCmdResp2+0x8c>)
 800ebb6:	fba2 2303 	umull	r2, r3, r2, r3
 800ebba:	0a5b      	lsrs	r3, r3, #9
 800ebbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ebc0:	fb02 f303 	mul.w	r3, r2, r3
 800ebc4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	1e5a      	subs	r2, r3, #1
 800ebca:	60fa      	str	r2, [r7, #12]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d102      	bne.n	800ebd6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ebd0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ebd4:	e026      	b.n	800ec24 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebda:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d0ef      	beq.n	800ebc6 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d1ea      	bne.n	800ebc6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebf4:	f003 0304 	and.w	r3, r3, #4
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d004      	beq.n	800ec06 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2204      	movs	r2, #4
 800ec00:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec02:	2304      	movs	r3, #4
 800ec04:	e00e      	b.n	800ec24 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec0a:	f003 0301 	and.w	r3, r3, #1
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d004      	beq.n	800ec1c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2201      	movs	r2, #1
 800ec16:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec18:	2301      	movs	r3, #1
 800ec1a:	e003      	b.n	800ec24 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	4a06      	ldr	r2, [pc, #24]	@ (800ec38 <SDMMC_GetCmdResp2+0x90>)
 800ec20:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ec22:	2300      	movs	r3, #0
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3714      	adds	r7, #20
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2e:	4770      	bx	lr
 800ec30:	24000000 	.word	0x24000000
 800ec34:	10624dd3 	.word	0x10624dd3
 800ec38:	002000c5 	.word	0x002000c5

0800ec3c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b085      	sub	sp, #20
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ec44:	4b1a      	ldr	r3, [pc, #104]	@ (800ecb0 <SDMMC_GetCmdResp3+0x74>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4a1a      	ldr	r2, [pc, #104]	@ (800ecb4 <SDMMC_GetCmdResp3+0x78>)
 800ec4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ec4e:	0a5b      	lsrs	r3, r3, #9
 800ec50:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec54:	fb02 f303 	mul.w	r3, r2, r3
 800ec58:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	1e5a      	subs	r2, r3, #1
 800ec5e:	60fa      	str	r2, [r7, #12]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d102      	bne.n	800ec6a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ec64:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ec68:	e01b      	b.n	800eca2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec6e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d0ef      	beq.n	800ec5a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d1ea      	bne.n	800ec5a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec88:	f003 0304 	and.w	r3, r3, #4
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d004      	beq.n	800ec9a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2204      	movs	r2, #4
 800ec94:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec96:	2304      	movs	r3, #4
 800ec98:	e003      	b.n	800eca2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	4a06      	ldr	r2, [pc, #24]	@ (800ecb8 <SDMMC_GetCmdResp3+0x7c>)
 800ec9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800eca0:	2300      	movs	r3, #0
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3714      	adds	r7, #20
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr
 800ecae:	bf00      	nop
 800ecb0:	24000000 	.word	0x24000000
 800ecb4:	10624dd3 	.word	0x10624dd3
 800ecb8:	002000c5 	.word	0x002000c5

0800ecbc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b088      	sub	sp, #32
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	607a      	str	r2, [r7, #4]
 800ecc8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ecca:	4b35      	ldr	r3, [pc, #212]	@ (800eda0 <SDMMC_GetCmdResp6+0xe4>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	4a35      	ldr	r2, [pc, #212]	@ (800eda4 <SDMMC_GetCmdResp6+0xe8>)
 800ecd0:	fba2 2303 	umull	r2, r3, r2, r3
 800ecd4:	0a5b      	lsrs	r3, r3, #9
 800ecd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ecda:	fb02 f303 	mul.w	r3, r2, r3
 800ecde:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ece0:	69fb      	ldr	r3, [r7, #28]
 800ece2:	1e5a      	subs	r2, r3, #1
 800ece4:	61fa      	str	r2, [r7, #28]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d102      	bne.n	800ecf0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ecea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ecee:	e052      	b.n	800ed96 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecf4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ecf6:	69bb      	ldr	r3, [r7, #24]
 800ecf8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d0ef      	beq.n	800ece0 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ed00:	69bb      	ldr	r3, [r7, #24]
 800ed02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d1ea      	bne.n	800ece0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed0e:	f003 0304 	and.w	r3, r3, #4
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d004      	beq.n	800ed20 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2204      	movs	r2, #4
 800ed1a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ed1c:	2304      	movs	r3, #4
 800ed1e:	e03a      	b.n	800ed96 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed24:	f003 0301 	and.w	r3, r3, #1
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d004      	beq.n	800ed36 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	2201      	movs	r2, #1
 800ed30:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed32:	2301      	movs	r3, #1
 800ed34:	e02f      	b.n	800ed96 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ed36:	68f8      	ldr	r0, [r7, #12]
 800ed38:	f7ff fb7c 	bl	800e434 <SDMMC_GetCommandResponse>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	461a      	mov	r2, r3
 800ed40:	7afb      	ldrb	r3, [r7, #11]
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d001      	beq.n	800ed4a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed46:	2301      	movs	r3, #1
 800ed48:	e025      	b.n	800ed96 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	4a16      	ldr	r2, [pc, #88]	@ (800eda8 <SDMMC_GetCmdResp6+0xec>)
 800ed4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ed50:	2100      	movs	r1, #0
 800ed52:	68f8      	ldr	r0, [r7, #12]
 800ed54:	f7ff fb7b 	bl	800e44e <SDMMC_GetResponse>
 800ed58:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d106      	bne.n	800ed72 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	0c1b      	lsrs	r3, r3, #16
 800ed68:	b29a      	uxth	r2, r3
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	e011      	b.n	800ed96 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d002      	beq.n	800ed82 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ed7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ed80:	e009      	b.n	800ed96 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d002      	beq.n	800ed92 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ed8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ed90:	e001      	b.n	800ed96 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ed92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3720      	adds	r7, #32
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	24000000 	.word	0x24000000
 800eda4:	10624dd3 	.word	0x10624dd3
 800eda8:	002000c5 	.word	0x002000c5

0800edac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800edac:	b480      	push	{r7}
 800edae:	b085      	sub	sp, #20
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800edb4:	4b22      	ldr	r3, [pc, #136]	@ (800ee40 <SDMMC_GetCmdResp7+0x94>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	4a22      	ldr	r2, [pc, #136]	@ (800ee44 <SDMMC_GetCmdResp7+0x98>)
 800edba:	fba2 2303 	umull	r2, r3, r2, r3
 800edbe:	0a5b      	lsrs	r3, r3, #9
 800edc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800edc4:	fb02 f303 	mul.w	r3, r2, r3
 800edc8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	1e5a      	subs	r2, r3, #1
 800edce:	60fa      	str	r2, [r7, #12]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d102      	bne.n	800edda <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800edd4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800edd8:	e02c      	b.n	800ee34 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edde:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d0ef      	beq.n	800edca <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d1ea      	bne.n	800edca <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edf8:	f003 0304 	and.w	r3, r3, #4
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d004      	beq.n	800ee0a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2204      	movs	r2, #4
 800ee04:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ee06:	2304      	movs	r3, #4
 800ee08:	e014      	b.n	800ee34 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee0e:	f003 0301 	and.w	r3, r3, #1
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d004      	beq.n	800ee20 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2201      	movs	r2, #1
 800ee1a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	e009      	b.n	800ee34 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d002      	beq.n	800ee32 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2240      	movs	r2, #64	@ 0x40
 800ee30:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ee32:	2300      	movs	r3, #0

}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3714      	adds	r7, #20
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr
 800ee40:	24000000 	.word	0x24000000
 800ee44:	10624dd3 	.word	0x10624dd3

0800ee48 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ee50:	4b11      	ldr	r3, [pc, #68]	@ (800ee98 <SDMMC_GetCmdError+0x50>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	4a11      	ldr	r2, [pc, #68]	@ (800ee9c <SDMMC_GetCmdError+0x54>)
 800ee56:	fba2 2303 	umull	r2, r3, r2, r3
 800ee5a:	0a5b      	lsrs	r3, r3, #9
 800ee5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee60:	fb02 f303 	mul.w	r3, r2, r3
 800ee64:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	1e5a      	subs	r2, r3, #1
 800ee6a:	60fa      	str	r2, [r7, #12]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d102      	bne.n	800ee76 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ee70:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ee74:	e009      	b.n	800ee8a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d0f1      	beq.n	800ee66 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	4a06      	ldr	r2, [pc, #24]	@ (800eea0 <SDMMC_GetCmdError+0x58>)
 800ee86:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800ee88:	2300      	movs	r3, #0
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3714      	adds	r7, #20
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee94:	4770      	bx	lr
 800ee96:	bf00      	nop
 800ee98:	24000000 	.word	0x24000000
 800ee9c:	10624dd3 	.word	0x10624dd3
 800eea0:	002000c5 	.word	0x002000c5

0800eea4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800eea8:	4904      	ldr	r1, [pc, #16]	@ (800eebc <MX_FATFS_Init+0x18>)
 800eeaa:	4805      	ldr	r0, [pc, #20]	@ (800eec0 <MX_FATFS_Init+0x1c>)
 800eeac:	f003 f916 	bl	80120dc <FATFS_LinkDriver>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	4b03      	ldr	r3, [pc, #12]	@ (800eec4 <MX_FATFS_Init+0x20>)
 800eeb6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800eeb8:	bf00      	nop
 800eeba:	bd80      	pop	{r7, pc}
 800eebc:	24000a3c 	.word	0x24000a3c
 800eec0:	08017e50 	.word	0x08017e50
 800eec4:	24000a38 	.word	0x24000a38

0800eec8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800eec8:	b480      	push	{r7}
 800eeca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800eecc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800eece:	4618      	mov	r0, r3
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr

0800eed8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b082      	sub	sp, #8
 800eedc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800eede:	2300      	movs	r3, #0
 800eee0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800eee2:	f000 f885 	bl	800eff0 <BSP_SD_IsDetected>
 800eee6:	4603      	mov	r3, r0
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d001      	beq.n	800eef0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800eeec:	2302      	movs	r3, #2
 800eeee:	e012      	b.n	800ef16 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800eef0:	480b      	ldr	r0, [pc, #44]	@ (800ef20 <BSP_SD_Init+0x48>)
 800eef2:	f7f9 fdc5 	bl	8008a80 <HAL_SD_Init>
 800eef6:	4603      	mov	r3, r0
 800eef8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800eefa:	79fb      	ldrb	r3, [r7, #7]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d109      	bne.n	800ef14 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ef00:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ef04:	4806      	ldr	r0, [pc, #24]	@ (800ef20 <BSP_SD_Init+0x48>)
 800ef06:	f7fa fc7b 	bl	8009800 <HAL_SD_ConfigWideBusOperation>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ef10:	2301      	movs	r3, #1
 800ef12:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ef14:	79fb      	ldrb	r3, [r7, #7]
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3708      	adds	r7, #8
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
 800ef1e:	bf00      	nop
 800ef20:	2400008c 	.word	0x2400008c

0800ef24 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b086      	sub	sp, #24
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	60f8      	str	r0, [r7, #12]
 800ef2c:	60b9      	str	r1, [r7, #8]
 800ef2e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ef30:	2300      	movs	r3, #0
 800ef32:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	68ba      	ldr	r2, [r7, #8]
 800ef38:	68f9      	ldr	r1, [r7, #12]
 800ef3a:	4806      	ldr	r0, [pc, #24]	@ (800ef54 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ef3c:	f7f9 fec0 	bl	8008cc0 <HAL_SD_ReadBlocks_DMA>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d001      	beq.n	800ef4a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ef46:	2301      	movs	r3, #1
 800ef48:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ef4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3718      	adds	r7, #24
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}
 800ef54:	2400008c 	.word	0x2400008c

0800ef58 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b086      	sub	sp, #24
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	60f8      	str	r0, [r7, #12]
 800ef60:	60b9      	str	r1, [r7, #8]
 800ef62:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ef64:	2300      	movs	r3, #0
 800ef66:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	68ba      	ldr	r2, [r7, #8]
 800ef6c:	68f9      	ldr	r1, [r7, #12]
 800ef6e:	4806      	ldr	r0, [pc, #24]	@ (800ef88 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ef70:	f7f9 ff4e 	bl	8008e10 <HAL_SD_WriteBlocks_DMA>
 800ef74:	4603      	mov	r3, r0
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d001      	beq.n	800ef7e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ef7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3718      	adds	r7, #24
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}
 800ef88:	2400008c 	.word	0x2400008c

0800ef8c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ef90:	4805      	ldr	r0, [pc, #20]	@ (800efa8 <BSP_SD_GetCardState+0x1c>)
 800ef92:	f7fa fd47 	bl	8009a24 <HAL_SD_GetCardState>
 800ef96:	4603      	mov	r3, r0
 800ef98:	2b04      	cmp	r3, #4
 800ef9a:	bf14      	ite	ne
 800ef9c:	2301      	movne	r3, #1
 800ef9e:	2300      	moveq	r3, #0
 800efa0:	b2db      	uxtb	r3, r3
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	bd80      	pop	{r7, pc}
 800efa6:	bf00      	nop
 800efa8:	2400008c 	.word	0x2400008c

0800efac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800efb4:	6879      	ldr	r1, [r7, #4]
 800efb6:	4803      	ldr	r0, [pc, #12]	@ (800efc4 <BSP_SD_GetCardInfo+0x18>)
 800efb8:	f7fa fbf6 	bl	80097a8 <HAL_SD_GetCardInfo>
}
 800efbc:	bf00      	nop
 800efbe:	3708      	adds	r7, #8
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	2400008c 	.word	0x2400008c

0800efc8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800efd0:	f000 f990 	bl	800f2f4 <BSP_SD_WriteCpltCallback>
}
 800efd4:	bf00      	nop
 800efd6:	3708      	adds	r7, #8
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800efe4:	f000 f998 	bl	800f318 <BSP_SD_ReadCpltCallback>
}
 800efe8:	bf00      	nop
 800efea:	3708      	adds	r7, #8
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b083      	sub	sp, #12
 800eff4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800eff6:	2301      	movs	r3, #1
 800eff8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800effa:	79fb      	ldrb	r3, [r7, #7]
 800effc:	b2db      	uxtb	r3, r3
}
 800effe:	4618      	mov	r0, r3
 800f000:	370c      	adds	r7, #12
 800f002:	46bd      	mov	sp, r7
 800f004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f008:	4770      	bx	lr

0800f00a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f00a:	b580      	push	{r7, lr}
 800f00c:	b084      	sub	sp, #16
 800f00e:	af00      	add	r7, sp, #0
 800f010:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800f012:	f003 f969 	bl	80122e8 <osKernelGetTickCount>
 800f016:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800f018:	e006      	b.n	800f028 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f01a:	f7ff ffb7 	bl	800ef8c <BSP_SD_GetCardState>
 800f01e:	4603      	mov	r3, r0
 800f020:	2b00      	cmp	r3, #0
 800f022:	d101      	bne.n	800f028 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f024:	2300      	movs	r3, #0
 800f026:	e009      	b.n	800f03c <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800f028:	f003 f95e 	bl	80122e8 <osKernelGetTickCount>
 800f02c:	4602      	mov	r2, r0
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	1ad3      	subs	r3, r2, r3
 800f032:	687a      	ldr	r2, [r7, #4]
 800f034:	429a      	cmp	r2, r3
 800f036:	d8f0      	bhi.n	800f01a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f038:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3710      	adds	r7, #16
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b082      	sub	sp, #8
 800f048:	af00      	add	r7, sp, #0
 800f04a:	4603      	mov	r3, r0
 800f04c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f04e:	4b0b      	ldr	r3, [pc, #44]	@ (800f07c <SD_CheckStatus+0x38>)
 800f050:	2201      	movs	r2, #1
 800f052:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f054:	f7ff ff9a 	bl	800ef8c <BSP_SD_GetCardState>
 800f058:	4603      	mov	r3, r0
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d107      	bne.n	800f06e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f05e:	4b07      	ldr	r3, [pc, #28]	@ (800f07c <SD_CheckStatus+0x38>)
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	b2db      	uxtb	r3, r3
 800f064:	f023 0301 	bic.w	r3, r3, #1
 800f068:	b2da      	uxtb	r2, r3
 800f06a:	4b04      	ldr	r3, [pc, #16]	@ (800f07c <SD_CheckStatus+0x38>)
 800f06c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f06e:	4b03      	ldr	r3, [pc, #12]	@ (800f07c <SD_CheckStatus+0x38>)
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	b2db      	uxtb	r3, r3
}
 800f074:	4618      	mov	r0, r3
 800f076:	3708      	adds	r7, #8
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}
 800f07c:	2400000d 	.word	0x2400000d

0800f080 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b082      	sub	sp, #8
 800f084:	af00      	add	r7, sp, #0
 800f086:	4603      	mov	r3, r0
 800f088:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f08a:	4b1c      	ldr	r3, [pc, #112]	@ (800f0fc <SD_initialize+0x7c>)
 800f08c:	2201      	movs	r2, #1
 800f08e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800f090:	f003 f8e2 	bl	8012258 <osKernelGetState>
 800f094:	4603      	mov	r3, r0
 800f096:	2b02      	cmp	r3, #2
 800f098:	d129      	bne.n	800f0ee <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800f09a:	f7ff ff1d 	bl	800eed8 <BSP_SD_Init>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d107      	bne.n	800f0b4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800f0a4:	79fb      	ldrb	r3, [r7, #7]
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7ff ffcc 	bl	800f044 <SD_CheckStatus>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	4b12      	ldr	r3, [pc, #72]	@ (800f0fc <SD_initialize+0x7c>)
 800f0b2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800f0b4:	4b11      	ldr	r3, [pc, #68]	@ (800f0fc <SD_initialize+0x7c>)
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	b2db      	uxtb	r3, r3
 800f0ba:	2b01      	cmp	r3, #1
 800f0bc:	d017      	beq.n	800f0ee <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800f0be:	4b10      	ldr	r3, [pc, #64]	@ (800f100 <SD_initialize+0x80>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d107      	bne.n	800f0d6 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	2102      	movs	r1, #2
 800f0ca:	200a      	movs	r0, #10
 800f0cc:	f003 fb1c 	bl	8012708 <osMessageQueueNew>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	4a0b      	ldr	r2, [pc, #44]	@ (800f100 <SD_initialize+0x80>)
 800f0d4:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800f0d6:	4b0a      	ldr	r3, [pc, #40]	@ (800f100 <SD_initialize+0x80>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d107      	bne.n	800f0ee <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800f0de:	4b07      	ldr	r3, [pc, #28]	@ (800f0fc <SD_initialize+0x7c>)
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	b2db      	uxtb	r3, r3
 800f0e4:	f043 0301 	orr.w	r3, r3, #1
 800f0e8:	b2da      	uxtb	r2, r3
 800f0ea:	4b04      	ldr	r3, [pc, #16]	@ (800f0fc <SD_initialize+0x7c>)
 800f0ec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800f0ee:	4b03      	ldr	r3, [pc, #12]	@ (800f0fc <SD_initialize+0x7c>)
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	b2db      	uxtb	r3, r3
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3708      	adds	r7, #8
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}
 800f0fc:	2400000d 	.word	0x2400000d
 800f100:	24000a40 	.word	0x24000a40

0800f104 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b082      	sub	sp, #8
 800f108:	af00      	add	r7, sp, #0
 800f10a:	4603      	mov	r3, r0
 800f10c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f10e:	79fb      	ldrb	r3, [r7, #7]
 800f110:	4618      	mov	r0, r3
 800f112:	f7ff ff97 	bl	800f044 <SD_CheckStatus>
 800f116:	4603      	mov	r3, r0
}
 800f118:	4618      	mov	r0, r3
 800f11a:	3708      	adds	r7, #8
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b088      	sub	sp, #32
 800f124:	af00      	add	r7, sp, #0
 800f126:	60b9      	str	r1, [r7, #8]
 800f128:	607a      	str	r2, [r7, #4]
 800f12a:	603b      	str	r3, [r7, #0]
 800f12c:	4603      	mov	r3, r0
 800f12e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800f130:	2301      	movs	r3, #1
 800f132:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f134:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f138:	f7ff ff67 	bl	800f00a <SD_CheckStatusWithTimeout>
 800f13c:	4603      	mov	r3, r0
 800f13e:	2b00      	cmp	r3, #0
 800f140:	da01      	bge.n	800f146 <SD_read+0x26>
  {
    return res;
 800f142:	7ffb      	ldrb	r3, [r7, #31]
 800f144:	e02f      	b.n	800f1a6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800f146:	683a      	ldr	r2, [r7, #0]
 800f148:	6879      	ldr	r1, [r7, #4]
 800f14a:	68b8      	ldr	r0, [r7, #8]
 800f14c:	f7ff feea 	bl	800ef24 <BSP_SD_ReadBlocks_DMA>
 800f150:	4603      	mov	r3, r0
 800f152:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800f154:	7fbb      	ldrb	r3, [r7, #30]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d124      	bne.n	800f1a4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f15a:	4b15      	ldr	r3, [pc, #84]	@ (800f1b0 <SD_read+0x90>)
 800f15c:	6818      	ldr	r0, [r3, #0]
 800f15e:	f107 0112 	add.w	r1, r7, #18
 800f162:	f247 5330 	movw	r3, #30000	@ 0x7530
 800f166:	2200      	movs	r2, #0
 800f168:	f003 fba2 	bl	80128b0 <osMessageQueueGet>
 800f16c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800f16e:	69bb      	ldr	r3, [r7, #24]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d117      	bne.n	800f1a4 <SD_read+0x84>
 800f174:	8a7b      	ldrh	r3, [r7, #18]
 800f176:	2b01      	cmp	r3, #1
 800f178:	d114      	bne.n	800f1a4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800f17a:	f003 f8b5 	bl	80122e8 <osKernelGetTickCount>
 800f17e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f180:	e007      	b.n	800f192 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f182:	f7ff ff03 	bl	800ef8c <BSP_SD_GetCardState>
 800f186:	4603      	mov	r3, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d102      	bne.n	800f192 <SD_read+0x72>
              {
                res = RES_OK;
 800f18c:	2300      	movs	r3, #0
 800f18e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800f190:	e008      	b.n	800f1a4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f192:	f003 f8a9 	bl	80122e8 <osKernelGetTickCount>
 800f196:	4602      	mov	r2, r0
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	1ad3      	subs	r3, r2, r3
 800f19c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d9ee      	bls.n	800f182 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800f1a4:	7ffb      	ldrb	r3, [r7, #31]
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3720      	adds	r7, #32
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
 800f1ae:	bf00      	nop
 800f1b0:	24000a40 	.word	0x24000a40

0800f1b4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b088      	sub	sp, #32
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	60b9      	str	r1, [r7, #8]
 800f1bc:	607a      	str	r2, [r7, #4]
 800f1be:	603b      	str	r3, [r7, #0]
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f1c8:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f1cc:	f7ff ff1d 	bl	800f00a <SD_CheckStatusWithTimeout>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	da01      	bge.n	800f1da <SD_write+0x26>
  {
    return res;
 800f1d6:	7ffb      	ldrb	r3, [r7, #31]
 800f1d8:	e02d      	b.n	800f236 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f1da:	683a      	ldr	r2, [r7, #0]
 800f1dc:	6879      	ldr	r1, [r7, #4]
 800f1de:	68b8      	ldr	r0, [r7, #8]
 800f1e0:	f7ff feba 	bl	800ef58 <BSP_SD_WriteBlocks_DMA>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d124      	bne.n	800f234 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f1ea:	4b15      	ldr	r3, [pc, #84]	@ (800f240 <SD_write+0x8c>)
 800f1ec:	6818      	ldr	r0, [r3, #0]
 800f1ee:	f107 0112 	add.w	r1, r7, #18
 800f1f2:	f247 5330 	movw	r3, #30000	@ 0x7530
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	f003 fb5a 	bl	80128b0 <osMessageQueueGet>
 800f1fc:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800f1fe:	69bb      	ldr	r3, [r7, #24]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d117      	bne.n	800f234 <SD_write+0x80>
 800f204:	8a7b      	ldrh	r3, [r7, #18]
 800f206:	2b02      	cmp	r3, #2
 800f208:	d114      	bne.n	800f234 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800f20a:	f003 f86d 	bl	80122e8 <osKernelGetTickCount>
 800f20e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800f210:	e007      	b.n	800f222 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f212:	f7ff febb 	bl	800ef8c <BSP_SD_GetCardState>
 800f216:	4603      	mov	r3, r0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d102      	bne.n	800f222 <SD_write+0x6e>
          {
            res = RES_OK;
 800f21c:	2300      	movs	r3, #0
 800f21e:	77fb      	strb	r3, [r7, #31]
            break;
 800f220:	e008      	b.n	800f234 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800f222:	f003 f861 	bl	80122e8 <osKernelGetTickCount>
 800f226:	4602      	mov	r2, r0
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	1ad3      	subs	r3, r2, r3
 800f22c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f230:	4293      	cmp	r3, r2
 800f232:	d9ee      	bls.n	800f212 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800f234:	7ffb      	ldrb	r3, [r7, #31]
}
 800f236:	4618      	mov	r0, r3
 800f238:	3720      	adds	r7, #32
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	bf00      	nop
 800f240:	24000a40 	.word	0x24000a40

0800f244 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b08c      	sub	sp, #48	@ 0x30
 800f248:	af00      	add	r7, sp, #0
 800f24a:	4603      	mov	r3, r0
 800f24c:	603a      	str	r2, [r7, #0]
 800f24e:	71fb      	strb	r3, [r7, #7]
 800f250:	460b      	mov	r3, r1
 800f252:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f254:	2301      	movs	r3, #1
 800f256:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f25a:	4b25      	ldr	r3, [pc, #148]	@ (800f2f0 <SD_ioctl+0xac>)
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	b2db      	uxtb	r3, r3
 800f260:	f003 0301 	and.w	r3, r3, #1
 800f264:	2b00      	cmp	r3, #0
 800f266:	d001      	beq.n	800f26c <SD_ioctl+0x28>
 800f268:	2303      	movs	r3, #3
 800f26a:	e03c      	b.n	800f2e6 <SD_ioctl+0xa2>

  switch (cmd)
 800f26c:	79bb      	ldrb	r3, [r7, #6]
 800f26e:	2b03      	cmp	r3, #3
 800f270:	d834      	bhi.n	800f2dc <SD_ioctl+0x98>
 800f272:	a201      	add	r2, pc, #4	@ (adr r2, 800f278 <SD_ioctl+0x34>)
 800f274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f278:	0800f289 	.word	0x0800f289
 800f27c:	0800f291 	.word	0x0800f291
 800f280:	0800f2a9 	.word	0x0800f2a9
 800f284:	0800f2c3 	.word	0x0800f2c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f288:	2300      	movs	r3, #0
 800f28a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f28e:	e028      	b.n	800f2e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f290:	f107 0308 	add.w	r3, r7, #8
 800f294:	4618      	mov	r0, r3
 800f296:	f7ff fe89 	bl	800efac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f29a:	6a3a      	ldr	r2, [r7, #32]
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f2a6:	e01c      	b.n	800f2e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f2a8:	f107 0308 	add.w	r3, r7, #8
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f7ff fe7d 	bl	800efac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2b4:	b29a      	uxth	r2, r3
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f2c0:	e00f      	b.n	800f2e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f2c2:	f107 0308 	add.w	r3, r7, #8
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7ff fe70 	bl	800efac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ce:	0a5a      	lsrs	r2, r3, #9
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f2da:	e002      	b.n	800f2e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f2dc:	2304      	movs	r3, #4
 800f2de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f2e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3730      	adds	r7, #48	@ 0x30
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	2400000d 	.word	0x2400000d

0800f2f4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800f2fa:	2302      	movs	r3, #2
 800f2fc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800f2fe:	4b05      	ldr	r3, [pc, #20]	@ (800f314 <BSP_SD_WriteCpltCallback+0x20>)
 800f300:	6818      	ldr	r0, [r3, #0]
 800f302:	1db9      	adds	r1, r7, #6
 800f304:	2300      	movs	r3, #0
 800f306:	2200      	movs	r2, #0
 800f308:	f003 fa72 	bl	80127f0 <osMessageQueuePut>
#endif
}
 800f30c:	bf00      	nop
 800f30e:	3708      	adds	r7, #8
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}
 800f314:	24000a40 	.word	0x24000a40

0800f318 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800f31e:	2301      	movs	r3, #1
 800f320:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800f322:	4b05      	ldr	r3, [pc, #20]	@ (800f338 <BSP_SD_ReadCpltCallback+0x20>)
 800f324:	6818      	ldr	r0, [r3, #0]
 800f326:	1db9      	adds	r1, r7, #6
 800f328:	2300      	movs	r3, #0
 800f32a:	2200      	movs	r2, #0
 800f32c:	f003 fa60 	bl	80127f0 <osMessageQueuePut>
#endif
}
 800f330:	bf00      	nop
 800f332:	3708      	adds	r7, #8
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	24000a40 	.word	0x24000a40

0800f33c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	4603      	mov	r3, r0
 800f344:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f346:	79fb      	ldrb	r3, [r7, #7]
 800f348:	4a08      	ldr	r2, [pc, #32]	@ (800f36c <disk_status+0x30>)
 800f34a:	009b      	lsls	r3, r3, #2
 800f34c:	4413      	add	r3, r2
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	79fa      	ldrb	r2, [r7, #7]
 800f354:	4905      	ldr	r1, [pc, #20]	@ (800f36c <disk_status+0x30>)
 800f356:	440a      	add	r2, r1
 800f358:	7a12      	ldrb	r2, [r2, #8]
 800f35a:	4610      	mov	r0, r2
 800f35c:	4798      	blx	r3
 800f35e:	4603      	mov	r3, r0
 800f360:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f362:	7bfb      	ldrb	r3, [r7, #15]
}
 800f364:	4618      	mov	r0, r3
 800f366:	3710      	adds	r7, #16
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	24000a6c 	.word	0x24000a6c

0800f370 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b084      	sub	sp, #16
 800f374:	af00      	add	r7, sp, #0
 800f376:	4603      	mov	r3, r0
 800f378:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f37a:	2300      	movs	r3, #0
 800f37c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f37e:	79fb      	ldrb	r3, [r7, #7]
 800f380:	4a0d      	ldr	r2, [pc, #52]	@ (800f3b8 <disk_initialize+0x48>)
 800f382:	5cd3      	ldrb	r3, [r2, r3]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d111      	bne.n	800f3ac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f388:	79fb      	ldrb	r3, [r7, #7]
 800f38a:	4a0b      	ldr	r2, [pc, #44]	@ (800f3b8 <disk_initialize+0x48>)
 800f38c:	2101      	movs	r1, #1
 800f38e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f390:	79fb      	ldrb	r3, [r7, #7]
 800f392:	4a09      	ldr	r2, [pc, #36]	@ (800f3b8 <disk_initialize+0x48>)
 800f394:	009b      	lsls	r3, r3, #2
 800f396:	4413      	add	r3, r2
 800f398:	685b      	ldr	r3, [r3, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	79fa      	ldrb	r2, [r7, #7]
 800f39e:	4906      	ldr	r1, [pc, #24]	@ (800f3b8 <disk_initialize+0x48>)
 800f3a0:	440a      	add	r2, r1
 800f3a2:	7a12      	ldrb	r2, [r2, #8]
 800f3a4:	4610      	mov	r0, r2
 800f3a6:	4798      	blx	r3
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3710      	adds	r7, #16
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	24000a6c 	.word	0x24000a6c

0800f3bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f3bc:	b590      	push	{r4, r7, lr}
 800f3be:	b087      	sub	sp, #28
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	60b9      	str	r1, [r7, #8]
 800f3c4:	607a      	str	r2, [r7, #4]
 800f3c6:	603b      	str	r3, [r7, #0]
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f3cc:	7bfb      	ldrb	r3, [r7, #15]
 800f3ce:	4a0a      	ldr	r2, [pc, #40]	@ (800f3f8 <disk_read+0x3c>)
 800f3d0:	009b      	lsls	r3, r3, #2
 800f3d2:	4413      	add	r3, r2
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	689c      	ldr	r4, [r3, #8]
 800f3d8:	7bfb      	ldrb	r3, [r7, #15]
 800f3da:	4a07      	ldr	r2, [pc, #28]	@ (800f3f8 <disk_read+0x3c>)
 800f3dc:	4413      	add	r3, r2
 800f3de:	7a18      	ldrb	r0, [r3, #8]
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	68b9      	ldr	r1, [r7, #8]
 800f3e6:	47a0      	blx	r4
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	75fb      	strb	r3, [r7, #23]
  return res;
 800f3ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	371c      	adds	r7, #28
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd90      	pop	{r4, r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	24000a6c 	.word	0x24000a6c

0800f3fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f3fc:	b590      	push	{r4, r7, lr}
 800f3fe:	b087      	sub	sp, #28
 800f400:	af00      	add	r7, sp, #0
 800f402:	60b9      	str	r1, [r7, #8]
 800f404:	607a      	str	r2, [r7, #4]
 800f406:	603b      	str	r3, [r7, #0]
 800f408:	4603      	mov	r3, r0
 800f40a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f40c:	7bfb      	ldrb	r3, [r7, #15]
 800f40e:	4a0a      	ldr	r2, [pc, #40]	@ (800f438 <disk_write+0x3c>)
 800f410:	009b      	lsls	r3, r3, #2
 800f412:	4413      	add	r3, r2
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	68dc      	ldr	r4, [r3, #12]
 800f418:	7bfb      	ldrb	r3, [r7, #15]
 800f41a:	4a07      	ldr	r2, [pc, #28]	@ (800f438 <disk_write+0x3c>)
 800f41c:	4413      	add	r3, r2
 800f41e:	7a18      	ldrb	r0, [r3, #8]
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	687a      	ldr	r2, [r7, #4]
 800f424:	68b9      	ldr	r1, [r7, #8]
 800f426:	47a0      	blx	r4
 800f428:	4603      	mov	r3, r0
 800f42a:	75fb      	strb	r3, [r7, #23]
  return res;
 800f42c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f42e:	4618      	mov	r0, r3
 800f430:	371c      	adds	r7, #28
 800f432:	46bd      	mov	sp, r7
 800f434:	bd90      	pop	{r4, r7, pc}
 800f436:	bf00      	nop
 800f438:	24000a6c 	.word	0x24000a6c

0800f43c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b084      	sub	sp, #16
 800f440:	af00      	add	r7, sp, #0
 800f442:	4603      	mov	r3, r0
 800f444:	603a      	str	r2, [r7, #0]
 800f446:	71fb      	strb	r3, [r7, #7]
 800f448:	460b      	mov	r3, r1
 800f44a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f44c:	79fb      	ldrb	r3, [r7, #7]
 800f44e:	4a09      	ldr	r2, [pc, #36]	@ (800f474 <disk_ioctl+0x38>)
 800f450:	009b      	lsls	r3, r3, #2
 800f452:	4413      	add	r3, r2
 800f454:	685b      	ldr	r3, [r3, #4]
 800f456:	691b      	ldr	r3, [r3, #16]
 800f458:	79fa      	ldrb	r2, [r7, #7]
 800f45a:	4906      	ldr	r1, [pc, #24]	@ (800f474 <disk_ioctl+0x38>)
 800f45c:	440a      	add	r2, r1
 800f45e:	7a10      	ldrb	r0, [r2, #8]
 800f460:	79b9      	ldrb	r1, [r7, #6]
 800f462:	683a      	ldr	r2, [r7, #0]
 800f464:	4798      	blx	r3
 800f466:	4603      	mov	r3, r0
 800f468:	73fb      	strb	r3, [r7, #15]
  return res;
 800f46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3710      	adds	r7, #16
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}
 800f474:	24000a6c 	.word	0x24000a6c

0800f478 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f478:	b480      	push	{r7}
 800f47a:	b085      	sub	sp, #20
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	3301      	adds	r3, #1
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f488:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f48c:	021b      	lsls	r3, r3, #8
 800f48e:	b21a      	sxth	r2, r3
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	b21b      	sxth	r3, r3
 800f496:	4313      	orrs	r3, r2
 800f498:	b21b      	sxth	r3, r3
 800f49a:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f49c:	89fb      	ldrh	r3, [r7, #14]
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3714      	adds	r7, #20
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a8:	4770      	bx	lr

0800f4aa <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f4aa:	b480      	push	{r7}
 800f4ac:	b085      	sub	sp, #20
 800f4ae:	af00      	add	r7, sp, #0
 800f4b0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	3303      	adds	r3, #3
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	021b      	lsls	r3, r3, #8
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	3202      	adds	r2, #2
 800f4c2:	7812      	ldrb	r2, [r2, #0]
 800f4c4:	4313      	orrs	r3, r2
 800f4c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	021b      	lsls	r3, r3, #8
 800f4cc:	687a      	ldr	r2, [r7, #4]
 800f4ce:	3201      	adds	r2, #1
 800f4d0:	7812      	ldrb	r2, [r2, #0]
 800f4d2:	4313      	orrs	r3, r2
 800f4d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	021b      	lsls	r3, r3, #8
 800f4da:	687a      	ldr	r2, [r7, #4]
 800f4dc:	7812      	ldrb	r2, [r2, #0]
 800f4de:	4313      	orrs	r3, r2
 800f4e0:	60fb      	str	r3, [r7, #12]
	return rv;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3714      	adds	r7, #20
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ee:	4770      	bx	lr

0800f4f0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b083      	sub	sp, #12
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	460b      	mov	r3, r1
 800f4fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	1c5a      	adds	r2, r3, #1
 800f500:	607a      	str	r2, [r7, #4]
 800f502:	887a      	ldrh	r2, [r7, #2]
 800f504:	b2d2      	uxtb	r2, r2
 800f506:	701a      	strb	r2, [r3, #0]
 800f508:	887b      	ldrh	r3, [r7, #2]
 800f50a:	0a1b      	lsrs	r3, r3, #8
 800f50c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	1c5a      	adds	r2, r3, #1
 800f512:	607a      	str	r2, [r7, #4]
 800f514:	887a      	ldrh	r2, [r7, #2]
 800f516:	b2d2      	uxtb	r2, r2
 800f518:	701a      	strb	r2, [r3, #0]
}
 800f51a:	bf00      	nop
 800f51c:	370c      	adds	r7, #12
 800f51e:	46bd      	mov	sp, r7
 800f520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f524:	4770      	bx	lr

0800f526 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f526:	b480      	push	{r7}
 800f528:	b083      	sub	sp, #12
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	6078      	str	r0, [r7, #4]
 800f52e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	1c5a      	adds	r2, r3, #1
 800f534:	607a      	str	r2, [r7, #4]
 800f536:	683a      	ldr	r2, [r7, #0]
 800f538:	b2d2      	uxtb	r2, r2
 800f53a:	701a      	strb	r2, [r3, #0]
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	0a1b      	lsrs	r3, r3, #8
 800f540:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	1c5a      	adds	r2, r3, #1
 800f546:	607a      	str	r2, [r7, #4]
 800f548:	683a      	ldr	r2, [r7, #0]
 800f54a:	b2d2      	uxtb	r2, r2
 800f54c:	701a      	strb	r2, [r3, #0]
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	0a1b      	lsrs	r3, r3, #8
 800f552:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	1c5a      	adds	r2, r3, #1
 800f558:	607a      	str	r2, [r7, #4]
 800f55a:	683a      	ldr	r2, [r7, #0]
 800f55c:	b2d2      	uxtb	r2, r2
 800f55e:	701a      	strb	r2, [r3, #0]
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	0a1b      	lsrs	r3, r3, #8
 800f564:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	1c5a      	adds	r2, r3, #1
 800f56a:	607a      	str	r2, [r7, #4]
 800f56c:	683a      	ldr	r2, [r7, #0]
 800f56e:	b2d2      	uxtb	r2, r2
 800f570:	701a      	strb	r2, [r3, #0]
}
 800f572:	bf00      	nop
 800f574:	370c      	adds	r7, #12
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr

0800f57e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f57e:	b480      	push	{r7}
 800f580:	b087      	sub	sp, #28
 800f582:	af00      	add	r7, sp, #0
 800f584:	60f8      	str	r0, [r7, #12]
 800f586:	60b9      	str	r1, [r7, #8]
 800f588:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d00d      	beq.n	800f5b4 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f598:	693a      	ldr	r2, [r7, #16]
 800f59a:	1c53      	adds	r3, r2, #1
 800f59c:	613b      	str	r3, [r7, #16]
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	1c59      	adds	r1, r3, #1
 800f5a2:	6179      	str	r1, [r7, #20]
 800f5a4:	7812      	ldrb	r2, [r2, #0]
 800f5a6:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	3b01      	subs	r3, #1
 800f5ac:	607b      	str	r3, [r7, #4]
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d1f1      	bne.n	800f598 <mem_cpy+0x1a>
	}
}
 800f5b4:	bf00      	nop
 800f5b6:	371c      	adds	r7, #28
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr

0800f5c0 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f5c0:	b480      	push	{r7}
 800f5c2:	b087      	sub	sp, #28
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	60f8      	str	r0, [r7, #12]
 800f5c8:	60b9      	str	r1, [r7, #8]
 800f5ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	1c5a      	adds	r2, r3, #1
 800f5d4:	617a      	str	r2, [r7, #20]
 800f5d6:	68ba      	ldr	r2, [r7, #8]
 800f5d8:	b2d2      	uxtb	r2, r2
 800f5da:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	3b01      	subs	r3, #1
 800f5e0:	607b      	str	r3, [r7, #4]
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d1f3      	bne.n	800f5d0 <mem_set+0x10>
}
 800f5e8:	bf00      	nop
 800f5ea:	bf00      	nop
 800f5ec:	371c      	adds	r7, #28
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f4:	4770      	bx	lr

0800f5f6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f5f6:	b480      	push	{r7}
 800f5f8:	b089      	sub	sp, #36	@ 0x24
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	60f8      	str	r0, [r7, #12]
 800f5fe:	60b9      	str	r1, [r7, #8]
 800f600:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	61fb      	str	r3, [r7, #28]
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f60a:	2300      	movs	r3, #0
 800f60c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f60e:	69fb      	ldr	r3, [r7, #28]
 800f610:	1c5a      	adds	r2, r3, #1
 800f612:	61fa      	str	r2, [r7, #28]
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	4619      	mov	r1, r3
 800f618:	69bb      	ldr	r3, [r7, #24]
 800f61a:	1c5a      	adds	r2, r3, #1
 800f61c:	61ba      	str	r2, [r7, #24]
 800f61e:	781b      	ldrb	r3, [r3, #0]
 800f620:	1acb      	subs	r3, r1, r3
 800f622:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	3b01      	subs	r3, #1
 800f628:	607b      	str	r3, [r7, #4]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d002      	beq.n	800f636 <mem_cmp+0x40>
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d0eb      	beq.n	800f60e <mem_cmp+0x18>

	return r;
 800f636:	697b      	ldr	r3, [r7, #20]
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3724      	adds	r7, #36	@ 0x24
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr

0800f644 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f644:	b480      	push	{r7}
 800f646:	b083      	sub	sp, #12
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
 800f64c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f64e:	e002      	b.n	800f656 <chk_chr+0x12>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	3301      	adds	r3, #1
 800f654:	607b      	str	r3, [r7, #4]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d005      	beq.n	800f66a <chk_chr+0x26>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	461a      	mov	r2, r3
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	4293      	cmp	r3, r2
 800f668:	d1f2      	bne.n	800f650 <chk_chr+0xc>
	return *str;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	781b      	ldrb	r3, [r3, #0]
}
 800f66e:	4618      	mov	r0, r3
 800f670:	370c      	adds	r7, #12
 800f672:	46bd      	mov	sp, r7
 800f674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f678:	4770      	bx	lr

0800f67a <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800f67a:	b580      	push	{r7, lr}
 800f67c:	b082      	sub	sp, #8
 800f67e:	af00      	add	r7, sp, #0
 800f680:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d009      	beq.n	800f69c <lock_fs+0x22>
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	68db      	ldr	r3, [r3, #12]
 800f68c:	4618      	mov	r0, r3
 800f68e:	f002 fd5b 	bl	8012148 <ff_req_grant>
 800f692:	4603      	mov	r3, r0
 800f694:	2b00      	cmp	r3, #0
 800f696:	d001      	beq.n	800f69c <lock_fs+0x22>
 800f698:	2301      	movs	r3, #1
 800f69a:	e000      	b.n	800f69e <lock_fs+0x24>
 800f69c:	2300      	movs	r3, #0
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3708      	adds	r7, #8
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}

0800f6a6 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800f6a6:	b580      	push	{r7, lr}
 800f6a8:	b082      	sub	sp, #8
 800f6aa:	af00      	add	r7, sp, #0
 800f6ac:	6078      	str	r0, [r7, #4]
 800f6ae:	460b      	mov	r3, r1
 800f6b0:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d00d      	beq.n	800f6d4 <unlock_fs+0x2e>
 800f6b8:	78fb      	ldrb	r3, [r7, #3]
 800f6ba:	2b0c      	cmp	r3, #12
 800f6bc:	d00a      	beq.n	800f6d4 <unlock_fs+0x2e>
 800f6be:	78fb      	ldrb	r3, [r7, #3]
 800f6c0:	2b0b      	cmp	r3, #11
 800f6c2:	d007      	beq.n	800f6d4 <unlock_fs+0x2e>
 800f6c4:	78fb      	ldrb	r3, [r7, #3]
 800f6c6:	2b0f      	cmp	r3, #15
 800f6c8:	d004      	beq.n	800f6d4 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	68db      	ldr	r3, [r3, #12]
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f002 fd4f 	bl	8012172 <ff_rel_grant>
	}
}
 800f6d4:	bf00      	nop
 800f6d6:	3708      	adds	r7, #8
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b085      	sub	sp, #20
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	60bb      	str	r3, [r7, #8]
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	60fb      	str	r3, [r7, #12]
 800f6ee:	e029      	b.n	800f744 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f6f0:	4a27      	ldr	r2, [pc, #156]	@ (800f790 <chk_lock+0xb4>)
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	011b      	lsls	r3, r3, #4
 800f6f6:	4413      	add	r3, r2
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d01d      	beq.n	800f73a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f6fe:	4a24      	ldr	r2, [pc, #144]	@ (800f790 <chk_lock+0xb4>)
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	011b      	lsls	r3, r3, #4
 800f704:	4413      	add	r3, r2
 800f706:	681a      	ldr	r2, [r3, #0]
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d116      	bne.n	800f73e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f710:	4a1f      	ldr	r2, [pc, #124]	@ (800f790 <chk_lock+0xb4>)
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	011b      	lsls	r3, r3, #4
 800f716:	4413      	add	r3, r2
 800f718:	3304      	adds	r3, #4
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f720:	429a      	cmp	r2, r3
 800f722:	d10c      	bne.n	800f73e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f724:	4a1a      	ldr	r2, [pc, #104]	@ (800f790 <chk_lock+0xb4>)
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	011b      	lsls	r3, r3, #4
 800f72a:	4413      	add	r3, r2
 800f72c:	3308      	adds	r3, #8
 800f72e:	681a      	ldr	r2, [r3, #0]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f734:	429a      	cmp	r2, r3
 800f736:	d102      	bne.n	800f73e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f738:	e007      	b.n	800f74a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f73a:	2301      	movs	r3, #1
 800f73c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	3301      	adds	r3, #1
 800f742:	60fb      	str	r3, [r7, #12]
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	2b01      	cmp	r3, #1
 800f748:	d9d2      	bls.n	800f6f0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	2b02      	cmp	r3, #2
 800f74e:	d109      	bne.n	800f764 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d102      	bne.n	800f75c <chk_lock+0x80>
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	2b02      	cmp	r3, #2
 800f75a:	d101      	bne.n	800f760 <chk_lock+0x84>
 800f75c:	2300      	movs	r3, #0
 800f75e:	e010      	b.n	800f782 <chk_lock+0xa6>
 800f760:	2312      	movs	r3, #18
 800f762:	e00e      	b.n	800f782 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d108      	bne.n	800f77c <chk_lock+0xa0>
 800f76a:	4a09      	ldr	r2, [pc, #36]	@ (800f790 <chk_lock+0xb4>)
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	011b      	lsls	r3, r3, #4
 800f770:	4413      	add	r3, r2
 800f772:	330c      	adds	r3, #12
 800f774:	881b      	ldrh	r3, [r3, #0]
 800f776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f77a:	d101      	bne.n	800f780 <chk_lock+0xa4>
 800f77c:	2310      	movs	r3, #16
 800f77e:	e000      	b.n	800f782 <chk_lock+0xa6>
 800f780:	2300      	movs	r3, #0
}
 800f782:	4618      	mov	r0, r3
 800f784:	3714      	adds	r7, #20
 800f786:	46bd      	mov	sp, r7
 800f788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78c:	4770      	bx	lr
 800f78e:	bf00      	nop
 800f790:	24000a4c 	.word	0x24000a4c

0800f794 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f794:	b480      	push	{r7}
 800f796:	b083      	sub	sp, #12
 800f798:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f79a:	2300      	movs	r3, #0
 800f79c:	607b      	str	r3, [r7, #4]
 800f79e:	e002      	b.n	800f7a6 <enq_lock+0x12>
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	607b      	str	r3, [r7, #4]
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2b01      	cmp	r3, #1
 800f7aa:	d806      	bhi.n	800f7ba <enq_lock+0x26>
 800f7ac:	4a09      	ldr	r2, [pc, #36]	@ (800f7d4 <enq_lock+0x40>)
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	011b      	lsls	r3, r3, #4
 800f7b2:	4413      	add	r3, r2
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d1f2      	bne.n	800f7a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2b02      	cmp	r3, #2
 800f7be:	bf14      	ite	ne
 800f7c0:	2301      	movne	r3, #1
 800f7c2:	2300      	moveq	r3, #0
 800f7c4:	b2db      	uxtb	r3, r3
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	370c      	adds	r7, #12
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d0:	4770      	bx	lr
 800f7d2:	bf00      	nop
 800f7d4:	24000a4c 	.word	0x24000a4c

0800f7d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f7d8:	b480      	push	{r7}
 800f7da:	b085      	sub	sp, #20
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	60fb      	str	r3, [r7, #12]
 800f7e6:	e01f      	b.n	800f828 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f7e8:	4a41      	ldr	r2, [pc, #260]	@ (800f8f0 <inc_lock+0x118>)
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	011b      	lsls	r3, r3, #4
 800f7ee:	4413      	add	r3, r2
 800f7f0:	681a      	ldr	r2, [r3, #0]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d113      	bne.n	800f822 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f7fa:	4a3d      	ldr	r2, [pc, #244]	@ (800f8f0 <inc_lock+0x118>)
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	011b      	lsls	r3, r3, #4
 800f800:	4413      	add	r3, r2
 800f802:	3304      	adds	r3, #4
 800f804:	681a      	ldr	r2, [r3, #0]
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d109      	bne.n	800f822 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f80e:	4a38      	ldr	r2, [pc, #224]	@ (800f8f0 <inc_lock+0x118>)
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	011b      	lsls	r3, r3, #4
 800f814:	4413      	add	r3, r2
 800f816:	3308      	adds	r3, #8
 800f818:	681a      	ldr	r2, [r3, #0]
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f81e:	429a      	cmp	r2, r3
 800f820:	d006      	beq.n	800f830 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	3301      	adds	r3, #1
 800f826:	60fb      	str	r3, [r7, #12]
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2b01      	cmp	r3, #1
 800f82c:	d9dc      	bls.n	800f7e8 <inc_lock+0x10>
 800f82e:	e000      	b.n	800f832 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f830:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	2b02      	cmp	r3, #2
 800f836:	d132      	bne.n	800f89e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f838:	2300      	movs	r3, #0
 800f83a:	60fb      	str	r3, [r7, #12]
 800f83c:	e002      	b.n	800f844 <inc_lock+0x6c>
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	3301      	adds	r3, #1
 800f842:	60fb      	str	r3, [r7, #12]
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	2b01      	cmp	r3, #1
 800f848:	d806      	bhi.n	800f858 <inc_lock+0x80>
 800f84a:	4a29      	ldr	r2, [pc, #164]	@ (800f8f0 <inc_lock+0x118>)
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	011b      	lsls	r3, r3, #4
 800f850:	4413      	add	r3, r2
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d1f2      	bne.n	800f83e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	2b02      	cmp	r3, #2
 800f85c:	d101      	bne.n	800f862 <inc_lock+0x8a>
 800f85e:	2300      	movs	r3, #0
 800f860:	e040      	b.n	800f8e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681a      	ldr	r2, [r3, #0]
 800f866:	4922      	ldr	r1, [pc, #136]	@ (800f8f0 <inc_lock+0x118>)
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	011b      	lsls	r3, r3, #4
 800f86c:	440b      	add	r3, r1
 800f86e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	689a      	ldr	r2, [r3, #8]
 800f874:	491e      	ldr	r1, [pc, #120]	@ (800f8f0 <inc_lock+0x118>)
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	011b      	lsls	r3, r3, #4
 800f87a:	440b      	add	r3, r1
 800f87c:	3304      	adds	r3, #4
 800f87e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	695a      	ldr	r2, [r3, #20]
 800f884:	491a      	ldr	r1, [pc, #104]	@ (800f8f0 <inc_lock+0x118>)
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	011b      	lsls	r3, r3, #4
 800f88a:	440b      	add	r3, r1
 800f88c:	3308      	adds	r3, #8
 800f88e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f890:	4a17      	ldr	r2, [pc, #92]	@ (800f8f0 <inc_lock+0x118>)
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	011b      	lsls	r3, r3, #4
 800f896:	4413      	add	r3, r2
 800f898:	330c      	adds	r3, #12
 800f89a:	2200      	movs	r2, #0
 800f89c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d009      	beq.n	800f8b8 <inc_lock+0xe0>
 800f8a4:	4a12      	ldr	r2, [pc, #72]	@ (800f8f0 <inc_lock+0x118>)
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	011b      	lsls	r3, r3, #4
 800f8aa:	4413      	add	r3, r2
 800f8ac:	330c      	adds	r3, #12
 800f8ae:	881b      	ldrh	r3, [r3, #0]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d001      	beq.n	800f8b8 <inc_lock+0xe0>
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	e015      	b.n	800f8e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d108      	bne.n	800f8d0 <inc_lock+0xf8>
 800f8be:	4a0c      	ldr	r2, [pc, #48]	@ (800f8f0 <inc_lock+0x118>)
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	011b      	lsls	r3, r3, #4
 800f8c4:	4413      	add	r3, r2
 800f8c6:	330c      	adds	r3, #12
 800f8c8:	881b      	ldrh	r3, [r3, #0]
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	b29a      	uxth	r2, r3
 800f8ce:	e001      	b.n	800f8d4 <inc_lock+0xfc>
 800f8d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f8d4:	4906      	ldr	r1, [pc, #24]	@ (800f8f0 <inc_lock+0x118>)
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	011b      	lsls	r3, r3, #4
 800f8da:	440b      	add	r3, r1
 800f8dc:	330c      	adds	r3, #12
 800f8de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	3301      	adds	r3, #1
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3714      	adds	r7, #20
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ee:	4770      	bx	lr
 800f8f0:	24000a4c 	.word	0x24000a4c

0800f8f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b085      	sub	sp, #20
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	60fb      	str	r3, [r7, #12]
 800f900:	e010      	b.n	800f924 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f902:	4a0d      	ldr	r2, [pc, #52]	@ (800f938 <clear_lock+0x44>)
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	011b      	lsls	r3, r3, #4
 800f908:	4413      	add	r3, r2
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	687a      	ldr	r2, [r7, #4]
 800f90e:	429a      	cmp	r2, r3
 800f910:	d105      	bne.n	800f91e <clear_lock+0x2a>
 800f912:	4a09      	ldr	r2, [pc, #36]	@ (800f938 <clear_lock+0x44>)
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	011b      	lsls	r3, r3, #4
 800f918:	4413      	add	r3, r2
 800f91a:	2200      	movs	r2, #0
 800f91c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	3301      	adds	r3, #1
 800f922:	60fb      	str	r3, [r7, #12]
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	2b01      	cmp	r3, #1
 800f928:	d9eb      	bls.n	800f902 <clear_lock+0xe>
	}
}
 800f92a:	bf00      	nop
 800f92c:	bf00      	nop
 800f92e:	3714      	adds	r7, #20
 800f930:	46bd      	mov	sp, r7
 800f932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f936:	4770      	bx	lr
 800f938:	24000a4c 	.word	0x24000a4c

0800f93c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b086      	sub	sp, #24
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f944:	2300      	movs	r3, #0
 800f946:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	78db      	ldrb	r3, [r3, #3]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d034      	beq.n	800f9ba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f954:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	7858      	ldrb	r0, [r3, #1]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f960:	2301      	movs	r3, #1
 800f962:	697a      	ldr	r2, [r7, #20]
 800f964:	f7ff fd4a 	bl	800f3fc <disk_write>
 800f968:	4603      	mov	r3, r0
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d002      	beq.n	800f974 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f96e:	2301      	movs	r3, #1
 800f970:	73fb      	strb	r3, [r7, #15]
 800f972:	e022      	b.n	800f9ba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2200      	movs	r2, #0
 800f978:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f97e:	697a      	ldr	r2, [r7, #20]
 800f980:	1ad2      	subs	r2, r2, r3
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	69db      	ldr	r3, [r3, #28]
 800f986:	429a      	cmp	r2, r3
 800f988:	d217      	bcs.n	800f9ba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	789b      	ldrb	r3, [r3, #2]
 800f98e:	613b      	str	r3, [r7, #16]
 800f990:	e010      	b.n	800f9b4 <sync_window+0x78>
					wsect += fs->fsize;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	69db      	ldr	r3, [r3, #28]
 800f996:	697a      	ldr	r2, [r7, #20]
 800f998:	4413      	add	r3, r2
 800f99a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	7858      	ldrb	r0, [r3, #1]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	697a      	ldr	r2, [r7, #20]
 800f9aa:	f7ff fd27 	bl	800f3fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	3b01      	subs	r3, #1
 800f9b2:	613b      	str	r3, [r7, #16]
 800f9b4:	693b      	ldr	r3, [r7, #16]
 800f9b6:	2b01      	cmp	r3, #1
 800f9b8:	d8eb      	bhi.n	800f992 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f9ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3718      	adds	r7, #24
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}

0800f9c4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b084      	sub	sp, #16
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9d6:	683a      	ldr	r2, [r7, #0]
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	d01b      	beq.n	800fa14 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f7ff ffad 	bl	800f93c <sync_window>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f9e6:	7bfb      	ldrb	r3, [r7, #15]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d113      	bne.n	800fa14 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	7858      	ldrb	r0, [r3, #1]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	683a      	ldr	r2, [r7, #0]
 800f9fa:	f7ff fcdf 	bl	800f3bc <disk_read>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d004      	beq.n	800fa0e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fa04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fa08:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	683a      	ldr	r2, [r7, #0]
 800fa12:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800fa14:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3710      	adds	r7, #16
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
	...

0800fa20 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b084      	sub	sp, #16
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f7ff ff87 	bl	800f93c <sync_window>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fa32:	7bfb      	ldrb	r3, [r7, #15]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d158      	bne.n	800faea <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	2b03      	cmp	r3, #3
 800fa3e:	d148      	bne.n	800fad2 <sync_fs+0xb2>
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	791b      	ldrb	r3, [r3, #4]
 800fa44:	2b01      	cmp	r3, #1
 800fa46:	d144      	bne.n	800fad2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	3334      	adds	r3, #52	@ 0x34
 800fa4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fa50:	2100      	movs	r1, #0
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7ff fdb4 	bl	800f5c0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	3334      	adds	r3, #52	@ 0x34
 800fa5c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fa60:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7ff fd43 	bl	800f4f0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	3334      	adds	r3, #52	@ 0x34
 800fa6e:	4921      	ldr	r1, [pc, #132]	@ (800faf4 <sync_fs+0xd4>)
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7ff fd58 	bl	800f526 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	3334      	adds	r3, #52	@ 0x34
 800fa7a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fa7e:	491e      	ldr	r1, [pc, #120]	@ (800faf8 <sync_fs+0xd8>)
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7ff fd50 	bl	800f526 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	3334      	adds	r3, #52	@ 0x34
 800fa8a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	695b      	ldr	r3, [r3, #20]
 800fa92:	4619      	mov	r1, r3
 800fa94:	4610      	mov	r0, r2
 800fa96:	f7ff fd46 	bl	800f526 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	3334      	adds	r3, #52	@ 0x34
 800fa9e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	691b      	ldr	r3, [r3, #16]
 800faa6:	4619      	mov	r1, r3
 800faa8:	4610      	mov	r0, r2
 800faaa:	f7ff fd3c 	bl	800f526 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6a1b      	ldr	r3, [r3, #32]
 800fab2:	1c5a      	adds	r2, r3, #1
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	7858      	ldrb	r0, [r3, #1]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fac6:	2301      	movs	r3, #1
 800fac8:	f7ff fc98 	bl	800f3fc <disk_write>
			fs->fsi_flag = 0;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2200      	movs	r2, #0
 800fad0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	785b      	ldrb	r3, [r3, #1]
 800fad6:	2200      	movs	r2, #0
 800fad8:	2100      	movs	r1, #0
 800fada:	4618      	mov	r0, r3
 800fadc:	f7ff fcae 	bl	800f43c <disk_ioctl>
 800fae0:	4603      	mov	r3, r0
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d001      	beq.n	800faea <sync_fs+0xca>
 800fae6:	2301      	movs	r3, #1
 800fae8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800faea:	7bfb      	ldrb	r3, [r7, #15]
}
 800faec:	4618      	mov	r0, r3
 800faee:	3710      	adds	r7, #16
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}
 800faf4:	41615252 	.word	0x41615252
 800faf8:	61417272 	.word	0x61417272

0800fafc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fafc:	b480      	push	{r7}
 800fafe:	b083      	sub	sp, #12
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	3b02      	subs	r3, #2
 800fb0a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	699b      	ldr	r3, [r3, #24]
 800fb10:	3b02      	subs	r3, #2
 800fb12:	683a      	ldr	r2, [r7, #0]
 800fb14:	429a      	cmp	r2, r3
 800fb16:	d301      	bcc.n	800fb1c <clust2sect+0x20>
 800fb18:	2300      	movs	r3, #0
 800fb1a:	e008      	b.n	800fb2e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	895b      	ldrh	r3, [r3, #10]
 800fb20:	461a      	mov	r2, r3
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	fb03 f202 	mul.w	r2, r3, r2
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb2c:	4413      	add	r3, r2
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	370c      	adds	r7, #12
 800fb32:	46bd      	mov	sp, r7
 800fb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb38:	4770      	bx	lr

0800fb3a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fb3a:	b580      	push	{r7, lr}
 800fb3c:	b086      	sub	sp, #24
 800fb3e:	af00      	add	r7, sp, #0
 800fb40:	6078      	str	r0, [r7, #4]
 800fb42:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	2b01      	cmp	r3, #1
 800fb4e:	d904      	bls.n	800fb5a <get_fat+0x20>
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	699b      	ldr	r3, [r3, #24]
 800fb54:	683a      	ldr	r2, [r7, #0]
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d302      	bcc.n	800fb60 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	617b      	str	r3, [r7, #20]
 800fb5e:	e08e      	b.n	800fc7e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fb60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fb64:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fb66:	693b      	ldr	r3, [r7, #16]
 800fb68:	781b      	ldrb	r3, [r3, #0]
 800fb6a:	2b03      	cmp	r3, #3
 800fb6c:	d061      	beq.n	800fc32 <get_fat+0xf8>
 800fb6e:	2b03      	cmp	r3, #3
 800fb70:	dc7b      	bgt.n	800fc6a <get_fat+0x130>
 800fb72:	2b01      	cmp	r3, #1
 800fb74:	d002      	beq.n	800fb7c <get_fat+0x42>
 800fb76:	2b02      	cmp	r3, #2
 800fb78:	d041      	beq.n	800fbfe <get_fat+0xc4>
 800fb7a:	e076      	b.n	800fc6a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	60fb      	str	r3, [r7, #12]
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	085b      	lsrs	r3, r3, #1
 800fb84:	68fa      	ldr	r2, [r7, #12]
 800fb86:	4413      	add	r3, r2
 800fb88:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	0a5b      	lsrs	r3, r3, #9
 800fb92:	4413      	add	r3, r2
 800fb94:	4619      	mov	r1, r3
 800fb96:	6938      	ldr	r0, [r7, #16]
 800fb98:	f7ff ff14 	bl	800f9c4 <move_window>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d166      	bne.n	800fc70 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	1c5a      	adds	r2, r3, #1
 800fba6:	60fa      	str	r2, [r7, #12]
 800fba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbac:	693a      	ldr	r2, [r7, #16]
 800fbae:	4413      	add	r3, r2
 800fbb0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fbb4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fbb6:	693b      	ldr	r3, [r7, #16]
 800fbb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	0a5b      	lsrs	r3, r3, #9
 800fbbe:	4413      	add	r3, r2
 800fbc0:	4619      	mov	r1, r3
 800fbc2:	6938      	ldr	r0, [r7, #16]
 800fbc4:	f7ff fefe 	bl	800f9c4 <move_window>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d152      	bne.n	800fc74 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbd4:	693a      	ldr	r2, [r7, #16]
 800fbd6:	4413      	add	r3, r2
 800fbd8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fbdc:	021b      	lsls	r3, r3, #8
 800fbde:	68ba      	ldr	r2, [r7, #8]
 800fbe0:	4313      	orrs	r3, r2
 800fbe2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	f003 0301 	and.w	r3, r3, #1
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d002      	beq.n	800fbf4 <get_fat+0xba>
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	091b      	lsrs	r3, r3, #4
 800fbf2:	e002      	b.n	800fbfa <get_fat+0xc0>
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fbfa:	617b      	str	r3, [r7, #20]
			break;
 800fbfc:	e03f      	b.n	800fc7e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fbfe:	693b      	ldr	r3, [r7, #16]
 800fc00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	0a1b      	lsrs	r3, r3, #8
 800fc06:	4413      	add	r3, r2
 800fc08:	4619      	mov	r1, r3
 800fc0a:	6938      	ldr	r0, [r7, #16]
 800fc0c:	f7ff feda 	bl	800f9c4 <move_window>
 800fc10:	4603      	mov	r3, r0
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d130      	bne.n	800fc78 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	005b      	lsls	r3, r3, #1
 800fc20:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fc24:	4413      	add	r3, r2
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7ff fc26 	bl	800f478 <ld_word>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	617b      	str	r3, [r7, #20]
			break;
 800fc30:	e025      	b.n	800fc7e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fc32:	693b      	ldr	r3, [r7, #16]
 800fc34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	09db      	lsrs	r3, r3, #7
 800fc3a:	4413      	add	r3, r2
 800fc3c:	4619      	mov	r1, r3
 800fc3e:	6938      	ldr	r0, [r7, #16]
 800fc40:	f7ff fec0 	bl	800f9c4 <move_window>
 800fc44:	4603      	mov	r3, r0
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d118      	bne.n	800fc7c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fc4a:	693b      	ldr	r3, [r7, #16]
 800fc4c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	009b      	lsls	r3, r3, #2
 800fc54:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fc58:	4413      	add	r3, r2
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7ff fc25 	bl	800f4aa <ld_dword>
 800fc60:	4603      	mov	r3, r0
 800fc62:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800fc66:	617b      	str	r3, [r7, #20]
			break;
 800fc68:	e009      	b.n	800fc7e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	617b      	str	r3, [r7, #20]
 800fc6e:	e006      	b.n	800fc7e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fc70:	bf00      	nop
 800fc72:	e004      	b.n	800fc7e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fc74:	bf00      	nop
 800fc76:	e002      	b.n	800fc7e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fc78:	bf00      	nop
 800fc7a:	e000      	b.n	800fc7e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fc7c:	bf00      	nop
		}
	}

	return val;
 800fc7e:	697b      	ldr	r3, [r7, #20]
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3718      	adds	r7, #24
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}

0800fc88 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fc88:	b590      	push	{r4, r7, lr}
 800fc8a:	b089      	sub	sp, #36	@ 0x24
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	60f8      	str	r0, [r7, #12]
 800fc90:	60b9      	str	r1, [r7, #8]
 800fc92:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fc94:	2302      	movs	r3, #2
 800fc96:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	2b01      	cmp	r3, #1
 800fc9c:	f240 80d9 	bls.w	800fe52 <put_fat+0x1ca>
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	699b      	ldr	r3, [r3, #24]
 800fca4:	68ba      	ldr	r2, [r7, #8]
 800fca6:	429a      	cmp	r2, r3
 800fca8:	f080 80d3 	bcs.w	800fe52 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	2b03      	cmp	r3, #3
 800fcb2:	f000 8096 	beq.w	800fde2 <put_fat+0x15a>
 800fcb6:	2b03      	cmp	r3, #3
 800fcb8:	f300 80cb 	bgt.w	800fe52 <put_fat+0x1ca>
 800fcbc:	2b01      	cmp	r3, #1
 800fcbe:	d002      	beq.n	800fcc6 <put_fat+0x3e>
 800fcc0:	2b02      	cmp	r3, #2
 800fcc2:	d06e      	beq.n	800fda2 <put_fat+0x11a>
 800fcc4:	e0c5      	b.n	800fe52 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	61bb      	str	r3, [r7, #24]
 800fcca:	69bb      	ldr	r3, [r7, #24]
 800fccc:	085b      	lsrs	r3, r3, #1
 800fcce:	69ba      	ldr	r2, [r7, #24]
 800fcd0:	4413      	add	r3, r2
 800fcd2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fcd8:	69bb      	ldr	r3, [r7, #24]
 800fcda:	0a5b      	lsrs	r3, r3, #9
 800fcdc:	4413      	add	r3, r2
 800fcde:	4619      	mov	r1, r3
 800fce0:	68f8      	ldr	r0, [r7, #12]
 800fce2:	f7ff fe6f 	bl	800f9c4 <move_window>
 800fce6:	4603      	mov	r3, r0
 800fce8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fcea:	7ffb      	ldrb	r3, [r7, #31]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	f040 80a9 	bne.w	800fe44 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fcf8:	69bb      	ldr	r3, [r7, #24]
 800fcfa:	1c59      	adds	r1, r3, #1
 800fcfc:	61b9      	str	r1, [r7, #24]
 800fcfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd02:	4413      	add	r3, r2
 800fd04:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	f003 0301 	and.w	r3, r3, #1
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d00d      	beq.n	800fd2c <put_fat+0xa4>
 800fd10:	697b      	ldr	r3, [r7, #20]
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	b25b      	sxtb	r3, r3
 800fd16:	f003 030f 	and.w	r3, r3, #15
 800fd1a:	b25a      	sxtb	r2, r3
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	b25b      	sxtb	r3, r3
 800fd20:	011b      	lsls	r3, r3, #4
 800fd22:	b25b      	sxtb	r3, r3
 800fd24:	4313      	orrs	r3, r2
 800fd26:	b25b      	sxtb	r3, r3
 800fd28:	b2db      	uxtb	r3, r3
 800fd2a:	e001      	b.n	800fd30 <put_fat+0xa8>
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	b2db      	uxtb	r3, r3
 800fd30:	697a      	ldr	r2, [r7, #20]
 800fd32:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	2201      	movs	r2, #1
 800fd38:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd3e:	69bb      	ldr	r3, [r7, #24]
 800fd40:	0a5b      	lsrs	r3, r3, #9
 800fd42:	4413      	add	r3, r2
 800fd44:	4619      	mov	r1, r3
 800fd46:	68f8      	ldr	r0, [r7, #12]
 800fd48:	f7ff fe3c 	bl	800f9c4 <move_window>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fd50:	7ffb      	ldrb	r3, [r7, #31]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d178      	bne.n	800fe48 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fd5c:	69bb      	ldr	r3, [r7, #24]
 800fd5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd62:	4413      	add	r3, r2
 800fd64:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	f003 0301 	and.w	r3, r3, #1
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d003      	beq.n	800fd78 <put_fat+0xf0>
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	091b      	lsrs	r3, r3, #4
 800fd74:	b2db      	uxtb	r3, r3
 800fd76:	e00e      	b.n	800fd96 <put_fat+0x10e>
 800fd78:	697b      	ldr	r3, [r7, #20]
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	b25b      	sxtb	r3, r3
 800fd7e:	f023 030f 	bic.w	r3, r3, #15
 800fd82:	b25a      	sxtb	r2, r3
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	0a1b      	lsrs	r3, r3, #8
 800fd88:	b25b      	sxtb	r3, r3
 800fd8a:	f003 030f 	and.w	r3, r3, #15
 800fd8e:	b25b      	sxtb	r3, r3
 800fd90:	4313      	orrs	r3, r2
 800fd92:	b25b      	sxtb	r3, r3
 800fd94:	b2db      	uxtb	r3, r3
 800fd96:	697a      	ldr	r2, [r7, #20]
 800fd98:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2201      	movs	r2, #1
 800fd9e:	70da      	strb	r2, [r3, #3]
			break;
 800fda0:	e057      	b.n	800fe52 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	0a1b      	lsrs	r3, r3, #8
 800fdaa:	4413      	add	r3, r2
 800fdac:	4619      	mov	r1, r3
 800fdae:	68f8      	ldr	r0, [r7, #12]
 800fdb0:	f7ff fe08 	bl	800f9c4 <move_window>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fdb8:	7ffb      	ldrb	r3, [r7, #31]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d146      	bne.n	800fe4c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	005b      	lsls	r3, r3, #1
 800fdc8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fdcc:	4413      	add	r3, r2
 800fdce:	687a      	ldr	r2, [r7, #4]
 800fdd0:	b292      	uxth	r2, r2
 800fdd2:	4611      	mov	r1, r2
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7ff fb8b 	bl	800f4f0 <st_word>
			fs->wflag = 1;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	2201      	movs	r2, #1
 800fdde:	70da      	strb	r2, [r3, #3]
			break;
 800fde0:	e037      	b.n	800fe52 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	09db      	lsrs	r3, r3, #7
 800fdea:	4413      	add	r3, r2
 800fdec:	4619      	mov	r1, r3
 800fdee:	68f8      	ldr	r0, [r7, #12]
 800fdf0:	f7ff fde8 	bl	800f9c4 <move_window>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fdf8:	7ffb      	ldrb	r3, [r7, #31]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d128      	bne.n	800fe50 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	009b      	lsls	r3, r3, #2
 800fe0e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fe12:	4413      	add	r3, r2
 800fe14:	4618      	mov	r0, r3
 800fe16:	f7ff fb48 	bl	800f4aa <ld_dword>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800fe20:	4323      	orrs	r3, r4
 800fe22:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	009b      	lsls	r3, r3, #2
 800fe2e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fe32:	4413      	add	r3, r2
 800fe34:	6879      	ldr	r1, [r7, #4]
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7ff fb75 	bl	800f526 <st_dword>
			fs->wflag = 1;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	2201      	movs	r2, #1
 800fe40:	70da      	strb	r2, [r3, #3]
			break;
 800fe42:	e006      	b.n	800fe52 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fe44:	bf00      	nop
 800fe46:	e004      	b.n	800fe52 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fe48:	bf00      	nop
 800fe4a:	e002      	b.n	800fe52 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fe4c:	bf00      	nop
 800fe4e:	e000      	b.n	800fe52 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fe50:	bf00      	nop
		}
	}
	return res;
 800fe52:	7ffb      	ldrb	r3, [r7, #31]
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	3724      	adds	r7, #36	@ 0x24
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd90      	pop	{r4, r7, pc}

0800fe5c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b088      	sub	sp, #32
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	60f8      	str	r0, [r7, #12]
 800fe64:	60b9      	str	r1, [r7, #8]
 800fe66:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d904      	bls.n	800fe82 <remove_chain+0x26>
 800fe78:	69bb      	ldr	r3, [r7, #24]
 800fe7a:	699b      	ldr	r3, [r3, #24]
 800fe7c:	68ba      	ldr	r2, [r7, #8]
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d301      	bcc.n	800fe86 <remove_chain+0x2a>
 800fe82:	2302      	movs	r3, #2
 800fe84:	e04b      	b.n	800ff1e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d00c      	beq.n	800fea6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fe8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fe90:	6879      	ldr	r1, [r7, #4]
 800fe92:	69b8      	ldr	r0, [r7, #24]
 800fe94:	f7ff fef8 	bl	800fc88 <put_fat>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fe9c:	7ffb      	ldrb	r3, [r7, #31]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d001      	beq.n	800fea6 <remove_chain+0x4a>
 800fea2:	7ffb      	ldrb	r3, [r7, #31]
 800fea4:	e03b      	b.n	800ff1e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fea6:	68b9      	ldr	r1, [r7, #8]
 800fea8:	68f8      	ldr	r0, [r7, #12]
 800feaa:	f7ff fe46 	bl	800fb3a <get_fat>
 800feae:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d031      	beq.n	800ff1a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800feb6:	697b      	ldr	r3, [r7, #20]
 800feb8:	2b01      	cmp	r3, #1
 800feba:	d101      	bne.n	800fec0 <remove_chain+0x64>
 800febc:	2302      	movs	r3, #2
 800febe:	e02e      	b.n	800ff1e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fec6:	d101      	bne.n	800fecc <remove_chain+0x70>
 800fec8:	2301      	movs	r3, #1
 800feca:	e028      	b.n	800ff1e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fecc:	2200      	movs	r2, #0
 800fece:	68b9      	ldr	r1, [r7, #8]
 800fed0:	69b8      	ldr	r0, [r7, #24]
 800fed2:	f7ff fed9 	bl	800fc88 <put_fat>
 800fed6:	4603      	mov	r3, r0
 800fed8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800feda:	7ffb      	ldrb	r3, [r7, #31]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d001      	beq.n	800fee4 <remove_chain+0x88>
 800fee0:	7ffb      	ldrb	r3, [r7, #31]
 800fee2:	e01c      	b.n	800ff1e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fee4:	69bb      	ldr	r3, [r7, #24]
 800fee6:	695a      	ldr	r2, [r3, #20]
 800fee8:	69bb      	ldr	r3, [r7, #24]
 800feea:	699b      	ldr	r3, [r3, #24]
 800feec:	3b02      	subs	r3, #2
 800feee:	429a      	cmp	r2, r3
 800fef0:	d20b      	bcs.n	800ff0a <remove_chain+0xae>
			fs->free_clst++;
 800fef2:	69bb      	ldr	r3, [r7, #24]
 800fef4:	695b      	ldr	r3, [r3, #20]
 800fef6:	1c5a      	adds	r2, r3, #1
 800fef8:	69bb      	ldr	r3, [r7, #24]
 800fefa:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800fefc:	69bb      	ldr	r3, [r7, #24]
 800fefe:	791b      	ldrb	r3, [r3, #4]
 800ff00:	f043 0301 	orr.w	r3, r3, #1
 800ff04:	b2da      	uxtb	r2, r3
 800ff06:	69bb      	ldr	r3, [r7, #24]
 800ff08:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ff0e:	69bb      	ldr	r3, [r7, #24]
 800ff10:	699b      	ldr	r3, [r3, #24]
 800ff12:	68ba      	ldr	r2, [r7, #8]
 800ff14:	429a      	cmp	r2, r3
 800ff16:	d3c6      	bcc.n	800fea6 <remove_chain+0x4a>
 800ff18:	e000      	b.n	800ff1c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ff1a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ff1c:	2300      	movs	r3, #0
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3720      	adds	r7, #32
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}

0800ff26 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ff26:	b580      	push	{r7, lr}
 800ff28:	b088      	sub	sp, #32
 800ff2a:	af00      	add	r7, sp, #0
 800ff2c:	6078      	str	r0, [r7, #4]
 800ff2e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d10d      	bne.n	800ff58 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	691b      	ldr	r3, [r3, #16]
 800ff40:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ff42:	69bb      	ldr	r3, [r7, #24]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d004      	beq.n	800ff52 <create_chain+0x2c>
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	699b      	ldr	r3, [r3, #24]
 800ff4c:	69ba      	ldr	r2, [r7, #24]
 800ff4e:	429a      	cmp	r2, r3
 800ff50:	d31b      	bcc.n	800ff8a <create_chain+0x64>
 800ff52:	2301      	movs	r3, #1
 800ff54:	61bb      	str	r3, [r7, #24]
 800ff56:	e018      	b.n	800ff8a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ff58:	6839      	ldr	r1, [r7, #0]
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f7ff fded 	bl	800fb3a <get_fat>
 800ff60:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2b01      	cmp	r3, #1
 800ff66:	d801      	bhi.n	800ff6c <create_chain+0x46>
 800ff68:	2301      	movs	r3, #1
 800ff6a:	e070      	b.n	801004e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ff72:	d101      	bne.n	800ff78 <create_chain+0x52>
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	e06a      	b.n	801004e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ff78:	693b      	ldr	r3, [r7, #16]
 800ff7a:	699b      	ldr	r3, [r3, #24]
 800ff7c:	68fa      	ldr	r2, [r7, #12]
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d201      	bcs.n	800ff86 <create_chain+0x60>
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	e063      	b.n	801004e <create_chain+0x128>
		scl = clst;
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ff8a:	69bb      	ldr	r3, [r7, #24]
 800ff8c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ff8e:	69fb      	ldr	r3, [r7, #28]
 800ff90:	3301      	adds	r3, #1
 800ff92:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	699b      	ldr	r3, [r3, #24]
 800ff98:	69fa      	ldr	r2, [r7, #28]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d307      	bcc.n	800ffae <create_chain+0x88>
				ncl = 2;
 800ff9e:	2302      	movs	r3, #2
 800ffa0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ffa2:	69fa      	ldr	r2, [r7, #28]
 800ffa4:	69bb      	ldr	r3, [r7, #24]
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d901      	bls.n	800ffae <create_chain+0x88>
 800ffaa:	2300      	movs	r3, #0
 800ffac:	e04f      	b.n	801004e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ffae:	69f9      	ldr	r1, [r7, #28]
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f7ff fdc2 	bl	800fb3a <get_fat>
 800ffb6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d00e      	beq.n	800ffdc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d003      	beq.n	800ffcc <create_chain+0xa6>
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ffca:	d101      	bne.n	800ffd0 <create_chain+0xaa>
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	e03e      	b.n	801004e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ffd0:	69fa      	ldr	r2, [r7, #28]
 800ffd2:	69bb      	ldr	r3, [r7, #24]
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d1da      	bne.n	800ff8e <create_chain+0x68>
 800ffd8:	2300      	movs	r3, #0
 800ffda:	e038      	b.n	801004e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ffdc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ffde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ffe2:	69f9      	ldr	r1, [r7, #28]
 800ffe4:	6938      	ldr	r0, [r7, #16]
 800ffe6:	f7ff fe4f 	bl	800fc88 <put_fat>
 800ffea:	4603      	mov	r3, r0
 800ffec:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ffee:	7dfb      	ldrb	r3, [r7, #23]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d109      	bne.n	8010008 <create_chain+0xe2>
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d006      	beq.n	8010008 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800fffa:	69fa      	ldr	r2, [r7, #28]
 800fffc:	6839      	ldr	r1, [r7, #0]
 800fffe:	6938      	ldr	r0, [r7, #16]
 8010000:	f7ff fe42 	bl	800fc88 <put_fat>
 8010004:	4603      	mov	r3, r0
 8010006:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010008:	7dfb      	ldrb	r3, [r7, #23]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d116      	bne.n	801003c <create_chain+0x116>
		fs->last_clst = ncl;
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	69fa      	ldr	r2, [r7, #28]
 8010012:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	695a      	ldr	r2, [r3, #20]
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	699b      	ldr	r3, [r3, #24]
 801001c:	3b02      	subs	r3, #2
 801001e:	429a      	cmp	r2, r3
 8010020:	d804      	bhi.n	801002c <create_chain+0x106>
 8010022:	693b      	ldr	r3, [r7, #16]
 8010024:	695b      	ldr	r3, [r3, #20]
 8010026:	1e5a      	subs	r2, r3, #1
 8010028:	693b      	ldr	r3, [r7, #16]
 801002a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	791b      	ldrb	r3, [r3, #4]
 8010030:	f043 0301 	orr.w	r3, r3, #1
 8010034:	b2da      	uxtb	r2, r3
 8010036:	693b      	ldr	r3, [r7, #16]
 8010038:	711a      	strb	r2, [r3, #4]
 801003a:	e007      	b.n	801004c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801003c:	7dfb      	ldrb	r3, [r7, #23]
 801003e:	2b01      	cmp	r3, #1
 8010040:	d102      	bne.n	8010048 <create_chain+0x122>
 8010042:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010046:	e000      	b.n	801004a <create_chain+0x124>
 8010048:	2301      	movs	r3, #1
 801004a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801004c:	69fb      	ldr	r3, [r7, #28]
}
 801004e:	4618      	mov	r0, r3
 8010050:	3720      	adds	r7, #32
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}

08010056 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010056:	b480      	push	{r7}
 8010058:	b087      	sub	sp, #28
 801005a:	af00      	add	r7, sp, #0
 801005c:	6078      	str	r0, [r7, #4]
 801005e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801006a:	3304      	adds	r3, #4
 801006c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	0a5b      	lsrs	r3, r3, #9
 8010072:	68fa      	ldr	r2, [r7, #12]
 8010074:	8952      	ldrh	r2, [r2, #10]
 8010076:	fbb3 f3f2 	udiv	r3, r3, r2
 801007a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801007c:	693b      	ldr	r3, [r7, #16]
 801007e:	1d1a      	adds	r2, r3, #4
 8010080:	613a      	str	r2, [r7, #16]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d101      	bne.n	8010090 <clmt_clust+0x3a>
 801008c:	2300      	movs	r3, #0
 801008e:	e010      	b.n	80100b2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010090:	697a      	ldr	r2, [r7, #20]
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	429a      	cmp	r2, r3
 8010096:	d307      	bcc.n	80100a8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010098:	697a      	ldr	r2, [r7, #20]
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	1ad3      	subs	r3, r2, r3
 801009e:	617b      	str	r3, [r7, #20]
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	3304      	adds	r3, #4
 80100a4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80100a6:	e7e9      	b.n	801007c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80100a8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80100aa:	693b      	ldr	r3, [r7, #16]
 80100ac:	681a      	ldr	r2, [r3, #0]
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	4413      	add	r3, r2
}
 80100b2:	4618      	mov	r0, r3
 80100b4:	371c      	adds	r7, #28
 80100b6:	46bd      	mov	sp, r7
 80100b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100bc:	4770      	bx	lr

080100be <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80100be:	b580      	push	{r7, lr}
 80100c0:	b086      	sub	sp, #24
 80100c2:	af00      	add	r7, sp, #0
 80100c4:	6078      	str	r0, [r7, #4]
 80100c6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80100d4:	d204      	bcs.n	80100e0 <dir_sdi+0x22>
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	f003 031f 	and.w	r3, r3, #31
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d001      	beq.n	80100e4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80100e0:	2302      	movs	r3, #2
 80100e2:	e063      	b.n	80101ac <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	683a      	ldr	r2, [r7, #0]
 80100e8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	689b      	ldr	r3, [r3, #8]
 80100ee:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d106      	bne.n	8010104 <dir_sdi+0x46>
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	781b      	ldrb	r3, [r3, #0]
 80100fa:	2b02      	cmp	r3, #2
 80100fc:	d902      	bls.n	8010104 <dir_sdi+0x46>
		clst = fs->dirbase;
 80100fe:	693b      	ldr	r3, [r7, #16]
 8010100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010102:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d10c      	bne.n	8010124 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	095b      	lsrs	r3, r3, #5
 801010e:	693a      	ldr	r2, [r7, #16]
 8010110:	8912      	ldrh	r2, [r2, #8]
 8010112:	4293      	cmp	r3, r2
 8010114:	d301      	bcc.n	801011a <dir_sdi+0x5c>
 8010116:	2302      	movs	r3, #2
 8010118:	e048      	b.n	80101ac <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801011a:	693b      	ldr	r3, [r7, #16]
 801011c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	61da      	str	r2, [r3, #28]
 8010122:	e029      	b.n	8010178 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010124:	693b      	ldr	r3, [r7, #16]
 8010126:	895b      	ldrh	r3, [r3, #10]
 8010128:	025b      	lsls	r3, r3, #9
 801012a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801012c:	e019      	b.n	8010162 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	6979      	ldr	r1, [r7, #20]
 8010132:	4618      	mov	r0, r3
 8010134:	f7ff fd01 	bl	800fb3a <get_fat>
 8010138:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010140:	d101      	bne.n	8010146 <dir_sdi+0x88>
 8010142:	2301      	movs	r3, #1
 8010144:	e032      	b.n	80101ac <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	2b01      	cmp	r3, #1
 801014a:	d904      	bls.n	8010156 <dir_sdi+0x98>
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	699b      	ldr	r3, [r3, #24]
 8010150:	697a      	ldr	r2, [r7, #20]
 8010152:	429a      	cmp	r2, r3
 8010154:	d301      	bcc.n	801015a <dir_sdi+0x9c>
 8010156:	2302      	movs	r3, #2
 8010158:	e028      	b.n	80101ac <dir_sdi+0xee>
			ofs -= csz;
 801015a:	683a      	ldr	r2, [r7, #0]
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	1ad3      	subs	r3, r2, r3
 8010160:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010162:	683a      	ldr	r2, [r7, #0]
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	429a      	cmp	r2, r3
 8010168:	d2e1      	bcs.n	801012e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801016a:	6979      	ldr	r1, [r7, #20]
 801016c:	6938      	ldr	r0, [r7, #16]
 801016e:	f7ff fcc5 	bl	800fafc <clust2sect>
 8010172:	4602      	mov	r2, r0
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	697a      	ldr	r2, [r7, #20]
 801017c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	69db      	ldr	r3, [r3, #28]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d101      	bne.n	801018a <dir_sdi+0xcc>
 8010186:	2302      	movs	r3, #2
 8010188:	e010      	b.n	80101ac <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	69da      	ldr	r2, [r3, #28]
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	0a5b      	lsrs	r3, r3, #9
 8010192:	441a      	add	r2, r3
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101a4:	441a      	add	r2, r3
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80101aa:	2300      	movs	r3, #0
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3718      	adds	r7, #24
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}

080101b4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b086      	sub	sp, #24
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	695b      	ldr	r3, [r3, #20]
 80101c8:	3320      	adds	r3, #32
 80101ca:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	69db      	ldr	r3, [r3, #28]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d003      	beq.n	80101dc <dir_next+0x28>
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80101da:	d301      	bcc.n	80101e0 <dir_next+0x2c>
 80101dc:	2304      	movs	r3, #4
 80101de:	e0aa      	b.n	8010336 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	f040 8098 	bne.w	801031c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	69db      	ldr	r3, [r3, #28]
 80101f0:	1c5a      	adds	r2, r3, #1
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	699b      	ldr	r3, [r3, #24]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d10b      	bne.n	8010216 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	095b      	lsrs	r3, r3, #5
 8010202:	68fa      	ldr	r2, [r7, #12]
 8010204:	8912      	ldrh	r2, [r2, #8]
 8010206:	4293      	cmp	r3, r2
 8010208:	f0c0 8088 	bcc.w	801031c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2200      	movs	r2, #0
 8010210:	61da      	str	r2, [r3, #28]
 8010212:	2304      	movs	r3, #4
 8010214:	e08f      	b.n	8010336 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	0a5b      	lsrs	r3, r3, #9
 801021a:	68fa      	ldr	r2, [r7, #12]
 801021c:	8952      	ldrh	r2, [r2, #10]
 801021e:	3a01      	subs	r2, #1
 8010220:	4013      	ands	r3, r2
 8010222:	2b00      	cmp	r3, #0
 8010224:	d17a      	bne.n	801031c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010226:	687a      	ldr	r2, [r7, #4]
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	699b      	ldr	r3, [r3, #24]
 801022c:	4619      	mov	r1, r3
 801022e:	4610      	mov	r0, r2
 8010230:	f7ff fc83 	bl	800fb3a <get_fat>
 8010234:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	2b01      	cmp	r3, #1
 801023a:	d801      	bhi.n	8010240 <dir_next+0x8c>
 801023c:	2302      	movs	r3, #2
 801023e:	e07a      	b.n	8010336 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010246:	d101      	bne.n	801024c <dir_next+0x98>
 8010248:	2301      	movs	r3, #1
 801024a:	e074      	b.n	8010336 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	699b      	ldr	r3, [r3, #24]
 8010250:	697a      	ldr	r2, [r7, #20]
 8010252:	429a      	cmp	r2, r3
 8010254:	d358      	bcc.n	8010308 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d104      	bne.n	8010266 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2200      	movs	r2, #0
 8010260:	61da      	str	r2, [r3, #28]
 8010262:	2304      	movs	r3, #4
 8010264:	e067      	b.n	8010336 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	699b      	ldr	r3, [r3, #24]
 801026c:	4619      	mov	r1, r3
 801026e:	4610      	mov	r0, r2
 8010270:	f7ff fe59 	bl	800ff26 <create_chain>
 8010274:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d101      	bne.n	8010280 <dir_next+0xcc>
 801027c:	2307      	movs	r3, #7
 801027e:	e05a      	b.n	8010336 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010280:	697b      	ldr	r3, [r7, #20]
 8010282:	2b01      	cmp	r3, #1
 8010284:	d101      	bne.n	801028a <dir_next+0xd6>
 8010286:	2302      	movs	r3, #2
 8010288:	e055      	b.n	8010336 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010290:	d101      	bne.n	8010296 <dir_next+0xe2>
 8010292:	2301      	movs	r3, #1
 8010294:	e04f      	b.n	8010336 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010296:	68f8      	ldr	r0, [r7, #12]
 8010298:	f7ff fb50 	bl	800f93c <sync_window>
 801029c:	4603      	mov	r3, r0
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d001      	beq.n	80102a6 <dir_next+0xf2>
 80102a2:	2301      	movs	r3, #1
 80102a4:	e047      	b.n	8010336 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	3334      	adds	r3, #52	@ 0x34
 80102aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80102ae:	2100      	movs	r1, #0
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7ff f985 	bl	800f5c0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80102b6:	2300      	movs	r3, #0
 80102b8:	613b      	str	r3, [r7, #16]
 80102ba:	6979      	ldr	r1, [r7, #20]
 80102bc:	68f8      	ldr	r0, [r7, #12]
 80102be:	f7ff fc1d 	bl	800fafc <clust2sect>
 80102c2:	4602      	mov	r2, r0
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80102c8:	e012      	b.n	80102f0 <dir_next+0x13c>
						fs->wflag = 1;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	2201      	movs	r2, #1
 80102ce:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80102d0:	68f8      	ldr	r0, [r7, #12]
 80102d2:	f7ff fb33 	bl	800f93c <sync_window>
 80102d6:	4603      	mov	r3, r0
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d001      	beq.n	80102e0 <dir_next+0x12c>
 80102dc:	2301      	movs	r3, #1
 80102de:	e02a      	b.n	8010336 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	3301      	adds	r3, #1
 80102e4:	613b      	str	r3, [r7, #16]
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102ea:	1c5a      	adds	r2, r3, #1
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	895b      	ldrh	r3, [r3, #10]
 80102f4:	461a      	mov	r2, r3
 80102f6:	693b      	ldr	r3, [r7, #16]
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d3e6      	bcc.n	80102ca <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	1ad2      	subs	r2, r2, r3
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	697a      	ldr	r2, [r7, #20]
 801030c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801030e:	6979      	ldr	r1, [r7, #20]
 8010310:	68f8      	ldr	r0, [r7, #12]
 8010312:	f7ff fbf3 	bl	800fafc <clust2sect>
 8010316:	4602      	mov	r2, r0
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	68ba      	ldr	r2, [r7, #8]
 8010320:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801032e:	441a      	add	r2, r3
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010334:	2300      	movs	r3, #0
}
 8010336:	4618      	mov	r0, r3
 8010338:	3718      	adds	r7, #24
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}

0801033e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801033e:	b580      	push	{r7, lr}
 8010340:	b086      	sub	sp, #24
 8010342:	af00      	add	r7, sp, #0
 8010344:	6078      	str	r0, [r7, #4]
 8010346:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801034e:	2100      	movs	r1, #0
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	f7ff feb4 	bl	80100be <dir_sdi>
 8010356:	4603      	mov	r3, r0
 8010358:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801035a:	7dfb      	ldrb	r3, [r7, #23]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d12b      	bne.n	80103b8 <dir_alloc+0x7a>
		n = 0;
 8010360:	2300      	movs	r3, #0
 8010362:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	69db      	ldr	r3, [r3, #28]
 8010368:	4619      	mov	r1, r3
 801036a:	68f8      	ldr	r0, [r7, #12]
 801036c:	f7ff fb2a 	bl	800f9c4 <move_window>
 8010370:	4603      	mov	r3, r0
 8010372:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010374:	7dfb      	ldrb	r3, [r7, #23]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d11d      	bne.n	80103b6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6a1b      	ldr	r3, [r3, #32]
 801037e:	781b      	ldrb	r3, [r3, #0]
 8010380:	2be5      	cmp	r3, #229	@ 0xe5
 8010382:	d004      	beq.n	801038e <dir_alloc+0x50>
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6a1b      	ldr	r3, [r3, #32]
 8010388:	781b      	ldrb	r3, [r3, #0]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d107      	bne.n	801039e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801038e:	693b      	ldr	r3, [r7, #16]
 8010390:	3301      	adds	r3, #1
 8010392:	613b      	str	r3, [r7, #16]
 8010394:	693a      	ldr	r2, [r7, #16]
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	429a      	cmp	r2, r3
 801039a:	d102      	bne.n	80103a2 <dir_alloc+0x64>
 801039c:	e00c      	b.n	80103b8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801039e:	2300      	movs	r3, #0
 80103a0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80103a2:	2101      	movs	r1, #1
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f7ff ff05 	bl	80101b4 <dir_next>
 80103aa:	4603      	mov	r3, r0
 80103ac:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80103ae:	7dfb      	ldrb	r3, [r7, #23]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d0d7      	beq.n	8010364 <dir_alloc+0x26>
 80103b4:	e000      	b.n	80103b8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80103b6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80103b8:	7dfb      	ldrb	r3, [r7, #23]
 80103ba:	2b04      	cmp	r3, #4
 80103bc:	d101      	bne.n	80103c2 <dir_alloc+0x84>
 80103be:	2307      	movs	r3, #7
 80103c0:	75fb      	strb	r3, [r7, #23]
	return res;
 80103c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	3718      	adds	r7, #24
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}

080103cc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b084      	sub	sp, #16
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	331a      	adds	r3, #26
 80103da:	4618      	mov	r0, r3
 80103dc:	f7ff f84c 	bl	800f478 <ld_word>
 80103e0:	4603      	mov	r3, r0
 80103e2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	781b      	ldrb	r3, [r3, #0]
 80103e8:	2b03      	cmp	r3, #3
 80103ea:	d109      	bne.n	8010400 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80103ec:	683b      	ldr	r3, [r7, #0]
 80103ee:	3314      	adds	r3, #20
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7ff f841 	bl	800f478 <ld_word>
 80103f6:	4603      	mov	r3, r0
 80103f8:	041b      	lsls	r3, r3, #16
 80103fa:	68fa      	ldr	r2, [r7, #12]
 80103fc:	4313      	orrs	r3, r2
 80103fe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010400:	68fb      	ldr	r3, [r7, #12]
}
 8010402:	4618      	mov	r0, r3
 8010404:	3710      	adds	r7, #16
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}

0801040a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801040a:	b580      	push	{r7, lr}
 801040c:	b084      	sub	sp, #16
 801040e:	af00      	add	r7, sp, #0
 8010410:	60f8      	str	r0, [r7, #12]
 8010412:	60b9      	str	r1, [r7, #8]
 8010414:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	331a      	adds	r3, #26
 801041a:	687a      	ldr	r2, [r7, #4]
 801041c:	b292      	uxth	r2, r2
 801041e:	4611      	mov	r1, r2
 8010420:	4618      	mov	r0, r3
 8010422:	f7ff f865 	bl	800f4f0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	781b      	ldrb	r3, [r3, #0]
 801042a:	2b03      	cmp	r3, #3
 801042c:	d109      	bne.n	8010442 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	f103 0214 	add.w	r2, r3, #20
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	0c1b      	lsrs	r3, r3, #16
 8010438:	b29b      	uxth	r3, r3
 801043a:	4619      	mov	r1, r3
 801043c:	4610      	mov	r0, r2
 801043e:	f7ff f857 	bl	800f4f0 <st_word>
	}
}
 8010442:	bf00      	nop
 8010444:	3710      	adds	r7, #16
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}

0801044a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801044a:	b580      	push	{r7, lr}
 801044c:	b086      	sub	sp, #24
 801044e:	af00      	add	r7, sp, #0
 8010450:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010458:	2100      	movs	r1, #0
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f7ff fe2f 	bl	80100be <dir_sdi>
 8010460:	4603      	mov	r3, r0
 8010462:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010464:	7dfb      	ldrb	r3, [r7, #23]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d001      	beq.n	801046e <dir_find+0x24>
 801046a:	7dfb      	ldrb	r3, [r7, #23]
 801046c:	e03e      	b.n	80104ec <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	69db      	ldr	r3, [r3, #28]
 8010472:	4619      	mov	r1, r3
 8010474:	6938      	ldr	r0, [r7, #16]
 8010476:	f7ff faa5 	bl	800f9c4 <move_window>
 801047a:	4603      	mov	r3, r0
 801047c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801047e:	7dfb      	ldrb	r3, [r7, #23]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d12f      	bne.n	80104e4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6a1b      	ldr	r3, [r3, #32]
 8010488:	781b      	ldrb	r3, [r3, #0]
 801048a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801048c:	7bfb      	ldrb	r3, [r7, #15]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d102      	bne.n	8010498 <dir_find+0x4e>
 8010492:	2304      	movs	r3, #4
 8010494:	75fb      	strb	r3, [r7, #23]
 8010496:	e028      	b.n	80104ea <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6a1b      	ldr	r3, [r3, #32]
 801049c:	330b      	adds	r3, #11
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80104a4:	b2da      	uxtb	r2, r3
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	6a1b      	ldr	r3, [r3, #32]
 80104ae:	330b      	adds	r3, #11
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	f003 0308 	and.w	r3, r3, #8
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d10a      	bne.n	80104d0 <dir_find+0x86>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6a18      	ldr	r0, [r3, #32]
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	3324      	adds	r3, #36	@ 0x24
 80104c2:	220b      	movs	r2, #11
 80104c4:	4619      	mov	r1, r3
 80104c6:	f7ff f896 	bl	800f5f6 <mem_cmp>
 80104ca:	4603      	mov	r3, r0
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d00b      	beq.n	80104e8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80104d0:	2100      	movs	r1, #0
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f7ff fe6e 	bl	80101b4 <dir_next>
 80104d8:	4603      	mov	r3, r0
 80104da:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80104dc:	7dfb      	ldrb	r3, [r7, #23]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d0c5      	beq.n	801046e <dir_find+0x24>
 80104e2:	e002      	b.n	80104ea <dir_find+0xa0>
		if (res != FR_OK) break;
 80104e4:	bf00      	nop
 80104e6:	e000      	b.n	80104ea <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80104e8:	bf00      	nop

	return res;
 80104ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	3718      	adds	r7, #24
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}

080104f4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b084      	sub	sp, #16
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010502:	2101      	movs	r1, #1
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f7ff ff1a 	bl	801033e <dir_alloc>
 801050a:	4603      	mov	r3, r0
 801050c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801050e:	7bfb      	ldrb	r3, [r7, #15]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d11c      	bne.n	801054e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	69db      	ldr	r3, [r3, #28]
 8010518:	4619      	mov	r1, r3
 801051a:	68b8      	ldr	r0, [r7, #8]
 801051c:	f7ff fa52 	bl	800f9c4 <move_window>
 8010520:	4603      	mov	r3, r0
 8010522:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010524:	7bfb      	ldrb	r3, [r7, #15]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d111      	bne.n	801054e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6a1b      	ldr	r3, [r3, #32]
 801052e:	2220      	movs	r2, #32
 8010530:	2100      	movs	r1, #0
 8010532:	4618      	mov	r0, r3
 8010534:	f7ff f844 	bl	800f5c0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6a18      	ldr	r0, [r3, #32]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	3324      	adds	r3, #36	@ 0x24
 8010540:	220b      	movs	r2, #11
 8010542:	4619      	mov	r1, r3
 8010544:	f7ff f81b 	bl	800f57e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	2201      	movs	r2, #1
 801054c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801054e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010550:	4618      	mov	r0, r3
 8010552:	3710      	adds	r7, #16
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}

08010558 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b088      	sub	sp, #32
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
 8010560:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	60fb      	str	r3, [r7, #12]
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	3324      	adds	r3, #36	@ 0x24
 801056c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801056e:	220b      	movs	r2, #11
 8010570:	2120      	movs	r1, #32
 8010572:	68b8      	ldr	r0, [r7, #8]
 8010574:	f7ff f824 	bl	800f5c0 <mem_set>
	si = i = 0; ni = 8;
 8010578:	2300      	movs	r3, #0
 801057a:	613b      	str	r3, [r7, #16]
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	61fb      	str	r3, [r7, #28]
 8010580:	2308      	movs	r3, #8
 8010582:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010584:	69fb      	ldr	r3, [r7, #28]
 8010586:	1c5a      	adds	r2, r3, #1
 8010588:	61fa      	str	r2, [r7, #28]
 801058a:	68fa      	ldr	r2, [r7, #12]
 801058c:	4413      	add	r3, r2
 801058e:	781b      	ldrb	r3, [r3, #0]
 8010590:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010592:	7efb      	ldrb	r3, [r7, #27]
 8010594:	2b20      	cmp	r3, #32
 8010596:	d94e      	bls.n	8010636 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010598:	7efb      	ldrb	r3, [r7, #27]
 801059a:	2b2f      	cmp	r3, #47	@ 0x2f
 801059c:	d006      	beq.n	80105ac <create_name+0x54>
 801059e:	7efb      	ldrb	r3, [r7, #27]
 80105a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80105a2:	d110      	bne.n	80105c6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80105a4:	e002      	b.n	80105ac <create_name+0x54>
 80105a6:	69fb      	ldr	r3, [r7, #28]
 80105a8:	3301      	adds	r3, #1
 80105aa:	61fb      	str	r3, [r7, #28]
 80105ac:	68fa      	ldr	r2, [r7, #12]
 80105ae:	69fb      	ldr	r3, [r7, #28]
 80105b0:	4413      	add	r3, r2
 80105b2:	781b      	ldrb	r3, [r3, #0]
 80105b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80105b6:	d0f6      	beq.n	80105a6 <create_name+0x4e>
 80105b8:	68fa      	ldr	r2, [r7, #12]
 80105ba:	69fb      	ldr	r3, [r7, #28]
 80105bc:	4413      	add	r3, r2
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80105c2:	d0f0      	beq.n	80105a6 <create_name+0x4e>
			break;
 80105c4:	e038      	b.n	8010638 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80105c6:	7efb      	ldrb	r3, [r7, #27]
 80105c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80105ca:	d003      	beq.n	80105d4 <create_name+0x7c>
 80105cc:	693a      	ldr	r2, [r7, #16]
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	429a      	cmp	r2, r3
 80105d2:	d30c      	bcc.n	80105ee <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	2b0b      	cmp	r3, #11
 80105d8:	d002      	beq.n	80105e0 <create_name+0x88>
 80105da:	7efb      	ldrb	r3, [r7, #27]
 80105dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80105de:	d001      	beq.n	80105e4 <create_name+0x8c>
 80105e0:	2306      	movs	r3, #6
 80105e2:	e044      	b.n	801066e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80105e4:	2308      	movs	r3, #8
 80105e6:	613b      	str	r3, [r7, #16]
 80105e8:	230b      	movs	r3, #11
 80105ea:	617b      	str	r3, [r7, #20]
			continue;
 80105ec:	e022      	b.n	8010634 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80105ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	da04      	bge.n	8010600 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80105f6:	7efb      	ldrb	r3, [r7, #27]
 80105f8:	3b80      	subs	r3, #128	@ 0x80
 80105fa:	4a1f      	ldr	r2, [pc, #124]	@ (8010678 <create_name+0x120>)
 80105fc:	5cd3      	ldrb	r3, [r2, r3]
 80105fe:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010600:	7efb      	ldrb	r3, [r7, #27]
 8010602:	4619      	mov	r1, r3
 8010604:	481d      	ldr	r0, [pc, #116]	@ (801067c <create_name+0x124>)
 8010606:	f7ff f81d 	bl	800f644 <chk_chr>
 801060a:	4603      	mov	r3, r0
 801060c:	2b00      	cmp	r3, #0
 801060e:	d001      	beq.n	8010614 <create_name+0xbc>
 8010610:	2306      	movs	r3, #6
 8010612:	e02c      	b.n	801066e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010614:	7efb      	ldrb	r3, [r7, #27]
 8010616:	2b60      	cmp	r3, #96	@ 0x60
 8010618:	d905      	bls.n	8010626 <create_name+0xce>
 801061a:	7efb      	ldrb	r3, [r7, #27]
 801061c:	2b7a      	cmp	r3, #122	@ 0x7a
 801061e:	d802      	bhi.n	8010626 <create_name+0xce>
 8010620:	7efb      	ldrb	r3, [r7, #27]
 8010622:	3b20      	subs	r3, #32
 8010624:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8010626:	693b      	ldr	r3, [r7, #16]
 8010628:	1c5a      	adds	r2, r3, #1
 801062a:	613a      	str	r2, [r7, #16]
 801062c:	68ba      	ldr	r2, [r7, #8]
 801062e:	4413      	add	r3, r2
 8010630:	7efa      	ldrb	r2, [r7, #27]
 8010632:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010634:	e7a6      	b.n	8010584 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010636:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010638:	68fa      	ldr	r2, [r7, #12]
 801063a:	69fb      	ldr	r3, [r7, #28]
 801063c:	441a      	add	r2, r3
 801063e:	683b      	ldr	r3, [r7, #0]
 8010640:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010642:	693b      	ldr	r3, [r7, #16]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d101      	bne.n	801064c <create_name+0xf4>
 8010648:	2306      	movs	r3, #6
 801064a:	e010      	b.n	801066e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801064c:	68bb      	ldr	r3, [r7, #8]
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	2be5      	cmp	r3, #229	@ 0xe5
 8010652:	d102      	bne.n	801065a <create_name+0x102>
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	2205      	movs	r2, #5
 8010658:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801065a:	7efb      	ldrb	r3, [r7, #27]
 801065c:	2b20      	cmp	r3, #32
 801065e:	d801      	bhi.n	8010664 <create_name+0x10c>
 8010660:	2204      	movs	r2, #4
 8010662:	e000      	b.n	8010666 <create_name+0x10e>
 8010664:	2200      	movs	r2, #0
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	330b      	adds	r3, #11
 801066a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801066c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801066e:	4618      	mov	r0, r3
 8010670:	3720      	adds	r7, #32
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}
 8010676:	bf00      	nop
 8010678:	08017e64 	.word	0x08017e64
 801067c:	08017c60 	.word	0x08017c60

08010680 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b086      	sub	sp, #24
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010694:	e002      	b.n	801069c <follow_path+0x1c>
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	3301      	adds	r3, #1
 801069a:	603b      	str	r3, [r7, #0]
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80106a2:	d0f8      	beq.n	8010696 <follow_path+0x16>
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	2b5c      	cmp	r3, #92	@ 0x5c
 80106aa:	d0f4      	beq.n	8010696 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80106ac:	693b      	ldr	r3, [r7, #16]
 80106ae:	2200      	movs	r2, #0
 80106b0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	781b      	ldrb	r3, [r3, #0]
 80106b6:	2b1f      	cmp	r3, #31
 80106b8:	d80a      	bhi.n	80106d0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2280      	movs	r2, #128	@ 0x80
 80106be:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80106c2:	2100      	movs	r1, #0
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f7ff fcfa 	bl	80100be <dir_sdi>
 80106ca:	4603      	mov	r3, r0
 80106cc:	75fb      	strb	r3, [r7, #23]
 80106ce:	e043      	b.n	8010758 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80106d0:	463b      	mov	r3, r7
 80106d2:	4619      	mov	r1, r3
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f7ff ff3f 	bl	8010558 <create_name>
 80106da:	4603      	mov	r3, r0
 80106dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80106de:	7dfb      	ldrb	r3, [r7, #23]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d134      	bne.n	801074e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f7ff feb0 	bl	801044a <dir_find>
 80106ea:	4603      	mov	r3, r0
 80106ec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80106f4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80106f6:	7dfb      	ldrb	r3, [r7, #23]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d00a      	beq.n	8010712 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80106fc:	7dfb      	ldrb	r3, [r7, #23]
 80106fe:	2b04      	cmp	r3, #4
 8010700:	d127      	bne.n	8010752 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010702:	7afb      	ldrb	r3, [r7, #11]
 8010704:	f003 0304 	and.w	r3, r3, #4
 8010708:	2b00      	cmp	r3, #0
 801070a:	d122      	bne.n	8010752 <follow_path+0xd2>
 801070c:	2305      	movs	r3, #5
 801070e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010710:	e01f      	b.n	8010752 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010712:	7afb      	ldrb	r3, [r7, #11]
 8010714:	f003 0304 	and.w	r3, r3, #4
 8010718:	2b00      	cmp	r3, #0
 801071a:	d11c      	bne.n	8010756 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801071c:	693b      	ldr	r3, [r7, #16]
 801071e:	799b      	ldrb	r3, [r3, #6]
 8010720:	f003 0310 	and.w	r3, r3, #16
 8010724:	2b00      	cmp	r3, #0
 8010726:	d102      	bne.n	801072e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010728:	2305      	movs	r3, #5
 801072a:	75fb      	strb	r3, [r7, #23]
 801072c:	e014      	b.n	8010758 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	695b      	ldr	r3, [r3, #20]
 8010738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801073c:	4413      	add	r3, r2
 801073e:	4619      	mov	r1, r3
 8010740:	68f8      	ldr	r0, [r7, #12]
 8010742:	f7ff fe43 	bl	80103cc <ld_clust>
 8010746:	4602      	mov	r2, r0
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801074c:	e7c0      	b.n	80106d0 <follow_path+0x50>
			if (res != FR_OK) break;
 801074e:	bf00      	nop
 8010750:	e002      	b.n	8010758 <follow_path+0xd8>
				break;
 8010752:	bf00      	nop
 8010754:	e000      	b.n	8010758 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010756:	bf00      	nop
			}
		}
	}

	return res;
 8010758:	7dfb      	ldrb	r3, [r7, #23]
}
 801075a:	4618      	mov	r0, r3
 801075c:	3718      	adds	r7, #24
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}

08010762 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010762:	b480      	push	{r7}
 8010764:	b087      	sub	sp, #28
 8010766:	af00      	add	r7, sp, #0
 8010768:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801076a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801076e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d031      	beq.n	80107dc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	617b      	str	r3, [r7, #20]
 801077e:	e002      	b.n	8010786 <get_ldnumber+0x24>
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	3301      	adds	r3, #1
 8010784:	617b      	str	r3, [r7, #20]
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	781b      	ldrb	r3, [r3, #0]
 801078a:	2b20      	cmp	r3, #32
 801078c:	d903      	bls.n	8010796 <get_ldnumber+0x34>
 801078e:	697b      	ldr	r3, [r7, #20]
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	2b3a      	cmp	r3, #58	@ 0x3a
 8010794:	d1f4      	bne.n	8010780 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	2b3a      	cmp	r3, #58	@ 0x3a
 801079c:	d11c      	bne.n	80107d8 <get_ldnumber+0x76>
			tp = *path;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	1c5a      	adds	r2, r3, #1
 80107a8:	60fa      	str	r2, [r7, #12]
 80107aa:	781b      	ldrb	r3, [r3, #0]
 80107ac:	3b30      	subs	r3, #48	@ 0x30
 80107ae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	2b09      	cmp	r3, #9
 80107b4:	d80e      	bhi.n	80107d4 <get_ldnumber+0x72>
 80107b6:	68fa      	ldr	r2, [r7, #12]
 80107b8:	697b      	ldr	r3, [r7, #20]
 80107ba:	429a      	cmp	r2, r3
 80107bc:	d10a      	bne.n	80107d4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d107      	bne.n	80107d4 <get_ldnumber+0x72>
					vol = (int)i;
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	3301      	adds	r3, #1
 80107cc:	617b      	str	r3, [r7, #20]
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	697a      	ldr	r2, [r7, #20]
 80107d2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80107d4:	693b      	ldr	r3, [r7, #16]
 80107d6:	e002      	b.n	80107de <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80107d8:	2300      	movs	r3, #0
 80107da:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80107dc:	693b      	ldr	r3, [r7, #16]
}
 80107de:	4618      	mov	r0, r3
 80107e0:	371c      	adds	r7, #28
 80107e2:	46bd      	mov	sp, r7
 80107e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e8:	4770      	bx	lr
	...

080107ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b082      	sub	sp, #8
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
 80107f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	2200      	movs	r2, #0
 80107fa:	70da      	strb	r2, [r3, #3]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010802:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010804:	6839      	ldr	r1, [r7, #0]
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f7ff f8dc 	bl	800f9c4 <move_window>
 801080c:	4603      	mov	r3, r0
 801080e:	2b00      	cmp	r3, #0
 8010810:	d001      	beq.n	8010816 <check_fs+0x2a>
 8010812:	2304      	movs	r3, #4
 8010814:	e038      	b.n	8010888 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	3334      	adds	r3, #52	@ 0x34
 801081a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801081e:	4618      	mov	r0, r3
 8010820:	f7fe fe2a 	bl	800f478 <ld_word>
 8010824:	4603      	mov	r3, r0
 8010826:	461a      	mov	r2, r3
 8010828:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801082c:	429a      	cmp	r2, r3
 801082e:	d001      	beq.n	8010834 <check_fs+0x48>
 8010830:	2303      	movs	r3, #3
 8010832:	e029      	b.n	8010888 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801083a:	2be9      	cmp	r3, #233	@ 0xe9
 801083c:	d009      	beq.n	8010852 <check_fs+0x66>
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010844:	2beb      	cmp	r3, #235	@ 0xeb
 8010846:	d11e      	bne.n	8010886 <check_fs+0x9a>
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 801084e:	2b90      	cmp	r3, #144	@ 0x90
 8010850:	d119      	bne.n	8010886 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	3334      	adds	r3, #52	@ 0x34
 8010856:	3336      	adds	r3, #54	@ 0x36
 8010858:	4618      	mov	r0, r3
 801085a:	f7fe fe26 	bl	800f4aa <ld_dword>
 801085e:	4603      	mov	r3, r0
 8010860:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010864:	4a0a      	ldr	r2, [pc, #40]	@ (8010890 <check_fs+0xa4>)
 8010866:	4293      	cmp	r3, r2
 8010868:	d101      	bne.n	801086e <check_fs+0x82>
 801086a:	2300      	movs	r3, #0
 801086c:	e00c      	b.n	8010888 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	3334      	adds	r3, #52	@ 0x34
 8010872:	3352      	adds	r3, #82	@ 0x52
 8010874:	4618      	mov	r0, r3
 8010876:	f7fe fe18 	bl	800f4aa <ld_dword>
 801087a:	4603      	mov	r3, r0
 801087c:	4a05      	ldr	r2, [pc, #20]	@ (8010894 <check_fs+0xa8>)
 801087e:	4293      	cmp	r3, r2
 8010880:	d101      	bne.n	8010886 <check_fs+0x9a>
 8010882:	2300      	movs	r3, #0
 8010884:	e000      	b.n	8010888 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010886:	2302      	movs	r3, #2
}
 8010888:	4618      	mov	r0, r3
 801088a:	3708      	adds	r7, #8
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}
 8010890:	00544146 	.word	0x00544146
 8010894:	33544146 	.word	0x33544146

08010898 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b096      	sub	sp, #88	@ 0x58
 801089c:	af00      	add	r7, sp, #0
 801089e:	60f8      	str	r0, [r7, #12]
 80108a0:	60b9      	str	r1, [r7, #8]
 80108a2:	4613      	mov	r3, r2
 80108a4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	2200      	movs	r2, #0
 80108aa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80108ac:	68f8      	ldr	r0, [r7, #12]
 80108ae:	f7ff ff58 	bl	8010762 <get_ldnumber>
 80108b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80108b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	da01      	bge.n	80108be <find_volume+0x26>
 80108ba:	230b      	movs	r3, #11
 80108bc:	e235      	b.n	8010d2a <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80108be:	4aa5      	ldr	r2, [pc, #660]	@ (8010b54 <find_volume+0x2bc>)
 80108c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108c6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80108c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d101      	bne.n	80108d2 <find_volume+0x3a>
 80108ce:	230c      	movs	r3, #12
 80108d0:	e22b      	b.n	8010d2a <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80108d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80108d4:	f7fe fed1 	bl	800f67a <lock_fs>
 80108d8:	4603      	mov	r3, r0
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d101      	bne.n	80108e2 <find_volume+0x4a>
 80108de:	230f      	movs	r3, #15
 80108e0:	e223      	b.n	8010d2a <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80108e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80108e8:	79fb      	ldrb	r3, [r7, #7]
 80108ea:	f023 0301 	bic.w	r3, r3, #1
 80108ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80108f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108f2:	781b      	ldrb	r3, [r3, #0]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d01a      	beq.n	801092e <find_volume+0x96>
		stat = disk_status(fs->drv);
 80108f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108fa:	785b      	ldrb	r3, [r3, #1]
 80108fc:	4618      	mov	r0, r3
 80108fe:	f7fe fd1d 	bl	800f33c <disk_status>
 8010902:	4603      	mov	r3, r0
 8010904:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010908:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801090c:	f003 0301 	and.w	r3, r3, #1
 8010910:	2b00      	cmp	r3, #0
 8010912:	d10c      	bne.n	801092e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010914:	79fb      	ldrb	r3, [r7, #7]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d007      	beq.n	801092a <find_volume+0x92>
 801091a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801091e:	f003 0304 	and.w	r3, r3, #4
 8010922:	2b00      	cmp	r3, #0
 8010924:	d001      	beq.n	801092a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010926:	230a      	movs	r3, #10
 8010928:	e1ff      	b.n	8010d2a <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 801092a:	2300      	movs	r3, #0
 801092c:	e1fd      	b.n	8010d2a <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801092e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010930:	2200      	movs	r2, #0
 8010932:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010936:	b2da      	uxtb	r2, r3
 8010938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801093a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801093c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801093e:	785b      	ldrb	r3, [r3, #1]
 8010940:	4618      	mov	r0, r3
 8010942:	f7fe fd15 	bl	800f370 <disk_initialize>
 8010946:	4603      	mov	r3, r0
 8010948:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801094c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010950:	f003 0301 	and.w	r3, r3, #1
 8010954:	2b00      	cmp	r3, #0
 8010956:	d001      	beq.n	801095c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010958:	2303      	movs	r3, #3
 801095a:	e1e6      	b.n	8010d2a <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801095c:	79fb      	ldrb	r3, [r7, #7]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d007      	beq.n	8010972 <find_volume+0xda>
 8010962:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010966:	f003 0304 	and.w	r3, r3, #4
 801096a:	2b00      	cmp	r3, #0
 801096c:	d001      	beq.n	8010972 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 801096e:	230a      	movs	r3, #10
 8010970:	e1db      	b.n	8010d2a <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010972:	2300      	movs	r3, #0
 8010974:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010976:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010978:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801097a:	f7ff ff37 	bl	80107ec <check_fs>
 801097e:	4603      	mov	r3, r0
 8010980:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010984:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010988:	2b02      	cmp	r3, #2
 801098a:	d149      	bne.n	8010a20 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801098c:	2300      	movs	r3, #0
 801098e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010990:	e01e      	b.n	80109d0 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010994:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010998:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801099a:	011b      	lsls	r3, r3, #4
 801099c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80109a0:	4413      	add	r3, r2
 80109a2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80109a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109a6:	3304      	adds	r3, #4
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d006      	beq.n	80109bc <find_volume+0x124>
 80109ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109b0:	3308      	adds	r3, #8
 80109b2:	4618      	mov	r0, r3
 80109b4:	f7fe fd79 	bl	800f4aa <ld_dword>
 80109b8:	4602      	mov	r2, r0
 80109ba:	e000      	b.n	80109be <find_volume+0x126>
 80109bc:	2200      	movs	r2, #0
 80109be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109c0:	009b      	lsls	r3, r3, #2
 80109c2:	3358      	adds	r3, #88	@ 0x58
 80109c4:	443b      	add	r3, r7
 80109c6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80109ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109cc:	3301      	adds	r3, #1
 80109ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80109d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109d2:	2b03      	cmp	r3, #3
 80109d4:	d9dd      	bls.n	8010992 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80109d6:	2300      	movs	r3, #0
 80109d8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80109da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d002      	beq.n	80109e6 <find_volume+0x14e>
 80109e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109e2:	3b01      	subs	r3, #1
 80109e4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80109e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109e8:	009b      	lsls	r3, r3, #2
 80109ea:	3358      	adds	r3, #88	@ 0x58
 80109ec:	443b      	add	r3, r7
 80109ee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80109f2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80109f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d005      	beq.n	8010a06 <find_volume+0x16e>
 80109fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80109fc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80109fe:	f7ff fef5 	bl	80107ec <check_fs>
 8010a02:	4603      	mov	r3, r0
 8010a04:	e000      	b.n	8010a08 <find_volume+0x170>
 8010a06:	2303      	movs	r3, #3
 8010a08:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010a0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010a10:	2b01      	cmp	r3, #1
 8010a12:	d905      	bls.n	8010a20 <find_volume+0x188>
 8010a14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a16:	3301      	adds	r3, #1
 8010a18:	643b      	str	r3, [r7, #64]	@ 0x40
 8010a1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a1c:	2b03      	cmp	r3, #3
 8010a1e:	d9e2      	bls.n	80109e6 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010a20:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010a24:	2b04      	cmp	r3, #4
 8010a26:	d101      	bne.n	8010a2c <find_volume+0x194>
 8010a28:	2301      	movs	r3, #1
 8010a2a:	e17e      	b.n	8010d2a <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010a2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010a30:	2b01      	cmp	r3, #1
 8010a32:	d901      	bls.n	8010a38 <find_volume+0x1a0>
 8010a34:	230d      	movs	r3, #13
 8010a36:	e178      	b.n	8010d2a <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a3a:	3334      	adds	r3, #52	@ 0x34
 8010a3c:	330b      	adds	r3, #11
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7fe fd1a 	bl	800f478 <ld_word>
 8010a44:	4603      	mov	r3, r0
 8010a46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a4a:	d001      	beq.n	8010a50 <find_volume+0x1b8>
 8010a4c:	230d      	movs	r3, #13
 8010a4e:	e16c      	b.n	8010d2a <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a52:	3334      	adds	r3, #52	@ 0x34
 8010a54:	3316      	adds	r3, #22
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7fe fd0e 	bl	800f478 <ld_word>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d106      	bne.n	8010a74 <find_volume+0x1dc>
 8010a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a68:	3334      	adds	r3, #52	@ 0x34
 8010a6a:	3324      	adds	r3, #36	@ 0x24
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7fe fd1c 	bl	800f4aa <ld_dword>
 8010a72:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8010a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010a78:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a7c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8010a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a82:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a86:	789b      	ldrb	r3, [r3, #2]
 8010a88:	2b01      	cmp	r3, #1
 8010a8a:	d005      	beq.n	8010a98 <find_volume+0x200>
 8010a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a8e:	789b      	ldrb	r3, [r3, #2]
 8010a90:	2b02      	cmp	r3, #2
 8010a92:	d001      	beq.n	8010a98 <find_volume+0x200>
 8010a94:	230d      	movs	r3, #13
 8010a96:	e148      	b.n	8010d2a <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a9a:	789b      	ldrb	r3, [r3, #2]
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010aa0:	fb02 f303 	mul.w	r3, r2, r3
 8010aa4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010aac:	461a      	mov	r2, r3
 8010aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ab0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ab4:	895b      	ldrh	r3, [r3, #10]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d008      	beq.n	8010acc <find_volume+0x234>
 8010aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010abc:	895b      	ldrh	r3, [r3, #10]
 8010abe:	461a      	mov	r2, r3
 8010ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ac2:	895b      	ldrh	r3, [r3, #10]
 8010ac4:	3b01      	subs	r3, #1
 8010ac6:	4013      	ands	r3, r2
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d001      	beq.n	8010ad0 <find_volume+0x238>
 8010acc:	230d      	movs	r3, #13
 8010ace:	e12c      	b.n	8010d2a <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ad2:	3334      	adds	r3, #52	@ 0x34
 8010ad4:	3311      	adds	r3, #17
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7fe fcce 	bl	800f478 <ld_word>
 8010adc:	4603      	mov	r3, r0
 8010ade:	461a      	mov	r2, r3
 8010ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ae2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ae6:	891b      	ldrh	r3, [r3, #8]
 8010ae8:	f003 030f 	and.w	r3, r3, #15
 8010aec:	b29b      	uxth	r3, r3
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d001      	beq.n	8010af6 <find_volume+0x25e>
 8010af2:	230d      	movs	r3, #13
 8010af4:	e119      	b.n	8010d2a <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010af8:	3334      	adds	r3, #52	@ 0x34
 8010afa:	3313      	adds	r3, #19
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7fe fcbb 	bl	800f478 <ld_word>
 8010b02:	4603      	mov	r3, r0
 8010b04:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010b06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d106      	bne.n	8010b1a <find_volume+0x282>
 8010b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b0e:	3334      	adds	r3, #52	@ 0x34
 8010b10:	3320      	adds	r3, #32
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7fe fcc9 	bl	800f4aa <ld_dword>
 8010b18:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b1c:	3334      	adds	r3, #52	@ 0x34
 8010b1e:	330e      	adds	r3, #14
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7fe fca9 	bl	800f478 <ld_word>
 8010b26:	4603      	mov	r3, r0
 8010b28:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010b2a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d101      	bne.n	8010b34 <find_volume+0x29c>
 8010b30:	230d      	movs	r3, #13
 8010b32:	e0fa      	b.n	8010d2a <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010b34:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010b36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b38:	4413      	add	r3, r2
 8010b3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010b3c:	8912      	ldrh	r2, [r2, #8]
 8010b3e:	0912      	lsrs	r2, r2, #4
 8010b40:	b292      	uxth	r2, r2
 8010b42:	4413      	add	r3, r2
 8010b44:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010b46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d204      	bcs.n	8010b58 <find_volume+0x2c0>
 8010b4e:	230d      	movs	r3, #13
 8010b50:	e0eb      	b.n	8010d2a <find_volume+0x492>
 8010b52:	bf00      	nop
 8010b54:	24000a44 	.word	0x24000a44
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010b58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b5c:	1ad3      	subs	r3, r2, r3
 8010b5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010b60:	8952      	ldrh	r2, [r2, #10]
 8010b62:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b66:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d101      	bne.n	8010b72 <find_volume+0x2da>
 8010b6e:	230d      	movs	r3, #13
 8010b70:	e0db      	b.n	8010d2a <find_volume+0x492>
		fmt = FS_FAT32;
 8010b72:	2303      	movs	r3, #3
 8010b74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b7a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010b7e:	4293      	cmp	r3, r2
 8010b80:	d802      	bhi.n	8010b88 <find_volume+0x2f0>
 8010b82:	2302      	movs	r3, #2
 8010b84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b8a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010b8e:	4293      	cmp	r3, r2
 8010b90:	d802      	bhi.n	8010b98 <find_volume+0x300>
 8010b92:	2301      	movs	r3, #1
 8010b94:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b9a:	1c9a      	adds	r2, r3, #2
 8010b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b9e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ba2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010ba4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010ba6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010ba8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010baa:	441a      	add	r2, r3
 8010bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bae:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010bb0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bb4:	441a      	add	r2, r3
 8010bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8010bba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010bbe:	2b03      	cmp	r3, #3
 8010bc0:	d11e      	bne.n	8010c00 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bc4:	3334      	adds	r3, #52	@ 0x34
 8010bc6:	332a      	adds	r3, #42	@ 0x2a
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f7fe fc55 	bl	800f478 <ld_word>
 8010bce:	4603      	mov	r3, r0
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d001      	beq.n	8010bd8 <find_volume+0x340>
 8010bd4:	230d      	movs	r3, #13
 8010bd6:	e0a8      	b.n	8010d2a <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bda:	891b      	ldrh	r3, [r3, #8]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d001      	beq.n	8010be4 <find_volume+0x34c>
 8010be0:	230d      	movs	r3, #13
 8010be2:	e0a2      	b.n	8010d2a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010be6:	3334      	adds	r3, #52	@ 0x34
 8010be8:	332c      	adds	r3, #44	@ 0x2c
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7fe fc5d 	bl	800f4aa <ld_dword>
 8010bf0:	4602      	mov	r2, r0
 8010bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bf4:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bf8:	699b      	ldr	r3, [r3, #24]
 8010bfa:	009b      	lsls	r3, r3, #2
 8010bfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8010bfe:	e01f      	b.n	8010c40 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c02:	891b      	ldrh	r3, [r3, #8]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d101      	bne.n	8010c0c <find_volume+0x374>
 8010c08:	230d      	movs	r3, #13
 8010c0a:	e08e      	b.n	8010d2a <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c12:	441a      	add	r2, r3
 8010c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c16:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010c18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010c1c:	2b02      	cmp	r3, #2
 8010c1e:	d103      	bne.n	8010c28 <find_volume+0x390>
 8010c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c22:	699b      	ldr	r3, [r3, #24]
 8010c24:	005b      	lsls	r3, r3, #1
 8010c26:	e00a      	b.n	8010c3e <find_volume+0x3a6>
 8010c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c2a:	699a      	ldr	r2, [r3, #24]
 8010c2c:	4613      	mov	r3, r2
 8010c2e:	005b      	lsls	r3, r3, #1
 8010c30:	4413      	add	r3, r2
 8010c32:	085a      	lsrs	r2, r3, #1
 8010c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c36:	699b      	ldr	r3, [r3, #24]
 8010c38:	f003 0301 	and.w	r3, r3, #1
 8010c3c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010c3e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c42:	69da      	ldr	r2, [r3, #28]
 8010c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c46:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8010c4a:	0a5b      	lsrs	r3, r3, #9
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	d201      	bcs.n	8010c54 <find_volume+0x3bc>
 8010c50:	230d      	movs	r3, #13
 8010c52:	e06a      	b.n	8010d2a <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010c5a:	615a      	str	r2, [r3, #20]
 8010c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c5e:	695a      	ldr	r2, [r3, #20]
 8010c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c62:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c66:	2280      	movs	r2, #128	@ 0x80
 8010c68:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010c6a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010c6e:	2b03      	cmp	r3, #3
 8010c70:	d149      	bne.n	8010d06 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c74:	3334      	adds	r3, #52	@ 0x34
 8010c76:	3330      	adds	r3, #48	@ 0x30
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f7fe fbfd 	bl	800f478 <ld_word>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	2b01      	cmp	r3, #1
 8010c82:	d140      	bne.n	8010d06 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010c84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c86:	3301      	adds	r3, #1
 8010c88:	4619      	mov	r1, r3
 8010c8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010c8c:	f7fe fe9a 	bl	800f9c4 <move_window>
 8010c90:	4603      	mov	r3, r0
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d137      	bne.n	8010d06 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8010c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c98:	2200      	movs	r2, #0
 8010c9a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c9e:	3334      	adds	r3, #52	@ 0x34
 8010ca0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7fe fbe7 	bl	800f478 <ld_word>
 8010caa:	4603      	mov	r3, r0
 8010cac:	461a      	mov	r2, r3
 8010cae:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	d127      	bne.n	8010d06 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cb8:	3334      	adds	r3, #52	@ 0x34
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f7fe fbf5 	bl	800f4aa <ld_dword>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8010d34 <find_volume+0x49c>)
 8010cc4:	4293      	cmp	r3, r2
 8010cc6:	d11e      	bne.n	8010d06 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cca:	3334      	adds	r3, #52	@ 0x34
 8010ccc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f7fe fbea 	bl	800f4aa <ld_dword>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	4a17      	ldr	r2, [pc, #92]	@ (8010d38 <find_volume+0x4a0>)
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d113      	bne.n	8010d06 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ce0:	3334      	adds	r3, #52	@ 0x34
 8010ce2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	f7fe fbdf 	bl	800f4aa <ld_dword>
 8010cec:	4602      	mov	r2, r0
 8010cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cf0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cf4:	3334      	adds	r3, #52	@ 0x34
 8010cf6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7fe fbd5 	bl	800f4aa <ld_dword>
 8010d00:	4602      	mov	r2, r0
 8010d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d04:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d08:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8010d0c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8010d3c <find_volume+0x4a4>)
 8010d10:	881b      	ldrh	r3, [r3, #0]
 8010d12:	3301      	adds	r3, #1
 8010d14:	b29a      	uxth	r2, r3
 8010d16:	4b09      	ldr	r3, [pc, #36]	@ (8010d3c <find_volume+0x4a4>)
 8010d18:	801a      	strh	r2, [r3, #0]
 8010d1a:	4b08      	ldr	r3, [pc, #32]	@ (8010d3c <find_volume+0x4a4>)
 8010d1c:	881a      	ldrh	r2, [r3, #0]
 8010d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d20:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010d22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010d24:	f7fe fde6 	bl	800f8f4 <clear_lock>
#endif
	return FR_OK;
 8010d28:	2300      	movs	r3, #0
}
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	3758      	adds	r7, #88	@ 0x58
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
 8010d32:	bf00      	nop
 8010d34:	41615252 	.word	0x41615252
 8010d38:	61417272 	.word	0x61417272
 8010d3c:	24000a48 	.word	0x24000a48

08010d40 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b084      	sub	sp, #16
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010d4a:	2309      	movs	r3, #9
 8010d4c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d02e      	beq.n	8010db2 <validate+0x72>
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d02a      	beq.n	8010db2 <validate+0x72>
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	781b      	ldrb	r3, [r3, #0]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d025      	beq.n	8010db2 <validate+0x72>
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	889a      	ldrh	r2, [r3, #4]
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	88db      	ldrh	r3, [r3, #6]
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d11e      	bne.n	8010db2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7fe fc7e 	bl	800f67a <lock_fs>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d014      	beq.n	8010dae <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	785b      	ldrb	r3, [r3, #1]
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7fe fad6 	bl	800f33c <disk_status>
 8010d90:	4603      	mov	r3, r0
 8010d92:	f003 0301 	and.w	r3, r3, #1
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d102      	bne.n	8010da0 <validate+0x60>
				res = FR_OK;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	73fb      	strb	r3, [r7, #15]
 8010d9e:	e008      	b.n	8010db2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	2100      	movs	r1, #0
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7fe fc7d 	bl	800f6a6 <unlock_fs>
 8010dac:	e001      	b.n	8010db2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010dae:	230f      	movs	r3, #15
 8010db0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010db2:	7bfb      	ldrb	r3, [r7, #15]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d102      	bne.n	8010dbe <validate+0x7e>
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	e000      	b.n	8010dc0 <validate+0x80>
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	683a      	ldr	r2, [r7, #0]
 8010dc2:	6013      	str	r3, [r2, #0]
	return res;
 8010dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	3710      	adds	r7, #16
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	bd80      	pop	{r7, pc}
	...

08010dd0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b088      	sub	sp, #32
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	60f8      	str	r0, [r7, #12]
 8010dd8:	60b9      	str	r1, [r7, #8]
 8010dda:	4613      	mov	r3, r2
 8010ddc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010de2:	f107 0310 	add.w	r3, r7, #16
 8010de6:	4618      	mov	r0, r3
 8010de8:	f7ff fcbb 	bl	8010762 <get_ldnumber>
 8010dec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010dee:	69fb      	ldr	r3, [r7, #28]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	da01      	bge.n	8010df8 <f_mount+0x28>
 8010df4:	230b      	movs	r3, #11
 8010df6:	e048      	b.n	8010e8a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010df8:	4a26      	ldr	r2, [pc, #152]	@ (8010e94 <f_mount+0xc4>)
 8010dfa:	69fb      	ldr	r3, [r7, #28]
 8010dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e00:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010e02:	69bb      	ldr	r3, [r7, #24]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d00f      	beq.n	8010e28 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010e08:	69b8      	ldr	r0, [r7, #24]
 8010e0a:	f7fe fd73 	bl	800f8f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010e0e:	69bb      	ldr	r3, [r7, #24]
 8010e10:	68db      	ldr	r3, [r3, #12]
 8010e12:	4618      	mov	r0, r3
 8010e14:	f001 f98c 	bl	8012130 <ff_del_syncobj>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d101      	bne.n	8010e22 <f_mount+0x52>
 8010e1e:	2302      	movs	r3, #2
 8010e20:	e033      	b.n	8010e8a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010e22:	69bb      	ldr	r3, [r7, #24]
 8010e24:	2200      	movs	r2, #0
 8010e26:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d00f      	beq.n	8010e4e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	2200      	movs	r2, #0
 8010e32:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010e34:	69fb      	ldr	r3, [r7, #28]
 8010e36:	b2da      	uxtb	r2, r3
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	330c      	adds	r3, #12
 8010e3c:	4619      	mov	r1, r3
 8010e3e:	4610      	mov	r0, r2
 8010e40:	f001 f95b 	bl	80120fa <ff_cre_syncobj>
 8010e44:	4603      	mov	r3, r0
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d101      	bne.n	8010e4e <f_mount+0x7e>
 8010e4a:	2302      	movs	r3, #2
 8010e4c:	e01d      	b.n	8010e8a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010e4e:	68fa      	ldr	r2, [r7, #12]
 8010e50:	4910      	ldr	r1, [pc, #64]	@ (8010e94 <f_mount+0xc4>)
 8010e52:	69fb      	ldr	r3, [r7, #28]
 8010e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d002      	beq.n	8010e64 <f_mount+0x94>
 8010e5e:	79fb      	ldrb	r3, [r7, #7]
 8010e60:	2b01      	cmp	r3, #1
 8010e62:	d001      	beq.n	8010e68 <f_mount+0x98>
 8010e64:	2300      	movs	r3, #0
 8010e66:	e010      	b.n	8010e8a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010e68:	f107 010c 	add.w	r1, r7, #12
 8010e6c:	f107 0308 	add.w	r3, r7, #8
 8010e70:	2200      	movs	r2, #0
 8010e72:	4618      	mov	r0, r3
 8010e74:	f7ff fd10 	bl	8010898 <find_volume>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	7dfa      	ldrb	r2, [r7, #23]
 8010e80:	4611      	mov	r1, r2
 8010e82:	4618      	mov	r0, r3
 8010e84:	f7fe fc0f 	bl	800f6a6 <unlock_fs>
 8010e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	3720      	adds	r7, #32
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}
 8010e92:	bf00      	nop
 8010e94:	24000a44 	.word	0x24000a44

08010e98 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b098      	sub	sp, #96	@ 0x60
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	60f8      	str	r0, [r7, #12]
 8010ea0:	60b9      	str	r1, [r7, #8]
 8010ea2:	4613      	mov	r3, r2
 8010ea4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d101      	bne.n	8010eb0 <f_open+0x18>
 8010eac:	2309      	movs	r3, #9
 8010eae:	e1b0      	b.n	8011212 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010eb0:	79fb      	ldrb	r3, [r7, #7]
 8010eb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010eb6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010eb8:	79fa      	ldrb	r2, [r7, #7]
 8010eba:	f107 0110 	add.w	r1, r7, #16
 8010ebe:	f107 0308 	add.w	r3, r7, #8
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7ff fce8 	bl	8010898 <find_volume>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8010ece:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	f040 818d 	bne.w	80111f2 <f_open+0x35a>
		dj.obj.fs = fs;
 8010ed8:	693b      	ldr	r3, [r7, #16]
 8010eda:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010edc:	68ba      	ldr	r2, [r7, #8]
 8010ede:	f107 0314 	add.w	r3, r7, #20
 8010ee2:	4611      	mov	r1, r2
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7ff fbcb 	bl	8010680 <follow_path>
 8010eea:	4603      	mov	r3, r0
 8010eec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010ef0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d118      	bne.n	8010f2a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010ef8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010efc:	b25b      	sxtb	r3, r3
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	da03      	bge.n	8010f0a <f_open+0x72>
				res = FR_INVALID_NAME;
 8010f02:	2306      	movs	r3, #6
 8010f04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010f08:	e00f      	b.n	8010f2a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010f0a:	79fb      	ldrb	r3, [r7, #7]
 8010f0c:	2b01      	cmp	r3, #1
 8010f0e:	bf8c      	ite	hi
 8010f10:	2301      	movhi	r3, #1
 8010f12:	2300      	movls	r3, #0
 8010f14:	b2db      	uxtb	r3, r3
 8010f16:	461a      	mov	r2, r3
 8010f18:	f107 0314 	add.w	r3, r7, #20
 8010f1c:	4611      	mov	r1, r2
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7fe fbdc 	bl	800f6dc <chk_lock>
 8010f24:	4603      	mov	r3, r0
 8010f26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010f2a:	79fb      	ldrb	r3, [r7, #7]
 8010f2c:	f003 031c 	and.w	r3, r3, #28
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d07f      	beq.n	8011034 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8010f34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d017      	beq.n	8010f6c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010f3c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010f40:	2b04      	cmp	r3, #4
 8010f42:	d10e      	bne.n	8010f62 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010f44:	f7fe fc26 	bl	800f794 <enq_lock>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d006      	beq.n	8010f5c <f_open+0xc4>
 8010f4e:	f107 0314 	add.w	r3, r7, #20
 8010f52:	4618      	mov	r0, r3
 8010f54:	f7ff face 	bl	80104f4 <dir_register>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	e000      	b.n	8010f5e <f_open+0xc6>
 8010f5c:	2312      	movs	r3, #18
 8010f5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010f62:	79fb      	ldrb	r3, [r7, #7]
 8010f64:	f043 0308 	orr.w	r3, r3, #8
 8010f68:	71fb      	strb	r3, [r7, #7]
 8010f6a:	e010      	b.n	8010f8e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010f6c:	7ebb      	ldrb	r3, [r7, #26]
 8010f6e:	f003 0311 	and.w	r3, r3, #17
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d003      	beq.n	8010f7e <f_open+0xe6>
					res = FR_DENIED;
 8010f76:	2307      	movs	r3, #7
 8010f78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010f7c:	e007      	b.n	8010f8e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010f7e:	79fb      	ldrb	r3, [r7, #7]
 8010f80:	f003 0304 	and.w	r3, r3, #4
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d002      	beq.n	8010f8e <f_open+0xf6>
 8010f88:	2308      	movs	r3, #8
 8010f8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010f8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d168      	bne.n	8011068 <f_open+0x1d0>
 8010f96:	79fb      	ldrb	r3, [r7, #7]
 8010f98:	f003 0308 	and.w	r3, r3, #8
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d063      	beq.n	8011068 <f_open+0x1d0>
				dw = GET_FATTIME();
 8010fa0:	f7fd ff92 	bl	800eec8 <get_fattime>
 8010fa4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fa8:	330e      	adds	r3, #14
 8010faa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7fe faba 	bl	800f526 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fb4:	3316      	adds	r3, #22
 8010fb6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7fe fab4 	bl	800f526 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fc0:	330b      	adds	r3, #11
 8010fc2:	2220      	movs	r2, #32
 8010fc4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010fc6:	693b      	ldr	r3, [r7, #16]
 8010fc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010fca:	4611      	mov	r1, r2
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7ff f9fd 	bl	80103cc <ld_clust>
 8010fd2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010fd4:	693b      	ldr	r3, [r7, #16]
 8010fd6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010fd8:	2200      	movs	r2, #0
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7ff fa15 	bl	801040a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fe2:	331c      	adds	r3, #28
 8010fe4:	2100      	movs	r1, #0
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f7fe fa9d 	bl	800f526 <st_dword>
					fs->wflag = 1;
 8010fec:	693b      	ldr	r3, [r7, #16]
 8010fee:	2201      	movs	r2, #1
 8010ff0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010ff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d037      	beq.n	8011068 <f_open+0x1d0>
						dw = fs->winsect;
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ffc:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010ffe:	f107 0314 	add.w	r3, r7, #20
 8011002:	2200      	movs	r2, #0
 8011004:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8011006:	4618      	mov	r0, r3
 8011008:	f7fe ff28 	bl	800fe5c <remove_chain>
 801100c:	4603      	mov	r3, r0
 801100e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8011012:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011016:	2b00      	cmp	r3, #0
 8011018:	d126      	bne.n	8011068 <f_open+0x1d0>
							res = move_window(fs, dw);
 801101a:	693b      	ldr	r3, [r7, #16]
 801101c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801101e:	4618      	mov	r0, r3
 8011020:	f7fe fcd0 	bl	800f9c4 <move_window>
 8011024:	4603      	mov	r3, r0
 8011026:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801102a:	693b      	ldr	r3, [r7, #16]
 801102c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801102e:	3a01      	subs	r2, #1
 8011030:	611a      	str	r2, [r3, #16]
 8011032:	e019      	b.n	8011068 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011034:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011038:	2b00      	cmp	r3, #0
 801103a:	d115      	bne.n	8011068 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801103c:	7ebb      	ldrb	r3, [r7, #26]
 801103e:	f003 0310 	and.w	r3, r3, #16
 8011042:	2b00      	cmp	r3, #0
 8011044:	d003      	beq.n	801104e <f_open+0x1b6>
					res = FR_NO_FILE;
 8011046:	2304      	movs	r3, #4
 8011048:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801104c:	e00c      	b.n	8011068 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801104e:	79fb      	ldrb	r3, [r7, #7]
 8011050:	f003 0302 	and.w	r3, r3, #2
 8011054:	2b00      	cmp	r3, #0
 8011056:	d007      	beq.n	8011068 <f_open+0x1d0>
 8011058:	7ebb      	ldrb	r3, [r7, #26]
 801105a:	f003 0301 	and.w	r3, r3, #1
 801105e:	2b00      	cmp	r3, #0
 8011060:	d002      	beq.n	8011068 <f_open+0x1d0>
						res = FR_DENIED;
 8011062:	2307      	movs	r3, #7
 8011064:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011068:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801106c:	2b00      	cmp	r3, #0
 801106e:	d126      	bne.n	80110be <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011070:	79fb      	ldrb	r3, [r7, #7]
 8011072:	f003 0308 	and.w	r3, r3, #8
 8011076:	2b00      	cmp	r3, #0
 8011078:	d003      	beq.n	8011082 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801107a:	79fb      	ldrb	r3, [r7, #7]
 801107c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011080:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801108a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011090:	79fb      	ldrb	r3, [r7, #7]
 8011092:	2b01      	cmp	r3, #1
 8011094:	bf8c      	ite	hi
 8011096:	2301      	movhi	r3, #1
 8011098:	2300      	movls	r3, #0
 801109a:	b2db      	uxtb	r3, r3
 801109c:	461a      	mov	r2, r3
 801109e:	f107 0314 	add.w	r3, r7, #20
 80110a2:	4611      	mov	r1, r2
 80110a4:	4618      	mov	r0, r3
 80110a6:	f7fe fb97 	bl	800f7d8 <inc_lock>
 80110aa:	4602      	mov	r2, r0
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	691b      	ldr	r3, [r3, #16]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d102      	bne.n	80110be <f_open+0x226>
 80110b8:	2302      	movs	r3, #2
 80110ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80110be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	f040 8095 	bne.w	80111f2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80110c8:	693b      	ldr	r3, [r7, #16]
 80110ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80110cc:	4611      	mov	r1, r2
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7ff f97c 	bl	80103cc <ld_clust>
 80110d4:	4602      	mov	r2, r0
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80110da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110dc:	331c      	adds	r3, #28
 80110de:	4618      	mov	r0, r3
 80110e0:	f7fe f9e3 	bl	800f4aa <ld_dword>
 80110e4:	4602      	mov	r2, r0
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	2200      	movs	r2, #0
 80110ee:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80110f0:	693a      	ldr	r2, [r7, #16]
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80110f6:	693b      	ldr	r3, [r7, #16]
 80110f8:	88da      	ldrh	r2, [r3, #6]
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	79fa      	ldrb	r2, [r7, #7]
 8011102:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	2200      	movs	r2, #0
 8011108:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	2200      	movs	r2, #0
 801110e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	2200      	movs	r2, #0
 8011114:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	3330      	adds	r3, #48	@ 0x30
 801111a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801111e:	2100      	movs	r1, #0
 8011120:	4618      	mov	r0, r3
 8011122:	f7fe fa4d 	bl	800f5c0 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011126:	79fb      	ldrb	r3, [r7, #7]
 8011128:	f003 0320 	and.w	r3, r3, #32
 801112c:	2b00      	cmp	r3, #0
 801112e:	d060      	beq.n	80111f2 <f_open+0x35a>
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	68db      	ldr	r3, [r3, #12]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d05c      	beq.n	80111f2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	68da      	ldr	r2, [r3, #12]
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	895b      	ldrh	r3, [r3, #10]
 8011144:	025b      	lsls	r3, r3, #9
 8011146:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	689b      	ldr	r3, [r3, #8]
 801114c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	68db      	ldr	r3, [r3, #12]
 8011152:	657b      	str	r3, [r7, #84]	@ 0x54
 8011154:	e016      	b.n	8011184 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801115a:	4618      	mov	r0, r3
 801115c:	f7fe fced 	bl	800fb3a <get_fat>
 8011160:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8011162:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011164:	2b01      	cmp	r3, #1
 8011166:	d802      	bhi.n	801116e <f_open+0x2d6>
 8011168:	2302      	movs	r3, #2
 801116a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801116e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011170:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011174:	d102      	bne.n	801117c <f_open+0x2e4>
 8011176:	2301      	movs	r3, #1
 8011178:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801117c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801117e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011180:	1ad3      	subs	r3, r2, r3
 8011182:	657b      	str	r3, [r7, #84]	@ 0x54
 8011184:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011188:	2b00      	cmp	r3, #0
 801118a:	d103      	bne.n	8011194 <f_open+0x2fc>
 801118c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801118e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011190:	429a      	cmp	r2, r3
 8011192:	d8e0      	bhi.n	8011156 <f_open+0x2be>
				}
				fp->clust = clst;
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011198:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801119a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d127      	bne.n	80111f2 <f_open+0x35a>
 80111a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80111a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d022      	beq.n	80111f2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80111ac:	693b      	ldr	r3, [r7, #16]
 80111ae:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7fe fca3 	bl	800fafc <clust2sect>
 80111b6:	6478      	str	r0, [r7, #68]	@ 0x44
 80111b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d103      	bne.n	80111c6 <f_open+0x32e>
						res = FR_INT_ERR;
 80111be:	2302      	movs	r3, #2
 80111c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80111c4:	e015      	b.n	80111f2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80111c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80111c8:	0a5a      	lsrs	r2, r3, #9
 80111ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80111cc:	441a      	add	r2, r3
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80111d2:	693b      	ldr	r3, [r7, #16]
 80111d4:	7858      	ldrb	r0, [r3, #1]
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	6a1a      	ldr	r2, [r3, #32]
 80111e0:	2301      	movs	r3, #1
 80111e2:	f7fe f8eb 	bl	800f3bc <disk_read>
 80111e6:	4603      	mov	r3, r0
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d002      	beq.n	80111f2 <f_open+0x35a>
 80111ec:	2301      	movs	r3, #1
 80111ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80111f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d002      	beq.n	8011200 <f_open+0x368>
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	2200      	movs	r2, #0
 80111fe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011200:	693b      	ldr	r3, [r7, #16]
 8011202:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8011206:	4611      	mov	r1, r2
 8011208:	4618      	mov	r0, r3
 801120a:	f7fe fa4c 	bl	800f6a6 <unlock_fs>
 801120e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8011212:	4618      	mov	r0, r3
 8011214:	3760      	adds	r7, #96	@ 0x60
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}

0801121a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801121a:	b580      	push	{r7, lr}
 801121c:	b08c      	sub	sp, #48	@ 0x30
 801121e:	af00      	add	r7, sp, #0
 8011220:	60f8      	str	r0, [r7, #12]
 8011222:	60b9      	str	r1, [r7, #8]
 8011224:	607a      	str	r2, [r7, #4]
 8011226:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	2200      	movs	r2, #0
 8011230:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	f107 0210 	add.w	r2, r7, #16
 8011238:	4611      	mov	r1, r2
 801123a:	4618      	mov	r0, r3
 801123c:	f7ff fd80 	bl	8010d40 <validate>
 8011240:	4603      	mov	r3, r0
 8011242:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011246:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801124a:	2b00      	cmp	r3, #0
 801124c:	d107      	bne.n	801125e <f_write+0x44>
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	7d5b      	ldrb	r3, [r3, #21]
 8011252:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011256:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801125a:	2b00      	cmp	r3, #0
 801125c:	d009      	beq.n	8011272 <f_write+0x58>
 801125e:	693b      	ldr	r3, [r7, #16]
 8011260:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8011264:	4611      	mov	r1, r2
 8011266:	4618      	mov	r0, r3
 8011268:	f7fe fa1d 	bl	800f6a6 <unlock_fs>
 801126c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011270:	e173      	b.n	801155a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	7d1b      	ldrb	r3, [r3, #20]
 8011276:	f003 0302 	and.w	r3, r3, #2
 801127a:	2b00      	cmp	r3, #0
 801127c:	d106      	bne.n	801128c <f_write+0x72>
 801127e:	693b      	ldr	r3, [r7, #16]
 8011280:	2107      	movs	r1, #7
 8011282:	4618      	mov	r0, r3
 8011284:	f7fe fa0f 	bl	800f6a6 <unlock_fs>
 8011288:	2307      	movs	r3, #7
 801128a:	e166      	b.n	801155a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	699a      	ldr	r2, [r3, #24]
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	441a      	add	r2, r3
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	699b      	ldr	r3, [r3, #24]
 8011298:	429a      	cmp	r2, r3
 801129a:	f080 814b 	bcs.w	8011534 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	699b      	ldr	r3, [r3, #24]
 80112a2:	43db      	mvns	r3, r3
 80112a4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80112a6:	e145      	b.n	8011534 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	699b      	ldr	r3, [r3, #24]
 80112ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	f040 8101 	bne.w	80114b8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	699b      	ldr	r3, [r3, #24]
 80112ba:	0a5b      	lsrs	r3, r3, #9
 80112bc:	693a      	ldr	r2, [r7, #16]
 80112be:	8952      	ldrh	r2, [r2, #10]
 80112c0:	3a01      	subs	r2, #1
 80112c2:	4013      	ands	r3, r2
 80112c4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80112c6:	69bb      	ldr	r3, [r7, #24]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d14d      	bne.n	8011368 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	699b      	ldr	r3, [r3, #24]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d10c      	bne.n	80112ee <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	689b      	ldr	r3, [r3, #8]
 80112d8:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80112da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d11a      	bne.n	8011316 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	2100      	movs	r1, #0
 80112e4:	4618      	mov	r0, r3
 80112e6:	f7fe fe1e 	bl	800ff26 <create_chain>
 80112ea:	62b8      	str	r0, [r7, #40]	@ 0x28
 80112ec:	e013      	b.n	8011316 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d007      	beq.n	8011306 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	699b      	ldr	r3, [r3, #24]
 80112fa:	4619      	mov	r1, r3
 80112fc:	68f8      	ldr	r0, [r7, #12]
 80112fe:	f7fe feaa 	bl	8010056 <clmt_clust>
 8011302:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011304:	e007      	b.n	8011316 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011306:	68fa      	ldr	r2, [r7, #12]
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	69db      	ldr	r3, [r3, #28]
 801130c:	4619      	mov	r1, r3
 801130e:	4610      	mov	r0, r2
 8011310:	f7fe fe09 	bl	800ff26 <create_chain>
 8011314:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011318:	2b00      	cmp	r3, #0
 801131a:	f000 8110 	beq.w	801153e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801131e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011320:	2b01      	cmp	r3, #1
 8011322:	d109      	bne.n	8011338 <f_write+0x11e>
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	2202      	movs	r2, #2
 8011328:	755a      	strb	r2, [r3, #21]
 801132a:	693b      	ldr	r3, [r7, #16]
 801132c:	2102      	movs	r1, #2
 801132e:	4618      	mov	r0, r3
 8011330:	f7fe f9b9 	bl	800f6a6 <unlock_fs>
 8011334:	2302      	movs	r3, #2
 8011336:	e110      	b.n	801155a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801133a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801133e:	d109      	bne.n	8011354 <f_write+0x13a>
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	2201      	movs	r2, #1
 8011344:	755a      	strb	r2, [r3, #21]
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	2101      	movs	r1, #1
 801134a:	4618      	mov	r0, r3
 801134c:	f7fe f9ab 	bl	800f6a6 <unlock_fs>
 8011350:	2301      	movs	r3, #1
 8011352:	e102      	b.n	801155a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011358:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	689b      	ldr	r3, [r3, #8]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d102      	bne.n	8011368 <f_write+0x14e>
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011366:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	7d1b      	ldrb	r3, [r3, #20]
 801136c:	b25b      	sxtb	r3, r3
 801136e:	2b00      	cmp	r3, #0
 8011370:	da1d      	bge.n	80113ae <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	7858      	ldrb	r0, [r3, #1]
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	6a1a      	ldr	r2, [r3, #32]
 8011380:	2301      	movs	r3, #1
 8011382:	f7fe f83b 	bl	800f3fc <disk_write>
 8011386:	4603      	mov	r3, r0
 8011388:	2b00      	cmp	r3, #0
 801138a:	d009      	beq.n	80113a0 <f_write+0x186>
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	2201      	movs	r2, #1
 8011390:	755a      	strb	r2, [r3, #21]
 8011392:	693b      	ldr	r3, [r7, #16]
 8011394:	2101      	movs	r1, #1
 8011396:	4618      	mov	r0, r3
 8011398:	f7fe f985 	bl	800f6a6 <unlock_fs>
 801139c:	2301      	movs	r3, #1
 801139e:	e0dc      	b.n	801155a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	7d1b      	ldrb	r3, [r3, #20]
 80113a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80113a8:	b2da      	uxtb	r2, r3
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80113ae:	693a      	ldr	r2, [r7, #16]
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	69db      	ldr	r3, [r3, #28]
 80113b4:	4619      	mov	r1, r3
 80113b6:	4610      	mov	r0, r2
 80113b8:	f7fe fba0 	bl	800fafc <clust2sect>
 80113bc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d109      	bne.n	80113d8 <f_write+0x1be>
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	2202      	movs	r2, #2
 80113c8:	755a      	strb	r2, [r3, #21]
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	2102      	movs	r1, #2
 80113ce:	4618      	mov	r0, r3
 80113d0:	f7fe f969 	bl	800f6a6 <unlock_fs>
 80113d4:	2302      	movs	r3, #2
 80113d6:	e0c0      	b.n	801155a <f_write+0x340>
			sect += csect;
 80113d8:	697a      	ldr	r2, [r7, #20]
 80113da:	69bb      	ldr	r3, [r7, #24]
 80113dc:	4413      	add	r3, r2
 80113de:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	0a5b      	lsrs	r3, r3, #9
 80113e4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80113e6:	6a3b      	ldr	r3, [r7, #32]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d041      	beq.n	8011470 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80113ec:	69ba      	ldr	r2, [r7, #24]
 80113ee:	6a3b      	ldr	r3, [r7, #32]
 80113f0:	4413      	add	r3, r2
 80113f2:	693a      	ldr	r2, [r7, #16]
 80113f4:	8952      	ldrh	r2, [r2, #10]
 80113f6:	4293      	cmp	r3, r2
 80113f8:	d905      	bls.n	8011406 <f_write+0x1ec>
					cc = fs->csize - csect;
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	895b      	ldrh	r3, [r3, #10]
 80113fe:	461a      	mov	r2, r3
 8011400:	69bb      	ldr	r3, [r7, #24]
 8011402:	1ad3      	subs	r3, r2, r3
 8011404:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011406:	693b      	ldr	r3, [r7, #16]
 8011408:	7858      	ldrb	r0, [r3, #1]
 801140a:	6a3b      	ldr	r3, [r7, #32]
 801140c:	697a      	ldr	r2, [r7, #20]
 801140e:	69f9      	ldr	r1, [r7, #28]
 8011410:	f7fd fff4 	bl	800f3fc <disk_write>
 8011414:	4603      	mov	r3, r0
 8011416:	2b00      	cmp	r3, #0
 8011418:	d009      	beq.n	801142e <f_write+0x214>
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	2201      	movs	r2, #1
 801141e:	755a      	strb	r2, [r3, #21]
 8011420:	693b      	ldr	r3, [r7, #16]
 8011422:	2101      	movs	r1, #1
 8011424:	4618      	mov	r0, r3
 8011426:	f7fe f93e 	bl	800f6a6 <unlock_fs>
 801142a:	2301      	movs	r3, #1
 801142c:	e095      	b.n	801155a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	6a1a      	ldr	r2, [r3, #32]
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	1ad3      	subs	r3, r2, r3
 8011436:	6a3a      	ldr	r2, [r7, #32]
 8011438:	429a      	cmp	r2, r3
 801143a:	d915      	bls.n	8011468 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	6a1a      	ldr	r2, [r3, #32]
 8011446:	697b      	ldr	r3, [r7, #20]
 8011448:	1ad3      	subs	r3, r2, r3
 801144a:	025b      	lsls	r3, r3, #9
 801144c:	69fa      	ldr	r2, [r7, #28]
 801144e:	4413      	add	r3, r2
 8011450:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011454:	4619      	mov	r1, r3
 8011456:	f7fe f892 	bl	800f57e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	7d1b      	ldrb	r3, [r3, #20]
 801145e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011462:	b2da      	uxtb	r2, r3
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011468:	6a3b      	ldr	r3, [r7, #32]
 801146a:	025b      	lsls	r3, r3, #9
 801146c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801146e:	e044      	b.n	80114fa <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	6a1b      	ldr	r3, [r3, #32]
 8011474:	697a      	ldr	r2, [r7, #20]
 8011476:	429a      	cmp	r2, r3
 8011478:	d01b      	beq.n	80114b2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	699a      	ldr	r2, [r3, #24]
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011482:	429a      	cmp	r2, r3
 8011484:	d215      	bcs.n	80114b2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	7858      	ldrb	r0, [r3, #1]
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011490:	2301      	movs	r3, #1
 8011492:	697a      	ldr	r2, [r7, #20]
 8011494:	f7fd ff92 	bl	800f3bc <disk_read>
 8011498:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801149a:	2b00      	cmp	r3, #0
 801149c:	d009      	beq.n	80114b2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	2201      	movs	r2, #1
 80114a2:	755a      	strb	r2, [r3, #21]
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	2101      	movs	r1, #1
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7fe f8fc 	bl	800f6a6 <unlock_fs>
 80114ae:	2301      	movs	r3, #1
 80114b0:	e053      	b.n	801155a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	697a      	ldr	r2, [r7, #20]
 80114b6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	699b      	ldr	r3, [r3, #24]
 80114bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114c0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80114c4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80114c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d901      	bls.n	80114d2 <f_write+0x2b8>
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	699b      	ldr	r3, [r3, #24]
 80114dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114e0:	4413      	add	r3, r2
 80114e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80114e4:	69f9      	ldr	r1, [r7, #28]
 80114e6:	4618      	mov	r0, r3
 80114e8:	f7fe f849 	bl	800f57e <mem_cpy>
		fp->flag |= FA_DIRTY;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	7d1b      	ldrb	r3, [r3, #20]
 80114f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80114f4:	b2da      	uxtb	r2, r3
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80114fa:	69fa      	ldr	r2, [r7, #28]
 80114fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114fe:	4413      	add	r3, r2
 8011500:	61fb      	str	r3, [r7, #28]
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	699a      	ldr	r2, [r3, #24]
 8011506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011508:	441a      	add	r2, r3
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	619a      	str	r2, [r3, #24]
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	68da      	ldr	r2, [r3, #12]
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	699b      	ldr	r3, [r3, #24]
 8011516:	429a      	cmp	r2, r3
 8011518:	bf38      	it	cc
 801151a:	461a      	movcc	r2, r3
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	60da      	str	r2, [r3, #12]
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	681a      	ldr	r2, [r3, #0]
 8011524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011526:	441a      	add	r2, r3
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	601a      	str	r2, [r3, #0]
 801152c:	687a      	ldr	r2, [r7, #4]
 801152e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011530:	1ad3      	subs	r3, r2, r3
 8011532:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2b00      	cmp	r3, #0
 8011538:	f47f aeb6 	bne.w	80112a8 <f_write+0x8e>
 801153c:	e000      	b.n	8011540 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801153e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	7d1b      	ldrb	r3, [r3, #20]
 8011544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011548:	b2da      	uxtb	r2, r3
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	2100      	movs	r1, #0
 8011552:	4618      	mov	r0, r3
 8011554:	f7fe f8a7 	bl	800f6a6 <unlock_fs>
 8011558:	2300      	movs	r3, #0
}
 801155a:	4618      	mov	r0, r3
 801155c:	3730      	adds	r7, #48	@ 0x30
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}

08011562 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011562:	b580      	push	{r7, lr}
 8011564:	b086      	sub	sp, #24
 8011566:	af00      	add	r7, sp, #0
 8011568:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	f107 0208 	add.w	r2, r7, #8
 8011570:	4611      	mov	r1, r2
 8011572:	4618      	mov	r0, r3
 8011574:	f7ff fbe4 	bl	8010d40 <validate>
 8011578:	4603      	mov	r3, r0
 801157a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801157c:	7dfb      	ldrb	r3, [r7, #23]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d16d      	bne.n	801165e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	7d1b      	ldrb	r3, [r3, #20]
 8011586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801158a:	2b00      	cmp	r3, #0
 801158c:	d067      	beq.n	801165e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	7d1b      	ldrb	r3, [r3, #20]
 8011592:	b25b      	sxtb	r3, r3
 8011594:	2b00      	cmp	r3, #0
 8011596:	da1a      	bge.n	80115ce <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	7858      	ldrb	r0, [r3, #1]
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6a1a      	ldr	r2, [r3, #32]
 80115a6:	2301      	movs	r3, #1
 80115a8:	f7fd ff28 	bl	800f3fc <disk_write>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d006      	beq.n	80115c0 <f_sync+0x5e>
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	2101      	movs	r1, #1
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7fe f875 	bl	800f6a6 <unlock_fs>
 80115bc:	2301      	movs	r3, #1
 80115be:	e055      	b.n	801166c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	7d1b      	ldrb	r3, [r3, #20]
 80115c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80115c8:	b2da      	uxtb	r2, r3
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80115ce:	f7fd fc7b 	bl	800eec8 <get_fattime>
 80115d2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80115d4:	68ba      	ldr	r2, [r7, #8]
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115da:	4619      	mov	r1, r3
 80115dc:	4610      	mov	r0, r2
 80115de:	f7fe f9f1 	bl	800f9c4 <move_window>
 80115e2:	4603      	mov	r3, r0
 80115e4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80115e6:	7dfb      	ldrb	r3, [r7, #23]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d138      	bne.n	801165e <f_sync+0xfc>
					dir = fp->dir_ptr;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115f0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	330b      	adds	r3, #11
 80115f6:	781a      	ldrb	r2, [r3, #0]
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	330b      	adds	r3, #11
 80115fc:	f042 0220 	orr.w	r2, r2, #32
 8011600:	b2d2      	uxtb	r2, r2
 8011602:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	6818      	ldr	r0, [r3, #0]
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	689b      	ldr	r3, [r3, #8]
 801160c:	461a      	mov	r2, r3
 801160e:	68f9      	ldr	r1, [r7, #12]
 8011610:	f7fe fefb 	bl	801040a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	f103 021c 	add.w	r2, r3, #28
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	68db      	ldr	r3, [r3, #12]
 801161e:	4619      	mov	r1, r3
 8011620:	4610      	mov	r0, r2
 8011622:	f7fd ff80 	bl	800f526 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	3316      	adds	r3, #22
 801162a:	6939      	ldr	r1, [r7, #16]
 801162c:	4618      	mov	r0, r3
 801162e:	f7fd ff7a 	bl	800f526 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	3312      	adds	r3, #18
 8011636:	2100      	movs	r1, #0
 8011638:	4618      	mov	r0, r3
 801163a:	f7fd ff59 	bl	800f4f0 <st_word>
					fs->wflag = 1;
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	2201      	movs	r2, #1
 8011642:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	4618      	mov	r0, r3
 8011648:	f7fe f9ea 	bl	800fa20 <sync_fs>
 801164c:	4603      	mov	r3, r0
 801164e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	7d1b      	ldrb	r3, [r3, #20]
 8011654:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011658:	b2da      	uxtb	r2, r3
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801165e:	68bb      	ldr	r3, [r7, #8]
 8011660:	7dfa      	ldrb	r2, [r7, #23]
 8011662:	4611      	mov	r1, r2
 8011664:	4618      	mov	r0, r3
 8011666:	f7fe f81e 	bl	800f6a6 <unlock_fs>
 801166a:	7dfb      	ldrb	r3, [r7, #23]
}
 801166c:	4618      	mov	r0, r3
 801166e:	3718      	adds	r7, #24
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}

08011674 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b090      	sub	sp, #64	@ 0x40
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f107 0208 	add.w	r2, r7, #8
 8011684:	4611      	mov	r1, r2
 8011686:	4618      	mov	r0, r3
 8011688:	f7ff fb5a 	bl	8010d40 <validate>
 801168c:	4603      	mov	r3, r0
 801168e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011692:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011696:	2b00      	cmp	r3, #0
 8011698:	d103      	bne.n	80116a2 <f_lseek+0x2e>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	7d5b      	ldrb	r3, [r3, #21]
 801169e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80116a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d009      	beq.n	80116be <f_lseek+0x4a>
 80116aa:	68bb      	ldr	r3, [r7, #8]
 80116ac:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80116b0:	4611      	mov	r1, r2
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7fd fff7 	bl	800f6a6 <unlock_fs>
 80116b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80116bc:	e229      	b.n	8011b12 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	f000 80ea 	beq.w	801189c <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80116ce:	d164      	bne.n	801179a <f_lseek+0x126>
			tbl = fp->cltbl;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116d4:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80116d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116d8:	1d1a      	adds	r2, r3, #4
 80116da:	627a      	str	r2, [r7, #36]	@ 0x24
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	617b      	str	r3, [r7, #20]
 80116e0:	2302      	movs	r3, #2
 80116e2:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	689b      	ldr	r3, [r3, #8]
 80116e8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80116ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d044      	beq.n	801177a <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80116f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116f2:	613b      	str	r3, [r7, #16]
 80116f4:	2300      	movs	r3, #0
 80116f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80116f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116fa:	3302      	adds	r3, #2
 80116fc:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80116fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011700:	60fb      	str	r3, [r7, #12]
 8011702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011704:	3301      	adds	r3, #1
 8011706:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801170c:	4618      	mov	r0, r3
 801170e:	f7fe fa14 	bl	800fb3a <get_fat>
 8011712:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011716:	2b01      	cmp	r3, #1
 8011718:	d809      	bhi.n	801172e <f_lseek+0xba>
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	2202      	movs	r2, #2
 801171e:	755a      	strb	r2, [r3, #21]
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	2102      	movs	r1, #2
 8011724:	4618      	mov	r0, r3
 8011726:	f7fd ffbe 	bl	800f6a6 <unlock_fs>
 801172a:	2302      	movs	r3, #2
 801172c:	e1f1      	b.n	8011b12 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801172e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011730:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011734:	d109      	bne.n	801174a <f_lseek+0xd6>
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2201      	movs	r2, #1
 801173a:	755a      	strb	r2, [r3, #21]
 801173c:	68bb      	ldr	r3, [r7, #8]
 801173e:	2101      	movs	r1, #1
 8011740:	4618      	mov	r0, r3
 8011742:	f7fd ffb0 	bl	800f6a6 <unlock_fs>
 8011746:	2301      	movs	r3, #1
 8011748:	e1e3      	b.n	8011b12 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	3301      	adds	r3, #1
 801174e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011750:	429a      	cmp	r2, r3
 8011752:	d0d4      	beq.n	80116fe <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011754:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	429a      	cmp	r2, r3
 801175a:	d809      	bhi.n	8011770 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 801175c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801175e:	1d1a      	adds	r2, r3, #4
 8011760:	627a      	str	r2, [r7, #36]	@ 0x24
 8011762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011764:	601a      	str	r2, [r3, #0]
 8011766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011768:	1d1a      	adds	r2, r3, #4
 801176a:	627a      	str	r2, [r7, #36]	@ 0x24
 801176c:	693a      	ldr	r2, [r7, #16]
 801176e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011770:	68bb      	ldr	r3, [r7, #8]
 8011772:	699b      	ldr	r3, [r3, #24]
 8011774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011776:	429a      	cmp	r2, r3
 8011778:	d3ba      	bcc.n	80116f0 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801177e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011780:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	429a      	cmp	r2, r3
 8011788:	d803      	bhi.n	8011792 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 801178a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801178c:	2200      	movs	r2, #0
 801178e:	601a      	str	r2, [r3, #0]
 8011790:	e1b6      	b.n	8011b00 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011792:	2311      	movs	r3, #17
 8011794:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011798:	e1b2      	b.n	8011b00 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	68db      	ldr	r3, [r3, #12]
 801179e:	683a      	ldr	r2, [r7, #0]
 80117a0:	429a      	cmp	r2, r3
 80117a2:	d902      	bls.n	80117aa <f_lseek+0x136>
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	68db      	ldr	r3, [r3, #12]
 80117a8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	683a      	ldr	r2, [r7, #0]
 80117ae:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	f000 81a4 	beq.w	8011b00 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	3b01      	subs	r3, #1
 80117bc:	4619      	mov	r1, r3
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f7fe fc49 	bl	8010056 <clmt_clust>
 80117c4:	4602      	mov	r2, r0
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80117ca:	68ba      	ldr	r2, [r7, #8]
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	69db      	ldr	r3, [r3, #28]
 80117d0:	4619      	mov	r1, r3
 80117d2:	4610      	mov	r0, r2
 80117d4:	f7fe f992 	bl	800fafc <clust2sect>
 80117d8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80117da:	69bb      	ldr	r3, [r7, #24]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d109      	bne.n	80117f4 <f_lseek+0x180>
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2202      	movs	r2, #2
 80117e4:	755a      	strb	r2, [r3, #21]
 80117e6:	68bb      	ldr	r3, [r7, #8]
 80117e8:	2102      	movs	r1, #2
 80117ea:	4618      	mov	r0, r3
 80117ec:	f7fd ff5b 	bl	800f6a6 <unlock_fs>
 80117f0:	2302      	movs	r3, #2
 80117f2:	e18e      	b.n	8011b12 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	3b01      	subs	r3, #1
 80117f8:	0a5b      	lsrs	r3, r3, #9
 80117fa:	68ba      	ldr	r2, [r7, #8]
 80117fc:	8952      	ldrh	r2, [r2, #10]
 80117fe:	3a01      	subs	r2, #1
 8011800:	4013      	ands	r3, r2
 8011802:	69ba      	ldr	r2, [r7, #24]
 8011804:	4413      	add	r3, r2
 8011806:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	699b      	ldr	r3, [r3, #24]
 801180c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011810:	2b00      	cmp	r3, #0
 8011812:	f000 8175 	beq.w	8011b00 <f_lseek+0x48c>
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	6a1b      	ldr	r3, [r3, #32]
 801181a:	69ba      	ldr	r2, [r7, #24]
 801181c:	429a      	cmp	r2, r3
 801181e:	f000 816f 	beq.w	8011b00 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	7d1b      	ldrb	r3, [r3, #20]
 8011826:	b25b      	sxtb	r3, r3
 8011828:	2b00      	cmp	r3, #0
 801182a:	da1d      	bge.n	8011868 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801182c:	68bb      	ldr	r3, [r7, #8]
 801182e:	7858      	ldrb	r0, [r3, #1]
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6a1a      	ldr	r2, [r3, #32]
 801183a:	2301      	movs	r3, #1
 801183c:	f7fd fdde 	bl	800f3fc <disk_write>
 8011840:	4603      	mov	r3, r0
 8011842:	2b00      	cmp	r3, #0
 8011844:	d009      	beq.n	801185a <f_lseek+0x1e6>
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	2201      	movs	r2, #1
 801184a:	755a      	strb	r2, [r3, #21]
 801184c:	68bb      	ldr	r3, [r7, #8]
 801184e:	2101      	movs	r1, #1
 8011850:	4618      	mov	r0, r3
 8011852:	f7fd ff28 	bl	800f6a6 <unlock_fs>
 8011856:	2301      	movs	r3, #1
 8011858:	e15b      	b.n	8011b12 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	7d1b      	ldrb	r3, [r3, #20]
 801185e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011862:	b2da      	uxtb	r2, r3
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	7858      	ldrb	r0, [r3, #1]
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011872:	2301      	movs	r3, #1
 8011874:	69ba      	ldr	r2, [r7, #24]
 8011876:	f7fd fda1 	bl	800f3bc <disk_read>
 801187a:	4603      	mov	r3, r0
 801187c:	2b00      	cmp	r3, #0
 801187e:	d009      	beq.n	8011894 <f_lseek+0x220>
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	2201      	movs	r2, #1
 8011884:	755a      	strb	r2, [r3, #21]
 8011886:	68bb      	ldr	r3, [r7, #8]
 8011888:	2101      	movs	r1, #1
 801188a:	4618      	mov	r0, r3
 801188c:	f7fd ff0b 	bl	800f6a6 <unlock_fs>
 8011890:	2301      	movs	r3, #1
 8011892:	e13e      	b.n	8011b12 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	69ba      	ldr	r2, [r7, #24]
 8011898:	621a      	str	r2, [r3, #32]
 801189a:	e131      	b.n	8011b00 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	68db      	ldr	r3, [r3, #12]
 80118a0:	683a      	ldr	r2, [r7, #0]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d908      	bls.n	80118b8 <f_lseek+0x244>
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	7d1b      	ldrb	r3, [r3, #20]
 80118aa:	f003 0302 	and.w	r3, r3, #2
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d102      	bne.n	80118b8 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	68db      	ldr	r3, [r3, #12]
 80118b6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	699b      	ldr	r3, [r3, #24]
 80118bc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80118be:	2300      	movs	r3, #0
 80118c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80118c6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80118c8:	683b      	ldr	r3, [r7, #0]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	f000 80c0 	beq.w	8011a50 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80118d0:	68bb      	ldr	r3, [r7, #8]
 80118d2:	895b      	ldrh	r3, [r3, #10]
 80118d4:	025b      	lsls	r3, r3, #9
 80118d6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80118d8:	6a3b      	ldr	r3, [r7, #32]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d01b      	beq.n	8011916 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	1e5a      	subs	r2, r3, #1
 80118e2:	69fb      	ldr	r3, [r7, #28]
 80118e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80118e8:	6a3b      	ldr	r3, [r7, #32]
 80118ea:	1e59      	subs	r1, r3, #1
 80118ec:	69fb      	ldr	r3, [r7, #28]
 80118ee:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d30f      	bcc.n	8011916 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80118f6:	6a3b      	ldr	r3, [r7, #32]
 80118f8:	1e5a      	subs	r2, r3, #1
 80118fa:	69fb      	ldr	r3, [r7, #28]
 80118fc:	425b      	negs	r3, r3
 80118fe:	401a      	ands	r2, r3
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	699b      	ldr	r3, [r3, #24]
 8011908:	683a      	ldr	r2, [r7, #0]
 801190a:	1ad3      	subs	r3, r2, r3
 801190c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	69db      	ldr	r3, [r3, #28]
 8011912:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011914:	e02c      	b.n	8011970 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	689b      	ldr	r3, [r3, #8]
 801191a:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801191c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801191e:	2b00      	cmp	r3, #0
 8011920:	d123      	bne.n	801196a <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2100      	movs	r1, #0
 8011926:	4618      	mov	r0, r3
 8011928:	f7fe fafd 	bl	800ff26 <create_chain>
 801192c:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801192e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011930:	2b01      	cmp	r3, #1
 8011932:	d109      	bne.n	8011948 <f_lseek+0x2d4>
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2202      	movs	r2, #2
 8011938:	755a      	strb	r2, [r3, #21]
 801193a:	68bb      	ldr	r3, [r7, #8]
 801193c:	2102      	movs	r1, #2
 801193e:	4618      	mov	r0, r3
 8011940:	f7fd feb1 	bl	800f6a6 <unlock_fs>
 8011944:	2302      	movs	r3, #2
 8011946:	e0e4      	b.n	8011b12 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801194a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801194e:	d109      	bne.n	8011964 <f_lseek+0x2f0>
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2201      	movs	r2, #1
 8011954:	755a      	strb	r2, [r3, #21]
 8011956:	68bb      	ldr	r3, [r7, #8]
 8011958:	2101      	movs	r1, #1
 801195a:	4618      	mov	r0, r3
 801195c:	f7fd fea3 	bl	800f6a6 <unlock_fs>
 8011960:	2301      	movs	r3, #1
 8011962:	e0d6      	b.n	8011b12 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011968:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801196e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011972:	2b00      	cmp	r3, #0
 8011974:	d06c      	beq.n	8011a50 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8011976:	e044      	b.n	8011a02 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8011978:	683a      	ldr	r2, [r7, #0]
 801197a:	69fb      	ldr	r3, [r7, #28]
 801197c:	1ad3      	subs	r3, r2, r3
 801197e:	603b      	str	r3, [r7, #0]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	699a      	ldr	r2, [r3, #24]
 8011984:	69fb      	ldr	r3, [r7, #28]
 8011986:	441a      	add	r2, r3
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	7d1b      	ldrb	r3, [r3, #20]
 8011990:	f003 0302 	and.w	r3, r3, #2
 8011994:	2b00      	cmp	r3, #0
 8011996:	d00b      	beq.n	80119b0 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801199c:	4618      	mov	r0, r3
 801199e:	f7fe fac2 	bl	800ff26 <create_chain>
 80119a2:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80119a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d108      	bne.n	80119bc <f_lseek+0x348>
							ofs = 0; break;
 80119aa:	2300      	movs	r3, #0
 80119ac:	603b      	str	r3, [r7, #0]
 80119ae:	e02c      	b.n	8011a0a <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80119b4:	4618      	mov	r0, r3
 80119b6:	f7fe f8c0 	bl	800fb3a <get_fat>
 80119ba:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80119bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80119c2:	d109      	bne.n	80119d8 <f_lseek+0x364>
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	2201      	movs	r2, #1
 80119c8:	755a      	strb	r2, [r3, #21]
 80119ca:	68bb      	ldr	r3, [r7, #8]
 80119cc:	2101      	movs	r1, #1
 80119ce:	4618      	mov	r0, r3
 80119d0:	f7fd fe69 	bl	800f6a6 <unlock_fs>
 80119d4:	2301      	movs	r3, #1
 80119d6:	e09c      	b.n	8011b12 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80119d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119da:	2b01      	cmp	r3, #1
 80119dc:	d904      	bls.n	80119e8 <f_lseek+0x374>
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	699b      	ldr	r3, [r3, #24]
 80119e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d309      	bcc.n	80119fc <f_lseek+0x388>
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2202      	movs	r2, #2
 80119ec:	755a      	strb	r2, [r3, #21]
 80119ee:	68bb      	ldr	r3, [r7, #8]
 80119f0:	2102      	movs	r1, #2
 80119f2:	4618      	mov	r0, r3
 80119f4:	f7fd fe57 	bl	800f6a6 <unlock_fs>
 80119f8:	2302      	movs	r3, #2
 80119fa:	e08a      	b.n	8011b12 <f_lseek+0x49e>
					fp->clust = clst;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011a00:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011a02:	683a      	ldr	r2, [r7, #0]
 8011a04:	69fb      	ldr	r3, [r7, #28]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d8b6      	bhi.n	8011978 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	699a      	ldr	r2, [r3, #24]
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	441a      	add	r2, r3
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d017      	beq.n	8011a50 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011a20:	68bb      	ldr	r3, [r7, #8]
 8011a22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011a24:	4618      	mov	r0, r3
 8011a26:	f7fe f869 	bl	800fafc <clust2sect>
 8011a2a:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d109      	bne.n	8011a46 <f_lseek+0x3d2>
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2202      	movs	r2, #2
 8011a36:	755a      	strb	r2, [r3, #21]
 8011a38:	68bb      	ldr	r3, [r7, #8]
 8011a3a:	2102      	movs	r1, #2
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f7fd fe32 	bl	800f6a6 <unlock_fs>
 8011a42:	2302      	movs	r3, #2
 8011a44:	e065      	b.n	8011b12 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	0a5b      	lsrs	r3, r3, #9
 8011a4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011a4c:	4413      	add	r3, r2
 8011a4e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	699a      	ldr	r2, [r3, #24]
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	68db      	ldr	r3, [r3, #12]
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d90a      	bls.n	8011a72 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	699a      	ldr	r2, [r3, #24]
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	7d1b      	ldrb	r3, [r3, #20]
 8011a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a6c:	b2da      	uxtb	r2, r3
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	699b      	ldr	r3, [r3, #24]
 8011a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d040      	beq.n	8011b00 <f_lseek+0x48c>
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	6a1b      	ldr	r3, [r3, #32]
 8011a82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011a84:	429a      	cmp	r2, r3
 8011a86:	d03b      	beq.n	8011b00 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	7d1b      	ldrb	r3, [r3, #20]
 8011a8c:	b25b      	sxtb	r3, r3
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	da1d      	bge.n	8011ace <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	7858      	ldrb	r0, [r3, #1]
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	6a1a      	ldr	r2, [r3, #32]
 8011aa0:	2301      	movs	r3, #1
 8011aa2:	f7fd fcab 	bl	800f3fc <disk_write>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d009      	beq.n	8011ac0 <f_lseek+0x44c>
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	2201      	movs	r2, #1
 8011ab0:	755a      	strb	r2, [r3, #21]
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	2101      	movs	r1, #1
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f7fd fdf5 	bl	800f6a6 <unlock_fs>
 8011abc:	2301      	movs	r3, #1
 8011abe:	e028      	b.n	8011b12 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	7d1b      	ldrb	r3, [r3, #20]
 8011ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011ac8:	b2da      	uxtb	r2, r3
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011ace:	68bb      	ldr	r3, [r7, #8]
 8011ad0:	7858      	ldrb	r0, [r3, #1]
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011ad8:	2301      	movs	r3, #1
 8011ada:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011adc:	f7fd fc6e 	bl	800f3bc <disk_read>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d009      	beq.n	8011afa <f_lseek+0x486>
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	2201      	movs	r2, #1
 8011aea:	755a      	strb	r2, [r3, #21]
 8011aec:	68bb      	ldr	r3, [r7, #8]
 8011aee:	2101      	movs	r1, #1
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7fd fdd8 	bl	800f6a6 <unlock_fs>
 8011af6:	2301      	movs	r3, #1
 8011af8:	e00b      	b.n	8011b12 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011afe:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8011b06:	4611      	mov	r1, r2
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7fd fdcc 	bl	800f6a6 <unlock_fs>
 8011b0e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8011b12:	4618      	mov	r0, r3
 8011b14:	3740      	adds	r7, #64	@ 0x40
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}

08011b1a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8011b1a:	b580      	push	{r7, lr}
 8011b1c:	b084      	sub	sp, #16
 8011b1e:	af00      	add	r7, sp, #0
 8011b20:	6078      	str	r0, [r7, #4]
 8011b22:	460b      	mov	r3, r1
 8011b24:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8011b26:	78fb      	ldrb	r3, [r7, #3]
 8011b28:	2b0a      	cmp	r3, #10
 8011b2a:	d103      	bne.n	8011b34 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8011b2c:	210d      	movs	r1, #13
 8011b2e:	6878      	ldr	r0, [r7, #4]
 8011b30:	f7ff fff3 	bl	8011b1a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	685b      	ldr	r3, [r3, #4]
 8011b38:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	db25      	blt.n	8011b8c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	1c5a      	adds	r2, r3, #1
 8011b44:	60fa      	str	r2, [r7, #12]
 8011b46:	687a      	ldr	r2, [r7, #4]
 8011b48:	4413      	add	r3, r2
 8011b4a:	78fa      	ldrb	r2, [r7, #3]
 8011b4c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	2b3c      	cmp	r3, #60	@ 0x3c
 8011b52:	dd12      	ble.n	8011b7a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6818      	ldr	r0, [r3, #0]
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f103 010c 	add.w	r1, r3, #12
 8011b5e:	68fa      	ldr	r2, [r7, #12]
 8011b60:	f107 0308 	add.w	r3, r7, #8
 8011b64:	f7ff fb59 	bl	801121a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8011b68:	68ba      	ldr	r2, [r7, #8]
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	429a      	cmp	r2, r3
 8011b6e:	d101      	bne.n	8011b74 <putc_bfd+0x5a>
 8011b70:	2300      	movs	r3, #0
 8011b72:	e001      	b.n	8011b78 <putc_bfd+0x5e>
 8011b74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011b78:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	68fa      	ldr	r2, [r7, #12]
 8011b7e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	689b      	ldr	r3, [r3, #8]
 8011b84:	1c5a      	adds	r2, r3, #1
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	609a      	str	r2, [r3, #8]
 8011b8a:	e000      	b.n	8011b8e <putc_bfd+0x74>
	if (i < 0) return;
 8011b8c:	bf00      	nop
}
 8011b8e:	3710      	adds	r7, #16
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}

08011b94 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b084      	sub	sp, #16
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	685b      	ldr	r3, [r3, #4]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	db16      	blt.n	8011bd2 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	6818      	ldr	r0, [r3, #0]
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f103 010c 	add.w	r1, r3, #12
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	685b      	ldr	r3, [r3, #4]
 8011bb2:	461a      	mov	r2, r3
 8011bb4:	f107 030c 	add.w	r3, r7, #12
 8011bb8:	f7ff fb2f 	bl	801121a <f_write>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d107      	bne.n	8011bd2 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	685b      	ldr	r3, [r3, #4]
 8011bc6:	68fa      	ldr	r2, [r7, #12]
 8011bc8:	4293      	cmp	r3, r2
 8011bca:	d102      	bne.n	8011bd2 <putc_flush+0x3e>
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	689b      	ldr	r3, [r3, #8]
 8011bd0:	e001      	b.n	8011bd6 <putc_flush+0x42>
	return EOF;
 8011bd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3710      	adds	r7, #16
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}

08011bde <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8011bde:	b480      	push	{r7}
 8011be0:	b083      	sub	sp, #12
 8011be2:	af00      	add	r7, sp, #0
 8011be4:	6078      	str	r0, [r7, #4]
 8011be6:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	683a      	ldr	r2, [r7, #0]
 8011bec:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	605a      	str	r2, [r3, #4]
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	685a      	ldr	r2, [r3, #4]
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	609a      	str	r2, [r3, #8]
}
 8011bfc:	bf00      	nop
 8011bfe:	370c      	adds	r7, #12
 8011c00:	46bd      	mov	sp, r7
 8011c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c06:	4770      	bx	lr

08011c08 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8011c08:	b40e      	push	{r1, r2, r3}
 8011c0a:	b580      	push	{r7, lr}
 8011c0c:	b0a7      	sub	sp, #156	@ 0x9c
 8011c0e:	af00      	add	r7, sp, #0
 8011c10:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8011c12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011c16:	6879      	ldr	r1, [r7, #4]
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7ff ffe0 	bl	8011bde <putc_init>

	va_start(arp, fmt);
 8011c1e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8011c22:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 8011c24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011c28:	1c5a      	adds	r2, r3, #1
 8011c2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011c2e:	781b      	ldrb	r3, [r3, #0]
 8011c30:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 8011c34:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	f000 81f2 	beq.w	8012022 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8011c3e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011c42:	2b25      	cmp	r3, #37	@ 0x25
 8011c44:	d008      	beq.n	8011c58 <f_printf+0x50>
			putc_bfd(&pb, c);
 8011c46:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8011c4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011c4e:	4611      	mov	r1, r2
 8011c50:	4618      	mov	r0, r3
 8011c52:	f7ff ff62 	bl	8011b1a <putc_bfd>
			continue;
 8011c56:	e1e3      	b.n	8012020 <f_printf+0x418>
		}
		w = f = 0;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011c5e:	2300      	movs	r3, #0
 8011c60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 8011c64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011c68:	1c5a      	adds	r2, r3, #1
 8011c6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011c6e:	781b      	ldrb	r3, [r3, #0]
 8011c70:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8011c74:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011c78:	2b30      	cmp	r3, #48	@ 0x30
 8011c7a:	d10b      	bne.n	8011c94 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011c82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011c86:	1c5a      	adds	r2, r3, #1
 8011c88:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011c8c:	781b      	ldrb	r3, [r3, #0]
 8011c8e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8011c92:	e024      	b.n	8011cde <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8011c94:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011c98:	2b2d      	cmp	r3, #45	@ 0x2d
 8011c9a:	d120      	bne.n	8011cde <f_printf+0xd6>
				f = 2; c = *fmt++;
 8011c9c:	2302      	movs	r3, #2
 8011c9e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011ca2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011ca6:	1c5a      	adds	r2, r3, #1
 8011ca8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011cac:	781b      	ldrb	r3, [r3, #0]
 8011cae:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8011cb2:	e014      	b.n	8011cde <f_printf+0xd6>
			w = w * 10 + c - '0';
 8011cb4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011cb8:	4613      	mov	r3, r2
 8011cba:	009b      	lsls	r3, r3, #2
 8011cbc:	4413      	add	r3, r2
 8011cbe:	005b      	lsls	r3, r3, #1
 8011cc0:	461a      	mov	r2, r3
 8011cc2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011cc6:	4413      	add	r3, r2
 8011cc8:	3b30      	subs	r3, #48	@ 0x30
 8011cca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 8011cce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011cd2:	1c5a      	adds	r2, r3, #1
 8011cd4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011cd8:	781b      	ldrb	r3, [r3, #0]
 8011cda:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 8011cde:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011ce2:	2b2f      	cmp	r3, #47	@ 0x2f
 8011ce4:	d903      	bls.n	8011cee <f_printf+0xe6>
 8011ce6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011cea:	2b39      	cmp	r3, #57	@ 0x39
 8011cec:	d9e2      	bls.n	8011cb4 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8011cee:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011cf2:	2b6c      	cmp	r3, #108	@ 0x6c
 8011cf4:	d003      	beq.n	8011cfe <f_printf+0xf6>
 8011cf6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011cfa:	2b4c      	cmp	r3, #76	@ 0x4c
 8011cfc:	d10d      	bne.n	8011d1a <f_printf+0x112>
			f |= 4; c = *fmt++;
 8011cfe:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011d02:	f043 0304 	orr.w	r3, r3, #4
 8011d06:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011d0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011d0e:	1c5a      	adds	r2, r3, #1
 8011d10:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011d14:	781b      	ldrb	r3, [r3, #0]
 8011d16:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 8011d1a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	f000 8181 	beq.w	8012026 <f_printf+0x41e>
		d = c;
 8011d24:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011d28:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 8011d2c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011d30:	2b60      	cmp	r3, #96	@ 0x60
 8011d32:	d908      	bls.n	8011d46 <f_printf+0x13e>
 8011d34:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011d38:	2b7a      	cmp	r3, #122	@ 0x7a
 8011d3a:	d804      	bhi.n	8011d46 <f_printf+0x13e>
 8011d3c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011d40:	3b20      	subs	r3, #32
 8011d42:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 8011d46:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011d4a:	3b42      	subs	r3, #66	@ 0x42
 8011d4c:	2b16      	cmp	r3, #22
 8011d4e:	f200 8098 	bhi.w	8011e82 <f_printf+0x27a>
 8011d52:	a201      	add	r2, pc, #4	@ (adr r2, 8011d58 <f_printf+0x150>)
 8011d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d58:	08011e63 	.word	0x08011e63
 8011d5c:	08011e4b 	.word	0x08011e4b
 8011d60:	08011e73 	.word	0x08011e73
 8011d64:	08011e83 	.word	0x08011e83
 8011d68:	08011e83 	.word	0x08011e83
 8011d6c:	08011e83 	.word	0x08011e83
 8011d70:	08011e83 	.word	0x08011e83
 8011d74:	08011e83 	.word	0x08011e83
 8011d78:	08011e83 	.word	0x08011e83
 8011d7c:	08011e83 	.word	0x08011e83
 8011d80:	08011e83 	.word	0x08011e83
 8011d84:	08011e83 	.word	0x08011e83
 8011d88:	08011e83 	.word	0x08011e83
 8011d8c:	08011e6b 	.word	0x08011e6b
 8011d90:	08011e83 	.word	0x08011e83
 8011d94:	08011e83 	.word	0x08011e83
 8011d98:	08011e83 	.word	0x08011e83
 8011d9c:	08011db5 	.word	0x08011db5
 8011da0:	08011e83 	.word	0x08011e83
 8011da4:	08011e73 	.word	0x08011e73
 8011da8:	08011e83 	.word	0x08011e83
 8011dac:	08011e83 	.word	0x08011e83
 8011db0:	08011e7b 	.word	0x08011e7b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8011db4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011db6:	1d1a      	adds	r2, r3, #4
 8011db8:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011dc4:	e004      	b.n	8011dd0 <f_printf+0x1c8>
 8011dc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011dca:	3301      	adds	r3, #1
 8011dcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011dd0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011dd6:	4413      	add	r3, r2
 8011dd8:	781b      	ldrb	r3, [r3, #0]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d1f3      	bne.n	8011dc6 <f_printf+0x1be>
			if (!(f & 2)) {
 8011dde:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011de2:	f003 0302 	and.w	r3, r3, #2
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d11a      	bne.n	8011e20 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8011dea:	e005      	b.n	8011df8 <f_printf+0x1f0>
 8011dec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011df0:	2120      	movs	r1, #32
 8011df2:	4618      	mov	r0, r3
 8011df4:	f7ff fe91 	bl	8011b1a <putc_bfd>
 8011df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011dfc:	1c5a      	adds	r2, r3, #1
 8011dfe:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011e02:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011e06:	429a      	cmp	r2, r3
 8011e08:	d8f0      	bhi.n	8011dec <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8011e0a:	e009      	b.n	8011e20 <f_printf+0x218>
 8011e0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011e0e:	1c5a      	adds	r2, r3, #1
 8011e10:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011e12:	781a      	ldrb	r2, [r3, #0]
 8011e14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011e18:	4611      	mov	r1, r2
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f7ff fe7d 	bl	8011b1a <putc_bfd>
 8011e20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011e22:	781b      	ldrb	r3, [r3, #0]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d1f1      	bne.n	8011e0c <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8011e28:	e005      	b.n	8011e36 <f_printf+0x22e>
 8011e2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011e2e:	2120      	movs	r1, #32
 8011e30:	4618      	mov	r0, r3
 8011e32:	f7ff fe72 	bl	8011b1a <putc_bfd>
 8011e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011e3a:	1c5a      	adds	r2, r3, #1
 8011e3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011e40:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011e44:	429a      	cmp	r2, r3
 8011e46:	d8f0      	bhi.n	8011e2a <f_printf+0x222>
			continue;
 8011e48:	e0ea      	b.n	8012020 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8011e4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011e4c:	1d1a      	adds	r2, r3, #4
 8011e4e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	b2da      	uxtb	r2, r3
 8011e54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011e58:	4611      	mov	r1, r2
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f7ff fe5d 	bl	8011b1a <putc_bfd>
 8011e60:	e0de      	b.n	8012020 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8011e62:	2302      	movs	r3, #2
 8011e64:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011e68:	e014      	b.n	8011e94 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8011e6a:	2308      	movs	r3, #8
 8011e6c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011e70:	e010      	b.n	8011e94 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8011e72:	230a      	movs	r3, #10
 8011e74:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011e78:	e00c      	b.n	8011e94 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8011e7a:	2310      	movs	r3, #16
 8011e7c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011e80:	e008      	b.n	8011e94 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8011e82:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8011e86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011e8a:	4611      	mov	r1, r2
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f7ff fe44 	bl	8011b1a <putc_bfd>
 8011e92:	e0c5      	b.n	8012020 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8011e94:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011e98:	f003 0304 	and.w	r3, r3, #4
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d004      	beq.n	8011eaa <f_printf+0x2a2>
 8011ea0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011ea2:	1d1a      	adds	r2, r3, #4
 8011ea4:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	e00c      	b.n	8011ec4 <f_printf+0x2bc>
 8011eaa:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011eae:	2b44      	cmp	r3, #68	@ 0x44
 8011eb0:	d104      	bne.n	8011ebc <f_printf+0x2b4>
 8011eb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011eb4:	1d1a      	adds	r2, r3, #4
 8011eb6:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	e003      	b.n	8011ec4 <f_printf+0x2bc>
 8011ebc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011ebe:	1d1a      	adds	r2, r3, #4
 8011ec0:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8011ec8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011ecc:	2b44      	cmp	r3, #68	@ 0x44
 8011ece:	d10e      	bne.n	8011eee <f_printf+0x2e6>
 8011ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	da0a      	bge.n	8011eee <f_printf+0x2e6>
			v = 0 - v;
 8011ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011edc:	425b      	negs	r3, r3
 8011ede:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 8011ee2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011ee6:	f043 0308 	orr.w	r3, r3, #8
 8011eea:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8011ef4:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8011ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011efc:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f00:	fb01 f202 	mul.w	r2, r1, r2
 8011f04:	1a9b      	subs	r3, r3, r2
 8011f06:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8011f0a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8011f0e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8011f1a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011f1e:	2b09      	cmp	r3, #9
 8011f20:	d90b      	bls.n	8011f3a <f_printf+0x332>
 8011f22:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011f26:	2b78      	cmp	r3, #120	@ 0x78
 8011f28:	d101      	bne.n	8011f2e <f_printf+0x326>
 8011f2a:	2227      	movs	r2, #39	@ 0x27
 8011f2c:	e000      	b.n	8011f30 <f_printf+0x328>
 8011f2e:	2207      	movs	r2, #7
 8011f30:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011f34:	4413      	add	r3, r2
 8011f36:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 8011f3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011f3e:	1c5a      	adds	r2, r3, #1
 8011f40:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8011f44:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8011f48:	3230      	adds	r2, #48	@ 0x30
 8011f4a:	b2d2      	uxtb	r2, r2
 8011f4c:	3398      	adds	r3, #152	@ 0x98
 8011f4e:	443b      	add	r3, r7
 8011f50:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8011f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d003      	beq.n	8011f64 <f_printf+0x35c>
 8011f5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011f60:	2b1f      	cmp	r3, #31
 8011f62:	d9c7      	bls.n	8011ef4 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8011f64:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011f68:	f003 0308 	and.w	r3, r3, #8
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d009      	beq.n	8011f84 <f_printf+0x37c>
 8011f70:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011f74:	1c5a      	adds	r2, r3, #1
 8011f76:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8011f7a:	3398      	adds	r3, #152	@ 0x98
 8011f7c:	443b      	add	r3, r7
 8011f7e:	222d      	movs	r2, #45	@ 0x2d
 8011f80:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8011f84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011f88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011f8c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011f90:	f003 0301 	and.w	r3, r3, #1
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d001      	beq.n	8011f9c <f_printf+0x394>
 8011f98:	2330      	movs	r3, #48	@ 0x30
 8011f9a:	e000      	b.n	8011f9e <f_printf+0x396>
 8011f9c:	2320      	movs	r3, #32
 8011f9e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8011fa2:	e007      	b.n	8011fb4 <f_printf+0x3ac>
 8011fa4:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8011fa8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011fac:	4611      	mov	r1, r2
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f7ff fdb3 	bl	8011b1a <putc_bfd>
 8011fb4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011fb8:	f003 0302 	and.w	r3, r3, #2
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d108      	bne.n	8011fd2 <f_printf+0x3ca>
 8011fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011fc4:	1c5a      	adds	r2, r3, #1
 8011fc6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011fca:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011fce:	429a      	cmp	r2, r3
 8011fd0:	d8e8      	bhi.n	8011fa4 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8011fd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011fd6:	3b01      	subs	r3, #1
 8011fd8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011fdc:	f107 020c 	add.w	r2, r7, #12
 8011fe0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011fe4:	4413      	add	r3, r2
 8011fe6:	781a      	ldrb	r2, [r3, #0]
 8011fe8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011fec:	4611      	mov	r1, r2
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7ff fd93 	bl	8011b1a <putc_bfd>
		} while (i);
 8011ff4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d1ea      	bne.n	8011fd2 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8011ffc:	e007      	b.n	801200e <f_printf+0x406>
 8011ffe:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8012002:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012006:	4611      	mov	r1, r2
 8012008:	4618      	mov	r0, r3
 801200a:	f7ff fd86 	bl	8011b1a <putc_bfd>
 801200e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012012:	1c5a      	adds	r2, r3, #1
 8012014:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012018:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801201c:	429a      	cmp	r2, r3
 801201e:	d8ee      	bhi.n	8011ffe <f_printf+0x3f6>
		c = *fmt++;
 8012020:	e600      	b.n	8011c24 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8012022:	bf00      	nop
 8012024:	e000      	b.n	8012028 <f_printf+0x420>
		if (!c) break;
 8012026:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8012028:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801202c:	4618      	mov	r0, r3
 801202e:	f7ff fdb1 	bl	8011b94 <putc_flush>
 8012032:	4603      	mov	r3, r0
}
 8012034:	4618      	mov	r0, r3
 8012036:	379c      	adds	r7, #156	@ 0x9c
 8012038:	46bd      	mov	sp, r7
 801203a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801203e:	b003      	add	sp, #12
 8012040:	4770      	bx	lr
 8012042:	bf00      	nop

08012044 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012044:	b480      	push	{r7}
 8012046:	b087      	sub	sp, #28
 8012048:	af00      	add	r7, sp, #0
 801204a:	60f8      	str	r0, [r7, #12]
 801204c:	60b9      	str	r1, [r7, #8]
 801204e:	4613      	mov	r3, r2
 8012050:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012052:	2301      	movs	r3, #1
 8012054:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012056:	2300      	movs	r3, #0
 8012058:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801205a:	4b1f      	ldr	r3, [pc, #124]	@ (80120d8 <FATFS_LinkDriverEx+0x94>)
 801205c:	7a5b      	ldrb	r3, [r3, #9]
 801205e:	b2db      	uxtb	r3, r3
 8012060:	2b00      	cmp	r3, #0
 8012062:	d131      	bne.n	80120c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012064:	4b1c      	ldr	r3, [pc, #112]	@ (80120d8 <FATFS_LinkDriverEx+0x94>)
 8012066:	7a5b      	ldrb	r3, [r3, #9]
 8012068:	b2db      	uxtb	r3, r3
 801206a:	461a      	mov	r2, r3
 801206c:	4b1a      	ldr	r3, [pc, #104]	@ (80120d8 <FATFS_LinkDriverEx+0x94>)
 801206e:	2100      	movs	r1, #0
 8012070:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012072:	4b19      	ldr	r3, [pc, #100]	@ (80120d8 <FATFS_LinkDriverEx+0x94>)
 8012074:	7a5b      	ldrb	r3, [r3, #9]
 8012076:	b2db      	uxtb	r3, r3
 8012078:	4a17      	ldr	r2, [pc, #92]	@ (80120d8 <FATFS_LinkDriverEx+0x94>)
 801207a:	009b      	lsls	r3, r3, #2
 801207c:	4413      	add	r3, r2
 801207e:	68fa      	ldr	r2, [r7, #12]
 8012080:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012082:	4b15      	ldr	r3, [pc, #84]	@ (80120d8 <FATFS_LinkDriverEx+0x94>)
 8012084:	7a5b      	ldrb	r3, [r3, #9]
 8012086:	b2db      	uxtb	r3, r3
 8012088:	461a      	mov	r2, r3
 801208a:	4b13      	ldr	r3, [pc, #76]	@ (80120d8 <FATFS_LinkDriverEx+0x94>)
 801208c:	4413      	add	r3, r2
 801208e:	79fa      	ldrb	r2, [r7, #7]
 8012090:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012092:	4b11      	ldr	r3, [pc, #68]	@ (80120d8 <FATFS_LinkDriverEx+0x94>)
 8012094:	7a5b      	ldrb	r3, [r3, #9]
 8012096:	b2db      	uxtb	r3, r3
 8012098:	1c5a      	adds	r2, r3, #1
 801209a:	b2d1      	uxtb	r1, r2
 801209c:	4a0e      	ldr	r2, [pc, #56]	@ (80120d8 <FATFS_LinkDriverEx+0x94>)
 801209e:	7251      	strb	r1, [r2, #9]
 80120a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80120a2:	7dbb      	ldrb	r3, [r7, #22]
 80120a4:	3330      	adds	r3, #48	@ 0x30
 80120a6:	b2da      	uxtb	r2, r3
 80120a8:	68bb      	ldr	r3, [r7, #8]
 80120aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80120ac:	68bb      	ldr	r3, [r7, #8]
 80120ae:	3301      	adds	r3, #1
 80120b0:	223a      	movs	r2, #58	@ 0x3a
 80120b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	3302      	adds	r3, #2
 80120b8:	222f      	movs	r2, #47	@ 0x2f
 80120ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	3303      	adds	r3, #3
 80120c0:	2200      	movs	r2, #0
 80120c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80120c4:	2300      	movs	r3, #0
 80120c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80120c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80120ca:	4618      	mov	r0, r3
 80120cc:	371c      	adds	r7, #28
 80120ce:	46bd      	mov	sp, r7
 80120d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d4:	4770      	bx	lr
 80120d6:	bf00      	nop
 80120d8:	24000a6c 	.word	0x24000a6c

080120dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b082      	sub	sp, #8
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
 80120e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80120e6:	2200      	movs	r2, #0
 80120e8:	6839      	ldr	r1, [r7, #0]
 80120ea:	6878      	ldr	r0, [r7, #4]
 80120ec:	f7ff ffaa 	bl	8012044 <FATFS_LinkDriverEx>
 80120f0:	4603      	mov	r3, r0
}
 80120f2:	4618      	mov	r0, r3
 80120f4:	3708      	adds	r7, #8
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}

080120fa <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80120fa:	b580      	push	{r7, lr}
 80120fc:	b084      	sub	sp, #16
 80120fe:	af00      	add	r7, sp, #0
 8012100:	4603      	mov	r3, r0
 8012102:	6039      	str	r1, [r7, #0]
 8012104:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8012106:	2200      	movs	r2, #0
 8012108:	2101      	movs	r1, #1
 801210a:	2001      	movs	r0, #1
 801210c:	f000 f9b9 	bl	8012482 <osSemaphoreNew>
 8012110:	4602      	mov	r2, r0
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	2b00      	cmp	r3, #0
 801211c:	bf14      	ite	ne
 801211e:	2301      	movne	r3, #1
 8012120:	2300      	moveq	r3, #0
 8012122:	b2db      	uxtb	r3, r3
 8012124:	60fb      	str	r3, [r7, #12]

    return ret;
 8012126:	68fb      	ldr	r3, [r7, #12]
}
 8012128:	4618      	mov	r0, r3
 801212a:	3710      	adds	r7, #16
 801212c:	46bd      	mov	sp, r7
 801212e:	bd80      	pop	{r7, pc}

08012130 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b082      	sub	sp, #8
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f000 fac1 	bl	80126c0 <osSemaphoreDelete>
#endif
    return 1;
 801213e:	2301      	movs	r3, #1
}
 8012140:	4618      	mov	r0, r3
 8012142:	3708      	adds	r7, #8
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}

08012148 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b084      	sub	sp, #16
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8012150:	2300      	movs	r3, #0
 8012152:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8012154:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f000 fa1b 	bl	8012594 <osSemaphoreAcquire>
 801215e:	4603      	mov	r3, r0
 8012160:	2b00      	cmp	r3, #0
 8012162:	d101      	bne.n	8012168 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8012164:	2301      	movs	r3, #1
 8012166:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8012168:	68fb      	ldr	r3, [r7, #12]
}
 801216a:	4618      	mov	r0, r3
 801216c:	3710      	adds	r7, #16
 801216e:	46bd      	mov	sp, r7
 8012170:	bd80      	pop	{r7, pc}

08012172 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8012172:	b580      	push	{r7, lr}
 8012174:	b082      	sub	sp, #8
 8012176:	af00      	add	r7, sp, #0
 8012178:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801217a:	6878      	ldr	r0, [r7, #4]
 801217c:	f000 fa5c 	bl	8012638 <osSemaphoreRelease>
#endif
}
 8012180:	bf00      	nop
 8012182:	3708      	adds	r7, #8
 8012184:	46bd      	mov	sp, r7
 8012186:	bd80      	pop	{r7, pc}

08012188 <__NVIC_SetPriority>:
{
 8012188:	b480      	push	{r7}
 801218a:	b083      	sub	sp, #12
 801218c:	af00      	add	r7, sp, #0
 801218e:	4603      	mov	r3, r0
 8012190:	6039      	str	r1, [r7, #0]
 8012192:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012198:	2b00      	cmp	r3, #0
 801219a:	db0a      	blt.n	80121b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	b2da      	uxtb	r2, r3
 80121a0:	490c      	ldr	r1, [pc, #48]	@ (80121d4 <__NVIC_SetPriority+0x4c>)
 80121a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80121a6:	0112      	lsls	r2, r2, #4
 80121a8:	b2d2      	uxtb	r2, r2
 80121aa:	440b      	add	r3, r1
 80121ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80121b0:	e00a      	b.n	80121c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	b2da      	uxtb	r2, r3
 80121b6:	4908      	ldr	r1, [pc, #32]	@ (80121d8 <__NVIC_SetPriority+0x50>)
 80121b8:	88fb      	ldrh	r3, [r7, #6]
 80121ba:	f003 030f 	and.w	r3, r3, #15
 80121be:	3b04      	subs	r3, #4
 80121c0:	0112      	lsls	r2, r2, #4
 80121c2:	b2d2      	uxtb	r2, r2
 80121c4:	440b      	add	r3, r1
 80121c6:	761a      	strb	r2, [r3, #24]
}
 80121c8:	bf00      	nop
 80121ca:	370c      	adds	r7, #12
 80121cc:	46bd      	mov	sp, r7
 80121ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d2:	4770      	bx	lr
 80121d4:	e000e100 	.word	0xe000e100
 80121d8:	e000ed00 	.word	0xe000ed00

080121dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80121dc:	b580      	push	{r7, lr}
 80121de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80121e0:	4b05      	ldr	r3, [pc, #20]	@ (80121f8 <SysTick_Handler+0x1c>)
 80121e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80121e4:	f002 fdae 	bl	8014d44 <xTaskGetSchedulerState>
 80121e8:	4603      	mov	r3, r0
 80121ea:	2b01      	cmp	r3, #1
 80121ec:	d001      	beq.n	80121f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80121ee:	f003 ff33 	bl	8016058 <xPortSysTickHandler>
  }
}
 80121f2:	bf00      	nop
 80121f4:	bd80      	pop	{r7, pc}
 80121f6:	bf00      	nop
 80121f8:	e000e010 	.word	0xe000e010

080121fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80121fc:	b580      	push	{r7, lr}
 80121fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012200:	2100      	movs	r1, #0
 8012202:	f06f 0004 	mvn.w	r0, #4
 8012206:	f7ff ffbf 	bl	8012188 <__NVIC_SetPriority>
#endif
}
 801220a:	bf00      	nop
 801220c:	bd80      	pop	{r7, pc}
	...

08012210 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012210:	b480      	push	{r7}
 8012212:	b083      	sub	sp, #12
 8012214:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012216:	f3ef 8305 	mrs	r3, IPSR
 801221a:	603b      	str	r3, [r7, #0]
  return(result);
 801221c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801221e:	2b00      	cmp	r3, #0
 8012220:	d003      	beq.n	801222a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012222:	f06f 0305 	mvn.w	r3, #5
 8012226:	607b      	str	r3, [r7, #4]
 8012228:	e00c      	b.n	8012244 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801222a:	4b0a      	ldr	r3, [pc, #40]	@ (8012254 <osKernelInitialize+0x44>)
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d105      	bne.n	801223e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012232:	4b08      	ldr	r3, [pc, #32]	@ (8012254 <osKernelInitialize+0x44>)
 8012234:	2201      	movs	r2, #1
 8012236:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012238:	2300      	movs	r3, #0
 801223a:	607b      	str	r3, [r7, #4]
 801223c:	e002      	b.n	8012244 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801223e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012242:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012244:	687b      	ldr	r3, [r7, #4]
}
 8012246:	4618      	mov	r0, r3
 8012248:	370c      	adds	r7, #12
 801224a:	46bd      	mov	sp, r7
 801224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012250:	4770      	bx	lr
 8012252:	bf00      	nop
 8012254:	24000a78 	.word	0x24000a78

08012258 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8012258:	b580      	push	{r7, lr}
 801225a:	b082      	sub	sp, #8
 801225c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 801225e:	f002 fd71 	bl	8014d44 <xTaskGetSchedulerState>
 8012262:	4603      	mov	r3, r0
 8012264:	2b00      	cmp	r3, #0
 8012266:	d004      	beq.n	8012272 <osKernelGetState+0x1a>
 8012268:	2b02      	cmp	r3, #2
 801226a:	d105      	bne.n	8012278 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 801226c:	2302      	movs	r3, #2
 801226e:	607b      	str	r3, [r7, #4]
      break;
 8012270:	e00c      	b.n	801228c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8012272:	2303      	movs	r3, #3
 8012274:	607b      	str	r3, [r7, #4]
      break;
 8012276:	e009      	b.n	801228c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8012278:	4b07      	ldr	r3, [pc, #28]	@ (8012298 <osKernelGetState+0x40>)
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	2b01      	cmp	r3, #1
 801227e:	d102      	bne.n	8012286 <osKernelGetState+0x2e>
        state = osKernelReady;
 8012280:	2301      	movs	r3, #1
 8012282:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8012284:	e001      	b.n	801228a <osKernelGetState+0x32>
        state = osKernelInactive;
 8012286:	2300      	movs	r3, #0
 8012288:	607b      	str	r3, [r7, #4]
      break;
 801228a:	bf00      	nop
  }

  return (state);
 801228c:	687b      	ldr	r3, [r7, #4]
}
 801228e:	4618      	mov	r0, r3
 8012290:	3708      	adds	r7, #8
 8012292:	46bd      	mov	sp, r7
 8012294:	bd80      	pop	{r7, pc}
 8012296:	bf00      	nop
 8012298:	24000a78 	.word	0x24000a78

0801229c <osKernelStart>:

osStatus_t osKernelStart (void) {
 801229c:	b580      	push	{r7, lr}
 801229e:	b082      	sub	sp, #8
 80122a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80122a2:	f3ef 8305 	mrs	r3, IPSR
 80122a6:	603b      	str	r3, [r7, #0]
  return(result);
 80122a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d003      	beq.n	80122b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80122ae:	f06f 0305 	mvn.w	r3, #5
 80122b2:	607b      	str	r3, [r7, #4]
 80122b4:	e010      	b.n	80122d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80122b6:	4b0b      	ldr	r3, [pc, #44]	@ (80122e4 <osKernelStart+0x48>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	2b01      	cmp	r3, #1
 80122bc:	d109      	bne.n	80122d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80122be:	f7ff ff9d 	bl	80121fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80122c2:	4b08      	ldr	r3, [pc, #32]	@ (80122e4 <osKernelStart+0x48>)
 80122c4:	2202      	movs	r2, #2
 80122c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80122c8:	f002 f814 	bl	80142f4 <vTaskStartScheduler>
      stat = osOK;
 80122cc:	2300      	movs	r3, #0
 80122ce:	607b      	str	r3, [r7, #4]
 80122d0:	e002      	b.n	80122d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80122d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80122d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80122d8:	687b      	ldr	r3, [r7, #4]
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3708      	adds	r7, #8
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}
 80122e2:	bf00      	nop
 80122e4:	24000a78 	.word	0x24000a78

080122e8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b082      	sub	sp, #8
 80122ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80122ee:	f3ef 8305 	mrs	r3, IPSR
 80122f2:	603b      	str	r3, [r7, #0]
  return(result);
 80122f4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d003      	beq.n	8012302 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80122fa:	f002 f927 	bl	801454c <xTaskGetTickCountFromISR>
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	e002      	b.n	8012308 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8012302:	f002 f913 	bl	801452c <xTaskGetTickCount>
 8012306:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8012308:	687b      	ldr	r3, [r7, #4]
}
 801230a:	4618      	mov	r0, r3
 801230c:	3708      	adds	r7, #8
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}

08012312 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012312:	b580      	push	{r7, lr}
 8012314:	b08e      	sub	sp, #56	@ 0x38
 8012316:	af04      	add	r7, sp, #16
 8012318:	60f8      	str	r0, [r7, #12]
 801231a:	60b9      	str	r1, [r7, #8]
 801231c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801231e:	2300      	movs	r3, #0
 8012320:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012322:	f3ef 8305 	mrs	r3, IPSR
 8012326:	617b      	str	r3, [r7, #20]
  return(result);
 8012328:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801232a:	2b00      	cmp	r3, #0
 801232c:	d17e      	bne.n	801242c <osThreadNew+0x11a>
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d07b      	beq.n	801242c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012334:	2380      	movs	r3, #128	@ 0x80
 8012336:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012338:	2318      	movs	r3, #24
 801233a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801233c:	2300      	movs	r3, #0
 801233e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8012340:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012344:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d045      	beq.n	80123d8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d002      	beq.n	801235a <osThreadNew+0x48>
        name = attr->name;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	699b      	ldr	r3, [r3, #24]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d002      	beq.n	8012368 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	699b      	ldr	r3, [r3, #24]
 8012366:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012368:	69fb      	ldr	r3, [r7, #28]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d008      	beq.n	8012380 <osThreadNew+0x6e>
 801236e:	69fb      	ldr	r3, [r7, #28]
 8012370:	2b38      	cmp	r3, #56	@ 0x38
 8012372:	d805      	bhi.n	8012380 <osThreadNew+0x6e>
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	685b      	ldr	r3, [r3, #4]
 8012378:	f003 0301 	and.w	r3, r3, #1
 801237c:	2b00      	cmp	r3, #0
 801237e:	d001      	beq.n	8012384 <osThreadNew+0x72>
        return (NULL);
 8012380:	2300      	movs	r3, #0
 8012382:	e054      	b.n	801242e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	695b      	ldr	r3, [r3, #20]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d003      	beq.n	8012394 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	695b      	ldr	r3, [r3, #20]
 8012390:	089b      	lsrs	r3, r3, #2
 8012392:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	689b      	ldr	r3, [r3, #8]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d00e      	beq.n	80123ba <osThreadNew+0xa8>
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	68db      	ldr	r3, [r3, #12]
 80123a0:	2ba7      	cmp	r3, #167	@ 0xa7
 80123a2:	d90a      	bls.n	80123ba <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d006      	beq.n	80123ba <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	695b      	ldr	r3, [r3, #20]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d002      	beq.n	80123ba <osThreadNew+0xa8>
        mem = 1;
 80123b4:	2301      	movs	r3, #1
 80123b6:	61bb      	str	r3, [r7, #24]
 80123b8:	e010      	b.n	80123dc <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	689b      	ldr	r3, [r3, #8]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d10c      	bne.n	80123dc <osThreadNew+0xca>
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	68db      	ldr	r3, [r3, #12]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d108      	bne.n	80123dc <osThreadNew+0xca>
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	691b      	ldr	r3, [r3, #16]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d104      	bne.n	80123dc <osThreadNew+0xca>
          mem = 0;
 80123d2:	2300      	movs	r3, #0
 80123d4:	61bb      	str	r3, [r7, #24]
 80123d6:	e001      	b.n	80123dc <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80123d8:	2300      	movs	r3, #0
 80123da:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80123dc:	69bb      	ldr	r3, [r7, #24]
 80123de:	2b01      	cmp	r3, #1
 80123e0:	d110      	bne.n	8012404 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80123e6:	687a      	ldr	r2, [r7, #4]
 80123e8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80123ea:	9202      	str	r2, [sp, #8]
 80123ec:	9301      	str	r3, [sp, #4]
 80123ee:	69fb      	ldr	r3, [r7, #28]
 80123f0:	9300      	str	r3, [sp, #0]
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	6a3a      	ldr	r2, [r7, #32]
 80123f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80123f8:	68f8      	ldr	r0, [r7, #12]
 80123fa:	f001 fd87 	bl	8013f0c <xTaskCreateStatic>
 80123fe:	4603      	mov	r3, r0
 8012400:	613b      	str	r3, [r7, #16]
 8012402:	e013      	b.n	801242c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012404:	69bb      	ldr	r3, [r7, #24]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d110      	bne.n	801242c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801240a:	6a3b      	ldr	r3, [r7, #32]
 801240c:	b29a      	uxth	r2, r3
 801240e:	f107 0310 	add.w	r3, r7, #16
 8012412:	9301      	str	r3, [sp, #4]
 8012414:	69fb      	ldr	r3, [r7, #28]
 8012416:	9300      	str	r3, [sp, #0]
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801241c:	68f8      	ldr	r0, [r7, #12]
 801241e:	f001 fdd5 	bl	8013fcc <xTaskCreate>
 8012422:	4603      	mov	r3, r0
 8012424:	2b01      	cmp	r3, #1
 8012426:	d001      	beq.n	801242c <osThreadNew+0x11a>
            hTask = NULL;
 8012428:	2300      	movs	r3, #0
 801242a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801242c:	693b      	ldr	r3, [r7, #16]
}
 801242e:	4618      	mov	r0, r3
 8012430:	3728      	adds	r7, #40	@ 0x28
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}

08012436 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8012436:	b580      	push	{r7, lr}
 8012438:	b082      	sub	sp, #8
 801243a:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 801243c:	f002 fc72 	bl	8014d24 <xTaskGetCurrentTaskHandle>
 8012440:	6078      	str	r0, [r7, #4]

  return (id);
 8012442:	687b      	ldr	r3, [r7, #4]
}
 8012444:	4618      	mov	r0, r3
 8012446:	3708      	adds	r7, #8
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}

0801244c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801244c:	b580      	push	{r7, lr}
 801244e:	b084      	sub	sp, #16
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012454:	f3ef 8305 	mrs	r3, IPSR
 8012458:	60bb      	str	r3, [r7, #8]
  return(result);
 801245a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801245c:	2b00      	cmp	r3, #0
 801245e:	d003      	beq.n	8012468 <osDelay+0x1c>
    stat = osErrorISR;
 8012460:	f06f 0305 	mvn.w	r3, #5
 8012464:	60fb      	str	r3, [r7, #12]
 8012466:	e007      	b.n	8012478 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012468:	2300      	movs	r3, #0
 801246a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d002      	beq.n	8012478 <osDelay+0x2c>
      vTaskDelay(ticks);
 8012472:	6878      	ldr	r0, [r7, #4]
 8012474:	f001 ff08 	bl	8014288 <vTaskDelay>
    }
  }

  return (stat);
 8012478:	68fb      	ldr	r3, [r7, #12]
}
 801247a:	4618      	mov	r0, r3
 801247c:	3710      	adds	r7, #16
 801247e:	46bd      	mov	sp, r7
 8012480:	bd80      	pop	{r7, pc}

08012482 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8012482:	b580      	push	{r7, lr}
 8012484:	b08a      	sub	sp, #40	@ 0x28
 8012486:	af02      	add	r7, sp, #8
 8012488:	60f8      	str	r0, [r7, #12]
 801248a:	60b9      	str	r1, [r7, #8]
 801248c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801248e:	2300      	movs	r3, #0
 8012490:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012492:	f3ef 8305 	mrs	r3, IPSR
 8012496:	613b      	str	r3, [r7, #16]
  return(result);
 8012498:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801249a:	2b00      	cmp	r3, #0
 801249c:	d175      	bne.n	801258a <osSemaphoreNew+0x108>
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d072      	beq.n	801258a <osSemaphoreNew+0x108>
 80124a4:	68ba      	ldr	r2, [r7, #8]
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	429a      	cmp	r2, r3
 80124aa:	d86e      	bhi.n	801258a <osSemaphoreNew+0x108>
    mem = -1;
 80124ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80124b0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d015      	beq.n	80124e4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	689b      	ldr	r3, [r3, #8]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d006      	beq.n	80124ce <osSemaphoreNew+0x4c>
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	68db      	ldr	r3, [r3, #12]
 80124c4:	2b4f      	cmp	r3, #79	@ 0x4f
 80124c6:	d902      	bls.n	80124ce <osSemaphoreNew+0x4c>
        mem = 1;
 80124c8:	2301      	movs	r3, #1
 80124ca:	61bb      	str	r3, [r7, #24]
 80124cc:	e00c      	b.n	80124e8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	689b      	ldr	r3, [r3, #8]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d108      	bne.n	80124e8 <osSemaphoreNew+0x66>
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	68db      	ldr	r3, [r3, #12]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d104      	bne.n	80124e8 <osSemaphoreNew+0x66>
          mem = 0;
 80124de:	2300      	movs	r3, #0
 80124e0:	61bb      	str	r3, [r7, #24]
 80124e2:	e001      	b.n	80124e8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80124e4:	2300      	movs	r3, #0
 80124e6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80124e8:	69bb      	ldr	r3, [r7, #24]
 80124ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80124ee:	d04c      	beq.n	801258a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	2b01      	cmp	r3, #1
 80124f4:	d128      	bne.n	8012548 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80124f6:	69bb      	ldr	r3, [r7, #24]
 80124f8:	2b01      	cmp	r3, #1
 80124fa:	d10a      	bne.n	8012512 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	689b      	ldr	r3, [r3, #8]
 8012500:	2203      	movs	r2, #3
 8012502:	9200      	str	r2, [sp, #0]
 8012504:	2200      	movs	r2, #0
 8012506:	2100      	movs	r1, #0
 8012508:	2001      	movs	r0, #1
 801250a:	f000 fd3d 	bl	8012f88 <xQueueGenericCreateStatic>
 801250e:	61f8      	str	r0, [r7, #28]
 8012510:	e005      	b.n	801251e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8012512:	2203      	movs	r2, #3
 8012514:	2100      	movs	r1, #0
 8012516:	2001      	movs	r0, #1
 8012518:	f000 fdb3 	bl	8013082 <xQueueGenericCreate>
 801251c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801251e:	69fb      	ldr	r3, [r7, #28]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d022      	beq.n	801256a <osSemaphoreNew+0xe8>
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d01f      	beq.n	801256a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801252a:	2300      	movs	r3, #0
 801252c:	2200      	movs	r2, #0
 801252e:	2100      	movs	r1, #0
 8012530:	69f8      	ldr	r0, [r7, #28]
 8012532:	f000 fe73 	bl	801321c <xQueueGenericSend>
 8012536:	4603      	mov	r3, r0
 8012538:	2b01      	cmp	r3, #1
 801253a:	d016      	beq.n	801256a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 801253c:	69f8      	ldr	r0, [r7, #28]
 801253e:	f001 fb11 	bl	8013b64 <vQueueDelete>
            hSemaphore = NULL;
 8012542:	2300      	movs	r3, #0
 8012544:	61fb      	str	r3, [r7, #28]
 8012546:	e010      	b.n	801256a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8012548:	69bb      	ldr	r3, [r7, #24]
 801254a:	2b01      	cmp	r3, #1
 801254c:	d108      	bne.n	8012560 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	689b      	ldr	r3, [r3, #8]
 8012552:	461a      	mov	r2, r3
 8012554:	68b9      	ldr	r1, [r7, #8]
 8012556:	68f8      	ldr	r0, [r7, #12]
 8012558:	f000 fdf1 	bl	801313e <xQueueCreateCountingSemaphoreStatic>
 801255c:	61f8      	str	r0, [r7, #28]
 801255e:	e004      	b.n	801256a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8012560:	68b9      	ldr	r1, [r7, #8]
 8012562:	68f8      	ldr	r0, [r7, #12]
 8012564:	f000 fe24 	bl	80131b0 <xQueueCreateCountingSemaphore>
 8012568:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801256a:	69fb      	ldr	r3, [r7, #28]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d00c      	beq.n	801258a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d003      	beq.n	801257e <osSemaphoreNew+0xfc>
          name = attr->name;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	617b      	str	r3, [r7, #20]
 801257c:	e001      	b.n	8012582 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 801257e:	2300      	movs	r3, #0
 8012580:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8012582:	6979      	ldr	r1, [r7, #20]
 8012584:	69f8      	ldr	r0, [r7, #28]
 8012586:	f001 fc39 	bl	8013dfc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801258a:	69fb      	ldr	r3, [r7, #28]
}
 801258c:	4618      	mov	r0, r3
 801258e:	3720      	adds	r7, #32
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}

08012594 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8012594:	b580      	push	{r7, lr}
 8012596:	b086      	sub	sp, #24
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80125a2:	2300      	movs	r3, #0
 80125a4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80125a6:	693b      	ldr	r3, [r7, #16]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d103      	bne.n	80125b4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80125ac:	f06f 0303 	mvn.w	r3, #3
 80125b0:	617b      	str	r3, [r7, #20]
 80125b2:	e039      	b.n	8012628 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125b4:	f3ef 8305 	mrs	r3, IPSR
 80125b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80125ba:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d022      	beq.n	8012606 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d003      	beq.n	80125ce <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80125c6:	f06f 0303 	mvn.w	r3, #3
 80125ca:	617b      	str	r3, [r7, #20]
 80125cc:	e02c      	b.n	8012628 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80125ce:	2300      	movs	r3, #0
 80125d0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80125d2:	f107 0308 	add.w	r3, r7, #8
 80125d6:	461a      	mov	r2, r3
 80125d8:	2100      	movs	r1, #0
 80125da:	6938      	ldr	r0, [r7, #16]
 80125dc:	f001 fa40 	bl	8013a60 <xQueueReceiveFromISR>
 80125e0:	4603      	mov	r3, r0
 80125e2:	2b01      	cmp	r3, #1
 80125e4:	d003      	beq.n	80125ee <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80125e6:	f06f 0302 	mvn.w	r3, #2
 80125ea:	617b      	str	r3, [r7, #20]
 80125ec:	e01c      	b.n	8012628 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d019      	beq.n	8012628 <osSemaphoreAcquire+0x94>
 80125f4:	4b0f      	ldr	r3, [pc, #60]	@ (8012634 <osSemaphoreAcquire+0xa0>)
 80125f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80125fa:	601a      	str	r2, [r3, #0]
 80125fc:	f3bf 8f4f 	dsb	sy
 8012600:	f3bf 8f6f 	isb	sy
 8012604:	e010      	b.n	8012628 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8012606:	6839      	ldr	r1, [r7, #0]
 8012608:	6938      	ldr	r0, [r7, #16]
 801260a:	f001 f919 	bl	8013840 <xQueueSemaphoreTake>
 801260e:	4603      	mov	r3, r0
 8012610:	2b01      	cmp	r3, #1
 8012612:	d009      	beq.n	8012628 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d003      	beq.n	8012622 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 801261a:	f06f 0301 	mvn.w	r3, #1
 801261e:	617b      	str	r3, [r7, #20]
 8012620:	e002      	b.n	8012628 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8012622:	f06f 0302 	mvn.w	r3, #2
 8012626:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8012628:	697b      	ldr	r3, [r7, #20]
}
 801262a:	4618      	mov	r0, r3
 801262c:	3718      	adds	r7, #24
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}
 8012632:	bf00      	nop
 8012634:	e000ed04 	.word	0xe000ed04

08012638 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8012638:	b580      	push	{r7, lr}
 801263a:	b086      	sub	sp, #24
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8012644:	2300      	movs	r3, #0
 8012646:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8012648:	693b      	ldr	r3, [r7, #16]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d103      	bne.n	8012656 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801264e:	f06f 0303 	mvn.w	r3, #3
 8012652:	617b      	str	r3, [r7, #20]
 8012654:	e02c      	b.n	80126b0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012656:	f3ef 8305 	mrs	r3, IPSR
 801265a:	60fb      	str	r3, [r7, #12]
  return(result);
 801265c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801265e:	2b00      	cmp	r3, #0
 8012660:	d01a      	beq.n	8012698 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8012662:	2300      	movs	r3, #0
 8012664:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012666:	f107 0308 	add.w	r3, r7, #8
 801266a:	4619      	mov	r1, r3
 801266c:	6938      	ldr	r0, [r7, #16]
 801266e:	f000 ff75 	bl	801355c <xQueueGiveFromISR>
 8012672:	4603      	mov	r3, r0
 8012674:	2b01      	cmp	r3, #1
 8012676:	d003      	beq.n	8012680 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8012678:	f06f 0302 	mvn.w	r3, #2
 801267c:	617b      	str	r3, [r7, #20]
 801267e:	e017      	b.n	80126b0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8012680:	68bb      	ldr	r3, [r7, #8]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d014      	beq.n	80126b0 <osSemaphoreRelease+0x78>
 8012686:	4b0d      	ldr	r3, [pc, #52]	@ (80126bc <osSemaphoreRelease+0x84>)
 8012688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801268c:	601a      	str	r2, [r3, #0]
 801268e:	f3bf 8f4f 	dsb	sy
 8012692:	f3bf 8f6f 	isb	sy
 8012696:	e00b      	b.n	80126b0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012698:	2300      	movs	r3, #0
 801269a:	2200      	movs	r2, #0
 801269c:	2100      	movs	r1, #0
 801269e:	6938      	ldr	r0, [r7, #16]
 80126a0:	f000 fdbc 	bl	801321c <xQueueGenericSend>
 80126a4:	4603      	mov	r3, r0
 80126a6:	2b01      	cmp	r3, #1
 80126a8:	d002      	beq.n	80126b0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80126aa:	f06f 0302 	mvn.w	r3, #2
 80126ae:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80126b0:	697b      	ldr	r3, [r7, #20]
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	3718      	adds	r7, #24
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}
 80126ba:	bf00      	nop
 80126bc:	e000ed04 	.word	0xe000ed04

080126c0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b086      	sub	sp, #24
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126cc:	f3ef 8305 	mrs	r3, IPSR
 80126d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80126d2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d003      	beq.n	80126e0 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 80126d8:	f06f 0305 	mvn.w	r3, #5
 80126dc:	617b      	str	r3, [r7, #20]
 80126de:	e00e      	b.n	80126fe <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 80126e0:	693b      	ldr	r3, [r7, #16]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d103      	bne.n	80126ee <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 80126e6:	f06f 0303 	mvn.w	r3, #3
 80126ea:	617b      	str	r3, [r7, #20]
 80126ec:	e007      	b.n	80126fe <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80126ee:	6938      	ldr	r0, [r7, #16]
 80126f0:	f001 fbae 	bl	8013e50 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80126f4:	2300      	movs	r3, #0
 80126f6:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80126f8:	6938      	ldr	r0, [r7, #16]
 80126fa:	f001 fa33 	bl	8013b64 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80126fe:	697b      	ldr	r3, [r7, #20]
}
 8012700:	4618      	mov	r0, r3
 8012702:	3718      	adds	r7, #24
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}

08012708 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012708:	b580      	push	{r7, lr}
 801270a:	b08a      	sub	sp, #40	@ 0x28
 801270c:	af02      	add	r7, sp, #8
 801270e:	60f8      	str	r0, [r7, #12]
 8012710:	60b9      	str	r1, [r7, #8]
 8012712:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012714:	2300      	movs	r3, #0
 8012716:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012718:	f3ef 8305 	mrs	r3, IPSR
 801271c:	613b      	str	r3, [r7, #16]
  return(result);
 801271e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012720:	2b00      	cmp	r3, #0
 8012722:	d15f      	bne.n	80127e4 <osMessageQueueNew+0xdc>
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d05c      	beq.n	80127e4 <osMessageQueueNew+0xdc>
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d059      	beq.n	80127e4 <osMessageQueueNew+0xdc>
    mem = -1;
 8012730:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012734:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d029      	beq.n	8012790 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	689b      	ldr	r3, [r3, #8]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d012      	beq.n	801276a <osMessageQueueNew+0x62>
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	68db      	ldr	r3, [r3, #12]
 8012748:	2b4f      	cmp	r3, #79	@ 0x4f
 801274a:	d90e      	bls.n	801276a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012750:	2b00      	cmp	r3, #0
 8012752:	d00a      	beq.n	801276a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	695a      	ldr	r2, [r3, #20]
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	68b9      	ldr	r1, [r7, #8]
 801275c:	fb01 f303 	mul.w	r3, r1, r3
 8012760:	429a      	cmp	r2, r3
 8012762:	d302      	bcc.n	801276a <osMessageQueueNew+0x62>
        mem = 1;
 8012764:	2301      	movs	r3, #1
 8012766:	61bb      	str	r3, [r7, #24]
 8012768:	e014      	b.n	8012794 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	689b      	ldr	r3, [r3, #8]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d110      	bne.n	8012794 <osMessageQueueNew+0x8c>
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	68db      	ldr	r3, [r3, #12]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d10c      	bne.n	8012794 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801277e:	2b00      	cmp	r3, #0
 8012780:	d108      	bne.n	8012794 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	695b      	ldr	r3, [r3, #20]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d104      	bne.n	8012794 <osMessageQueueNew+0x8c>
          mem = 0;
 801278a:	2300      	movs	r3, #0
 801278c:	61bb      	str	r3, [r7, #24]
 801278e:	e001      	b.n	8012794 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8012790:	2300      	movs	r3, #0
 8012792:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012794:	69bb      	ldr	r3, [r7, #24]
 8012796:	2b01      	cmp	r3, #1
 8012798:	d10b      	bne.n	80127b2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	691a      	ldr	r2, [r3, #16]
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	689b      	ldr	r3, [r3, #8]
 80127a2:	2100      	movs	r1, #0
 80127a4:	9100      	str	r1, [sp, #0]
 80127a6:	68b9      	ldr	r1, [r7, #8]
 80127a8:	68f8      	ldr	r0, [r7, #12]
 80127aa:	f000 fbed 	bl	8012f88 <xQueueGenericCreateStatic>
 80127ae:	61f8      	str	r0, [r7, #28]
 80127b0:	e008      	b.n	80127c4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80127b2:	69bb      	ldr	r3, [r7, #24]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d105      	bne.n	80127c4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80127b8:	2200      	movs	r2, #0
 80127ba:	68b9      	ldr	r1, [r7, #8]
 80127bc:	68f8      	ldr	r0, [r7, #12]
 80127be:	f000 fc60 	bl	8013082 <xQueueGenericCreate>
 80127c2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80127c4:	69fb      	ldr	r3, [r7, #28]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d00c      	beq.n	80127e4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d003      	beq.n	80127d8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	617b      	str	r3, [r7, #20]
 80127d6:	e001      	b.n	80127dc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80127d8:	2300      	movs	r3, #0
 80127da:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80127dc:	6979      	ldr	r1, [r7, #20]
 80127de:	69f8      	ldr	r0, [r7, #28]
 80127e0:	f001 fb0c 	bl	8013dfc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80127e4:	69fb      	ldr	r3, [r7, #28]
}
 80127e6:	4618      	mov	r0, r3
 80127e8:	3720      	adds	r7, #32
 80127ea:	46bd      	mov	sp, r7
 80127ec:	bd80      	pop	{r7, pc}
	...

080127f0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b088      	sub	sp, #32
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	60f8      	str	r0, [r7, #12]
 80127f8:	60b9      	str	r1, [r7, #8]
 80127fa:	603b      	str	r3, [r7, #0]
 80127fc:	4613      	mov	r3, r2
 80127fe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012804:	2300      	movs	r3, #0
 8012806:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012808:	f3ef 8305 	mrs	r3, IPSR
 801280c:	617b      	str	r3, [r7, #20]
  return(result);
 801280e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012810:	2b00      	cmp	r3, #0
 8012812:	d028      	beq.n	8012866 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012814:	69bb      	ldr	r3, [r7, #24]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d005      	beq.n	8012826 <osMessageQueuePut+0x36>
 801281a:	68bb      	ldr	r3, [r7, #8]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d002      	beq.n	8012826 <osMessageQueuePut+0x36>
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d003      	beq.n	801282e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8012826:	f06f 0303 	mvn.w	r3, #3
 801282a:	61fb      	str	r3, [r7, #28]
 801282c:	e038      	b.n	80128a0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801282e:	2300      	movs	r3, #0
 8012830:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012832:	f107 0210 	add.w	r2, r7, #16
 8012836:	2300      	movs	r3, #0
 8012838:	68b9      	ldr	r1, [r7, #8]
 801283a:	69b8      	ldr	r0, [r7, #24]
 801283c:	f000 fdf0 	bl	8013420 <xQueueGenericSendFromISR>
 8012840:	4603      	mov	r3, r0
 8012842:	2b01      	cmp	r3, #1
 8012844:	d003      	beq.n	801284e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8012846:	f06f 0302 	mvn.w	r3, #2
 801284a:	61fb      	str	r3, [r7, #28]
 801284c:	e028      	b.n	80128a0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801284e:	693b      	ldr	r3, [r7, #16]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d025      	beq.n	80128a0 <osMessageQueuePut+0xb0>
 8012854:	4b15      	ldr	r3, [pc, #84]	@ (80128ac <osMessageQueuePut+0xbc>)
 8012856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801285a:	601a      	str	r2, [r3, #0]
 801285c:	f3bf 8f4f 	dsb	sy
 8012860:	f3bf 8f6f 	isb	sy
 8012864:	e01c      	b.n	80128a0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012866:	69bb      	ldr	r3, [r7, #24]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d002      	beq.n	8012872 <osMessageQueuePut+0x82>
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d103      	bne.n	801287a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8012872:	f06f 0303 	mvn.w	r3, #3
 8012876:	61fb      	str	r3, [r7, #28]
 8012878:	e012      	b.n	80128a0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801287a:	2300      	movs	r3, #0
 801287c:	683a      	ldr	r2, [r7, #0]
 801287e:	68b9      	ldr	r1, [r7, #8]
 8012880:	69b8      	ldr	r0, [r7, #24]
 8012882:	f000 fccb 	bl	801321c <xQueueGenericSend>
 8012886:	4603      	mov	r3, r0
 8012888:	2b01      	cmp	r3, #1
 801288a:	d009      	beq.n	80128a0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d003      	beq.n	801289a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8012892:	f06f 0301 	mvn.w	r3, #1
 8012896:	61fb      	str	r3, [r7, #28]
 8012898:	e002      	b.n	80128a0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801289a:	f06f 0302 	mvn.w	r3, #2
 801289e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80128a0:	69fb      	ldr	r3, [r7, #28]
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	3720      	adds	r7, #32
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd80      	pop	{r7, pc}
 80128aa:	bf00      	nop
 80128ac:	e000ed04 	.word	0xe000ed04

080128b0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b088      	sub	sp, #32
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	60f8      	str	r0, [r7, #12]
 80128b8:	60b9      	str	r1, [r7, #8]
 80128ba:	607a      	str	r2, [r7, #4]
 80128bc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80128c2:	2300      	movs	r3, #0
 80128c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80128c6:	f3ef 8305 	mrs	r3, IPSR
 80128ca:	617b      	str	r3, [r7, #20]
  return(result);
 80128cc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d028      	beq.n	8012924 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80128d2:	69bb      	ldr	r3, [r7, #24]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d005      	beq.n	80128e4 <osMessageQueueGet+0x34>
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d002      	beq.n	80128e4 <osMessageQueueGet+0x34>
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d003      	beq.n	80128ec <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80128e4:	f06f 0303 	mvn.w	r3, #3
 80128e8:	61fb      	str	r3, [r7, #28]
 80128ea:	e037      	b.n	801295c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80128ec:	2300      	movs	r3, #0
 80128ee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80128f0:	f107 0310 	add.w	r3, r7, #16
 80128f4:	461a      	mov	r2, r3
 80128f6:	68b9      	ldr	r1, [r7, #8]
 80128f8:	69b8      	ldr	r0, [r7, #24]
 80128fa:	f001 f8b1 	bl	8013a60 <xQueueReceiveFromISR>
 80128fe:	4603      	mov	r3, r0
 8012900:	2b01      	cmp	r3, #1
 8012902:	d003      	beq.n	801290c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8012904:	f06f 0302 	mvn.w	r3, #2
 8012908:	61fb      	str	r3, [r7, #28]
 801290a:	e027      	b.n	801295c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 801290c:	693b      	ldr	r3, [r7, #16]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d024      	beq.n	801295c <osMessageQueueGet+0xac>
 8012912:	4b15      	ldr	r3, [pc, #84]	@ (8012968 <osMessageQueueGet+0xb8>)
 8012914:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012918:	601a      	str	r2, [r3, #0]
 801291a:	f3bf 8f4f 	dsb	sy
 801291e:	f3bf 8f6f 	isb	sy
 8012922:	e01b      	b.n	801295c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012924:	69bb      	ldr	r3, [r7, #24]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d002      	beq.n	8012930 <osMessageQueueGet+0x80>
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d103      	bne.n	8012938 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012930:	f06f 0303 	mvn.w	r3, #3
 8012934:	61fb      	str	r3, [r7, #28]
 8012936:	e011      	b.n	801295c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012938:	683a      	ldr	r2, [r7, #0]
 801293a:	68b9      	ldr	r1, [r7, #8]
 801293c:	69b8      	ldr	r0, [r7, #24]
 801293e:	f000 fe9d 	bl	801367c <xQueueReceive>
 8012942:	4603      	mov	r3, r0
 8012944:	2b01      	cmp	r3, #1
 8012946:	d009      	beq.n	801295c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d003      	beq.n	8012956 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801294e:	f06f 0301 	mvn.w	r3, #1
 8012952:	61fb      	str	r3, [r7, #28]
 8012954:	e002      	b.n	801295c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8012956:	f06f 0302 	mvn.w	r3, #2
 801295a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801295c:	69fb      	ldr	r3, [r7, #28]
}
 801295e:	4618      	mov	r0, r3
 8012960:	3720      	adds	r7, #32
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}
 8012966:	bf00      	nop
 8012968:	e000ed04 	.word	0xe000ed04

0801296c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801296c:	b480      	push	{r7}
 801296e:	b085      	sub	sp, #20
 8012970:	af00      	add	r7, sp, #0
 8012972:	60f8      	str	r0, [r7, #12]
 8012974:	60b9      	str	r1, [r7, #8]
 8012976:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	4a07      	ldr	r2, [pc, #28]	@ (8012998 <vApplicationGetIdleTaskMemory+0x2c>)
 801297c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801297e:	68bb      	ldr	r3, [r7, #8]
 8012980:	4a06      	ldr	r2, [pc, #24]	@ (801299c <vApplicationGetIdleTaskMemory+0x30>)
 8012982:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	2280      	movs	r2, #128	@ 0x80
 8012988:	601a      	str	r2, [r3, #0]
}
 801298a:	bf00      	nop
 801298c:	3714      	adds	r7, #20
 801298e:	46bd      	mov	sp, r7
 8012990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012994:	4770      	bx	lr
 8012996:	bf00      	nop
 8012998:	24000a7c 	.word	0x24000a7c
 801299c:	24000b24 	.word	0x24000b24

080129a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80129a0:	b480      	push	{r7}
 80129a2:	b085      	sub	sp, #20
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	60f8      	str	r0, [r7, #12]
 80129a8:	60b9      	str	r1, [r7, #8]
 80129aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	4a07      	ldr	r2, [pc, #28]	@ (80129cc <vApplicationGetTimerTaskMemory+0x2c>)
 80129b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	4a06      	ldr	r2, [pc, #24]	@ (80129d0 <vApplicationGetTimerTaskMemory+0x30>)
 80129b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80129be:	601a      	str	r2, [r3, #0]
}
 80129c0:	bf00      	nop
 80129c2:	3714      	adds	r7, #20
 80129c4:	46bd      	mov	sp, r7
 80129c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ca:	4770      	bx	lr
 80129cc:	24000d24 	.word	0x24000d24
 80129d0:	24000dcc 	.word	0x24000dcc

080129d4 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b082      	sub	sp, #8
 80129d8:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80129da:	2020      	movs	r0, #32
 80129dc:	f003 fbce 	bl	801617c <pvPortMalloc>
 80129e0:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d00a      	beq.n	80129fe <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	2200      	movs	r2, #0
 80129ec:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	3304      	adds	r3, #4
 80129f2:	4618      	mov	r0, r3
 80129f4:	f000 f9aa 	bl	8012d4c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2200      	movs	r2, #0
 80129fc:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80129fe:	687b      	ldr	r3, [r7, #4]
	}
 8012a00:	4618      	mov	r0, r3
 8012a02:	3708      	adds	r7, #8
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}

08012a08 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b090      	sub	sp, #64	@ 0x40
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	60f8      	str	r0, [r7, #12]
 8012a10:	60b9      	str	r1, [r7, #8]
 8012a12:	607a      	str	r2, [r7, #4]
 8012a14:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8012a1e:	2300      	movs	r3, #0
 8012a20:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d10b      	bne.n	8012a40 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a2c:	f383 8811 	msr	BASEPRI, r3
 8012a30:	f3bf 8f6f 	isb	sy
 8012a34:	f3bf 8f4f 	dsb	sy
 8012a38:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012a3a:	bf00      	nop
 8012a3c:	bf00      	nop
 8012a3e:	e7fd      	b.n	8012a3c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012a46:	d30b      	bcc.n	8012a60 <xEventGroupWaitBits+0x58>
	__asm volatile
 8012a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a4c:	f383 8811 	msr	BASEPRI, r3
 8012a50:	f3bf 8f6f 	isb	sy
 8012a54:	f3bf 8f4f 	dsb	sy
 8012a58:	61fb      	str	r3, [r7, #28]
}
 8012a5a:	bf00      	nop
 8012a5c:	bf00      	nop
 8012a5e:	e7fd      	b.n	8012a5c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8012a60:	68bb      	ldr	r3, [r7, #8]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d10b      	bne.n	8012a7e <xEventGroupWaitBits+0x76>
	__asm volatile
 8012a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a6a:	f383 8811 	msr	BASEPRI, r3
 8012a6e:	f3bf 8f6f 	isb	sy
 8012a72:	f3bf 8f4f 	dsb	sy
 8012a76:	61bb      	str	r3, [r7, #24]
}
 8012a78:	bf00      	nop
 8012a7a:	bf00      	nop
 8012a7c:	e7fd      	b.n	8012a7a <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012a7e:	f002 f961 	bl	8014d44 <xTaskGetSchedulerState>
 8012a82:	4603      	mov	r3, r0
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d102      	bne.n	8012a8e <xEventGroupWaitBits+0x86>
 8012a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d101      	bne.n	8012a92 <xEventGroupWaitBits+0x8a>
 8012a8e:	2301      	movs	r3, #1
 8012a90:	e000      	b.n	8012a94 <xEventGroupWaitBits+0x8c>
 8012a92:	2300      	movs	r3, #0
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d10b      	bne.n	8012ab0 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8012a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a9c:	f383 8811 	msr	BASEPRI, r3
 8012aa0:	f3bf 8f6f 	isb	sy
 8012aa4:	f3bf 8f4f 	dsb	sy
 8012aa8:	617b      	str	r3, [r7, #20]
}
 8012aaa:	bf00      	nop
 8012aac:	bf00      	nop
 8012aae:	e7fd      	b.n	8012aac <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8012ab0:	f001 fc90 	bl	80143d4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8012ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8012aba:	683a      	ldr	r2, [r7, #0]
 8012abc:	68b9      	ldr	r1, [r7, #8]
 8012abe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012ac0:	f000 f90d 	bl	8012cde <prvTestWaitCondition>
 8012ac4:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8012ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d00e      	beq.n	8012aea <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8012acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d028      	beq.n	8012b2c <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012adc:	681a      	ldr	r2, [r3, #0]
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	43db      	mvns	r3, r3
 8012ae2:	401a      	ands	r2, r3
 8012ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ae6:	601a      	str	r2, [r3, #0]
 8012ae8:	e020      	b.n	8012b2c <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8012aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d104      	bne.n	8012afa <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8012af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8012af4:	2301      	movs	r3, #1
 8012af6:	633b      	str	r3, [r7, #48]	@ 0x30
 8012af8:	e018      	b.n	8012b2c <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d003      	beq.n	8012b08 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8012b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8012b06:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d003      	beq.n	8012b16 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8012b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8012b14:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8012b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b18:	1d18      	adds	r0, r3, #4
 8012b1a:	68ba      	ldr	r2, [r7, #8]
 8012b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b1e:	4313      	orrs	r3, r2
 8012b20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012b22:	4619      	mov	r1, r3
 8012b24:	f001 fe6a 	bl	80147fc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8012b28:	2300      	movs	r3, #0
 8012b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8012b2c:	f001 fc60 	bl	80143f0 <xTaskResumeAll>
 8012b30:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8012b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d031      	beq.n	8012b9c <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8012b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d107      	bne.n	8012b4e <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8012b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8012ba8 <xEventGroupWaitBits+0x1a0>)
 8012b40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012b44:	601a      	str	r2, [r3, #0]
 8012b46:	f3bf 8f4f 	dsb	sy
 8012b4a:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8012b4e:	f002 fa73 	bl	8015038 <uxTaskResetEventItemValue>
 8012b52:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8012b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d11a      	bne.n	8012b94 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8012b5e:	f003 f9eb 	bl	8015f38 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8012b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8012b68:	683a      	ldr	r2, [r7, #0]
 8012b6a:	68b9      	ldr	r1, [r7, #8]
 8012b6c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012b6e:	f000 f8b6 	bl	8012cde <prvTestWaitCondition>
 8012b72:	4603      	mov	r3, r0
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d009      	beq.n	8012b8c <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d006      	beq.n	8012b8c <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b80:	681a      	ldr	r2, [r3, #0]
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	43db      	mvns	r3, r3
 8012b86:	401a      	ands	r2, r3
 8012b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b8a:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8012b90:	f003 fa04 	bl	8015f9c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b96:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8012b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	3740      	adds	r7, #64	@ 0x40
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}
 8012ba6:	bf00      	nop
 8012ba8:	e000ed04 	.word	0xe000ed04

08012bac <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b08e      	sub	sp, #56	@ 0x38
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
 8012bb4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d10b      	bne.n	8012be0 <xEventGroupSetBits+0x34>
	__asm volatile
 8012bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bcc:	f383 8811 	msr	BASEPRI, r3
 8012bd0:	f3bf 8f6f 	isb	sy
 8012bd4:	f3bf 8f4f 	dsb	sy
 8012bd8:	613b      	str	r3, [r7, #16]
}
 8012bda:	bf00      	nop
 8012bdc:	bf00      	nop
 8012bde:	e7fd      	b.n	8012bdc <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012be6:	d30b      	bcc.n	8012c00 <xEventGroupSetBits+0x54>
	__asm volatile
 8012be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bec:	f383 8811 	msr	BASEPRI, r3
 8012bf0:	f3bf 8f6f 	isb	sy
 8012bf4:	f3bf 8f4f 	dsb	sy
 8012bf8:	60fb      	str	r3, [r7, #12]
}
 8012bfa:	bf00      	nop
 8012bfc:	bf00      	nop
 8012bfe:	e7fd      	b.n	8012bfc <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8012c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c02:	3304      	adds	r3, #4
 8012c04:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c08:	3308      	adds	r3, #8
 8012c0a:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8012c0c:	f001 fbe2 	bl	80143d4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8012c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c12:	68db      	ldr	r3, [r3, #12]
 8012c14:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8012c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c18:	681a      	ldr	r2, [r3, #0]
 8012c1a:	683b      	ldr	r3, [r7, #0]
 8012c1c:	431a      	orrs	r2, r3
 8012c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c20:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8012c22:	e03c      	b.n	8012c9e <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8012c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c26:	685b      	ldr	r3, [r3, #4]
 8012c28:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8012c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8012c30:	2300      	movs	r3, #0
 8012c32:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8012c34:	69bb      	ldr	r3, [r7, #24]
 8012c36:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8012c3a:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012c3c:	69bb      	ldr	r3, [r7, #24]
 8012c3e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012c42:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d108      	bne.n	8012c60 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8012c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c50:	681a      	ldr	r2, [r3, #0]
 8012c52:	69bb      	ldr	r3, [r7, #24]
 8012c54:	4013      	ands	r3, r2
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d00b      	beq.n	8012c72 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8012c5a:	2301      	movs	r3, #1
 8012c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012c5e:	e008      	b.n	8012c72 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8012c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c62:	681a      	ldr	r2, [r3, #0]
 8012c64:	69bb      	ldr	r3, [r7, #24]
 8012c66:	4013      	ands	r3, r2
 8012c68:	69ba      	ldr	r2, [r7, #24]
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d101      	bne.n	8012c72 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8012c6e:	2301      	movs	r3, #1
 8012c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8012c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d010      	beq.n	8012c9a <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8012c78:	697b      	ldr	r3, [r7, #20]
 8012c7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d003      	beq.n	8012c8a <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8012c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012c84:	69bb      	ldr	r3, [r7, #24]
 8012c86:	4313      	orrs	r3, r2
 8012c88:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8012c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8012c92:	4619      	mov	r1, r3
 8012c94:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8012c96:	f001 fe7f 	bl	8014998 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8012c9a:	69fb      	ldr	r3, [r7, #28]
 8012c9c:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8012c9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012ca0:	6a3b      	ldr	r3, [r7, #32]
 8012ca2:	429a      	cmp	r2, r3
 8012ca4:	d1be      	bne.n	8012c24 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8012ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ca8:	681a      	ldr	r2, [r3, #0]
 8012caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cac:	43db      	mvns	r3, r3
 8012cae:	401a      	ands	r2, r3
 8012cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cb2:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8012cb4:	f001 fb9c 	bl	80143f0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8012cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cba:	681b      	ldr	r3, [r3, #0]
}
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	3738      	adds	r7, #56	@ 0x38
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	bd80      	pop	{r7, pc}

08012cc4 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b082      	sub	sp, #8
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
 8012ccc:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8012cce:	6839      	ldr	r1, [r7, #0]
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f7ff ff6b 	bl	8012bac <xEventGroupSetBits>
}
 8012cd6:	bf00      	nop
 8012cd8:	3708      	adds	r7, #8
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bd80      	pop	{r7, pc}

08012cde <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8012cde:	b480      	push	{r7}
 8012ce0:	b087      	sub	sp, #28
 8012ce2:	af00      	add	r7, sp, #0
 8012ce4:	60f8      	str	r0, [r7, #12]
 8012ce6:	60b9      	str	r1, [r7, #8]
 8012ce8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8012cea:	2300      	movs	r3, #0
 8012cec:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d107      	bne.n	8012d04 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8012cf4:	68fa      	ldr	r2, [r7, #12]
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	4013      	ands	r3, r2
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d00a      	beq.n	8012d14 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012cfe:	2301      	movs	r3, #1
 8012d00:	617b      	str	r3, [r7, #20]
 8012d02:	e007      	b.n	8012d14 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8012d04:	68fa      	ldr	r2, [r7, #12]
 8012d06:	68bb      	ldr	r3, [r7, #8]
 8012d08:	4013      	ands	r3, r2
 8012d0a:	68ba      	ldr	r2, [r7, #8]
 8012d0c:	429a      	cmp	r2, r3
 8012d0e:	d101      	bne.n	8012d14 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012d10:	2301      	movs	r3, #1
 8012d12:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8012d14:	697b      	ldr	r3, [r7, #20]
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	371c      	adds	r7, #28
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d20:	4770      	bx	lr
	...

08012d24 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b086      	sub	sp, #24
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	60f8      	str	r0, [r7, #12]
 8012d2c:	60b9      	str	r1, [r7, #8]
 8012d2e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	68ba      	ldr	r2, [r7, #8]
 8012d34:	68f9      	ldr	r1, [r7, #12]
 8012d36:	4804      	ldr	r0, [pc, #16]	@ (8012d48 <xEventGroupSetBitsFromISR+0x24>)
 8012d38:	f002 ffaa 	bl	8015c90 <xTimerPendFunctionCallFromISR>
 8012d3c:	6178      	str	r0, [r7, #20]

		return xReturn;
 8012d3e:	697b      	ldr	r3, [r7, #20]
	}
 8012d40:	4618      	mov	r0, r3
 8012d42:	3718      	adds	r7, #24
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd80      	pop	{r7, pc}
 8012d48:	08012cc5 	.word	0x08012cc5

08012d4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012d4c:	b480      	push	{r7}
 8012d4e:	b083      	sub	sp, #12
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f103 0208 	add.w	r2, r3, #8
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012d64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	f103 0208 	add.w	r2, r3, #8
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	f103 0208 	add.w	r2, r3, #8
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012d80:	bf00      	nop
 8012d82:	370c      	adds	r7, #12
 8012d84:	46bd      	mov	sp, r7
 8012d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8a:	4770      	bx	lr

08012d8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012d8c:	b480      	push	{r7}
 8012d8e:	b083      	sub	sp, #12
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	2200      	movs	r2, #0
 8012d98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012d9a:	bf00      	nop
 8012d9c:	370c      	adds	r7, #12
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da4:	4770      	bx	lr

08012da6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012da6:	b480      	push	{r7}
 8012da8:	b085      	sub	sp, #20
 8012daa:	af00      	add	r7, sp, #0
 8012dac:	6078      	str	r0, [r7, #4]
 8012dae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	685b      	ldr	r3, [r3, #4]
 8012db4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	68fa      	ldr	r2, [r7, #12]
 8012dba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	689a      	ldr	r2, [r3, #8]
 8012dc0:	683b      	ldr	r3, [r7, #0]
 8012dc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	689b      	ldr	r3, [r3, #8]
 8012dc8:	683a      	ldr	r2, [r7, #0]
 8012dca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	683a      	ldr	r2, [r7, #0]
 8012dd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	687a      	ldr	r2, [r7, #4]
 8012dd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	1c5a      	adds	r2, r3, #1
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	601a      	str	r2, [r3, #0]
}
 8012de2:	bf00      	nop
 8012de4:	3714      	adds	r7, #20
 8012de6:	46bd      	mov	sp, r7
 8012de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dec:	4770      	bx	lr

08012dee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012dee:	b480      	push	{r7}
 8012df0:	b085      	sub	sp, #20
 8012df2:	af00      	add	r7, sp, #0
 8012df4:	6078      	str	r0, [r7, #4]
 8012df6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012dfe:	68bb      	ldr	r3, [r7, #8]
 8012e00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012e04:	d103      	bne.n	8012e0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	691b      	ldr	r3, [r3, #16]
 8012e0a:	60fb      	str	r3, [r7, #12]
 8012e0c:	e00c      	b.n	8012e28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	3308      	adds	r3, #8
 8012e12:	60fb      	str	r3, [r7, #12]
 8012e14:	e002      	b.n	8012e1c <vListInsert+0x2e>
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	685b      	ldr	r3, [r3, #4]
 8012e1a:	60fb      	str	r3, [r7, #12]
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	685b      	ldr	r3, [r3, #4]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	68ba      	ldr	r2, [r7, #8]
 8012e24:	429a      	cmp	r2, r3
 8012e26:	d2f6      	bcs.n	8012e16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	685a      	ldr	r2, [r3, #4]
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012e30:	683b      	ldr	r3, [r7, #0]
 8012e32:	685b      	ldr	r3, [r3, #4]
 8012e34:	683a      	ldr	r2, [r7, #0]
 8012e36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	68fa      	ldr	r2, [r7, #12]
 8012e3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	683a      	ldr	r2, [r7, #0]
 8012e42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	687a      	ldr	r2, [r7, #4]
 8012e48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	1c5a      	adds	r2, r3, #1
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	601a      	str	r2, [r3, #0]
}
 8012e54:	bf00      	nop
 8012e56:	3714      	adds	r7, #20
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5e:	4770      	bx	lr

08012e60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012e60:	b480      	push	{r7}
 8012e62:	b085      	sub	sp, #20
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	691b      	ldr	r3, [r3, #16]
 8012e6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	685b      	ldr	r3, [r3, #4]
 8012e72:	687a      	ldr	r2, [r7, #4]
 8012e74:	6892      	ldr	r2, [r2, #8]
 8012e76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	689b      	ldr	r3, [r3, #8]
 8012e7c:	687a      	ldr	r2, [r7, #4]
 8012e7e:	6852      	ldr	r2, [r2, #4]
 8012e80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	685b      	ldr	r3, [r3, #4]
 8012e86:	687a      	ldr	r2, [r7, #4]
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d103      	bne.n	8012e94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	689a      	ldr	r2, [r3, #8]
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	2200      	movs	r2, #0
 8012e98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	1e5a      	subs	r2, r3, #1
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	681b      	ldr	r3, [r3, #0]
}
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	3714      	adds	r7, #20
 8012eac:	46bd      	mov	sp, r7
 8012eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb2:	4770      	bx	lr

08012eb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b084      	sub	sp, #16
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
 8012ebc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d10b      	bne.n	8012ee0 <xQueueGenericReset+0x2c>
	__asm volatile
 8012ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ecc:	f383 8811 	msr	BASEPRI, r3
 8012ed0:	f3bf 8f6f 	isb	sy
 8012ed4:	f3bf 8f4f 	dsb	sy
 8012ed8:	60bb      	str	r3, [r7, #8]
}
 8012eda:	bf00      	nop
 8012edc:	bf00      	nop
 8012ede:	e7fd      	b.n	8012edc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012ee0:	f003 f82a 	bl	8015f38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	681a      	ldr	r2, [r3, #0]
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012eec:	68f9      	ldr	r1, [r7, #12]
 8012eee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012ef0:	fb01 f303 	mul.w	r3, r1, r3
 8012ef4:	441a      	add	r2, r3
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	2200      	movs	r2, #0
 8012efe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	681a      	ldr	r2, [r3, #0]
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	681a      	ldr	r2, [r3, #0]
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f10:	3b01      	subs	r3, #1
 8012f12:	68f9      	ldr	r1, [r7, #12]
 8012f14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012f16:	fb01 f303 	mul.w	r3, r1, r3
 8012f1a:	441a      	add	r2, r3
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	22ff      	movs	r2, #255	@ 0xff
 8012f24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	22ff      	movs	r2, #255	@ 0xff
 8012f2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012f30:	683b      	ldr	r3, [r7, #0]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d114      	bne.n	8012f60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	691b      	ldr	r3, [r3, #16]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d01a      	beq.n	8012f74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	3310      	adds	r3, #16
 8012f42:	4618      	mov	r0, r3
 8012f44:	f001 fcc4 	bl	80148d0 <xTaskRemoveFromEventList>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d012      	beq.n	8012f74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8012f84 <xQueueGenericReset+0xd0>)
 8012f50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012f54:	601a      	str	r2, [r3, #0]
 8012f56:	f3bf 8f4f 	dsb	sy
 8012f5a:	f3bf 8f6f 	isb	sy
 8012f5e:	e009      	b.n	8012f74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	3310      	adds	r3, #16
 8012f64:	4618      	mov	r0, r3
 8012f66:	f7ff fef1 	bl	8012d4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	3324      	adds	r3, #36	@ 0x24
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f7ff feec 	bl	8012d4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012f74:	f003 f812 	bl	8015f9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012f78:	2301      	movs	r3, #1
}
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	3710      	adds	r7, #16
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bd80      	pop	{r7, pc}
 8012f82:	bf00      	nop
 8012f84:	e000ed04 	.word	0xe000ed04

08012f88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b08e      	sub	sp, #56	@ 0x38
 8012f8c:	af02      	add	r7, sp, #8
 8012f8e:	60f8      	str	r0, [r7, #12]
 8012f90:	60b9      	str	r1, [r7, #8]
 8012f92:	607a      	str	r2, [r7, #4]
 8012f94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d10b      	bne.n	8012fb4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8012f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fa0:	f383 8811 	msr	BASEPRI, r3
 8012fa4:	f3bf 8f6f 	isb	sy
 8012fa8:	f3bf 8f4f 	dsb	sy
 8012fac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012fae:	bf00      	nop
 8012fb0:	bf00      	nop
 8012fb2:	e7fd      	b.n	8012fb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d10b      	bne.n	8012fd2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8012fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fbe:	f383 8811 	msr	BASEPRI, r3
 8012fc2:	f3bf 8f6f 	isb	sy
 8012fc6:	f3bf 8f4f 	dsb	sy
 8012fca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012fcc:	bf00      	nop
 8012fce:	bf00      	nop
 8012fd0:	e7fd      	b.n	8012fce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d002      	beq.n	8012fde <xQueueGenericCreateStatic+0x56>
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d001      	beq.n	8012fe2 <xQueueGenericCreateStatic+0x5a>
 8012fde:	2301      	movs	r3, #1
 8012fe0:	e000      	b.n	8012fe4 <xQueueGenericCreateStatic+0x5c>
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d10b      	bne.n	8013000 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8012fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fec:	f383 8811 	msr	BASEPRI, r3
 8012ff0:	f3bf 8f6f 	isb	sy
 8012ff4:	f3bf 8f4f 	dsb	sy
 8012ff8:	623b      	str	r3, [r7, #32]
}
 8012ffa:	bf00      	nop
 8012ffc:	bf00      	nop
 8012ffe:	e7fd      	b.n	8012ffc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d102      	bne.n	801300c <xQueueGenericCreateStatic+0x84>
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d101      	bne.n	8013010 <xQueueGenericCreateStatic+0x88>
 801300c:	2301      	movs	r3, #1
 801300e:	e000      	b.n	8013012 <xQueueGenericCreateStatic+0x8a>
 8013010:	2300      	movs	r3, #0
 8013012:	2b00      	cmp	r3, #0
 8013014:	d10b      	bne.n	801302e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8013016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801301a:	f383 8811 	msr	BASEPRI, r3
 801301e:	f3bf 8f6f 	isb	sy
 8013022:	f3bf 8f4f 	dsb	sy
 8013026:	61fb      	str	r3, [r7, #28]
}
 8013028:	bf00      	nop
 801302a:	bf00      	nop
 801302c:	e7fd      	b.n	801302a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801302e:	2350      	movs	r3, #80	@ 0x50
 8013030:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013032:	697b      	ldr	r3, [r7, #20]
 8013034:	2b50      	cmp	r3, #80	@ 0x50
 8013036:	d00b      	beq.n	8013050 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8013038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801303c:	f383 8811 	msr	BASEPRI, r3
 8013040:	f3bf 8f6f 	isb	sy
 8013044:	f3bf 8f4f 	dsb	sy
 8013048:	61bb      	str	r3, [r7, #24]
}
 801304a:	bf00      	nop
 801304c:	bf00      	nop
 801304e:	e7fd      	b.n	801304c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013050:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013052:	683b      	ldr	r3, [r7, #0]
 8013054:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8013056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013058:	2b00      	cmp	r3, #0
 801305a:	d00d      	beq.n	8013078 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801305c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801305e:	2201      	movs	r2, #1
 8013060:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013064:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8013068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801306a:	9300      	str	r3, [sp, #0]
 801306c:	4613      	mov	r3, r2
 801306e:	687a      	ldr	r2, [r7, #4]
 8013070:	68b9      	ldr	r1, [r7, #8]
 8013072:	68f8      	ldr	r0, [r7, #12]
 8013074:	f000 f840 	bl	80130f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801307a:	4618      	mov	r0, r3
 801307c:	3730      	adds	r7, #48	@ 0x30
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}

08013082 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013082:	b580      	push	{r7, lr}
 8013084:	b08a      	sub	sp, #40	@ 0x28
 8013086:	af02      	add	r7, sp, #8
 8013088:	60f8      	str	r0, [r7, #12]
 801308a:	60b9      	str	r1, [r7, #8]
 801308c:	4613      	mov	r3, r2
 801308e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d10b      	bne.n	80130ae <xQueueGenericCreate+0x2c>
	__asm volatile
 8013096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801309a:	f383 8811 	msr	BASEPRI, r3
 801309e:	f3bf 8f6f 	isb	sy
 80130a2:	f3bf 8f4f 	dsb	sy
 80130a6:	613b      	str	r3, [r7, #16]
}
 80130a8:	bf00      	nop
 80130aa:	bf00      	nop
 80130ac:	e7fd      	b.n	80130aa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	68ba      	ldr	r2, [r7, #8]
 80130b2:	fb02 f303 	mul.w	r3, r2, r3
 80130b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80130b8:	69fb      	ldr	r3, [r7, #28]
 80130ba:	3350      	adds	r3, #80	@ 0x50
 80130bc:	4618      	mov	r0, r3
 80130be:	f003 f85d 	bl	801617c <pvPortMalloc>
 80130c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80130c4:	69bb      	ldr	r3, [r7, #24]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d011      	beq.n	80130ee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80130ca:	69bb      	ldr	r3, [r7, #24]
 80130cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	3350      	adds	r3, #80	@ 0x50
 80130d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80130d4:	69bb      	ldr	r3, [r7, #24]
 80130d6:	2200      	movs	r2, #0
 80130d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80130dc:	79fa      	ldrb	r2, [r7, #7]
 80130de:	69bb      	ldr	r3, [r7, #24]
 80130e0:	9300      	str	r3, [sp, #0]
 80130e2:	4613      	mov	r3, r2
 80130e4:	697a      	ldr	r2, [r7, #20]
 80130e6:	68b9      	ldr	r1, [r7, #8]
 80130e8:	68f8      	ldr	r0, [r7, #12]
 80130ea:	f000 f805 	bl	80130f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80130ee:	69bb      	ldr	r3, [r7, #24]
	}
 80130f0:	4618      	mov	r0, r3
 80130f2:	3720      	adds	r7, #32
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}

080130f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b084      	sub	sp, #16
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	60f8      	str	r0, [r7, #12]
 8013100:	60b9      	str	r1, [r7, #8]
 8013102:	607a      	str	r2, [r7, #4]
 8013104:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d103      	bne.n	8013114 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801310c:	69bb      	ldr	r3, [r7, #24]
 801310e:	69ba      	ldr	r2, [r7, #24]
 8013110:	601a      	str	r2, [r3, #0]
 8013112:	e002      	b.n	801311a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013114:	69bb      	ldr	r3, [r7, #24]
 8013116:	687a      	ldr	r2, [r7, #4]
 8013118:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801311a:	69bb      	ldr	r3, [r7, #24]
 801311c:	68fa      	ldr	r2, [r7, #12]
 801311e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013120:	69bb      	ldr	r3, [r7, #24]
 8013122:	68ba      	ldr	r2, [r7, #8]
 8013124:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013126:	2101      	movs	r1, #1
 8013128:	69b8      	ldr	r0, [r7, #24]
 801312a:	f7ff fec3 	bl	8012eb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801312e:	69bb      	ldr	r3, [r7, #24]
 8013130:	78fa      	ldrb	r2, [r7, #3]
 8013132:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013136:	bf00      	nop
 8013138:	3710      	adds	r7, #16
 801313a:	46bd      	mov	sp, r7
 801313c:	bd80      	pop	{r7, pc}

0801313e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801313e:	b580      	push	{r7, lr}
 8013140:	b08a      	sub	sp, #40	@ 0x28
 8013142:	af02      	add	r7, sp, #8
 8013144:	60f8      	str	r0, [r7, #12]
 8013146:	60b9      	str	r1, [r7, #8]
 8013148:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d10b      	bne.n	8013168 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8013150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013154:	f383 8811 	msr	BASEPRI, r3
 8013158:	f3bf 8f6f 	isb	sy
 801315c:	f3bf 8f4f 	dsb	sy
 8013160:	61bb      	str	r3, [r7, #24]
}
 8013162:	bf00      	nop
 8013164:	bf00      	nop
 8013166:	e7fd      	b.n	8013164 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8013168:	68ba      	ldr	r2, [r7, #8]
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	429a      	cmp	r2, r3
 801316e:	d90b      	bls.n	8013188 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8013170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013174:	f383 8811 	msr	BASEPRI, r3
 8013178:	f3bf 8f6f 	isb	sy
 801317c:	f3bf 8f4f 	dsb	sy
 8013180:	617b      	str	r3, [r7, #20]
}
 8013182:	bf00      	nop
 8013184:	bf00      	nop
 8013186:	e7fd      	b.n	8013184 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013188:	2302      	movs	r3, #2
 801318a:	9300      	str	r3, [sp, #0]
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	2200      	movs	r2, #0
 8013190:	2100      	movs	r1, #0
 8013192:	68f8      	ldr	r0, [r7, #12]
 8013194:	f7ff fef8 	bl	8012f88 <xQueueGenericCreateStatic>
 8013198:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801319a:	69fb      	ldr	r3, [r7, #28]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d002      	beq.n	80131a6 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80131a0:	69fb      	ldr	r3, [r7, #28]
 80131a2:	68ba      	ldr	r2, [r7, #8]
 80131a4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80131a6:	69fb      	ldr	r3, [r7, #28]
	}
 80131a8:	4618      	mov	r0, r3
 80131aa:	3720      	adds	r7, #32
 80131ac:	46bd      	mov	sp, r7
 80131ae:	bd80      	pop	{r7, pc}

080131b0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b086      	sub	sp, #24
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
 80131b8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d10b      	bne.n	80131d8 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80131c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131c4:	f383 8811 	msr	BASEPRI, r3
 80131c8:	f3bf 8f6f 	isb	sy
 80131cc:	f3bf 8f4f 	dsb	sy
 80131d0:	613b      	str	r3, [r7, #16]
}
 80131d2:	bf00      	nop
 80131d4:	bf00      	nop
 80131d6:	e7fd      	b.n	80131d4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80131d8:	683a      	ldr	r2, [r7, #0]
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	429a      	cmp	r2, r3
 80131de:	d90b      	bls.n	80131f8 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80131e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131e4:	f383 8811 	msr	BASEPRI, r3
 80131e8:	f3bf 8f6f 	isb	sy
 80131ec:	f3bf 8f4f 	dsb	sy
 80131f0:	60fb      	str	r3, [r7, #12]
}
 80131f2:	bf00      	nop
 80131f4:	bf00      	nop
 80131f6:	e7fd      	b.n	80131f4 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80131f8:	2202      	movs	r2, #2
 80131fa:	2100      	movs	r1, #0
 80131fc:	6878      	ldr	r0, [r7, #4]
 80131fe:	f7ff ff40 	bl	8013082 <xQueueGenericCreate>
 8013202:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8013204:	697b      	ldr	r3, [r7, #20]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d002      	beq.n	8013210 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801320a:	697b      	ldr	r3, [r7, #20]
 801320c:	683a      	ldr	r2, [r7, #0]
 801320e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013210:	697b      	ldr	r3, [r7, #20]
	}
 8013212:	4618      	mov	r0, r3
 8013214:	3718      	adds	r7, #24
 8013216:	46bd      	mov	sp, r7
 8013218:	bd80      	pop	{r7, pc}
	...

0801321c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b08e      	sub	sp, #56	@ 0x38
 8013220:	af00      	add	r7, sp, #0
 8013222:	60f8      	str	r0, [r7, #12]
 8013224:	60b9      	str	r1, [r7, #8]
 8013226:	607a      	str	r2, [r7, #4]
 8013228:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801322a:	2300      	movs	r3, #0
 801322c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013234:	2b00      	cmp	r3, #0
 8013236:	d10b      	bne.n	8013250 <xQueueGenericSend+0x34>
	__asm volatile
 8013238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801323c:	f383 8811 	msr	BASEPRI, r3
 8013240:	f3bf 8f6f 	isb	sy
 8013244:	f3bf 8f4f 	dsb	sy
 8013248:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801324a:	bf00      	nop
 801324c:	bf00      	nop
 801324e:	e7fd      	b.n	801324c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013250:	68bb      	ldr	r3, [r7, #8]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d103      	bne.n	801325e <xQueueGenericSend+0x42>
 8013256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801325a:	2b00      	cmp	r3, #0
 801325c:	d101      	bne.n	8013262 <xQueueGenericSend+0x46>
 801325e:	2301      	movs	r3, #1
 8013260:	e000      	b.n	8013264 <xQueueGenericSend+0x48>
 8013262:	2300      	movs	r3, #0
 8013264:	2b00      	cmp	r3, #0
 8013266:	d10b      	bne.n	8013280 <xQueueGenericSend+0x64>
	__asm volatile
 8013268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801326c:	f383 8811 	msr	BASEPRI, r3
 8013270:	f3bf 8f6f 	isb	sy
 8013274:	f3bf 8f4f 	dsb	sy
 8013278:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801327a:	bf00      	nop
 801327c:	bf00      	nop
 801327e:	e7fd      	b.n	801327c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	2b02      	cmp	r3, #2
 8013284:	d103      	bne.n	801328e <xQueueGenericSend+0x72>
 8013286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801328a:	2b01      	cmp	r3, #1
 801328c:	d101      	bne.n	8013292 <xQueueGenericSend+0x76>
 801328e:	2301      	movs	r3, #1
 8013290:	e000      	b.n	8013294 <xQueueGenericSend+0x78>
 8013292:	2300      	movs	r3, #0
 8013294:	2b00      	cmp	r3, #0
 8013296:	d10b      	bne.n	80132b0 <xQueueGenericSend+0x94>
	__asm volatile
 8013298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801329c:	f383 8811 	msr	BASEPRI, r3
 80132a0:	f3bf 8f6f 	isb	sy
 80132a4:	f3bf 8f4f 	dsb	sy
 80132a8:	623b      	str	r3, [r7, #32]
}
 80132aa:	bf00      	nop
 80132ac:	bf00      	nop
 80132ae:	e7fd      	b.n	80132ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80132b0:	f001 fd48 	bl	8014d44 <xTaskGetSchedulerState>
 80132b4:	4603      	mov	r3, r0
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d102      	bne.n	80132c0 <xQueueGenericSend+0xa4>
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d101      	bne.n	80132c4 <xQueueGenericSend+0xa8>
 80132c0:	2301      	movs	r3, #1
 80132c2:	e000      	b.n	80132c6 <xQueueGenericSend+0xaa>
 80132c4:	2300      	movs	r3, #0
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d10b      	bne.n	80132e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80132ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132ce:	f383 8811 	msr	BASEPRI, r3
 80132d2:	f3bf 8f6f 	isb	sy
 80132d6:	f3bf 8f4f 	dsb	sy
 80132da:	61fb      	str	r3, [r7, #28]
}
 80132dc:	bf00      	nop
 80132de:	bf00      	nop
 80132e0:	e7fd      	b.n	80132de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80132e2:	f002 fe29 	bl	8015f38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80132e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80132ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d302      	bcc.n	80132f8 <xQueueGenericSend+0xdc>
 80132f2:	683b      	ldr	r3, [r7, #0]
 80132f4:	2b02      	cmp	r3, #2
 80132f6:	d129      	bne.n	801334c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80132f8:	683a      	ldr	r2, [r7, #0]
 80132fa:	68b9      	ldr	r1, [r7, #8]
 80132fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80132fe:	f000 fc6d 	bl	8013bdc <prvCopyDataToQueue>
 8013302:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013308:	2b00      	cmp	r3, #0
 801330a:	d010      	beq.n	801332e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801330c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801330e:	3324      	adds	r3, #36	@ 0x24
 8013310:	4618      	mov	r0, r3
 8013312:	f001 fadd 	bl	80148d0 <xTaskRemoveFromEventList>
 8013316:	4603      	mov	r3, r0
 8013318:	2b00      	cmp	r3, #0
 801331a:	d013      	beq.n	8013344 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801331c:	4b3f      	ldr	r3, [pc, #252]	@ (801341c <xQueueGenericSend+0x200>)
 801331e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013322:	601a      	str	r2, [r3, #0]
 8013324:	f3bf 8f4f 	dsb	sy
 8013328:	f3bf 8f6f 	isb	sy
 801332c:	e00a      	b.n	8013344 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801332e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013330:	2b00      	cmp	r3, #0
 8013332:	d007      	beq.n	8013344 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013334:	4b39      	ldr	r3, [pc, #228]	@ (801341c <xQueueGenericSend+0x200>)
 8013336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801333a:	601a      	str	r2, [r3, #0]
 801333c:	f3bf 8f4f 	dsb	sy
 8013340:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013344:	f002 fe2a 	bl	8015f9c <vPortExitCritical>
				return pdPASS;
 8013348:	2301      	movs	r3, #1
 801334a:	e063      	b.n	8013414 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d103      	bne.n	801335a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013352:	f002 fe23 	bl	8015f9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013356:	2300      	movs	r3, #0
 8013358:	e05c      	b.n	8013414 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801335a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801335c:	2b00      	cmp	r3, #0
 801335e:	d106      	bne.n	801336e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013360:	f107 0314 	add.w	r3, r7, #20
 8013364:	4618      	mov	r0, r3
 8013366:	f001 fb7b 	bl	8014a60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801336a:	2301      	movs	r3, #1
 801336c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801336e:	f002 fe15 	bl	8015f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013372:	f001 f82f 	bl	80143d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013376:	f002 fddf 	bl	8015f38 <vPortEnterCritical>
 801337a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801337c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013380:	b25b      	sxtb	r3, r3
 8013382:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013386:	d103      	bne.n	8013390 <xQueueGenericSend+0x174>
 8013388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801338a:	2200      	movs	r2, #0
 801338c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013392:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013396:	b25b      	sxtb	r3, r3
 8013398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801339c:	d103      	bne.n	80133a6 <xQueueGenericSend+0x18a>
 801339e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133a0:	2200      	movs	r2, #0
 80133a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80133a6:	f002 fdf9 	bl	8015f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80133aa:	1d3a      	adds	r2, r7, #4
 80133ac:	f107 0314 	add.w	r3, r7, #20
 80133b0:	4611      	mov	r1, r2
 80133b2:	4618      	mov	r0, r3
 80133b4:	f001 fb6a 	bl	8014a8c <xTaskCheckForTimeOut>
 80133b8:	4603      	mov	r3, r0
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d124      	bne.n	8013408 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80133be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80133c0:	f000 fd04 	bl	8013dcc <prvIsQueueFull>
 80133c4:	4603      	mov	r3, r0
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d018      	beq.n	80133fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80133ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133cc:	3310      	adds	r3, #16
 80133ce:	687a      	ldr	r2, [r7, #4]
 80133d0:	4611      	mov	r1, r2
 80133d2:	4618      	mov	r0, r3
 80133d4:	f001 f9ec 	bl	80147b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80133d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80133da:	f000 fc8f 	bl	8013cfc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80133de:	f001 f807 	bl	80143f0 <xTaskResumeAll>
 80133e2:	4603      	mov	r3, r0
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	f47f af7c 	bne.w	80132e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80133ea:	4b0c      	ldr	r3, [pc, #48]	@ (801341c <xQueueGenericSend+0x200>)
 80133ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80133f0:	601a      	str	r2, [r3, #0]
 80133f2:	f3bf 8f4f 	dsb	sy
 80133f6:	f3bf 8f6f 	isb	sy
 80133fa:	e772      	b.n	80132e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80133fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80133fe:	f000 fc7d 	bl	8013cfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013402:	f000 fff5 	bl	80143f0 <xTaskResumeAll>
 8013406:	e76c      	b.n	80132e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013408:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801340a:	f000 fc77 	bl	8013cfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801340e:	f000 ffef 	bl	80143f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013412:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013414:	4618      	mov	r0, r3
 8013416:	3738      	adds	r7, #56	@ 0x38
 8013418:	46bd      	mov	sp, r7
 801341a:	bd80      	pop	{r7, pc}
 801341c:	e000ed04 	.word	0xe000ed04

08013420 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b090      	sub	sp, #64	@ 0x40
 8013424:	af00      	add	r7, sp, #0
 8013426:	60f8      	str	r0, [r7, #12]
 8013428:	60b9      	str	r1, [r7, #8]
 801342a:	607a      	str	r2, [r7, #4]
 801342c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8013432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013434:	2b00      	cmp	r3, #0
 8013436:	d10b      	bne.n	8013450 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8013438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801343c:	f383 8811 	msr	BASEPRI, r3
 8013440:	f3bf 8f6f 	isb	sy
 8013444:	f3bf 8f4f 	dsb	sy
 8013448:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801344a:	bf00      	nop
 801344c:	bf00      	nop
 801344e:	e7fd      	b.n	801344c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013450:	68bb      	ldr	r3, [r7, #8]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d103      	bne.n	801345e <xQueueGenericSendFromISR+0x3e>
 8013456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801345a:	2b00      	cmp	r3, #0
 801345c:	d101      	bne.n	8013462 <xQueueGenericSendFromISR+0x42>
 801345e:	2301      	movs	r3, #1
 8013460:	e000      	b.n	8013464 <xQueueGenericSendFromISR+0x44>
 8013462:	2300      	movs	r3, #0
 8013464:	2b00      	cmp	r3, #0
 8013466:	d10b      	bne.n	8013480 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8013468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801346c:	f383 8811 	msr	BASEPRI, r3
 8013470:	f3bf 8f6f 	isb	sy
 8013474:	f3bf 8f4f 	dsb	sy
 8013478:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801347a:	bf00      	nop
 801347c:	bf00      	nop
 801347e:	e7fd      	b.n	801347c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	2b02      	cmp	r3, #2
 8013484:	d103      	bne.n	801348e <xQueueGenericSendFromISR+0x6e>
 8013486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801348a:	2b01      	cmp	r3, #1
 801348c:	d101      	bne.n	8013492 <xQueueGenericSendFromISR+0x72>
 801348e:	2301      	movs	r3, #1
 8013490:	e000      	b.n	8013494 <xQueueGenericSendFromISR+0x74>
 8013492:	2300      	movs	r3, #0
 8013494:	2b00      	cmp	r3, #0
 8013496:	d10b      	bne.n	80134b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8013498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801349c:	f383 8811 	msr	BASEPRI, r3
 80134a0:	f3bf 8f6f 	isb	sy
 80134a4:	f3bf 8f4f 	dsb	sy
 80134a8:	623b      	str	r3, [r7, #32]
}
 80134aa:	bf00      	nop
 80134ac:	bf00      	nop
 80134ae:	e7fd      	b.n	80134ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80134b0:	f002 fe22 	bl	80160f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80134b4:	f3ef 8211 	mrs	r2, BASEPRI
 80134b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134bc:	f383 8811 	msr	BASEPRI, r3
 80134c0:	f3bf 8f6f 	isb	sy
 80134c4:	f3bf 8f4f 	dsb	sy
 80134c8:	61fa      	str	r2, [r7, #28]
 80134ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80134cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80134ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80134d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80134d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80134d8:	429a      	cmp	r2, r3
 80134da:	d302      	bcc.n	80134e2 <xQueueGenericSendFromISR+0xc2>
 80134dc:	683b      	ldr	r3, [r7, #0]
 80134de:	2b02      	cmp	r3, #2
 80134e0:	d12f      	bne.n	8013542 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80134e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80134e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80134ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80134f2:	683a      	ldr	r2, [r7, #0]
 80134f4:	68b9      	ldr	r1, [r7, #8]
 80134f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80134f8:	f000 fb70 	bl	8013bdc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80134fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8013500:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013504:	d112      	bne.n	801352c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801350a:	2b00      	cmp	r3, #0
 801350c:	d016      	beq.n	801353c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801350e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013510:	3324      	adds	r3, #36	@ 0x24
 8013512:	4618      	mov	r0, r3
 8013514:	f001 f9dc 	bl	80148d0 <xTaskRemoveFromEventList>
 8013518:	4603      	mov	r3, r0
 801351a:	2b00      	cmp	r3, #0
 801351c:	d00e      	beq.n	801353c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d00b      	beq.n	801353c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	2201      	movs	r2, #1
 8013528:	601a      	str	r2, [r3, #0]
 801352a:	e007      	b.n	801353c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801352c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013530:	3301      	adds	r3, #1
 8013532:	b2db      	uxtb	r3, r3
 8013534:	b25a      	sxtb	r2, r3
 8013536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801353c:	2301      	movs	r3, #1
 801353e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8013540:	e001      	b.n	8013546 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013542:	2300      	movs	r3, #0
 8013544:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013548:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013550:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013554:	4618      	mov	r0, r3
 8013556:	3740      	adds	r7, #64	@ 0x40
 8013558:	46bd      	mov	sp, r7
 801355a:	bd80      	pop	{r7, pc}

0801355c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b08e      	sub	sp, #56	@ 0x38
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
 8013564:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801356a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801356c:	2b00      	cmp	r3, #0
 801356e:	d10b      	bne.n	8013588 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8013570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013574:	f383 8811 	msr	BASEPRI, r3
 8013578:	f3bf 8f6f 	isb	sy
 801357c:	f3bf 8f4f 	dsb	sy
 8013580:	623b      	str	r3, [r7, #32]
}
 8013582:	bf00      	nop
 8013584:	bf00      	nop
 8013586:	e7fd      	b.n	8013584 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801358a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801358c:	2b00      	cmp	r3, #0
 801358e:	d00b      	beq.n	80135a8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8013590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013594:	f383 8811 	msr	BASEPRI, r3
 8013598:	f3bf 8f6f 	isb	sy
 801359c:	f3bf 8f4f 	dsb	sy
 80135a0:	61fb      	str	r3, [r7, #28]
}
 80135a2:	bf00      	nop
 80135a4:	bf00      	nop
 80135a6:	e7fd      	b.n	80135a4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80135a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d103      	bne.n	80135b8 <xQueueGiveFromISR+0x5c>
 80135b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135b2:	689b      	ldr	r3, [r3, #8]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d101      	bne.n	80135bc <xQueueGiveFromISR+0x60>
 80135b8:	2301      	movs	r3, #1
 80135ba:	e000      	b.n	80135be <xQueueGiveFromISR+0x62>
 80135bc:	2300      	movs	r3, #0
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d10b      	bne.n	80135da <xQueueGiveFromISR+0x7e>
	__asm volatile
 80135c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135c6:	f383 8811 	msr	BASEPRI, r3
 80135ca:	f3bf 8f6f 	isb	sy
 80135ce:	f3bf 8f4f 	dsb	sy
 80135d2:	61bb      	str	r3, [r7, #24]
}
 80135d4:	bf00      	nop
 80135d6:	bf00      	nop
 80135d8:	e7fd      	b.n	80135d6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80135da:	f002 fd8d 	bl	80160f8 <vPortValidateInterruptPriority>
	__asm volatile
 80135de:	f3ef 8211 	mrs	r2, BASEPRI
 80135e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135e6:	f383 8811 	msr	BASEPRI, r3
 80135ea:	f3bf 8f6f 	isb	sy
 80135ee:	f3bf 8f4f 	dsb	sy
 80135f2:	617a      	str	r2, [r7, #20]
 80135f4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80135f6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80135f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80135fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80135fe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013604:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013606:	429a      	cmp	r2, r3
 8013608:	d22b      	bcs.n	8013662 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801360a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801360c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013610:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013616:	1c5a      	adds	r2, r3, #1
 8013618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801361a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801361c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013620:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013624:	d112      	bne.n	801364c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801362a:	2b00      	cmp	r3, #0
 801362c:	d016      	beq.n	801365c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801362e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013630:	3324      	adds	r3, #36	@ 0x24
 8013632:	4618      	mov	r0, r3
 8013634:	f001 f94c 	bl	80148d0 <xTaskRemoveFromEventList>
 8013638:	4603      	mov	r3, r0
 801363a:	2b00      	cmp	r3, #0
 801363c:	d00e      	beq.n	801365c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d00b      	beq.n	801365c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013644:	683b      	ldr	r3, [r7, #0]
 8013646:	2201      	movs	r2, #1
 8013648:	601a      	str	r2, [r3, #0]
 801364a:	e007      	b.n	801365c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801364c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013650:	3301      	adds	r3, #1
 8013652:	b2db      	uxtb	r3, r3
 8013654:	b25a      	sxtb	r2, r3
 8013656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801365c:	2301      	movs	r3, #1
 801365e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013660:	e001      	b.n	8013666 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013662:	2300      	movs	r3, #0
 8013664:	637b      	str	r3, [r7, #52]	@ 0x34
 8013666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013668:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	f383 8811 	msr	BASEPRI, r3
}
 8013670:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013674:	4618      	mov	r0, r3
 8013676:	3738      	adds	r7, #56	@ 0x38
 8013678:	46bd      	mov	sp, r7
 801367a:	bd80      	pop	{r7, pc}

0801367c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b08c      	sub	sp, #48	@ 0x30
 8013680:	af00      	add	r7, sp, #0
 8013682:	60f8      	str	r0, [r7, #12]
 8013684:	60b9      	str	r1, [r7, #8]
 8013686:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013688:	2300      	movs	r3, #0
 801368a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013692:	2b00      	cmp	r3, #0
 8013694:	d10b      	bne.n	80136ae <xQueueReceive+0x32>
	__asm volatile
 8013696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801369a:	f383 8811 	msr	BASEPRI, r3
 801369e:	f3bf 8f6f 	isb	sy
 80136a2:	f3bf 8f4f 	dsb	sy
 80136a6:	623b      	str	r3, [r7, #32]
}
 80136a8:	bf00      	nop
 80136aa:	bf00      	nop
 80136ac:	e7fd      	b.n	80136aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d103      	bne.n	80136bc <xQueueReceive+0x40>
 80136b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d101      	bne.n	80136c0 <xQueueReceive+0x44>
 80136bc:	2301      	movs	r3, #1
 80136be:	e000      	b.n	80136c2 <xQueueReceive+0x46>
 80136c0:	2300      	movs	r3, #0
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d10b      	bne.n	80136de <xQueueReceive+0x62>
	__asm volatile
 80136c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136ca:	f383 8811 	msr	BASEPRI, r3
 80136ce:	f3bf 8f6f 	isb	sy
 80136d2:	f3bf 8f4f 	dsb	sy
 80136d6:	61fb      	str	r3, [r7, #28]
}
 80136d8:	bf00      	nop
 80136da:	bf00      	nop
 80136dc:	e7fd      	b.n	80136da <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80136de:	f001 fb31 	bl	8014d44 <xTaskGetSchedulerState>
 80136e2:	4603      	mov	r3, r0
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d102      	bne.n	80136ee <xQueueReceive+0x72>
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d101      	bne.n	80136f2 <xQueueReceive+0x76>
 80136ee:	2301      	movs	r3, #1
 80136f0:	e000      	b.n	80136f4 <xQueueReceive+0x78>
 80136f2:	2300      	movs	r3, #0
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d10b      	bne.n	8013710 <xQueueReceive+0x94>
	__asm volatile
 80136f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136fc:	f383 8811 	msr	BASEPRI, r3
 8013700:	f3bf 8f6f 	isb	sy
 8013704:	f3bf 8f4f 	dsb	sy
 8013708:	61bb      	str	r3, [r7, #24]
}
 801370a:	bf00      	nop
 801370c:	bf00      	nop
 801370e:	e7fd      	b.n	801370c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013710:	f002 fc12 	bl	8015f38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013718:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801371c:	2b00      	cmp	r3, #0
 801371e:	d01f      	beq.n	8013760 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013720:	68b9      	ldr	r1, [r7, #8]
 8013722:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013724:	f000 fac4 	bl	8013cb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801372a:	1e5a      	subs	r2, r3, #1
 801372c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801372e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013732:	691b      	ldr	r3, [r3, #16]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d00f      	beq.n	8013758 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801373a:	3310      	adds	r3, #16
 801373c:	4618      	mov	r0, r3
 801373e:	f001 f8c7 	bl	80148d0 <xTaskRemoveFromEventList>
 8013742:	4603      	mov	r3, r0
 8013744:	2b00      	cmp	r3, #0
 8013746:	d007      	beq.n	8013758 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013748:	4b3c      	ldr	r3, [pc, #240]	@ (801383c <xQueueReceive+0x1c0>)
 801374a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801374e:	601a      	str	r2, [r3, #0]
 8013750:	f3bf 8f4f 	dsb	sy
 8013754:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013758:	f002 fc20 	bl	8015f9c <vPortExitCritical>
				return pdPASS;
 801375c:	2301      	movs	r3, #1
 801375e:	e069      	b.n	8013834 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d103      	bne.n	801376e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013766:	f002 fc19 	bl	8015f9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801376a:	2300      	movs	r3, #0
 801376c:	e062      	b.n	8013834 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801376e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013770:	2b00      	cmp	r3, #0
 8013772:	d106      	bne.n	8013782 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013774:	f107 0310 	add.w	r3, r7, #16
 8013778:	4618      	mov	r0, r3
 801377a:	f001 f971 	bl	8014a60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801377e:	2301      	movs	r3, #1
 8013780:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013782:	f002 fc0b 	bl	8015f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013786:	f000 fe25 	bl	80143d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801378a:	f002 fbd5 	bl	8015f38 <vPortEnterCritical>
 801378e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013790:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013794:	b25b      	sxtb	r3, r3
 8013796:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801379a:	d103      	bne.n	80137a4 <xQueueReceive+0x128>
 801379c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801379e:	2200      	movs	r2, #0
 80137a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80137a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80137aa:	b25b      	sxtb	r3, r3
 80137ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80137b0:	d103      	bne.n	80137ba <xQueueReceive+0x13e>
 80137b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137b4:	2200      	movs	r2, #0
 80137b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80137ba:	f002 fbef 	bl	8015f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80137be:	1d3a      	adds	r2, r7, #4
 80137c0:	f107 0310 	add.w	r3, r7, #16
 80137c4:	4611      	mov	r1, r2
 80137c6:	4618      	mov	r0, r3
 80137c8:	f001 f960 	bl	8014a8c <xTaskCheckForTimeOut>
 80137cc:	4603      	mov	r3, r0
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d123      	bne.n	801381a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80137d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80137d4:	f000 fae4 	bl	8013da0 <prvIsQueueEmpty>
 80137d8:	4603      	mov	r3, r0
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d017      	beq.n	801380e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80137de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137e0:	3324      	adds	r3, #36	@ 0x24
 80137e2:	687a      	ldr	r2, [r7, #4]
 80137e4:	4611      	mov	r1, r2
 80137e6:	4618      	mov	r0, r3
 80137e8:	f000 ffe2 	bl	80147b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80137ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80137ee:	f000 fa85 	bl	8013cfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80137f2:	f000 fdfd 	bl	80143f0 <xTaskResumeAll>
 80137f6:	4603      	mov	r3, r0
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d189      	bne.n	8013710 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80137fc:	4b0f      	ldr	r3, [pc, #60]	@ (801383c <xQueueReceive+0x1c0>)
 80137fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013802:	601a      	str	r2, [r3, #0]
 8013804:	f3bf 8f4f 	dsb	sy
 8013808:	f3bf 8f6f 	isb	sy
 801380c:	e780      	b.n	8013710 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801380e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013810:	f000 fa74 	bl	8013cfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013814:	f000 fdec 	bl	80143f0 <xTaskResumeAll>
 8013818:	e77a      	b.n	8013710 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801381a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801381c:	f000 fa6e 	bl	8013cfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013820:	f000 fde6 	bl	80143f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013824:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013826:	f000 fabb 	bl	8013da0 <prvIsQueueEmpty>
 801382a:	4603      	mov	r3, r0
 801382c:	2b00      	cmp	r3, #0
 801382e:	f43f af6f 	beq.w	8013710 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013832:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013834:	4618      	mov	r0, r3
 8013836:	3730      	adds	r7, #48	@ 0x30
 8013838:	46bd      	mov	sp, r7
 801383a:	bd80      	pop	{r7, pc}
 801383c:	e000ed04 	.word	0xe000ed04

08013840 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013840:	b580      	push	{r7, lr}
 8013842:	b08e      	sub	sp, #56	@ 0x38
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
 8013848:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801384a:	2300      	movs	r3, #0
 801384c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013852:	2300      	movs	r3, #0
 8013854:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013858:	2b00      	cmp	r3, #0
 801385a:	d10b      	bne.n	8013874 <xQueueSemaphoreTake+0x34>
	__asm volatile
 801385c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013860:	f383 8811 	msr	BASEPRI, r3
 8013864:	f3bf 8f6f 	isb	sy
 8013868:	f3bf 8f4f 	dsb	sy
 801386c:	623b      	str	r3, [r7, #32]
}
 801386e:	bf00      	nop
 8013870:	bf00      	nop
 8013872:	e7fd      	b.n	8013870 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013878:	2b00      	cmp	r3, #0
 801387a:	d00b      	beq.n	8013894 <xQueueSemaphoreTake+0x54>
	__asm volatile
 801387c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013880:	f383 8811 	msr	BASEPRI, r3
 8013884:	f3bf 8f6f 	isb	sy
 8013888:	f3bf 8f4f 	dsb	sy
 801388c:	61fb      	str	r3, [r7, #28]
}
 801388e:	bf00      	nop
 8013890:	bf00      	nop
 8013892:	e7fd      	b.n	8013890 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013894:	f001 fa56 	bl	8014d44 <xTaskGetSchedulerState>
 8013898:	4603      	mov	r3, r0
 801389a:	2b00      	cmp	r3, #0
 801389c:	d102      	bne.n	80138a4 <xQueueSemaphoreTake+0x64>
 801389e:	683b      	ldr	r3, [r7, #0]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d101      	bne.n	80138a8 <xQueueSemaphoreTake+0x68>
 80138a4:	2301      	movs	r3, #1
 80138a6:	e000      	b.n	80138aa <xQueueSemaphoreTake+0x6a>
 80138a8:	2300      	movs	r3, #0
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d10b      	bne.n	80138c6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80138ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138b2:	f383 8811 	msr	BASEPRI, r3
 80138b6:	f3bf 8f6f 	isb	sy
 80138ba:	f3bf 8f4f 	dsb	sy
 80138be:	61bb      	str	r3, [r7, #24]
}
 80138c0:	bf00      	nop
 80138c2:	bf00      	nop
 80138c4:	e7fd      	b.n	80138c2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80138c6:	f002 fb37 	bl	8015f38 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80138ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80138ce:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80138d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d024      	beq.n	8013920 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80138d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138d8:	1e5a      	subs	r2, r3, #1
 80138da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138dc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80138de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d104      	bne.n	80138f0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80138e6:	f001 fbbf 	bl	8015068 <pvTaskIncrementMutexHeldCount>
 80138ea:	4602      	mov	r2, r0
 80138ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138ee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80138f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138f2:	691b      	ldr	r3, [r3, #16]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d00f      	beq.n	8013918 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80138f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138fa:	3310      	adds	r3, #16
 80138fc:	4618      	mov	r0, r3
 80138fe:	f000 ffe7 	bl	80148d0 <xTaskRemoveFromEventList>
 8013902:	4603      	mov	r3, r0
 8013904:	2b00      	cmp	r3, #0
 8013906:	d007      	beq.n	8013918 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013908:	4b54      	ldr	r3, [pc, #336]	@ (8013a5c <xQueueSemaphoreTake+0x21c>)
 801390a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801390e:	601a      	str	r2, [r3, #0]
 8013910:	f3bf 8f4f 	dsb	sy
 8013914:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013918:	f002 fb40 	bl	8015f9c <vPortExitCritical>
				return pdPASS;
 801391c:	2301      	movs	r3, #1
 801391e:	e098      	b.n	8013a52 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d112      	bne.n	801394c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013928:	2b00      	cmp	r3, #0
 801392a:	d00b      	beq.n	8013944 <xQueueSemaphoreTake+0x104>
	__asm volatile
 801392c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013930:	f383 8811 	msr	BASEPRI, r3
 8013934:	f3bf 8f6f 	isb	sy
 8013938:	f3bf 8f4f 	dsb	sy
 801393c:	617b      	str	r3, [r7, #20]
}
 801393e:	bf00      	nop
 8013940:	bf00      	nop
 8013942:	e7fd      	b.n	8013940 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013944:	f002 fb2a 	bl	8015f9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013948:	2300      	movs	r3, #0
 801394a:	e082      	b.n	8013a52 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 801394c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801394e:	2b00      	cmp	r3, #0
 8013950:	d106      	bne.n	8013960 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013952:	f107 030c 	add.w	r3, r7, #12
 8013956:	4618      	mov	r0, r3
 8013958:	f001 f882 	bl	8014a60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801395c:	2301      	movs	r3, #1
 801395e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013960:	f002 fb1c 	bl	8015f9c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013964:	f000 fd36 	bl	80143d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013968:	f002 fae6 	bl	8015f38 <vPortEnterCritical>
 801396c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801396e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013972:	b25b      	sxtb	r3, r3
 8013974:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013978:	d103      	bne.n	8013982 <xQueueSemaphoreTake+0x142>
 801397a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801397c:	2200      	movs	r2, #0
 801397e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013984:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013988:	b25b      	sxtb	r3, r3
 801398a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801398e:	d103      	bne.n	8013998 <xQueueSemaphoreTake+0x158>
 8013990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013992:	2200      	movs	r2, #0
 8013994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013998:	f002 fb00 	bl	8015f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801399c:	463a      	mov	r2, r7
 801399e:	f107 030c 	add.w	r3, r7, #12
 80139a2:	4611      	mov	r1, r2
 80139a4:	4618      	mov	r0, r3
 80139a6:	f001 f871 	bl	8014a8c <xTaskCheckForTimeOut>
 80139aa:	4603      	mov	r3, r0
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d132      	bne.n	8013a16 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80139b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80139b2:	f000 f9f5 	bl	8013da0 <prvIsQueueEmpty>
 80139b6:	4603      	mov	r3, r0
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d026      	beq.n	8013a0a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80139bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d109      	bne.n	80139d8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80139c4:	f002 fab8 	bl	8015f38 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80139c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ca:	689b      	ldr	r3, [r3, #8]
 80139cc:	4618      	mov	r0, r3
 80139ce:	f001 f9d7 	bl	8014d80 <xTaskPriorityInherit>
 80139d2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80139d4:	f002 fae2 	bl	8015f9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80139d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139da:	3324      	adds	r3, #36	@ 0x24
 80139dc:	683a      	ldr	r2, [r7, #0]
 80139de:	4611      	mov	r1, r2
 80139e0:	4618      	mov	r0, r3
 80139e2:	f000 fee5 	bl	80147b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80139e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80139e8:	f000 f988 	bl	8013cfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80139ec:	f000 fd00 	bl	80143f0 <xTaskResumeAll>
 80139f0:	4603      	mov	r3, r0
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	f47f af67 	bne.w	80138c6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80139f8:	4b18      	ldr	r3, [pc, #96]	@ (8013a5c <xQueueSemaphoreTake+0x21c>)
 80139fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80139fe:	601a      	str	r2, [r3, #0]
 8013a00:	f3bf 8f4f 	dsb	sy
 8013a04:	f3bf 8f6f 	isb	sy
 8013a08:	e75d      	b.n	80138c6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013a0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013a0c:	f000 f976 	bl	8013cfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013a10:	f000 fcee 	bl	80143f0 <xTaskResumeAll>
 8013a14:	e757      	b.n	80138c6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013a16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013a18:	f000 f970 	bl	8013cfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013a1c:	f000 fce8 	bl	80143f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013a20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013a22:	f000 f9bd 	bl	8013da0 <prvIsQueueEmpty>
 8013a26:	4603      	mov	r3, r0
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	f43f af4c 	beq.w	80138c6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d00d      	beq.n	8013a50 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8013a34:	f002 fa80 	bl	8015f38 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013a38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013a3a:	f000 f8b7 	bl	8013bac <prvGetDisinheritPriorityAfterTimeout>
 8013a3e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a42:	689b      	ldr	r3, [r3, #8]
 8013a44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013a46:	4618      	mov	r0, r3
 8013a48:	f001 fa72 	bl	8014f30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013a4c:	f002 faa6 	bl	8015f9c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013a50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013a52:	4618      	mov	r0, r3
 8013a54:	3738      	adds	r7, #56	@ 0x38
 8013a56:	46bd      	mov	sp, r7
 8013a58:	bd80      	pop	{r7, pc}
 8013a5a:	bf00      	nop
 8013a5c:	e000ed04 	.word	0xe000ed04

08013a60 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b08e      	sub	sp, #56	@ 0x38
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	60f8      	str	r0, [r7, #12]
 8013a68:	60b9      	str	r1, [r7, #8]
 8013a6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d10b      	bne.n	8013a8e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8013a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a7a:	f383 8811 	msr	BASEPRI, r3
 8013a7e:	f3bf 8f6f 	isb	sy
 8013a82:	f3bf 8f4f 	dsb	sy
 8013a86:	623b      	str	r3, [r7, #32]
}
 8013a88:	bf00      	nop
 8013a8a:	bf00      	nop
 8013a8c:	e7fd      	b.n	8013a8a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013a8e:	68bb      	ldr	r3, [r7, #8]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d103      	bne.n	8013a9c <xQueueReceiveFromISR+0x3c>
 8013a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d101      	bne.n	8013aa0 <xQueueReceiveFromISR+0x40>
 8013a9c:	2301      	movs	r3, #1
 8013a9e:	e000      	b.n	8013aa2 <xQueueReceiveFromISR+0x42>
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d10b      	bne.n	8013abe <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8013aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013aaa:	f383 8811 	msr	BASEPRI, r3
 8013aae:	f3bf 8f6f 	isb	sy
 8013ab2:	f3bf 8f4f 	dsb	sy
 8013ab6:	61fb      	str	r3, [r7, #28]
}
 8013ab8:	bf00      	nop
 8013aba:	bf00      	nop
 8013abc:	e7fd      	b.n	8013aba <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013abe:	f002 fb1b 	bl	80160f8 <vPortValidateInterruptPriority>
	__asm volatile
 8013ac2:	f3ef 8211 	mrs	r2, BASEPRI
 8013ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013aca:	f383 8811 	msr	BASEPRI, r3
 8013ace:	f3bf 8f6f 	isb	sy
 8013ad2:	f3bf 8f4f 	dsb	sy
 8013ad6:	61ba      	str	r2, [r7, #24]
 8013ad8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013ada:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ae2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d02f      	beq.n	8013b4a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013aec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013af0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013af4:	68b9      	ldr	r1, [r7, #8]
 8013af6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013af8:	f000 f8da 	bl	8013cb0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013afe:	1e5a      	subs	r2, r3, #1
 8013b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b02:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013b04:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013b08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013b0c:	d112      	bne.n	8013b34 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b10:	691b      	ldr	r3, [r3, #16]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d016      	beq.n	8013b44 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b18:	3310      	adds	r3, #16
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	f000 fed8 	bl	80148d0 <xTaskRemoveFromEventList>
 8013b20:	4603      	mov	r3, r0
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d00e      	beq.n	8013b44 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d00b      	beq.n	8013b44 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	2201      	movs	r2, #1
 8013b30:	601a      	str	r2, [r3, #0]
 8013b32:	e007      	b.n	8013b44 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013b34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013b38:	3301      	adds	r3, #1
 8013b3a:	b2db      	uxtb	r3, r3
 8013b3c:	b25a      	sxtb	r2, r3
 8013b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8013b44:	2301      	movs	r3, #1
 8013b46:	637b      	str	r3, [r7, #52]	@ 0x34
 8013b48:	e001      	b.n	8013b4e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8013b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b50:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013b52:	693b      	ldr	r3, [r7, #16]
 8013b54:	f383 8811 	msr	BASEPRI, r3
}
 8013b58:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	3738      	adds	r7, #56	@ 0x38
 8013b60:	46bd      	mov	sp, r7
 8013b62:	bd80      	pop	{r7, pc}

08013b64 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b084      	sub	sp, #16
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d10b      	bne.n	8013b8e <vQueueDelete+0x2a>
	__asm volatile
 8013b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b7a:	f383 8811 	msr	BASEPRI, r3
 8013b7e:	f3bf 8f6f 	isb	sy
 8013b82:	f3bf 8f4f 	dsb	sy
 8013b86:	60bb      	str	r3, [r7, #8]
}
 8013b88:	bf00      	nop
 8013b8a:	bf00      	nop
 8013b8c:	e7fd      	b.n	8013b8a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013b8e:	68f8      	ldr	r0, [r7, #12]
 8013b90:	f000 f95e 	bl	8013e50 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d102      	bne.n	8013ba4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8013b9e:	68f8      	ldr	r0, [r7, #12]
 8013ba0:	f002 fbba 	bl	8016318 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013ba4:	bf00      	nop
 8013ba6:	3710      	adds	r7, #16
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	bd80      	pop	{r7, pc}

08013bac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013bac:	b480      	push	{r7}
 8013bae:	b085      	sub	sp, #20
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d006      	beq.n	8013bca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8013bc6:	60fb      	str	r3, [r7, #12]
 8013bc8:	e001      	b.n	8013bce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013bca:	2300      	movs	r3, #0
 8013bcc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013bce:	68fb      	ldr	r3, [r7, #12]
	}
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	3714      	adds	r7, #20
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bda:	4770      	bx	lr

08013bdc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b086      	sub	sp, #24
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	60f8      	str	r0, [r7, #12]
 8013be4:	60b9      	str	r1, [r7, #8]
 8013be6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013be8:	2300      	movs	r3, #0
 8013bea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013bf0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d10d      	bne.n	8013c16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d14d      	bne.n	8013c9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	689b      	ldr	r3, [r3, #8]
 8013c06:	4618      	mov	r0, r3
 8013c08:	f001 f922 	bl	8014e50 <xTaskPriorityDisinherit>
 8013c0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	2200      	movs	r2, #0
 8013c12:	609a      	str	r2, [r3, #8]
 8013c14:	e043      	b.n	8013c9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d119      	bne.n	8013c50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	6858      	ldr	r0, [r3, #4]
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c24:	461a      	mov	r2, r3
 8013c26:	68b9      	ldr	r1, [r7, #8]
 8013c28:	f003 f921 	bl	8016e6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	685a      	ldr	r2, [r3, #4]
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c34:	441a      	add	r2, r3
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	685a      	ldr	r2, [r3, #4]
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	689b      	ldr	r3, [r3, #8]
 8013c42:	429a      	cmp	r2, r3
 8013c44:	d32b      	bcc.n	8013c9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	681a      	ldr	r2, [r3, #0]
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	605a      	str	r2, [r3, #4]
 8013c4e:	e026      	b.n	8013c9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	68d8      	ldr	r0, [r3, #12]
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c58:	461a      	mov	r2, r3
 8013c5a:	68b9      	ldr	r1, [r7, #8]
 8013c5c:	f003 f907 	bl	8016e6e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	68da      	ldr	r2, [r3, #12]
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c68:	425b      	negs	r3, r3
 8013c6a:	441a      	add	r2, r3
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	68da      	ldr	r2, [r3, #12]
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	d207      	bcs.n	8013c8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	689a      	ldr	r2, [r3, #8]
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c84:	425b      	negs	r3, r3
 8013c86:	441a      	add	r2, r3
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	2b02      	cmp	r3, #2
 8013c90:	d105      	bne.n	8013c9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013c92:	693b      	ldr	r3, [r7, #16]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d002      	beq.n	8013c9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013c98:	693b      	ldr	r3, [r7, #16]
 8013c9a:	3b01      	subs	r3, #1
 8013c9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013c9e:	693b      	ldr	r3, [r7, #16]
 8013ca0:	1c5a      	adds	r2, r3, #1
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013ca6:	697b      	ldr	r3, [r7, #20]
}
 8013ca8:	4618      	mov	r0, r3
 8013caa:	3718      	adds	r7, #24
 8013cac:	46bd      	mov	sp, r7
 8013cae:	bd80      	pop	{r7, pc}

08013cb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b082      	sub	sp, #8
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
 8013cb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d018      	beq.n	8013cf4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	68da      	ldr	r2, [r3, #12]
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013cca:	441a      	add	r2, r3
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	68da      	ldr	r2, [r3, #12]
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	689b      	ldr	r3, [r3, #8]
 8013cd8:	429a      	cmp	r2, r3
 8013cda:	d303      	bcc.n	8013ce4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	681a      	ldr	r2, [r3, #0]
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	68d9      	ldr	r1, [r3, #12]
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013cec:	461a      	mov	r2, r3
 8013cee:	6838      	ldr	r0, [r7, #0]
 8013cf0:	f003 f8bd 	bl	8016e6e <memcpy>
	}
}
 8013cf4:	bf00      	nop
 8013cf6:	3708      	adds	r7, #8
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}

08013cfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b084      	sub	sp, #16
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013d04:	f002 f918 	bl	8015f38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013d0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013d10:	e011      	b.n	8013d36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d012      	beq.n	8013d40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	3324      	adds	r3, #36	@ 0x24
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f000 fdd6 	bl	80148d0 <xTaskRemoveFromEventList>
 8013d24:	4603      	mov	r3, r0
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d001      	beq.n	8013d2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013d2a:	f000 ff13 	bl	8014b54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013d2e:	7bfb      	ldrb	r3, [r7, #15]
 8013d30:	3b01      	subs	r3, #1
 8013d32:	b2db      	uxtb	r3, r3
 8013d34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	dce9      	bgt.n	8013d12 <prvUnlockQueue+0x16>
 8013d3e:	e000      	b.n	8013d42 <prvUnlockQueue+0x46>
					break;
 8013d40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	22ff      	movs	r2, #255	@ 0xff
 8013d46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013d4a:	f002 f927 	bl	8015f9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013d4e:	f002 f8f3 	bl	8015f38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013d58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013d5a:	e011      	b.n	8013d80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	691b      	ldr	r3, [r3, #16]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d012      	beq.n	8013d8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	3310      	adds	r3, #16
 8013d68:	4618      	mov	r0, r3
 8013d6a:	f000 fdb1 	bl	80148d0 <xTaskRemoveFromEventList>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d001      	beq.n	8013d78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013d74:	f000 feee 	bl	8014b54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013d78:	7bbb      	ldrb	r3, [r7, #14]
 8013d7a:	3b01      	subs	r3, #1
 8013d7c:	b2db      	uxtb	r3, r3
 8013d7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013d80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	dce9      	bgt.n	8013d5c <prvUnlockQueue+0x60>
 8013d88:	e000      	b.n	8013d8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013d8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	22ff      	movs	r2, #255	@ 0xff
 8013d90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013d94:	f002 f902 	bl	8015f9c <vPortExitCritical>
}
 8013d98:	bf00      	nop
 8013d9a:	3710      	adds	r7, #16
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}

08013da0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b084      	sub	sp, #16
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013da8:	f002 f8c6 	bl	8015f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d102      	bne.n	8013dba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013db4:	2301      	movs	r3, #1
 8013db6:	60fb      	str	r3, [r7, #12]
 8013db8:	e001      	b.n	8013dbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013dba:	2300      	movs	r3, #0
 8013dbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013dbe:	f002 f8ed 	bl	8015f9c <vPortExitCritical>

	return xReturn;
 8013dc2:	68fb      	ldr	r3, [r7, #12]
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3710      	adds	r7, #16
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}

08013dcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b084      	sub	sp, #16
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013dd4:	f002 f8b0 	bl	8015f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013de0:	429a      	cmp	r2, r3
 8013de2:	d102      	bne.n	8013dea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013de4:	2301      	movs	r3, #1
 8013de6:	60fb      	str	r3, [r7, #12]
 8013de8:	e001      	b.n	8013dee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013dea:	2300      	movs	r3, #0
 8013dec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013dee:	f002 f8d5 	bl	8015f9c <vPortExitCritical>

	return xReturn;
 8013df2:	68fb      	ldr	r3, [r7, #12]
}
 8013df4:	4618      	mov	r0, r3
 8013df6:	3710      	adds	r7, #16
 8013df8:	46bd      	mov	sp, r7
 8013dfa:	bd80      	pop	{r7, pc}

08013dfc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013dfc:	b480      	push	{r7}
 8013dfe:	b085      	sub	sp, #20
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
 8013e04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013e06:	2300      	movs	r3, #0
 8013e08:	60fb      	str	r3, [r7, #12]
 8013e0a:	e014      	b.n	8013e36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8013e4c <vQueueAddToRegistry+0x50>)
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d10b      	bne.n	8013e30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013e18:	490c      	ldr	r1, [pc, #48]	@ (8013e4c <vQueueAddToRegistry+0x50>)
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	683a      	ldr	r2, [r7, #0]
 8013e1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013e22:	4a0a      	ldr	r2, [pc, #40]	@ (8013e4c <vQueueAddToRegistry+0x50>)
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	00db      	lsls	r3, r3, #3
 8013e28:	4413      	add	r3, r2
 8013e2a:	687a      	ldr	r2, [r7, #4]
 8013e2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013e2e:	e006      	b.n	8013e3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	3301      	adds	r3, #1
 8013e34:	60fb      	str	r3, [r7, #12]
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	2b07      	cmp	r3, #7
 8013e3a:	d9e7      	bls.n	8013e0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013e3c:	bf00      	nop
 8013e3e:	bf00      	nop
 8013e40:	3714      	adds	r7, #20
 8013e42:	46bd      	mov	sp, r7
 8013e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e48:	4770      	bx	lr
 8013e4a:	bf00      	nop
 8013e4c:	240011cc 	.word	0x240011cc

08013e50 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013e50:	b480      	push	{r7}
 8013e52:	b085      	sub	sp, #20
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013e58:	2300      	movs	r3, #0
 8013e5a:	60fb      	str	r3, [r7, #12]
 8013e5c:	e016      	b.n	8013e8c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013e5e:	4a10      	ldr	r2, [pc, #64]	@ (8013ea0 <vQueueUnregisterQueue+0x50>)
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	00db      	lsls	r3, r3, #3
 8013e64:	4413      	add	r3, r2
 8013e66:	685b      	ldr	r3, [r3, #4]
 8013e68:	687a      	ldr	r2, [r7, #4]
 8013e6a:	429a      	cmp	r2, r3
 8013e6c:	d10b      	bne.n	8013e86 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8013ea0 <vQueueUnregisterQueue+0x50>)
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	2100      	movs	r1, #0
 8013e74:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013e78:	4a09      	ldr	r2, [pc, #36]	@ (8013ea0 <vQueueUnregisterQueue+0x50>)
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	00db      	lsls	r3, r3, #3
 8013e7e:	4413      	add	r3, r2
 8013e80:	2200      	movs	r2, #0
 8013e82:	605a      	str	r2, [r3, #4]
				break;
 8013e84:	e006      	b.n	8013e94 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	3301      	adds	r3, #1
 8013e8a:	60fb      	str	r3, [r7, #12]
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	2b07      	cmp	r3, #7
 8013e90:	d9e5      	bls.n	8013e5e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013e92:	bf00      	nop
 8013e94:	bf00      	nop
 8013e96:	3714      	adds	r7, #20
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9e:	4770      	bx	lr
 8013ea0:	240011cc 	.word	0x240011cc

08013ea4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b086      	sub	sp, #24
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	60f8      	str	r0, [r7, #12]
 8013eac:	60b9      	str	r1, [r7, #8]
 8013eae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013eb4:	f002 f840 	bl	8015f38 <vPortEnterCritical>
 8013eb8:	697b      	ldr	r3, [r7, #20]
 8013eba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013ebe:	b25b      	sxtb	r3, r3
 8013ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013ec4:	d103      	bne.n	8013ece <vQueueWaitForMessageRestricted+0x2a>
 8013ec6:	697b      	ldr	r3, [r7, #20]
 8013ec8:	2200      	movs	r2, #0
 8013eca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013ece:	697b      	ldr	r3, [r7, #20]
 8013ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013ed4:	b25b      	sxtb	r3, r3
 8013ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013eda:	d103      	bne.n	8013ee4 <vQueueWaitForMessageRestricted+0x40>
 8013edc:	697b      	ldr	r3, [r7, #20]
 8013ede:	2200      	movs	r2, #0
 8013ee0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013ee4:	f002 f85a 	bl	8015f9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013ee8:	697b      	ldr	r3, [r7, #20]
 8013eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d106      	bne.n	8013efe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013ef0:	697b      	ldr	r3, [r7, #20]
 8013ef2:	3324      	adds	r3, #36	@ 0x24
 8013ef4:	687a      	ldr	r2, [r7, #4]
 8013ef6:	68b9      	ldr	r1, [r7, #8]
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f000 fcbd 	bl	8014878 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013efe:	6978      	ldr	r0, [r7, #20]
 8013f00:	f7ff fefc 	bl	8013cfc <prvUnlockQueue>
	}
 8013f04:	bf00      	nop
 8013f06:	3718      	adds	r7, #24
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bd80      	pop	{r7, pc}

08013f0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b08e      	sub	sp, #56	@ 0x38
 8013f10:	af04      	add	r7, sp, #16
 8013f12:	60f8      	str	r0, [r7, #12]
 8013f14:	60b9      	str	r1, [r7, #8]
 8013f16:	607a      	str	r2, [r7, #4]
 8013f18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d10b      	bne.n	8013f38 <xTaskCreateStatic+0x2c>
	__asm volatile
 8013f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f24:	f383 8811 	msr	BASEPRI, r3
 8013f28:	f3bf 8f6f 	isb	sy
 8013f2c:	f3bf 8f4f 	dsb	sy
 8013f30:	623b      	str	r3, [r7, #32]
}
 8013f32:	bf00      	nop
 8013f34:	bf00      	nop
 8013f36:	e7fd      	b.n	8013f34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d10b      	bne.n	8013f56 <xTaskCreateStatic+0x4a>
	__asm volatile
 8013f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f42:	f383 8811 	msr	BASEPRI, r3
 8013f46:	f3bf 8f6f 	isb	sy
 8013f4a:	f3bf 8f4f 	dsb	sy
 8013f4e:	61fb      	str	r3, [r7, #28]
}
 8013f50:	bf00      	nop
 8013f52:	bf00      	nop
 8013f54:	e7fd      	b.n	8013f52 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013f56:	23a8      	movs	r3, #168	@ 0xa8
 8013f58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013f5a:	693b      	ldr	r3, [r7, #16]
 8013f5c:	2ba8      	cmp	r3, #168	@ 0xa8
 8013f5e:	d00b      	beq.n	8013f78 <xTaskCreateStatic+0x6c>
	__asm volatile
 8013f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f64:	f383 8811 	msr	BASEPRI, r3
 8013f68:	f3bf 8f6f 	isb	sy
 8013f6c:	f3bf 8f4f 	dsb	sy
 8013f70:	61bb      	str	r3, [r7, #24]
}
 8013f72:	bf00      	nop
 8013f74:	bf00      	nop
 8013f76:	e7fd      	b.n	8013f74 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013f78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d01e      	beq.n	8013fbe <xTaskCreateStatic+0xb2>
 8013f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d01b      	beq.n	8013fbe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f88:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013f8e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f92:	2202      	movs	r2, #2
 8013f94:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013f98:	2300      	movs	r3, #0
 8013f9a:	9303      	str	r3, [sp, #12]
 8013f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f9e:	9302      	str	r3, [sp, #8]
 8013fa0:	f107 0314 	add.w	r3, r7, #20
 8013fa4:	9301      	str	r3, [sp, #4]
 8013fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fa8:	9300      	str	r3, [sp, #0]
 8013faa:	683b      	ldr	r3, [r7, #0]
 8013fac:	687a      	ldr	r2, [r7, #4]
 8013fae:	68b9      	ldr	r1, [r7, #8]
 8013fb0:	68f8      	ldr	r0, [r7, #12]
 8013fb2:	f000 f851 	bl	8014058 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013fb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013fb8:	f000 f8f6 	bl	80141a8 <prvAddNewTaskToReadyList>
 8013fbc:	e001      	b.n	8013fc2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013fc2:	697b      	ldr	r3, [r7, #20]
	}
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	3728      	adds	r7, #40	@ 0x28
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	bd80      	pop	{r7, pc}

08013fcc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b08c      	sub	sp, #48	@ 0x30
 8013fd0:	af04      	add	r7, sp, #16
 8013fd2:	60f8      	str	r0, [r7, #12]
 8013fd4:	60b9      	str	r1, [r7, #8]
 8013fd6:	603b      	str	r3, [r7, #0]
 8013fd8:	4613      	mov	r3, r2
 8013fda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013fdc:	88fb      	ldrh	r3, [r7, #6]
 8013fde:	009b      	lsls	r3, r3, #2
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f002 f8cb 	bl	801617c <pvPortMalloc>
 8013fe6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013fe8:	697b      	ldr	r3, [r7, #20]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d00e      	beq.n	801400c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013fee:	20a8      	movs	r0, #168	@ 0xa8
 8013ff0:	f002 f8c4 	bl	801617c <pvPortMalloc>
 8013ff4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013ff6:	69fb      	ldr	r3, [r7, #28]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d003      	beq.n	8014004 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013ffc:	69fb      	ldr	r3, [r7, #28]
 8013ffe:	697a      	ldr	r2, [r7, #20]
 8014000:	631a      	str	r2, [r3, #48]	@ 0x30
 8014002:	e005      	b.n	8014010 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014004:	6978      	ldr	r0, [r7, #20]
 8014006:	f002 f987 	bl	8016318 <vPortFree>
 801400a:	e001      	b.n	8014010 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801400c:	2300      	movs	r3, #0
 801400e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014010:	69fb      	ldr	r3, [r7, #28]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d017      	beq.n	8014046 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014016:	69fb      	ldr	r3, [r7, #28]
 8014018:	2200      	movs	r2, #0
 801401a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801401e:	88fa      	ldrh	r2, [r7, #6]
 8014020:	2300      	movs	r3, #0
 8014022:	9303      	str	r3, [sp, #12]
 8014024:	69fb      	ldr	r3, [r7, #28]
 8014026:	9302      	str	r3, [sp, #8]
 8014028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801402a:	9301      	str	r3, [sp, #4]
 801402c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801402e:	9300      	str	r3, [sp, #0]
 8014030:	683b      	ldr	r3, [r7, #0]
 8014032:	68b9      	ldr	r1, [r7, #8]
 8014034:	68f8      	ldr	r0, [r7, #12]
 8014036:	f000 f80f 	bl	8014058 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801403a:	69f8      	ldr	r0, [r7, #28]
 801403c:	f000 f8b4 	bl	80141a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014040:	2301      	movs	r3, #1
 8014042:	61bb      	str	r3, [r7, #24]
 8014044:	e002      	b.n	801404c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014046:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801404a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801404c:	69bb      	ldr	r3, [r7, #24]
	}
 801404e:	4618      	mov	r0, r3
 8014050:	3720      	adds	r7, #32
 8014052:	46bd      	mov	sp, r7
 8014054:	bd80      	pop	{r7, pc}
	...

08014058 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b088      	sub	sp, #32
 801405c:	af00      	add	r7, sp, #0
 801405e:	60f8      	str	r0, [r7, #12]
 8014060:	60b9      	str	r1, [r7, #8]
 8014062:	607a      	str	r2, [r7, #4]
 8014064:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014068:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	009b      	lsls	r3, r3, #2
 801406e:	461a      	mov	r2, r3
 8014070:	21a5      	movs	r1, #165	@ 0xa5
 8014072:	f002 fe13 	bl	8016c9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014078:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801407a:	6879      	ldr	r1, [r7, #4]
 801407c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8014080:	440b      	add	r3, r1
 8014082:	009b      	lsls	r3, r3, #2
 8014084:	4413      	add	r3, r2
 8014086:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014088:	69bb      	ldr	r3, [r7, #24]
 801408a:	f023 0307 	bic.w	r3, r3, #7
 801408e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014090:	69bb      	ldr	r3, [r7, #24]
 8014092:	f003 0307 	and.w	r3, r3, #7
 8014096:	2b00      	cmp	r3, #0
 8014098:	d00b      	beq.n	80140b2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801409a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801409e:	f383 8811 	msr	BASEPRI, r3
 80140a2:	f3bf 8f6f 	isb	sy
 80140a6:	f3bf 8f4f 	dsb	sy
 80140aa:	617b      	str	r3, [r7, #20]
}
 80140ac:	bf00      	nop
 80140ae:	bf00      	nop
 80140b0:	e7fd      	b.n	80140ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80140b2:	68bb      	ldr	r3, [r7, #8]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d01f      	beq.n	80140f8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80140b8:	2300      	movs	r3, #0
 80140ba:	61fb      	str	r3, [r7, #28]
 80140bc:	e012      	b.n	80140e4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80140be:	68ba      	ldr	r2, [r7, #8]
 80140c0:	69fb      	ldr	r3, [r7, #28]
 80140c2:	4413      	add	r3, r2
 80140c4:	7819      	ldrb	r1, [r3, #0]
 80140c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80140c8:	69fb      	ldr	r3, [r7, #28]
 80140ca:	4413      	add	r3, r2
 80140cc:	3334      	adds	r3, #52	@ 0x34
 80140ce:	460a      	mov	r2, r1
 80140d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80140d2:	68ba      	ldr	r2, [r7, #8]
 80140d4:	69fb      	ldr	r3, [r7, #28]
 80140d6:	4413      	add	r3, r2
 80140d8:	781b      	ldrb	r3, [r3, #0]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d006      	beq.n	80140ec <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80140de:	69fb      	ldr	r3, [r7, #28]
 80140e0:	3301      	adds	r3, #1
 80140e2:	61fb      	str	r3, [r7, #28]
 80140e4:	69fb      	ldr	r3, [r7, #28]
 80140e6:	2b0f      	cmp	r3, #15
 80140e8:	d9e9      	bls.n	80140be <prvInitialiseNewTask+0x66>
 80140ea:	e000      	b.n	80140ee <prvInitialiseNewTask+0x96>
			{
				break;
 80140ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80140ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140f0:	2200      	movs	r2, #0
 80140f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80140f6:	e003      	b.n	8014100 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80140f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140fa:	2200      	movs	r2, #0
 80140fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014102:	2b37      	cmp	r3, #55	@ 0x37
 8014104:	d901      	bls.n	801410a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014106:	2337      	movs	r3, #55	@ 0x37
 8014108:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801410a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801410c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801410e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014112:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014114:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014118:	2200      	movs	r2, #0
 801411a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801411c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801411e:	3304      	adds	r3, #4
 8014120:	4618      	mov	r0, r3
 8014122:	f7fe fe33 	bl	8012d8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014128:	3318      	adds	r3, #24
 801412a:	4618      	mov	r0, r3
 801412c:	f7fe fe2e 	bl	8012d8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014134:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014138:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801413c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801413e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014144:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014148:	2200      	movs	r2, #0
 801414a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801414e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014150:	2200      	movs	r2, #0
 8014152:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8014156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014158:	3354      	adds	r3, #84	@ 0x54
 801415a:	224c      	movs	r2, #76	@ 0x4c
 801415c:	2100      	movs	r1, #0
 801415e:	4618      	mov	r0, r3
 8014160:	f002 fd9c 	bl	8016c9c <memset>
 8014164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014166:	4a0d      	ldr	r2, [pc, #52]	@ (801419c <prvInitialiseNewTask+0x144>)
 8014168:	659a      	str	r2, [r3, #88]	@ 0x58
 801416a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801416c:	4a0c      	ldr	r2, [pc, #48]	@ (80141a0 <prvInitialiseNewTask+0x148>)
 801416e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014172:	4a0c      	ldr	r2, [pc, #48]	@ (80141a4 <prvInitialiseNewTask+0x14c>)
 8014174:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014176:	683a      	ldr	r2, [r7, #0]
 8014178:	68f9      	ldr	r1, [r7, #12]
 801417a:	69b8      	ldr	r0, [r7, #24]
 801417c:	f001 fda8 	bl	8015cd0 <pxPortInitialiseStack>
 8014180:	4602      	mov	r2, r0
 8014182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014184:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014188:	2b00      	cmp	r3, #0
 801418a:	d002      	beq.n	8014192 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801418c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801418e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014190:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014192:	bf00      	nop
 8014194:	3720      	adds	r7, #32
 8014196:	46bd      	mov	sp, r7
 8014198:	bd80      	pop	{r7, pc}
 801419a:	bf00      	nop
 801419c:	24005468 	.word	0x24005468
 80141a0:	240054d0 	.word	0x240054d0
 80141a4:	24005538 	.word	0x24005538

080141a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b082      	sub	sp, #8
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80141b0:	f001 fec2 	bl	8015f38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80141b4:	4b2d      	ldr	r3, [pc, #180]	@ (801426c <prvAddNewTaskToReadyList+0xc4>)
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	3301      	adds	r3, #1
 80141ba:	4a2c      	ldr	r2, [pc, #176]	@ (801426c <prvAddNewTaskToReadyList+0xc4>)
 80141bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80141be:	4b2c      	ldr	r3, [pc, #176]	@ (8014270 <prvAddNewTaskToReadyList+0xc8>)
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d109      	bne.n	80141da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80141c6:	4a2a      	ldr	r2, [pc, #168]	@ (8014270 <prvAddNewTaskToReadyList+0xc8>)
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80141cc:	4b27      	ldr	r3, [pc, #156]	@ (801426c <prvAddNewTaskToReadyList+0xc4>)
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	2b01      	cmp	r3, #1
 80141d2:	d110      	bne.n	80141f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80141d4:	f000 fce2 	bl	8014b9c <prvInitialiseTaskLists>
 80141d8:	e00d      	b.n	80141f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80141da:	4b26      	ldr	r3, [pc, #152]	@ (8014274 <prvAddNewTaskToReadyList+0xcc>)
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d109      	bne.n	80141f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80141e2:	4b23      	ldr	r3, [pc, #140]	@ (8014270 <prvAddNewTaskToReadyList+0xc8>)
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141ec:	429a      	cmp	r2, r3
 80141ee:	d802      	bhi.n	80141f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80141f0:	4a1f      	ldr	r2, [pc, #124]	@ (8014270 <prvAddNewTaskToReadyList+0xc8>)
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80141f6:	4b20      	ldr	r3, [pc, #128]	@ (8014278 <prvAddNewTaskToReadyList+0xd0>)
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	3301      	adds	r3, #1
 80141fc:	4a1e      	ldr	r2, [pc, #120]	@ (8014278 <prvAddNewTaskToReadyList+0xd0>)
 80141fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014200:	4b1d      	ldr	r3, [pc, #116]	@ (8014278 <prvAddNewTaskToReadyList+0xd0>)
 8014202:	681a      	ldr	r2, [r3, #0]
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801420c:	4b1b      	ldr	r3, [pc, #108]	@ (801427c <prvAddNewTaskToReadyList+0xd4>)
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	429a      	cmp	r2, r3
 8014212:	d903      	bls.n	801421c <prvAddNewTaskToReadyList+0x74>
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014218:	4a18      	ldr	r2, [pc, #96]	@ (801427c <prvAddNewTaskToReadyList+0xd4>)
 801421a:	6013      	str	r3, [r2, #0]
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014220:	4613      	mov	r3, r2
 8014222:	009b      	lsls	r3, r3, #2
 8014224:	4413      	add	r3, r2
 8014226:	009b      	lsls	r3, r3, #2
 8014228:	4a15      	ldr	r2, [pc, #84]	@ (8014280 <prvAddNewTaskToReadyList+0xd8>)
 801422a:	441a      	add	r2, r3
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	3304      	adds	r3, #4
 8014230:	4619      	mov	r1, r3
 8014232:	4610      	mov	r0, r2
 8014234:	f7fe fdb7 	bl	8012da6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014238:	f001 feb0 	bl	8015f9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801423c:	4b0d      	ldr	r3, [pc, #52]	@ (8014274 <prvAddNewTaskToReadyList+0xcc>)
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d00e      	beq.n	8014262 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014244:	4b0a      	ldr	r3, [pc, #40]	@ (8014270 <prvAddNewTaskToReadyList+0xc8>)
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801424e:	429a      	cmp	r2, r3
 8014250:	d207      	bcs.n	8014262 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014252:	4b0c      	ldr	r3, [pc, #48]	@ (8014284 <prvAddNewTaskToReadyList+0xdc>)
 8014254:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014258:	601a      	str	r2, [r3, #0]
 801425a:	f3bf 8f4f 	dsb	sy
 801425e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014262:	bf00      	nop
 8014264:	3708      	adds	r7, #8
 8014266:	46bd      	mov	sp, r7
 8014268:	bd80      	pop	{r7, pc}
 801426a:	bf00      	nop
 801426c:	240016e0 	.word	0x240016e0
 8014270:	2400120c 	.word	0x2400120c
 8014274:	240016ec 	.word	0x240016ec
 8014278:	240016fc 	.word	0x240016fc
 801427c:	240016e8 	.word	0x240016e8
 8014280:	24001210 	.word	0x24001210
 8014284:	e000ed04 	.word	0xe000ed04

08014288 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014288:	b580      	push	{r7, lr}
 801428a:	b084      	sub	sp, #16
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014290:	2300      	movs	r3, #0
 8014292:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d018      	beq.n	80142cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801429a:	4b14      	ldr	r3, [pc, #80]	@ (80142ec <vTaskDelay+0x64>)
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d00b      	beq.n	80142ba <vTaskDelay+0x32>
	__asm volatile
 80142a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142a6:	f383 8811 	msr	BASEPRI, r3
 80142aa:	f3bf 8f6f 	isb	sy
 80142ae:	f3bf 8f4f 	dsb	sy
 80142b2:	60bb      	str	r3, [r7, #8]
}
 80142b4:	bf00      	nop
 80142b6:	bf00      	nop
 80142b8:	e7fd      	b.n	80142b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80142ba:	f000 f88b 	bl	80143d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80142be:	2100      	movs	r1, #0
 80142c0:	6878      	ldr	r0, [r7, #4]
 80142c2:	f001 f8d9 	bl	8015478 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80142c6:	f000 f893 	bl	80143f0 <xTaskResumeAll>
 80142ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d107      	bne.n	80142e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80142d2:	4b07      	ldr	r3, [pc, #28]	@ (80142f0 <vTaskDelay+0x68>)
 80142d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80142d8:	601a      	str	r2, [r3, #0]
 80142da:	f3bf 8f4f 	dsb	sy
 80142de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80142e2:	bf00      	nop
 80142e4:	3710      	adds	r7, #16
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}
 80142ea:	bf00      	nop
 80142ec:	24001708 	.word	0x24001708
 80142f0:	e000ed04 	.word	0xe000ed04

080142f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b08a      	sub	sp, #40	@ 0x28
 80142f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80142fa:	2300      	movs	r3, #0
 80142fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80142fe:	2300      	movs	r3, #0
 8014300:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014302:	463a      	mov	r2, r7
 8014304:	1d39      	adds	r1, r7, #4
 8014306:	f107 0308 	add.w	r3, r7, #8
 801430a:	4618      	mov	r0, r3
 801430c:	f7fe fb2e 	bl	801296c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014310:	6839      	ldr	r1, [r7, #0]
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	68ba      	ldr	r2, [r7, #8]
 8014316:	9202      	str	r2, [sp, #8]
 8014318:	9301      	str	r3, [sp, #4]
 801431a:	2300      	movs	r3, #0
 801431c:	9300      	str	r3, [sp, #0]
 801431e:	2300      	movs	r3, #0
 8014320:	460a      	mov	r2, r1
 8014322:	4924      	ldr	r1, [pc, #144]	@ (80143b4 <vTaskStartScheduler+0xc0>)
 8014324:	4824      	ldr	r0, [pc, #144]	@ (80143b8 <vTaskStartScheduler+0xc4>)
 8014326:	f7ff fdf1 	bl	8013f0c <xTaskCreateStatic>
 801432a:	4603      	mov	r3, r0
 801432c:	4a23      	ldr	r2, [pc, #140]	@ (80143bc <vTaskStartScheduler+0xc8>)
 801432e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014330:	4b22      	ldr	r3, [pc, #136]	@ (80143bc <vTaskStartScheduler+0xc8>)
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d002      	beq.n	801433e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014338:	2301      	movs	r3, #1
 801433a:	617b      	str	r3, [r7, #20]
 801433c:	e001      	b.n	8014342 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801433e:	2300      	movs	r3, #0
 8014340:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014342:	697b      	ldr	r3, [r7, #20]
 8014344:	2b01      	cmp	r3, #1
 8014346:	d102      	bne.n	801434e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014348:	f001 f8ea 	bl	8015520 <xTimerCreateTimerTask>
 801434c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801434e:	697b      	ldr	r3, [r7, #20]
 8014350:	2b01      	cmp	r3, #1
 8014352:	d11b      	bne.n	801438c <vTaskStartScheduler+0x98>
	__asm volatile
 8014354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014358:	f383 8811 	msr	BASEPRI, r3
 801435c:	f3bf 8f6f 	isb	sy
 8014360:	f3bf 8f4f 	dsb	sy
 8014364:	613b      	str	r3, [r7, #16]
}
 8014366:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014368:	4b15      	ldr	r3, [pc, #84]	@ (80143c0 <vTaskStartScheduler+0xcc>)
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	3354      	adds	r3, #84	@ 0x54
 801436e:	4a15      	ldr	r2, [pc, #84]	@ (80143c4 <vTaskStartScheduler+0xd0>)
 8014370:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014372:	4b15      	ldr	r3, [pc, #84]	@ (80143c8 <vTaskStartScheduler+0xd4>)
 8014374:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014378:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801437a:	4b14      	ldr	r3, [pc, #80]	@ (80143cc <vTaskStartScheduler+0xd8>)
 801437c:	2201      	movs	r2, #1
 801437e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014380:	4b13      	ldr	r3, [pc, #76]	@ (80143d0 <vTaskStartScheduler+0xdc>)
 8014382:	2200      	movs	r2, #0
 8014384:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014386:	f001 fd33 	bl	8015df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801438a:	e00f      	b.n	80143ac <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801438c:	697b      	ldr	r3, [r7, #20]
 801438e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014392:	d10b      	bne.n	80143ac <vTaskStartScheduler+0xb8>
	__asm volatile
 8014394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014398:	f383 8811 	msr	BASEPRI, r3
 801439c:	f3bf 8f6f 	isb	sy
 80143a0:	f3bf 8f4f 	dsb	sy
 80143a4:	60fb      	str	r3, [r7, #12]
}
 80143a6:	bf00      	nop
 80143a8:	bf00      	nop
 80143aa:	e7fd      	b.n	80143a8 <vTaskStartScheduler+0xb4>
}
 80143ac:	bf00      	nop
 80143ae:	3718      	adds	r7, #24
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}
 80143b4:	08017ca4 	.word	0x08017ca4
 80143b8:	08014b6d 	.word	0x08014b6d
 80143bc:	24001704 	.word	0x24001704
 80143c0:	2400120c 	.word	0x2400120c
 80143c4:	24000020 	.word	0x24000020
 80143c8:	24001700 	.word	0x24001700
 80143cc:	240016ec 	.word	0x240016ec
 80143d0:	240016e4 	.word	0x240016e4

080143d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80143d4:	b480      	push	{r7}
 80143d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80143d8:	4b04      	ldr	r3, [pc, #16]	@ (80143ec <vTaskSuspendAll+0x18>)
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	3301      	adds	r3, #1
 80143de:	4a03      	ldr	r2, [pc, #12]	@ (80143ec <vTaskSuspendAll+0x18>)
 80143e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80143e2:	bf00      	nop
 80143e4:	46bd      	mov	sp, r7
 80143e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ea:	4770      	bx	lr
 80143ec:	24001708 	.word	0x24001708

080143f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b084      	sub	sp, #16
 80143f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80143f6:	2300      	movs	r3, #0
 80143f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80143fa:	2300      	movs	r3, #0
 80143fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80143fe:	4b42      	ldr	r3, [pc, #264]	@ (8014508 <xTaskResumeAll+0x118>)
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d10b      	bne.n	801441e <xTaskResumeAll+0x2e>
	__asm volatile
 8014406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801440a:	f383 8811 	msr	BASEPRI, r3
 801440e:	f3bf 8f6f 	isb	sy
 8014412:	f3bf 8f4f 	dsb	sy
 8014416:	603b      	str	r3, [r7, #0]
}
 8014418:	bf00      	nop
 801441a:	bf00      	nop
 801441c:	e7fd      	b.n	801441a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801441e:	f001 fd8b 	bl	8015f38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014422:	4b39      	ldr	r3, [pc, #228]	@ (8014508 <xTaskResumeAll+0x118>)
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	3b01      	subs	r3, #1
 8014428:	4a37      	ldr	r2, [pc, #220]	@ (8014508 <xTaskResumeAll+0x118>)
 801442a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801442c:	4b36      	ldr	r3, [pc, #216]	@ (8014508 <xTaskResumeAll+0x118>)
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d162      	bne.n	80144fa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014434:	4b35      	ldr	r3, [pc, #212]	@ (801450c <xTaskResumeAll+0x11c>)
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d05e      	beq.n	80144fa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801443c:	e02f      	b.n	801449e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801443e:	4b34      	ldr	r3, [pc, #208]	@ (8014510 <xTaskResumeAll+0x120>)
 8014440:	68db      	ldr	r3, [r3, #12]
 8014442:	68db      	ldr	r3, [r3, #12]
 8014444:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	3318      	adds	r3, #24
 801444a:	4618      	mov	r0, r3
 801444c:	f7fe fd08 	bl	8012e60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	3304      	adds	r3, #4
 8014454:	4618      	mov	r0, r3
 8014456:	f7fe fd03 	bl	8012e60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801445e:	4b2d      	ldr	r3, [pc, #180]	@ (8014514 <xTaskResumeAll+0x124>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	429a      	cmp	r2, r3
 8014464:	d903      	bls.n	801446e <xTaskResumeAll+0x7e>
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801446a:	4a2a      	ldr	r2, [pc, #168]	@ (8014514 <xTaskResumeAll+0x124>)
 801446c:	6013      	str	r3, [r2, #0]
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014472:	4613      	mov	r3, r2
 8014474:	009b      	lsls	r3, r3, #2
 8014476:	4413      	add	r3, r2
 8014478:	009b      	lsls	r3, r3, #2
 801447a:	4a27      	ldr	r2, [pc, #156]	@ (8014518 <xTaskResumeAll+0x128>)
 801447c:	441a      	add	r2, r3
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	3304      	adds	r3, #4
 8014482:	4619      	mov	r1, r3
 8014484:	4610      	mov	r0, r2
 8014486:	f7fe fc8e 	bl	8012da6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801448e:	4b23      	ldr	r3, [pc, #140]	@ (801451c <xTaskResumeAll+0x12c>)
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014494:	429a      	cmp	r2, r3
 8014496:	d302      	bcc.n	801449e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8014498:	4b21      	ldr	r3, [pc, #132]	@ (8014520 <xTaskResumeAll+0x130>)
 801449a:	2201      	movs	r2, #1
 801449c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801449e:	4b1c      	ldr	r3, [pc, #112]	@ (8014510 <xTaskResumeAll+0x120>)
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d1cb      	bne.n	801443e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d001      	beq.n	80144b0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80144ac:	f000 fc1a 	bl	8014ce4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80144b0:	4b1c      	ldr	r3, [pc, #112]	@ (8014524 <xTaskResumeAll+0x134>)
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d010      	beq.n	80144de <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80144bc:	f000 f858 	bl	8014570 <xTaskIncrementTick>
 80144c0:	4603      	mov	r3, r0
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d002      	beq.n	80144cc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80144c6:	4b16      	ldr	r3, [pc, #88]	@ (8014520 <xTaskResumeAll+0x130>)
 80144c8:	2201      	movs	r2, #1
 80144ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	3b01      	subs	r3, #1
 80144d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d1f1      	bne.n	80144bc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80144d8:	4b12      	ldr	r3, [pc, #72]	@ (8014524 <xTaskResumeAll+0x134>)
 80144da:	2200      	movs	r2, #0
 80144dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80144de:	4b10      	ldr	r3, [pc, #64]	@ (8014520 <xTaskResumeAll+0x130>)
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d009      	beq.n	80144fa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80144e6:	2301      	movs	r3, #1
 80144e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80144ea:	4b0f      	ldr	r3, [pc, #60]	@ (8014528 <xTaskResumeAll+0x138>)
 80144ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80144f0:	601a      	str	r2, [r3, #0]
 80144f2:	f3bf 8f4f 	dsb	sy
 80144f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80144fa:	f001 fd4f 	bl	8015f9c <vPortExitCritical>

	return xAlreadyYielded;
 80144fe:	68bb      	ldr	r3, [r7, #8]
}
 8014500:	4618      	mov	r0, r3
 8014502:	3710      	adds	r7, #16
 8014504:	46bd      	mov	sp, r7
 8014506:	bd80      	pop	{r7, pc}
 8014508:	24001708 	.word	0x24001708
 801450c:	240016e0 	.word	0x240016e0
 8014510:	240016a0 	.word	0x240016a0
 8014514:	240016e8 	.word	0x240016e8
 8014518:	24001210 	.word	0x24001210
 801451c:	2400120c 	.word	0x2400120c
 8014520:	240016f4 	.word	0x240016f4
 8014524:	240016f0 	.word	0x240016f0
 8014528:	e000ed04 	.word	0xe000ed04

0801452c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801452c:	b480      	push	{r7}
 801452e:	b083      	sub	sp, #12
 8014530:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014532:	4b05      	ldr	r3, [pc, #20]	@ (8014548 <xTaskGetTickCount+0x1c>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014538:	687b      	ldr	r3, [r7, #4]
}
 801453a:	4618      	mov	r0, r3
 801453c:	370c      	adds	r7, #12
 801453e:	46bd      	mov	sp, r7
 8014540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014544:	4770      	bx	lr
 8014546:	bf00      	nop
 8014548:	240016e4 	.word	0x240016e4

0801454c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b082      	sub	sp, #8
 8014550:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014552:	f001 fdd1 	bl	80160f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8014556:	2300      	movs	r3, #0
 8014558:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801455a:	4b04      	ldr	r3, [pc, #16]	@ (801456c <xTaskGetTickCountFromISR+0x20>)
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014560:	683b      	ldr	r3, [r7, #0]
}
 8014562:	4618      	mov	r0, r3
 8014564:	3708      	adds	r7, #8
 8014566:	46bd      	mov	sp, r7
 8014568:	bd80      	pop	{r7, pc}
 801456a:	bf00      	nop
 801456c:	240016e4 	.word	0x240016e4

08014570 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b086      	sub	sp, #24
 8014574:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014576:	2300      	movs	r3, #0
 8014578:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801457a:	4b4f      	ldr	r3, [pc, #316]	@ (80146b8 <xTaskIncrementTick+0x148>)
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	2b00      	cmp	r3, #0
 8014580:	f040 8090 	bne.w	80146a4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014584:	4b4d      	ldr	r3, [pc, #308]	@ (80146bc <xTaskIncrementTick+0x14c>)
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	3301      	adds	r3, #1
 801458a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801458c:	4a4b      	ldr	r2, [pc, #300]	@ (80146bc <xTaskIncrementTick+0x14c>)
 801458e:	693b      	ldr	r3, [r7, #16]
 8014590:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014592:	693b      	ldr	r3, [r7, #16]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d121      	bne.n	80145dc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8014598:	4b49      	ldr	r3, [pc, #292]	@ (80146c0 <xTaskIncrementTick+0x150>)
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d00b      	beq.n	80145ba <xTaskIncrementTick+0x4a>
	__asm volatile
 80145a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145a6:	f383 8811 	msr	BASEPRI, r3
 80145aa:	f3bf 8f6f 	isb	sy
 80145ae:	f3bf 8f4f 	dsb	sy
 80145b2:	603b      	str	r3, [r7, #0]
}
 80145b4:	bf00      	nop
 80145b6:	bf00      	nop
 80145b8:	e7fd      	b.n	80145b6 <xTaskIncrementTick+0x46>
 80145ba:	4b41      	ldr	r3, [pc, #260]	@ (80146c0 <xTaskIncrementTick+0x150>)
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	60fb      	str	r3, [r7, #12]
 80145c0:	4b40      	ldr	r3, [pc, #256]	@ (80146c4 <xTaskIncrementTick+0x154>)
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	4a3e      	ldr	r2, [pc, #248]	@ (80146c0 <xTaskIncrementTick+0x150>)
 80145c6:	6013      	str	r3, [r2, #0]
 80145c8:	4a3e      	ldr	r2, [pc, #248]	@ (80146c4 <xTaskIncrementTick+0x154>)
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	6013      	str	r3, [r2, #0]
 80145ce:	4b3e      	ldr	r3, [pc, #248]	@ (80146c8 <xTaskIncrementTick+0x158>)
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	3301      	adds	r3, #1
 80145d4:	4a3c      	ldr	r2, [pc, #240]	@ (80146c8 <xTaskIncrementTick+0x158>)
 80145d6:	6013      	str	r3, [r2, #0]
 80145d8:	f000 fb84 	bl	8014ce4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80145dc:	4b3b      	ldr	r3, [pc, #236]	@ (80146cc <xTaskIncrementTick+0x15c>)
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	693a      	ldr	r2, [r7, #16]
 80145e2:	429a      	cmp	r2, r3
 80145e4:	d349      	bcc.n	801467a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80145e6:	4b36      	ldr	r3, [pc, #216]	@ (80146c0 <xTaskIncrementTick+0x150>)
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d104      	bne.n	80145fa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80145f0:	4b36      	ldr	r3, [pc, #216]	@ (80146cc <xTaskIncrementTick+0x15c>)
 80145f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80145f6:	601a      	str	r2, [r3, #0]
					break;
 80145f8:	e03f      	b.n	801467a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80145fa:	4b31      	ldr	r3, [pc, #196]	@ (80146c0 <xTaskIncrementTick+0x150>)
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	68db      	ldr	r3, [r3, #12]
 8014600:	68db      	ldr	r3, [r3, #12]
 8014602:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014604:	68bb      	ldr	r3, [r7, #8]
 8014606:	685b      	ldr	r3, [r3, #4]
 8014608:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801460a:	693a      	ldr	r2, [r7, #16]
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	429a      	cmp	r2, r3
 8014610:	d203      	bcs.n	801461a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014612:	4a2e      	ldr	r2, [pc, #184]	@ (80146cc <xTaskIncrementTick+0x15c>)
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014618:	e02f      	b.n	801467a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	3304      	adds	r3, #4
 801461e:	4618      	mov	r0, r3
 8014620:	f7fe fc1e 	bl	8012e60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014624:	68bb      	ldr	r3, [r7, #8]
 8014626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014628:	2b00      	cmp	r3, #0
 801462a:	d004      	beq.n	8014636 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801462c:	68bb      	ldr	r3, [r7, #8]
 801462e:	3318      	adds	r3, #24
 8014630:	4618      	mov	r0, r3
 8014632:	f7fe fc15 	bl	8012e60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014636:	68bb      	ldr	r3, [r7, #8]
 8014638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801463a:	4b25      	ldr	r3, [pc, #148]	@ (80146d0 <xTaskIncrementTick+0x160>)
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	429a      	cmp	r2, r3
 8014640:	d903      	bls.n	801464a <xTaskIncrementTick+0xda>
 8014642:	68bb      	ldr	r3, [r7, #8]
 8014644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014646:	4a22      	ldr	r2, [pc, #136]	@ (80146d0 <xTaskIncrementTick+0x160>)
 8014648:	6013      	str	r3, [r2, #0]
 801464a:	68bb      	ldr	r3, [r7, #8]
 801464c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801464e:	4613      	mov	r3, r2
 8014650:	009b      	lsls	r3, r3, #2
 8014652:	4413      	add	r3, r2
 8014654:	009b      	lsls	r3, r3, #2
 8014656:	4a1f      	ldr	r2, [pc, #124]	@ (80146d4 <xTaskIncrementTick+0x164>)
 8014658:	441a      	add	r2, r3
 801465a:	68bb      	ldr	r3, [r7, #8]
 801465c:	3304      	adds	r3, #4
 801465e:	4619      	mov	r1, r3
 8014660:	4610      	mov	r0, r2
 8014662:	f7fe fba0 	bl	8012da6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014666:	68bb      	ldr	r3, [r7, #8]
 8014668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801466a:	4b1b      	ldr	r3, [pc, #108]	@ (80146d8 <xTaskIncrementTick+0x168>)
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014670:	429a      	cmp	r2, r3
 8014672:	d3b8      	bcc.n	80145e6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8014674:	2301      	movs	r3, #1
 8014676:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014678:	e7b5      	b.n	80145e6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801467a:	4b17      	ldr	r3, [pc, #92]	@ (80146d8 <xTaskIncrementTick+0x168>)
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014680:	4914      	ldr	r1, [pc, #80]	@ (80146d4 <xTaskIncrementTick+0x164>)
 8014682:	4613      	mov	r3, r2
 8014684:	009b      	lsls	r3, r3, #2
 8014686:	4413      	add	r3, r2
 8014688:	009b      	lsls	r3, r3, #2
 801468a:	440b      	add	r3, r1
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	2b01      	cmp	r3, #1
 8014690:	d901      	bls.n	8014696 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8014692:	2301      	movs	r3, #1
 8014694:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014696:	4b11      	ldr	r3, [pc, #68]	@ (80146dc <xTaskIncrementTick+0x16c>)
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d007      	beq.n	80146ae <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 801469e:	2301      	movs	r3, #1
 80146a0:	617b      	str	r3, [r7, #20]
 80146a2:	e004      	b.n	80146ae <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80146a4:	4b0e      	ldr	r3, [pc, #56]	@ (80146e0 <xTaskIncrementTick+0x170>)
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	3301      	adds	r3, #1
 80146aa:	4a0d      	ldr	r2, [pc, #52]	@ (80146e0 <xTaskIncrementTick+0x170>)
 80146ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80146ae:	697b      	ldr	r3, [r7, #20]
}
 80146b0:	4618      	mov	r0, r3
 80146b2:	3718      	adds	r7, #24
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}
 80146b8:	24001708 	.word	0x24001708
 80146bc:	240016e4 	.word	0x240016e4
 80146c0:	24001698 	.word	0x24001698
 80146c4:	2400169c 	.word	0x2400169c
 80146c8:	240016f8 	.word	0x240016f8
 80146cc:	24001700 	.word	0x24001700
 80146d0:	240016e8 	.word	0x240016e8
 80146d4:	24001210 	.word	0x24001210
 80146d8:	2400120c 	.word	0x2400120c
 80146dc:	240016f4 	.word	0x240016f4
 80146e0:	240016f0 	.word	0x240016f0

080146e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80146e4:	b480      	push	{r7}
 80146e6:	b085      	sub	sp, #20
 80146e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80146ea:	4b2b      	ldr	r3, [pc, #172]	@ (8014798 <vTaskSwitchContext+0xb4>)
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d003      	beq.n	80146fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80146f2:	4b2a      	ldr	r3, [pc, #168]	@ (801479c <vTaskSwitchContext+0xb8>)
 80146f4:	2201      	movs	r2, #1
 80146f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80146f8:	e047      	b.n	801478a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80146fa:	4b28      	ldr	r3, [pc, #160]	@ (801479c <vTaskSwitchContext+0xb8>)
 80146fc:	2200      	movs	r2, #0
 80146fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014700:	4b27      	ldr	r3, [pc, #156]	@ (80147a0 <vTaskSwitchContext+0xbc>)
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	60fb      	str	r3, [r7, #12]
 8014706:	e011      	b.n	801472c <vTaskSwitchContext+0x48>
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d10b      	bne.n	8014726 <vTaskSwitchContext+0x42>
	__asm volatile
 801470e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014712:	f383 8811 	msr	BASEPRI, r3
 8014716:	f3bf 8f6f 	isb	sy
 801471a:	f3bf 8f4f 	dsb	sy
 801471e:	607b      	str	r3, [r7, #4]
}
 8014720:	bf00      	nop
 8014722:	bf00      	nop
 8014724:	e7fd      	b.n	8014722 <vTaskSwitchContext+0x3e>
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	3b01      	subs	r3, #1
 801472a:	60fb      	str	r3, [r7, #12]
 801472c:	491d      	ldr	r1, [pc, #116]	@ (80147a4 <vTaskSwitchContext+0xc0>)
 801472e:	68fa      	ldr	r2, [r7, #12]
 8014730:	4613      	mov	r3, r2
 8014732:	009b      	lsls	r3, r3, #2
 8014734:	4413      	add	r3, r2
 8014736:	009b      	lsls	r3, r3, #2
 8014738:	440b      	add	r3, r1
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d0e3      	beq.n	8014708 <vTaskSwitchContext+0x24>
 8014740:	68fa      	ldr	r2, [r7, #12]
 8014742:	4613      	mov	r3, r2
 8014744:	009b      	lsls	r3, r3, #2
 8014746:	4413      	add	r3, r2
 8014748:	009b      	lsls	r3, r3, #2
 801474a:	4a16      	ldr	r2, [pc, #88]	@ (80147a4 <vTaskSwitchContext+0xc0>)
 801474c:	4413      	add	r3, r2
 801474e:	60bb      	str	r3, [r7, #8]
 8014750:	68bb      	ldr	r3, [r7, #8]
 8014752:	685b      	ldr	r3, [r3, #4]
 8014754:	685a      	ldr	r2, [r3, #4]
 8014756:	68bb      	ldr	r3, [r7, #8]
 8014758:	605a      	str	r2, [r3, #4]
 801475a:	68bb      	ldr	r3, [r7, #8]
 801475c:	685a      	ldr	r2, [r3, #4]
 801475e:	68bb      	ldr	r3, [r7, #8]
 8014760:	3308      	adds	r3, #8
 8014762:	429a      	cmp	r2, r3
 8014764:	d104      	bne.n	8014770 <vTaskSwitchContext+0x8c>
 8014766:	68bb      	ldr	r3, [r7, #8]
 8014768:	685b      	ldr	r3, [r3, #4]
 801476a:	685a      	ldr	r2, [r3, #4]
 801476c:	68bb      	ldr	r3, [r7, #8]
 801476e:	605a      	str	r2, [r3, #4]
 8014770:	68bb      	ldr	r3, [r7, #8]
 8014772:	685b      	ldr	r3, [r3, #4]
 8014774:	68db      	ldr	r3, [r3, #12]
 8014776:	4a0c      	ldr	r2, [pc, #48]	@ (80147a8 <vTaskSwitchContext+0xc4>)
 8014778:	6013      	str	r3, [r2, #0]
 801477a:	4a09      	ldr	r2, [pc, #36]	@ (80147a0 <vTaskSwitchContext+0xbc>)
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014780:	4b09      	ldr	r3, [pc, #36]	@ (80147a8 <vTaskSwitchContext+0xc4>)
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	3354      	adds	r3, #84	@ 0x54
 8014786:	4a09      	ldr	r2, [pc, #36]	@ (80147ac <vTaskSwitchContext+0xc8>)
 8014788:	6013      	str	r3, [r2, #0]
}
 801478a:	bf00      	nop
 801478c:	3714      	adds	r7, #20
 801478e:	46bd      	mov	sp, r7
 8014790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014794:	4770      	bx	lr
 8014796:	bf00      	nop
 8014798:	24001708 	.word	0x24001708
 801479c:	240016f4 	.word	0x240016f4
 80147a0:	240016e8 	.word	0x240016e8
 80147a4:	24001210 	.word	0x24001210
 80147a8:	2400120c 	.word	0x2400120c
 80147ac:	24000020 	.word	0x24000020

080147b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b084      	sub	sp, #16
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
 80147b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d10b      	bne.n	80147d8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80147c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147c4:	f383 8811 	msr	BASEPRI, r3
 80147c8:	f3bf 8f6f 	isb	sy
 80147cc:	f3bf 8f4f 	dsb	sy
 80147d0:	60fb      	str	r3, [r7, #12]
}
 80147d2:	bf00      	nop
 80147d4:	bf00      	nop
 80147d6:	e7fd      	b.n	80147d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80147d8:	4b07      	ldr	r3, [pc, #28]	@ (80147f8 <vTaskPlaceOnEventList+0x48>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	3318      	adds	r3, #24
 80147de:	4619      	mov	r1, r3
 80147e0:	6878      	ldr	r0, [r7, #4]
 80147e2:	f7fe fb04 	bl	8012dee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80147e6:	2101      	movs	r1, #1
 80147e8:	6838      	ldr	r0, [r7, #0]
 80147ea:	f000 fe45 	bl	8015478 <prvAddCurrentTaskToDelayedList>
}
 80147ee:	bf00      	nop
 80147f0:	3710      	adds	r7, #16
 80147f2:	46bd      	mov	sp, r7
 80147f4:	bd80      	pop	{r7, pc}
 80147f6:	bf00      	nop
 80147f8:	2400120c 	.word	0x2400120c

080147fc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b086      	sub	sp, #24
 8014800:	af00      	add	r7, sp, #0
 8014802:	60f8      	str	r0, [r7, #12]
 8014804:	60b9      	str	r1, [r7, #8]
 8014806:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d10b      	bne.n	8014826 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 801480e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014812:	f383 8811 	msr	BASEPRI, r3
 8014816:	f3bf 8f6f 	isb	sy
 801481a:	f3bf 8f4f 	dsb	sy
 801481e:	617b      	str	r3, [r7, #20]
}
 8014820:	bf00      	nop
 8014822:	bf00      	nop
 8014824:	e7fd      	b.n	8014822 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014826:	4b12      	ldr	r3, [pc, #72]	@ (8014870 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d10b      	bne.n	8014846 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 801482e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014832:	f383 8811 	msr	BASEPRI, r3
 8014836:	f3bf 8f6f 	isb	sy
 801483a:	f3bf 8f4f 	dsb	sy
 801483e:	613b      	str	r3, [r7, #16]
}
 8014840:	bf00      	nop
 8014842:	bf00      	nop
 8014844:	e7fd      	b.n	8014842 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014846:	4b0b      	ldr	r3, [pc, #44]	@ (8014874 <vTaskPlaceOnUnorderedEventList+0x78>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	68ba      	ldr	r2, [r7, #8]
 801484c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8014850:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014852:	4b08      	ldr	r3, [pc, #32]	@ (8014874 <vTaskPlaceOnUnorderedEventList+0x78>)
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	3318      	adds	r3, #24
 8014858:	4619      	mov	r1, r3
 801485a:	68f8      	ldr	r0, [r7, #12]
 801485c:	f7fe faa3 	bl	8012da6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014860:	2101      	movs	r1, #1
 8014862:	6878      	ldr	r0, [r7, #4]
 8014864:	f000 fe08 	bl	8015478 <prvAddCurrentTaskToDelayedList>
}
 8014868:	bf00      	nop
 801486a:	3718      	adds	r7, #24
 801486c:	46bd      	mov	sp, r7
 801486e:	bd80      	pop	{r7, pc}
 8014870:	24001708 	.word	0x24001708
 8014874:	2400120c 	.word	0x2400120c

08014878 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014878:	b580      	push	{r7, lr}
 801487a:	b086      	sub	sp, #24
 801487c:	af00      	add	r7, sp, #0
 801487e:	60f8      	str	r0, [r7, #12]
 8014880:	60b9      	str	r1, [r7, #8]
 8014882:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d10b      	bne.n	80148a2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801488a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801488e:	f383 8811 	msr	BASEPRI, r3
 8014892:	f3bf 8f6f 	isb	sy
 8014896:	f3bf 8f4f 	dsb	sy
 801489a:	617b      	str	r3, [r7, #20]
}
 801489c:	bf00      	nop
 801489e:	bf00      	nop
 80148a0:	e7fd      	b.n	801489e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80148a2:	4b0a      	ldr	r3, [pc, #40]	@ (80148cc <vTaskPlaceOnEventListRestricted+0x54>)
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	3318      	adds	r3, #24
 80148a8:	4619      	mov	r1, r3
 80148aa:	68f8      	ldr	r0, [r7, #12]
 80148ac:	f7fe fa7b 	bl	8012da6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d002      	beq.n	80148bc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80148b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80148ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80148bc:	6879      	ldr	r1, [r7, #4]
 80148be:	68b8      	ldr	r0, [r7, #8]
 80148c0:	f000 fdda 	bl	8015478 <prvAddCurrentTaskToDelayedList>
	}
 80148c4:	bf00      	nop
 80148c6:	3718      	adds	r7, #24
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd80      	pop	{r7, pc}
 80148cc:	2400120c 	.word	0x2400120c

080148d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b086      	sub	sp, #24
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	68db      	ldr	r3, [r3, #12]
 80148dc:	68db      	ldr	r3, [r3, #12]
 80148de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80148e0:	693b      	ldr	r3, [r7, #16]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d10b      	bne.n	80148fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80148e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148ea:	f383 8811 	msr	BASEPRI, r3
 80148ee:	f3bf 8f6f 	isb	sy
 80148f2:	f3bf 8f4f 	dsb	sy
 80148f6:	60fb      	str	r3, [r7, #12]
}
 80148f8:	bf00      	nop
 80148fa:	bf00      	nop
 80148fc:	e7fd      	b.n	80148fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80148fe:	693b      	ldr	r3, [r7, #16]
 8014900:	3318      	adds	r3, #24
 8014902:	4618      	mov	r0, r3
 8014904:	f7fe faac 	bl	8012e60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014908:	4b1d      	ldr	r3, [pc, #116]	@ (8014980 <xTaskRemoveFromEventList+0xb0>)
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d11d      	bne.n	801494c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014910:	693b      	ldr	r3, [r7, #16]
 8014912:	3304      	adds	r3, #4
 8014914:	4618      	mov	r0, r3
 8014916:	f7fe faa3 	bl	8012e60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801491a:	693b      	ldr	r3, [r7, #16]
 801491c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801491e:	4b19      	ldr	r3, [pc, #100]	@ (8014984 <xTaskRemoveFromEventList+0xb4>)
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	429a      	cmp	r2, r3
 8014924:	d903      	bls.n	801492e <xTaskRemoveFromEventList+0x5e>
 8014926:	693b      	ldr	r3, [r7, #16]
 8014928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801492a:	4a16      	ldr	r2, [pc, #88]	@ (8014984 <xTaskRemoveFromEventList+0xb4>)
 801492c:	6013      	str	r3, [r2, #0]
 801492e:	693b      	ldr	r3, [r7, #16]
 8014930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014932:	4613      	mov	r3, r2
 8014934:	009b      	lsls	r3, r3, #2
 8014936:	4413      	add	r3, r2
 8014938:	009b      	lsls	r3, r3, #2
 801493a:	4a13      	ldr	r2, [pc, #76]	@ (8014988 <xTaskRemoveFromEventList+0xb8>)
 801493c:	441a      	add	r2, r3
 801493e:	693b      	ldr	r3, [r7, #16]
 8014940:	3304      	adds	r3, #4
 8014942:	4619      	mov	r1, r3
 8014944:	4610      	mov	r0, r2
 8014946:	f7fe fa2e 	bl	8012da6 <vListInsertEnd>
 801494a:	e005      	b.n	8014958 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801494c:	693b      	ldr	r3, [r7, #16]
 801494e:	3318      	adds	r3, #24
 8014950:	4619      	mov	r1, r3
 8014952:	480e      	ldr	r0, [pc, #56]	@ (801498c <xTaskRemoveFromEventList+0xbc>)
 8014954:	f7fe fa27 	bl	8012da6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014958:	693b      	ldr	r3, [r7, #16]
 801495a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801495c:	4b0c      	ldr	r3, [pc, #48]	@ (8014990 <xTaskRemoveFromEventList+0xc0>)
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014962:	429a      	cmp	r2, r3
 8014964:	d905      	bls.n	8014972 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014966:	2301      	movs	r3, #1
 8014968:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801496a:	4b0a      	ldr	r3, [pc, #40]	@ (8014994 <xTaskRemoveFromEventList+0xc4>)
 801496c:	2201      	movs	r2, #1
 801496e:	601a      	str	r2, [r3, #0]
 8014970:	e001      	b.n	8014976 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8014972:	2300      	movs	r3, #0
 8014974:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014976:	697b      	ldr	r3, [r7, #20]
}
 8014978:	4618      	mov	r0, r3
 801497a:	3718      	adds	r7, #24
 801497c:	46bd      	mov	sp, r7
 801497e:	bd80      	pop	{r7, pc}
 8014980:	24001708 	.word	0x24001708
 8014984:	240016e8 	.word	0x240016e8
 8014988:	24001210 	.word	0x24001210
 801498c:	240016a0 	.word	0x240016a0
 8014990:	2400120c 	.word	0x2400120c
 8014994:	240016f4 	.word	0x240016f4

08014998 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014998:	b580      	push	{r7, lr}
 801499a:	b086      	sub	sp, #24
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
 80149a0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80149a2:	4b2a      	ldr	r3, [pc, #168]	@ (8014a4c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d10b      	bne.n	80149c2 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 80149aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149ae:	f383 8811 	msr	BASEPRI, r3
 80149b2:	f3bf 8f6f 	isb	sy
 80149b6:	f3bf 8f4f 	dsb	sy
 80149ba:	613b      	str	r3, [r7, #16]
}
 80149bc:	bf00      	nop
 80149be:	bf00      	nop
 80149c0:	e7fd      	b.n	80149be <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80149c2:	683b      	ldr	r3, [r7, #0]
 80149c4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	68db      	ldr	r3, [r3, #12]
 80149d0:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80149d2:	697b      	ldr	r3, [r7, #20]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d10b      	bne.n	80149f0 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 80149d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149dc:	f383 8811 	msr	BASEPRI, r3
 80149e0:	f3bf 8f6f 	isb	sy
 80149e4:	f3bf 8f4f 	dsb	sy
 80149e8:	60fb      	str	r3, [r7, #12]
}
 80149ea:	bf00      	nop
 80149ec:	bf00      	nop
 80149ee:	e7fd      	b.n	80149ec <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 80149f0:	6878      	ldr	r0, [r7, #4]
 80149f2:	f7fe fa35 	bl	8012e60 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80149f6:	697b      	ldr	r3, [r7, #20]
 80149f8:	3304      	adds	r3, #4
 80149fa:	4618      	mov	r0, r3
 80149fc:	f7fe fa30 	bl	8012e60 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014a00:	697b      	ldr	r3, [r7, #20]
 8014a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a04:	4b12      	ldr	r3, [pc, #72]	@ (8014a50 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	d903      	bls.n	8014a14 <vTaskRemoveFromUnorderedEventList+0x7c>
 8014a0c:	697b      	ldr	r3, [r7, #20]
 8014a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a10:	4a0f      	ldr	r2, [pc, #60]	@ (8014a50 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014a12:	6013      	str	r3, [r2, #0]
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a18:	4613      	mov	r3, r2
 8014a1a:	009b      	lsls	r3, r3, #2
 8014a1c:	4413      	add	r3, r2
 8014a1e:	009b      	lsls	r3, r3, #2
 8014a20:	4a0c      	ldr	r2, [pc, #48]	@ (8014a54 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014a22:	441a      	add	r2, r3
 8014a24:	697b      	ldr	r3, [r7, #20]
 8014a26:	3304      	adds	r3, #4
 8014a28:	4619      	mov	r1, r3
 8014a2a:	4610      	mov	r0, r2
 8014a2c:	f7fe f9bb 	bl	8012da6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014a30:	697b      	ldr	r3, [r7, #20]
 8014a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a34:	4b08      	ldr	r3, [pc, #32]	@ (8014a58 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	d902      	bls.n	8014a44 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014a3e:	4b07      	ldr	r3, [pc, #28]	@ (8014a5c <vTaskRemoveFromUnorderedEventList+0xc4>)
 8014a40:	2201      	movs	r2, #1
 8014a42:	601a      	str	r2, [r3, #0]
	}
}
 8014a44:	bf00      	nop
 8014a46:	3718      	adds	r7, #24
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd80      	pop	{r7, pc}
 8014a4c:	24001708 	.word	0x24001708
 8014a50:	240016e8 	.word	0x240016e8
 8014a54:	24001210 	.word	0x24001210
 8014a58:	2400120c 	.word	0x2400120c
 8014a5c:	240016f4 	.word	0x240016f4

08014a60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014a60:	b480      	push	{r7}
 8014a62:	b083      	sub	sp, #12
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014a68:	4b06      	ldr	r3, [pc, #24]	@ (8014a84 <vTaskInternalSetTimeOutState+0x24>)
 8014a6a:	681a      	ldr	r2, [r3, #0]
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014a70:	4b05      	ldr	r3, [pc, #20]	@ (8014a88 <vTaskInternalSetTimeOutState+0x28>)
 8014a72:	681a      	ldr	r2, [r3, #0]
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	605a      	str	r2, [r3, #4]
}
 8014a78:	bf00      	nop
 8014a7a:	370c      	adds	r7, #12
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a82:	4770      	bx	lr
 8014a84:	240016f8 	.word	0x240016f8
 8014a88:	240016e4 	.word	0x240016e4

08014a8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b088      	sub	sp, #32
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
 8014a94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d10b      	bne.n	8014ab4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8014a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014aa0:	f383 8811 	msr	BASEPRI, r3
 8014aa4:	f3bf 8f6f 	isb	sy
 8014aa8:	f3bf 8f4f 	dsb	sy
 8014aac:	613b      	str	r3, [r7, #16]
}
 8014aae:	bf00      	nop
 8014ab0:	bf00      	nop
 8014ab2:	e7fd      	b.n	8014ab0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014ab4:	683b      	ldr	r3, [r7, #0]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d10b      	bne.n	8014ad2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8014aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014abe:	f383 8811 	msr	BASEPRI, r3
 8014ac2:	f3bf 8f6f 	isb	sy
 8014ac6:	f3bf 8f4f 	dsb	sy
 8014aca:	60fb      	str	r3, [r7, #12]
}
 8014acc:	bf00      	nop
 8014ace:	bf00      	nop
 8014ad0:	e7fd      	b.n	8014ace <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8014ad2:	f001 fa31 	bl	8015f38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8014b4c <xTaskCheckForTimeOut+0xc0>)
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	685b      	ldr	r3, [r3, #4]
 8014ae0:	69ba      	ldr	r2, [r7, #24]
 8014ae2:	1ad3      	subs	r3, r2, r3
 8014ae4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014aee:	d102      	bne.n	8014af6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014af0:	2300      	movs	r3, #0
 8014af2:	61fb      	str	r3, [r7, #28]
 8014af4:	e023      	b.n	8014b3e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	681a      	ldr	r2, [r3, #0]
 8014afa:	4b15      	ldr	r3, [pc, #84]	@ (8014b50 <xTaskCheckForTimeOut+0xc4>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	429a      	cmp	r2, r3
 8014b00:	d007      	beq.n	8014b12 <xTaskCheckForTimeOut+0x86>
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	685b      	ldr	r3, [r3, #4]
 8014b06:	69ba      	ldr	r2, [r7, #24]
 8014b08:	429a      	cmp	r2, r3
 8014b0a:	d302      	bcc.n	8014b12 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014b0c:	2301      	movs	r3, #1
 8014b0e:	61fb      	str	r3, [r7, #28]
 8014b10:	e015      	b.n	8014b3e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014b12:	683b      	ldr	r3, [r7, #0]
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	697a      	ldr	r2, [r7, #20]
 8014b18:	429a      	cmp	r2, r3
 8014b1a:	d20b      	bcs.n	8014b34 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014b1c:	683b      	ldr	r3, [r7, #0]
 8014b1e:	681a      	ldr	r2, [r3, #0]
 8014b20:	697b      	ldr	r3, [r7, #20]
 8014b22:	1ad2      	subs	r2, r2, r3
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014b28:	6878      	ldr	r0, [r7, #4]
 8014b2a:	f7ff ff99 	bl	8014a60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014b2e:	2300      	movs	r3, #0
 8014b30:	61fb      	str	r3, [r7, #28]
 8014b32:	e004      	b.n	8014b3e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	2200      	movs	r2, #0
 8014b38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014b3a:	2301      	movs	r3, #1
 8014b3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014b3e:	f001 fa2d 	bl	8015f9c <vPortExitCritical>

	return xReturn;
 8014b42:	69fb      	ldr	r3, [r7, #28]
}
 8014b44:	4618      	mov	r0, r3
 8014b46:	3720      	adds	r7, #32
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	bd80      	pop	{r7, pc}
 8014b4c:	240016e4 	.word	0x240016e4
 8014b50:	240016f8 	.word	0x240016f8

08014b54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014b54:	b480      	push	{r7}
 8014b56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014b58:	4b03      	ldr	r3, [pc, #12]	@ (8014b68 <vTaskMissedYield+0x14>)
 8014b5a:	2201      	movs	r2, #1
 8014b5c:	601a      	str	r2, [r3, #0]
}
 8014b5e:	bf00      	nop
 8014b60:	46bd      	mov	sp, r7
 8014b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b66:	4770      	bx	lr
 8014b68:	240016f4 	.word	0x240016f4

08014b6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b082      	sub	sp, #8
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014b74:	f000 f852 	bl	8014c1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014b78:	4b06      	ldr	r3, [pc, #24]	@ (8014b94 <prvIdleTask+0x28>)
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	2b01      	cmp	r3, #1
 8014b7e:	d9f9      	bls.n	8014b74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014b80:	4b05      	ldr	r3, [pc, #20]	@ (8014b98 <prvIdleTask+0x2c>)
 8014b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014b86:	601a      	str	r2, [r3, #0]
 8014b88:	f3bf 8f4f 	dsb	sy
 8014b8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014b90:	e7f0      	b.n	8014b74 <prvIdleTask+0x8>
 8014b92:	bf00      	nop
 8014b94:	24001210 	.word	0x24001210
 8014b98:	e000ed04 	.word	0xe000ed04

08014b9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b082      	sub	sp, #8
 8014ba0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	607b      	str	r3, [r7, #4]
 8014ba6:	e00c      	b.n	8014bc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014ba8:	687a      	ldr	r2, [r7, #4]
 8014baa:	4613      	mov	r3, r2
 8014bac:	009b      	lsls	r3, r3, #2
 8014bae:	4413      	add	r3, r2
 8014bb0:	009b      	lsls	r3, r3, #2
 8014bb2:	4a12      	ldr	r2, [pc, #72]	@ (8014bfc <prvInitialiseTaskLists+0x60>)
 8014bb4:	4413      	add	r3, r2
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	f7fe f8c8 	bl	8012d4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	3301      	adds	r3, #1
 8014bc0:	607b      	str	r3, [r7, #4]
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	2b37      	cmp	r3, #55	@ 0x37
 8014bc6:	d9ef      	bls.n	8014ba8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014bc8:	480d      	ldr	r0, [pc, #52]	@ (8014c00 <prvInitialiseTaskLists+0x64>)
 8014bca:	f7fe f8bf 	bl	8012d4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014bce:	480d      	ldr	r0, [pc, #52]	@ (8014c04 <prvInitialiseTaskLists+0x68>)
 8014bd0:	f7fe f8bc 	bl	8012d4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014bd4:	480c      	ldr	r0, [pc, #48]	@ (8014c08 <prvInitialiseTaskLists+0x6c>)
 8014bd6:	f7fe f8b9 	bl	8012d4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014bda:	480c      	ldr	r0, [pc, #48]	@ (8014c0c <prvInitialiseTaskLists+0x70>)
 8014bdc:	f7fe f8b6 	bl	8012d4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014be0:	480b      	ldr	r0, [pc, #44]	@ (8014c10 <prvInitialiseTaskLists+0x74>)
 8014be2:	f7fe f8b3 	bl	8012d4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014be6:	4b0b      	ldr	r3, [pc, #44]	@ (8014c14 <prvInitialiseTaskLists+0x78>)
 8014be8:	4a05      	ldr	r2, [pc, #20]	@ (8014c00 <prvInitialiseTaskLists+0x64>)
 8014bea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014bec:	4b0a      	ldr	r3, [pc, #40]	@ (8014c18 <prvInitialiseTaskLists+0x7c>)
 8014bee:	4a05      	ldr	r2, [pc, #20]	@ (8014c04 <prvInitialiseTaskLists+0x68>)
 8014bf0:	601a      	str	r2, [r3, #0]
}
 8014bf2:	bf00      	nop
 8014bf4:	3708      	adds	r7, #8
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}
 8014bfa:	bf00      	nop
 8014bfc:	24001210 	.word	0x24001210
 8014c00:	24001670 	.word	0x24001670
 8014c04:	24001684 	.word	0x24001684
 8014c08:	240016a0 	.word	0x240016a0
 8014c0c:	240016b4 	.word	0x240016b4
 8014c10:	240016cc 	.word	0x240016cc
 8014c14:	24001698 	.word	0x24001698
 8014c18:	2400169c 	.word	0x2400169c

08014c1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b082      	sub	sp, #8
 8014c20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014c22:	e019      	b.n	8014c58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014c24:	f001 f988 	bl	8015f38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c28:	4b10      	ldr	r3, [pc, #64]	@ (8014c6c <prvCheckTasksWaitingTermination+0x50>)
 8014c2a:	68db      	ldr	r3, [r3, #12]
 8014c2c:	68db      	ldr	r3, [r3, #12]
 8014c2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	3304      	adds	r3, #4
 8014c34:	4618      	mov	r0, r3
 8014c36:	f7fe f913 	bl	8012e60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8014c70 <prvCheckTasksWaitingTermination+0x54>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	3b01      	subs	r3, #1
 8014c40:	4a0b      	ldr	r2, [pc, #44]	@ (8014c70 <prvCheckTasksWaitingTermination+0x54>)
 8014c42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014c44:	4b0b      	ldr	r3, [pc, #44]	@ (8014c74 <prvCheckTasksWaitingTermination+0x58>)
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	3b01      	subs	r3, #1
 8014c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8014c74 <prvCheckTasksWaitingTermination+0x58>)
 8014c4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014c4e:	f001 f9a5 	bl	8015f9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014c52:	6878      	ldr	r0, [r7, #4]
 8014c54:	f000 f810 	bl	8014c78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014c58:	4b06      	ldr	r3, [pc, #24]	@ (8014c74 <prvCheckTasksWaitingTermination+0x58>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d1e1      	bne.n	8014c24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014c60:	bf00      	nop
 8014c62:	bf00      	nop
 8014c64:	3708      	adds	r7, #8
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}
 8014c6a:	bf00      	nop
 8014c6c:	240016b4 	.word	0x240016b4
 8014c70:	240016e0 	.word	0x240016e0
 8014c74:	240016c8 	.word	0x240016c8

08014c78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b084      	sub	sp, #16
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	3354      	adds	r3, #84	@ 0x54
 8014c84:	4618      	mov	r0, r3
 8014c86:	f002 f821 	bl	8016ccc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d108      	bne.n	8014ca6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c98:	4618      	mov	r0, r3
 8014c9a:	f001 fb3d 	bl	8016318 <vPortFree>
				vPortFree( pxTCB );
 8014c9e:	6878      	ldr	r0, [r7, #4]
 8014ca0:	f001 fb3a 	bl	8016318 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014ca4:	e019      	b.n	8014cda <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014cac:	2b01      	cmp	r3, #1
 8014cae:	d103      	bne.n	8014cb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014cb0:	6878      	ldr	r0, [r7, #4]
 8014cb2:	f001 fb31 	bl	8016318 <vPortFree>
	}
 8014cb6:	e010      	b.n	8014cda <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014cbe:	2b02      	cmp	r3, #2
 8014cc0:	d00b      	beq.n	8014cda <prvDeleteTCB+0x62>
	__asm volatile
 8014cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cc6:	f383 8811 	msr	BASEPRI, r3
 8014cca:	f3bf 8f6f 	isb	sy
 8014cce:	f3bf 8f4f 	dsb	sy
 8014cd2:	60fb      	str	r3, [r7, #12]
}
 8014cd4:	bf00      	nop
 8014cd6:	bf00      	nop
 8014cd8:	e7fd      	b.n	8014cd6 <prvDeleteTCB+0x5e>
	}
 8014cda:	bf00      	nop
 8014cdc:	3710      	adds	r7, #16
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	bd80      	pop	{r7, pc}
	...

08014ce4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014ce4:	b480      	push	{r7}
 8014ce6:	b083      	sub	sp, #12
 8014ce8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014cea:	4b0c      	ldr	r3, [pc, #48]	@ (8014d1c <prvResetNextTaskUnblockTime+0x38>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d104      	bne.n	8014cfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8014d20 <prvResetNextTaskUnblockTime+0x3c>)
 8014cf6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014cfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014cfc:	e008      	b.n	8014d10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cfe:	4b07      	ldr	r3, [pc, #28]	@ (8014d1c <prvResetNextTaskUnblockTime+0x38>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	68db      	ldr	r3, [r3, #12]
 8014d04:	68db      	ldr	r3, [r3, #12]
 8014d06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	685b      	ldr	r3, [r3, #4]
 8014d0c:	4a04      	ldr	r2, [pc, #16]	@ (8014d20 <prvResetNextTaskUnblockTime+0x3c>)
 8014d0e:	6013      	str	r3, [r2, #0]
}
 8014d10:	bf00      	nop
 8014d12:	370c      	adds	r7, #12
 8014d14:	46bd      	mov	sp, r7
 8014d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d1a:	4770      	bx	lr
 8014d1c:	24001698 	.word	0x24001698
 8014d20:	24001700 	.word	0x24001700

08014d24 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8014d24:	b480      	push	{r7}
 8014d26:	b083      	sub	sp, #12
 8014d28:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8014d2a:	4b05      	ldr	r3, [pc, #20]	@ (8014d40 <xTaskGetCurrentTaskHandle+0x1c>)
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8014d30:	687b      	ldr	r3, [r7, #4]
	}
 8014d32:	4618      	mov	r0, r3
 8014d34:	370c      	adds	r7, #12
 8014d36:	46bd      	mov	sp, r7
 8014d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3c:	4770      	bx	lr
 8014d3e:	bf00      	nop
 8014d40:	2400120c 	.word	0x2400120c

08014d44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014d44:	b480      	push	{r7}
 8014d46:	b083      	sub	sp, #12
 8014d48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8014d78 <xTaskGetSchedulerState+0x34>)
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d102      	bne.n	8014d58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014d52:	2301      	movs	r3, #1
 8014d54:	607b      	str	r3, [r7, #4]
 8014d56:	e008      	b.n	8014d6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014d58:	4b08      	ldr	r3, [pc, #32]	@ (8014d7c <xTaskGetSchedulerState+0x38>)
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d102      	bne.n	8014d66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014d60:	2302      	movs	r3, #2
 8014d62:	607b      	str	r3, [r7, #4]
 8014d64:	e001      	b.n	8014d6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014d66:	2300      	movs	r3, #0
 8014d68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014d6a:	687b      	ldr	r3, [r7, #4]
	}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	370c      	adds	r7, #12
 8014d70:	46bd      	mov	sp, r7
 8014d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d76:	4770      	bx	lr
 8014d78:	240016ec 	.word	0x240016ec
 8014d7c:	24001708 	.word	0x24001708

08014d80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b084      	sub	sp, #16
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d051      	beq.n	8014e3a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014d96:	68bb      	ldr	r3, [r7, #8]
 8014d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8014e44 <xTaskPriorityInherit+0xc4>)
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014da0:	429a      	cmp	r2, r3
 8014da2:	d241      	bcs.n	8014e28 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014da4:	68bb      	ldr	r3, [r7, #8]
 8014da6:	699b      	ldr	r3, [r3, #24]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	db06      	blt.n	8014dba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014dac:	4b25      	ldr	r3, [pc, #148]	@ (8014e44 <xTaskPriorityInherit+0xc4>)
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014db2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014db6:	68bb      	ldr	r3, [r7, #8]
 8014db8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014dba:	68bb      	ldr	r3, [r7, #8]
 8014dbc:	6959      	ldr	r1, [r3, #20]
 8014dbe:	68bb      	ldr	r3, [r7, #8]
 8014dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014dc2:	4613      	mov	r3, r2
 8014dc4:	009b      	lsls	r3, r3, #2
 8014dc6:	4413      	add	r3, r2
 8014dc8:	009b      	lsls	r3, r3, #2
 8014dca:	4a1f      	ldr	r2, [pc, #124]	@ (8014e48 <xTaskPriorityInherit+0xc8>)
 8014dcc:	4413      	add	r3, r2
 8014dce:	4299      	cmp	r1, r3
 8014dd0:	d122      	bne.n	8014e18 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	3304      	adds	r3, #4
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	f7fe f842 	bl	8012e60 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014ddc:	4b19      	ldr	r3, [pc, #100]	@ (8014e44 <xTaskPriorityInherit+0xc4>)
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014de2:	68bb      	ldr	r3, [r7, #8]
 8014de4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014de6:	68bb      	ldr	r3, [r7, #8]
 8014de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014dea:	4b18      	ldr	r3, [pc, #96]	@ (8014e4c <xTaskPriorityInherit+0xcc>)
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	429a      	cmp	r2, r3
 8014df0:	d903      	bls.n	8014dfa <xTaskPriorityInherit+0x7a>
 8014df2:	68bb      	ldr	r3, [r7, #8]
 8014df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014df6:	4a15      	ldr	r2, [pc, #84]	@ (8014e4c <xTaskPriorityInherit+0xcc>)
 8014df8:	6013      	str	r3, [r2, #0]
 8014dfa:	68bb      	ldr	r3, [r7, #8]
 8014dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014dfe:	4613      	mov	r3, r2
 8014e00:	009b      	lsls	r3, r3, #2
 8014e02:	4413      	add	r3, r2
 8014e04:	009b      	lsls	r3, r3, #2
 8014e06:	4a10      	ldr	r2, [pc, #64]	@ (8014e48 <xTaskPriorityInherit+0xc8>)
 8014e08:	441a      	add	r2, r3
 8014e0a:	68bb      	ldr	r3, [r7, #8]
 8014e0c:	3304      	adds	r3, #4
 8014e0e:	4619      	mov	r1, r3
 8014e10:	4610      	mov	r0, r2
 8014e12:	f7fd ffc8 	bl	8012da6 <vListInsertEnd>
 8014e16:	e004      	b.n	8014e22 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014e18:	4b0a      	ldr	r3, [pc, #40]	@ (8014e44 <xTaskPriorityInherit+0xc4>)
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e1e:	68bb      	ldr	r3, [r7, #8]
 8014e20:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014e22:	2301      	movs	r3, #1
 8014e24:	60fb      	str	r3, [r7, #12]
 8014e26:	e008      	b.n	8014e3a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014e28:	68bb      	ldr	r3, [r7, #8]
 8014e2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014e2c:	4b05      	ldr	r3, [pc, #20]	@ (8014e44 <xTaskPriorityInherit+0xc4>)
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e32:	429a      	cmp	r2, r3
 8014e34:	d201      	bcs.n	8014e3a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014e36:	2301      	movs	r3, #1
 8014e38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014e3a:	68fb      	ldr	r3, [r7, #12]
	}
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	3710      	adds	r7, #16
 8014e40:	46bd      	mov	sp, r7
 8014e42:	bd80      	pop	{r7, pc}
 8014e44:	2400120c 	.word	0x2400120c
 8014e48:	24001210 	.word	0x24001210
 8014e4c:	240016e8 	.word	0x240016e8

08014e50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b086      	sub	sp, #24
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d058      	beq.n	8014f18 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014e66:	4b2f      	ldr	r3, [pc, #188]	@ (8014f24 <xTaskPriorityDisinherit+0xd4>)
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	693a      	ldr	r2, [r7, #16]
 8014e6c:	429a      	cmp	r2, r3
 8014e6e:	d00b      	beq.n	8014e88 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8014e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e74:	f383 8811 	msr	BASEPRI, r3
 8014e78:	f3bf 8f6f 	isb	sy
 8014e7c:	f3bf 8f4f 	dsb	sy
 8014e80:	60fb      	str	r3, [r7, #12]
}
 8014e82:	bf00      	nop
 8014e84:	bf00      	nop
 8014e86:	e7fd      	b.n	8014e84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014e88:	693b      	ldr	r3, [r7, #16]
 8014e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d10b      	bne.n	8014ea8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8014e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e94:	f383 8811 	msr	BASEPRI, r3
 8014e98:	f3bf 8f6f 	isb	sy
 8014e9c:	f3bf 8f4f 	dsb	sy
 8014ea0:	60bb      	str	r3, [r7, #8]
}
 8014ea2:	bf00      	nop
 8014ea4:	bf00      	nop
 8014ea6:	e7fd      	b.n	8014ea4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8014ea8:	693b      	ldr	r3, [r7, #16]
 8014eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014eac:	1e5a      	subs	r2, r3, #1
 8014eae:	693b      	ldr	r3, [r7, #16]
 8014eb0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014eb2:	693b      	ldr	r3, [r7, #16]
 8014eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014eb6:	693b      	ldr	r3, [r7, #16]
 8014eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014eba:	429a      	cmp	r2, r3
 8014ebc:	d02c      	beq.n	8014f18 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014ebe:	693b      	ldr	r3, [r7, #16]
 8014ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d128      	bne.n	8014f18 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014ec6:	693b      	ldr	r3, [r7, #16]
 8014ec8:	3304      	adds	r3, #4
 8014eca:	4618      	mov	r0, r3
 8014ecc:	f7fd ffc8 	bl	8012e60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014ed0:	693b      	ldr	r3, [r7, #16]
 8014ed2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014ed4:	693b      	ldr	r3, [r7, #16]
 8014ed6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014ed8:	693b      	ldr	r3, [r7, #16]
 8014eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014edc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014ee0:	693b      	ldr	r3, [r7, #16]
 8014ee2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014ee4:	693b      	ldr	r3, [r7, #16]
 8014ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8014f28 <xTaskPriorityDisinherit+0xd8>)
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	429a      	cmp	r2, r3
 8014eee:	d903      	bls.n	8014ef8 <xTaskPriorityDisinherit+0xa8>
 8014ef0:	693b      	ldr	r3, [r7, #16]
 8014ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ef4:	4a0c      	ldr	r2, [pc, #48]	@ (8014f28 <xTaskPriorityDisinherit+0xd8>)
 8014ef6:	6013      	str	r3, [r2, #0]
 8014ef8:	693b      	ldr	r3, [r7, #16]
 8014efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014efc:	4613      	mov	r3, r2
 8014efe:	009b      	lsls	r3, r3, #2
 8014f00:	4413      	add	r3, r2
 8014f02:	009b      	lsls	r3, r3, #2
 8014f04:	4a09      	ldr	r2, [pc, #36]	@ (8014f2c <xTaskPriorityDisinherit+0xdc>)
 8014f06:	441a      	add	r2, r3
 8014f08:	693b      	ldr	r3, [r7, #16]
 8014f0a:	3304      	adds	r3, #4
 8014f0c:	4619      	mov	r1, r3
 8014f0e:	4610      	mov	r0, r2
 8014f10:	f7fd ff49 	bl	8012da6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014f14:	2301      	movs	r3, #1
 8014f16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014f18:	697b      	ldr	r3, [r7, #20]
	}
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	3718      	adds	r7, #24
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	bd80      	pop	{r7, pc}
 8014f22:	bf00      	nop
 8014f24:	2400120c 	.word	0x2400120c
 8014f28:	240016e8 	.word	0x240016e8
 8014f2c:	24001210 	.word	0x24001210

08014f30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b088      	sub	sp, #32
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
 8014f38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014f3e:	2301      	movs	r3, #1
 8014f40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d06c      	beq.n	8015022 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014f48:	69bb      	ldr	r3, [r7, #24]
 8014f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d10b      	bne.n	8014f68 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8014f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f54:	f383 8811 	msr	BASEPRI, r3
 8014f58:	f3bf 8f6f 	isb	sy
 8014f5c:	f3bf 8f4f 	dsb	sy
 8014f60:	60fb      	str	r3, [r7, #12]
}
 8014f62:	bf00      	nop
 8014f64:	bf00      	nop
 8014f66:	e7fd      	b.n	8014f64 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014f68:	69bb      	ldr	r3, [r7, #24]
 8014f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014f6c:	683a      	ldr	r2, [r7, #0]
 8014f6e:	429a      	cmp	r2, r3
 8014f70:	d902      	bls.n	8014f78 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014f72:	683b      	ldr	r3, [r7, #0]
 8014f74:	61fb      	str	r3, [r7, #28]
 8014f76:	e002      	b.n	8014f7e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014f78:	69bb      	ldr	r3, [r7, #24]
 8014f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014f7c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014f7e:	69bb      	ldr	r3, [r7, #24]
 8014f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f82:	69fa      	ldr	r2, [r7, #28]
 8014f84:	429a      	cmp	r2, r3
 8014f86:	d04c      	beq.n	8015022 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014f88:	69bb      	ldr	r3, [r7, #24]
 8014f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014f8c:	697a      	ldr	r2, [r7, #20]
 8014f8e:	429a      	cmp	r2, r3
 8014f90:	d147      	bne.n	8015022 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014f92:	4b26      	ldr	r3, [pc, #152]	@ (801502c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	69ba      	ldr	r2, [r7, #24]
 8014f98:	429a      	cmp	r2, r3
 8014f9a:	d10b      	bne.n	8014fb4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8014f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fa0:	f383 8811 	msr	BASEPRI, r3
 8014fa4:	f3bf 8f6f 	isb	sy
 8014fa8:	f3bf 8f4f 	dsb	sy
 8014fac:	60bb      	str	r3, [r7, #8]
}
 8014fae:	bf00      	nop
 8014fb0:	bf00      	nop
 8014fb2:	e7fd      	b.n	8014fb0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014fb4:	69bb      	ldr	r3, [r7, #24]
 8014fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014fb8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014fba:	69bb      	ldr	r3, [r7, #24]
 8014fbc:	69fa      	ldr	r2, [r7, #28]
 8014fbe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014fc0:	69bb      	ldr	r3, [r7, #24]
 8014fc2:	699b      	ldr	r3, [r3, #24]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	db04      	blt.n	8014fd2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014fc8:	69fb      	ldr	r3, [r7, #28]
 8014fca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014fce:	69bb      	ldr	r3, [r7, #24]
 8014fd0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014fd2:	69bb      	ldr	r3, [r7, #24]
 8014fd4:	6959      	ldr	r1, [r3, #20]
 8014fd6:	693a      	ldr	r2, [r7, #16]
 8014fd8:	4613      	mov	r3, r2
 8014fda:	009b      	lsls	r3, r3, #2
 8014fdc:	4413      	add	r3, r2
 8014fde:	009b      	lsls	r3, r3, #2
 8014fe0:	4a13      	ldr	r2, [pc, #76]	@ (8015030 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014fe2:	4413      	add	r3, r2
 8014fe4:	4299      	cmp	r1, r3
 8014fe6:	d11c      	bne.n	8015022 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014fe8:	69bb      	ldr	r3, [r7, #24]
 8014fea:	3304      	adds	r3, #4
 8014fec:	4618      	mov	r0, r3
 8014fee:	f7fd ff37 	bl	8012e60 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014ff2:	69bb      	ldr	r3, [r7, #24]
 8014ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8015034 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	429a      	cmp	r2, r3
 8014ffc:	d903      	bls.n	8015006 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8014ffe:	69bb      	ldr	r3, [r7, #24]
 8015000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015002:	4a0c      	ldr	r2, [pc, #48]	@ (8015034 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8015004:	6013      	str	r3, [r2, #0]
 8015006:	69bb      	ldr	r3, [r7, #24]
 8015008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801500a:	4613      	mov	r3, r2
 801500c:	009b      	lsls	r3, r3, #2
 801500e:	4413      	add	r3, r2
 8015010:	009b      	lsls	r3, r3, #2
 8015012:	4a07      	ldr	r2, [pc, #28]	@ (8015030 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015014:	441a      	add	r2, r3
 8015016:	69bb      	ldr	r3, [r7, #24]
 8015018:	3304      	adds	r3, #4
 801501a:	4619      	mov	r1, r3
 801501c:	4610      	mov	r0, r2
 801501e:	f7fd fec2 	bl	8012da6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015022:	bf00      	nop
 8015024:	3720      	adds	r7, #32
 8015026:	46bd      	mov	sp, r7
 8015028:	bd80      	pop	{r7, pc}
 801502a:	bf00      	nop
 801502c:	2400120c 	.word	0x2400120c
 8015030:	24001210 	.word	0x24001210
 8015034:	240016e8 	.word	0x240016e8

08015038 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015038:	b480      	push	{r7}
 801503a:	b083      	sub	sp, #12
 801503c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801503e:	4b09      	ldr	r3, [pc, #36]	@ (8015064 <uxTaskResetEventItemValue+0x2c>)
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	699b      	ldr	r3, [r3, #24]
 8015044:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015046:	4b07      	ldr	r3, [pc, #28]	@ (8015064 <uxTaskResetEventItemValue+0x2c>)
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801504c:	4b05      	ldr	r3, [pc, #20]	@ (8015064 <uxTaskResetEventItemValue+0x2c>)
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8015054:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015056:	687b      	ldr	r3, [r7, #4]
}
 8015058:	4618      	mov	r0, r3
 801505a:	370c      	adds	r7, #12
 801505c:	46bd      	mov	sp, r7
 801505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015062:	4770      	bx	lr
 8015064:	2400120c 	.word	0x2400120c

08015068 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015068:	b480      	push	{r7}
 801506a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801506c:	4b07      	ldr	r3, [pc, #28]	@ (801508c <pvTaskIncrementMutexHeldCount+0x24>)
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	2b00      	cmp	r3, #0
 8015072:	d004      	beq.n	801507e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015074:	4b05      	ldr	r3, [pc, #20]	@ (801508c <pvTaskIncrementMutexHeldCount+0x24>)
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801507a:	3201      	adds	r2, #1
 801507c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 801507e:	4b03      	ldr	r3, [pc, #12]	@ (801508c <pvTaskIncrementMutexHeldCount+0x24>)
 8015080:	681b      	ldr	r3, [r3, #0]
	}
 8015082:	4618      	mov	r0, r3
 8015084:	46bd      	mov	sp, r7
 8015086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508a:	4770      	bx	lr
 801508c:	2400120c 	.word	0x2400120c

08015090 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8015090:	b580      	push	{r7, lr}
 8015092:	b084      	sub	sp, #16
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
 8015098:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801509a:	f000 ff4d 	bl	8015f38 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801509e:	4b20      	ldr	r3, [pc, #128]	@ (8015120 <ulTaskNotifyTake+0x90>)
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d113      	bne.n	80150d2 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80150aa:	4b1d      	ldr	r3, [pc, #116]	@ (8015120 <ulTaskNotifyTake+0x90>)
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	2201      	movs	r2, #1
 80150b0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80150b4:	683b      	ldr	r3, [r7, #0]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d00b      	beq.n	80150d2 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80150ba:	2101      	movs	r1, #1
 80150bc:	6838      	ldr	r0, [r7, #0]
 80150be:	f000 f9db 	bl	8015478 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80150c2:	4b18      	ldr	r3, [pc, #96]	@ (8015124 <ulTaskNotifyTake+0x94>)
 80150c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80150c8:	601a      	str	r2, [r3, #0]
 80150ca:	f3bf 8f4f 	dsb	sy
 80150ce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80150d2:	f000 ff63 	bl	8015f9c <vPortExitCritical>

		taskENTER_CRITICAL();
 80150d6:	f000 ff2f 	bl	8015f38 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80150da:	4b11      	ldr	r3, [pc, #68]	@ (8015120 <ulTaskNotifyTake+0x90>)
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80150e2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d00e      	beq.n	8015108 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d005      	beq.n	80150fc <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80150f0:	4b0b      	ldr	r3, [pc, #44]	@ (8015120 <ulTaskNotifyTake+0x90>)
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	2200      	movs	r2, #0
 80150f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80150fa:	e005      	b.n	8015108 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80150fc:	4b08      	ldr	r3, [pc, #32]	@ (8015120 <ulTaskNotifyTake+0x90>)
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	68fa      	ldr	r2, [r7, #12]
 8015102:	3a01      	subs	r2, #1
 8015104:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015108:	4b05      	ldr	r3, [pc, #20]	@ (8015120 <ulTaskNotifyTake+0x90>)
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	2200      	movs	r2, #0
 801510e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8015112:	f000 ff43 	bl	8015f9c <vPortExitCritical>

		return ulReturn;
 8015116:	68fb      	ldr	r3, [r7, #12]
	}
 8015118:	4618      	mov	r0, r3
 801511a:	3710      	adds	r7, #16
 801511c:	46bd      	mov	sp, r7
 801511e:	bd80      	pop	{r7, pc}
 8015120:	2400120c 	.word	0x2400120c
 8015124:	e000ed04 	.word	0xe000ed04

08015128 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8015128:	b580      	push	{r7, lr}
 801512a:	b08a      	sub	sp, #40	@ 0x28
 801512c:	af00      	add	r7, sp, #0
 801512e:	60f8      	str	r0, [r7, #12]
 8015130:	60b9      	str	r1, [r7, #8]
 8015132:	603b      	str	r3, [r7, #0]
 8015134:	4613      	mov	r3, r2
 8015136:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8015138:	2301      	movs	r3, #1
 801513a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d10b      	bne.n	801515a <xTaskGenericNotify+0x32>
	__asm volatile
 8015142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015146:	f383 8811 	msr	BASEPRI, r3
 801514a:	f3bf 8f6f 	isb	sy
 801514e:	f3bf 8f4f 	dsb	sy
 8015152:	61bb      	str	r3, [r7, #24]
}
 8015154:	bf00      	nop
 8015156:	bf00      	nop
 8015158:	e7fd      	b.n	8015156 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801515e:	f000 feeb 	bl	8015f38 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d004      	beq.n	8015172 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8015168:	6a3b      	ldr	r3, [r7, #32]
 801516a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801516e:	683b      	ldr	r3, [r7, #0]
 8015170:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015172:	6a3b      	ldr	r3, [r7, #32]
 8015174:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8015178:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801517a:	6a3b      	ldr	r3, [r7, #32]
 801517c:	2202      	movs	r2, #2
 801517e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8015182:	79fb      	ldrb	r3, [r7, #7]
 8015184:	2b04      	cmp	r3, #4
 8015186:	d82e      	bhi.n	80151e6 <xTaskGenericNotify+0xbe>
 8015188:	a201      	add	r2, pc, #4	@ (adr r2, 8015190 <xTaskGenericNotify+0x68>)
 801518a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801518e:	bf00      	nop
 8015190:	0801520b 	.word	0x0801520b
 8015194:	080151a5 	.word	0x080151a5
 8015198:	080151b7 	.word	0x080151b7
 801519c:	080151c7 	.word	0x080151c7
 80151a0:	080151d1 	.word	0x080151d1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80151a4:	6a3b      	ldr	r3, [r7, #32]
 80151a6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80151aa:	68bb      	ldr	r3, [r7, #8]
 80151ac:	431a      	orrs	r2, r3
 80151ae:	6a3b      	ldr	r3, [r7, #32]
 80151b0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80151b4:	e02c      	b.n	8015210 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80151b6:	6a3b      	ldr	r3, [r7, #32]
 80151b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80151bc:	1c5a      	adds	r2, r3, #1
 80151be:	6a3b      	ldr	r3, [r7, #32]
 80151c0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80151c4:	e024      	b.n	8015210 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80151c6:	6a3b      	ldr	r3, [r7, #32]
 80151c8:	68ba      	ldr	r2, [r7, #8]
 80151ca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80151ce:	e01f      	b.n	8015210 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80151d0:	7ffb      	ldrb	r3, [r7, #31]
 80151d2:	2b02      	cmp	r3, #2
 80151d4:	d004      	beq.n	80151e0 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80151d6:	6a3b      	ldr	r3, [r7, #32]
 80151d8:	68ba      	ldr	r2, [r7, #8]
 80151da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80151de:	e017      	b.n	8015210 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80151e0:	2300      	movs	r3, #0
 80151e2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80151e4:	e014      	b.n	8015210 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80151e6:	6a3b      	ldr	r3, [r7, #32]
 80151e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80151ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80151f0:	d00d      	beq.n	801520e <xTaskGenericNotify+0xe6>
	__asm volatile
 80151f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151f6:	f383 8811 	msr	BASEPRI, r3
 80151fa:	f3bf 8f6f 	isb	sy
 80151fe:	f3bf 8f4f 	dsb	sy
 8015202:	617b      	str	r3, [r7, #20]
}
 8015204:	bf00      	nop
 8015206:	bf00      	nop
 8015208:	e7fd      	b.n	8015206 <xTaskGenericNotify+0xde>
					break;
 801520a:	bf00      	nop
 801520c:	e000      	b.n	8015210 <xTaskGenericNotify+0xe8>

					break;
 801520e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015210:	7ffb      	ldrb	r3, [r7, #31]
 8015212:	2b01      	cmp	r3, #1
 8015214:	d13b      	bne.n	801528e <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015216:	6a3b      	ldr	r3, [r7, #32]
 8015218:	3304      	adds	r3, #4
 801521a:	4618      	mov	r0, r3
 801521c:	f7fd fe20 	bl	8012e60 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8015220:	6a3b      	ldr	r3, [r7, #32]
 8015222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015224:	4b1d      	ldr	r3, [pc, #116]	@ (801529c <xTaskGenericNotify+0x174>)
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	429a      	cmp	r2, r3
 801522a:	d903      	bls.n	8015234 <xTaskGenericNotify+0x10c>
 801522c:	6a3b      	ldr	r3, [r7, #32]
 801522e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015230:	4a1a      	ldr	r2, [pc, #104]	@ (801529c <xTaskGenericNotify+0x174>)
 8015232:	6013      	str	r3, [r2, #0]
 8015234:	6a3b      	ldr	r3, [r7, #32]
 8015236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015238:	4613      	mov	r3, r2
 801523a:	009b      	lsls	r3, r3, #2
 801523c:	4413      	add	r3, r2
 801523e:	009b      	lsls	r3, r3, #2
 8015240:	4a17      	ldr	r2, [pc, #92]	@ (80152a0 <xTaskGenericNotify+0x178>)
 8015242:	441a      	add	r2, r3
 8015244:	6a3b      	ldr	r3, [r7, #32]
 8015246:	3304      	adds	r3, #4
 8015248:	4619      	mov	r1, r3
 801524a:	4610      	mov	r0, r2
 801524c:	f7fd fdab 	bl	8012da6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8015250:	6a3b      	ldr	r3, [r7, #32]
 8015252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015254:	2b00      	cmp	r3, #0
 8015256:	d00b      	beq.n	8015270 <xTaskGenericNotify+0x148>
	__asm volatile
 8015258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801525c:	f383 8811 	msr	BASEPRI, r3
 8015260:	f3bf 8f6f 	isb	sy
 8015264:	f3bf 8f4f 	dsb	sy
 8015268:	613b      	str	r3, [r7, #16]
}
 801526a:	bf00      	nop
 801526c:	bf00      	nop
 801526e:	e7fd      	b.n	801526c <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015270:	6a3b      	ldr	r3, [r7, #32]
 8015272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015274:	4b0b      	ldr	r3, [pc, #44]	@ (80152a4 <xTaskGenericNotify+0x17c>)
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801527a:	429a      	cmp	r2, r3
 801527c:	d907      	bls.n	801528e <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801527e:	4b0a      	ldr	r3, [pc, #40]	@ (80152a8 <xTaskGenericNotify+0x180>)
 8015280:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015284:	601a      	str	r2, [r3, #0]
 8015286:	f3bf 8f4f 	dsb	sy
 801528a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801528e:	f000 fe85 	bl	8015f9c <vPortExitCritical>

		return xReturn;
 8015292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8015294:	4618      	mov	r0, r3
 8015296:	3728      	adds	r7, #40	@ 0x28
 8015298:	46bd      	mov	sp, r7
 801529a:	bd80      	pop	{r7, pc}
 801529c:	240016e8 	.word	0x240016e8
 80152a0:	24001210 	.word	0x24001210
 80152a4:	2400120c 	.word	0x2400120c
 80152a8:	e000ed04 	.word	0xe000ed04

080152ac <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b08e      	sub	sp, #56	@ 0x38
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	60f8      	str	r0, [r7, #12]
 80152b4:	60b9      	str	r1, [r7, #8]
 80152b6:	603b      	str	r3, [r7, #0]
 80152b8:	4613      	mov	r3, r2
 80152ba:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80152bc:	2301      	movs	r3, #1
 80152be:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d10b      	bne.n	80152de <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80152c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152ca:	f383 8811 	msr	BASEPRI, r3
 80152ce:	f3bf 8f6f 	isb	sy
 80152d2:	f3bf 8f4f 	dsb	sy
 80152d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80152d8:	bf00      	nop
 80152da:	bf00      	nop
 80152dc:	e7fd      	b.n	80152da <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80152de:	f000 ff0b 	bl	80160f8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80152e6:	f3ef 8211 	mrs	r2, BASEPRI
 80152ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152ee:	f383 8811 	msr	BASEPRI, r3
 80152f2:	f3bf 8f6f 	isb	sy
 80152f6:	f3bf 8f4f 	dsb	sy
 80152fa:	623a      	str	r2, [r7, #32]
 80152fc:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80152fe:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015300:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8015302:	683b      	ldr	r3, [r7, #0]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d004      	beq.n	8015312 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8015308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801530a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801530e:	683b      	ldr	r3, [r7, #0]
 8015310:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015314:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8015318:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801531c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801531e:	2202      	movs	r2, #2
 8015320:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8015324:	79fb      	ldrb	r3, [r7, #7]
 8015326:	2b04      	cmp	r3, #4
 8015328:	d82e      	bhi.n	8015388 <xTaskGenericNotifyFromISR+0xdc>
 801532a:	a201      	add	r2, pc, #4	@ (adr r2, 8015330 <xTaskGenericNotifyFromISR+0x84>)
 801532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015330:	080153ad 	.word	0x080153ad
 8015334:	08015345 	.word	0x08015345
 8015338:	08015357 	.word	0x08015357
 801533c:	08015367 	.word	0x08015367
 8015340:	08015371 	.word	0x08015371
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8015344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015346:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801534a:	68bb      	ldr	r3, [r7, #8]
 801534c:	431a      	orrs	r2, r3
 801534e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015350:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015354:	e02d      	b.n	80153b2 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8015356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015358:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801535c:	1c5a      	adds	r2, r3, #1
 801535e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015360:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015364:	e025      	b.n	80153b2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8015366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015368:	68ba      	ldr	r2, [r7, #8]
 801536a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801536e:	e020      	b.n	80153b2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8015370:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015374:	2b02      	cmp	r3, #2
 8015376:	d004      	beq.n	8015382 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8015378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801537a:	68ba      	ldr	r2, [r7, #8]
 801537c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8015380:	e017      	b.n	80153b2 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8015382:	2300      	movs	r3, #0
 8015384:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8015386:	e014      	b.n	80153b2 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8015388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801538a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801538e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015392:	d00d      	beq.n	80153b0 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8015394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015398:	f383 8811 	msr	BASEPRI, r3
 801539c:	f3bf 8f6f 	isb	sy
 80153a0:	f3bf 8f4f 	dsb	sy
 80153a4:	61bb      	str	r3, [r7, #24]
}
 80153a6:	bf00      	nop
 80153a8:	bf00      	nop
 80153aa:	e7fd      	b.n	80153a8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80153ac:	bf00      	nop
 80153ae:	e000      	b.n	80153b2 <xTaskGenericNotifyFromISR+0x106>
					break;
 80153b0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80153b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80153b6:	2b01      	cmp	r3, #1
 80153b8:	d147      	bne.n	801544a <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80153ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d00b      	beq.n	80153da <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 80153c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153c6:	f383 8811 	msr	BASEPRI, r3
 80153ca:	f3bf 8f6f 	isb	sy
 80153ce:	f3bf 8f4f 	dsb	sy
 80153d2:	617b      	str	r3, [r7, #20]
}
 80153d4:	bf00      	nop
 80153d6:	bf00      	nop
 80153d8:	e7fd      	b.n	80153d6 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80153da:	4b21      	ldr	r3, [pc, #132]	@ (8015460 <xTaskGenericNotifyFromISR+0x1b4>)
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d11d      	bne.n	801541e <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80153e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153e4:	3304      	adds	r3, #4
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7fd fd3a 	bl	8012e60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80153ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80153f0:	4b1c      	ldr	r3, [pc, #112]	@ (8015464 <xTaskGenericNotifyFromISR+0x1b8>)
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	429a      	cmp	r2, r3
 80153f6:	d903      	bls.n	8015400 <xTaskGenericNotifyFromISR+0x154>
 80153f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80153fc:	4a19      	ldr	r2, [pc, #100]	@ (8015464 <xTaskGenericNotifyFromISR+0x1b8>)
 80153fe:	6013      	str	r3, [r2, #0]
 8015400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015404:	4613      	mov	r3, r2
 8015406:	009b      	lsls	r3, r3, #2
 8015408:	4413      	add	r3, r2
 801540a:	009b      	lsls	r3, r3, #2
 801540c:	4a16      	ldr	r2, [pc, #88]	@ (8015468 <xTaskGenericNotifyFromISR+0x1bc>)
 801540e:	441a      	add	r2, r3
 8015410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015412:	3304      	adds	r3, #4
 8015414:	4619      	mov	r1, r3
 8015416:	4610      	mov	r0, r2
 8015418:	f7fd fcc5 	bl	8012da6 <vListInsertEnd>
 801541c:	e005      	b.n	801542a <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801541e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015420:	3318      	adds	r3, #24
 8015422:	4619      	mov	r1, r3
 8015424:	4811      	ldr	r0, [pc, #68]	@ (801546c <xTaskGenericNotifyFromISR+0x1c0>)
 8015426:	f7fd fcbe 	bl	8012da6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801542a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801542c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801542e:	4b10      	ldr	r3, [pc, #64]	@ (8015470 <xTaskGenericNotifyFromISR+0x1c4>)
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015434:	429a      	cmp	r2, r3
 8015436:	d908      	bls.n	801544a <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8015438:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801543a:	2b00      	cmp	r3, #0
 801543c:	d002      	beq.n	8015444 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801543e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015440:	2201      	movs	r2, #1
 8015442:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8015444:	4b0b      	ldr	r3, [pc, #44]	@ (8015474 <xTaskGenericNotifyFromISR+0x1c8>)
 8015446:	2201      	movs	r2, #1
 8015448:	601a      	str	r2, [r3, #0]
 801544a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801544c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801544e:	693b      	ldr	r3, [r7, #16]
 8015450:	f383 8811 	msr	BASEPRI, r3
}
 8015454:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8015456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8015458:	4618      	mov	r0, r3
 801545a:	3738      	adds	r7, #56	@ 0x38
 801545c:	46bd      	mov	sp, r7
 801545e:	bd80      	pop	{r7, pc}
 8015460:	24001708 	.word	0x24001708
 8015464:	240016e8 	.word	0x240016e8
 8015468:	24001210 	.word	0x24001210
 801546c:	240016a0 	.word	0x240016a0
 8015470:	2400120c 	.word	0x2400120c
 8015474:	240016f4 	.word	0x240016f4

08015478 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b084      	sub	sp, #16
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
 8015480:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015482:	4b21      	ldr	r3, [pc, #132]	@ (8015508 <prvAddCurrentTaskToDelayedList+0x90>)
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015488:	4b20      	ldr	r3, [pc, #128]	@ (801550c <prvAddCurrentTaskToDelayedList+0x94>)
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	3304      	adds	r3, #4
 801548e:	4618      	mov	r0, r3
 8015490:	f7fd fce6 	bl	8012e60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801549a:	d10a      	bne.n	80154b2 <prvAddCurrentTaskToDelayedList+0x3a>
 801549c:	683b      	ldr	r3, [r7, #0]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d007      	beq.n	80154b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80154a2:	4b1a      	ldr	r3, [pc, #104]	@ (801550c <prvAddCurrentTaskToDelayedList+0x94>)
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	3304      	adds	r3, #4
 80154a8:	4619      	mov	r1, r3
 80154aa:	4819      	ldr	r0, [pc, #100]	@ (8015510 <prvAddCurrentTaskToDelayedList+0x98>)
 80154ac:	f7fd fc7b 	bl	8012da6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80154b0:	e026      	b.n	8015500 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80154b2:	68fa      	ldr	r2, [r7, #12]
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	4413      	add	r3, r2
 80154b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80154ba:	4b14      	ldr	r3, [pc, #80]	@ (801550c <prvAddCurrentTaskToDelayedList+0x94>)
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	68ba      	ldr	r2, [r7, #8]
 80154c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80154c2:	68ba      	ldr	r2, [r7, #8]
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	429a      	cmp	r2, r3
 80154c8:	d209      	bcs.n	80154de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80154ca:	4b12      	ldr	r3, [pc, #72]	@ (8015514 <prvAddCurrentTaskToDelayedList+0x9c>)
 80154cc:	681a      	ldr	r2, [r3, #0]
 80154ce:	4b0f      	ldr	r3, [pc, #60]	@ (801550c <prvAddCurrentTaskToDelayedList+0x94>)
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	3304      	adds	r3, #4
 80154d4:	4619      	mov	r1, r3
 80154d6:	4610      	mov	r0, r2
 80154d8:	f7fd fc89 	bl	8012dee <vListInsert>
}
 80154dc:	e010      	b.n	8015500 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80154de:	4b0e      	ldr	r3, [pc, #56]	@ (8015518 <prvAddCurrentTaskToDelayedList+0xa0>)
 80154e0:	681a      	ldr	r2, [r3, #0]
 80154e2:	4b0a      	ldr	r3, [pc, #40]	@ (801550c <prvAddCurrentTaskToDelayedList+0x94>)
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	3304      	adds	r3, #4
 80154e8:	4619      	mov	r1, r3
 80154ea:	4610      	mov	r0, r2
 80154ec:	f7fd fc7f 	bl	8012dee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80154f0:	4b0a      	ldr	r3, [pc, #40]	@ (801551c <prvAddCurrentTaskToDelayedList+0xa4>)
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	68ba      	ldr	r2, [r7, #8]
 80154f6:	429a      	cmp	r2, r3
 80154f8:	d202      	bcs.n	8015500 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80154fa:	4a08      	ldr	r2, [pc, #32]	@ (801551c <prvAddCurrentTaskToDelayedList+0xa4>)
 80154fc:	68bb      	ldr	r3, [r7, #8]
 80154fe:	6013      	str	r3, [r2, #0]
}
 8015500:	bf00      	nop
 8015502:	3710      	adds	r7, #16
 8015504:	46bd      	mov	sp, r7
 8015506:	bd80      	pop	{r7, pc}
 8015508:	240016e4 	.word	0x240016e4
 801550c:	2400120c 	.word	0x2400120c
 8015510:	240016cc 	.word	0x240016cc
 8015514:	2400169c 	.word	0x2400169c
 8015518:	24001698 	.word	0x24001698
 801551c:	24001700 	.word	0x24001700

08015520 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b08a      	sub	sp, #40	@ 0x28
 8015524:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015526:	2300      	movs	r3, #0
 8015528:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801552a:	f000 fb71 	bl	8015c10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801552e:	4b1d      	ldr	r3, [pc, #116]	@ (80155a4 <xTimerCreateTimerTask+0x84>)
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d021      	beq.n	801557a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015536:	2300      	movs	r3, #0
 8015538:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801553a:	2300      	movs	r3, #0
 801553c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801553e:	1d3a      	adds	r2, r7, #4
 8015540:	f107 0108 	add.w	r1, r7, #8
 8015544:	f107 030c 	add.w	r3, r7, #12
 8015548:	4618      	mov	r0, r3
 801554a:	f7fd fa29 	bl	80129a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801554e:	6879      	ldr	r1, [r7, #4]
 8015550:	68bb      	ldr	r3, [r7, #8]
 8015552:	68fa      	ldr	r2, [r7, #12]
 8015554:	9202      	str	r2, [sp, #8]
 8015556:	9301      	str	r3, [sp, #4]
 8015558:	2302      	movs	r3, #2
 801555a:	9300      	str	r3, [sp, #0]
 801555c:	2300      	movs	r3, #0
 801555e:	460a      	mov	r2, r1
 8015560:	4911      	ldr	r1, [pc, #68]	@ (80155a8 <xTimerCreateTimerTask+0x88>)
 8015562:	4812      	ldr	r0, [pc, #72]	@ (80155ac <xTimerCreateTimerTask+0x8c>)
 8015564:	f7fe fcd2 	bl	8013f0c <xTaskCreateStatic>
 8015568:	4603      	mov	r3, r0
 801556a:	4a11      	ldr	r2, [pc, #68]	@ (80155b0 <xTimerCreateTimerTask+0x90>)
 801556c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801556e:	4b10      	ldr	r3, [pc, #64]	@ (80155b0 <xTimerCreateTimerTask+0x90>)
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d001      	beq.n	801557a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015576:	2301      	movs	r3, #1
 8015578:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801557a:	697b      	ldr	r3, [r7, #20]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d10b      	bne.n	8015598 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8015580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015584:	f383 8811 	msr	BASEPRI, r3
 8015588:	f3bf 8f6f 	isb	sy
 801558c:	f3bf 8f4f 	dsb	sy
 8015590:	613b      	str	r3, [r7, #16]
}
 8015592:	bf00      	nop
 8015594:	bf00      	nop
 8015596:	e7fd      	b.n	8015594 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015598:	697b      	ldr	r3, [r7, #20]
}
 801559a:	4618      	mov	r0, r3
 801559c:	3718      	adds	r7, #24
 801559e:	46bd      	mov	sp, r7
 80155a0:	bd80      	pop	{r7, pc}
 80155a2:	bf00      	nop
 80155a4:	2400173c 	.word	0x2400173c
 80155a8:	08017cac 	.word	0x08017cac
 80155ac:	080157a9 	.word	0x080157a9
 80155b0:	24001740 	.word	0x24001740

080155b4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b088      	sub	sp, #32
 80155b8:	af02      	add	r7, sp, #8
 80155ba:	60f8      	str	r0, [r7, #12]
 80155bc:	60b9      	str	r1, [r7, #8]
 80155be:	607a      	str	r2, [r7, #4]
 80155c0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80155c2:	202c      	movs	r0, #44	@ 0x2c
 80155c4:	f000 fdda 	bl	801617c <pvPortMalloc>
 80155c8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d00d      	beq.n	80155ec <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80155d0:	697b      	ldr	r3, [r7, #20]
 80155d2:	2200      	movs	r2, #0
 80155d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80155d8:	697b      	ldr	r3, [r7, #20]
 80155da:	9301      	str	r3, [sp, #4]
 80155dc:	6a3b      	ldr	r3, [r7, #32]
 80155de:	9300      	str	r3, [sp, #0]
 80155e0:	683b      	ldr	r3, [r7, #0]
 80155e2:	687a      	ldr	r2, [r7, #4]
 80155e4:	68b9      	ldr	r1, [r7, #8]
 80155e6:	68f8      	ldr	r0, [r7, #12]
 80155e8:	f000 f805 	bl	80155f6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80155ec:	697b      	ldr	r3, [r7, #20]
	}
 80155ee:	4618      	mov	r0, r3
 80155f0:	3718      	adds	r7, #24
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}

080155f6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80155f6:	b580      	push	{r7, lr}
 80155f8:	b086      	sub	sp, #24
 80155fa:	af00      	add	r7, sp, #0
 80155fc:	60f8      	str	r0, [r7, #12]
 80155fe:	60b9      	str	r1, [r7, #8]
 8015600:	607a      	str	r2, [r7, #4]
 8015602:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8015604:	68bb      	ldr	r3, [r7, #8]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d10b      	bne.n	8015622 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 801560a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801560e:	f383 8811 	msr	BASEPRI, r3
 8015612:	f3bf 8f6f 	isb	sy
 8015616:	f3bf 8f4f 	dsb	sy
 801561a:	617b      	str	r3, [r7, #20]
}
 801561c:	bf00      	nop
 801561e:	bf00      	nop
 8015620:	e7fd      	b.n	801561e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8015622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015624:	2b00      	cmp	r3, #0
 8015626:	d01e      	beq.n	8015666 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8015628:	f000 faf2 	bl	8015c10 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801562c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801562e:	68fa      	ldr	r2, [r7, #12]
 8015630:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8015632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015634:	68ba      	ldr	r2, [r7, #8]
 8015636:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8015638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801563a:	683a      	ldr	r2, [r7, #0]
 801563c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015640:	6a3a      	ldr	r2, [r7, #32]
 8015642:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8015644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015646:	3304      	adds	r3, #4
 8015648:	4618      	mov	r0, r3
 801564a:	f7fd fb9f 	bl	8012d8c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d008      	beq.n	8015666 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8015654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015656:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801565a:	f043 0304 	orr.w	r3, r3, #4
 801565e:	b2da      	uxtb	r2, r3
 8015660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015662:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8015666:	bf00      	nop
 8015668:	3718      	adds	r7, #24
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}
	...

08015670 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b08a      	sub	sp, #40	@ 0x28
 8015674:	af00      	add	r7, sp, #0
 8015676:	60f8      	str	r0, [r7, #12]
 8015678:	60b9      	str	r1, [r7, #8]
 801567a:	607a      	str	r2, [r7, #4]
 801567c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801567e:	2300      	movs	r3, #0
 8015680:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	2b00      	cmp	r3, #0
 8015686:	d10b      	bne.n	80156a0 <xTimerGenericCommand+0x30>
	__asm volatile
 8015688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801568c:	f383 8811 	msr	BASEPRI, r3
 8015690:	f3bf 8f6f 	isb	sy
 8015694:	f3bf 8f4f 	dsb	sy
 8015698:	623b      	str	r3, [r7, #32]
}
 801569a:	bf00      	nop
 801569c:	bf00      	nop
 801569e:	e7fd      	b.n	801569c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80156a0:	4b19      	ldr	r3, [pc, #100]	@ (8015708 <xTimerGenericCommand+0x98>)
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d02a      	beq.n	80156fe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80156a8:	68bb      	ldr	r3, [r7, #8]
 80156aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80156b4:	68bb      	ldr	r3, [r7, #8]
 80156b6:	2b05      	cmp	r3, #5
 80156b8:	dc18      	bgt.n	80156ec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80156ba:	f7ff fb43 	bl	8014d44 <xTaskGetSchedulerState>
 80156be:	4603      	mov	r3, r0
 80156c0:	2b02      	cmp	r3, #2
 80156c2:	d109      	bne.n	80156d8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80156c4:	4b10      	ldr	r3, [pc, #64]	@ (8015708 <xTimerGenericCommand+0x98>)
 80156c6:	6818      	ldr	r0, [r3, #0]
 80156c8:	f107 0110 	add.w	r1, r7, #16
 80156cc:	2300      	movs	r3, #0
 80156ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80156d0:	f7fd fda4 	bl	801321c <xQueueGenericSend>
 80156d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80156d6:	e012      	b.n	80156fe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80156d8:	4b0b      	ldr	r3, [pc, #44]	@ (8015708 <xTimerGenericCommand+0x98>)
 80156da:	6818      	ldr	r0, [r3, #0]
 80156dc:	f107 0110 	add.w	r1, r7, #16
 80156e0:	2300      	movs	r3, #0
 80156e2:	2200      	movs	r2, #0
 80156e4:	f7fd fd9a 	bl	801321c <xQueueGenericSend>
 80156e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80156ea:	e008      	b.n	80156fe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80156ec:	4b06      	ldr	r3, [pc, #24]	@ (8015708 <xTimerGenericCommand+0x98>)
 80156ee:	6818      	ldr	r0, [r3, #0]
 80156f0:	f107 0110 	add.w	r1, r7, #16
 80156f4:	2300      	movs	r3, #0
 80156f6:	683a      	ldr	r2, [r7, #0]
 80156f8:	f7fd fe92 	bl	8013420 <xQueueGenericSendFromISR>
 80156fc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80156fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015700:	4618      	mov	r0, r3
 8015702:	3728      	adds	r7, #40	@ 0x28
 8015704:	46bd      	mov	sp, r7
 8015706:	bd80      	pop	{r7, pc}
 8015708:	2400173c 	.word	0x2400173c

0801570c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b088      	sub	sp, #32
 8015710:	af02      	add	r7, sp, #8
 8015712:	6078      	str	r0, [r7, #4]
 8015714:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015716:	4b23      	ldr	r3, [pc, #140]	@ (80157a4 <prvProcessExpiredTimer+0x98>)
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	68db      	ldr	r3, [r3, #12]
 801571c:	68db      	ldr	r3, [r3, #12]
 801571e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015720:	697b      	ldr	r3, [r7, #20]
 8015722:	3304      	adds	r3, #4
 8015724:	4618      	mov	r0, r3
 8015726:	f7fd fb9b 	bl	8012e60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801572a:	697b      	ldr	r3, [r7, #20]
 801572c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015730:	f003 0304 	and.w	r3, r3, #4
 8015734:	2b00      	cmp	r3, #0
 8015736:	d023      	beq.n	8015780 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015738:	697b      	ldr	r3, [r7, #20]
 801573a:	699a      	ldr	r2, [r3, #24]
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	18d1      	adds	r1, r2, r3
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	683a      	ldr	r2, [r7, #0]
 8015744:	6978      	ldr	r0, [r7, #20]
 8015746:	f000 f8d5 	bl	80158f4 <prvInsertTimerInActiveList>
 801574a:	4603      	mov	r3, r0
 801574c:	2b00      	cmp	r3, #0
 801574e:	d020      	beq.n	8015792 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015750:	2300      	movs	r3, #0
 8015752:	9300      	str	r3, [sp, #0]
 8015754:	2300      	movs	r3, #0
 8015756:	687a      	ldr	r2, [r7, #4]
 8015758:	2100      	movs	r1, #0
 801575a:	6978      	ldr	r0, [r7, #20]
 801575c:	f7ff ff88 	bl	8015670 <xTimerGenericCommand>
 8015760:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015762:	693b      	ldr	r3, [r7, #16]
 8015764:	2b00      	cmp	r3, #0
 8015766:	d114      	bne.n	8015792 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8015768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801576c:	f383 8811 	msr	BASEPRI, r3
 8015770:	f3bf 8f6f 	isb	sy
 8015774:	f3bf 8f4f 	dsb	sy
 8015778:	60fb      	str	r3, [r7, #12]
}
 801577a:	bf00      	nop
 801577c:	bf00      	nop
 801577e:	e7fd      	b.n	801577c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015780:	697b      	ldr	r3, [r7, #20]
 8015782:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015786:	f023 0301 	bic.w	r3, r3, #1
 801578a:	b2da      	uxtb	r2, r3
 801578c:	697b      	ldr	r3, [r7, #20]
 801578e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015792:	697b      	ldr	r3, [r7, #20]
 8015794:	6a1b      	ldr	r3, [r3, #32]
 8015796:	6978      	ldr	r0, [r7, #20]
 8015798:	4798      	blx	r3
}
 801579a:	bf00      	nop
 801579c:	3718      	adds	r7, #24
 801579e:	46bd      	mov	sp, r7
 80157a0:	bd80      	pop	{r7, pc}
 80157a2:	bf00      	nop
 80157a4:	24001734 	.word	0x24001734

080157a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b084      	sub	sp, #16
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80157b0:	f107 0308 	add.w	r3, r7, #8
 80157b4:	4618      	mov	r0, r3
 80157b6:	f000 f859 	bl	801586c <prvGetNextExpireTime>
 80157ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80157bc:	68bb      	ldr	r3, [r7, #8]
 80157be:	4619      	mov	r1, r3
 80157c0:	68f8      	ldr	r0, [r7, #12]
 80157c2:	f000 f805 	bl	80157d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80157c6:	f000 f8d7 	bl	8015978 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80157ca:	bf00      	nop
 80157cc:	e7f0      	b.n	80157b0 <prvTimerTask+0x8>
	...

080157d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b084      	sub	sp, #16
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
 80157d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80157da:	f7fe fdfb 	bl	80143d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80157de:	f107 0308 	add.w	r3, r7, #8
 80157e2:	4618      	mov	r0, r3
 80157e4:	f000 f866 	bl	80158b4 <prvSampleTimeNow>
 80157e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80157ea:	68bb      	ldr	r3, [r7, #8]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d130      	bne.n	8015852 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80157f0:	683b      	ldr	r3, [r7, #0]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d10a      	bne.n	801580c <prvProcessTimerOrBlockTask+0x3c>
 80157f6:	687a      	ldr	r2, [r7, #4]
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	429a      	cmp	r2, r3
 80157fc:	d806      	bhi.n	801580c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80157fe:	f7fe fdf7 	bl	80143f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015802:	68f9      	ldr	r1, [r7, #12]
 8015804:	6878      	ldr	r0, [r7, #4]
 8015806:	f7ff ff81 	bl	801570c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801580a:	e024      	b.n	8015856 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801580c:	683b      	ldr	r3, [r7, #0]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d008      	beq.n	8015824 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015812:	4b13      	ldr	r3, [pc, #76]	@ (8015860 <prvProcessTimerOrBlockTask+0x90>)
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d101      	bne.n	8015820 <prvProcessTimerOrBlockTask+0x50>
 801581c:	2301      	movs	r3, #1
 801581e:	e000      	b.n	8015822 <prvProcessTimerOrBlockTask+0x52>
 8015820:	2300      	movs	r3, #0
 8015822:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015824:	4b0f      	ldr	r3, [pc, #60]	@ (8015864 <prvProcessTimerOrBlockTask+0x94>)
 8015826:	6818      	ldr	r0, [r3, #0]
 8015828:	687a      	ldr	r2, [r7, #4]
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	1ad3      	subs	r3, r2, r3
 801582e:	683a      	ldr	r2, [r7, #0]
 8015830:	4619      	mov	r1, r3
 8015832:	f7fe fb37 	bl	8013ea4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015836:	f7fe fddb 	bl	80143f0 <xTaskResumeAll>
 801583a:	4603      	mov	r3, r0
 801583c:	2b00      	cmp	r3, #0
 801583e:	d10a      	bne.n	8015856 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015840:	4b09      	ldr	r3, [pc, #36]	@ (8015868 <prvProcessTimerOrBlockTask+0x98>)
 8015842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015846:	601a      	str	r2, [r3, #0]
 8015848:	f3bf 8f4f 	dsb	sy
 801584c:	f3bf 8f6f 	isb	sy
}
 8015850:	e001      	b.n	8015856 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015852:	f7fe fdcd 	bl	80143f0 <xTaskResumeAll>
}
 8015856:	bf00      	nop
 8015858:	3710      	adds	r7, #16
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}
 801585e:	bf00      	nop
 8015860:	24001738 	.word	0x24001738
 8015864:	2400173c 	.word	0x2400173c
 8015868:	e000ed04 	.word	0xe000ed04

0801586c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801586c:	b480      	push	{r7}
 801586e:	b085      	sub	sp, #20
 8015870:	af00      	add	r7, sp, #0
 8015872:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015874:	4b0e      	ldr	r3, [pc, #56]	@ (80158b0 <prvGetNextExpireTime+0x44>)
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d101      	bne.n	8015882 <prvGetNextExpireTime+0x16>
 801587e:	2201      	movs	r2, #1
 8015880:	e000      	b.n	8015884 <prvGetNextExpireTime+0x18>
 8015882:	2200      	movs	r2, #0
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d105      	bne.n	801589c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015890:	4b07      	ldr	r3, [pc, #28]	@ (80158b0 <prvGetNextExpireTime+0x44>)
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	68db      	ldr	r3, [r3, #12]
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	60fb      	str	r3, [r7, #12]
 801589a:	e001      	b.n	80158a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801589c:	2300      	movs	r3, #0
 801589e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80158a0:	68fb      	ldr	r3, [r7, #12]
}
 80158a2:	4618      	mov	r0, r3
 80158a4:	3714      	adds	r7, #20
 80158a6:	46bd      	mov	sp, r7
 80158a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ac:	4770      	bx	lr
 80158ae:	bf00      	nop
 80158b0:	24001734 	.word	0x24001734

080158b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b084      	sub	sp, #16
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80158bc:	f7fe fe36 	bl	801452c <xTaskGetTickCount>
 80158c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80158c2:	4b0b      	ldr	r3, [pc, #44]	@ (80158f0 <prvSampleTimeNow+0x3c>)
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	68fa      	ldr	r2, [r7, #12]
 80158c8:	429a      	cmp	r2, r3
 80158ca:	d205      	bcs.n	80158d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80158cc:	f000 f93a 	bl	8015b44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	2201      	movs	r2, #1
 80158d4:	601a      	str	r2, [r3, #0]
 80158d6:	e002      	b.n	80158de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	2200      	movs	r2, #0
 80158dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80158de:	4a04      	ldr	r2, [pc, #16]	@ (80158f0 <prvSampleTimeNow+0x3c>)
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80158e4:	68fb      	ldr	r3, [r7, #12]
}
 80158e6:	4618      	mov	r0, r3
 80158e8:	3710      	adds	r7, #16
 80158ea:	46bd      	mov	sp, r7
 80158ec:	bd80      	pop	{r7, pc}
 80158ee:	bf00      	nop
 80158f0:	24001744 	.word	0x24001744

080158f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b086      	sub	sp, #24
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	60f8      	str	r0, [r7, #12]
 80158fc:	60b9      	str	r1, [r7, #8]
 80158fe:	607a      	str	r2, [r7, #4]
 8015900:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015902:	2300      	movs	r3, #0
 8015904:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	68ba      	ldr	r2, [r7, #8]
 801590a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	68fa      	ldr	r2, [r7, #12]
 8015910:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015912:	68ba      	ldr	r2, [r7, #8]
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	429a      	cmp	r2, r3
 8015918:	d812      	bhi.n	8015940 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801591a:	687a      	ldr	r2, [r7, #4]
 801591c:	683b      	ldr	r3, [r7, #0]
 801591e:	1ad2      	subs	r2, r2, r3
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	699b      	ldr	r3, [r3, #24]
 8015924:	429a      	cmp	r2, r3
 8015926:	d302      	bcc.n	801592e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015928:	2301      	movs	r3, #1
 801592a:	617b      	str	r3, [r7, #20]
 801592c:	e01b      	b.n	8015966 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801592e:	4b10      	ldr	r3, [pc, #64]	@ (8015970 <prvInsertTimerInActiveList+0x7c>)
 8015930:	681a      	ldr	r2, [r3, #0]
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	3304      	adds	r3, #4
 8015936:	4619      	mov	r1, r3
 8015938:	4610      	mov	r0, r2
 801593a:	f7fd fa58 	bl	8012dee <vListInsert>
 801593e:	e012      	b.n	8015966 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015940:	687a      	ldr	r2, [r7, #4]
 8015942:	683b      	ldr	r3, [r7, #0]
 8015944:	429a      	cmp	r2, r3
 8015946:	d206      	bcs.n	8015956 <prvInsertTimerInActiveList+0x62>
 8015948:	68ba      	ldr	r2, [r7, #8]
 801594a:	683b      	ldr	r3, [r7, #0]
 801594c:	429a      	cmp	r2, r3
 801594e:	d302      	bcc.n	8015956 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015950:	2301      	movs	r3, #1
 8015952:	617b      	str	r3, [r7, #20]
 8015954:	e007      	b.n	8015966 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015956:	4b07      	ldr	r3, [pc, #28]	@ (8015974 <prvInsertTimerInActiveList+0x80>)
 8015958:	681a      	ldr	r2, [r3, #0]
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	3304      	adds	r3, #4
 801595e:	4619      	mov	r1, r3
 8015960:	4610      	mov	r0, r2
 8015962:	f7fd fa44 	bl	8012dee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015966:	697b      	ldr	r3, [r7, #20]
}
 8015968:	4618      	mov	r0, r3
 801596a:	3718      	adds	r7, #24
 801596c:	46bd      	mov	sp, r7
 801596e:	bd80      	pop	{r7, pc}
 8015970:	24001738 	.word	0x24001738
 8015974:	24001734 	.word	0x24001734

08015978 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b08e      	sub	sp, #56	@ 0x38
 801597c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801597e:	e0ce      	b.n	8015b1e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	2b00      	cmp	r3, #0
 8015984:	da19      	bge.n	80159ba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015986:	1d3b      	adds	r3, r7, #4
 8015988:	3304      	adds	r3, #4
 801598a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801598c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801598e:	2b00      	cmp	r3, #0
 8015990:	d10b      	bne.n	80159aa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8015992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015996:	f383 8811 	msr	BASEPRI, r3
 801599a:	f3bf 8f6f 	isb	sy
 801599e:	f3bf 8f4f 	dsb	sy
 80159a2:	61fb      	str	r3, [r7, #28]
}
 80159a4:	bf00      	nop
 80159a6:	bf00      	nop
 80159a8:	e7fd      	b.n	80159a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80159aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80159b0:	6850      	ldr	r0, [r2, #4]
 80159b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80159b4:	6892      	ldr	r2, [r2, #8]
 80159b6:	4611      	mov	r1, r2
 80159b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	f2c0 80ae 	blt.w	8015b1e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80159c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159c8:	695b      	ldr	r3, [r3, #20]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d004      	beq.n	80159d8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80159ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159d0:	3304      	adds	r3, #4
 80159d2:	4618      	mov	r0, r3
 80159d4:	f7fd fa44 	bl	8012e60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80159d8:	463b      	mov	r3, r7
 80159da:	4618      	mov	r0, r3
 80159dc:	f7ff ff6a 	bl	80158b4 <prvSampleTimeNow>
 80159e0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	2b09      	cmp	r3, #9
 80159e6:	f200 8097 	bhi.w	8015b18 <prvProcessReceivedCommands+0x1a0>
 80159ea:	a201      	add	r2, pc, #4	@ (adr r2, 80159f0 <prvProcessReceivedCommands+0x78>)
 80159ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159f0:	08015a19 	.word	0x08015a19
 80159f4:	08015a19 	.word	0x08015a19
 80159f8:	08015a19 	.word	0x08015a19
 80159fc:	08015a8f 	.word	0x08015a8f
 8015a00:	08015aa3 	.word	0x08015aa3
 8015a04:	08015aef 	.word	0x08015aef
 8015a08:	08015a19 	.word	0x08015a19
 8015a0c:	08015a19 	.word	0x08015a19
 8015a10:	08015a8f 	.word	0x08015a8f
 8015a14:	08015aa3 	.word	0x08015aa3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015a1e:	f043 0301 	orr.w	r3, r3, #1
 8015a22:	b2da      	uxtb	r2, r3
 8015a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015a2a:	68ba      	ldr	r2, [r7, #8]
 8015a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a2e:	699b      	ldr	r3, [r3, #24]
 8015a30:	18d1      	adds	r1, r2, r3
 8015a32:	68bb      	ldr	r3, [r7, #8]
 8015a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015a38:	f7ff ff5c 	bl	80158f4 <prvInsertTimerInActiveList>
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d06c      	beq.n	8015b1c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a44:	6a1b      	ldr	r3, [r3, #32]
 8015a46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015a48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015a50:	f003 0304 	and.w	r3, r3, #4
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d061      	beq.n	8015b1c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015a58:	68ba      	ldr	r2, [r7, #8]
 8015a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a5c:	699b      	ldr	r3, [r3, #24]
 8015a5e:	441a      	add	r2, r3
 8015a60:	2300      	movs	r3, #0
 8015a62:	9300      	str	r3, [sp, #0]
 8015a64:	2300      	movs	r3, #0
 8015a66:	2100      	movs	r1, #0
 8015a68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015a6a:	f7ff fe01 	bl	8015670 <xTimerGenericCommand>
 8015a6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015a70:	6a3b      	ldr	r3, [r7, #32]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d152      	bne.n	8015b1c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8015a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a7a:	f383 8811 	msr	BASEPRI, r3
 8015a7e:	f3bf 8f6f 	isb	sy
 8015a82:	f3bf 8f4f 	dsb	sy
 8015a86:	61bb      	str	r3, [r7, #24]
}
 8015a88:	bf00      	nop
 8015a8a:	bf00      	nop
 8015a8c:	e7fd      	b.n	8015a8a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015a94:	f023 0301 	bic.w	r3, r3, #1
 8015a98:	b2da      	uxtb	r2, r3
 8015a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8015aa0:	e03d      	b.n	8015b1e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015aa8:	f043 0301 	orr.w	r3, r3, #1
 8015aac:	b2da      	uxtb	r2, r3
 8015aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ab0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015ab4:	68ba      	ldr	r2, [r7, #8]
 8015ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ab8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015abc:	699b      	ldr	r3, [r3, #24]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d10b      	bne.n	8015ada <prvProcessReceivedCommands+0x162>
	__asm volatile
 8015ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ac6:	f383 8811 	msr	BASEPRI, r3
 8015aca:	f3bf 8f6f 	isb	sy
 8015ace:	f3bf 8f4f 	dsb	sy
 8015ad2:	617b      	str	r3, [r7, #20]
}
 8015ad4:	bf00      	nop
 8015ad6:	bf00      	nop
 8015ad8:	e7fd      	b.n	8015ad6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015adc:	699a      	ldr	r2, [r3, #24]
 8015ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ae0:	18d1      	adds	r1, r2, r3
 8015ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015ae6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015ae8:	f7ff ff04 	bl	80158f4 <prvInsertTimerInActiveList>
					break;
 8015aec:	e017      	b.n	8015b1e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015af0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015af4:	f003 0302 	and.w	r3, r3, #2
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d103      	bne.n	8015b04 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8015afc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015afe:	f000 fc0b 	bl	8016318 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015b02:	e00c      	b.n	8015b1e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015b0a:	f023 0301 	bic.w	r3, r3, #1
 8015b0e:	b2da      	uxtb	r2, r3
 8015b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8015b16:	e002      	b.n	8015b1e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8015b18:	bf00      	nop
 8015b1a:	e000      	b.n	8015b1e <prvProcessReceivedCommands+0x1a6>
					break;
 8015b1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015b1e:	4b08      	ldr	r3, [pc, #32]	@ (8015b40 <prvProcessReceivedCommands+0x1c8>)
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	1d39      	adds	r1, r7, #4
 8015b24:	2200      	movs	r2, #0
 8015b26:	4618      	mov	r0, r3
 8015b28:	f7fd fda8 	bl	801367c <xQueueReceive>
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	f47f af26 	bne.w	8015980 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8015b34:	bf00      	nop
 8015b36:	bf00      	nop
 8015b38:	3730      	adds	r7, #48	@ 0x30
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	bd80      	pop	{r7, pc}
 8015b3e:	bf00      	nop
 8015b40:	2400173c 	.word	0x2400173c

08015b44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b088      	sub	sp, #32
 8015b48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015b4a:	e049      	b.n	8015be0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8015c08 <prvSwitchTimerLists+0xc4>)
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	68db      	ldr	r3, [r3, #12]
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b56:	4b2c      	ldr	r3, [pc, #176]	@ (8015c08 <prvSwitchTimerLists+0xc4>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	68db      	ldr	r3, [r3, #12]
 8015b5c:	68db      	ldr	r3, [r3, #12]
 8015b5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	3304      	adds	r3, #4
 8015b64:	4618      	mov	r0, r3
 8015b66:	f7fd f97b 	bl	8012e60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	6a1b      	ldr	r3, [r3, #32]
 8015b6e:	68f8      	ldr	r0, [r7, #12]
 8015b70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015b78:	f003 0304 	and.w	r3, r3, #4
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d02f      	beq.n	8015be0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	699b      	ldr	r3, [r3, #24]
 8015b84:	693a      	ldr	r2, [r7, #16]
 8015b86:	4413      	add	r3, r2
 8015b88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015b8a:	68ba      	ldr	r2, [r7, #8]
 8015b8c:	693b      	ldr	r3, [r7, #16]
 8015b8e:	429a      	cmp	r2, r3
 8015b90:	d90e      	bls.n	8015bb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	68ba      	ldr	r2, [r7, #8]
 8015b96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	68fa      	ldr	r2, [r7, #12]
 8015b9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8015c08 <prvSwitchTimerLists+0xc4>)
 8015ba0:	681a      	ldr	r2, [r3, #0]
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	3304      	adds	r3, #4
 8015ba6:	4619      	mov	r1, r3
 8015ba8:	4610      	mov	r0, r2
 8015baa:	f7fd f920 	bl	8012dee <vListInsert>
 8015bae:	e017      	b.n	8015be0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	9300      	str	r3, [sp, #0]
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	693a      	ldr	r2, [r7, #16]
 8015bb8:	2100      	movs	r1, #0
 8015bba:	68f8      	ldr	r0, [r7, #12]
 8015bbc:	f7ff fd58 	bl	8015670 <xTimerGenericCommand>
 8015bc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d10b      	bne.n	8015be0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8015bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bcc:	f383 8811 	msr	BASEPRI, r3
 8015bd0:	f3bf 8f6f 	isb	sy
 8015bd4:	f3bf 8f4f 	dsb	sy
 8015bd8:	603b      	str	r3, [r7, #0]
}
 8015bda:	bf00      	nop
 8015bdc:	bf00      	nop
 8015bde:	e7fd      	b.n	8015bdc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015be0:	4b09      	ldr	r3, [pc, #36]	@ (8015c08 <prvSwitchTimerLists+0xc4>)
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d1b0      	bne.n	8015b4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015bea:	4b07      	ldr	r3, [pc, #28]	@ (8015c08 <prvSwitchTimerLists+0xc4>)
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015bf0:	4b06      	ldr	r3, [pc, #24]	@ (8015c0c <prvSwitchTimerLists+0xc8>)
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	4a04      	ldr	r2, [pc, #16]	@ (8015c08 <prvSwitchTimerLists+0xc4>)
 8015bf6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015bf8:	4a04      	ldr	r2, [pc, #16]	@ (8015c0c <prvSwitchTimerLists+0xc8>)
 8015bfa:	697b      	ldr	r3, [r7, #20]
 8015bfc:	6013      	str	r3, [r2, #0]
}
 8015bfe:	bf00      	nop
 8015c00:	3718      	adds	r7, #24
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}
 8015c06:	bf00      	nop
 8015c08:	24001734 	.word	0x24001734
 8015c0c:	24001738 	.word	0x24001738

08015c10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b082      	sub	sp, #8
 8015c14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015c16:	f000 f98f 	bl	8015f38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015c1a:	4b15      	ldr	r3, [pc, #84]	@ (8015c70 <prvCheckForValidListAndQueue+0x60>)
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d120      	bne.n	8015c64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015c22:	4814      	ldr	r0, [pc, #80]	@ (8015c74 <prvCheckForValidListAndQueue+0x64>)
 8015c24:	f7fd f892 	bl	8012d4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015c28:	4813      	ldr	r0, [pc, #76]	@ (8015c78 <prvCheckForValidListAndQueue+0x68>)
 8015c2a:	f7fd f88f 	bl	8012d4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015c2e:	4b13      	ldr	r3, [pc, #76]	@ (8015c7c <prvCheckForValidListAndQueue+0x6c>)
 8015c30:	4a10      	ldr	r2, [pc, #64]	@ (8015c74 <prvCheckForValidListAndQueue+0x64>)
 8015c32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015c34:	4b12      	ldr	r3, [pc, #72]	@ (8015c80 <prvCheckForValidListAndQueue+0x70>)
 8015c36:	4a10      	ldr	r2, [pc, #64]	@ (8015c78 <prvCheckForValidListAndQueue+0x68>)
 8015c38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	9300      	str	r3, [sp, #0]
 8015c3e:	4b11      	ldr	r3, [pc, #68]	@ (8015c84 <prvCheckForValidListAndQueue+0x74>)
 8015c40:	4a11      	ldr	r2, [pc, #68]	@ (8015c88 <prvCheckForValidListAndQueue+0x78>)
 8015c42:	2110      	movs	r1, #16
 8015c44:	200a      	movs	r0, #10
 8015c46:	f7fd f99f 	bl	8012f88 <xQueueGenericCreateStatic>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	4a08      	ldr	r2, [pc, #32]	@ (8015c70 <prvCheckForValidListAndQueue+0x60>)
 8015c4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015c50:	4b07      	ldr	r3, [pc, #28]	@ (8015c70 <prvCheckForValidListAndQueue+0x60>)
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d005      	beq.n	8015c64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015c58:	4b05      	ldr	r3, [pc, #20]	@ (8015c70 <prvCheckForValidListAndQueue+0x60>)
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	490b      	ldr	r1, [pc, #44]	@ (8015c8c <prvCheckForValidListAndQueue+0x7c>)
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f7fe f8cc 	bl	8013dfc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015c64:	f000 f99a 	bl	8015f9c <vPortExitCritical>
}
 8015c68:	bf00      	nop
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bd80      	pop	{r7, pc}
 8015c6e:	bf00      	nop
 8015c70:	2400173c 	.word	0x2400173c
 8015c74:	2400170c 	.word	0x2400170c
 8015c78:	24001720 	.word	0x24001720
 8015c7c:	24001734 	.word	0x24001734
 8015c80:	24001738 	.word	0x24001738
 8015c84:	240017e8 	.word	0x240017e8
 8015c88:	24001748 	.word	0x24001748
 8015c8c:	08017cb4 	.word	0x08017cb4

08015c90 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015c90:	b580      	push	{r7, lr}
 8015c92:	b08a      	sub	sp, #40	@ 0x28
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	60f8      	str	r0, [r7, #12]
 8015c98:	60b9      	str	r1, [r7, #8]
 8015c9a:	607a      	str	r2, [r7, #4]
 8015c9c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8015c9e:	f06f 0301 	mvn.w	r3, #1
 8015ca2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015ca8:	68bb      	ldr	r3, [r7, #8]
 8015caa:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015cb0:	4b06      	ldr	r3, [pc, #24]	@ (8015ccc <xTimerPendFunctionCallFromISR+0x3c>)
 8015cb2:	6818      	ldr	r0, [r3, #0]
 8015cb4:	f107 0114 	add.w	r1, r7, #20
 8015cb8:	2300      	movs	r3, #0
 8015cba:	683a      	ldr	r2, [r7, #0]
 8015cbc:	f7fd fbb0 	bl	8013420 <xQueueGenericSendFromISR>
 8015cc0:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8015cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	3728      	adds	r7, #40	@ 0x28
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	bd80      	pop	{r7, pc}
 8015ccc:	2400173c 	.word	0x2400173c

08015cd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015cd0:	b480      	push	{r7}
 8015cd2:	b085      	sub	sp, #20
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	60f8      	str	r0, [r7, #12]
 8015cd8:	60b9      	str	r1, [r7, #8]
 8015cda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	3b04      	subs	r3, #4
 8015ce0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8015ce8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	3b04      	subs	r3, #4
 8015cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015cf0:	68bb      	ldr	r3, [r7, #8]
 8015cf2:	f023 0201 	bic.w	r2, r3, #1
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	3b04      	subs	r3, #4
 8015cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015d00:	4a0c      	ldr	r2, [pc, #48]	@ (8015d34 <pxPortInitialiseStack+0x64>)
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	3b14      	subs	r3, #20
 8015d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015d0c:	687a      	ldr	r2, [r7, #4]
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	3b04      	subs	r3, #4
 8015d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	f06f 0202 	mvn.w	r2, #2
 8015d1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	3b20      	subs	r3, #32
 8015d24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015d26:	68fb      	ldr	r3, [r7, #12]
}
 8015d28:	4618      	mov	r0, r3
 8015d2a:	3714      	adds	r7, #20
 8015d2c:	46bd      	mov	sp, r7
 8015d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d32:	4770      	bx	lr
 8015d34:	08015d39 	.word	0x08015d39

08015d38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015d38:	b480      	push	{r7}
 8015d3a:	b085      	sub	sp, #20
 8015d3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015d3e:	2300      	movs	r3, #0
 8015d40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015d42:	4b13      	ldr	r3, [pc, #76]	@ (8015d90 <prvTaskExitError+0x58>)
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015d4a:	d00b      	beq.n	8015d64 <prvTaskExitError+0x2c>
	__asm volatile
 8015d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d50:	f383 8811 	msr	BASEPRI, r3
 8015d54:	f3bf 8f6f 	isb	sy
 8015d58:	f3bf 8f4f 	dsb	sy
 8015d5c:	60fb      	str	r3, [r7, #12]
}
 8015d5e:	bf00      	nop
 8015d60:	bf00      	nop
 8015d62:	e7fd      	b.n	8015d60 <prvTaskExitError+0x28>
	__asm volatile
 8015d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d68:	f383 8811 	msr	BASEPRI, r3
 8015d6c:	f3bf 8f6f 	isb	sy
 8015d70:	f3bf 8f4f 	dsb	sy
 8015d74:	60bb      	str	r3, [r7, #8]
}
 8015d76:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015d78:	bf00      	nop
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d0fc      	beq.n	8015d7a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015d80:	bf00      	nop
 8015d82:	bf00      	nop
 8015d84:	3714      	adds	r7, #20
 8015d86:	46bd      	mov	sp, r7
 8015d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8c:	4770      	bx	lr
 8015d8e:	bf00      	nop
 8015d90:	24000010 	.word	0x24000010
	...

08015da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015da0:	4b07      	ldr	r3, [pc, #28]	@ (8015dc0 <pxCurrentTCBConst2>)
 8015da2:	6819      	ldr	r1, [r3, #0]
 8015da4:	6808      	ldr	r0, [r1, #0]
 8015da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015daa:	f380 8809 	msr	PSP, r0
 8015dae:	f3bf 8f6f 	isb	sy
 8015db2:	f04f 0000 	mov.w	r0, #0
 8015db6:	f380 8811 	msr	BASEPRI, r0
 8015dba:	4770      	bx	lr
 8015dbc:	f3af 8000 	nop.w

08015dc0 <pxCurrentTCBConst2>:
 8015dc0:	2400120c 	.word	0x2400120c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015dc4:	bf00      	nop
 8015dc6:	bf00      	nop

08015dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015dc8:	4808      	ldr	r0, [pc, #32]	@ (8015dec <prvPortStartFirstTask+0x24>)
 8015dca:	6800      	ldr	r0, [r0, #0]
 8015dcc:	6800      	ldr	r0, [r0, #0]
 8015dce:	f380 8808 	msr	MSP, r0
 8015dd2:	f04f 0000 	mov.w	r0, #0
 8015dd6:	f380 8814 	msr	CONTROL, r0
 8015dda:	b662      	cpsie	i
 8015ddc:	b661      	cpsie	f
 8015dde:	f3bf 8f4f 	dsb	sy
 8015de2:	f3bf 8f6f 	isb	sy
 8015de6:	df00      	svc	0
 8015de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015dea:	bf00      	nop
 8015dec:	e000ed08 	.word	0xe000ed08

08015df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015df0:	b580      	push	{r7, lr}
 8015df2:	b086      	sub	sp, #24
 8015df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015df6:	4b47      	ldr	r3, [pc, #284]	@ (8015f14 <xPortStartScheduler+0x124>)
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	4a47      	ldr	r2, [pc, #284]	@ (8015f18 <xPortStartScheduler+0x128>)
 8015dfc:	4293      	cmp	r3, r2
 8015dfe:	d10b      	bne.n	8015e18 <xPortStartScheduler+0x28>
	__asm volatile
 8015e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e04:	f383 8811 	msr	BASEPRI, r3
 8015e08:	f3bf 8f6f 	isb	sy
 8015e0c:	f3bf 8f4f 	dsb	sy
 8015e10:	60fb      	str	r3, [r7, #12]
}
 8015e12:	bf00      	nop
 8015e14:	bf00      	nop
 8015e16:	e7fd      	b.n	8015e14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015e18:	4b3e      	ldr	r3, [pc, #248]	@ (8015f14 <xPortStartScheduler+0x124>)
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	4a3f      	ldr	r2, [pc, #252]	@ (8015f1c <xPortStartScheduler+0x12c>)
 8015e1e:	4293      	cmp	r3, r2
 8015e20:	d10b      	bne.n	8015e3a <xPortStartScheduler+0x4a>
	__asm volatile
 8015e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e26:	f383 8811 	msr	BASEPRI, r3
 8015e2a:	f3bf 8f6f 	isb	sy
 8015e2e:	f3bf 8f4f 	dsb	sy
 8015e32:	613b      	str	r3, [r7, #16]
}
 8015e34:	bf00      	nop
 8015e36:	bf00      	nop
 8015e38:	e7fd      	b.n	8015e36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015e3a:	4b39      	ldr	r3, [pc, #228]	@ (8015f20 <xPortStartScheduler+0x130>)
 8015e3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015e3e:	697b      	ldr	r3, [r7, #20]
 8015e40:	781b      	ldrb	r3, [r3, #0]
 8015e42:	b2db      	uxtb	r3, r3
 8015e44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015e46:	697b      	ldr	r3, [r7, #20]
 8015e48:	22ff      	movs	r2, #255	@ 0xff
 8015e4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015e4c:	697b      	ldr	r3, [r7, #20]
 8015e4e:	781b      	ldrb	r3, [r3, #0]
 8015e50:	b2db      	uxtb	r3, r3
 8015e52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015e54:	78fb      	ldrb	r3, [r7, #3]
 8015e56:	b2db      	uxtb	r3, r3
 8015e58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8015e5c:	b2da      	uxtb	r2, r3
 8015e5e:	4b31      	ldr	r3, [pc, #196]	@ (8015f24 <xPortStartScheduler+0x134>)
 8015e60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015e62:	4b31      	ldr	r3, [pc, #196]	@ (8015f28 <xPortStartScheduler+0x138>)
 8015e64:	2207      	movs	r2, #7
 8015e66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015e68:	e009      	b.n	8015e7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8015e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8015f28 <xPortStartScheduler+0x138>)
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	3b01      	subs	r3, #1
 8015e70:	4a2d      	ldr	r2, [pc, #180]	@ (8015f28 <xPortStartScheduler+0x138>)
 8015e72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015e74:	78fb      	ldrb	r3, [r7, #3]
 8015e76:	b2db      	uxtb	r3, r3
 8015e78:	005b      	lsls	r3, r3, #1
 8015e7a:	b2db      	uxtb	r3, r3
 8015e7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015e7e:	78fb      	ldrb	r3, [r7, #3]
 8015e80:	b2db      	uxtb	r3, r3
 8015e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015e86:	2b80      	cmp	r3, #128	@ 0x80
 8015e88:	d0ef      	beq.n	8015e6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015e8a:	4b27      	ldr	r3, [pc, #156]	@ (8015f28 <xPortStartScheduler+0x138>)
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	f1c3 0307 	rsb	r3, r3, #7
 8015e92:	2b04      	cmp	r3, #4
 8015e94:	d00b      	beq.n	8015eae <xPortStartScheduler+0xbe>
	__asm volatile
 8015e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e9a:	f383 8811 	msr	BASEPRI, r3
 8015e9e:	f3bf 8f6f 	isb	sy
 8015ea2:	f3bf 8f4f 	dsb	sy
 8015ea6:	60bb      	str	r3, [r7, #8]
}
 8015ea8:	bf00      	nop
 8015eaa:	bf00      	nop
 8015eac:	e7fd      	b.n	8015eaa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015eae:	4b1e      	ldr	r3, [pc, #120]	@ (8015f28 <xPortStartScheduler+0x138>)
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	021b      	lsls	r3, r3, #8
 8015eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8015f28 <xPortStartScheduler+0x138>)
 8015eb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8015f28 <xPortStartScheduler+0x138>)
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015ec0:	4a19      	ldr	r2, [pc, #100]	@ (8015f28 <xPortStartScheduler+0x138>)
 8015ec2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	b2da      	uxtb	r2, r3
 8015ec8:	697b      	ldr	r3, [r7, #20]
 8015eca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015ecc:	4b17      	ldr	r3, [pc, #92]	@ (8015f2c <xPortStartScheduler+0x13c>)
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	4a16      	ldr	r2, [pc, #88]	@ (8015f2c <xPortStartScheduler+0x13c>)
 8015ed2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8015ed6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015ed8:	4b14      	ldr	r3, [pc, #80]	@ (8015f2c <xPortStartScheduler+0x13c>)
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	4a13      	ldr	r2, [pc, #76]	@ (8015f2c <xPortStartScheduler+0x13c>)
 8015ede:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015ee2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015ee4:	f000 f8da 	bl	801609c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015ee8:	4b11      	ldr	r3, [pc, #68]	@ (8015f30 <xPortStartScheduler+0x140>)
 8015eea:	2200      	movs	r2, #0
 8015eec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015eee:	f000 f8f9 	bl	80160e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015ef2:	4b10      	ldr	r3, [pc, #64]	@ (8015f34 <xPortStartScheduler+0x144>)
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8015f34 <xPortStartScheduler+0x144>)
 8015ef8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8015efc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015efe:	f7ff ff63 	bl	8015dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015f02:	f7fe fbef 	bl	80146e4 <vTaskSwitchContext>
	prvTaskExitError();
 8015f06:	f7ff ff17 	bl	8015d38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015f0a:	2300      	movs	r3, #0
}
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	3718      	adds	r7, #24
 8015f10:	46bd      	mov	sp, r7
 8015f12:	bd80      	pop	{r7, pc}
 8015f14:	e000ed00 	.word	0xe000ed00
 8015f18:	410fc271 	.word	0x410fc271
 8015f1c:	410fc270 	.word	0x410fc270
 8015f20:	e000e400 	.word	0xe000e400
 8015f24:	24001838 	.word	0x24001838
 8015f28:	2400183c 	.word	0x2400183c
 8015f2c:	e000ed20 	.word	0xe000ed20
 8015f30:	24000010 	.word	0x24000010
 8015f34:	e000ef34 	.word	0xe000ef34

08015f38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015f38:	b480      	push	{r7}
 8015f3a:	b083      	sub	sp, #12
 8015f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8015f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f42:	f383 8811 	msr	BASEPRI, r3
 8015f46:	f3bf 8f6f 	isb	sy
 8015f4a:	f3bf 8f4f 	dsb	sy
 8015f4e:	607b      	str	r3, [r7, #4]
}
 8015f50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015f52:	4b10      	ldr	r3, [pc, #64]	@ (8015f94 <vPortEnterCritical+0x5c>)
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	3301      	adds	r3, #1
 8015f58:	4a0e      	ldr	r2, [pc, #56]	@ (8015f94 <vPortEnterCritical+0x5c>)
 8015f5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8015f94 <vPortEnterCritical+0x5c>)
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	2b01      	cmp	r3, #1
 8015f62:	d110      	bne.n	8015f86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015f64:	4b0c      	ldr	r3, [pc, #48]	@ (8015f98 <vPortEnterCritical+0x60>)
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	b2db      	uxtb	r3, r3
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d00b      	beq.n	8015f86 <vPortEnterCritical+0x4e>
	__asm volatile
 8015f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f72:	f383 8811 	msr	BASEPRI, r3
 8015f76:	f3bf 8f6f 	isb	sy
 8015f7a:	f3bf 8f4f 	dsb	sy
 8015f7e:	603b      	str	r3, [r7, #0]
}
 8015f80:	bf00      	nop
 8015f82:	bf00      	nop
 8015f84:	e7fd      	b.n	8015f82 <vPortEnterCritical+0x4a>
	}
}
 8015f86:	bf00      	nop
 8015f88:	370c      	adds	r7, #12
 8015f8a:	46bd      	mov	sp, r7
 8015f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f90:	4770      	bx	lr
 8015f92:	bf00      	nop
 8015f94:	24000010 	.word	0x24000010
 8015f98:	e000ed04 	.word	0xe000ed04

08015f9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015f9c:	b480      	push	{r7}
 8015f9e:	b083      	sub	sp, #12
 8015fa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015fa2:	4b12      	ldr	r3, [pc, #72]	@ (8015fec <vPortExitCritical+0x50>)
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d10b      	bne.n	8015fc2 <vPortExitCritical+0x26>
	__asm volatile
 8015faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fae:	f383 8811 	msr	BASEPRI, r3
 8015fb2:	f3bf 8f6f 	isb	sy
 8015fb6:	f3bf 8f4f 	dsb	sy
 8015fba:	607b      	str	r3, [r7, #4]
}
 8015fbc:	bf00      	nop
 8015fbe:	bf00      	nop
 8015fc0:	e7fd      	b.n	8015fbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8015fec <vPortExitCritical+0x50>)
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	3b01      	subs	r3, #1
 8015fc8:	4a08      	ldr	r2, [pc, #32]	@ (8015fec <vPortExitCritical+0x50>)
 8015fca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015fcc:	4b07      	ldr	r3, [pc, #28]	@ (8015fec <vPortExitCritical+0x50>)
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d105      	bne.n	8015fe0 <vPortExitCritical+0x44>
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015fd8:	683b      	ldr	r3, [r7, #0]
 8015fda:	f383 8811 	msr	BASEPRI, r3
}
 8015fde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015fe0:	bf00      	nop
 8015fe2:	370c      	adds	r7, #12
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fea:	4770      	bx	lr
 8015fec:	24000010 	.word	0x24000010

08015ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015ff0:	f3ef 8009 	mrs	r0, PSP
 8015ff4:	f3bf 8f6f 	isb	sy
 8015ff8:	4b15      	ldr	r3, [pc, #84]	@ (8016050 <pxCurrentTCBConst>)
 8015ffa:	681a      	ldr	r2, [r3, #0]
 8015ffc:	f01e 0f10 	tst.w	lr, #16
 8016000:	bf08      	it	eq
 8016002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801600a:	6010      	str	r0, [r2, #0]
 801600c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016010:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016014:	f380 8811 	msr	BASEPRI, r0
 8016018:	f3bf 8f4f 	dsb	sy
 801601c:	f3bf 8f6f 	isb	sy
 8016020:	f7fe fb60 	bl	80146e4 <vTaskSwitchContext>
 8016024:	f04f 0000 	mov.w	r0, #0
 8016028:	f380 8811 	msr	BASEPRI, r0
 801602c:	bc09      	pop	{r0, r3}
 801602e:	6819      	ldr	r1, [r3, #0]
 8016030:	6808      	ldr	r0, [r1, #0]
 8016032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016036:	f01e 0f10 	tst.w	lr, #16
 801603a:	bf08      	it	eq
 801603c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016040:	f380 8809 	msr	PSP, r0
 8016044:	f3bf 8f6f 	isb	sy
 8016048:	4770      	bx	lr
 801604a:	bf00      	nop
 801604c:	f3af 8000 	nop.w

08016050 <pxCurrentTCBConst>:
 8016050:	2400120c 	.word	0x2400120c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016054:	bf00      	nop
 8016056:	bf00      	nop

08016058 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b082      	sub	sp, #8
 801605c:	af00      	add	r7, sp, #0
	__asm volatile
 801605e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016062:	f383 8811 	msr	BASEPRI, r3
 8016066:	f3bf 8f6f 	isb	sy
 801606a:	f3bf 8f4f 	dsb	sy
 801606e:	607b      	str	r3, [r7, #4]
}
 8016070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016072:	f7fe fa7d 	bl	8014570 <xTaskIncrementTick>
 8016076:	4603      	mov	r3, r0
 8016078:	2b00      	cmp	r3, #0
 801607a:	d003      	beq.n	8016084 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801607c:	4b06      	ldr	r3, [pc, #24]	@ (8016098 <xPortSysTickHandler+0x40>)
 801607e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016082:	601a      	str	r2, [r3, #0]
 8016084:	2300      	movs	r3, #0
 8016086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016088:	683b      	ldr	r3, [r7, #0]
 801608a:	f383 8811 	msr	BASEPRI, r3
}
 801608e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016090:	bf00      	nop
 8016092:	3708      	adds	r7, #8
 8016094:	46bd      	mov	sp, r7
 8016096:	bd80      	pop	{r7, pc}
 8016098:	e000ed04 	.word	0xe000ed04

0801609c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801609c:	b480      	push	{r7}
 801609e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80160a0:	4b0b      	ldr	r3, [pc, #44]	@ (80160d0 <vPortSetupTimerInterrupt+0x34>)
 80160a2:	2200      	movs	r2, #0
 80160a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80160a6:	4b0b      	ldr	r3, [pc, #44]	@ (80160d4 <vPortSetupTimerInterrupt+0x38>)
 80160a8:	2200      	movs	r2, #0
 80160aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80160ac:	4b0a      	ldr	r3, [pc, #40]	@ (80160d8 <vPortSetupTimerInterrupt+0x3c>)
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	4a0a      	ldr	r2, [pc, #40]	@ (80160dc <vPortSetupTimerInterrupt+0x40>)
 80160b2:	fba2 2303 	umull	r2, r3, r2, r3
 80160b6:	099b      	lsrs	r3, r3, #6
 80160b8:	4a09      	ldr	r2, [pc, #36]	@ (80160e0 <vPortSetupTimerInterrupt+0x44>)
 80160ba:	3b01      	subs	r3, #1
 80160bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80160be:	4b04      	ldr	r3, [pc, #16]	@ (80160d0 <vPortSetupTimerInterrupt+0x34>)
 80160c0:	2207      	movs	r2, #7
 80160c2:	601a      	str	r2, [r3, #0]
}
 80160c4:	bf00      	nop
 80160c6:	46bd      	mov	sp, r7
 80160c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160cc:	4770      	bx	lr
 80160ce:	bf00      	nop
 80160d0:	e000e010 	.word	0xe000e010
 80160d4:	e000e018 	.word	0xe000e018
 80160d8:	24000000 	.word	0x24000000
 80160dc:	10624dd3 	.word	0x10624dd3
 80160e0:	e000e014 	.word	0xe000e014

080160e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80160e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80160f4 <vPortEnableVFP+0x10>
 80160e8:	6801      	ldr	r1, [r0, #0]
 80160ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80160ee:	6001      	str	r1, [r0, #0]
 80160f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80160f2:	bf00      	nop
 80160f4:	e000ed88 	.word	0xe000ed88

080160f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80160f8:	b480      	push	{r7}
 80160fa:	b085      	sub	sp, #20
 80160fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80160fe:	f3ef 8305 	mrs	r3, IPSR
 8016102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	2b0f      	cmp	r3, #15
 8016108:	d915      	bls.n	8016136 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801610a:	4a18      	ldr	r2, [pc, #96]	@ (801616c <vPortValidateInterruptPriority+0x74>)
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	4413      	add	r3, r2
 8016110:	781b      	ldrb	r3, [r3, #0]
 8016112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016114:	4b16      	ldr	r3, [pc, #88]	@ (8016170 <vPortValidateInterruptPriority+0x78>)
 8016116:	781b      	ldrb	r3, [r3, #0]
 8016118:	7afa      	ldrb	r2, [r7, #11]
 801611a:	429a      	cmp	r2, r3
 801611c:	d20b      	bcs.n	8016136 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801611e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016122:	f383 8811 	msr	BASEPRI, r3
 8016126:	f3bf 8f6f 	isb	sy
 801612a:	f3bf 8f4f 	dsb	sy
 801612e:	607b      	str	r3, [r7, #4]
}
 8016130:	bf00      	nop
 8016132:	bf00      	nop
 8016134:	e7fd      	b.n	8016132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016136:	4b0f      	ldr	r3, [pc, #60]	@ (8016174 <vPortValidateInterruptPriority+0x7c>)
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801613e:	4b0e      	ldr	r3, [pc, #56]	@ (8016178 <vPortValidateInterruptPriority+0x80>)
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	429a      	cmp	r2, r3
 8016144:	d90b      	bls.n	801615e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8016146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801614a:	f383 8811 	msr	BASEPRI, r3
 801614e:	f3bf 8f6f 	isb	sy
 8016152:	f3bf 8f4f 	dsb	sy
 8016156:	603b      	str	r3, [r7, #0]
}
 8016158:	bf00      	nop
 801615a:	bf00      	nop
 801615c:	e7fd      	b.n	801615a <vPortValidateInterruptPriority+0x62>
	}
 801615e:	bf00      	nop
 8016160:	3714      	adds	r7, #20
 8016162:	46bd      	mov	sp, r7
 8016164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016168:	4770      	bx	lr
 801616a:	bf00      	nop
 801616c:	e000e3f0 	.word	0xe000e3f0
 8016170:	24001838 	.word	0x24001838
 8016174:	e000ed0c 	.word	0xe000ed0c
 8016178:	2400183c 	.word	0x2400183c

0801617c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801617c:	b580      	push	{r7, lr}
 801617e:	b08a      	sub	sp, #40	@ 0x28
 8016180:	af00      	add	r7, sp, #0
 8016182:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016184:	2300      	movs	r3, #0
 8016186:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016188:	f7fe f924 	bl	80143d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801618c:	4b5c      	ldr	r3, [pc, #368]	@ (8016300 <pvPortMalloc+0x184>)
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d101      	bne.n	8016198 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016194:	f000 f924 	bl	80163e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016198:	4b5a      	ldr	r3, [pc, #360]	@ (8016304 <pvPortMalloc+0x188>)
 801619a:	681a      	ldr	r2, [r3, #0]
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	4013      	ands	r3, r2
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	f040 8095 	bne.w	80162d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d01e      	beq.n	80161ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80161ac:	2208      	movs	r2, #8
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	4413      	add	r3, r2
 80161b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	f003 0307 	and.w	r3, r3, #7
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d015      	beq.n	80161ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	f023 0307 	bic.w	r3, r3, #7
 80161c4:	3308      	adds	r3, #8
 80161c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	f003 0307 	and.w	r3, r3, #7
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d00b      	beq.n	80161ea <pvPortMalloc+0x6e>
	__asm volatile
 80161d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161d6:	f383 8811 	msr	BASEPRI, r3
 80161da:	f3bf 8f6f 	isb	sy
 80161de:	f3bf 8f4f 	dsb	sy
 80161e2:	617b      	str	r3, [r7, #20]
}
 80161e4:	bf00      	nop
 80161e6:	bf00      	nop
 80161e8:	e7fd      	b.n	80161e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d06f      	beq.n	80162d0 <pvPortMalloc+0x154>
 80161f0:	4b45      	ldr	r3, [pc, #276]	@ (8016308 <pvPortMalloc+0x18c>)
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	687a      	ldr	r2, [r7, #4]
 80161f6:	429a      	cmp	r2, r3
 80161f8:	d86a      	bhi.n	80162d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80161fa:	4b44      	ldr	r3, [pc, #272]	@ (801630c <pvPortMalloc+0x190>)
 80161fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80161fe:	4b43      	ldr	r3, [pc, #268]	@ (801630c <pvPortMalloc+0x190>)
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016204:	e004      	b.n	8016210 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016208:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801620a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016212:	685b      	ldr	r3, [r3, #4]
 8016214:	687a      	ldr	r2, [r7, #4]
 8016216:	429a      	cmp	r2, r3
 8016218:	d903      	bls.n	8016222 <pvPortMalloc+0xa6>
 801621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d1f1      	bne.n	8016206 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016222:	4b37      	ldr	r3, [pc, #220]	@ (8016300 <pvPortMalloc+0x184>)
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016228:	429a      	cmp	r2, r3
 801622a:	d051      	beq.n	80162d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801622c:	6a3b      	ldr	r3, [r7, #32]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	2208      	movs	r2, #8
 8016232:	4413      	add	r3, r2
 8016234:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016238:	681a      	ldr	r2, [r3, #0]
 801623a:	6a3b      	ldr	r3, [r7, #32]
 801623c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016240:	685a      	ldr	r2, [r3, #4]
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	1ad2      	subs	r2, r2, r3
 8016246:	2308      	movs	r3, #8
 8016248:	005b      	lsls	r3, r3, #1
 801624a:	429a      	cmp	r2, r3
 801624c:	d920      	bls.n	8016290 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801624e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	4413      	add	r3, r2
 8016254:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016256:	69bb      	ldr	r3, [r7, #24]
 8016258:	f003 0307 	and.w	r3, r3, #7
 801625c:	2b00      	cmp	r3, #0
 801625e:	d00b      	beq.n	8016278 <pvPortMalloc+0xfc>
	__asm volatile
 8016260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016264:	f383 8811 	msr	BASEPRI, r3
 8016268:	f3bf 8f6f 	isb	sy
 801626c:	f3bf 8f4f 	dsb	sy
 8016270:	613b      	str	r3, [r7, #16]
}
 8016272:	bf00      	nop
 8016274:	bf00      	nop
 8016276:	e7fd      	b.n	8016274 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801627a:	685a      	ldr	r2, [r3, #4]
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	1ad2      	subs	r2, r2, r3
 8016280:	69bb      	ldr	r3, [r7, #24]
 8016282:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016286:	687a      	ldr	r2, [r7, #4]
 8016288:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801628a:	69b8      	ldr	r0, [r7, #24]
 801628c:	f000 f90a 	bl	80164a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016290:	4b1d      	ldr	r3, [pc, #116]	@ (8016308 <pvPortMalloc+0x18c>)
 8016292:	681a      	ldr	r2, [r3, #0]
 8016294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016296:	685b      	ldr	r3, [r3, #4]
 8016298:	1ad3      	subs	r3, r2, r3
 801629a:	4a1b      	ldr	r2, [pc, #108]	@ (8016308 <pvPortMalloc+0x18c>)
 801629c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801629e:	4b1a      	ldr	r3, [pc, #104]	@ (8016308 <pvPortMalloc+0x18c>)
 80162a0:	681a      	ldr	r2, [r3, #0]
 80162a2:	4b1b      	ldr	r3, [pc, #108]	@ (8016310 <pvPortMalloc+0x194>)
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	429a      	cmp	r2, r3
 80162a8:	d203      	bcs.n	80162b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80162aa:	4b17      	ldr	r3, [pc, #92]	@ (8016308 <pvPortMalloc+0x18c>)
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	4a18      	ldr	r2, [pc, #96]	@ (8016310 <pvPortMalloc+0x194>)
 80162b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80162b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162b4:	685a      	ldr	r2, [r3, #4]
 80162b6:	4b13      	ldr	r3, [pc, #76]	@ (8016304 <pvPortMalloc+0x188>)
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	431a      	orrs	r2, r3
 80162bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80162c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162c2:	2200      	movs	r2, #0
 80162c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80162c6:	4b13      	ldr	r3, [pc, #76]	@ (8016314 <pvPortMalloc+0x198>)
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	3301      	adds	r3, #1
 80162cc:	4a11      	ldr	r2, [pc, #68]	@ (8016314 <pvPortMalloc+0x198>)
 80162ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80162d0:	f7fe f88e 	bl	80143f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80162d4:	69fb      	ldr	r3, [r7, #28]
 80162d6:	f003 0307 	and.w	r3, r3, #7
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d00b      	beq.n	80162f6 <pvPortMalloc+0x17a>
	__asm volatile
 80162de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162e2:	f383 8811 	msr	BASEPRI, r3
 80162e6:	f3bf 8f6f 	isb	sy
 80162ea:	f3bf 8f4f 	dsb	sy
 80162ee:	60fb      	str	r3, [r7, #12]
}
 80162f0:	bf00      	nop
 80162f2:	bf00      	nop
 80162f4:	e7fd      	b.n	80162f2 <pvPortMalloc+0x176>
	return pvReturn;
 80162f6:	69fb      	ldr	r3, [r7, #28]
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	3728      	adds	r7, #40	@ 0x28
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd80      	pop	{r7, pc}
 8016300:	24005448 	.word	0x24005448
 8016304:	2400545c 	.word	0x2400545c
 8016308:	2400544c 	.word	0x2400544c
 801630c:	24005440 	.word	0x24005440
 8016310:	24005450 	.word	0x24005450
 8016314:	24005454 	.word	0x24005454

08016318 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016318:	b580      	push	{r7, lr}
 801631a:	b086      	sub	sp, #24
 801631c:	af00      	add	r7, sp, #0
 801631e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d04f      	beq.n	80163ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801632a:	2308      	movs	r3, #8
 801632c:	425b      	negs	r3, r3
 801632e:	697a      	ldr	r2, [r7, #20]
 8016330:	4413      	add	r3, r2
 8016332:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016334:	697b      	ldr	r3, [r7, #20]
 8016336:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016338:	693b      	ldr	r3, [r7, #16]
 801633a:	685a      	ldr	r2, [r3, #4]
 801633c:	4b25      	ldr	r3, [pc, #148]	@ (80163d4 <vPortFree+0xbc>)
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	4013      	ands	r3, r2
 8016342:	2b00      	cmp	r3, #0
 8016344:	d10b      	bne.n	801635e <vPortFree+0x46>
	__asm volatile
 8016346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801634a:	f383 8811 	msr	BASEPRI, r3
 801634e:	f3bf 8f6f 	isb	sy
 8016352:	f3bf 8f4f 	dsb	sy
 8016356:	60fb      	str	r3, [r7, #12]
}
 8016358:	bf00      	nop
 801635a:	bf00      	nop
 801635c:	e7fd      	b.n	801635a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801635e:	693b      	ldr	r3, [r7, #16]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d00b      	beq.n	801637e <vPortFree+0x66>
	__asm volatile
 8016366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801636a:	f383 8811 	msr	BASEPRI, r3
 801636e:	f3bf 8f6f 	isb	sy
 8016372:	f3bf 8f4f 	dsb	sy
 8016376:	60bb      	str	r3, [r7, #8]
}
 8016378:	bf00      	nop
 801637a:	bf00      	nop
 801637c:	e7fd      	b.n	801637a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801637e:	693b      	ldr	r3, [r7, #16]
 8016380:	685a      	ldr	r2, [r3, #4]
 8016382:	4b14      	ldr	r3, [pc, #80]	@ (80163d4 <vPortFree+0xbc>)
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	4013      	ands	r3, r2
 8016388:	2b00      	cmp	r3, #0
 801638a:	d01e      	beq.n	80163ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801638c:	693b      	ldr	r3, [r7, #16]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d11a      	bne.n	80163ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016394:	693b      	ldr	r3, [r7, #16]
 8016396:	685a      	ldr	r2, [r3, #4]
 8016398:	4b0e      	ldr	r3, [pc, #56]	@ (80163d4 <vPortFree+0xbc>)
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	43db      	mvns	r3, r3
 801639e:	401a      	ands	r2, r3
 80163a0:	693b      	ldr	r3, [r7, #16]
 80163a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80163a4:	f7fe f816 	bl	80143d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80163a8:	693b      	ldr	r3, [r7, #16]
 80163aa:	685a      	ldr	r2, [r3, #4]
 80163ac:	4b0a      	ldr	r3, [pc, #40]	@ (80163d8 <vPortFree+0xc0>)
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	4413      	add	r3, r2
 80163b2:	4a09      	ldr	r2, [pc, #36]	@ (80163d8 <vPortFree+0xc0>)
 80163b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80163b6:	6938      	ldr	r0, [r7, #16]
 80163b8:	f000 f874 	bl	80164a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80163bc:	4b07      	ldr	r3, [pc, #28]	@ (80163dc <vPortFree+0xc4>)
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	3301      	adds	r3, #1
 80163c2:	4a06      	ldr	r2, [pc, #24]	@ (80163dc <vPortFree+0xc4>)
 80163c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80163c6:	f7fe f813 	bl	80143f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80163ca:	bf00      	nop
 80163cc:	3718      	adds	r7, #24
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bd80      	pop	{r7, pc}
 80163d2:	bf00      	nop
 80163d4:	2400545c 	.word	0x2400545c
 80163d8:	2400544c 	.word	0x2400544c
 80163dc:	24005458 	.word	0x24005458

080163e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80163e0:	b480      	push	{r7}
 80163e2:	b085      	sub	sp, #20
 80163e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80163e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80163ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80163ec:	4b27      	ldr	r3, [pc, #156]	@ (801648c <prvHeapInit+0xac>)
 80163ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	f003 0307 	and.w	r3, r3, #7
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d00c      	beq.n	8016414 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	3307      	adds	r3, #7
 80163fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	f023 0307 	bic.w	r3, r3, #7
 8016406:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016408:	68ba      	ldr	r2, [r7, #8]
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	1ad3      	subs	r3, r2, r3
 801640e:	4a1f      	ldr	r2, [pc, #124]	@ (801648c <prvHeapInit+0xac>)
 8016410:	4413      	add	r3, r2
 8016412:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016418:	4a1d      	ldr	r2, [pc, #116]	@ (8016490 <prvHeapInit+0xb0>)
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801641e:	4b1c      	ldr	r3, [pc, #112]	@ (8016490 <prvHeapInit+0xb0>)
 8016420:	2200      	movs	r2, #0
 8016422:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	68ba      	ldr	r2, [r7, #8]
 8016428:	4413      	add	r3, r2
 801642a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801642c:	2208      	movs	r2, #8
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	1a9b      	subs	r3, r3, r2
 8016432:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	f023 0307 	bic.w	r3, r3, #7
 801643a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	4a15      	ldr	r2, [pc, #84]	@ (8016494 <prvHeapInit+0xb4>)
 8016440:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016442:	4b14      	ldr	r3, [pc, #80]	@ (8016494 <prvHeapInit+0xb4>)
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	2200      	movs	r2, #0
 8016448:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801644a:	4b12      	ldr	r3, [pc, #72]	@ (8016494 <prvHeapInit+0xb4>)
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	2200      	movs	r2, #0
 8016450:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016456:	683b      	ldr	r3, [r7, #0]
 8016458:	68fa      	ldr	r2, [r7, #12]
 801645a:	1ad2      	subs	r2, r2, r3
 801645c:	683b      	ldr	r3, [r7, #0]
 801645e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016460:	4b0c      	ldr	r3, [pc, #48]	@ (8016494 <prvHeapInit+0xb4>)
 8016462:	681a      	ldr	r2, [r3, #0]
 8016464:	683b      	ldr	r3, [r7, #0]
 8016466:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016468:	683b      	ldr	r3, [r7, #0]
 801646a:	685b      	ldr	r3, [r3, #4]
 801646c:	4a0a      	ldr	r2, [pc, #40]	@ (8016498 <prvHeapInit+0xb8>)
 801646e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016470:	683b      	ldr	r3, [r7, #0]
 8016472:	685b      	ldr	r3, [r3, #4]
 8016474:	4a09      	ldr	r2, [pc, #36]	@ (801649c <prvHeapInit+0xbc>)
 8016476:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016478:	4b09      	ldr	r3, [pc, #36]	@ (80164a0 <prvHeapInit+0xc0>)
 801647a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801647e:	601a      	str	r2, [r3, #0]
}
 8016480:	bf00      	nop
 8016482:	3714      	adds	r7, #20
 8016484:	46bd      	mov	sp, r7
 8016486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801648a:	4770      	bx	lr
 801648c:	24001840 	.word	0x24001840
 8016490:	24005440 	.word	0x24005440
 8016494:	24005448 	.word	0x24005448
 8016498:	24005450 	.word	0x24005450
 801649c:	2400544c 	.word	0x2400544c
 80164a0:	2400545c 	.word	0x2400545c

080164a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80164a4:	b480      	push	{r7}
 80164a6:	b085      	sub	sp, #20
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80164ac:	4b28      	ldr	r3, [pc, #160]	@ (8016550 <prvInsertBlockIntoFreeList+0xac>)
 80164ae:	60fb      	str	r3, [r7, #12]
 80164b0:	e002      	b.n	80164b8 <prvInsertBlockIntoFreeList+0x14>
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	60fb      	str	r3, [r7, #12]
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	687a      	ldr	r2, [r7, #4]
 80164be:	429a      	cmp	r2, r3
 80164c0:	d8f7      	bhi.n	80164b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	685b      	ldr	r3, [r3, #4]
 80164ca:	68ba      	ldr	r2, [r7, #8]
 80164cc:	4413      	add	r3, r2
 80164ce:	687a      	ldr	r2, [r7, #4]
 80164d0:	429a      	cmp	r2, r3
 80164d2:	d108      	bne.n	80164e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	685a      	ldr	r2, [r3, #4]
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	685b      	ldr	r3, [r3, #4]
 80164dc:	441a      	add	r2, r3
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	685b      	ldr	r3, [r3, #4]
 80164ee:	68ba      	ldr	r2, [r7, #8]
 80164f0:	441a      	add	r2, r3
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	429a      	cmp	r2, r3
 80164f8:	d118      	bne.n	801652c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	681a      	ldr	r2, [r3, #0]
 80164fe:	4b15      	ldr	r3, [pc, #84]	@ (8016554 <prvInsertBlockIntoFreeList+0xb0>)
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	429a      	cmp	r2, r3
 8016504:	d00d      	beq.n	8016522 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	685a      	ldr	r2, [r3, #4]
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	685b      	ldr	r3, [r3, #4]
 8016510:	441a      	add	r2, r3
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	681a      	ldr	r2, [r3, #0]
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	601a      	str	r2, [r3, #0]
 8016520:	e008      	b.n	8016534 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016522:	4b0c      	ldr	r3, [pc, #48]	@ (8016554 <prvInsertBlockIntoFreeList+0xb0>)
 8016524:	681a      	ldr	r2, [r3, #0]
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	601a      	str	r2, [r3, #0]
 801652a:	e003      	b.n	8016534 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	681a      	ldr	r2, [r3, #0]
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016534:	68fa      	ldr	r2, [r7, #12]
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	429a      	cmp	r2, r3
 801653a:	d002      	beq.n	8016542 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	687a      	ldr	r2, [r7, #4]
 8016540:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016542:	bf00      	nop
 8016544:	3714      	adds	r7, #20
 8016546:	46bd      	mov	sp, r7
 8016548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801654c:	4770      	bx	lr
 801654e:	bf00      	nop
 8016550:	24005440 	.word	0x24005440
 8016554:	24005448 	.word	0x24005448

08016558 <_ZdlPvj>:
 8016558:	f000 b800 	b.w	801655c <_ZdlPv>

0801655c <_ZdlPv>:
 801655c:	f000 b808 	b.w	8016570 <free>

08016560 <malloc>:
 8016560:	4b02      	ldr	r3, [pc, #8]	@ (801656c <malloc+0xc>)
 8016562:	4601      	mov	r1, r0
 8016564:	6818      	ldr	r0, [r3, #0]
 8016566:	f000 b82d 	b.w	80165c4 <_malloc_r>
 801656a:	bf00      	nop
 801656c:	24000020 	.word	0x24000020

08016570 <free>:
 8016570:	4b02      	ldr	r3, [pc, #8]	@ (801657c <free+0xc>)
 8016572:	4601      	mov	r1, r0
 8016574:	6818      	ldr	r0, [r3, #0]
 8016576:	f000 bc89 	b.w	8016e8c <_free_r>
 801657a:	bf00      	nop
 801657c:	24000020 	.word	0x24000020

08016580 <sbrk_aligned>:
 8016580:	b570      	push	{r4, r5, r6, lr}
 8016582:	4e0f      	ldr	r6, [pc, #60]	@ (80165c0 <sbrk_aligned+0x40>)
 8016584:	460c      	mov	r4, r1
 8016586:	6831      	ldr	r1, [r6, #0]
 8016588:	4605      	mov	r5, r0
 801658a:	b911      	cbnz	r1, 8016592 <sbrk_aligned+0x12>
 801658c:	f000 fc20 	bl	8016dd0 <_sbrk_r>
 8016590:	6030      	str	r0, [r6, #0]
 8016592:	4621      	mov	r1, r4
 8016594:	4628      	mov	r0, r5
 8016596:	f000 fc1b 	bl	8016dd0 <_sbrk_r>
 801659a:	1c43      	adds	r3, r0, #1
 801659c:	d103      	bne.n	80165a6 <sbrk_aligned+0x26>
 801659e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80165a2:	4620      	mov	r0, r4
 80165a4:	bd70      	pop	{r4, r5, r6, pc}
 80165a6:	1cc4      	adds	r4, r0, #3
 80165a8:	f024 0403 	bic.w	r4, r4, #3
 80165ac:	42a0      	cmp	r0, r4
 80165ae:	d0f8      	beq.n	80165a2 <sbrk_aligned+0x22>
 80165b0:	1a21      	subs	r1, r4, r0
 80165b2:	4628      	mov	r0, r5
 80165b4:	f000 fc0c 	bl	8016dd0 <_sbrk_r>
 80165b8:	3001      	adds	r0, #1
 80165ba:	d1f2      	bne.n	80165a2 <sbrk_aligned+0x22>
 80165bc:	e7ef      	b.n	801659e <sbrk_aligned+0x1e>
 80165be:	bf00      	nop
 80165c0:	24005460 	.word	0x24005460

080165c4 <_malloc_r>:
 80165c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80165c8:	1ccd      	adds	r5, r1, #3
 80165ca:	f025 0503 	bic.w	r5, r5, #3
 80165ce:	3508      	adds	r5, #8
 80165d0:	2d0c      	cmp	r5, #12
 80165d2:	bf38      	it	cc
 80165d4:	250c      	movcc	r5, #12
 80165d6:	2d00      	cmp	r5, #0
 80165d8:	4606      	mov	r6, r0
 80165da:	db01      	blt.n	80165e0 <_malloc_r+0x1c>
 80165dc:	42a9      	cmp	r1, r5
 80165de:	d904      	bls.n	80165ea <_malloc_r+0x26>
 80165e0:	230c      	movs	r3, #12
 80165e2:	6033      	str	r3, [r6, #0]
 80165e4:	2000      	movs	r0, #0
 80165e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80166c0 <_malloc_r+0xfc>
 80165ee:	f000 f869 	bl	80166c4 <__malloc_lock>
 80165f2:	f8d8 3000 	ldr.w	r3, [r8]
 80165f6:	461c      	mov	r4, r3
 80165f8:	bb44      	cbnz	r4, 801664c <_malloc_r+0x88>
 80165fa:	4629      	mov	r1, r5
 80165fc:	4630      	mov	r0, r6
 80165fe:	f7ff ffbf 	bl	8016580 <sbrk_aligned>
 8016602:	1c43      	adds	r3, r0, #1
 8016604:	4604      	mov	r4, r0
 8016606:	d158      	bne.n	80166ba <_malloc_r+0xf6>
 8016608:	f8d8 4000 	ldr.w	r4, [r8]
 801660c:	4627      	mov	r7, r4
 801660e:	2f00      	cmp	r7, #0
 8016610:	d143      	bne.n	801669a <_malloc_r+0xd6>
 8016612:	2c00      	cmp	r4, #0
 8016614:	d04b      	beq.n	80166ae <_malloc_r+0xea>
 8016616:	6823      	ldr	r3, [r4, #0]
 8016618:	4639      	mov	r1, r7
 801661a:	4630      	mov	r0, r6
 801661c:	eb04 0903 	add.w	r9, r4, r3
 8016620:	f000 fbd6 	bl	8016dd0 <_sbrk_r>
 8016624:	4581      	cmp	r9, r0
 8016626:	d142      	bne.n	80166ae <_malloc_r+0xea>
 8016628:	6821      	ldr	r1, [r4, #0]
 801662a:	1a6d      	subs	r5, r5, r1
 801662c:	4629      	mov	r1, r5
 801662e:	4630      	mov	r0, r6
 8016630:	f7ff ffa6 	bl	8016580 <sbrk_aligned>
 8016634:	3001      	adds	r0, #1
 8016636:	d03a      	beq.n	80166ae <_malloc_r+0xea>
 8016638:	6823      	ldr	r3, [r4, #0]
 801663a:	442b      	add	r3, r5
 801663c:	6023      	str	r3, [r4, #0]
 801663e:	f8d8 3000 	ldr.w	r3, [r8]
 8016642:	685a      	ldr	r2, [r3, #4]
 8016644:	bb62      	cbnz	r2, 80166a0 <_malloc_r+0xdc>
 8016646:	f8c8 7000 	str.w	r7, [r8]
 801664a:	e00f      	b.n	801666c <_malloc_r+0xa8>
 801664c:	6822      	ldr	r2, [r4, #0]
 801664e:	1b52      	subs	r2, r2, r5
 8016650:	d420      	bmi.n	8016694 <_malloc_r+0xd0>
 8016652:	2a0b      	cmp	r2, #11
 8016654:	d917      	bls.n	8016686 <_malloc_r+0xc2>
 8016656:	1961      	adds	r1, r4, r5
 8016658:	42a3      	cmp	r3, r4
 801665a:	6025      	str	r5, [r4, #0]
 801665c:	bf18      	it	ne
 801665e:	6059      	strne	r1, [r3, #4]
 8016660:	6863      	ldr	r3, [r4, #4]
 8016662:	bf08      	it	eq
 8016664:	f8c8 1000 	streq.w	r1, [r8]
 8016668:	5162      	str	r2, [r4, r5]
 801666a:	604b      	str	r3, [r1, #4]
 801666c:	4630      	mov	r0, r6
 801666e:	f000 f82f 	bl	80166d0 <__malloc_unlock>
 8016672:	f104 000b 	add.w	r0, r4, #11
 8016676:	1d23      	adds	r3, r4, #4
 8016678:	f020 0007 	bic.w	r0, r0, #7
 801667c:	1ac2      	subs	r2, r0, r3
 801667e:	bf1c      	itt	ne
 8016680:	1a1b      	subne	r3, r3, r0
 8016682:	50a3      	strne	r3, [r4, r2]
 8016684:	e7af      	b.n	80165e6 <_malloc_r+0x22>
 8016686:	6862      	ldr	r2, [r4, #4]
 8016688:	42a3      	cmp	r3, r4
 801668a:	bf0c      	ite	eq
 801668c:	f8c8 2000 	streq.w	r2, [r8]
 8016690:	605a      	strne	r2, [r3, #4]
 8016692:	e7eb      	b.n	801666c <_malloc_r+0xa8>
 8016694:	4623      	mov	r3, r4
 8016696:	6864      	ldr	r4, [r4, #4]
 8016698:	e7ae      	b.n	80165f8 <_malloc_r+0x34>
 801669a:	463c      	mov	r4, r7
 801669c:	687f      	ldr	r7, [r7, #4]
 801669e:	e7b6      	b.n	801660e <_malloc_r+0x4a>
 80166a0:	461a      	mov	r2, r3
 80166a2:	685b      	ldr	r3, [r3, #4]
 80166a4:	42a3      	cmp	r3, r4
 80166a6:	d1fb      	bne.n	80166a0 <_malloc_r+0xdc>
 80166a8:	2300      	movs	r3, #0
 80166aa:	6053      	str	r3, [r2, #4]
 80166ac:	e7de      	b.n	801666c <_malloc_r+0xa8>
 80166ae:	230c      	movs	r3, #12
 80166b0:	6033      	str	r3, [r6, #0]
 80166b2:	4630      	mov	r0, r6
 80166b4:	f000 f80c 	bl	80166d0 <__malloc_unlock>
 80166b8:	e794      	b.n	80165e4 <_malloc_r+0x20>
 80166ba:	6005      	str	r5, [r0, #0]
 80166bc:	e7d6      	b.n	801666c <_malloc_r+0xa8>
 80166be:	bf00      	nop
 80166c0:	24005464 	.word	0x24005464

080166c4 <__malloc_lock>:
 80166c4:	4801      	ldr	r0, [pc, #4]	@ (80166cc <__malloc_lock+0x8>)
 80166c6:	f000 bbd0 	b.w	8016e6a <__retarget_lock_acquire_recursive>
 80166ca:	bf00      	nop
 80166cc:	240055a8 	.word	0x240055a8

080166d0 <__malloc_unlock>:
 80166d0:	4801      	ldr	r0, [pc, #4]	@ (80166d8 <__malloc_unlock+0x8>)
 80166d2:	f000 bbcb 	b.w	8016e6c <__retarget_lock_release_recursive>
 80166d6:	bf00      	nop
 80166d8:	240055a8 	.word	0x240055a8

080166dc <std>:
 80166dc:	2300      	movs	r3, #0
 80166de:	b510      	push	{r4, lr}
 80166e0:	4604      	mov	r4, r0
 80166e2:	e9c0 3300 	strd	r3, r3, [r0]
 80166e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80166ea:	6083      	str	r3, [r0, #8]
 80166ec:	8181      	strh	r1, [r0, #12]
 80166ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80166f0:	81c2      	strh	r2, [r0, #14]
 80166f2:	6183      	str	r3, [r0, #24]
 80166f4:	4619      	mov	r1, r3
 80166f6:	2208      	movs	r2, #8
 80166f8:	305c      	adds	r0, #92	@ 0x5c
 80166fa:	f000 facf 	bl	8016c9c <memset>
 80166fe:	4b0d      	ldr	r3, [pc, #52]	@ (8016734 <std+0x58>)
 8016700:	6263      	str	r3, [r4, #36]	@ 0x24
 8016702:	4b0d      	ldr	r3, [pc, #52]	@ (8016738 <std+0x5c>)
 8016704:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016706:	4b0d      	ldr	r3, [pc, #52]	@ (801673c <std+0x60>)
 8016708:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801670a:	4b0d      	ldr	r3, [pc, #52]	@ (8016740 <std+0x64>)
 801670c:	6323      	str	r3, [r4, #48]	@ 0x30
 801670e:	4b0d      	ldr	r3, [pc, #52]	@ (8016744 <std+0x68>)
 8016710:	6224      	str	r4, [r4, #32]
 8016712:	429c      	cmp	r4, r3
 8016714:	d006      	beq.n	8016724 <std+0x48>
 8016716:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801671a:	4294      	cmp	r4, r2
 801671c:	d002      	beq.n	8016724 <std+0x48>
 801671e:	33d0      	adds	r3, #208	@ 0xd0
 8016720:	429c      	cmp	r4, r3
 8016722:	d105      	bne.n	8016730 <std+0x54>
 8016724:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801672c:	f000 bb9c 	b.w	8016e68 <__retarget_lock_init_recursive>
 8016730:	bd10      	pop	{r4, pc}
 8016732:	bf00      	nop
 8016734:	08016aed 	.word	0x08016aed
 8016738:	08016b0f 	.word	0x08016b0f
 801673c:	08016b47 	.word	0x08016b47
 8016740:	08016b6b 	.word	0x08016b6b
 8016744:	24005468 	.word	0x24005468

08016748 <stdio_exit_handler>:
 8016748:	4a02      	ldr	r2, [pc, #8]	@ (8016754 <stdio_exit_handler+0xc>)
 801674a:	4903      	ldr	r1, [pc, #12]	@ (8016758 <stdio_exit_handler+0x10>)
 801674c:	4803      	ldr	r0, [pc, #12]	@ (801675c <stdio_exit_handler+0x14>)
 801674e:	f000 b869 	b.w	8016824 <_fwalk_sglue>
 8016752:	bf00      	nop
 8016754:	24000014 	.word	0x24000014
 8016758:	08017875 	.word	0x08017875
 801675c:	24000024 	.word	0x24000024

08016760 <cleanup_stdio>:
 8016760:	6841      	ldr	r1, [r0, #4]
 8016762:	4b0c      	ldr	r3, [pc, #48]	@ (8016794 <cleanup_stdio+0x34>)
 8016764:	4299      	cmp	r1, r3
 8016766:	b510      	push	{r4, lr}
 8016768:	4604      	mov	r4, r0
 801676a:	d001      	beq.n	8016770 <cleanup_stdio+0x10>
 801676c:	f001 f882 	bl	8017874 <_fflush_r>
 8016770:	68a1      	ldr	r1, [r4, #8]
 8016772:	4b09      	ldr	r3, [pc, #36]	@ (8016798 <cleanup_stdio+0x38>)
 8016774:	4299      	cmp	r1, r3
 8016776:	d002      	beq.n	801677e <cleanup_stdio+0x1e>
 8016778:	4620      	mov	r0, r4
 801677a:	f001 f87b 	bl	8017874 <_fflush_r>
 801677e:	68e1      	ldr	r1, [r4, #12]
 8016780:	4b06      	ldr	r3, [pc, #24]	@ (801679c <cleanup_stdio+0x3c>)
 8016782:	4299      	cmp	r1, r3
 8016784:	d004      	beq.n	8016790 <cleanup_stdio+0x30>
 8016786:	4620      	mov	r0, r4
 8016788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801678c:	f001 b872 	b.w	8017874 <_fflush_r>
 8016790:	bd10      	pop	{r4, pc}
 8016792:	bf00      	nop
 8016794:	24005468 	.word	0x24005468
 8016798:	240054d0 	.word	0x240054d0
 801679c:	24005538 	.word	0x24005538

080167a0 <global_stdio_init.part.0>:
 80167a0:	b510      	push	{r4, lr}
 80167a2:	4b0b      	ldr	r3, [pc, #44]	@ (80167d0 <global_stdio_init.part.0+0x30>)
 80167a4:	4c0b      	ldr	r4, [pc, #44]	@ (80167d4 <global_stdio_init.part.0+0x34>)
 80167a6:	4a0c      	ldr	r2, [pc, #48]	@ (80167d8 <global_stdio_init.part.0+0x38>)
 80167a8:	601a      	str	r2, [r3, #0]
 80167aa:	4620      	mov	r0, r4
 80167ac:	2200      	movs	r2, #0
 80167ae:	2104      	movs	r1, #4
 80167b0:	f7ff ff94 	bl	80166dc <std>
 80167b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80167b8:	2201      	movs	r2, #1
 80167ba:	2109      	movs	r1, #9
 80167bc:	f7ff ff8e 	bl	80166dc <std>
 80167c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80167c4:	2202      	movs	r2, #2
 80167c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167ca:	2112      	movs	r1, #18
 80167cc:	f7ff bf86 	b.w	80166dc <std>
 80167d0:	240055a0 	.word	0x240055a0
 80167d4:	24005468 	.word	0x24005468
 80167d8:	08016749 	.word	0x08016749

080167dc <__sfp_lock_acquire>:
 80167dc:	4801      	ldr	r0, [pc, #4]	@ (80167e4 <__sfp_lock_acquire+0x8>)
 80167de:	f000 bb44 	b.w	8016e6a <__retarget_lock_acquire_recursive>
 80167e2:	bf00      	nop
 80167e4:	240055a9 	.word	0x240055a9

080167e8 <__sfp_lock_release>:
 80167e8:	4801      	ldr	r0, [pc, #4]	@ (80167f0 <__sfp_lock_release+0x8>)
 80167ea:	f000 bb3f 	b.w	8016e6c <__retarget_lock_release_recursive>
 80167ee:	bf00      	nop
 80167f0:	240055a9 	.word	0x240055a9

080167f4 <__sinit>:
 80167f4:	b510      	push	{r4, lr}
 80167f6:	4604      	mov	r4, r0
 80167f8:	f7ff fff0 	bl	80167dc <__sfp_lock_acquire>
 80167fc:	6a23      	ldr	r3, [r4, #32]
 80167fe:	b11b      	cbz	r3, 8016808 <__sinit+0x14>
 8016800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016804:	f7ff bff0 	b.w	80167e8 <__sfp_lock_release>
 8016808:	4b04      	ldr	r3, [pc, #16]	@ (801681c <__sinit+0x28>)
 801680a:	6223      	str	r3, [r4, #32]
 801680c:	4b04      	ldr	r3, [pc, #16]	@ (8016820 <__sinit+0x2c>)
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d1f5      	bne.n	8016800 <__sinit+0xc>
 8016814:	f7ff ffc4 	bl	80167a0 <global_stdio_init.part.0>
 8016818:	e7f2      	b.n	8016800 <__sinit+0xc>
 801681a:	bf00      	nop
 801681c:	08016761 	.word	0x08016761
 8016820:	240055a0 	.word	0x240055a0

08016824 <_fwalk_sglue>:
 8016824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016828:	4607      	mov	r7, r0
 801682a:	4688      	mov	r8, r1
 801682c:	4614      	mov	r4, r2
 801682e:	2600      	movs	r6, #0
 8016830:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016834:	f1b9 0901 	subs.w	r9, r9, #1
 8016838:	d505      	bpl.n	8016846 <_fwalk_sglue+0x22>
 801683a:	6824      	ldr	r4, [r4, #0]
 801683c:	2c00      	cmp	r4, #0
 801683e:	d1f7      	bne.n	8016830 <_fwalk_sglue+0xc>
 8016840:	4630      	mov	r0, r6
 8016842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016846:	89ab      	ldrh	r3, [r5, #12]
 8016848:	2b01      	cmp	r3, #1
 801684a:	d907      	bls.n	801685c <_fwalk_sglue+0x38>
 801684c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016850:	3301      	adds	r3, #1
 8016852:	d003      	beq.n	801685c <_fwalk_sglue+0x38>
 8016854:	4629      	mov	r1, r5
 8016856:	4638      	mov	r0, r7
 8016858:	47c0      	blx	r8
 801685a:	4306      	orrs	r6, r0
 801685c:	3568      	adds	r5, #104	@ 0x68
 801685e:	e7e9      	b.n	8016834 <_fwalk_sglue+0x10>

08016860 <iprintf>:
 8016860:	b40f      	push	{r0, r1, r2, r3}
 8016862:	b507      	push	{r0, r1, r2, lr}
 8016864:	4906      	ldr	r1, [pc, #24]	@ (8016880 <iprintf+0x20>)
 8016866:	ab04      	add	r3, sp, #16
 8016868:	6808      	ldr	r0, [r1, #0]
 801686a:	f853 2b04 	ldr.w	r2, [r3], #4
 801686e:	6881      	ldr	r1, [r0, #8]
 8016870:	9301      	str	r3, [sp, #4]
 8016872:	f000 fcd7 	bl	8017224 <_vfiprintf_r>
 8016876:	b003      	add	sp, #12
 8016878:	f85d eb04 	ldr.w	lr, [sp], #4
 801687c:	b004      	add	sp, #16
 801687e:	4770      	bx	lr
 8016880:	24000020 	.word	0x24000020

08016884 <_puts_r>:
 8016884:	6a03      	ldr	r3, [r0, #32]
 8016886:	b570      	push	{r4, r5, r6, lr}
 8016888:	6884      	ldr	r4, [r0, #8]
 801688a:	4605      	mov	r5, r0
 801688c:	460e      	mov	r6, r1
 801688e:	b90b      	cbnz	r3, 8016894 <_puts_r+0x10>
 8016890:	f7ff ffb0 	bl	80167f4 <__sinit>
 8016894:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016896:	07db      	lsls	r3, r3, #31
 8016898:	d405      	bmi.n	80168a6 <_puts_r+0x22>
 801689a:	89a3      	ldrh	r3, [r4, #12]
 801689c:	0598      	lsls	r0, r3, #22
 801689e:	d402      	bmi.n	80168a6 <_puts_r+0x22>
 80168a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80168a2:	f000 fae2 	bl	8016e6a <__retarget_lock_acquire_recursive>
 80168a6:	89a3      	ldrh	r3, [r4, #12]
 80168a8:	0719      	lsls	r1, r3, #28
 80168aa:	d502      	bpl.n	80168b2 <_puts_r+0x2e>
 80168ac:	6923      	ldr	r3, [r4, #16]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d135      	bne.n	801691e <_puts_r+0x9a>
 80168b2:	4621      	mov	r1, r4
 80168b4:	4628      	mov	r0, r5
 80168b6:	f000 f99b 	bl	8016bf0 <__swsetup_r>
 80168ba:	b380      	cbz	r0, 801691e <_puts_r+0x9a>
 80168bc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80168c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80168c2:	07da      	lsls	r2, r3, #31
 80168c4:	d405      	bmi.n	80168d2 <_puts_r+0x4e>
 80168c6:	89a3      	ldrh	r3, [r4, #12]
 80168c8:	059b      	lsls	r3, r3, #22
 80168ca:	d402      	bmi.n	80168d2 <_puts_r+0x4e>
 80168cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80168ce:	f000 facd 	bl	8016e6c <__retarget_lock_release_recursive>
 80168d2:	4628      	mov	r0, r5
 80168d4:	bd70      	pop	{r4, r5, r6, pc}
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	da04      	bge.n	80168e4 <_puts_r+0x60>
 80168da:	69a2      	ldr	r2, [r4, #24]
 80168dc:	429a      	cmp	r2, r3
 80168de:	dc17      	bgt.n	8016910 <_puts_r+0x8c>
 80168e0:	290a      	cmp	r1, #10
 80168e2:	d015      	beq.n	8016910 <_puts_r+0x8c>
 80168e4:	6823      	ldr	r3, [r4, #0]
 80168e6:	1c5a      	adds	r2, r3, #1
 80168e8:	6022      	str	r2, [r4, #0]
 80168ea:	7019      	strb	r1, [r3, #0]
 80168ec:	68a3      	ldr	r3, [r4, #8]
 80168ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80168f2:	3b01      	subs	r3, #1
 80168f4:	60a3      	str	r3, [r4, #8]
 80168f6:	2900      	cmp	r1, #0
 80168f8:	d1ed      	bne.n	80168d6 <_puts_r+0x52>
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	da11      	bge.n	8016922 <_puts_r+0x9e>
 80168fe:	4622      	mov	r2, r4
 8016900:	210a      	movs	r1, #10
 8016902:	4628      	mov	r0, r5
 8016904:	f000 f935 	bl	8016b72 <__swbuf_r>
 8016908:	3001      	adds	r0, #1
 801690a:	d0d7      	beq.n	80168bc <_puts_r+0x38>
 801690c:	250a      	movs	r5, #10
 801690e:	e7d7      	b.n	80168c0 <_puts_r+0x3c>
 8016910:	4622      	mov	r2, r4
 8016912:	4628      	mov	r0, r5
 8016914:	f000 f92d 	bl	8016b72 <__swbuf_r>
 8016918:	3001      	adds	r0, #1
 801691a:	d1e7      	bne.n	80168ec <_puts_r+0x68>
 801691c:	e7ce      	b.n	80168bc <_puts_r+0x38>
 801691e:	3e01      	subs	r6, #1
 8016920:	e7e4      	b.n	80168ec <_puts_r+0x68>
 8016922:	6823      	ldr	r3, [r4, #0]
 8016924:	1c5a      	adds	r2, r3, #1
 8016926:	6022      	str	r2, [r4, #0]
 8016928:	220a      	movs	r2, #10
 801692a:	701a      	strb	r2, [r3, #0]
 801692c:	e7ee      	b.n	801690c <_puts_r+0x88>
	...

08016930 <puts>:
 8016930:	4b02      	ldr	r3, [pc, #8]	@ (801693c <puts+0xc>)
 8016932:	4601      	mov	r1, r0
 8016934:	6818      	ldr	r0, [r3, #0]
 8016936:	f7ff bfa5 	b.w	8016884 <_puts_r>
 801693a:	bf00      	nop
 801693c:	24000020 	.word	0x24000020

08016940 <setvbuf>:
 8016940:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016944:	461d      	mov	r5, r3
 8016946:	4b57      	ldr	r3, [pc, #348]	@ (8016aa4 <setvbuf+0x164>)
 8016948:	681f      	ldr	r7, [r3, #0]
 801694a:	4604      	mov	r4, r0
 801694c:	460e      	mov	r6, r1
 801694e:	4690      	mov	r8, r2
 8016950:	b127      	cbz	r7, 801695c <setvbuf+0x1c>
 8016952:	6a3b      	ldr	r3, [r7, #32]
 8016954:	b913      	cbnz	r3, 801695c <setvbuf+0x1c>
 8016956:	4638      	mov	r0, r7
 8016958:	f7ff ff4c 	bl	80167f4 <__sinit>
 801695c:	f1b8 0f02 	cmp.w	r8, #2
 8016960:	d006      	beq.n	8016970 <setvbuf+0x30>
 8016962:	f1b8 0f01 	cmp.w	r8, #1
 8016966:	f200 809a 	bhi.w	8016a9e <setvbuf+0x15e>
 801696a:	2d00      	cmp	r5, #0
 801696c:	f2c0 8097 	blt.w	8016a9e <setvbuf+0x15e>
 8016970:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016972:	07d9      	lsls	r1, r3, #31
 8016974:	d405      	bmi.n	8016982 <setvbuf+0x42>
 8016976:	89a3      	ldrh	r3, [r4, #12]
 8016978:	059a      	lsls	r2, r3, #22
 801697a:	d402      	bmi.n	8016982 <setvbuf+0x42>
 801697c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801697e:	f000 fa74 	bl	8016e6a <__retarget_lock_acquire_recursive>
 8016982:	4621      	mov	r1, r4
 8016984:	4638      	mov	r0, r7
 8016986:	f000 ff75 	bl	8017874 <_fflush_r>
 801698a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801698c:	b141      	cbz	r1, 80169a0 <setvbuf+0x60>
 801698e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016992:	4299      	cmp	r1, r3
 8016994:	d002      	beq.n	801699c <setvbuf+0x5c>
 8016996:	4638      	mov	r0, r7
 8016998:	f000 fa78 	bl	8016e8c <_free_r>
 801699c:	2300      	movs	r3, #0
 801699e:	6363      	str	r3, [r4, #52]	@ 0x34
 80169a0:	2300      	movs	r3, #0
 80169a2:	61a3      	str	r3, [r4, #24]
 80169a4:	6063      	str	r3, [r4, #4]
 80169a6:	89a3      	ldrh	r3, [r4, #12]
 80169a8:	061b      	lsls	r3, r3, #24
 80169aa:	d503      	bpl.n	80169b4 <setvbuf+0x74>
 80169ac:	6921      	ldr	r1, [r4, #16]
 80169ae:	4638      	mov	r0, r7
 80169b0:	f000 fa6c 	bl	8016e8c <_free_r>
 80169b4:	89a3      	ldrh	r3, [r4, #12]
 80169b6:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80169ba:	f023 0303 	bic.w	r3, r3, #3
 80169be:	f1b8 0f02 	cmp.w	r8, #2
 80169c2:	81a3      	strh	r3, [r4, #12]
 80169c4:	d061      	beq.n	8016a8a <setvbuf+0x14a>
 80169c6:	ab01      	add	r3, sp, #4
 80169c8:	466a      	mov	r2, sp
 80169ca:	4621      	mov	r1, r4
 80169cc:	4638      	mov	r0, r7
 80169ce:	f000 ff79 	bl	80178c4 <__swhatbuf_r>
 80169d2:	89a3      	ldrh	r3, [r4, #12]
 80169d4:	4318      	orrs	r0, r3
 80169d6:	81a0      	strh	r0, [r4, #12]
 80169d8:	bb2d      	cbnz	r5, 8016a26 <setvbuf+0xe6>
 80169da:	9d00      	ldr	r5, [sp, #0]
 80169dc:	4628      	mov	r0, r5
 80169de:	f7ff fdbf 	bl	8016560 <malloc>
 80169e2:	4606      	mov	r6, r0
 80169e4:	2800      	cmp	r0, #0
 80169e6:	d152      	bne.n	8016a8e <setvbuf+0x14e>
 80169e8:	f8dd 9000 	ldr.w	r9, [sp]
 80169ec:	45a9      	cmp	r9, r5
 80169ee:	d140      	bne.n	8016a72 <setvbuf+0x132>
 80169f0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80169f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169f8:	f043 0202 	orr.w	r2, r3, #2
 80169fc:	81a2      	strh	r2, [r4, #12]
 80169fe:	2200      	movs	r2, #0
 8016a00:	60a2      	str	r2, [r4, #8]
 8016a02:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8016a06:	6022      	str	r2, [r4, #0]
 8016a08:	6122      	str	r2, [r4, #16]
 8016a0a:	2201      	movs	r2, #1
 8016a0c:	6162      	str	r2, [r4, #20]
 8016a0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016a10:	07d6      	lsls	r6, r2, #31
 8016a12:	d404      	bmi.n	8016a1e <setvbuf+0xde>
 8016a14:	0598      	lsls	r0, r3, #22
 8016a16:	d402      	bmi.n	8016a1e <setvbuf+0xde>
 8016a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016a1a:	f000 fa27 	bl	8016e6c <__retarget_lock_release_recursive>
 8016a1e:	4628      	mov	r0, r5
 8016a20:	b003      	add	sp, #12
 8016a22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a26:	2e00      	cmp	r6, #0
 8016a28:	d0d8      	beq.n	80169dc <setvbuf+0x9c>
 8016a2a:	6a3b      	ldr	r3, [r7, #32]
 8016a2c:	b913      	cbnz	r3, 8016a34 <setvbuf+0xf4>
 8016a2e:	4638      	mov	r0, r7
 8016a30:	f7ff fee0 	bl	80167f4 <__sinit>
 8016a34:	f1b8 0f01 	cmp.w	r8, #1
 8016a38:	bf08      	it	eq
 8016a3a:	89a3      	ldrheq	r3, [r4, #12]
 8016a3c:	6026      	str	r6, [r4, #0]
 8016a3e:	bf04      	itt	eq
 8016a40:	f043 0301 	orreq.w	r3, r3, #1
 8016a44:	81a3      	strheq	r3, [r4, #12]
 8016a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a4a:	f013 0208 	ands.w	r2, r3, #8
 8016a4e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8016a52:	d01e      	beq.n	8016a92 <setvbuf+0x152>
 8016a54:	07d9      	lsls	r1, r3, #31
 8016a56:	bf41      	itttt	mi
 8016a58:	2200      	movmi	r2, #0
 8016a5a:	426d      	negmi	r5, r5
 8016a5c:	60a2      	strmi	r2, [r4, #8]
 8016a5e:	61a5      	strmi	r5, [r4, #24]
 8016a60:	bf58      	it	pl
 8016a62:	60a5      	strpl	r5, [r4, #8]
 8016a64:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016a66:	07d2      	lsls	r2, r2, #31
 8016a68:	d401      	bmi.n	8016a6e <setvbuf+0x12e>
 8016a6a:	059b      	lsls	r3, r3, #22
 8016a6c:	d513      	bpl.n	8016a96 <setvbuf+0x156>
 8016a6e:	2500      	movs	r5, #0
 8016a70:	e7d5      	b.n	8016a1e <setvbuf+0xde>
 8016a72:	4648      	mov	r0, r9
 8016a74:	f7ff fd74 	bl	8016560 <malloc>
 8016a78:	4606      	mov	r6, r0
 8016a7a:	2800      	cmp	r0, #0
 8016a7c:	d0b8      	beq.n	80169f0 <setvbuf+0xb0>
 8016a7e:	89a3      	ldrh	r3, [r4, #12]
 8016a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016a84:	81a3      	strh	r3, [r4, #12]
 8016a86:	464d      	mov	r5, r9
 8016a88:	e7cf      	b.n	8016a2a <setvbuf+0xea>
 8016a8a:	2500      	movs	r5, #0
 8016a8c:	e7b2      	b.n	80169f4 <setvbuf+0xb4>
 8016a8e:	46a9      	mov	r9, r5
 8016a90:	e7f5      	b.n	8016a7e <setvbuf+0x13e>
 8016a92:	60a2      	str	r2, [r4, #8]
 8016a94:	e7e6      	b.n	8016a64 <setvbuf+0x124>
 8016a96:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016a98:	f000 f9e8 	bl	8016e6c <__retarget_lock_release_recursive>
 8016a9c:	e7e7      	b.n	8016a6e <setvbuf+0x12e>
 8016a9e:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8016aa2:	e7bc      	b.n	8016a1e <setvbuf+0xde>
 8016aa4:	24000020 	.word	0x24000020

08016aa8 <siprintf>:
 8016aa8:	b40e      	push	{r1, r2, r3}
 8016aaa:	b510      	push	{r4, lr}
 8016aac:	b09d      	sub	sp, #116	@ 0x74
 8016aae:	ab1f      	add	r3, sp, #124	@ 0x7c
 8016ab0:	9002      	str	r0, [sp, #8]
 8016ab2:	9006      	str	r0, [sp, #24]
 8016ab4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016ab8:	480a      	ldr	r0, [pc, #40]	@ (8016ae4 <siprintf+0x3c>)
 8016aba:	9107      	str	r1, [sp, #28]
 8016abc:	9104      	str	r1, [sp, #16]
 8016abe:	490a      	ldr	r1, [pc, #40]	@ (8016ae8 <siprintf+0x40>)
 8016ac0:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ac4:	9105      	str	r1, [sp, #20]
 8016ac6:	2400      	movs	r4, #0
 8016ac8:	a902      	add	r1, sp, #8
 8016aca:	6800      	ldr	r0, [r0, #0]
 8016acc:	9301      	str	r3, [sp, #4]
 8016ace:	941b      	str	r4, [sp, #108]	@ 0x6c
 8016ad0:	f000 fa82 	bl	8016fd8 <_svfiprintf_r>
 8016ad4:	9b02      	ldr	r3, [sp, #8]
 8016ad6:	701c      	strb	r4, [r3, #0]
 8016ad8:	b01d      	add	sp, #116	@ 0x74
 8016ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ade:	b003      	add	sp, #12
 8016ae0:	4770      	bx	lr
 8016ae2:	bf00      	nop
 8016ae4:	24000020 	.word	0x24000020
 8016ae8:	ffff0208 	.word	0xffff0208

08016aec <__sread>:
 8016aec:	b510      	push	{r4, lr}
 8016aee:	460c      	mov	r4, r1
 8016af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016af4:	f000 f95a 	bl	8016dac <_read_r>
 8016af8:	2800      	cmp	r0, #0
 8016afa:	bfab      	itete	ge
 8016afc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016afe:	89a3      	ldrhlt	r3, [r4, #12]
 8016b00:	181b      	addge	r3, r3, r0
 8016b02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016b06:	bfac      	ite	ge
 8016b08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016b0a:	81a3      	strhlt	r3, [r4, #12]
 8016b0c:	bd10      	pop	{r4, pc}

08016b0e <__swrite>:
 8016b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b12:	461f      	mov	r7, r3
 8016b14:	898b      	ldrh	r3, [r1, #12]
 8016b16:	05db      	lsls	r3, r3, #23
 8016b18:	4605      	mov	r5, r0
 8016b1a:	460c      	mov	r4, r1
 8016b1c:	4616      	mov	r6, r2
 8016b1e:	d505      	bpl.n	8016b2c <__swrite+0x1e>
 8016b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b24:	2302      	movs	r3, #2
 8016b26:	2200      	movs	r2, #0
 8016b28:	f000 f92e 	bl	8016d88 <_lseek_r>
 8016b2c:	89a3      	ldrh	r3, [r4, #12]
 8016b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016b36:	81a3      	strh	r3, [r4, #12]
 8016b38:	4632      	mov	r2, r6
 8016b3a:	463b      	mov	r3, r7
 8016b3c:	4628      	mov	r0, r5
 8016b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b42:	f000 b955 	b.w	8016df0 <_write_r>

08016b46 <__sseek>:
 8016b46:	b510      	push	{r4, lr}
 8016b48:	460c      	mov	r4, r1
 8016b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b4e:	f000 f91b 	bl	8016d88 <_lseek_r>
 8016b52:	1c43      	adds	r3, r0, #1
 8016b54:	89a3      	ldrh	r3, [r4, #12]
 8016b56:	bf15      	itete	ne
 8016b58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016b5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016b5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016b62:	81a3      	strheq	r3, [r4, #12]
 8016b64:	bf18      	it	ne
 8016b66:	81a3      	strhne	r3, [r4, #12]
 8016b68:	bd10      	pop	{r4, pc}

08016b6a <__sclose>:
 8016b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b6e:	f000 b89d 	b.w	8016cac <_close_r>

08016b72 <__swbuf_r>:
 8016b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b74:	460e      	mov	r6, r1
 8016b76:	4614      	mov	r4, r2
 8016b78:	4605      	mov	r5, r0
 8016b7a:	b118      	cbz	r0, 8016b84 <__swbuf_r+0x12>
 8016b7c:	6a03      	ldr	r3, [r0, #32]
 8016b7e:	b90b      	cbnz	r3, 8016b84 <__swbuf_r+0x12>
 8016b80:	f7ff fe38 	bl	80167f4 <__sinit>
 8016b84:	69a3      	ldr	r3, [r4, #24]
 8016b86:	60a3      	str	r3, [r4, #8]
 8016b88:	89a3      	ldrh	r3, [r4, #12]
 8016b8a:	071a      	lsls	r2, r3, #28
 8016b8c:	d501      	bpl.n	8016b92 <__swbuf_r+0x20>
 8016b8e:	6923      	ldr	r3, [r4, #16]
 8016b90:	b943      	cbnz	r3, 8016ba4 <__swbuf_r+0x32>
 8016b92:	4621      	mov	r1, r4
 8016b94:	4628      	mov	r0, r5
 8016b96:	f000 f82b 	bl	8016bf0 <__swsetup_r>
 8016b9a:	b118      	cbz	r0, 8016ba4 <__swbuf_r+0x32>
 8016b9c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016ba0:	4638      	mov	r0, r7
 8016ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ba4:	6823      	ldr	r3, [r4, #0]
 8016ba6:	6922      	ldr	r2, [r4, #16]
 8016ba8:	1a98      	subs	r0, r3, r2
 8016baa:	6963      	ldr	r3, [r4, #20]
 8016bac:	b2f6      	uxtb	r6, r6
 8016bae:	4283      	cmp	r3, r0
 8016bb0:	4637      	mov	r7, r6
 8016bb2:	dc05      	bgt.n	8016bc0 <__swbuf_r+0x4e>
 8016bb4:	4621      	mov	r1, r4
 8016bb6:	4628      	mov	r0, r5
 8016bb8:	f000 fe5c 	bl	8017874 <_fflush_r>
 8016bbc:	2800      	cmp	r0, #0
 8016bbe:	d1ed      	bne.n	8016b9c <__swbuf_r+0x2a>
 8016bc0:	68a3      	ldr	r3, [r4, #8]
 8016bc2:	3b01      	subs	r3, #1
 8016bc4:	60a3      	str	r3, [r4, #8]
 8016bc6:	6823      	ldr	r3, [r4, #0]
 8016bc8:	1c5a      	adds	r2, r3, #1
 8016bca:	6022      	str	r2, [r4, #0]
 8016bcc:	701e      	strb	r6, [r3, #0]
 8016bce:	6962      	ldr	r2, [r4, #20]
 8016bd0:	1c43      	adds	r3, r0, #1
 8016bd2:	429a      	cmp	r2, r3
 8016bd4:	d004      	beq.n	8016be0 <__swbuf_r+0x6e>
 8016bd6:	89a3      	ldrh	r3, [r4, #12]
 8016bd8:	07db      	lsls	r3, r3, #31
 8016bda:	d5e1      	bpl.n	8016ba0 <__swbuf_r+0x2e>
 8016bdc:	2e0a      	cmp	r6, #10
 8016bde:	d1df      	bne.n	8016ba0 <__swbuf_r+0x2e>
 8016be0:	4621      	mov	r1, r4
 8016be2:	4628      	mov	r0, r5
 8016be4:	f000 fe46 	bl	8017874 <_fflush_r>
 8016be8:	2800      	cmp	r0, #0
 8016bea:	d0d9      	beq.n	8016ba0 <__swbuf_r+0x2e>
 8016bec:	e7d6      	b.n	8016b9c <__swbuf_r+0x2a>
	...

08016bf0 <__swsetup_r>:
 8016bf0:	b538      	push	{r3, r4, r5, lr}
 8016bf2:	4b29      	ldr	r3, [pc, #164]	@ (8016c98 <__swsetup_r+0xa8>)
 8016bf4:	4605      	mov	r5, r0
 8016bf6:	6818      	ldr	r0, [r3, #0]
 8016bf8:	460c      	mov	r4, r1
 8016bfa:	b118      	cbz	r0, 8016c04 <__swsetup_r+0x14>
 8016bfc:	6a03      	ldr	r3, [r0, #32]
 8016bfe:	b90b      	cbnz	r3, 8016c04 <__swsetup_r+0x14>
 8016c00:	f7ff fdf8 	bl	80167f4 <__sinit>
 8016c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c08:	0719      	lsls	r1, r3, #28
 8016c0a:	d422      	bmi.n	8016c52 <__swsetup_r+0x62>
 8016c0c:	06da      	lsls	r2, r3, #27
 8016c0e:	d407      	bmi.n	8016c20 <__swsetup_r+0x30>
 8016c10:	2209      	movs	r2, #9
 8016c12:	602a      	str	r2, [r5, #0]
 8016c14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016c18:	81a3      	strh	r3, [r4, #12]
 8016c1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016c1e:	e033      	b.n	8016c88 <__swsetup_r+0x98>
 8016c20:	0758      	lsls	r0, r3, #29
 8016c22:	d512      	bpl.n	8016c4a <__swsetup_r+0x5a>
 8016c24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016c26:	b141      	cbz	r1, 8016c3a <__swsetup_r+0x4a>
 8016c28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016c2c:	4299      	cmp	r1, r3
 8016c2e:	d002      	beq.n	8016c36 <__swsetup_r+0x46>
 8016c30:	4628      	mov	r0, r5
 8016c32:	f000 f92b 	bl	8016e8c <_free_r>
 8016c36:	2300      	movs	r3, #0
 8016c38:	6363      	str	r3, [r4, #52]	@ 0x34
 8016c3a:	89a3      	ldrh	r3, [r4, #12]
 8016c3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016c40:	81a3      	strh	r3, [r4, #12]
 8016c42:	2300      	movs	r3, #0
 8016c44:	6063      	str	r3, [r4, #4]
 8016c46:	6923      	ldr	r3, [r4, #16]
 8016c48:	6023      	str	r3, [r4, #0]
 8016c4a:	89a3      	ldrh	r3, [r4, #12]
 8016c4c:	f043 0308 	orr.w	r3, r3, #8
 8016c50:	81a3      	strh	r3, [r4, #12]
 8016c52:	6923      	ldr	r3, [r4, #16]
 8016c54:	b94b      	cbnz	r3, 8016c6a <__swsetup_r+0x7a>
 8016c56:	89a3      	ldrh	r3, [r4, #12]
 8016c58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016c60:	d003      	beq.n	8016c6a <__swsetup_r+0x7a>
 8016c62:	4621      	mov	r1, r4
 8016c64:	4628      	mov	r0, r5
 8016c66:	f000 fe53 	bl	8017910 <__smakebuf_r>
 8016c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c6e:	f013 0201 	ands.w	r2, r3, #1
 8016c72:	d00a      	beq.n	8016c8a <__swsetup_r+0x9a>
 8016c74:	2200      	movs	r2, #0
 8016c76:	60a2      	str	r2, [r4, #8]
 8016c78:	6962      	ldr	r2, [r4, #20]
 8016c7a:	4252      	negs	r2, r2
 8016c7c:	61a2      	str	r2, [r4, #24]
 8016c7e:	6922      	ldr	r2, [r4, #16]
 8016c80:	b942      	cbnz	r2, 8016c94 <__swsetup_r+0xa4>
 8016c82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016c86:	d1c5      	bne.n	8016c14 <__swsetup_r+0x24>
 8016c88:	bd38      	pop	{r3, r4, r5, pc}
 8016c8a:	0799      	lsls	r1, r3, #30
 8016c8c:	bf58      	it	pl
 8016c8e:	6962      	ldrpl	r2, [r4, #20]
 8016c90:	60a2      	str	r2, [r4, #8]
 8016c92:	e7f4      	b.n	8016c7e <__swsetup_r+0x8e>
 8016c94:	2000      	movs	r0, #0
 8016c96:	e7f7      	b.n	8016c88 <__swsetup_r+0x98>
 8016c98:	24000020 	.word	0x24000020

08016c9c <memset>:
 8016c9c:	4402      	add	r2, r0
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	4293      	cmp	r3, r2
 8016ca2:	d100      	bne.n	8016ca6 <memset+0xa>
 8016ca4:	4770      	bx	lr
 8016ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8016caa:	e7f9      	b.n	8016ca0 <memset+0x4>

08016cac <_close_r>:
 8016cac:	b538      	push	{r3, r4, r5, lr}
 8016cae:	4d06      	ldr	r5, [pc, #24]	@ (8016cc8 <_close_r+0x1c>)
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	4604      	mov	r4, r0
 8016cb4:	4608      	mov	r0, r1
 8016cb6:	602b      	str	r3, [r5, #0]
 8016cb8:	f7ea fb4a 	bl	8001350 <_close>
 8016cbc:	1c43      	adds	r3, r0, #1
 8016cbe:	d102      	bne.n	8016cc6 <_close_r+0x1a>
 8016cc0:	682b      	ldr	r3, [r5, #0]
 8016cc2:	b103      	cbz	r3, 8016cc6 <_close_r+0x1a>
 8016cc4:	6023      	str	r3, [r4, #0]
 8016cc6:	bd38      	pop	{r3, r4, r5, pc}
 8016cc8:	240055a4 	.word	0x240055a4

08016ccc <_reclaim_reent>:
 8016ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8016d84 <_reclaim_reent+0xb8>)
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	4283      	cmp	r3, r0
 8016cd2:	b570      	push	{r4, r5, r6, lr}
 8016cd4:	4604      	mov	r4, r0
 8016cd6:	d053      	beq.n	8016d80 <_reclaim_reent+0xb4>
 8016cd8:	69c3      	ldr	r3, [r0, #28]
 8016cda:	b31b      	cbz	r3, 8016d24 <_reclaim_reent+0x58>
 8016cdc:	68db      	ldr	r3, [r3, #12]
 8016cde:	b163      	cbz	r3, 8016cfa <_reclaim_reent+0x2e>
 8016ce0:	2500      	movs	r5, #0
 8016ce2:	69e3      	ldr	r3, [r4, #28]
 8016ce4:	68db      	ldr	r3, [r3, #12]
 8016ce6:	5959      	ldr	r1, [r3, r5]
 8016ce8:	b9b1      	cbnz	r1, 8016d18 <_reclaim_reent+0x4c>
 8016cea:	3504      	adds	r5, #4
 8016cec:	2d80      	cmp	r5, #128	@ 0x80
 8016cee:	d1f8      	bne.n	8016ce2 <_reclaim_reent+0x16>
 8016cf0:	69e3      	ldr	r3, [r4, #28]
 8016cf2:	4620      	mov	r0, r4
 8016cf4:	68d9      	ldr	r1, [r3, #12]
 8016cf6:	f000 f8c9 	bl	8016e8c <_free_r>
 8016cfa:	69e3      	ldr	r3, [r4, #28]
 8016cfc:	6819      	ldr	r1, [r3, #0]
 8016cfe:	b111      	cbz	r1, 8016d06 <_reclaim_reent+0x3a>
 8016d00:	4620      	mov	r0, r4
 8016d02:	f000 f8c3 	bl	8016e8c <_free_r>
 8016d06:	69e3      	ldr	r3, [r4, #28]
 8016d08:	689d      	ldr	r5, [r3, #8]
 8016d0a:	b15d      	cbz	r5, 8016d24 <_reclaim_reent+0x58>
 8016d0c:	4629      	mov	r1, r5
 8016d0e:	4620      	mov	r0, r4
 8016d10:	682d      	ldr	r5, [r5, #0]
 8016d12:	f000 f8bb 	bl	8016e8c <_free_r>
 8016d16:	e7f8      	b.n	8016d0a <_reclaim_reent+0x3e>
 8016d18:	680e      	ldr	r6, [r1, #0]
 8016d1a:	4620      	mov	r0, r4
 8016d1c:	f000 f8b6 	bl	8016e8c <_free_r>
 8016d20:	4631      	mov	r1, r6
 8016d22:	e7e1      	b.n	8016ce8 <_reclaim_reent+0x1c>
 8016d24:	6961      	ldr	r1, [r4, #20]
 8016d26:	b111      	cbz	r1, 8016d2e <_reclaim_reent+0x62>
 8016d28:	4620      	mov	r0, r4
 8016d2a:	f000 f8af 	bl	8016e8c <_free_r>
 8016d2e:	69e1      	ldr	r1, [r4, #28]
 8016d30:	b111      	cbz	r1, 8016d38 <_reclaim_reent+0x6c>
 8016d32:	4620      	mov	r0, r4
 8016d34:	f000 f8aa 	bl	8016e8c <_free_r>
 8016d38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016d3a:	b111      	cbz	r1, 8016d42 <_reclaim_reent+0x76>
 8016d3c:	4620      	mov	r0, r4
 8016d3e:	f000 f8a5 	bl	8016e8c <_free_r>
 8016d42:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016d44:	b111      	cbz	r1, 8016d4c <_reclaim_reent+0x80>
 8016d46:	4620      	mov	r0, r4
 8016d48:	f000 f8a0 	bl	8016e8c <_free_r>
 8016d4c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8016d4e:	b111      	cbz	r1, 8016d56 <_reclaim_reent+0x8a>
 8016d50:	4620      	mov	r0, r4
 8016d52:	f000 f89b 	bl	8016e8c <_free_r>
 8016d56:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8016d58:	b111      	cbz	r1, 8016d60 <_reclaim_reent+0x94>
 8016d5a:	4620      	mov	r0, r4
 8016d5c:	f000 f896 	bl	8016e8c <_free_r>
 8016d60:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8016d62:	b111      	cbz	r1, 8016d6a <_reclaim_reent+0x9e>
 8016d64:	4620      	mov	r0, r4
 8016d66:	f000 f891 	bl	8016e8c <_free_r>
 8016d6a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8016d6c:	b111      	cbz	r1, 8016d74 <_reclaim_reent+0xa8>
 8016d6e:	4620      	mov	r0, r4
 8016d70:	f000 f88c 	bl	8016e8c <_free_r>
 8016d74:	6a23      	ldr	r3, [r4, #32]
 8016d76:	b11b      	cbz	r3, 8016d80 <_reclaim_reent+0xb4>
 8016d78:	4620      	mov	r0, r4
 8016d7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d7e:	4718      	bx	r3
 8016d80:	bd70      	pop	{r4, r5, r6, pc}
 8016d82:	bf00      	nop
 8016d84:	24000020 	.word	0x24000020

08016d88 <_lseek_r>:
 8016d88:	b538      	push	{r3, r4, r5, lr}
 8016d8a:	4d07      	ldr	r5, [pc, #28]	@ (8016da8 <_lseek_r+0x20>)
 8016d8c:	4604      	mov	r4, r0
 8016d8e:	4608      	mov	r0, r1
 8016d90:	4611      	mov	r1, r2
 8016d92:	2200      	movs	r2, #0
 8016d94:	602a      	str	r2, [r5, #0]
 8016d96:	461a      	mov	r2, r3
 8016d98:	f7ea faf1 	bl	800137e <_lseek>
 8016d9c:	1c43      	adds	r3, r0, #1
 8016d9e:	d102      	bne.n	8016da6 <_lseek_r+0x1e>
 8016da0:	682b      	ldr	r3, [r5, #0]
 8016da2:	b103      	cbz	r3, 8016da6 <_lseek_r+0x1e>
 8016da4:	6023      	str	r3, [r4, #0]
 8016da6:	bd38      	pop	{r3, r4, r5, pc}
 8016da8:	240055a4 	.word	0x240055a4

08016dac <_read_r>:
 8016dac:	b538      	push	{r3, r4, r5, lr}
 8016dae:	4d07      	ldr	r5, [pc, #28]	@ (8016dcc <_read_r+0x20>)
 8016db0:	4604      	mov	r4, r0
 8016db2:	4608      	mov	r0, r1
 8016db4:	4611      	mov	r1, r2
 8016db6:	2200      	movs	r2, #0
 8016db8:	602a      	str	r2, [r5, #0]
 8016dba:	461a      	mov	r2, r3
 8016dbc:	f7ea faf0 	bl	80013a0 <_read>
 8016dc0:	1c43      	adds	r3, r0, #1
 8016dc2:	d102      	bne.n	8016dca <_read_r+0x1e>
 8016dc4:	682b      	ldr	r3, [r5, #0]
 8016dc6:	b103      	cbz	r3, 8016dca <_read_r+0x1e>
 8016dc8:	6023      	str	r3, [r4, #0]
 8016dca:	bd38      	pop	{r3, r4, r5, pc}
 8016dcc:	240055a4 	.word	0x240055a4

08016dd0 <_sbrk_r>:
 8016dd0:	b538      	push	{r3, r4, r5, lr}
 8016dd2:	4d06      	ldr	r5, [pc, #24]	@ (8016dec <_sbrk_r+0x1c>)
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	4604      	mov	r4, r0
 8016dd8:	4608      	mov	r0, r1
 8016dda:	602b      	str	r3, [r5, #0]
 8016ddc:	f7ea fd66 	bl	80018ac <_sbrk>
 8016de0:	1c43      	adds	r3, r0, #1
 8016de2:	d102      	bne.n	8016dea <_sbrk_r+0x1a>
 8016de4:	682b      	ldr	r3, [r5, #0]
 8016de6:	b103      	cbz	r3, 8016dea <_sbrk_r+0x1a>
 8016de8:	6023      	str	r3, [r4, #0]
 8016dea:	bd38      	pop	{r3, r4, r5, pc}
 8016dec:	240055a4 	.word	0x240055a4

08016df0 <_write_r>:
 8016df0:	b538      	push	{r3, r4, r5, lr}
 8016df2:	4d07      	ldr	r5, [pc, #28]	@ (8016e10 <_write_r+0x20>)
 8016df4:	4604      	mov	r4, r0
 8016df6:	4608      	mov	r0, r1
 8016df8:	4611      	mov	r1, r2
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	602a      	str	r2, [r5, #0]
 8016dfe:	461a      	mov	r2, r3
 8016e00:	f7ea fa7a 	bl	80012f8 <_write>
 8016e04:	1c43      	adds	r3, r0, #1
 8016e06:	d102      	bne.n	8016e0e <_write_r+0x1e>
 8016e08:	682b      	ldr	r3, [r5, #0]
 8016e0a:	b103      	cbz	r3, 8016e0e <_write_r+0x1e>
 8016e0c:	6023      	str	r3, [r4, #0]
 8016e0e:	bd38      	pop	{r3, r4, r5, pc}
 8016e10:	240055a4 	.word	0x240055a4

08016e14 <__errno>:
 8016e14:	4b01      	ldr	r3, [pc, #4]	@ (8016e1c <__errno+0x8>)
 8016e16:	6818      	ldr	r0, [r3, #0]
 8016e18:	4770      	bx	lr
 8016e1a:	bf00      	nop
 8016e1c:	24000020 	.word	0x24000020

08016e20 <__libc_init_array>:
 8016e20:	b570      	push	{r4, r5, r6, lr}
 8016e22:	4d0d      	ldr	r5, [pc, #52]	@ (8016e58 <__libc_init_array+0x38>)
 8016e24:	4c0d      	ldr	r4, [pc, #52]	@ (8016e5c <__libc_init_array+0x3c>)
 8016e26:	1b64      	subs	r4, r4, r5
 8016e28:	10a4      	asrs	r4, r4, #2
 8016e2a:	2600      	movs	r6, #0
 8016e2c:	42a6      	cmp	r6, r4
 8016e2e:	d109      	bne.n	8016e44 <__libc_init_array+0x24>
 8016e30:	4d0b      	ldr	r5, [pc, #44]	@ (8016e60 <__libc_init_array+0x40>)
 8016e32:	4c0c      	ldr	r4, [pc, #48]	@ (8016e64 <__libc_init_array+0x44>)
 8016e34:	f000 fe1a 	bl	8017a6c <_init>
 8016e38:	1b64      	subs	r4, r4, r5
 8016e3a:	10a4      	asrs	r4, r4, #2
 8016e3c:	2600      	movs	r6, #0
 8016e3e:	42a6      	cmp	r6, r4
 8016e40:	d105      	bne.n	8016e4e <__libc_init_array+0x2e>
 8016e42:	bd70      	pop	{r4, r5, r6, pc}
 8016e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e48:	4798      	blx	r3
 8016e4a:	3601      	adds	r6, #1
 8016e4c:	e7ee      	b.n	8016e2c <__libc_init_array+0xc>
 8016e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e52:	4798      	blx	r3
 8016e54:	3601      	adds	r6, #1
 8016e56:	e7f2      	b.n	8016e3e <__libc_init_array+0x1e>
 8016e58:	08017f20 	.word	0x08017f20
 8016e5c:	08017f20 	.word	0x08017f20
 8016e60:	08017f20 	.word	0x08017f20
 8016e64:	08017f28 	.word	0x08017f28

08016e68 <__retarget_lock_init_recursive>:
 8016e68:	4770      	bx	lr

08016e6a <__retarget_lock_acquire_recursive>:
 8016e6a:	4770      	bx	lr

08016e6c <__retarget_lock_release_recursive>:
 8016e6c:	4770      	bx	lr

08016e6e <memcpy>:
 8016e6e:	440a      	add	r2, r1
 8016e70:	4291      	cmp	r1, r2
 8016e72:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8016e76:	d100      	bne.n	8016e7a <memcpy+0xc>
 8016e78:	4770      	bx	lr
 8016e7a:	b510      	push	{r4, lr}
 8016e7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016e84:	4291      	cmp	r1, r2
 8016e86:	d1f9      	bne.n	8016e7c <memcpy+0xe>
 8016e88:	bd10      	pop	{r4, pc}
	...

08016e8c <_free_r>:
 8016e8c:	b538      	push	{r3, r4, r5, lr}
 8016e8e:	4605      	mov	r5, r0
 8016e90:	2900      	cmp	r1, #0
 8016e92:	d041      	beq.n	8016f18 <_free_r+0x8c>
 8016e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016e98:	1f0c      	subs	r4, r1, #4
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	bfb8      	it	lt
 8016e9e:	18e4      	addlt	r4, r4, r3
 8016ea0:	f7ff fc10 	bl	80166c4 <__malloc_lock>
 8016ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8016f1c <_free_r+0x90>)
 8016ea6:	6813      	ldr	r3, [r2, #0]
 8016ea8:	b933      	cbnz	r3, 8016eb8 <_free_r+0x2c>
 8016eaa:	6063      	str	r3, [r4, #4]
 8016eac:	6014      	str	r4, [r2, #0]
 8016eae:	4628      	mov	r0, r5
 8016eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016eb4:	f7ff bc0c 	b.w	80166d0 <__malloc_unlock>
 8016eb8:	42a3      	cmp	r3, r4
 8016eba:	d908      	bls.n	8016ece <_free_r+0x42>
 8016ebc:	6820      	ldr	r0, [r4, #0]
 8016ebe:	1821      	adds	r1, r4, r0
 8016ec0:	428b      	cmp	r3, r1
 8016ec2:	bf01      	itttt	eq
 8016ec4:	6819      	ldreq	r1, [r3, #0]
 8016ec6:	685b      	ldreq	r3, [r3, #4]
 8016ec8:	1809      	addeq	r1, r1, r0
 8016eca:	6021      	streq	r1, [r4, #0]
 8016ecc:	e7ed      	b.n	8016eaa <_free_r+0x1e>
 8016ece:	461a      	mov	r2, r3
 8016ed0:	685b      	ldr	r3, [r3, #4]
 8016ed2:	b10b      	cbz	r3, 8016ed8 <_free_r+0x4c>
 8016ed4:	42a3      	cmp	r3, r4
 8016ed6:	d9fa      	bls.n	8016ece <_free_r+0x42>
 8016ed8:	6811      	ldr	r1, [r2, #0]
 8016eda:	1850      	adds	r0, r2, r1
 8016edc:	42a0      	cmp	r0, r4
 8016ede:	d10b      	bne.n	8016ef8 <_free_r+0x6c>
 8016ee0:	6820      	ldr	r0, [r4, #0]
 8016ee2:	4401      	add	r1, r0
 8016ee4:	1850      	adds	r0, r2, r1
 8016ee6:	4283      	cmp	r3, r0
 8016ee8:	6011      	str	r1, [r2, #0]
 8016eea:	d1e0      	bne.n	8016eae <_free_r+0x22>
 8016eec:	6818      	ldr	r0, [r3, #0]
 8016eee:	685b      	ldr	r3, [r3, #4]
 8016ef0:	6053      	str	r3, [r2, #4]
 8016ef2:	4408      	add	r0, r1
 8016ef4:	6010      	str	r0, [r2, #0]
 8016ef6:	e7da      	b.n	8016eae <_free_r+0x22>
 8016ef8:	d902      	bls.n	8016f00 <_free_r+0x74>
 8016efa:	230c      	movs	r3, #12
 8016efc:	602b      	str	r3, [r5, #0]
 8016efe:	e7d6      	b.n	8016eae <_free_r+0x22>
 8016f00:	6820      	ldr	r0, [r4, #0]
 8016f02:	1821      	adds	r1, r4, r0
 8016f04:	428b      	cmp	r3, r1
 8016f06:	bf04      	itt	eq
 8016f08:	6819      	ldreq	r1, [r3, #0]
 8016f0a:	685b      	ldreq	r3, [r3, #4]
 8016f0c:	6063      	str	r3, [r4, #4]
 8016f0e:	bf04      	itt	eq
 8016f10:	1809      	addeq	r1, r1, r0
 8016f12:	6021      	streq	r1, [r4, #0]
 8016f14:	6054      	str	r4, [r2, #4]
 8016f16:	e7ca      	b.n	8016eae <_free_r+0x22>
 8016f18:	bd38      	pop	{r3, r4, r5, pc}
 8016f1a:	bf00      	nop
 8016f1c:	24005464 	.word	0x24005464

08016f20 <__ssputs_r>:
 8016f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f24:	688e      	ldr	r6, [r1, #8]
 8016f26:	461f      	mov	r7, r3
 8016f28:	42be      	cmp	r6, r7
 8016f2a:	680b      	ldr	r3, [r1, #0]
 8016f2c:	4682      	mov	sl, r0
 8016f2e:	460c      	mov	r4, r1
 8016f30:	4690      	mov	r8, r2
 8016f32:	d82d      	bhi.n	8016f90 <__ssputs_r+0x70>
 8016f34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016f38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016f3c:	d026      	beq.n	8016f8c <__ssputs_r+0x6c>
 8016f3e:	6965      	ldr	r5, [r4, #20]
 8016f40:	6909      	ldr	r1, [r1, #16]
 8016f42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016f46:	eba3 0901 	sub.w	r9, r3, r1
 8016f4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016f4e:	1c7b      	adds	r3, r7, #1
 8016f50:	444b      	add	r3, r9
 8016f52:	106d      	asrs	r5, r5, #1
 8016f54:	429d      	cmp	r5, r3
 8016f56:	bf38      	it	cc
 8016f58:	461d      	movcc	r5, r3
 8016f5a:	0553      	lsls	r3, r2, #21
 8016f5c:	d527      	bpl.n	8016fae <__ssputs_r+0x8e>
 8016f5e:	4629      	mov	r1, r5
 8016f60:	f7ff fb30 	bl	80165c4 <_malloc_r>
 8016f64:	4606      	mov	r6, r0
 8016f66:	b360      	cbz	r0, 8016fc2 <__ssputs_r+0xa2>
 8016f68:	6921      	ldr	r1, [r4, #16]
 8016f6a:	464a      	mov	r2, r9
 8016f6c:	f7ff ff7f 	bl	8016e6e <memcpy>
 8016f70:	89a3      	ldrh	r3, [r4, #12]
 8016f72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016f7a:	81a3      	strh	r3, [r4, #12]
 8016f7c:	6126      	str	r6, [r4, #16]
 8016f7e:	6165      	str	r5, [r4, #20]
 8016f80:	444e      	add	r6, r9
 8016f82:	eba5 0509 	sub.w	r5, r5, r9
 8016f86:	6026      	str	r6, [r4, #0]
 8016f88:	60a5      	str	r5, [r4, #8]
 8016f8a:	463e      	mov	r6, r7
 8016f8c:	42be      	cmp	r6, r7
 8016f8e:	d900      	bls.n	8016f92 <__ssputs_r+0x72>
 8016f90:	463e      	mov	r6, r7
 8016f92:	6820      	ldr	r0, [r4, #0]
 8016f94:	4632      	mov	r2, r6
 8016f96:	4641      	mov	r1, r8
 8016f98:	f000 fcf6 	bl	8017988 <memmove>
 8016f9c:	68a3      	ldr	r3, [r4, #8]
 8016f9e:	1b9b      	subs	r3, r3, r6
 8016fa0:	60a3      	str	r3, [r4, #8]
 8016fa2:	6823      	ldr	r3, [r4, #0]
 8016fa4:	4433      	add	r3, r6
 8016fa6:	6023      	str	r3, [r4, #0]
 8016fa8:	2000      	movs	r0, #0
 8016faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fae:	462a      	mov	r2, r5
 8016fb0:	f000 fd26 	bl	8017a00 <_realloc_r>
 8016fb4:	4606      	mov	r6, r0
 8016fb6:	2800      	cmp	r0, #0
 8016fb8:	d1e0      	bne.n	8016f7c <__ssputs_r+0x5c>
 8016fba:	6921      	ldr	r1, [r4, #16]
 8016fbc:	4650      	mov	r0, sl
 8016fbe:	f7ff ff65 	bl	8016e8c <_free_r>
 8016fc2:	230c      	movs	r3, #12
 8016fc4:	f8ca 3000 	str.w	r3, [sl]
 8016fc8:	89a3      	ldrh	r3, [r4, #12]
 8016fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016fce:	81a3      	strh	r3, [r4, #12]
 8016fd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016fd4:	e7e9      	b.n	8016faa <__ssputs_r+0x8a>
	...

08016fd8 <_svfiprintf_r>:
 8016fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fdc:	4698      	mov	r8, r3
 8016fde:	898b      	ldrh	r3, [r1, #12]
 8016fe0:	061b      	lsls	r3, r3, #24
 8016fe2:	b09d      	sub	sp, #116	@ 0x74
 8016fe4:	4607      	mov	r7, r0
 8016fe6:	460d      	mov	r5, r1
 8016fe8:	4614      	mov	r4, r2
 8016fea:	d510      	bpl.n	801700e <_svfiprintf_r+0x36>
 8016fec:	690b      	ldr	r3, [r1, #16]
 8016fee:	b973      	cbnz	r3, 801700e <_svfiprintf_r+0x36>
 8016ff0:	2140      	movs	r1, #64	@ 0x40
 8016ff2:	f7ff fae7 	bl	80165c4 <_malloc_r>
 8016ff6:	6028      	str	r0, [r5, #0]
 8016ff8:	6128      	str	r0, [r5, #16]
 8016ffa:	b930      	cbnz	r0, 801700a <_svfiprintf_r+0x32>
 8016ffc:	230c      	movs	r3, #12
 8016ffe:	603b      	str	r3, [r7, #0]
 8017000:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017004:	b01d      	add	sp, #116	@ 0x74
 8017006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801700a:	2340      	movs	r3, #64	@ 0x40
 801700c:	616b      	str	r3, [r5, #20]
 801700e:	2300      	movs	r3, #0
 8017010:	9309      	str	r3, [sp, #36]	@ 0x24
 8017012:	2320      	movs	r3, #32
 8017014:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017018:	f8cd 800c 	str.w	r8, [sp, #12]
 801701c:	2330      	movs	r3, #48	@ 0x30
 801701e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80171bc <_svfiprintf_r+0x1e4>
 8017022:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017026:	f04f 0901 	mov.w	r9, #1
 801702a:	4623      	mov	r3, r4
 801702c:	469a      	mov	sl, r3
 801702e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017032:	b10a      	cbz	r2, 8017038 <_svfiprintf_r+0x60>
 8017034:	2a25      	cmp	r2, #37	@ 0x25
 8017036:	d1f9      	bne.n	801702c <_svfiprintf_r+0x54>
 8017038:	ebba 0b04 	subs.w	fp, sl, r4
 801703c:	d00b      	beq.n	8017056 <_svfiprintf_r+0x7e>
 801703e:	465b      	mov	r3, fp
 8017040:	4622      	mov	r2, r4
 8017042:	4629      	mov	r1, r5
 8017044:	4638      	mov	r0, r7
 8017046:	f7ff ff6b 	bl	8016f20 <__ssputs_r>
 801704a:	3001      	adds	r0, #1
 801704c:	f000 80a7 	beq.w	801719e <_svfiprintf_r+0x1c6>
 8017050:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017052:	445a      	add	r2, fp
 8017054:	9209      	str	r2, [sp, #36]	@ 0x24
 8017056:	f89a 3000 	ldrb.w	r3, [sl]
 801705a:	2b00      	cmp	r3, #0
 801705c:	f000 809f 	beq.w	801719e <_svfiprintf_r+0x1c6>
 8017060:	2300      	movs	r3, #0
 8017062:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801706a:	f10a 0a01 	add.w	sl, sl, #1
 801706e:	9304      	str	r3, [sp, #16]
 8017070:	9307      	str	r3, [sp, #28]
 8017072:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017076:	931a      	str	r3, [sp, #104]	@ 0x68
 8017078:	4654      	mov	r4, sl
 801707a:	2205      	movs	r2, #5
 801707c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017080:	484e      	ldr	r0, [pc, #312]	@ (80171bc <_svfiprintf_r+0x1e4>)
 8017082:	f7e9 f935 	bl	80002f0 <memchr>
 8017086:	9a04      	ldr	r2, [sp, #16]
 8017088:	b9d8      	cbnz	r0, 80170c2 <_svfiprintf_r+0xea>
 801708a:	06d0      	lsls	r0, r2, #27
 801708c:	bf44      	itt	mi
 801708e:	2320      	movmi	r3, #32
 8017090:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017094:	0711      	lsls	r1, r2, #28
 8017096:	bf44      	itt	mi
 8017098:	232b      	movmi	r3, #43	@ 0x2b
 801709a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801709e:	f89a 3000 	ldrb.w	r3, [sl]
 80170a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80170a4:	d015      	beq.n	80170d2 <_svfiprintf_r+0xfa>
 80170a6:	9a07      	ldr	r2, [sp, #28]
 80170a8:	4654      	mov	r4, sl
 80170aa:	2000      	movs	r0, #0
 80170ac:	f04f 0c0a 	mov.w	ip, #10
 80170b0:	4621      	mov	r1, r4
 80170b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80170b6:	3b30      	subs	r3, #48	@ 0x30
 80170b8:	2b09      	cmp	r3, #9
 80170ba:	d94b      	bls.n	8017154 <_svfiprintf_r+0x17c>
 80170bc:	b1b0      	cbz	r0, 80170ec <_svfiprintf_r+0x114>
 80170be:	9207      	str	r2, [sp, #28]
 80170c0:	e014      	b.n	80170ec <_svfiprintf_r+0x114>
 80170c2:	eba0 0308 	sub.w	r3, r0, r8
 80170c6:	fa09 f303 	lsl.w	r3, r9, r3
 80170ca:	4313      	orrs	r3, r2
 80170cc:	9304      	str	r3, [sp, #16]
 80170ce:	46a2      	mov	sl, r4
 80170d0:	e7d2      	b.n	8017078 <_svfiprintf_r+0xa0>
 80170d2:	9b03      	ldr	r3, [sp, #12]
 80170d4:	1d19      	adds	r1, r3, #4
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	9103      	str	r1, [sp, #12]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	bfbb      	ittet	lt
 80170de:	425b      	neglt	r3, r3
 80170e0:	f042 0202 	orrlt.w	r2, r2, #2
 80170e4:	9307      	strge	r3, [sp, #28]
 80170e6:	9307      	strlt	r3, [sp, #28]
 80170e8:	bfb8      	it	lt
 80170ea:	9204      	strlt	r2, [sp, #16]
 80170ec:	7823      	ldrb	r3, [r4, #0]
 80170ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80170f0:	d10a      	bne.n	8017108 <_svfiprintf_r+0x130>
 80170f2:	7863      	ldrb	r3, [r4, #1]
 80170f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80170f6:	d132      	bne.n	801715e <_svfiprintf_r+0x186>
 80170f8:	9b03      	ldr	r3, [sp, #12]
 80170fa:	1d1a      	adds	r2, r3, #4
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	9203      	str	r2, [sp, #12]
 8017100:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017104:	3402      	adds	r4, #2
 8017106:	9305      	str	r3, [sp, #20]
 8017108:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80171cc <_svfiprintf_r+0x1f4>
 801710c:	7821      	ldrb	r1, [r4, #0]
 801710e:	2203      	movs	r2, #3
 8017110:	4650      	mov	r0, sl
 8017112:	f7e9 f8ed 	bl	80002f0 <memchr>
 8017116:	b138      	cbz	r0, 8017128 <_svfiprintf_r+0x150>
 8017118:	9b04      	ldr	r3, [sp, #16]
 801711a:	eba0 000a 	sub.w	r0, r0, sl
 801711e:	2240      	movs	r2, #64	@ 0x40
 8017120:	4082      	lsls	r2, r0
 8017122:	4313      	orrs	r3, r2
 8017124:	3401      	adds	r4, #1
 8017126:	9304      	str	r3, [sp, #16]
 8017128:	f814 1b01 	ldrb.w	r1, [r4], #1
 801712c:	4824      	ldr	r0, [pc, #144]	@ (80171c0 <_svfiprintf_r+0x1e8>)
 801712e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017132:	2206      	movs	r2, #6
 8017134:	f7e9 f8dc 	bl	80002f0 <memchr>
 8017138:	2800      	cmp	r0, #0
 801713a:	d036      	beq.n	80171aa <_svfiprintf_r+0x1d2>
 801713c:	4b21      	ldr	r3, [pc, #132]	@ (80171c4 <_svfiprintf_r+0x1ec>)
 801713e:	bb1b      	cbnz	r3, 8017188 <_svfiprintf_r+0x1b0>
 8017140:	9b03      	ldr	r3, [sp, #12]
 8017142:	3307      	adds	r3, #7
 8017144:	f023 0307 	bic.w	r3, r3, #7
 8017148:	3308      	adds	r3, #8
 801714a:	9303      	str	r3, [sp, #12]
 801714c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801714e:	4433      	add	r3, r6
 8017150:	9309      	str	r3, [sp, #36]	@ 0x24
 8017152:	e76a      	b.n	801702a <_svfiprintf_r+0x52>
 8017154:	fb0c 3202 	mla	r2, ip, r2, r3
 8017158:	460c      	mov	r4, r1
 801715a:	2001      	movs	r0, #1
 801715c:	e7a8      	b.n	80170b0 <_svfiprintf_r+0xd8>
 801715e:	2300      	movs	r3, #0
 8017160:	3401      	adds	r4, #1
 8017162:	9305      	str	r3, [sp, #20]
 8017164:	4619      	mov	r1, r3
 8017166:	f04f 0c0a 	mov.w	ip, #10
 801716a:	4620      	mov	r0, r4
 801716c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017170:	3a30      	subs	r2, #48	@ 0x30
 8017172:	2a09      	cmp	r2, #9
 8017174:	d903      	bls.n	801717e <_svfiprintf_r+0x1a6>
 8017176:	2b00      	cmp	r3, #0
 8017178:	d0c6      	beq.n	8017108 <_svfiprintf_r+0x130>
 801717a:	9105      	str	r1, [sp, #20]
 801717c:	e7c4      	b.n	8017108 <_svfiprintf_r+0x130>
 801717e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017182:	4604      	mov	r4, r0
 8017184:	2301      	movs	r3, #1
 8017186:	e7f0      	b.n	801716a <_svfiprintf_r+0x192>
 8017188:	ab03      	add	r3, sp, #12
 801718a:	9300      	str	r3, [sp, #0]
 801718c:	462a      	mov	r2, r5
 801718e:	4b0e      	ldr	r3, [pc, #56]	@ (80171c8 <_svfiprintf_r+0x1f0>)
 8017190:	a904      	add	r1, sp, #16
 8017192:	4638      	mov	r0, r7
 8017194:	f3af 8000 	nop.w
 8017198:	1c42      	adds	r2, r0, #1
 801719a:	4606      	mov	r6, r0
 801719c:	d1d6      	bne.n	801714c <_svfiprintf_r+0x174>
 801719e:	89ab      	ldrh	r3, [r5, #12]
 80171a0:	065b      	lsls	r3, r3, #25
 80171a2:	f53f af2d 	bmi.w	8017000 <_svfiprintf_r+0x28>
 80171a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80171a8:	e72c      	b.n	8017004 <_svfiprintf_r+0x2c>
 80171aa:	ab03      	add	r3, sp, #12
 80171ac:	9300      	str	r3, [sp, #0]
 80171ae:	462a      	mov	r2, r5
 80171b0:	4b05      	ldr	r3, [pc, #20]	@ (80171c8 <_svfiprintf_r+0x1f0>)
 80171b2:	a904      	add	r1, sp, #16
 80171b4:	4638      	mov	r0, r7
 80171b6:	f000 f9bb 	bl	8017530 <_printf_i>
 80171ba:	e7ed      	b.n	8017198 <_svfiprintf_r+0x1c0>
 80171bc:	08017ee4 	.word	0x08017ee4
 80171c0:	08017eee 	.word	0x08017eee
 80171c4:	00000000 	.word	0x00000000
 80171c8:	08016f21 	.word	0x08016f21
 80171cc:	08017eea 	.word	0x08017eea

080171d0 <__sfputc_r>:
 80171d0:	6893      	ldr	r3, [r2, #8]
 80171d2:	3b01      	subs	r3, #1
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	b410      	push	{r4}
 80171d8:	6093      	str	r3, [r2, #8]
 80171da:	da08      	bge.n	80171ee <__sfputc_r+0x1e>
 80171dc:	6994      	ldr	r4, [r2, #24]
 80171de:	42a3      	cmp	r3, r4
 80171e0:	db01      	blt.n	80171e6 <__sfputc_r+0x16>
 80171e2:	290a      	cmp	r1, #10
 80171e4:	d103      	bne.n	80171ee <__sfputc_r+0x1e>
 80171e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171ea:	f7ff bcc2 	b.w	8016b72 <__swbuf_r>
 80171ee:	6813      	ldr	r3, [r2, #0]
 80171f0:	1c58      	adds	r0, r3, #1
 80171f2:	6010      	str	r0, [r2, #0]
 80171f4:	7019      	strb	r1, [r3, #0]
 80171f6:	4608      	mov	r0, r1
 80171f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171fc:	4770      	bx	lr

080171fe <__sfputs_r>:
 80171fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017200:	4606      	mov	r6, r0
 8017202:	460f      	mov	r7, r1
 8017204:	4614      	mov	r4, r2
 8017206:	18d5      	adds	r5, r2, r3
 8017208:	42ac      	cmp	r4, r5
 801720a:	d101      	bne.n	8017210 <__sfputs_r+0x12>
 801720c:	2000      	movs	r0, #0
 801720e:	e007      	b.n	8017220 <__sfputs_r+0x22>
 8017210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017214:	463a      	mov	r2, r7
 8017216:	4630      	mov	r0, r6
 8017218:	f7ff ffda 	bl	80171d0 <__sfputc_r>
 801721c:	1c43      	adds	r3, r0, #1
 801721e:	d1f3      	bne.n	8017208 <__sfputs_r+0xa>
 8017220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017224 <_vfiprintf_r>:
 8017224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017228:	460d      	mov	r5, r1
 801722a:	b09d      	sub	sp, #116	@ 0x74
 801722c:	4614      	mov	r4, r2
 801722e:	4698      	mov	r8, r3
 8017230:	4606      	mov	r6, r0
 8017232:	b118      	cbz	r0, 801723c <_vfiprintf_r+0x18>
 8017234:	6a03      	ldr	r3, [r0, #32]
 8017236:	b90b      	cbnz	r3, 801723c <_vfiprintf_r+0x18>
 8017238:	f7ff fadc 	bl	80167f4 <__sinit>
 801723c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801723e:	07d9      	lsls	r1, r3, #31
 8017240:	d405      	bmi.n	801724e <_vfiprintf_r+0x2a>
 8017242:	89ab      	ldrh	r3, [r5, #12]
 8017244:	059a      	lsls	r2, r3, #22
 8017246:	d402      	bmi.n	801724e <_vfiprintf_r+0x2a>
 8017248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801724a:	f7ff fe0e 	bl	8016e6a <__retarget_lock_acquire_recursive>
 801724e:	89ab      	ldrh	r3, [r5, #12]
 8017250:	071b      	lsls	r3, r3, #28
 8017252:	d501      	bpl.n	8017258 <_vfiprintf_r+0x34>
 8017254:	692b      	ldr	r3, [r5, #16]
 8017256:	b99b      	cbnz	r3, 8017280 <_vfiprintf_r+0x5c>
 8017258:	4629      	mov	r1, r5
 801725a:	4630      	mov	r0, r6
 801725c:	f7ff fcc8 	bl	8016bf0 <__swsetup_r>
 8017260:	b170      	cbz	r0, 8017280 <_vfiprintf_r+0x5c>
 8017262:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017264:	07dc      	lsls	r4, r3, #31
 8017266:	d504      	bpl.n	8017272 <_vfiprintf_r+0x4e>
 8017268:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801726c:	b01d      	add	sp, #116	@ 0x74
 801726e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017272:	89ab      	ldrh	r3, [r5, #12]
 8017274:	0598      	lsls	r0, r3, #22
 8017276:	d4f7      	bmi.n	8017268 <_vfiprintf_r+0x44>
 8017278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801727a:	f7ff fdf7 	bl	8016e6c <__retarget_lock_release_recursive>
 801727e:	e7f3      	b.n	8017268 <_vfiprintf_r+0x44>
 8017280:	2300      	movs	r3, #0
 8017282:	9309      	str	r3, [sp, #36]	@ 0x24
 8017284:	2320      	movs	r3, #32
 8017286:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801728a:	f8cd 800c 	str.w	r8, [sp, #12]
 801728e:	2330      	movs	r3, #48	@ 0x30
 8017290:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017440 <_vfiprintf_r+0x21c>
 8017294:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017298:	f04f 0901 	mov.w	r9, #1
 801729c:	4623      	mov	r3, r4
 801729e:	469a      	mov	sl, r3
 80172a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172a4:	b10a      	cbz	r2, 80172aa <_vfiprintf_r+0x86>
 80172a6:	2a25      	cmp	r2, #37	@ 0x25
 80172a8:	d1f9      	bne.n	801729e <_vfiprintf_r+0x7a>
 80172aa:	ebba 0b04 	subs.w	fp, sl, r4
 80172ae:	d00b      	beq.n	80172c8 <_vfiprintf_r+0xa4>
 80172b0:	465b      	mov	r3, fp
 80172b2:	4622      	mov	r2, r4
 80172b4:	4629      	mov	r1, r5
 80172b6:	4630      	mov	r0, r6
 80172b8:	f7ff ffa1 	bl	80171fe <__sfputs_r>
 80172bc:	3001      	adds	r0, #1
 80172be:	f000 80a7 	beq.w	8017410 <_vfiprintf_r+0x1ec>
 80172c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80172c4:	445a      	add	r2, fp
 80172c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80172c8:	f89a 3000 	ldrb.w	r3, [sl]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	f000 809f 	beq.w	8017410 <_vfiprintf_r+0x1ec>
 80172d2:	2300      	movs	r3, #0
 80172d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80172d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80172dc:	f10a 0a01 	add.w	sl, sl, #1
 80172e0:	9304      	str	r3, [sp, #16]
 80172e2:	9307      	str	r3, [sp, #28]
 80172e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80172e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80172ea:	4654      	mov	r4, sl
 80172ec:	2205      	movs	r2, #5
 80172ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172f2:	4853      	ldr	r0, [pc, #332]	@ (8017440 <_vfiprintf_r+0x21c>)
 80172f4:	f7e8 fffc 	bl	80002f0 <memchr>
 80172f8:	9a04      	ldr	r2, [sp, #16]
 80172fa:	b9d8      	cbnz	r0, 8017334 <_vfiprintf_r+0x110>
 80172fc:	06d1      	lsls	r1, r2, #27
 80172fe:	bf44      	itt	mi
 8017300:	2320      	movmi	r3, #32
 8017302:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017306:	0713      	lsls	r3, r2, #28
 8017308:	bf44      	itt	mi
 801730a:	232b      	movmi	r3, #43	@ 0x2b
 801730c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017310:	f89a 3000 	ldrb.w	r3, [sl]
 8017314:	2b2a      	cmp	r3, #42	@ 0x2a
 8017316:	d015      	beq.n	8017344 <_vfiprintf_r+0x120>
 8017318:	9a07      	ldr	r2, [sp, #28]
 801731a:	4654      	mov	r4, sl
 801731c:	2000      	movs	r0, #0
 801731e:	f04f 0c0a 	mov.w	ip, #10
 8017322:	4621      	mov	r1, r4
 8017324:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017328:	3b30      	subs	r3, #48	@ 0x30
 801732a:	2b09      	cmp	r3, #9
 801732c:	d94b      	bls.n	80173c6 <_vfiprintf_r+0x1a2>
 801732e:	b1b0      	cbz	r0, 801735e <_vfiprintf_r+0x13a>
 8017330:	9207      	str	r2, [sp, #28]
 8017332:	e014      	b.n	801735e <_vfiprintf_r+0x13a>
 8017334:	eba0 0308 	sub.w	r3, r0, r8
 8017338:	fa09 f303 	lsl.w	r3, r9, r3
 801733c:	4313      	orrs	r3, r2
 801733e:	9304      	str	r3, [sp, #16]
 8017340:	46a2      	mov	sl, r4
 8017342:	e7d2      	b.n	80172ea <_vfiprintf_r+0xc6>
 8017344:	9b03      	ldr	r3, [sp, #12]
 8017346:	1d19      	adds	r1, r3, #4
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	9103      	str	r1, [sp, #12]
 801734c:	2b00      	cmp	r3, #0
 801734e:	bfbb      	ittet	lt
 8017350:	425b      	neglt	r3, r3
 8017352:	f042 0202 	orrlt.w	r2, r2, #2
 8017356:	9307      	strge	r3, [sp, #28]
 8017358:	9307      	strlt	r3, [sp, #28]
 801735a:	bfb8      	it	lt
 801735c:	9204      	strlt	r2, [sp, #16]
 801735e:	7823      	ldrb	r3, [r4, #0]
 8017360:	2b2e      	cmp	r3, #46	@ 0x2e
 8017362:	d10a      	bne.n	801737a <_vfiprintf_r+0x156>
 8017364:	7863      	ldrb	r3, [r4, #1]
 8017366:	2b2a      	cmp	r3, #42	@ 0x2a
 8017368:	d132      	bne.n	80173d0 <_vfiprintf_r+0x1ac>
 801736a:	9b03      	ldr	r3, [sp, #12]
 801736c:	1d1a      	adds	r2, r3, #4
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	9203      	str	r2, [sp, #12]
 8017372:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017376:	3402      	adds	r4, #2
 8017378:	9305      	str	r3, [sp, #20]
 801737a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017450 <_vfiprintf_r+0x22c>
 801737e:	7821      	ldrb	r1, [r4, #0]
 8017380:	2203      	movs	r2, #3
 8017382:	4650      	mov	r0, sl
 8017384:	f7e8 ffb4 	bl	80002f0 <memchr>
 8017388:	b138      	cbz	r0, 801739a <_vfiprintf_r+0x176>
 801738a:	9b04      	ldr	r3, [sp, #16]
 801738c:	eba0 000a 	sub.w	r0, r0, sl
 8017390:	2240      	movs	r2, #64	@ 0x40
 8017392:	4082      	lsls	r2, r0
 8017394:	4313      	orrs	r3, r2
 8017396:	3401      	adds	r4, #1
 8017398:	9304      	str	r3, [sp, #16]
 801739a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801739e:	4829      	ldr	r0, [pc, #164]	@ (8017444 <_vfiprintf_r+0x220>)
 80173a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80173a4:	2206      	movs	r2, #6
 80173a6:	f7e8 ffa3 	bl	80002f0 <memchr>
 80173aa:	2800      	cmp	r0, #0
 80173ac:	d03f      	beq.n	801742e <_vfiprintf_r+0x20a>
 80173ae:	4b26      	ldr	r3, [pc, #152]	@ (8017448 <_vfiprintf_r+0x224>)
 80173b0:	bb1b      	cbnz	r3, 80173fa <_vfiprintf_r+0x1d6>
 80173b2:	9b03      	ldr	r3, [sp, #12]
 80173b4:	3307      	adds	r3, #7
 80173b6:	f023 0307 	bic.w	r3, r3, #7
 80173ba:	3308      	adds	r3, #8
 80173bc:	9303      	str	r3, [sp, #12]
 80173be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80173c0:	443b      	add	r3, r7
 80173c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80173c4:	e76a      	b.n	801729c <_vfiprintf_r+0x78>
 80173c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80173ca:	460c      	mov	r4, r1
 80173cc:	2001      	movs	r0, #1
 80173ce:	e7a8      	b.n	8017322 <_vfiprintf_r+0xfe>
 80173d0:	2300      	movs	r3, #0
 80173d2:	3401      	adds	r4, #1
 80173d4:	9305      	str	r3, [sp, #20]
 80173d6:	4619      	mov	r1, r3
 80173d8:	f04f 0c0a 	mov.w	ip, #10
 80173dc:	4620      	mov	r0, r4
 80173de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80173e2:	3a30      	subs	r2, #48	@ 0x30
 80173e4:	2a09      	cmp	r2, #9
 80173e6:	d903      	bls.n	80173f0 <_vfiprintf_r+0x1cc>
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d0c6      	beq.n	801737a <_vfiprintf_r+0x156>
 80173ec:	9105      	str	r1, [sp, #20]
 80173ee:	e7c4      	b.n	801737a <_vfiprintf_r+0x156>
 80173f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80173f4:	4604      	mov	r4, r0
 80173f6:	2301      	movs	r3, #1
 80173f8:	e7f0      	b.n	80173dc <_vfiprintf_r+0x1b8>
 80173fa:	ab03      	add	r3, sp, #12
 80173fc:	9300      	str	r3, [sp, #0]
 80173fe:	462a      	mov	r2, r5
 8017400:	4b12      	ldr	r3, [pc, #72]	@ (801744c <_vfiprintf_r+0x228>)
 8017402:	a904      	add	r1, sp, #16
 8017404:	4630      	mov	r0, r6
 8017406:	f3af 8000 	nop.w
 801740a:	4607      	mov	r7, r0
 801740c:	1c78      	adds	r0, r7, #1
 801740e:	d1d6      	bne.n	80173be <_vfiprintf_r+0x19a>
 8017410:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017412:	07d9      	lsls	r1, r3, #31
 8017414:	d405      	bmi.n	8017422 <_vfiprintf_r+0x1fe>
 8017416:	89ab      	ldrh	r3, [r5, #12]
 8017418:	059a      	lsls	r2, r3, #22
 801741a:	d402      	bmi.n	8017422 <_vfiprintf_r+0x1fe>
 801741c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801741e:	f7ff fd25 	bl	8016e6c <__retarget_lock_release_recursive>
 8017422:	89ab      	ldrh	r3, [r5, #12]
 8017424:	065b      	lsls	r3, r3, #25
 8017426:	f53f af1f 	bmi.w	8017268 <_vfiprintf_r+0x44>
 801742a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801742c:	e71e      	b.n	801726c <_vfiprintf_r+0x48>
 801742e:	ab03      	add	r3, sp, #12
 8017430:	9300      	str	r3, [sp, #0]
 8017432:	462a      	mov	r2, r5
 8017434:	4b05      	ldr	r3, [pc, #20]	@ (801744c <_vfiprintf_r+0x228>)
 8017436:	a904      	add	r1, sp, #16
 8017438:	4630      	mov	r0, r6
 801743a:	f000 f879 	bl	8017530 <_printf_i>
 801743e:	e7e4      	b.n	801740a <_vfiprintf_r+0x1e6>
 8017440:	08017ee4 	.word	0x08017ee4
 8017444:	08017eee 	.word	0x08017eee
 8017448:	00000000 	.word	0x00000000
 801744c:	080171ff 	.word	0x080171ff
 8017450:	08017eea 	.word	0x08017eea

08017454 <_printf_common>:
 8017454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017458:	4616      	mov	r6, r2
 801745a:	4698      	mov	r8, r3
 801745c:	688a      	ldr	r2, [r1, #8]
 801745e:	690b      	ldr	r3, [r1, #16]
 8017460:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017464:	4293      	cmp	r3, r2
 8017466:	bfb8      	it	lt
 8017468:	4613      	movlt	r3, r2
 801746a:	6033      	str	r3, [r6, #0]
 801746c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017470:	4607      	mov	r7, r0
 8017472:	460c      	mov	r4, r1
 8017474:	b10a      	cbz	r2, 801747a <_printf_common+0x26>
 8017476:	3301      	adds	r3, #1
 8017478:	6033      	str	r3, [r6, #0]
 801747a:	6823      	ldr	r3, [r4, #0]
 801747c:	0699      	lsls	r1, r3, #26
 801747e:	bf42      	ittt	mi
 8017480:	6833      	ldrmi	r3, [r6, #0]
 8017482:	3302      	addmi	r3, #2
 8017484:	6033      	strmi	r3, [r6, #0]
 8017486:	6825      	ldr	r5, [r4, #0]
 8017488:	f015 0506 	ands.w	r5, r5, #6
 801748c:	d106      	bne.n	801749c <_printf_common+0x48>
 801748e:	f104 0a19 	add.w	sl, r4, #25
 8017492:	68e3      	ldr	r3, [r4, #12]
 8017494:	6832      	ldr	r2, [r6, #0]
 8017496:	1a9b      	subs	r3, r3, r2
 8017498:	42ab      	cmp	r3, r5
 801749a:	dc26      	bgt.n	80174ea <_printf_common+0x96>
 801749c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80174a0:	6822      	ldr	r2, [r4, #0]
 80174a2:	3b00      	subs	r3, #0
 80174a4:	bf18      	it	ne
 80174a6:	2301      	movne	r3, #1
 80174a8:	0692      	lsls	r2, r2, #26
 80174aa:	d42b      	bmi.n	8017504 <_printf_common+0xb0>
 80174ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80174b0:	4641      	mov	r1, r8
 80174b2:	4638      	mov	r0, r7
 80174b4:	47c8      	blx	r9
 80174b6:	3001      	adds	r0, #1
 80174b8:	d01e      	beq.n	80174f8 <_printf_common+0xa4>
 80174ba:	6823      	ldr	r3, [r4, #0]
 80174bc:	6922      	ldr	r2, [r4, #16]
 80174be:	f003 0306 	and.w	r3, r3, #6
 80174c2:	2b04      	cmp	r3, #4
 80174c4:	bf02      	ittt	eq
 80174c6:	68e5      	ldreq	r5, [r4, #12]
 80174c8:	6833      	ldreq	r3, [r6, #0]
 80174ca:	1aed      	subeq	r5, r5, r3
 80174cc:	68a3      	ldr	r3, [r4, #8]
 80174ce:	bf0c      	ite	eq
 80174d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80174d4:	2500      	movne	r5, #0
 80174d6:	4293      	cmp	r3, r2
 80174d8:	bfc4      	itt	gt
 80174da:	1a9b      	subgt	r3, r3, r2
 80174dc:	18ed      	addgt	r5, r5, r3
 80174de:	2600      	movs	r6, #0
 80174e0:	341a      	adds	r4, #26
 80174e2:	42b5      	cmp	r5, r6
 80174e4:	d11a      	bne.n	801751c <_printf_common+0xc8>
 80174e6:	2000      	movs	r0, #0
 80174e8:	e008      	b.n	80174fc <_printf_common+0xa8>
 80174ea:	2301      	movs	r3, #1
 80174ec:	4652      	mov	r2, sl
 80174ee:	4641      	mov	r1, r8
 80174f0:	4638      	mov	r0, r7
 80174f2:	47c8      	blx	r9
 80174f4:	3001      	adds	r0, #1
 80174f6:	d103      	bne.n	8017500 <_printf_common+0xac>
 80174f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80174fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017500:	3501      	adds	r5, #1
 8017502:	e7c6      	b.n	8017492 <_printf_common+0x3e>
 8017504:	18e1      	adds	r1, r4, r3
 8017506:	1c5a      	adds	r2, r3, #1
 8017508:	2030      	movs	r0, #48	@ 0x30
 801750a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801750e:	4422      	add	r2, r4
 8017510:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017514:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017518:	3302      	adds	r3, #2
 801751a:	e7c7      	b.n	80174ac <_printf_common+0x58>
 801751c:	2301      	movs	r3, #1
 801751e:	4622      	mov	r2, r4
 8017520:	4641      	mov	r1, r8
 8017522:	4638      	mov	r0, r7
 8017524:	47c8      	blx	r9
 8017526:	3001      	adds	r0, #1
 8017528:	d0e6      	beq.n	80174f8 <_printf_common+0xa4>
 801752a:	3601      	adds	r6, #1
 801752c:	e7d9      	b.n	80174e2 <_printf_common+0x8e>
	...

08017530 <_printf_i>:
 8017530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017534:	7e0f      	ldrb	r7, [r1, #24]
 8017536:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017538:	2f78      	cmp	r7, #120	@ 0x78
 801753a:	4691      	mov	r9, r2
 801753c:	4680      	mov	r8, r0
 801753e:	460c      	mov	r4, r1
 8017540:	469a      	mov	sl, r3
 8017542:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017546:	d807      	bhi.n	8017558 <_printf_i+0x28>
 8017548:	2f62      	cmp	r7, #98	@ 0x62
 801754a:	d80a      	bhi.n	8017562 <_printf_i+0x32>
 801754c:	2f00      	cmp	r7, #0
 801754e:	f000 80d1 	beq.w	80176f4 <_printf_i+0x1c4>
 8017552:	2f58      	cmp	r7, #88	@ 0x58
 8017554:	f000 80b8 	beq.w	80176c8 <_printf_i+0x198>
 8017558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801755c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017560:	e03a      	b.n	80175d8 <_printf_i+0xa8>
 8017562:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017566:	2b15      	cmp	r3, #21
 8017568:	d8f6      	bhi.n	8017558 <_printf_i+0x28>
 801756a:	a101      	add	r1, pc, #4	@ (adr r1, 8017570 <_printf_i+0x40>)
 801756c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017570:	080175c9 	.word	0x080175c9
 8017574:	080175dd 	.word	0x080175dd
 8017578:	08017559 	.word	0x08017559
 801757c:	08017559 	.word	0x08017559
 8017580:	08017559 	.word	0x08017559
 8017584:	08017559 	.word	0x08017559
 8017588:	080175dd 	.word	0x080175dd
 801758c:	08017559 	.word	0x08017559
 8017590:	08017559 	.word	0x08017559
 8017594:	08017559 	.word	0x08017559
 8017598:	08017559 	.word	0x08017559
 801759c:	080176db 	.word	0x080176db
 80175a0:	08017607 	.word	0x08017607
 80175a4:	08017695 	.word	0x08017695
 80175a8:	08017559 	.word	0x08017559
 80175ac:	08017559 	.word	0x08017559
 80175b0:	080176fd 	.word	0x080176fd
 80175b4:	08017559 	.word	0x08017559
 80175b8:	08017607 	.word	0x08017607
 80175bc:	08017559 	.word	0x08017559
 80175c0:	08017559 	.word	0x08017559
 80175c4:	0801769d 	.word	0x0801769d
 80175c8:	6833      	ldr	r3, [r6, #0]
 80175ca:	1d1a      	adds	r2, r3, #4
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	6032      	str	r2, [r6, #0]
 80175d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80175d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80175d8:	2301      	movs	r3, #1
 80175da:	e09c      	b.n	8017716 <_printf_i+0x1e6>
 80175dc:	6833      	ldr	r3, [r6, #0]
 80175de:	6820      	ldr	r0, [r4, #0]
 80175e0:	1d19      	adds	r1, r3, #4
 80175e2:	6031      	str	r1, [r6, #0]
 80175e4:	0606      	lsls	r6, r0, #24
 80175e6:	d501      	bpl.n	80175ec <_printf_i+0xbc>
 80175e8:	681d      	ldr	r5, [r3, #0]
 80175ea:	e003      	b.n	80175f4 <_printf_i+0xc4>
 80175ec:	0645      	lsls	r5, r0, #25
 80175ee:	d5fb      	bpl.n	80175e8 <_printf_i+0xb8>
 80175f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80175f4:	2d00      	cmp	r5, #0
 80175f6:	da03      	bge.n	8017600 <_printf_i+0xd0>
 80175f8:	232d      	movs	r3, #45	@ 0x2d
 80175fa:	426d      	negs	r5, r5
 80175fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017600:	4858      	ldr	r0, [pc, #352]	@ (8017764 <_printf_i+0x234>)
 8017602:	230a      	movs	r3, #10
 8017604:	e011      	b.n	801762a <_printf_i+0xfa>
 8017606:	6821      	ldr	r1, [r4, #0]
 8017608:	6833      	ldr	r3, [r6, #0]
 801760a:	0608      	lsls	r0, r1, #24
 801760c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017610:	d402      	bmi.n	8017618 <_printf_i+0xe8>
 8017612:	0649      	lsls	r1, r1, #25
 8017614:	bf48      	it	mi
 8017616:	b2ad      	uxthmi	r5, r5
 8017618:	2f6f      	cmp	r7, #111	@ 0x6f
 801761a:	4852      	ldr	r0, [pc, #328]	@ (8017764 <_printf_i+0x234>)
 801761c:	6033      	str	r3, [r6, #0]
 801761e:	bf14      	ite	ne
 8017620:	230a      	movne	r3, #10
 8017622:	2308      	moveq	r3, #8
 8017624:	2100      	movs	r1, #0
 8017626:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801762a:	6866      	ldr	r6, [r4, #4]
 801762c:	60a6      	str	r6, [r4, #8]
 801762e:	2e00      	cmp	r6, #0
 8017630:	db05      	blt.n	801763e <_printf_i+0x10e>
 8017632:	6821      	ldr	r1, [r4, #0]
 8017634:	432e      	orrs	r6, r5
 8017636:	f021 0104 	bic.w	r1, r1, #4
 801763a:	6021      	str	r1, [r4, #0]
 801763c:	d04b      	beq.n	80176d6 <_printf_i+0x1a6>
 801763e:	4616      	mov	r6, r2
 8017640:	fbb5 f1f3 	udiv	r1, r5, r3
 8017644:	fb03 5711 	mls	r7, r3, r1, r5
 8017648:	5dc7      	ldrb	r7, [r0, r7]
 801764a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801764e:	462f      	mov	r7, r5
 8017650:	42bb      	cmp	r3, r7
 8017652:	460d      	mov	r5, r1
 8017654:	d9f4      	bls.n	8017640 <_printf_i+0x110>
 8017656:	2b08      	cmp	r3, #8
 8017658:	d10b      	bne.n	8017672 <_printf_i+0x142>
 801765a:	6823      	ldr	r3, [r4, #0]
 801765c:	07df      	lsls	r7, r3, #31
 801765e:	d508      	bpl.n	8017672 <_printf_i+0x142>
 8017660:	6923      	ldr	r3, [r4, #16]
 8017662:	6861      	ldr	r1, [r4, #4]
 8017664:	4299      	cmp	r1, r3
 8017666:	bfde      	ittt	le
 8017668:	2330      	movle	r3, #48	@ 0x30
 801766a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801766e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8017672:	1b92      	subs	r2, r2, r6
 8017674:	6122      	str	r2, [r4, #16]
 8017676:	f8cd a000 	str.w	sl, [sp]
 801767a:	464b      	mov	r3, r9
 801767c:	aa03      	add	r2, sp, #12
 801767e:	4621      	mov	r1, r4
 8017680:	4640      	mov	r0, r8
 8017682:	f7ff fee7 	bl	8017454 <_printf_common>
 8017686:	3001      	adds	r0, #1
 8017688:	d14a      	bne.n	8017720 <_printf_i+0x1f0>
 801768a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801768e:	b004      	add	sp, #16
 8017690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017694:	6823      	ldr	r3, [r4, #0]
 8017696:	f043 0320 	orr.w	r3, r3, #32
 801769a:	6023      	str	r3, [r4, #0]
 801769c:	4832      	ldr	r0, [pc, #200]	@ (8017768 <_printf_i+0x238>)
 801769e:	2778      	movs	r7, #120	@ 0x78
 80176a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80176a4:	6823      	ldr	r3, [r4, #0]
 80176a6:	6831      	ldr	r1, [r6, #0]
 80176a8:	061f      	lsls	r7, r3, #24
 80176aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80176ae:	d402      	bmi.n	80176b6 <_printf_i+0x186>
 80176b0:	065f      	lsls	r7, r3, #25
 80176b2:	bf48      	it	mi
 80176b4:	b2ad      	uxthmi	r5, r5
 80176b6:	6031      	str	r1, [r6, #0]
 80176b8:	07d9      	lsls	r1, r3, #31
 80176ba:	bf44      	itt	mi
 80176bc:	f043 0320 	orrmi.w	r3, r3, #32
 80176c0:	6023      	strmi	r3, [r4, #0]
 80176c2:	b11d      	cbz	r5, 80176cc <_printf_i+0x19c>
 80176c4:	2310      	movs	r3, #16
 80176c6:	e7ad      	b.n	8017624 <_printf_i+0xf4>
 80176c8:	4826      	ldr	r0, [pc, #152]	@ (8017764 <_printf_i+0x234>)
 80176ca:	e7e9      	b.n	80176a0 <_printf_i+0x170>
 80176cc:	6823      	ldr	r3, [r4, #0]
 80176ce:	f023 0320 	bic.w	r3, r3, #32
 80176d2:	6023      	str	r3, [r4, #0]
 80176d4:	e7f6      	b.n	80176c4 <_printf_i+0x194>
 80176d6:	4616      	mov	r6, r2
 80176d8:	e7bd      	b.n	8017656 <_printf_i+0x126>
 80176da:	6833      	ldr	r3, [r6, #0]
 80176dc:	6825      	ldr	r5, [r4, #0]
 80176de:	6961      	ldr	r1, [r4, #20]
 80176e0:	1d18      	adds	r0, r3, #4
 80176e2:	6030      	str	r0, [r6, #0]
 80176e4:	062e      	lsls	r6, r5, #24
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	d501      	bpl.n	80176ee <_printf_i+0x1be>
 80176ea:	6019      	str	r1, [r3, #0]
 80176ec:	e002      	b.n	80176f4 <_printf_i+0x1c4>
 80176ee:	0668      	lsls	r0, r5, #25
 80176f0:	d5fb      	bpl.n	80176ea <_printf_i+0x1ba>
 80176f2:	8019      	strh	r1, [r3, #0]
 80176f4:	2300      	movs	r3, #0
 80176f6:	6123      	str	r3, [r4, #16]
 80176f8:	4616      	mov	r6, r2
 80176fa:	e7bc      	b.n	8017676 <_printf_i+0x146>
 80176fc:	6833      	ldr	r3, [r6, #0]
 80176fe:	1d1a      	adds	r2, r3, #4
 8017700:	6032      	str	r2, [r6, #0]
 8017702:	681e      	ldr	r6, [r3, #0]
 8017704:	6862      	ldr	r2, [r4, #4]
 8017706:	2100      	movs	r1, #0
 8017708:	4630      	mov	r0, r6
 801770a:	f7e8 fdf1 	bl	80002f0 <memchr>
 801770e:	b108      	cbz	r0, 8017714 <_printf_i+0x1e4>
 8017710:	1b80      	subs	r0, r0, r6
 8017712:	6060      	str	r0, [r4, #4]
 8017714:	6863      	ldr	r3, [r4, #4]
 8017716:	6123      	str	r3, [r4, #16]
 8017718:	2300      	movs	r3, #0
 801771a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801771e:	e7aa      	b.n	8017676 <_printf_i+0x146>
 8017720:	6923      	ldr	r3, [r4, #16]
 8017722:	4632      	mov	r2, r6
 8017724:	4649      	mov	r1, r9
 8017726:	4640      	mov	r0, r8
 8017728:	47d0      	blx	sl
 801772a:	3001      	adds	r0, #1
 801772c:	d0ad      	beq.n	801768a <_printf_i+0x15a>
 801772e:	6823      	ldr	r3, [r4, #0]
 8017730:	079b      	lsls	r3, r3, #30
 8017732:	d413      	bmi.n	801775c <_printf_i+0x22c>
 8017734:	68e0      	ldr	r0, [r4, #12]
 8017736:	9b03      	ldr	r3, [sp, #12]
 8017738:	4298      	cmp	r0, r3
 801773a:	bfb8      	it	lt
 801773c:	4618      	movlt	r0, r3
 801773e:	e7a6      	b.n	801768e <_printf_i+0x15e>
 8017740:	2301      	movs	r3, #1
 8017742:	4632      	mov	r2, r6
 8017744:	4649      	mov	r1, r9
 8017746:	4640      	mov	r0, r8
 8017748:	47d0      	blx	sl
 801774a:	3001      	adds	r0, #1
 801774c:	d09d      	beq.n	801768a <_printf_i+0x15a>
 801774e:	3501      	adds	r5, #1
 8017750:	68e3      	ldr	r3, [r4, #12]
 8017752:	9903      	ldr	r1, [sp, #12]
 8017754:	1a5b      	subs	r3, r3, r1
 8017756:	42ab      	cmp	r3, r5
 8017758:	dcf2      	bgt.n	8017740 <_printf_i+0x210>
 801775a:	e7eb      	b.n	8017734 <_printf_i+0x204>
 801775c:	2500      	movs	r5, #0
 801775e:	f104 0619 	add.w	r6, r4, #25
 8017762:	e7f5      	b.n	8017750 <_printf_i+0x220>
 8017764:	08017ef5 	.word	0x08017ef5
 8017768:	08017f06 	.word	0x08017f06

0801776c <__sflush_r>:
 801776c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017774:	0716      	lsls	r6, r2, #28
 8017776:	4605      	mov	r5, r0
 8017778:	460c      	mov	r4, r1
 801777a:	d454      	bmi.n	8017826 <__sflush_r+0xba>
 801777c:	684b      	ldr	r3, [r1, #4]
 801777e:	2b00      	cmp	r3, #0
 8017780:	dc02      	bgt.n	8017788 <__sflush_r+0x1c>
 8017782:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017784:	2b00      	cmp	r3, #0
 8017786:	dd48      	ble.n	801781a <__sflush_r+0xae>
 8017788:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801778a:	2e00      	cmp	r6, #0
 801778c:	d045      	beq.n	801781a <__sflush_r+0xae>
 801778e:	2300      	movs	r3, #0
 8017790:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017794:	682f      	ldr	r7, [r5, #0]
 8017796:	6a21      	ldr	r1, [r4, #32]
 8017798:	602b      	str	r3, [r5, #0]
 801779a:	d030      	beq.n	80177fe <__sflush_r+0x92>
 801779c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801779e:	89a3      	ldrh	r3, [r4, #12]
 80177a0:	0759      	lsls	r1, r3, #29
 80177a2:	d505      	bpl.n	80177b0 <__sflush_r+0x44>
 80177a4:	6863      	ldr	r3, [r4, #4]
 80177a6:	1ad2      	subs	r2, r2, r3
 80177a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80177aa:	b10b      	cbz	r3, 80177b0 <__sflush_r+0x44>
 80177ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80177ae:	1ad2      	subs	r2, r2, r3
 80177b0:	2300      	movs	r3, #0
 80177b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80177b4:	6a21      	ldr	r1, [r4, #32]
 80177b6:	4628      	mov	r0, r5
 80177b8:	47b0      	blx	r6
 80177ba:	1c43      	adds	r3, r0, #1
 80177bc:	89a3      	ldrh	r3, [r4, #12]
 80177be:	d106      	bne.n	80177ce <__sflush_r+0x62>
 80177c0:	6829      	ldr	r1, [r5, #0]
 80177c2:	291d      	cmp	r1, #29
 80177c4:	d82b      	bhi.n	801781e <__sflush_r+0xb2>
 80177c6:	4a2a      	ldr	r2, [pc, #168]	@ (8017870 <__sflush_r+0x104>)
 80177c8:	40ca      	lsrs	r2, r1
 80177ca:	07d6      	lsls	r6, r2, #31
 80177cc:	d527      	bpl.n	801781e <__sflush_r+0xb2>
 80177ce:	2200      	movs	r2, #0
 80177d0:	6062      	str	r2, [r4, #4]
 80177d2:	04d9      	lsls	r1, r3, #19
 80177d4:	6922      	ldr	r2, [r4, #16]
 80177d6:	6022      	str	r2, [r4, #0]
 80177d8:	d504      	bpl.n	80177e4 <__sflush_r+0x78>
 80177da:	1c42      	adds	r2, r0, #1
 80177dc:	d101      	bne.n	80177e2 <__sflush_r+0x76>
 80177de:	682b      	ldr	r3, [r5, #0]
 80177e0:	b903      	cbnz	r3, 80177e4 <__sflush_r+0x78>
 80177e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80177e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80177e6:	602f      	str	r7, [r5, #0]
 80177e8:	b1b9      	cbz	r1, 801781a <__sflush_r+0xae>
 80177ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80177ee:	4299      	cmp	r1, r3
 80177f0:	d002      	beq.n	80177f8 <__sflush_r+0x8c>
 80177f2:	4628      	mov	r0, r5
 80177f4:	f7ff fb4a 	bl	8016e8c <_free_r>
 80177f8:	2300      	movs	r3, #0
 80177fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80177fc:	e00d      	b.n	801781a <__sflush_r+0xae>
 80177fe:	2301      	movs	r3, #1
 8017800:	4628      	mov	r0, r5
 8017802:	47b0      	blx	r6
 8017804:	4602      	mov	r2, r0
 8017806:	1c50      	adds	r0, r2, #1
 8017808:	d1c9      	bne.n	801779e <__sflush_r+0x32>
 801780a:	682b      	ldr	r3, [r5, #0]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d0c6      	beq.n	801779e <__sflush_r+0x32>
 8017810:	2b1d      	cmp	r3, #29
 8017812:	d001      	beq.n	8017818 <__sflush_r+0xac>
 8017814:	2b16      	cmp	r3, #22
 8017816:	d11e      	bne.n	8017856 <__sflush_r+0xea>
 8017818:	602f      	str	r7, [r5, #0]
 801781a:	2000      	movs	r0, #0
 801781c:	e022      	b.n	8017864 <__sflush_r+0xf8>
 801781e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017822:	b21b      	sxth	r3, r3
 8017824:	e01b      	b.n	801785e <__sflush_r+0xf2>
 8017826:	690f      	ldr	r7, [r1, #16]
 8017828:	2f00      	cmp	r7, #0
 801782a:	d0f6      	beq.n	801781a <__sflush_r+0xae>
 801782c:	0793      	lsls	r3, r2, #30
 801782e:	680e      	ldr	r6, [r1, #0]
 8017830:	bf08      	it	eq
 8017832:	694b      	ldreq	r3, [r1, #20]
 8017834:	600f      	str	r7, [r1, #0]
 8017836:	bf18      	it	ne
 8017838:	2300      	movne	r3, #0
 801783a:	eba6 0807 	sub.w	r8, r6, r7
 801783e:	608b      	str	r3, [r1, #8]
 8017840:	f1b8 0f00 	cmp.w	r8, #0
 8017844:	dde9      	ble.n	801781a <__sflush_r+0xae>
 8017846:	6a21      	ldr	r1, [r4, #32]
 8017848:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801784a:	4643      	mov	r3, r8
 801784c:	463a      	mov	r2, r7
 801784e:	4628      	mov	r0, r5
 8017850:	47b0      	blx	r6
 8017852:	2800      	cmp	r0, #0
 8017854:	dc08      	bgt.n	8017868 <__sflush_r+0xfc>
 8017856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801785a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801785e:	81a3      	strh	r3, [r4, #12]
 8017860:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017868:	4407      	add	r7, r0
 801786a:	eba8 0800 	sub.w	r8, r8, r0
 801786e:	e7e7      	b.n	8017840 <__sflush_r+0xd4>
 8017870:	20400001 	.word	0x20400001

08017874 <_fflush_r>:
 8017874:	b538      	push	{r3, r4, r5, lr}
 8017876:	690b      	ldr	r3, [r1, #16]
 8017878:	4605      	mov	r5, r0
 801787a:	460c      	mov	r4, r1
 801787c:	b913      	cbnz	r3, 8017884 <_fflush_r+0x10>
 801787e:	2500      	movs	r5, #0
 8017880:	4628      	mov	r0, r5
 8017882:	bd38      	pop	{r3, r4, r5, pc}
 8017884:	b118      	cbz	r0, 801788e <_fflush_r+0x1a>
 8017886:	6a03      	ldr	r3, [r0, #32]
 8017888:	b90b      	cbnz	r3, 801788e <_fflush_r+0x1a>
 801788a:	f7fe ffb3 	bl	80167f4 <__sinit>
 801788e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d0f3      	beq.n	801787e <_fflush_r+0xa>
 8017896:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017898:	07d0      	lsls	r0, r2, #31
 801789a:	d404      	bmi.n	80178a6 <_fflush_r+0x32>
 801789c:	0599      	lsls	r1, r3, #22
 801789e:	d402      	bmi.n	80178a6 <_fflush_r+0x32>
 80178a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80178a2:	f7ff fae2 	bl	8016e6a <__retarget_lock_acquire_recursive>
 80178a6:	4628      	mov	r0, r5
 80178a8:	4621      	mov	r1, r4
 80178aa:	f7ff ff5f 	bl	801776c <__sflush_r>
 80178ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80178b0:	07da      	lsls	r2, r3, #31
 80178b2:	4605      	mov	r5, r0
 80178b4:	d4e4      	bmi.n	8017880 <_fflush_r+0xc>
 80178b6:	89a3      	ldrh	r3, [r4, #12]
 80178b8:	059b      	lsls	r3, r3, #22
 80178ba:	d4e1      	bmi.n	8017880 <_fflush_r+0xc>
 80178bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80178be:	f7ff fad5 	bl	8016e6c <__retarget_lock_release_recursive>
 80178c2:	e7dd      	b.n	8017880 <_fflush_r+0xc>

080178c4 <__swhatbuf_r>:
 80178c4:	b570      	push	{r4, r5, r6, lr}
 80178c6:	460c      	mov	r4, r1
 80178c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178cc:	2900      	cmp	r1, #0
 80178ce:	b096      	sub	sp, #88	@ 0x58
 80178d0:	4615      	mov	r5, r2
 80178d2:	461e      	mov	r6, r3
 80178d4:	da0d      	bge.n	80178f2 <__swhatbuf_r+0x2e>
 80178d6:	89a3      	ldrh	r3, [r4, #12]
 80178d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80178dc:	f04f 0100 	mov.w	r1, #0
 80178e0:	bf14      	ite	ne
 80178e2:	2340      	movne	r3, #64	@ 0x40
 80178e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80178e8:	2000      	movs	r0, #0
 80178ea:	6031      	str	r1, [r6, #0]
 80178ec:	602b      	str	r3, [r5, #0]
 80178ee:	b016      	add	sp, #88	@ 0x58
 80178f0:	bd70      	pop	{r4, r5, r6, pc}
 80178f2:	466a      	mov	r2, sp
 80178f4:	f000 f862 	bl	80179bc <_fstat_r>
 80178f8:	2800      	cmp	r0, #0
 80178fa:	dbec      	blt.n	80178d6 <__swhatbuf_r+0x12>
 80178fc:	9901      	ldr	r1, [sp, #4]
 80178fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017902:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017906:	4259      	negs	r1, r3
 8017908:	4159      	adcs	r1, r3
 801790a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801790e:	e7eb      	b.n	80178e8 <__swhatbuf_r+0x24>

08017910 <__smakebuf_r>:
 8017910:	898b      	ldrh	r3, [r1, #12]
 8017912:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017914:	079d      	lsls	r5, r3, #30
 8017916:	4606      	mov	r6, r0
 8017918:	460c      	mov	r4, r1
 801791a:	d507      	bpl.n	801792c <__smakebuf_r+0x1c>
 801791c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017920:	6023      	str	r3, [r4, #0]
 8017922:	6123      	str	r3, [r4, #16]
 8017924:	2301      	movs	r3, #1
 8017926:	6163      	str	r3, [r4, #20]
 8017928:	b003      	add	sp, #12
 801792a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801792c:	ab01      	add	r3, sp, #4
 801792e:	466a      	mov	r2, sp
 8017930:	f7ff ffc8 	bl	80178c4 <__swhatbuf_r>
 8017934:	9f00      	ldr	r7, [sp, #0]
 8017936:	4605      	mov	r5, r0
 8017938:	4639      	mov	r1, r7
 801793a:	4630      	mov	r0, r6
 801793c:	f7fe fe42 	bl	80165c4 <_malloc_r>
 8017940:	b948      	cbnz	r0, 8017956 <__smakebuf_r+0x46>
 8017942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017946:	059a      	lsls	r2, r3, #22
 8017948:	d4ee      	bmi.n	8017928 <__smakebuf_r+0x18>
 801794a:	f023 0303 	bic.w	r3, r3, #3
 801794e:	f043 0302 	orr.w	r3, r3, #2
 8017952:	81a3      	strh	r3, [r4, #12]
 8017954:	e7e2      	b.n	801791c <__smakebuf_r+0xc>
 8017956:	89a3      	ldrh	r3, [r4, #12]
 8017958:	6020      	str	r0, [r4, #0]
 801795a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801795e:	81a3      	strh	r3, [r4, #12]
 8017960:	9b01      	ldr	r3, [sp, #4]
 8017962:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017966:	b15b      	cbz	r3, 8017980 <__smakebuf_r+0x70>
 8017968:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801796c:	4630      	mov	r0, r6
 801796e:	f000 f837 	bl	80179e0 <_isatty_r>
 8017972:	b128      	cbz	r0, 8017980 <__smakebuf_r+0x70>
 8017974:	89a3      	ldrh	r3, [r4, #12]
 8017976:	f023 0303 	bic.w	r3, r3, #3
 801797a:	f043 0301 	orr.w	r3, r3, #1
 801797e:	81a3      	strh	r3, [r4, #12]
 8017980:	89a3      	ldrh	r3, [r4, #12]
 8017982:	431d      	orrs	r5, r3
 8017984:	81a5      	strh	r5, [r4, #12]
 8017986:	e7cf      	b.n	8017928 <__smakebuf_r+0x18>

08017988 <memmove>:
 8017988:	4288      	cmp	r0, r1
 801798a:	b510      	push	{r4, lr}
 801798c:	eb01 0402 	add.w	r4, r1, r2
 8017990:	d902      	bls.n	8017998 <memmove+0x10>
 8017992:	4284      	cmp	r4, r0
 8017994:	4623      	mov	r3, r4
 8017996:	d807      	bhi.n	80179a8 <memmove+0x20>
 8017998:	1e43      	subs	r3, r0, #1
 801799a:	42a1      	cmp	r1, r4
 801799c:	d008      	beq.n	80179b0 <memmove+0x28>
 801799e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80179a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80179a6:	e7f8      	b.n	801799a <memmove+0x12>
 80179a8:	4402      	add	r2, r0
 80179aa:	4601      	mov	r1, r0
 80179ac:	428a      	cmp	r2, r1
 80179ae:	d100      	bne.n	80179b2 <memmove+0x2a>
 80179b0:	bd10      	pop	{r4, pc}
 80179b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80179b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80179ba:	e7f7      	b.n	80179ac <memmove+0x24>

080179bc <_fstat_r>:
 80179bc:	b538      	push	{r3, r4, r5, lr}
 80179be:	4d07      	ldr	r5, [pc, #28]	@ (80179dc <_fstat_r+0x20>)
 80179c0:	2300      	movs	r3, #0
 80179c2:	4604      	mov	r4, r0
 80179c4:	4608      	mov	r0, r1
 80179c6:	4611      	mov	r1, r2
 80179c8:	602b      	str	r3, [r5, #0]
 80179ca:	f7e9 fd11 	bl	80013f0 <_fstat>
 80179ce:	1c43      	adds	r3, r0, #1
 80179d0:	d102      	bne.n	80179d8 <_fstat_r+0x1c>
 80179d2:	682b      	ldr	r3, [r5, #0]
 80179d4:	b103      	cbz	r3, 80179d8 <_fstat_r+0x1c>
 80179d6:	6023      	str	r3, [r4, #0]
 80179d8:	bd38      	pop	{r3, r4, r5, pc}
 80179da:	bf00      	nop
 80179dc:	240055a4 	.word	0x240055a4

080179e0 <_isatty_r>:
 80179e0:	b538      	push	{r3, r4, r5, lr}
 80179e2:	4d06      	ldr	r5, [pc, #24]	@ (80179fc <_isatty_r+0x1c>)
 80179e4:	2300      	movs	r3, #0
 80179e6:	4604      	mov	r4, r0
 80179e8:	4608      	mov	r0, r1
 80179ea:	602b      	str	r3, [r5, #0]
 80179ec:	f7e9 fc6e 	bl	80012cc <_isatty>
 80179f0:	1c43      	adds	r3, r0, #1
 80179f2:	d102      	bne.n	80179fa <_isatty_r+0x1a>
 80179f4:	682b      	ldr	r3, [r5, #0]
 80179f6:	b103      	cbz	r3, 80179fa <_isatty_r+0x1a>
 80179f8:	6023      	str	r3, [r4, #0]
 80179fa:	bd38      	pop	{r3, r4, r5, pc}
 80179fc:	240055a4 	.word	0x240055a4

08017a00 <_realloc_r>:
 8017a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a04:	4607      	mov	r7, r0
 8017a06:	4614      	mov	r4, r2
 8017a08:	460d      	mov	r5, r1
 8017a0a:	b921      	cbnz	r1, 8017a16 <_realloc_r+0x16>
 8017a0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a10:	4611      	mov	r1, r2
 8017a12:	f7fe bdd7 	b.w	80165c4 <_malloc_r>
 8017a16:	b92a      	cbnz	r2, 8017a24 <_realloc_r+0x24>
 8017a18:	f7ff fa38 	bl	8016e8c <_free_r>
 8017a1c:	4625      	mov	r5, r4
 8017a1e:	4628      	mov	r0, r5
 8017a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a24:	f000 f81a 	bl	8017a5c <_malloc_usable_size_r>
 8017a28:	4284      	cmp	r4, r0
 8017a2a:	4606      	mov	r6, r0
 8017a2c:	d802      	bhi.n	8017a34 <_realloc_r+0x34>
 8017a2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017a32:	d8f4      	bhi.n	8017a1e <_realloc_r+0x1e>
 8017a34:	4621      	mov	r1, r4
 8017a36:	4638      	mov	r0, r7
 8017a38:	f7fe fdc4 	bl	80165c4 <_malloc_r>
 8017a3c:	4680      	mov	r8, r0
 8017a3e:	b908      	cbnz	r0, 8017a44 <_realloc_r+0x44>
 8017a40:	4645      	mov	r5, r8
 8017a42:	e7ec      	b.n	8017a1e <_realloc_r+0x1e>
 8017a44:	42b4      	cmp	r4, r6
 8017a46:	4622      	mov	r2, r4
 8017a48:	4629      	mov	r1, r5
 8017a4a:	bf28      	it	cs
 8017a4c:	4632      	movcs	r2, r6
 8017a4e:	f7ff fa0e 	bl	8016e6e <memcpy>
 8017a52:	4629      	mov	r1, r5
 8017a54:	4638      	mov	r0, r7
 8017a56:	f7ff fa19 	bl	8016e8c <_free_r>
 8017a5a:	e7f1      	b.n	8017a40 <_realloc_r+0x40>

08017a5c <_malloc_usable_size_r>:
 8017a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a60:	1f18      	subs	r0, r3, #4
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	bfbc      	itt	lt
 8017a66:	580b      	ldrlt	r3, [r1, r0]
 8017a68:	18c0      	addlt	r0, r0, r3
 8017a6a:	4770      	bx	lr

08017a6c <_init>:
 8017a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a6e:	bf00      	nop
 8017a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a72:	bc08      	pop	{r3}
 8017a74:	469e      	mov	lr, r3
 8017a76:	4770      	bx	lr

08017a78 <_fini>:
 8017a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a7a:	bf00      	nop
 8017a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a7e:	bc08      	pop	{r3}
 8017a80:	469e      	mov	lr, r3
 8017a82:	4770      	bx	lr
