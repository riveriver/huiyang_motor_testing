
huiyang_motor_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017834  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  08017ad4  08017ad4  00018ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017f7c  08017f7c  00018f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08017f84  08017f84  00018f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  08017f8c  08017f8c  00018f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  08017f94  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005540  24000070  08018004  00019070  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  240055b0  08018004  000195b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00019070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038e23  00000000  00000000  0001909e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006c5b  00000000  00000000  00051ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000023b8  00000000  00000000  00058b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001baa  00000000  00000000  0005aed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000dd02  00000000  00000000  0005ca82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030e37  00000000  00000000  0006a784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017ee40  00000000  00000000  0009b5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021a3fb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a014  00000000  00000000  0021a440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000056  00000000  00000000  00224454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017abc 	.word	0x08017abc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	08017abc 	.word	0x08017abc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <_ZL10MPU_Configv>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void MPU_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80006ce:	f003 fcc7 	bl	8004060 <HAL_MPU_Disable>

  /* Configure the MPU attributes for the QSPI 256MB without instruction access */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 80006d2:	2301      	movs	r3, #1
 80006d4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 80006da:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 80006de:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_256MB;
 80006e0:	231b      	movs	r3, #27
 80006e2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80006e4:	2300      	movs	r3, #0
 80006e6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_NOT_BUFFERABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_NOT_CACHEABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_DISABLE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80006fc:	2300      	movs	r3, #0
 80006fe:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000700:	463b      	mov	r3, r7
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fce4 	bl	80040d0 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes for the QSPI 8MB (QSPI Flash Size) to Cacheable WT */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000708:	2301      	movs	r3, #1
 800070a:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER1;
 800070c:	2301      	movs	r3, #1
 800070e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 8000710:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8000714:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_8MB;
 8000716:	2316      	movs	r3, #22
 8000718:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
 800071a:	2305      	movs	r3, #5
 800071c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 800071e:	2301      	movs	r3, #1
 8000720:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 8000722:	2301      	movs	r3, #1
 8000724:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 800072e:	2301      	movs	r3, #1
 8000730:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000732:	2300      	movs	r3, #0
 8000734:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000736:	463b      	mov	r3, r7
 8000738:	4618      	mov	r0, r3
 800073a:	f003 fcc9 	bl	80040d0 <HAL_MPU_ConfigRegion>

  /* Setup AXI SRAM in Cacheable WB */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 800073e:	2301      	movs	r3, #1
 8000740:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress      = D1_AXISRAM_BASE;
 8000742:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000746:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_512KB;
 8000748:	2312      	movs	r3, #18
 800074a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800074c:	2303      	movs	r3, #3
 800074e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 8000750:	2301      	movs	r3, #1
 8000752:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 8000754:	2301      	movs	r3, #1
 8000756:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_SHAREABLE;
 8000758:	2301      	movs	r3, #1
 800075a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER2;
 800075c:	2302      	movs	r3, #2
 800075e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 8000760:	2301      	movs	r3, #1
 8000762:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000764:	2300      	movs	r3, #0
 8000766:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	733b      	strb	r3, [r7, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800076c:	463b      	mov	r3, r7
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fcae 	bl	80040d0 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000774:	2004      	movs	r0, #4
 8000776:	f003 fc8b 	bl	8004090 <HAL_MPU_Enable>
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <_ZL16CPU_CACHE_Enablev>:

static void CPU_CACHE_Enable(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800078a:	4b3e      	ldr	r3, [pc, #248]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000792:	2b00      	cmp	r3, #0
 8000794:	bf14      	ite	ne
 8000796:	2301      	movne	r3, #1
 8000798:	2300      	moveq	r3, #0
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d11b      	bne.n	80007d8 <_ZL16CPU_CACHE_Enablev+0x54>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007a0:	f3bf 8f4f 	dsb	sy
}
 80007a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007a6:	f3bf 8f6f 	isb	sy
}
 80007aa:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007ac:	4b35      	ldr	r3, [pc, #212]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007b4:	f3bf 8f4f 	dsb	sy
}
 80007b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007ba:	f3bf 8f6f 	isb	sy
}
 80007be:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007c0:	4b30      	ldr	r3, [pc, #192]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	4a2f      	ldr	r2, [pc, #188]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007cc:	f3bf 8f4f 	dsb	sy
}
 80007d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007d2:	f3bf 8f6f 	isb	sy
}
 80007d6:	e000      	b.n	80007da <_ZL16CPU_CACHE_Enablev+0x56>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007d8:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007da:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	bf14      	ite	ne
 80007e6:	2301      	movne	r3, #1
 80007e8:	2300      	moveq	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d142      	bne.n	8000876 <_ZL16CPU_CACHE_Enablev+0xf2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80007f0:	4b24      	ldr	r3, [pc, #144]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007f8:	f3bf 8f4f 	dsb	sy
}
 80007fc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 8000800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000804:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	0b5b      	lsrs	r3, r3, #13
 800080a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800080e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	08db      	lsrs	r3, r3, #3
 8000814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000818:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	015a      	lsls	r2, r3, #5
 800081e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000822:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000828:	4916      	ldr	r1, [pc, #88]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 800082a:	4313      	orrs	r3, r2
 800082c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	1e5a      	subs	r2, r3, #1
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	bf14      	ite	ne
 800083a:	2301      	movne	r3, #1
 800083c:	2300      	moveq	r3, #0
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1ea      	bne.n	800081a <_ZL16CPU_CACHE_Enablev+0x96>
    } while(sets-- != 0U);
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	1e5a      	subs	r2, r3, #1
 8000848:	60ba      	str	r2, [r7, #8]
 800084a:	2b00      	cmp	r3, #0
 800084c:	bf14      	ite	ne
 800084e:	2301      	movne	r3, #1
 8000850:	2300      	moveq	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1db      	bne.n	8000810 <_ZL16CPU_CACHE_Enablev+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000858:	f3bf 8f4f 	dsb	sy
}
 800085c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4a08      	ldr	r2, [pc, #32]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 8000864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000868:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800086a:	f3bf 8f4f 	dsb	sy
}
 800086e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000870:	f3bf 8f6f 	isb	sy
}
 8000874:	e000      	b.n	8000878 <_ZL16CPU_CACHE_Enablev+0xf4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000876:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <_Z9init_filev>:
    "hello word\r\n";
uint16_t file_memory=0;
uint32_t lastWriteTime = 0;     /* 上次写入时间 */
char timeStr[256];               /* 时间字符串缓冲区 */

void init_file(){
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  // mount SD card
  f_res = f_mount(&fs, "0:", 1);
 800088c:	2201      	movs	r2, #1
 800088e:	491e      	ldr	r1, [pc, #120]	@ (8000908 <_Z9init_filev+0x80>)
 8000890:	481e      	ldr	r0, [pc, #120]	@ (800090c <_Z9init_filev+0x84>)
 8000892:	f010 fac9 	bl	8010e28 <f_mount>
 8000896:	4603      	mov	r3, r0
 8000898:	461a      	mov	r2, r3
 800089a:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <_Z9init_filev+0x88>)
 800089c:	701a      	strb	r2, [r3, #0]
	if(f_res != FR_OK){
 800089e:	4b1c      	ldr	r3, [pc, #112]	@ (8000910 <_Z9init_filev+0x88>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d006      	beq.n	80008b4 <_Z9init_filev+0x2c>
    printf("f_mount error: %d\r\n", f_res);
 80008a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <_Z9init_filev+0x88>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	4619      	mov	r1, r3
 80008ac:	4819      	ldr	r0, [pc, #100]	@ (8000914 <_Z9init_filev+0x8c>)
 80008ae:	f015 ffff 	bl	80168b0 <iprintf>
    return;
 80008b2:	e027      	b.n	8000904 <_Z9init_filev+0x7c>
  }
	printf("sd mount ok\r\n");
 80008b4:	4818      	ldr	r0, [pc, #96]	@ (8000918 <_Z9init_filev+0x90>)
 80008b6:	f016 f863 	bl	8016980 <puts>

  // open or create file
	f_res = f_open(&file, "testing.csv", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 80008ba:	2213      	movs	r2, #19
 80008bc:	4917      	ldr	r1, [pc, #92]	@ (800091c <_Z9init_filev+0x94>)
 80008be:	4818      	ldr	r0, [pc, #96]	@ (8000920 <_Z9init_filev+0x98>)
 80008c0:	f010 fb16 	bl	8010ef0 <f_open>
 80008c4:	4603      	mov	r3, r0
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <_Z9init_filev+0x88>)
 80008ca:	701a      	strb	r2, [r3, #0]
	if(f_res != FR_OK){
 80008cc:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <_Z9init_filev+0x88>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d006      	beq.n	80008e2 <_Z9init_filev+0x5a>
    printf("f_open error: %d\r\n", f_res);
 80008d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <_Z9init_filev+0x88>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	4812      	ldr	r0, [pc, #72]	@ (8000924 <_Z9init_filev+0x9c>)
 80008dc:	f015 ffe8 	bl	80168b0 <iprintf>
    return;
 80008e0:	e010      	b.n	8000904 <_Z9init_filev+0x7c>
  }
  printf("testing.csv open ok\r\n");
 80008e2:	4811      	ldr	r0, [pc, #68]	@ (8000928 <_Z9init_filev+0xa0>)
 80008e4:	f016 f84c 	bl	8016980 <puts>
  f_lseek(&file, f_size(&file));
 80008e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <_Z9init_filev+0x98>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	4619      	mov	r1, r3
 80008ee:	480c      	ldr	r0, [pc, #48]	@ (8000920 <_Z9init_filev+0x98>)
 80008f0:	f010 feec 	bl	80116cc <f_lseek>
  if(f_size(&file) == 0) {
 80008f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <_Z9init_filev+0x98>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d103      	bne.n	8000904 <_Z9init_filev+0x7c>
    f_printf(&file, "Time(hh:mm:ss:msms)\r\n");
 80008fc:	490b      	ldr	r1, [pc, #44]	@ (800092c <_Z9init_filev+0xa4>)
 80008fe:	4808      	ldr	r0, [pc, #32]	@ (8000920 <_Z9init_filev+0x98>)
 8000900:	f011 f9ae 	bl	8011c60 <f_printf>
  }
}
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	08017ae8 	.word	0x08017ae8
 800090c:	24000288 	.word	0x24000288
 8000910:	240006ec 	.word	0x240006ec
 8000914:	08017aec 	.word	0x08017aec
 8000918:	08017b00 	.word	0x08017b00
 800091c:	08017b10 	.word	0x08017b10
 8000920:	240004bc 	.word	0x240004bc
 8000924:	08017b1c 	.word	0x08017b1c
 8000928:	08017b30 	.word	0x08017b30
 800092c:	08017b48 	.word	0x08017b48

08000930 <_ZNK21ModbusAbsoluteEncoder13isInitializedEv>:
    explicit ModbusAbsoluteEncoder(TIM_HandleTypeDef *htim = nullptr, uint8_t unit_id = 1);
    virtual ~ModbusAbsoluteEncoder() = default;
    // Initialization
    void init();

    bool isInitialized() const{return encoder_initialized;};
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <_Z19angleUpdateCallbackm>:

Encoder485 encoder485(&htim3, 1, &huart2);
EventGroupHandle_t encoderEventGroup = NULL; // 事件组用于编码器任务同步
#define ENCODER_TICK_EVENT_BIT (1 << 0)
uint32_t oid_encoder = 0;
void angleUpdateCallback(uint32_t position){
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  oid_encoder = position;
 8000954:	4a04      	ldr	r2, [pc, #16]	@ (8000968 <_Z19angleUpdateCallbackm+0x1c>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6013      	str	r3, [r2, #0]
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	240009b8 	.word	0x240009b8

0800096c <_ZL8init_keyv>:
} KEY_State_TypeDef;

static KEY_State_TypeDef keyState = {0};

static void init_key(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <_ZL8init_keyv+0x54>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000978:	4a11      	ldr	r2, [pc, #68]	@ (80009c0 <_ZL8init_keyv+0x54>)
 800097a:	f043 0304 	orr.w	r3, r3, #4
 800097e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000982:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <_ZL8init_keyv+0x54>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800099e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009a8:	2302      	movs	r3, #2
 80009aa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	4619      	mov	r1, r3
 80009b0:	4804      	ldr	r0, [pc, #16]	@ (80009c4 <_ZL8init_keyv+0x58>)
 80009b2:	f004 f935 	bl	8004c20 <HAL_GPIO_Init>
}
 80009b6:	bf00      	nop
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	58024400 	.word	0x58024400
 80009c4:	58020800 	.word	0x58020800

080009c8 <_ZL8scan_keyv>:

// 按键消抖检测
static void scan_key(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
    keyState.current = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80009cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d0:	4824      	ldr	r0, [pc, #144]	@ (8000a64 <_ZL8scan_keyv+0x9c>)
 80009d2:	f004 fad5 	bl	8004f80 <HAL_GPIO_ReadPin>
 80009d6:	4603      	mov	r3, r0
 80009d8:	461a      	mov	r2, r3
 80009da:	4b23      	ldr	r3, [pc, #140]	@ (8000a68 <_ZL8scan_keyv+0xa0>)
 80009dc:	701a      	strb	r2, [r3, #0]
    
    if(keyState.current != keyState.last)
 80009de:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <_ZL8scan_keyv+0xa0>)
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	4b21      	ldr	r3, [pc, #132]	@ (8000a68 <_ZL8scan_keyv+0xa0>)
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d004      	beq.n	80009f4 <_ZL8scan_keyv+0x2c>
    {
        keyState.debounceTime = osKernelGetTickCount();
 80009ea:	f011 fca9 	bl	8012340 <osKernelGetTickCount>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a68 <_ZL8scan_keyv+0xa0>)
 80009f2:	6053      	str	r3, [r2, #4]
    }
    
    if(osKernelGetTickCount() - keyState.debounceTime >= 20)  // 20ms消抖
 80009f4:	f011 fca4 	bl	8012340 <osKernelGetTickCount>
 80009f8:	4602      	mov	r2, r0
 80009fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000a68 <_ZL8scan_keyv+0xa0>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	2b13      	cmp	r3, #19
 8000a02:	bf8c      	ite	hi
 8000a04:	2301      	movhi	r3, #1
 8000a06:	2300      	movls	r3, #0
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d024      	beq.n	8000a58 <_ZL8scan_keyv+0x90>
    {
        if(keyState.current != keyState.debounceState)
 8000a0e:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <_ZL8scan_keyv+0xa0>)
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <_ZL8scan_keyv+0xa0>)
 8000a14:	789b      	ldrb	r3, [r3, #2]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d01e      	beq.n	8000a58 <_ZL8scan_keyv+0x90>
        {
            if(keyState.current == GPIO_PIN_SET)  // 按键按下（高电平有效）
 8000a1a:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <_ZL8scan_keyv+0xa0>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d116      	bne.n	8000a50 <_ZL8scan_keyv+0x88>
            {
                keyState.pressed = 1;
 8000a22:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <_ZL8scan_keyv+0xa0>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	721a      	strb	r2, [r3, #8]
                #ifdef USE_SD_LOG
                g_isRecording = !g_isRecording;  // 切换记录状态
 8000a28:	4b10      	ldr	r3, [pc, #64]	@ (8000a6c <_ZL8scan_keyv+0xa4>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	f083 0301 	eor.w	r3, r3, #1
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <_ZL8scan_keyv+0xa4>)
 8000a36:	701a      	strb	r2, [r3, #0]
                printf("Data Recording: %s\r\n", g_isRecording ? "Started" : "Stopped");
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <_ZL8scan_keyv+0xa4>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <_ZL8scan_keyv+0x7e>
 8000a42:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <_ZL8scan_keyv+0xa8>)
 8000a44:	e000      	b.n	8000a48 <_ZL8scan_keyv+0x80>
 8000a46:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <_ZL8scan_keyv+0xac>)
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480b      	ldr	r0, [pc, #44]	@ (8000a78 <_ZL8scan_keyv+0xb0>)
 8000a4c:	f015 ff30 	bl	80168b0 <iprintf>
                #endif
            }
            keyState.debounceState = keyState.current;
 8000a50:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <_ZL8scan_keyv+0xa0>)
 8000a52:	781a      	ldrb	r2, [r3, #0]
 8000a54:	4b04      	ldr	r3, [pc, #16]	@ (8000a68 <_ZL8scan_keyv+0xa0>)
 8000a56:	709a      	strb	r2, [r3, #2]
        }
    }
    
    keyState.last = keyState.current;
 8000a58:	4b03      	ldr	r3, [pc, #12]	@ (8000a68 <_ZL8scan_keyv+0xa0>)
 8000a5a:	781a      	ldrb	r2, [r3, #0]
 8000a5c:	4b02      	ldr	r3, [pc, #8]	@ (8000a68 <_ZL8scan_keyv+0xa0>)
 8000a5e:	705a      	strb	r2, [r3, #1]
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	58020800 	.word	0x58020800
 8000a68:	240009bc 	.word	0x240009bc
 8000a6c:	24000284 	.word	0x24000284
 8000a70:	08017b60 	.word	0x08017b60
 8000a74:	08017b68 	.word	0x08017b68
 8000a78:	08017b70 	.word	0x08017b70

08000a7c <_Z16StartDefaultTaskPv>:

void StartDefaultTask(void *argument)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b090      	sub	sp, #64	@ 0x40
 8000a80:	af04      	add	r7, sp, #16
 8000a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

#ifdef USE_SD_LOG
  MX_FATFS_Init();
 8000a84:	f00e fa3a 	bl	800eefc <MX_FATFS_Init>
  init_file();
 8000a88:	f7ff fefe 	bl	8000888 <_Z9init_filev>
#endif

#ifdef USE_MOBUSRTU_ENCODER
  encoder485.setAngleUpdateCallback(angleUpdateCallback);
 8000a8c:	4962      	ldr	r1, [pc, #392]	@ (8000c18 <_Z16StartDefaultTaskPv+0x19c>)
 8000a8e:	4863      	ldr	r0, [pc, #396]	@ (8000c1c <_Z16StartDefaultTaskPv+0x1a0>)
 8000a90:	f002 ff50 	bl	8003934 <_ZN21ModbusAbsoluteEncoder22setAngleUpdateCallbackEPFvmE>
  // 初始化编码器
  while(!encoder485.isInitialized()){
 8000a94:	e012      	b.n	8000abc <_Z16StartDefaultTaskPv+0x40>
    encoder485.init();
 8000a96:	4861      	ldr	r0, [pc, #388]	@ (8000c1c <_Z16StartDefaultTaskPv+0x1a0>)
 8000a98:	f001 f838 	bl	8001b0c <_ZN10Encoder4854initEv>
    if(!encoder485.isInitialized()){
 8000a9c:	485f      	ldr	r0, [pc, #380]	@ (8000c1c <_Z16StartDefaultTaskPv+0x1a0>)
 8000a9e:	f7ff ff47 	bl	8000930 <_ZNK21ModbusAbsoluteEncoder13isInitializedEv>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f083 0301 	eor.w	r3, r3, #1
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d006      	beq.n	8000abc <_Z16StartDefaultTaskPv+0x40>
      printf("Encoder initialization failed, retrying in 10s...");
 8000aae:	485c      	ldr	r0, [pc, #368]	@ (8000c20 <_Z16StartDefaultTaskPv+0x1a4>)
 8000ab0:	f015 fefe 	bl	80168b0 <iprintf>
      osDelay(10000);
 8000ab4:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000ab8:	f011 fcf4 	bl	80124a4 <osDelay>
  while(!encoder485.isInitialized()){
 8000abc:	4857      	ldr	r0, [pc, #348]	@ (8000c1c <_Z16StartDefaultTaskPv+0x1a0>)
 8000abe:	f7ff ff37 	bl	8000930 <_ZNK21ModbusAbsoluteEncoder13isInitializedEv>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	f083 0301 	eor.w	r3, r3, #1
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1e3      	bne.n	8000a96 <_Z16StartDefaultTaskPv+0x1a>
    }
  }
  // 创建事件组（若尚未创建）
  if(encoderEventGroup == NULL){
 8000ace:	4b55      	ldr	r3, [pc, #340]	@ (8000c24 <_Z16StartDefaultTaskPv+0x1a8>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d104      	bne.n	8000ae0 <_Z16StartDefaultTaskPv+0x64>
      encoderEventGroup = xEventGroupCreate();
 8000ad6:	f011 ffa9 	bl	8012a2c <xEventGroupCreate>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4a51      	ldr	r2, [pc, #324]	@ (8000c24 <_Z16StartDefaultTaskPv+0x1a8>)
 8000ade:	6013      	str	r3, [r2, #0]
  }
  // 400-->53Hz;250-->53Hz;60-->30Hz;10-->5Hz;
  encoder485.startAsyncReading(10);
 8000ae0:	210a      	movs	r1, #10
 8000ae2:	484e      	ldr	r0, [pc, #312]	@ (8000c1c <_Z16StartDefaultTaskPv+0x1a0>)
 8000ae4:	f002 fdbc 	bl	8003660 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm>
  printf("Encoder task ready, waiting for TIM3 notifications...\r\n");
 8000ae8:	484f      	ldr	r0, [pc, #316]	@ (8000c28 <_Z16StartDefaultTaskPv+0x1ac>)
 8000aea:	f015 ff49 	bl	8016980 <puts>
#endif

  printf("Default task started...\r\n");
 8000aee:	484f      	ldr	r0, [pc, #316]	@ (8000c2c <_Z16StartDefaultTaskPv+0x1b0>)
 8000af0:	f015 ff46 	bl	8016980 <puts>

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000af4:	2001      	movs	r0, #1
 8000af6:	f011 fcd5 	bl	80124a4 <osDelay>
	  uint32_t currentTime = osKernelGetTickCount();
 8000afa:	f011 fc21 	bl	8012340 <osKernelGetTickCount>
 8000afe:	62f8      	str	r0, [r7, #44]	@ 0x2c

#ifdef USE_MOBUSRTU_ENCODER
    xEventGroupWaitBits(encoderEventGroup, ENCODER_TICK_EVENT_BIT, pdTRUE, pdFALSE, portMAX_DELAY);
 8000b00:	4b48      	ldr	r3, [pc, #288]	@ (8000c24 <_Z16StartDefaultTaskPv+0x1a8>)
 8000b02:	6818      	ldr	r0, [r3, #0]
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2101      	movs	r1, #1
 8000b10:	f011 ffa6 	bl	8012a60 <xEventGroupWaitBits>
    encoder485.asyncUpdateCallback();
 8000b14:	4841      	ldr	r0, [pc, #260]	@ (8000c1c <_Z16StartDefaultTaskPv+0x1a0>)
 8000b16:	f002 fe8b 	bl	8003830 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv>
    // printf("oid_encoder: %lu\n", oid_encoder);
#endif
    
#ifdef USE_SD_LOG
     if(g_isRecording) {  // 只在记录状态为true时写入数据
 8000b1a:	4b45      	ldr	r3, [pc, #276]	@ (8000c30 <_Z16StartDefaultTaskPv+0x1b4>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d05d      	beq.n	8000be0 <_Z16StartDefaultTaskPv+0x164>
       uint32_t totalMs = currentTime;
 8000b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b26:	62bb      	str	r3, [r7, #40]	@ 0x28
       uint32_t ms = totalMs % 1000;
 8000b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b2a:	4a42      	ldr	r2, [pc, #264]	@ (8000c34 <_Z16StartDefaultTaskPv+0x1b8>)
 8000b2c:	fba2 1203 	umull	r1, r2, r2, r3
 8000b30:	0992      	lsrs	r2, r2, #6
 8000b32:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b36:	fb01 f202 	mul.w	r2, r1, r2
 8000b3a:	1a9b      	subs	r3, r3, r2
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
       uint32_t totalSec = totalMs / 1000;
 8000b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b40:	4a3c      	ldr	r2, [pc, #240]	@ (8000c34 <_Z16StartDefaultTaskPv+0x1b8>)
 8000b42:	fba2 2303 	umull	r2, r3, r2, r3
 8000b46:	099b      	lsrs	r3, r3, #6
 8000b48:	623b      	str	r3, [r7, #32]
       uint32_t sec = totalSec % 60;
 8000b4a:	6a3a      	ldr	r2, [r7, #32]
 8000b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c38 <_Z16StartDefaultTaskPv+0x1bc>)
 8000b4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b52:	0959      	lsrs	r1, r3, #5
 8000b54:	460b      	mov	r3, r1
 8000b56:	011b      	lsls	r3, r3, #4
 8000b58:	1a5b      	subs	r3, r3, r1
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	61fb      	str	r3, [r7, #28]
       uint32_t totalMin = totalSec / 60;
 8000b60:	6a3b      	ldr	r3, [r7, #32]
 8000b62:	4a35      	ldr	r2, [pc, #212]	@ (8000c38 <_Z16StartDefaultTaskPv+0x1bc>)
 8000b64:	fba2 2303 	umull	r2, r3, r2, r3
 8000b68:	095b      	lsrs	r3, r3, #5
 8000b6a:	61bb      	str	r3, [r7, #24]
       uint32_t min = totalMin % 60;
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	4b32      	ldr	r3, [pc, #200]	@ (8000c38 <_Z16StartDefaultTaskPv+0x1bc>)
 8000b70:	fba3 1302 	umull	r1, r3, r3, r2
 8000b74:	0959      	lsrs	r1, r3, #5
 8000b76:	460b      	mov	r3, r1
 8000b78:	011b      	lsls	r3, r3, #4
 8000b7a:	1a5b      	subs	r3, r3, r1
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	617b      	str	r3, [r7, #20]
       uint32_t hour = totalMin / 60;
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	4a2c      	ldr	r2, [pc, #176]	@ (8000c38 <_Z16StartDefaultTaskPv+0x1bc>)
 8000b86:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8a:	095b      	lsrs	r3, r3, #5
 8000b8c:	613b      	str	r3, [r7, #16]
       sprintf(timeStr, "%02lu:%02lu:%02lu:%03lu,%lu\r\n", hour, min, sec, ms, oid_encoder);
 8000b8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c3c <_Z16StartDefaultTaskPv+0x1c0>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	9302      	str	r3, [sp, #8]
 8000b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b96:	9301      	str	r3, [sp, #4]
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4927      	ldr	r1, [pc, #156]	@ (8000c40 <_Z16StartDefaultTaskPv+0x1c4>)
 8000ba2:	4828      	ldr	r0, [pc, #160]	@ (8000c44 <_Z16StartDefaultTaskPv+0x1c8>)
 8000ba4:	f015 ffa8 	bl	8016af8 <siprintf>
       if(f_write(&file, timeStr, strlen(timeStr), &fnum) == FR_OK) {
 8000ba8:	4826      	ldr	r0, [pc, #152]	@ (8000c44 <_Z16StartDefaultTaskPv+0x1c8>)
 8000baa:	f7ff fb99 	bl	80002e0 <strlen>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	4b25      	ldr	r3, [pc, #148]	@ (8000c48 <_Z16StartDefaultTaskPv+0x1cc>)
 8000bb2:	4924      	ldr	r1, [pc, #144]	@ (8000c44 <_Z16StartDefaultTaskPv+0x1c8>)
 8000bb4:	4825      	ldr	r0, [pc, #148]	@ (8000c4c <_Z16StartDefaultTaskPv+0x1d0>)
 8000bb6:	f010 fb5c 	bl	8011272 <f_write>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	bf0c      	ite	eq
 8000bc0:	2301      	moveq	r3, #1
 8000bc2:	2300      	movne	r3, #0
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d007      	beq.n	8000bda <_Z16StartDefaultTaskPv+0x15e>
         f_sync(&file);
 8000bca:	4820      	ldr	r0, [pc, #128]	@ (8000c4c <_Z16StartDefaultTaskPv+0x1d0>)
 8000bcc:	f010 fcf5 	bl	80115ba <f_sync>
         printf("write: %s", timeStr);
 8000bd0:	491c      	ldr	r1, [pc, #112]	@ (8000c44 <_Z16StartDefaultTaskPv+0x1c8>)
 8000bd2:	481f      	ldr	r0, [pc, #124]	@ (8000c50 <_Z16StartDefaultTaskPv+0x1d4>)
 8000bd4:	f015 fe6c 	bl	80168b0 <iprintf>
 8000bd8:	e002      	b.n	8000be0 <_Z16StartDefaultTaskPv+0x164>
       }
       else {
         printf("write failed\r\n");
 8000bda:	481e      	ldr	r0, [pc, #120]	@ (8000c54 <_Z16StartDefaultTaskPv+0x1d8>)
 8000bdc:	f015 fed0 	bl	8016980 <puts>
     }
#endif

#ifdef USE_HEARTBEAT_LED
   static uint32_t led_flash_time = 0;
   uint32_t flash_interval = g_isRecording ? 333 : 1000;  // 开启记录时3Hz(333ms)，否则1Hz
 8000be0:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <_Z16StartDefaultTaskPv+0x1b4>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <_Z16StartDefaultTaskPv+0x174>
 8000bea:	f240 134d 	movw	r3, #333	@ 0x14d
 8000bee:	e001      	b.n	8000bf4 <_Z16StartDefaultTaskPv+0x178>
 8000bf0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bf4:	60fb      	str	r3, [r7, #12]
   if(currentTime - led_flash_time >= flash_interval)
 8000bf6:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <_Z16StartDefaultTaskPv+0x1dc>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	f63f af77 	bhi.w	8000af4 <_Z16StartDefaultTaskPv+0x78>
   {
      HAL_GPIO_TogglePin(PE3_GPIO_Port, PE3_Pin);
 8000c06:	2108      	movs	r1, #8
 8000c08:	4814      	ldr	r0, [pc, #80]	@ (8000c5c <_Z16StartDefaultTaskPv+0x1e0>)
 8000c0a:	f004 f9ea 	bl	8004fe2 <HAL_GPIO_TogglePin>
      led_flash_time = currentTime;
 8000c0e:	4a12      	ldr	r2, [pc, #72]	@ (8000c58 <_Z16StartDefaultTaskPv+0x1dc>)
 8000c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c12:	6013      	str	r3, [r2, #0]
#ifdef ENABLE_STACK_WATERMARK
   // 获取并打印任务栈最小剩余空间
   UBaseType_t stackHighWaterMark = uxTaskGetStackHighWaterMark(NULL);
   printf("StartDefaultTask Stack Bytes Left: %lu\r\n", stackHighWaterMark * sizeof(StackType_t));
#endif
  }
 8000c14:	e76e      	b.n	8000af4 <_Z16StartDefaultTaskPv+0x78>
 8000c16:	bf00      	nop
 8000c18:	0800094d 	.word	0x0800094d
 8000c1c:	240007f4 	.word	0x240007f4
 8000c20:	08017b88 	.word	0x08017b88
 8000c24:	240009b4 	.word	0x240009b4
 8000c28:	08017bbc 	.word	0x08017bbc
 8000c2c:	08017bf4 	.word	0x08017bf4
 8000c30:	24000284 	.word	0x24000284
 8000c34:	10624dd3 	.word	0x10624dd3
 8000c38:	88888889 	.word	0x88888889
 8000c3c:	240009b8 	.word	0x240009b8
 8000c40:	08017c10 	.word	0x08017c10
 8000c44:	240006f4 	.word	0x240006f4
 8000c48:	240006f0 	.word	0x240006f0
 8000c4c:	240004bc 	.word	0x240004bc
 8000c50:	08017c30 	.word	0x08017c30
 8000c54:	08017c3c 	.word	0x08017c3c
 8000c58:	240009c8 	.word	0x240009c8
 8000c5c:	58021000 	.word	0x58021000

08000c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	#ifdef W25Qxx
	  SCB->VTOR = QSPI_BASE;
		#endif
	MPU_Config();
 8000c64:	f7ff fd2a 	bl	80006bc <_ZL10MPU_Configv>
	CPU_CACHE_Enable();
 8000c68:	f7ff fd8c 	bl	8000784 <_ZL16CPU_CACHE_Enablev>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6c:	f003 f88c 	bl	8003d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c70:	f000 f834 	bl	8000cdc <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c74:	f000 f8bc 	bl	8000df0 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c78:	f000 fa36 	bl	80010e8 <_ZL12MX_GPIO_Initv>
  MX_SDMMC1_SD_Init();
 8000c7c:	f000 f8f0 	bl	8000e60 <_ZL17MX_SDMMC1_SD_Initv>
  MX_USART2_UART_Init();
 8000c80:	f000 f972 	bl	8000f68 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 8000c84:	f000 f9d0 	bl	8001028 <_ZL19MX_USART3_UART_Initv>
  MX_TIM3_Init();
 8000c88:	f000 f908 	bl	8000e9c <_ZL12MX_TIM3_Initv>
  // MX_FATFS_Init();
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 8000c8c:	480c      	ldr	r0, [pc, #48]	@ (8000cc0 <main+0x60>)
 8000c8e:	f000 fb31 	bl	80012f4 <RetargetInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c92:	f011 fae9 	bl	8012268 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c96:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc4 <main+0x64>)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	480b      	ldr	r0, [pc, #44]	@ (8000cc8 <main+0x68>)
 8000c9c:	f011 fb65 	bl	801236a <osThreadNew>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ccc <main+0x6c>)
 8000ca4:	6013      	str	r3, [r2, #0]
  /* creation of keyTask */
  keyTaskHandle = osThreadNew(StartKeyTask, NULL, &keyTask_attributes);
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <main+0x70>)
 8000ca8:	2100      	movs	r1, #0
 8000caa:	480a      	ldr	r0, [pc, #40]	@ (8000cd4 <main+0x74>)
 8000cac:	f011 fb5d 	bl	801236a <osThreadNew>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4a09      	ldr	r2, [pc, #36]	@ (8000cd8 <main+0x78>)
 8000cb4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cb6:	f011 fb1d 	bl	80122f4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cba:	bf00      	nop
 8000cbc:	e7fd      	b.n	8000cba <main+0x5a>
 8000cbe:	bf00      	nop
 8000cc0:	240001e8 	.word	0x240001e8
 8000cc4:	08017d20 	.word	0x08017d20
 8000cc8:	08000a7d 	.word	0x08000a7d
 8000ccc:	2400027c 	.word	0x2400027c
 8000cd0:	08017d44 	.word	0x08017d44
 8000cd4:	080011d5 	.word	0x080011d5
 8000cd8:	24000280 	.word	0x24000280

08000cdc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b09c      	sub	sp, #112	@ 0x70
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce6:	224c      	movs	r2, #76	@ 0x4c
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f015 fffe 	bl	8016cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2220      	movs	r2, #32
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f015 fff8 	bl	8016cec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cfc:	2002      	movs	r0, #2
 8000cfe:	f004 f98b 	bl	8005018 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	4b38      	ldr	r3, [pc, #224]	@ (8000de8 <_Z18SystemClock_Configv+0x10c>)
 8000d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d0a:	4a37      	ldr	r2, [pc, #220]	@ (8000de8 <_Z18SystemClock_Configv+0x10c>)
 8000d0c:	f023 0301 	bic.w	r3, r3, #1
 8000d10:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d12:	4b35      	ldr	r3, [pc, #212]	@ (8000de8 <_Z18SystemClock_Configv+0x10c>)
 8000d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	4b33      	ldr	r3, [pc, #204]	@ (8000dec <_Z18SystemClock_Configv+0x110>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d24:	4a31      	ldr	r2, [pc, #196]	@ (8000dec <_Z18SystemClock_Configv+0x110>)
 8000d26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000dec <_Z18SystemClock_Configv+0x110>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d34:	603b      	str	r3, [r7, #0]
 8000d36:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d38:	bf00      	nop
 8000d3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000dec <_Z18SystemClock_Configv+0x110>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d46:	bf14      	ite	ne
 8000d48:	2301      	movne	r3, #1
 8000d4a:	2300      	moveq	r3, #0
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1f3      	bne.n	8000d3a <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d52:	2301      	movs	r3, #1
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d60:	2302      	movs	r3, #2
 8000d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000d64:	2305      	movs	r3, #5
 8000d66:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000d68:	2360      	movs	r3, #96	@ 0x60
 8000d6a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8000d70:	230a      	movs	r3, #10
 8000d72:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d74:	2302      	movs	r3, #2
 8000d76:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f004 f97f 	bl	800508c <HAL_RCC_OscConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	bf14      	ite	ne
 8000d94:	2301      	movne	r3, #1
 8000d96:	2300      	moveq	r3, #0
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 8000d9e:	f000 fa3b 	bl	8001218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da2:	233f      	movs	r3, #63	@ 0x3f
 8000da4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da6:	2303      	movs	r3, #3
 8000da8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dae:	2308      	movs	r3, #8
 8000db0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f004 fdba 	bl	8005940 <HAL_RCC_ClockConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	bf14      	ite	ne
 8000dd2:	2301      	movne	r3, #1
 8000dd4:	2300      	moveq	r3, #0
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000ddc:	f000 fa1c 	bl	8001218 <Error_Handler>
  }
}
 8000de0:	bf00      	nop
 8000de2:	3770      	adds	r7, #112	@ 0x70
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	58000400 	.word	0x58000400
 8000dec:	58024800 	.word	0x58024800

08000df0 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b0b0      	sub	sp, #192	@ 0xc0
 8000df4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df6:	463b      	mov	r3, r7
 8000df8:	22c0      	movs	r2, #192	@ 0xc0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f015 ff75 	bl	8016cec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USART2
 8000e02:	4a16      	ldr	r2, [pc, #88]	@ (8000e5c <_Z24PeriphCommonClock_Configv+0x6c>)
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000e10:	230c      	movs	r3, #12
 8000e12:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e20:	23c0      	movs	r3, #192	@ 0xc0
 8000e22:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000e24:	2320      	movs	r3, #32
 8000e26:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000e2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e30:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000e32:	2301      	movs	r3, #1
 8000e34:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e36:	463b      	mov	r3, r7
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f005 f94f 	bl	80060dc <HAL_RCCEx_PeriphCLKConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	bf14      	ite	ne
 8000e44:	2301      	movne	r3, #1
 8000e46:	2300      	moveq	r3, #0
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <_Z24PeriphCommonClock_Configv+0x62>
  {
    Error_Handler();
 8000e4e:	f000 f9e3 	bl	8001218 <Error_Handler>
  }
}
 8000e52:	bf00      	nop
 8000e54:	37c0      	adds	r7, #192	@ 0xc0
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	00010002 	.word	0x00010002

08000e60 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e64:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000e66:	4a0c      	ldr	r2, [pc, #48]	@ (8000e98 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8000e68:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e70:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000e76:	4b07      	ldr	r3, [pc, #28]	@ (8000e94 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000e78:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e7c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e7e:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000e84:	4b03      	ldr	r3, [pc, #12]	@ (8000e94 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	2400008c 	.word	0x2400008c
 8000e98:	52007000 	.word	0x52007000

08000e9c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	@ 0x28
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
 8000ebc:	615a      	str	r2, [r3, #20]
 8000ebe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ec0:	4b27      	ldr	r3, [pc, #156]	@ (8000f60 <_ZL12MX_TIM3_Initv+0xc4>)
 8000ec2:	4a28      	ldr	r2, [pc, #160]	@ (8000f64 <_ZL12MX_TIM3_Initv+0xc8>)
 8000ec4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2399;
 8000ec6:	4b26      	ldr	r3, [pc, #152]	@ (8000f60 <_ZL12MX_TIM3_Initv+0xc4>)
 8000ec8:	f640 125f 	movw	r2, #2399	@ 0x95f
 8000ecc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ece:	4b24      	ldr	r3, [pc, #144]	@ (8000f60 <_ZL12MX_TIM3_Initv+0xc4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000ed4:	4b22      	ldr	r3, [pc, #136]	@ (8000f60 <_ZL12MX_TIM3_Initv+0xc4>)
 8000ed6:	2263      	movs	r2, #99	@ 0x63
 8000ed8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eda:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <_ZL12MX_TIM3_Initv+0xc4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f60 <_ZL12MX_TIM3_Initv+0xc4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000ee6:	481e      	ldr	r0, [pc, #120]	@ (8000f60 <_ZL12MX_TIM3_Initv+0xc4>)
 8000ee8:	f009 fb34 	bl	800a554 <HAL_TIM_OC_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	bf14      	ite	ne
 8000ef2:	2301      	movne	r3, #1
 8000ef4:	2300      	moveq	r3, #0
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <_ZL12MX_TIM3_Initv+0x64>
  {
    Error_Handler();
 8000efc:	f000 f98c 	bl	8001218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4814      	ldr	r0, [pc, #80]	@ (8000f60 <_ZL12MX_TIM3_Initv+0xc4>)
 8000f10:	f00a f8a8 	bl	800b064 <HAL_TIMEx_MasterConfigSynchronization>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf14      	ite	ne
 8000f1a:	2301      	movne	r3, #1
 8000f1c:	2300      	moveq	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <_ZL12MX_TIM3_Initv+0x8c>
  {
    Error_Handler();
 8000f24:	f000 f978 	bl	8001218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f38:	463b      	mov	r3, r7
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4808      	ldr	r0, [pc, #32]	@ (8000f60 <_ZL12MX_TIM3_Initv+0xc4>)
 8000f40:	f009 fc7e 	bl	800a840 <HAL_TIM_OC_ConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	bf14      	ite	ne
 8000f4a:	2301      	movne	r3, #1
 8000f4c:	2300      	moveq	r3, #0
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <_ZL12MX_TIM3_Initv+0xbc>
  {
    Error_Handler();
 8000f54:	f000 f960 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	3728      	adds	r7, #40	@ 0x28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	24000108 	.word	0x24000108
 8000f64:	40000400 	.word	0x40000400

08000f68 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001020 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8001024 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000f70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f72:	4b2b      	ldr	r3, [pc, #172]	@ (8001020 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f74:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7a:	4b29      	ldr	r3, [pc, #164]	@ (8001020 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f80:	4b27      	ldr	r3, [pc, #156]	@ (8001020 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f86:	4b26      	ldr	r3, [pc, #152]	@ (8001020 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f8c:	4b24      	ldr	r3, [pc, #144]	@ (8001020 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f8e:	220c      	movs	r2, #12
 8000f90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f92:	4b23      	ldr	r3, [pc, #140]	@ (8001020 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f98:	4b21      	ldr	r3, [pc, #132]	@ (8001020 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f9e:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001020 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000faa:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fb0:	481b      	ldr	r0, [pc, #108]	@ (8001020 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000fb2:	f00a f903 	bl	800b1bc <HAL_UART_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	bf14      	ite	ne
 8000fbc:	2301      	movne	r3, #1
 8000fbe:	2300      	moveq	r3, #0
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8000fc6:	f000 f927 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4814      	ldr	r0, [pc, #80]	@ (8001020 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000fce:	f00d f900 	bl	800e1d2 <HAL_UARTEx_SetTxFifoThreshold>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	bf14      	ite	ne
 8000fd8:	2301      	movne	r3, #1
 8000fda:	2300      	moveq	r3, #0
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8000fe2:	f000 f919 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	480d      	ldr	r0, [pc, #52]	@ (8001020 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000fea:	f00d f930 	bl	800e24e <HAL_UARTEx_SetRxFifoThreshold>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	bf14      	ite	ne
 8000ff4:	2301      	movne	r3, #1
 8000ff6:	2300      	moveq	r3, #0
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8000ffe:	f000 f90b 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001002:	4807      	ldr	r0, [pc, #28]	@ (8001020 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001004:	f00d f8ac 	bl	800e160 <HAL_UARTEx_DisableFifoMode>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	bf14      	ite	ne
 800100e:	2301      	movne	r3, #1
 8001010:	2300      	moveq	r3, #0
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001018:	f000 f8fe 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	24000154 	.word	0x24000154
 8001024:	40004400 	.word	0x40004400

08001028 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800102c:	4b2c      	ldr	r3, [pc, #176]	@ (80010e0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800102e:	4a2d      	ldr	r2, [pc, #180]	@ (80010e4 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8001030:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001032:	4b2b      	ldr	r3, [pc, #172]	@ (80010e0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001034:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001038:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800103a:	4b29      	ldr	r3, [pc, #164]	@ (80010e0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001040:	4b27      	ldr	r3, [pc, #156]	@ (80010e0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001046:	4b26      	ldr	r3, [pc, #152]	@ (80010e0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800104c:	4b24      	ldr	r3, [pc, #144]	@ (80010e0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800104e:	220c      	movs	r2, #12
 8001050:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001052:	4b23      	ldr	r3, [pc, #140]	@ (80010e0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001058:	4b21      	ldr	r3, [pc, #132]	@ (80010e0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800105e:	4b20      	ldr	r3, [pc, #128]	@ (80010e0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001064:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001066:	2200      	movs	r2, #0
 8001068:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800106a:	4b1d      	ldr	r3, [pc, #116]	@ (80010e0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800106c:	2200      	movs	r2, #0
 800106e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001070:	481b      	ldr	r0, [pc, #108]	@ (80010e0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001072:	f00a f8a3 	bl	800b1bc <HAL_UART_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	bf14      	ite	ne
 800107c:	2301      	movne	r3, #1
 800107e:	2300      	moveq	r3, #0
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8001086:	f000 f8c7 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800108a:	2100      	movs	r1, #0
 800108c:	4814      	ldr	r0, [pc, #80]	@ (80010e0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800108e:	f00d f8a0 	bl	800e1d2 <HAL_UARTEx_SetTxFifoThreshold>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	bf14      	ite	ne
 8001098:	2301      	movne	r3, #1
 800109a:	2300      	moveq	r3, #0
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 80010a2:	f000 f8b9 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a6:	2100      	movs	r1, #0
 80010a8:	480d      	ldr	r0, [pc, #52]	@ (80010e0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80010aa:	f00d f8d0 	bl	800e24e <HAL_UARTEx_SetRxFifoThreshold>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	bf14      	ite	ne
 80010b4:	2301      	movne	r3, #1
 80010b6:	2300      	moveq	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 80010be:	f000 f8ab 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010c2:	4807      	ldr	r0, [pc, #28]	@ (80010e0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80010c4:	f00d f84c 	bl	800e160 <HAL_UARTEx_DisableFifoMode>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	bf14      	ite	ne
 80010ce:	2301      	movne	r3, #1
 80010d0:	2300      	moveq	r3, #0
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 80010d8:	f000 f89e 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	240001e8 	.word	0x240001e8
 80010e4:	40004800 	.word	0x40004800

080010e8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010fe:	4b32      	ldr	r3, [pc, #200]	@ (80011c8 <_ZL12MX_GPIO_Initv+0xe0>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001104:	4a30      	ldr	r2, [pc, #192]	@ (80011c8 <_ZL12MX_GPIO_Initv+0xe0>)
 8001106:	f043 0310 	orr.w	r3, r3, #16
 800110a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110e:	4b2e      	ldr	r3, [pc, #184]	@ (80011c8 <_ZL12MX_GPIO_Initv+0xe0>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001114:	f003 0310 	and.w	r3, r3, #16
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111c:	4b2a      	ldr	r3, [pc, #168]	@ (80011c8 <_ZL12MX_GPIO_Initv+0xe0>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001122:	4a29      	ldr	r2, [pc, #164]	@ (80011c8 <_ZL12MX_GPIO_Initv+0xe0>)
 8001124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001128:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800112c:	4b26      	ldr	r3, [pc, #152]	@ (80011c8 <_ZL12MX_GPIO_Initv+0xe0>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800113a:	4b23      	ldr	r3, [pc, #140]	@ (80011c8 <_ZL12MX_GPIO_Initv+0xe0>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001140:	4a21      	ldr	r2, [pc, #132]	@ (80011c8 <_ZL12MX_GPIO_Initv+0xe0>)
 8001142:	f043 0308 	orr.w	r3, r3, #8
 8001146:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800114a:	4b1f      	ldr	r3, [pc, #124]	@ (80011c8 <_ZL12MX_GPIO_Initv+0xe0>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001158:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <_ZL12MX_GPIO_Initv+0xe0>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115e:	4a1a      	ldr	r2, [pc, #104]	@ (80011c8 <_ZL12MX_GPIO_Initv+0xe0>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001168:	4b17      	ldr	r3, [pc, #92]	@ (80011c8 <_ZL12MX_GPIO_Initv+0xe0>)
 800116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	2108      	movs	r1, #8
 800117a:	4814      	ldr	r0, [pc, #80]	@ (80011cc <_ZL12MX_GPIO_Initv+0xe4>)
 800117c:	f003 ff18 	bl	8004fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3_Pin */
  GPIO_InitStruct.Pin = PE3_Pin;
 8001180:	2308      	movs	r3, #8
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001184:	2301      	movs	r3, #1
 8001186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PE3_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	480d      	ldr	r0, [pc, #52]	@ (80011cc <_ZL12MX_GPIO_Initv+0xe4>)
 8001198:	f003 fd42 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800119c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 80011ae:	2306      	movs	r3, #6
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <_ZL12MX_GPIO_Initv+0xe8>)
 80011ba:	f003 fd31 	bl	8004c20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	@ 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	58024400 	.word	0x58024400
 80011cc:	58021000 	.word	0x58021000
 80011d0:	58020000 	.word	0x58020000

080011d4 <_Z12StartKeyTaskPv>:
  */
/* USER CODE END Header_StartDefaultTask */

/* Function implementing the keyTask thread */
void StartKeyTask(void *argument)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Initialization */
  init_key();
 80011dc:	f7ff fbc6 	bl	800096c <_ZL8init_keyv>
  
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80011e0:	2064      	movs	r0, #100	@ 0x64
 80011e2:	f011 f95f 	bl	80124a4 <osDelay>
    uint32_t currentTime = osKernelGetTickCount();
 80011e6:	f011 f8ab 	bl	8012340 <osKernelGetTickCount>
 80011ea:	60f8      	str	r0, [r7, #12]

    scan_key();
 80011ec:	f7ff fbec 	bl	80009c8 <_ZL8scan_keyv>
   // 获取并打印任务栈最小剩余空间
   UBaseType_t stackHighWaterMark = uxTaskGetStackHighWaterMark(NULL);
   printf("StartKeyTask Stack Bytes Left: %lu\r\n", stackHighWaterMark * sizeof(StackType_t));
#endif

  }
 80011f0:	bf00      	nop
 80011f2:	e7f5      	b.n	80011e0 <_Z12StartKeyTaskPv+0xc>

080011f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a04      	ldr	r2, [pc, #16]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d101      	bne.n	800120a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001206:	f002 fdfb 	bl	8003e00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40001000 	.word	0x40001000

08001218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <Error_Handler+0x4>

08001220 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
Encoder485 encoder485(&htim3, 1, &huart2);
 8001224:	4b03      	ldr	r3, [pc, #12]	@ (8001234 <_Z41__static_initialization_and_destruction_0v+0x14>)
 8001226:	2201      	movs	r2, #1
 8001228:	4903      	ldr	r1, [pc, #12]	@ (8001238 <_Z41__static_initialization_and_destruction_0v+0x18>)
 800122a:	4804      	ldr	r0, [pc, #16]	@ (800123c <_Z41__static_initialization_and_destruction_0v+0x1c>)
 800122c:	f000 fc52 	bl	8001ad4 <_ZN10Encoder485C1EP17TIM_HandleTypeDefhP20__UART_HandleTypeDef>
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	24000154 	.word	0x24000154
 8001238:	24000108 	.word	0x24000108
 800123c:	240007f4 	.word	0x240007f4

08001240 <_ZN21ModbusAbsoluteEncoderD1Ev>:
    virtual ~ModbusAbsoluteEncoder() = default;
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	4a04      	ldr	r2, [pc, #16]	@ (800125c <_ZN21ModbusAbsoluteEncoderD1Ev+0x1c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	08017e30 	.word	0x08017e30

08001260 <_ZN21ModbusAbsoluteEncoderD0Ev>:
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ffe9 	bl	8001240 <_ZN21ModbusAbsoluteEncoderD1Ev>
 800126e:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f015 f998 	bl	80165a8 <_ZdlPvj>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <_ZN10Encoder485D1Ev>:

#include "ModbusAbsoluteEncoder.h"
#include "main.h"
#include <stdint.h>

class Encoder485 : public ModbusAbsoluteEncoder {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	4a05      	ldr	r2, [pc, #20]	@ (80012a4 <_ZN10Encoder485D1Ev+0x20>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ffd3 	bl	8001240 <_ZN21ModbusAbsoluteEncoderD1Ev>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	08017d80 	.word	0x08017d80

080012a8 <_ZN10Encoder485D0Ev>:
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ffe7 	bl	8001284 <_ZN10Encoder485D1Ev>
 80012b6:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f015 f974 	bl	80165a8 <_ZdlPvj>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <_Z41__static_initialization_and_destruction_1v>:
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
Encoder485 encoder485(&htim3, 1, &huart2);
 80012d0:	4802      	ldr	r0, [pc, #8]	@ (80012dc <_Z41__static_initialization_and_destruction_1v+0x10>)
 80012d2:	f7ff ffd7 	bl	8001284 <_ZN10Encoder485D1Ev>
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	240007f4 	.word	0x240007f4

080012e0 <_GLOBAL__sub_I_hsd1>:
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	f7ff ff9c 	bl	8001220 <_Z41__static_initialization_and_destruction_0v>
 80012e8:	bd80      	pop	{r7, pc}

080012ea <_GLOBAL__sub_D_hsd1>:
 80012ea:	b580      	push	{r7, lr}
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	f7ff ffed 	bl	80012cc <_Z41__static_initialization_and_destruction_1v>
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80012fc:	4a07      	ldr	r2, [pc, #28]	@ (800131c <RetargetInit+0x28>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001302:	4b07      	ldr	r3, [pc, #28]	@ (8001320 <RetargetInit+0x2c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6898      	ldr	r0, [r3, #8]
 8001308:	2300      	movs	r3, #0
 800130a:	2202      	movs	r2, #2
 800130c:	2100      	movs	r1, #0
 800130e:	f015 fb3f 	bl	8016990 <setvbuf>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	240009cc 	.word	0x240009cc
 8001320:	24000020 	.word	0x24000020

08001324 <_isatty>:

int _isatty(int fd) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	db04      	blt.n	800133c <_isatty+0x18>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b02      	cmp	r3, #2
 8001336:	dc01      	bgt.n	800133c <_isatty+0x18>
    return 1;
 8001338:	2301      	movs	r3, #1
 800133a:	e005      	b.n	8001348 <_isatty+0x24>

  errno = EBADF;
 800133c:	f015 fd92 	bl	8016e64 <__errno>
 8001340:	4603      	mov	r3, r0
 8001342:	2209      	movs	r2, #9
 8001344:	601a      	str	r2, [r3, #0]
  return 0;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <_write>:

int _write(int fd, char* ptr, int len) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
 HAL_StatusTypeDef hstatus;

 if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d002      	beq.n	8001368 <_write+0x18>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d111      	bne.n	800138c <_write+0x3c>
   hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001368:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <_write+0x54>)
 800136a:	6818      	ldr	r0, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	b29a      	uxth	r2, r3
 8001370:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	f009 ff71 	bl	800b25c <HAL_UART_Transmit>
 800137a:	4603      	mov	r3, r0
 800137c:	75fb      	strb	r3, [r7, #23]
   if (hstatus == HAL_OK)
 800137e:	7dfb      	ldrb	r3, [r7, #23]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <_write+0x38>
     return len;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	e008      	b.n	800139a <_write+0x4a>
   else
     return EIO;
 8001388:	2305      	movs	r3, #5
 800138a:	e006      	b.n	800139a <_write+0x4a>
 }
 errno = EBADF;
 800138c:	f015 fd6a 	bl	8016e64 <__errno>
 8001390:	4603      	mov	r3, r0
 8001392:	2209      	movs	r2, #9
 8001394:	601a      	str	r2, [r3, #0]
 return -1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	240009cc 	.word	0x240009cc

080013a8 <_close>:
//         ITM_SendChar(*ptr++);
//     }
//     return len;
// }

int _close(int fd) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db04      	blt.n	80013c0 <_close+0x18>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	dc01      	bgt.n	80013c0 <_close+0x18>
    return 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	e006      	b.n	80013ce <_close+0x26>

  errno = EBADF;
 80013c0:	f015 fd50 	bl	8016e64 <__errno>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2209      	movs	r2, #9
 80013c8:	601a      	str	r2, [r3, #0]
  return -1;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b084      	sub	sp, #16
 80013da:	af00      	add	r7, sp, #0
 80013dc:	60f8      	str	r0, [r7, #12]
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80013e2:	f015 fd3f 	bl	8016e64 <__errno>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2209      	movs	r2, #9
 80013ea:	601a      	str	r2, [r3, #0]
  return -1;
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <_read>:

int _read(int fd, char* ptr, int len) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d110      	bne.n	800142c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800140a:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <_read+0x4c>)
 800140c:	6818      	ldr	r0, [r3, #0]
 800140e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001412:	2201      	movs	r2, #1
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	f009 ffaf 	bl	800b378 <HAL_UART_Receive>
 800141a:	4603      	mov	r3, r0
 800141c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800141e:	7dfb      	ldrb	r3, [r7, #23]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <_read+0x30>
      return 1;
 8001424:	2301      	movs	r3, #1
 8001426:	e008      	b.n	800143a <_read+0x42>
    else
      return EIO;
 8001428:	2305      	movs	r3, #5
 800142a:	e006      	b.n	800143a <_read+0x42>
  }
  errno = EBADF;
 800142c:	f015 fd1a 	bl	8016e64 <__errno>
 8001430:	4603      	mov	r3, r0
 8001432:	2209      	movs	r2, #9
 8001434:	601a      	str	r2, [r3, #0]
  return -1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	240009cc 	.word	0x240009cc

08001448 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	db08      	blt.n	800146a <_fstat+0x22>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b02      	cmp	r3, #2
 800145c:	dc05      	bgt.n	800146a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001464:	605a      	str	r2, [r3, #4]
    return 0;
 8001466:	2300      	movs	r3, #0
 8001468:	e005      	b.n	8001476 <_fstat+0x2e>
  }

  errno = EBADF;
 800146a:	f015 fcfb 	bl	8016e64 <__errno>
 800146e:	4603      	mov	r3, r0
 8001470:	2209      	movs	r2, #9
 8001472:	601a      	str	r2, [r3, #0]
  return 0;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <HAL_MspInit+0x38>)
 8001488:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800148c:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <HAL_MspInit+0x38>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001496:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <HAL_MspInit+0x38>)
 8001498:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	210f      	movs	r1, #15
 80014a8:	f06f 0001 	mvn.w	r0, #1
 80014ac:	f002 fdb0 	bl	8004010 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	58024400 	.word	0x58024400

080014bc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a2e      	ldr	r2, [pc, #184]	@ (8001594 <HAL_SD_MspInit+0xd8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d155      	bne.n	800158a <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80014de:	4b2e      	ldr	r3, [pc, #184]	@ (8001598 <HAL_SD_MspInit+0xdc>)
 80014e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014e4:	4a2c      	ldr	r2, [pc, #176]	@ (8001598 <HAL_SD_MspInit+0xdc>)
 80014e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ea:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80014ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <HAL_SD_MspInit+0xdc>)
 80014f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fc:	4b26      	ldr	r3, [pc, #152]	@ (8001598 <HAL_SD_MspInit+0xdc>)
 80014fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001502:	4a25      	ldr	r2, [pc, #148]	@ (8001598 <HAL_SD_MspInit+0xdc>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800150c:	4b22      	ldr	r3, [pc, #136]	@ (8001598 <HAL_SD_MspInit+0xdc>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800151a:	4b1f      	ldr	r3, [pc, #124]	@ (8001598 <HAL_SD_MspInit+0xdc>)
 800151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001520:	4a1d      	ldr	r2, [pc, #116]	@ (8001598 <HAL_SD_MspInit+0xdc>)
 8001522:	f043 0308 	orr.w	r3, r3, #8
 8001526:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800152a:	4b1b      	ldr	r3, [pc, #108]	@ (8001598 <HAL_SD_MspInit+0xdc>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001538:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800153c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800154a:	230c      	movs	r3, #12
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4811      	ldr	r0, [pc, #68]	@ (800159c <HAL_SD_MspInit+0xe0>)
 8001556:	f003 fb63 	bl	8004c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800155a:	2304      	movs	r3, #4
 800155c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800156a:	230c      	movs	r3, #12
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	480a      	ldr	r0, [pc, #40]	@ (80015a0 <HAL_SD_MspInit+0xe4>)
 8001576:	f003 fb53 	bl	8004c20 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2105      	movs	r1, #5
 800157e:	2031      	movs	r0, #49	@ 0x31
 8001580:	f002 fd46 	bl	8004010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001584:	2031      	movs	r0, #49	@ 0x31
 8001586:	f002 fd5d 	bl	8004044 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	@ 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	52007000 	.word	0x52007000
 8001598:	58024400 	.word	0x58024400
 800159c:	58020800 	.word	0x58020800
 80015a0:	58020c00 	.word	0x58020c00

080015a4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0e      	ldr	r2, [pc, #56]	@ (80015ec <HAL_TIM_OC_MspInit+0x48>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d116      	bne.n	80015e4 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015b6:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <HAL_TIM_OC_MspInit+0x4c>)
 80015b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015bc:	4a0c      	ldr	r2, [pc, #48]	@ (80015f0 <HAL_TIM_OC_MspInit+0x4c>)
 80015be:	f043 0302 	orr.w	r3, r3, #2
 80015c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015c6:	4b0a      	ldr	r3, [pc, #40]	@ (80015f0 <HAL_TIM_OC_MspInit+0x4c>)
 80015c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2105      	movs	r1, #5
 80015d8:	201d      	movs	r0, #29
 80015da:	f002 fd19 	bl	8004010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015de:	201d      	movs	r0, #29
 80015e0:	f002 fd30 	bl	8004044 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40000400 	.word	0x40000400
 80015f0:	58024400 	.word	0x58024400

080015f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08c      	sub	sp, #48	@ 0x30
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a3c      	ldr	r2, [pc, #240]	@ (8001704 <HAL_UART_MspInit+0x110>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d136      	bne.n	8001684 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001616:	4b3c      	ldr	r3, [pc, #240]	@ (8001708 <HAL_UART_MspInit+0x114>)
 8001618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800161c:	4a3a      	ldr	r2, [pc, #232]	@ (8001708 <HAL_UART_MspInit+0x114>)
 800161e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001622:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001626:	4b38      	ldr	r3, [pc, #224]	@ (8001708 <HAL_UART_MspInit+0x114>)
 8001628:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800162c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001630:	61bb      	str	r3, [r7, #24]
 8001632:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001634:	4b34      	ldr	r3, [pc, #208]	@ (8001708 <HAL_UART_MspInit+0x114>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163a:	4a33      	ldr	r2, [pc, #204]	@ (8001708 <HAL_UART_MspInit+0x114>)
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001644:	4b30      	ldr	r3, [pc, #192]	@ (8001708 <HAL_UART_MspInit+0x114>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001652:	2360      	movs	r3, #96	@ 0x60
 8001654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001662:	2307      	movs	r3, #7
 8001664:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4619      	mov	r1, r3
 800166c:	4827      	ldr	r0, [pc, #156]	@ (800170c <HAL_UART_MspInit+0x118>)
 800166e:	f003 fad7 	bl	8004c20 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2105      	movs	r1, #5
 8001676:	2026      	movs	r0, #38	@ 0x26
 8001678:	f002 fcca 	bl	8004010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800167c:	2026      	movs	r0, #38	@ 0x26
 800167e:	f002 fce1 	bl	8004044 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001682:	e03b      	b.n	80016fc <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART3)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a21      	ldr	r2, [pc, #132]	@ (8001710 <HAL_UART_MspInit+0x11c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d136      	bne.n	80016fc <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART3_CLK_ENABLE();
 800168e:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <HAL_UART_MspInit+0x114>)
 8001690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001694:	4a1c      	ldr	r2, [pc, #112]	@ (8001708 <HAL_UART_MspInit+0x114>)
 8001696:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800169a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800169e:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <HAL_UART_MspInit+0x114>)
 80016a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ac:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <HAL_UART_MspInit+0x114>)
 80016ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b2:	4a15      	ldr	r2, [pc, #84]	@ (8001708 <HAL_UART_MspInit+0x114>)
 80016b4:	f043 0308 	orr.w	r3, r3, #8
 80016b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016bc:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <HAL_UART_MspInit+0x114>)
 80016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016dc:	2307      	movs	r3, #7
 80016de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e0:	f107 031c 	add.w	r3, r7, #28
 80016e4:	4619      	mov	r1, r3
 80016e6:	4809      	ldr	r0, [pc, #36]	@ (800170c <HAL_UART_MspInit+0x118>)
 80016e8:	f003 fa9a 	bl	8004c20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2105      	movs	r1, #5
 80016f0:	2027      	movs	r0, #39	@ 0x27
 80016f2:	f002 fc8d 	bl	8004010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016f6:	2027      	movs	r0, #39	@ 0x27
 80016f8:	f002 fca4 	bl	8004044 <HAL_NVIC_EnableIRQ>
}
 80016fc:	bf00      	nop
 80016fe:	3730      	adds	r7, #48	@ 0x30
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40004400 	.word	0x40004400
 8001708:	58024400 	.word	0x58024400
 800170c:	58020c00 	.word	0x58020c00
 8001710:	40004800 	.word	0x40004800

08001714 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b090      	sub	sp, #64	@ 0x40
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b0f      	cmp	r3, #15
 8001720:	d827      	bhi.n	8001772 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001722:	2200      	movs	r2, #0
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	2036      	movs	r0, #54	@ 0x36
 8001728:	f002 fc72 	bl	8004010 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800172c:	2036      	movs	r0, #54	@ 0x36
 800172e:	f002 fc89 	bl	8004044 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001732:	4a29      	ldr	r2, [pc, #164]	@ (80017d8 <HAL_InitTick+0xc4>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001738:	4b28      	ldr	r3, [pc, #160]	@ (80017dc <HAL_InitTick+0xc8>)
 800173a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800173e:	4a27      	ldr	r2, [pc, #156]	@ (80017dc <HAL_InitTick+0xc8>)
 8001740:	f043 0310 	orr.w	r3, r3, #16
 8001744:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001748:	4b24      	ldr	r3, [pc, #144]	@ (80017dc <HAL_InitTick+0xc8>)
 800174a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001756:	f107 0210 	add.w	r2, r7, #16
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f004 fc79 	bl	8006058 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001768:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800176a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800176c:	2b00      	cmp	r3, #0
 800176e:	d106      	bne.n	800177e <HAL_InitTick+0x6a>
 8001770:	e001      	b.n	8001776 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e02b      	b.n	80017ce <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001776:	f004 fc43 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 800177a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800177c:	e004      	b.n	8001788 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800177e:	f004 fc3f 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 8001782:	4603      	mov	r3, r0
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800178a:	4a15      	ldr	r2, [pc, #84]	@ (80017e0 <HAL_InitTick+0xcc>)
 800178c:	fba2 2303 	umull	r2, r3, r2, r3
 8001790:	0c9b      	lsrs	r3, r3, #18
 8001792:	3b01      	subs	r3, #1
 8001794:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001796:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <HAL_InitTick+0xd0>)
 8001798:	4a13      	ldr	r2, [pc, #76]	@ (80017e8 <HAL_InitTick+0xd4>)
 800179a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800179c:	4b11      	ldr	r3, [pc, #68]	@ (80017e4 <HAL_InitTick+0xd0>)
 800179e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017a4:	4a0f      	ldr	r2, [pc, #60]	@ (80017e4 <HAL_InitTick+0xd0>)
 80017a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	@ (80017e4 <HAL_InitTick+0xd0>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <HAL_InitTick+0xd0>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017b6:	480b      	ldr	r0, [pc, #44]	@ (80017e4 <HAL_InitTick+0xd0>)
 80017b8:	f008 fdf2 	bl	800a3a0 <HAL_TIM_Base_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d104      	bne.n	80017cc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80017c2:	4808      	ldr	r0, [pc, #32]	@ (80017e4 <HAL_InitTick+0xd0>)
 80017c4:	f008 fe4e 	bl	800a464 <HAL_TIM_Base_Start_IT>
 80017c8:	4603      	mov	r3, r0
 80017ca:	e000      	b.n	80017ce <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3740      	adds	r7, #64	@ 0x40
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	24000008 	.word	0x24000008
 80017dc:	58024400 	.word	0x58024400
 80017e0:	431bde83 	.word	0x431bde83
 80017e4:	240009d0 	.word	0x240009d0
 80017e8:	40001000 	.word	0x40001000

080017ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <NMI_Handler+0x4>

080017f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <MemManage_Handler+0x4>

08001804 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <UsageFault_Handler+0x4>

08001814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800182a:	481c      	ldr	r0, [pc, #112]	@ (800189c <TIM3_IRQHandler+0x78>)
 800182c:	f008 fee9 	bl	800a602 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
#ifdef USE_MOBUSRTU_ENCODER
  // 使用任务通知替代直接调用编码器更新函数
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001830:	2300      	movs	r3, #0
 8001832:	603b      	str	r3, [r7, #0]

  // 发送任务通知给编码器任务
  if (encoderEventGroup != NULL) {
 8001834:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <TIM3_IRQHandler+0x7c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d006      	beq.n	800184a <TIM3_IRQHandler+0x26>
    xEventGroupSetBitsFromISR(encoderEventGroup, ENCODER_TICK_EVENT_BIT, &xHigherPriorityTaskWoken);
 800183c:	4b18      	ldr	r3, [pc, #96]	@ (80018a0 <TIM3_IRQHandler+0x7c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	463a      	mov	r2, r7
 8001842:	2101      	movs	r1, #1
 8001844:	4618      	mov	r0, r3
 8001846:	f011 fa99 	bl	8012d7c <xEventGroupSetBitsFromISR>
  }

  // 中断频率统计
  tim3_irq_count++;
 800184a:	4b16      	ldr	r3, [pc, #88]	@ (80018a4 <TIM3_IRQHandler+0x80>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	3301      	adds	r3, #1
 8001850:	4a14      	ldr	r2, [pc, #80]	@ (80018a4 <TIM3_IRQHandler+0x80>)
 8001852:	6013      	str	r3, [r2, #0]
  uint32_t current_tick = HAL_GetTick();
 8001854:	f002 fae8 	bl	8003e28 <HAL_GetTick>
 8001858:	6078      	str	r0, [r7, #4]

  // 每1000毫秒（1秒）统计一次频率
  if (current_tick - tim3_last_tick >= 1000) {
 800185a:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <TIM3_IRQHandler+0x84>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001866:	d309      	bcc.n	800187c <TIM3_IRQHandler+0x58>
    tim3_frequency = tim3_irq_count;
 8001868:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <TIM3_IRQHandler+0x80>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0f      	ldr	r2, [pc, #60]	@ (80018ac <TIM3_IRQHandler+0x88>)
 800186e:	6013      	str	r3, [r2, #0]

    // 重置计数器和时间戳
    tim3_irq_count = 0;
 8001870:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <TIM3_IRQHandler+0x80>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
    tim3_last_tick = current_tick;
 8001876:	4a0c      	ldr	r2, [pc, #48]	@ (80018a8 <TIM3_IRQHandler+0x84>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6013      	str	r3, [r2, #0]
  }

  // 如果需要进行任务切换，则执行
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d007      	beq.n	8001892 <TIM3_IRQHandler+0x6e>
 8001882:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <TIM3_IRQHandler+0x8c>)
 8001884:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	f3bf 8f4f 	dsb	sy
 800188e:	f3bf 8f6f 	isb	sy
#endif
  /* USER CODE END TIM3_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	24000108 	.word	0x24000108
 80018a0:	240009b4 	.word	0x240009b4
 80018a4:	24000a1c 	.word	0x24000a1c
 80018a8:	24000a20 	.word	0x24000a20
 80018ac:	24000a24 	.word	0x24000a24
 80018b0:	e000ed04 	.word	0xe000ed04

080018b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018b8:	4802      	ldr	r0, [pc, #8]	@ (80018c4 <USART2_IRQHandler+0x10>)
 80018ba:	f009 ffd3 	bl	800b864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	24000154 	.word	0x24000154

080018c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018cc:	4802      	ldr	r0, [pc, #8]	@ (80018d8 <USART3_IRQHandler+0x10>)
 80018ce:	f009 ffc9 	bl	800b864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	240001e8 	.word	0x240001e8

080018dc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80018e0:	4802      	ldr	r0, [pc, #8]	@ (80018ec <SDMMC1_IRQHandler+0x10>)
 80018e2:	f007 fb69 	bl	8008fb8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2400008c 	.word	0x2400008c

080018f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <TIM6_DAC_IRQHandler+0x10>)
 80018f6:	f008 fe84 	bl	800a602 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	240009d0 	.word	0x240009d0

08001904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800190c:	4a14      	ldr	r2, [pc, #80]	@ (8001960 <_sbrk+0x5c>)
 800190e:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <_sbrk+0x60>)
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001918:	4b13      	ldr	r3, [pc, #76]	@ (8001968 <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d102      	bne.n	8001926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001920:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <_sbrk+0x64>)
 8001922:	4a12      	ldr	r2, [pc, #72]	@ (800196c <_sbrk+0x68>)
 8001924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	429a      	cmp	r2, r3
 8001932:	d207      	bcs.n	8001944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001934:	f015 fa96 	bl	8016e64 <__errno>
 8001938:	4603      	mov	r3, r0
 800193a:	220c      	movs	r2, #12
 800193c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001942:	e009      	b.n	8001958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001944:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194a:	4b07      	ldr	r3, [pc, #28]	@ (8001968 <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	4a05      	ldr	r2, [pc, #20]	@ (8001968 <_sbrk+0x64>)
 8001954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	24080000 	.word	0x24080000
 8001964:	00003000 	.word	0x00003000
 8001968:	24000a28 	.word	0x24000a28
 800196c:	240055b0 	.word	0x240055b0

08001970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001974:	4b37      	ldr	r3, [pc, #220]	@ (8001a54 <SystemInit+0xe4>)
 8001976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800197a:	4a36      	ldr	r2, [pc, #216]	@ (8001a54 <SystemInit+0xe4>)
 800197c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001984:	4b34      	ldr	r3, [pc, #208]	@ (8001a58 <SystemInit+0xe8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 030f 	and.w	r3, r3, #15
 800198c:	2b06      	cmp	r3, #6
 800198e:	d807      	bhi.n	80019a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001990:	4b31      	ldr	r3, [pc, #196]	@ (8001a58 <SystemInit+0xe8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f023 030f 	bic.w	r3, r3, #15
 8001998:	4a2f      	ldr	r2, [pc, #188]	@ (8001a58 <SystemInit+0xe8>)
 800199a:	f043 0307 	orr.w	r3, r3, #7
 800199e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019a0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a5c <SystemInit+0xec>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a2d      	ldr	r2, [pc, #180]	@ (8001a5c <SystemInit+0xec>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019ac:	4b2b      	ldr	r3, [pc, #172]	@ (8001a5c <SystemInit+0xec>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019b2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a5c <SystemInit+0xec>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4929      	ldr	r1, [pc, #164]	@ (8001a5c <SystemInit+0xec>)
 80019b8:	4b29      	ldr	r3, [pc, #164]	@ (8001a60 <SystemInit+0xf0>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019be:	4b26      	ldr	r3, [pc, #152]	@ (8001a58 <SystemInit+0xe8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d007      	beq.n	80019da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019ca:	4b23      	ldr	r3, [pc, #140]	@ (8001a58 <SystemInit+0xe8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 030f 	bic.w	r3, r3, #15
 80019d2:	4a21      	ldr	r2, [pc, #132]	@ (8001a58 <SystemInit+0xe8>)
 80019d4:	f043 0307 	orr.w	r3, r3, #7
 80019d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019da:	4b20      	ldr	r3, [pc, #128]	@ (8001a5c <SystemInit+0xec>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019e0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a5c <SystemInit+0xec>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019e6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a5c <SystemInit+0xec>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	@ (8001a5c <SystemInit+0xec>)
 80019ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001a64 <SystemInit+0xf4>)
 80019f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019f2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <SystemInit+0xec>)
 80019f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a68 <SystemInit+0xf8>)
 80019f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019f8:	4b18      	ldr	r3, [pc, #96]	@ (8001a5c <SystemInit+0xec>)
 80019fa:	4a1c      	ldr	r2, [pc, #112]	@ (8001a6c <SystemInit+0xfc>)
 80019fc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019fe:	4b17      	ldr	r3, [pc, #92]	@ (8001a5c <SystemInit+0xec>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a04:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <SystemInit+0xec>)
 8001a06:	4a19      	ldr	r2, [pc, #100]	@ (8001a6c <SystemInit+0xfc>)
 8001a08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a0a:	4b14      	ldr	r3, [pc, #80]	@ (8001a5c <SystemInit+0xec>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a10:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <SystemInit+0xec>)
 8001a12:	4a16      	ldr	r2, [pc, #88]	@ (8001a6c <SystemInit+0xfc>)
 8001a14:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a16:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <SystemInit+0xec>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <SystemInit+0xec>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0e      	ldr	r2, [pc, #56]	@ (8001a5c <SystemInit+0xec>)
 8001a22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <SystemInit+0xec>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a2e:	4b10      	ldr	r3, [pc, #64]	@ (8001a70 <SystemInit+0x100>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <SystemInit+0x104>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a3a:	d202      	bcs.n	8001a42 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a78 <SystemInit+0x108>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <SystemInit+0x10c>)
 8001a44:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001a48:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00
 8001a58:	52002000 	.word	0x52002000
 8001a5c:	58024400 	.word	0x58024400
 8001a60:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a64:	02020200 	.word	0x02020200
 8001a68:	01ff0000 	.word	0x01ff0000
 8001a6c:	01010280 	.word	0x01010280
 8001a70:	5c001000 	.word	0x5c001000
 8001a74:	ffff0000 	.word	0xffff0000
 8001a78:	51008108 	.word	0x51008108
 8001a7c:	52004000 	.word	0x52004000

08001a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ab8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a84:	f7ff ff74 	bl	8001970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a88:	480c      	ldr	r0, [pc, #48]	@ (8001abc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a8a:	490d      	ldr	r1, [pc, #52]	@ (8001ac0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aa0:	4c0a      	ldr	r4, [pc, #40]	@ (8001acc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aae:	f015 f9df 	bl	8016e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab2:	f7ff f8d5 	bl	8000c60 <main>
  bx  lr
 8001ab6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ab8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001abc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ac0:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001ac4:	08017f94 	.word	0x08017f94
  ldr r2, =_sbss
 8001ac8:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001acc:	240055b0 	.word	0x240055b0

08001ad0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad0:	e7fe      	b.n	8001ad0 <ADC3_IRQHandler>
	...

08001ad4 <_ZN10Encoder485C1EP17TIM_HandleTypeDefhP20__UART_HandleTypeDef>:

#include "Encoder485.h"
#include <cmath>


Encoder485::Encoder485(TIM_HandleTypeDef *htim, uint8_t unit_id, UART_HandleTypeDef *huart)
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	71fb      	strb	r3, [r7, #7]
  : ModbusAbsoluteEncoder(htim, unit_id),
    huart(huart)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	79fa      	ldrb	r2, [r7, #7]
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f001 fcde 	bl	80034ac <_ZN21ModbusAbsoluteEncoderC1EP17TIM_HandleTypeDefh>
 8001af0:	4a05      	ldr	r2, [pc, #20]	@ (8001b08 <_ZN10Encoder485C1EP17TIM_HandleTypeDefhP20__UART_HandleTypeDef+0x34>)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
{
}
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	08017d80 	.word	0x08017d80

08001b0c <_ZN10Encoder4854initEv>:

void Encoder485::init(){
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
    /* Modbus Master initialization */
  ModbusH.uModbusType = MB_MASTER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2204      	movs	r2, #4
 8001b18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ModbusH.port = huart; 
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f8d3 21bc 	ldr.w	r2, [r3, #444]	@ 0x1bc
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	629a      	str	r2, [r3, #40]	@ 0x28
  ModbusH.u8id = 0; //master ID
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  ModbusH.u16timeOut = 1000;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b34:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
  ModbusH.EN_Port = NULL; // No RS485
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	631a      	str	r2, [r3, #48]	@ 0x30
  ModbusH.u16regs = ModbusDATA;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f503 72b6 	add.w	r2, r3, #364	@ 0x16c
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  ModbusH.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
  ModbusH.xTypeHW = USART_HW;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
  
  ModbusAbsoluteEncoder::init();
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f001 fcff 	bl	8003560 <_ZN21ModbusAbsoluteEncoder4initEv>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <_ZN10Encoder48514constructQueryEP8modbus_t>:

bool Encoder485::constructQuery(modbus_t* modbusQuary) {
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
    modbusQuary->u8id = unit_id;                      // 从站地址03
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 217c 	ldrb.w	r2, [r3, #380]	@ 0x17c
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	701a      	strb	r2, [r3, #0]
    modbusQuary->u8fct = MB_FC_READ_REGISTERS;  // 功能码03：读取保持寄存器
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2203      	movs	r2, #3
 8001b82:	705a      	strb	r2, [r3, #1]
    modbusQuary->u16RegAdd = 0x0000;            // 寄存器起始地址0x00
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2200      	movs	r2, #0
 8001b88:	805a      	strh	r2, [r3, #2]
    modbusQuary->u16CoilsNo = 2;                // 读取2个寄存器（0x00和0x01）
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	809a      	strh	r2, [r3, #4]
    modbusQuary->u16reg = ModbusDATA;           // 数据存储缓冲区
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f503 72b6 	add.w	r2, r3, #364	@ 0x16c
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	609a      	str	r2, [r3, #8]
    return true;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <RingAdd>:
#endif

/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001bba:	4619      	mov	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	78fa      	ldrb	r2, [r7, #3]
 8001bc0:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001bc8:	3301      	adds	r3, #1
 8001bca:	425a      	negs	r2, r3
 8001bcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001bd0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001bd4:	bf58      	it	pl
 8001bd6:	4253      	negpl	r3, r2
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001be6:	2b80      	cmp	r3, #128	@ 0x80
 8001be8:	d113      	bne.n	8001c12 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	425a      	negs	r2, r3
 8001bfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c04:	bf58      	it	pl
 8001c06:	4253      	negpl	r3, r2
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8001c10:	e00b      	b.n	8001c2a <RingAdd+0x82>
		xRingBuffer->overflow = false;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
		xRingBuffer->u8available++;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001c20:	3301      	adds	r3, #1
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001c46:	461a      	mov	r2, r3
 8001c48:	6839      	ldr	r1, [r7, #0]
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f805 	bl	8001c5a <RingGetNBytes>
 8001c50:	4603      	mov	r3, r0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	4613      	mov	r3, r2
 8001c66:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <RingGetNBytes+0x1e>
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <RingGetNBytes+0x22>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e03e      	b.n	8001cfa <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	2b80      	cmp	r3, #128	@ 0x80
 8001c80:	d901      	bls.n	8001c86 <RingGetNBytes+0x2c>
 8001c82:	2300      	movs	r3, #0
 8001c84:	e039      	b.n	8001cfa <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	75fb      	strb	r3, [r7, #23]
 8001c8a:	e01b      	b.n	8001cc4 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001c92:	4619      	mov	r1, r3
 8001c94:	7dfb      	ldrb	r3, [r7, #23]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	4413      	add	r3, r2
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	5c52      	ldrb	r2, [r2, r1]
 8001c9e:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	425a      	negs	r2, r3
 8001caa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cb2:	bf58      	it	pl
 8001cb4:	4253      	negpl	r3, r2
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	75fb      	strb	r3, [r7, #23]
 8001cc4:	7dfa      	ldrb	r2, [r7, #23]
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d205      	bcs.n	8001cd8 <RingGetNBytes+0x7e>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001cd2:	7dfa      	ldrb	r2, [r7, #23]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d3d9      	bcc.n	8001c8c <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8001cde:	7dfb      	ldrb	r3, [r7, #23]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	xRingBuffer->overflow = false;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
	RingClear(xRingBuffer);
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f805 	bl	8001d02 <RingClear>

	return uCounter;
 8001cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
xRingBuffer->u8end = 0;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
xRingBuffer->u8available = 0;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
xRingBuffer->overflow = false;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8001d40:	4b45      	ldr	r3, [pc, #276]	@ (8001e58 <ModbusInit+0x120>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	f200 8083 	bhi.w	8001e50 <ModbusInit+0x118>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	33c0      	adds	r3, #192	@ 0xc0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ffd7 	bl	8001d02 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d109      	bne.n	8001d70 <ModbusInit+0x38>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8001d5c:	4a3f      	ldr	r2, [pc, #252]	@ (8001e5c <ModbusInit+0x124>)
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	483f      	ldr	r0, [pc, #252]	@ (8001e60 <ModbusInit+0x128>)
 8001d62:	f010 fb02 	bl	801236a <osThreadNew>
 8001d66:	4602      	mov	r2, r0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001d6e:	e035      	b.n	8001ddc <ModbusInit+0xa4>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d130      	bne.n	8001dda <ModbusInit+0xa2>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8001d78:	4a3a      	ldr	r2, [pc, #232]	@ (8001e64 <ModbusInit+0x12c>)
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	483a      	ldr	r0, [pc, #232]	@ (8001e68 <ModbusInit+0x130>)
 8001d7e:	f010 faf4 	bl	801236a <osThreadNew>
 8001d82:	4602      	mov	r2, r0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8001d90:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8001d98:	4a34      	ldr	r2, [pc, #208]	@ (8001e6c <ModbusInit+0x134>)
 8001d9a:	9200      	str	r2, [sp, #0]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	4834      	ldr	r0, [pc, #208]	@ (8001e70 <ModbusInit+0x138>)
 8001da0:	f013 fc34 	bl	801560c <xTimerCreate>
 8001da4:	4602      	mov	r2, r0
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <ModbusInit+0x82>
		  {
			  while(1); //error creating timer, check heap and stack size
 8001db6:	bf00      	nop
 8001db8:	e7fd      	b.n	8001db6 <ModbusInit+0x7e>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8001dba:	4a2e      	ldr	r2, [pc, #184]	@ (8001e74 <ModbusInit+0x13c>)
 8001dbc:	2110      	movs	r1, #16
 8001dbe:	2002      	movs	r0, #2
 8001dc0:	f010 fcce 	bl	8012760 <osMessageQueueNew>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

		  if(modH->QueueTelegramHandle == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d102      	bne.n	8001ddc <ModbusInit+0xa4>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 8001dd6:	bf00      	nop
 8001dd8:	e7fd      	b.n	8001dd6 <ModbusInit+0x9e>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8001dda:	e7fe      	b.n	8001dda <ModbusInit+0xa2>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <ModbusInit+0xb2>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8001de6:	bf00      	nop
 8001de8:	e7fd      	b.n	8001de6 <ModbusInit+0xae>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8001df0:	4a21      	ldr	r2, [pc, #132]	@ (8001e78 <ModbusInit+0x140>)
 8001df2:	9200      	str	r2, [sp, #0]
 8001df4:	2200      	movs	r2, #0
 8001df6:	2105      	movs	r1, #5
 8001df8:	4820      	ldr	r0, [pc, #128]	@ (8001e7c <ModbusInit+0x144>)
 8001dfa:	f013 fc07 	bl	801560c <xTimerCreate>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <ModbusInit+0xdc>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <ModbusInit+0xd8>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8001e14:	4a1a      	ldr	r2, [pc, #104]	@ (8001e80 <ModbusInit+0x148>)
 8001e16:	2101      	movs	r1, #1
 8001e18:	2001      	movs	r0, #1
 8001e1a:	f010 fb5e 	bl	80124da <osSemaphoreNew>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	  if(modH->ModBusSphrHandle == NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <ModbusInit+0xfc>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <ModbusInit+0xf8>
	  }

	  mHandlers[numberHandlers] = modH;
 8001e34:	4b08      	ldr	r3, [pc, #32]	@ (8001e58 <ModbusInit+0x120>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4a12      	ldr	r2, [pc, #72]	@ (8001e84 <ModbusInit+0x14c>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8001e42:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <ModbusInit+0x120>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	3301      	adds	r3, #1
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4b03      	ldr	r3, [pc, #12]	@ (8001e58 <ModbusInit+0x120>)
 8001e4c:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8001e4e:	e000      	b.n	8001e52 <ModbusInit+0x11a>
	  while(1); //error no more Modbus handlers supported
 8001e50:	e7fe      	b.n	8001e50 <ModbusInit+0x118>
}
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	24000a34 	.word	0x24000a34
 8001e5c:	08017dc8 	.word	0x08017dc8
 8001e60:	0800207d 	.word	0x0800207d
 8001e64:	08017dec 	.word	0x08017dec
 8001e68:	08002611 	.word	0x08002611
 8001e6c:	08002021 	.word	0x08002021
 8001e70:	08017c90 	.word	0x08017c90
 8001e74:	08017db0 	.word	0x08017db0
 8001e78:	08001f9d 	.word	0x08001f9d
 8001e7c:	08017ca0 	.word	0x08017ca0
 8001e80:	08017e10 	.word	0x08017e10
 8001e84:	24000a2c 	.word	0x24000a2c

08001e88 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d010      	beq.n	8001ebc <ModbusStart+0x34>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d00b      	beq.n	8001ebc <ModbusStart+0x34>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d006      	beq.n	8001ebc <ModbusStart+0x34>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d001      	beq.n	8001ebc <ModbusStart+0x34>
	{

		while(1); //ERROR select the type of hardware
 8001eb8:	bf00      	nop
 8001eba:	e7fd      	b.n	8001eb8 <ModbusStart+0x30>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d101      	bne.n	8001eca <ModbusStart+0x42>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 8001ec6:	bf00      	nop
 8001ec8:	e7fd      	b.n	8001ec6 <ModbusStart+0x3e>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d004      	beq.n	8001ede <ModbusStart+0x56>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d140      	bne.n	8001f60 <ModbusStart+0xd8>
	{

	      if (modH->EN_Port != NULL )
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d007      	beq.n	8001ef6 <ModbusStart+0x6e>
          {
              // return RS485 transceiver to receive mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68d8      	ldr	r0, [r3, #12]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	8a1b      	ldrh	r3, [r3, #16]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f003 f85d 	bl	8004fb0 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d106      	bne.n	8001f0c <ModbusStart+0x84>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <ModbusStart+0x84>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <ModbusStart+0x80>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8001f0c:	bf00      	nop
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f00a f928 	bl	800c168 <HAL_UART_GetState>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	d1f7      	bne.n	8001f0e <ModbusStart+0x86>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6858      	ldr	r0, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	33a6      	adds	r3, #166	@ 0xa6
 8001f26:	2201      	movs	r2, #1
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f009 fb81 	bl	800b630 <HAL_UART_Receive_IT>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <ModbusStart+0xb0>
          {
                while(1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <ModbusStart+0xac>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	7a1b      	ldrb	r3, [r3, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <ModbusStart+0xc4>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d101      	bne.n	8001f4c <ModbusStart+0xc4>
          {
        	  while(1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <ModbusStart+0xc0>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7a1b      	ldrb	r3, [r3, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d105      	bne.n	8001f60 <ModbusStart+0xd8>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d101      	bne.n	8001f60 <ModbusStart+0xd8>
          {
             	  while(1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <ModbusStart+0xd4>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 2093 	ldrb.w	r2, [r3, #147]	@ 0x93
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f8b3 209e 	ldrh.w	r2, [r3, #158]	@ 0x9e
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	e02a      	b.n	8002000 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 8001faa:	4a1b      	ldr	r2, [pc, #108]	@ (8002018 <vTimerCallbackT35+0x7c>)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d11e      	bne.n	8001ffa <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 8001fbc:	4a16      	ldr	r2, [pc, #88]	@ (8002018 <vTimerCallbackT35+0x7c>)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d10c      	bne.n	8001fe4 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8001fca:	4a13      	ldr	r2, [pc, #76]	@ (8002018 <vTimerCallbackT35+0x7c>)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd2:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2103      	movs	r1, #3
 8001fe0:	f013 fb72 	bl	80156c8 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8001fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8002018 <vTimerCallbackT35+0x7c>)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fec:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	f013 f8c3 	bl	8015180 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	4b06      	ldr	r3, [pc, #24]	@ (800201c <vTimerCallbackT35+0x80>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4293      	cmp	r3, r2
 800200a:	dbce      	blt.n	8001faa <vTimerCallbackT35+0xe>
		}

	}
}
 800200c:	bf00      	nop
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	24000a2c 	.word	0x24000a2c
 800201c:	24000a34 	.word	0x24000a34

08002020 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	e016      	b.n	800205c <vTimerCallbackTimeout+0x3c>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800202e:	4a11      	ldr	r2, [pc, #68]	@ (8002074 <vTimerCallbackTimeout+0x54>)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002036:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	429a      	cmp	r2, r3
 800203e:	d10a      	bne.n	8002056 <vTimerCallbackTimeout+0x36>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 8002040:	4a0c      	ldr	r2, [pc, #48]	@ (8002074 <vTimerCallbackTimeout+0x54>)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002048:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 800204c:	2300      	movs	r3, #0
 800204e:	2203      	movs	r2, #3
 8002050:	2111      	movs	r1, #17
 8002052:	f013 f895 	bl	8015180 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3301      	adds	r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <vTimerCallbackTimeout+0x58>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4293      	cmp	r3, r2
 8002066:	dbe2      	blt.n	800202e <vTimerCallbackTimeout+0xe>
		}

	}

}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	24000a2c 	.word	0x24000a2c
 8002078:	24000a34 	.word	0x24000a34

0800207c <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8002094:	2b01      	cmp	r3, #1
 8002096:	d004      	beq.n	80020a2 <StartTaskModbusSlave+0x26>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d116      	bne.n	80020d0 <StartTaskModbusSlave+0x54>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 80020a2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020a6:	2001      	movs	r0, #1
 80020a8:	f013 f81e 	bl	80150e8 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 fc8f 	bl	80029d0 <getRxBuffer>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b0c      	cmp	r3, #12
 80020b6:	d10b      	bne.n	80020d0 <StartTaskModbusSlave+0x54>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	220c      	movs	r2, #12
 80020bc:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80020c4:	3301      	adds	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		  continue;
 80020ce:	e0c2      	b.n	8002256 <StartTaskModbusSlave+0x1da>
	  }

   }

   if (modH->u8BufferSize < 7)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80020d6:	2b06      	cmp	r3, #6
 80020d8:	d80b      	bhi.n	80020f2 <StartTaskModbusSlave+0x76>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	220f      	movs	r2, #15
 80020de:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80020e6:	3301      	adds	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0

	  continue;
 80020f0:	e0b1      	b.n	8002256 <StartTaskModbusSlave+0x1da>
    }

    //check broadcast mode
    modH->u8AddressMode = ADDRESS_NORMAL;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    if (modH->u8Buffer[ID] == ADDRESS_BROADCAST)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	7cdb      	ldrb	r3, [r3, #19]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d103      	bne.n	800210a <StartTaskModbusSlave+0x8e>
    {
        modH->u8AddressMode = ADDRESS_BROADCAST;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    }

   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id && modH->u8AddressMode != ADDRESS_BROADCAST)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	7cda      	ldrb	r2, [r3, #19]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	7a1b      	ldrb	r3, [r3, #8]
 8002112:	429a      	cmp	r2, r3
 8002114:	d005      	beq.n	8002122 <StartTaskModbusSlave+0xa6>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800211c:	2b00      	cmp	r3, #0
 800211e:	f040 8099 	bne.w	8002254 <StartTaskModbusSlave+0x1d8>
    	}
#endif
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 fc9c 	bl	8002a60 <validateRequest>
 8002128:	4603      	mov	r3, r0
 800212a:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 800212c:	7afb      	ldrb	r3, [r7, #11]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00e      	beq.n	8002150 <StartTaskModbusSlave+0xd4>
	{
	    if (u8exception != ERR_TIME_OUT)
 8002132:	7afb      	ldrb	r3, [r7, #11]
 8002134:	2b11      	cmp	r3, #17
 8002136:	d007      	beq.n	8002148 <StartTaskModbusSlave+0xcc>
		{
		    buildException( u8exception, modH);
 8002138:	7afb      	ldrb	r3, [r7, #11]
 800213a:	68f9      	ldr	r1, [r7, #12]
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fe32 	bl	8002da6 <buildException>
			sendTxBuffer(modH);
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fe4e 	bl	8002de4 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	7afa      	ldrb	r2, [r7, #11]
 800214c:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 800214e:	e082      	b.n	8002256 <StartTaskModbusSlave+0x1da>
	 }

	 modH->i8lastError = 0;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800215c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002160:	4618      	mov	r0, r3
 8002162:	f011 fb99 	bl	8013898 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	7d1b      	ldrb	r3, [r3, #20]
 800216a:	3b01      	subs	r3, #1
 800216c:	2b0f      	cmp	r3, #15
 800216e:	d863      	bhi.n	8002238 <StartTaskModbusSlave+0x1bc>
 8002170:	a201      	add	r2, pc, #4	@ (adr r2, 8002178 <StartTaskModbusSlave+0xfc>)
 8002172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002176:	bf00      	nop
 8002178:	080021b9 	.word	0x080021b9
 800217c:	080021b9 	.word	0x080021b9
 8002180:	080021d5 	.word	0x080021d5
 8002184:	080021d5 	.word	0x080021d5
 8002188:	080021f1 	.word	0x080021f1
 800218c:	08002203 	.word	0x08002203
 8002190:	08002239 	.word	0x08002239
 8002194:	08002239 	.word	0x08002239
 8002198:	08002239 	.word	0x08002239
 800219c:	08002239 	.word	0x08002239
 80021a0:	08002239 	.word	0x08002239
 80021a4:	08002239 	.word	0x08002239
 80021a8:	08002239 	.word	0x08002239
 80021ac:	08002239 	.word	0x08002239
 80021b0:	08002215 	.word	0x08002215
 80021b4:	08002227 	.word	0x08002227
	 {
		case MB_FC_READ_COILS:
		case MB_FC_READ_DISCRETE_INPUT:
			if (modH->u8AddressMode == ADDRESS_BROADCAST)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d03c      	beq.n	800223c <StartTaskModbusSlave+0x1c0>
			{
				/* broadcast mode should ignore read function */
				break;
			}
			modH->i8state = process_FC1(modH);
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 feb2 	bl	8002f2c <process_FC1>
 80021c8:	4603      	mov	r3, r0
 80021ca:	461a      	mov	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 80021d2:	e036      	b.n	8002242 <StartTaskModbusSlave+0x1c6>
		case MB_FC_READ_INPUT_REGISTER:
		case MB_FC_READ_REGISTERS :
			if (modH->u8AddressMode == ADDRESS_BROADCAST)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d030      	beq.n	8002240 <StartTaskModbusSlave+0x1c4>
			{
				/* broadcast mode should ignore read function */
				break;
			}
			modH->i8state = process_FC3(modH);
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 ff59 	bl	8003096 <process_FC3>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 80021ee:	e028      	b.n	8002242 <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_COIL:
			modH->i8state = process_FC5(modH);
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 ffbb 	bl	800316c <process_FC5>
 80021f6:	4603      	mov	r3, r0
 80021f8:	461a      	mov	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002200:	e01f      	b.n	8002242 <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_REGISTER :
			modH->i8state = process_FC6(modH);
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f001 f80b 	bl	800321e <process_FC6>
 8002208:	4603      	mov	r3, r0
 800220a:	461a      	mov	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002212:	e016      	b.n	8002242 <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_MULTIPLE_COILS:
			modH->i8state = process_FC15(modH);
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f001 f834 	bl	8003282 <process_FC15>
 800221a:	4603      	mov	r3, r0
 800221c:	461a      	mov	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002224:	e00d      	b.n	8002242 <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_MULTIPLE_REGISTERS :
			modH->i8state = process_FC16(modH);
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f001 f8b9 	bl	800339e <process_FC16>
 800222c:	4603      	mov	r3, r0
 800222e:	461a      	mov	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002236:	e004      	b.n	8002242 <StartTaskModbusSlave+0x1c6>
		default:
			break;
 8002238:	bf00      	nop
 800223a:	e002      	b.n	8002242 <StartTaskModbusSlave+0x1c6>
				break;
 800223c:	bf00      	nop
 800223e:	e000      	b.n	8002242 <StartTaskModbusSlave+0x1c6>
				break;
 8002240:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 8002248:	2300      	movs	r3, #0
 800224a:	2200      	movs	r2, #0
 800224c:	2100      	movs	r1, #0
 800224e:	f011 f811 	bl	8013274 <xQueueGenericSend>

	 continue;
 8002252:	e000      	b.n	8002256 <StartTaskModbusSlave+0x1da>
    	continue; // continue this is not for us
 8002254:	bf00      	nop
  {
 8002256:	e717      	b.n	8002088 <StartTaskModbusSlave+0xc>

08002258 <ModbusQuery>:
}



void ModbusQuery(modbusHandler_t * modH, modbus_t telegram )
{
 8002258:	b084      	sub	sp, #16
 800225a:	b580      	push	{r7, lr}
 800225c:	b084      	sub	sp, #16
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	f107 001c 	add.w	r0, r7, #28
 8002266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX tail Queue of Modbus
	if (modH->uModbusType == MB_MASTER)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b04      	cmp	r3, #4
 8002270:	d12b      	bne.n	80022ca <ModbusQuery+0x72>
	{
	telegram.u32CurrentTask = (uint32_t *) osThreadGetId();
 8002272:	f010 f90c 	bl	801248e <osThreadGetId>
 8002276:	4603      	mov	r3, r0
 8002278:	62bb      	str	r3, [r7, #40]	@ 0x28
	// 检查是否在中断中运行
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
	if (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) {
 800227e:	4b17      	ldr	r3, [pc, #92]	@ (80022dc <ModbusQuery+0x84>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002286:	2b00      	cmp	r3, #0
 8002288:	d015      	beq.n	80022b6 <ModbusQuery+0x5e>
		// 在中断中，使用FromISR版本
		xQueueSendToBackFromISR(modH->QueueTelegramHandle, &telegram, &xHigherPriorityTaskWoken);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 8002290:	f107 020c 	add.w	r2, r7, #12
 8002294:	f107 011c 	add.w	r1, r7, #28
 8002298:	2300      	movs	r3, #0
 800229a:	f011 f8ed 	bl	8013478 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d013      	beq.n	80022cc <ModbusQuery+0x74>
 80022a4:	4b0e      	ldr	r3, [pc, #56]	@ (80022e0 <ModbusQuery+0x88>)
 80022a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	f3bf 8f4f 	dsb	sy
 80022b0:	f3bf 8f6f 	isb	sy
	}
	else{
//		LED_Toggle("red");
		while(1);// error a slave cannot send queries as a master
	}
}
 80022b4:	e00a      	b.n	80022cc <ModbusQuery+0x74>
		xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 80022bc:	f107 011c 	add.w	r1, r7, #28
 80022c0:	2300      	movs	r3, #0
 80022c2:	2200      	movs	r2, #0
 80022c4:	f010 ffd6 	bl	8013274 <xQueueGenericSend>
}
 80022c8:	e000      	b.n	80022cc <ModbusQuery+0x74>
		while(1);// error a slave cannot send queries as a master
 80022ca:	e7fe      	b.n	80022ca <ModbusQuery+0x72>
}
 80022cc:	bf00      	nop
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022d6:	b004      	add	sp, #16
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000ed00 	.word	0xe000ed00
 80022e0:	e000ed04 	.word	0xe000ed04

080022e4 <ModbusQueryV2>:

uint32_t ModbusQueryV2(modbusHandler_t * modH, modbus_t telegram )
{
 80022e4:	b084      	sub	sp, #16
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	f107 0014 	add.w	r0, r7, #20
 80022f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX tail Queue of Modbus
	if (modH->uModbusType == MB_MASTER)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d113      	bne.n	8002326 <ModbusQueryV2+0x42>
	{
	telegram.u32CurrentTask = (uint32_t *) osThreadGetId();
 80022fe:	f010 f8c6 	bl	801248e <osThreadGetId>
 8002302:	4603      	mov	r3, r0
 8002304:	623b      	str	r3, [r7, #32]
	xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 800230c:	f107 0114 	add.w	r1, r7, #20
 8002310:	2300      	movs	r3, #0
 8002312:	2200      	movs	r2, #0
 8002314:	f010 ffae 	bl	8013274 <xQueueGenericSend>

	return ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002318:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800231c:	2001      	movs	r0, #1
 800231e:	f012 fee3 	bl	80150e8 <ulTaskNotifyTake>
 8002322:	4603      	mov	r3, r0
 8002324:	e000      	b.n	8002328 <ModbusQueryV2+0x44>

	}
	else{
//		LED_Toggle("red");
		while(1);// error a slave cannot send queries as a master
 8002326:	e7fe      	b.n	8002326 <ModbusQueryV2+0x42>
	}
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002332:	b004      	add	sp, #16
 8002334:	4770      	bx	lr
	...

08002338 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8002338:	b084      	sub	sp, #16
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	f107 001c 	add.w	r0, r7, #28
 8002346:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002354:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002358:	4618      	mov	r0, r3
 800235a:	f011 fa9d 	bl	8013898 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	7a1b      	ldrb	r3, [r3, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <SendQuery+0x32>
 8002366:	230a      	movs	r3, #10
 8002368:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f993 30a7 	ldrsb.w	r3, [r3, #167]	@ 0xa7
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <SendQuery+0x40>
 8002374:	230b      	movs	r3, #11
 8002376:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8002378:	7f3b      	ldrb	r3, [r7, #28]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <SendQuery+0x4c>
 800237e:	7f3b      	ldrb	r3, [r7, #28]
 8002380:	2bf7      	cmp	r3, #247	@ 0xf7
 8002382:	d901      	bls.n	8002388 <SendQuery+0x50>
 8002384:	2312      	movs	r3, #18
 8002386:	73bb      	strb	r3, [r7, #14]


	if(error)
 8002388:	7bbb      	ldrb	r3, [r7, #14]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00d      	beq.n	80023aa <SendQuery+0x72>
	{
		 modH->i8lastError = error;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	7bba      	ldrb	r2, [r7, #14]
 8002392:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 800239a:	2300      	movs	r3, #0
 800239c:	2200      	movs	r2, #0
 800239e:	2100      	movs	r1, #0
 80023a0:	f010 ff68 	bl	8013274 <xQueueGenericSend>
		 return error;
 80023a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023a8:	e12a      	b.n	8002600 <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 80023aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 80023b2:	7f3a      	ldrb	r2, [r7, #28]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 80023b8:	7f7a      	ldrb	r2, [r7, #29]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 80023be:	8bfb      	ldrh	r3, [r7, #30]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 80023ca:	8bfb      	ldrh	r3, [r7, #30]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 80023d2:	7f7b      	ldrb	r3, [r7, #29]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	2b0f      	cmp	r3, #15
 80023d8:	f200 80ff 	bhi.w	80025da <SendQuery+0x2a2>
 80023dc:	a201      	add	r2, pc, #4	@ (adr r2, 80023e4 <SendQuery+0xac>)
 80023de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e2:	bf00      	nop
 80023e4:	08002425 	.word	0x08002425
 80023e8:	08002425 	.word	0x08002425
 80023ec:	08002425 	.word	0x08002425
 80023f0:	08002425 	.word	0x08002425
 80023f4:	08002443 	.word	0x08002443
 80023f8:	08002465 	.word	0x08002465
 80023fc:	080025db 	.word	0x080025db
 8002400:	080025db 	.word	0x080025db
 8002404:	080025db 	.word	0x080025db
 8002408:	080025db 	.word	0x080025db
 800240c:	080025db 	.word	0x080025db
 8002410:	080025db 	.word	0x080025db
 8002414:	080025db 	.word	0x080025db
 8002418:	080025db 	.word	0x080025db
 800241c:	08002487 	.word	0x08002487
 8002420:	08002545 	.word	0x08002545
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8002424:	8c3b      	ldrh	r3, [r7, #32]
 8002426:	0a1b      	lsrs	r3, r3, #8
 8002428:	b29b      	uxth	r3, r3
 800242a:	b2da      	uxtb	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8002430:	8c3b      	ldrh	r3, [r7, #32]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2206      	movs	r2, #6
 800243c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 8002440:	e0cb      	b.n	80025da <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <SendQuery+0x116>
 800244a:	22ff      	movs	r2, #255	@ 0xff
 800244c:	e000      	b.n	8002450 <SendQuery+0x118>
 800244e:	2200      	movs	r2, #0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2206      	movs	r2, #6
 800245e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 8002462:	e0ba      	b.n	80025da <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 8002464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	b29b      	uxth	r3, r3
 800246c:	b2da      	uxtb	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2206      	movs	r2, #6
 8002480:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 8002484:	e0a9      	b.n	80025da <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 8002486:	8c3b      	ldrh	r3, [r7, #32]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	b29b      	uxth	r3, r3
 800248c:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 800248e:	7a7b      	ldrb	r3, [r7, #9]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8002494:	8c3b      	ldrh	r3, [r7, #32]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	b29b      	uxth	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <SendQuery+0x174>
	    {
	        u8bytesno++;
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	3301      	adds	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 80024a6:	7a7b      	ldrb	r3, [r7, #9]
 80024a8:	3301      	adds	r3, #1
 80024aa:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80024ac:	8c3b      	ldrh	r3, [r7, #32]
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80024b8:	8c3b      	ldrh	r3, [r7, #32]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	7bfa      	ldrb	r2, [r7, #15]
 80024c4:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2207      	movs	r2, #7
 80024ca:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	81bb      	strh	r3, [r7, #12]
 80024d2:	e031      	b.n	8002538 <SendQuery+0x200>
	    {
	        if(i%2)
 80024d4:	89bb      	ldrh	r3, [r7, #12]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00f      	beq.n	8002500 <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 80024e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e2:	89bb      	ldrh	r3, [r7, #12]
 80024e4:	085b      	lsrs	r3, r3, #1
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4413      	add	r3, r2
 80024ec:	881a      	ldrh	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80024f4:	4619      	mov	r1, r3
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	440b      	add	r3, r1
 80024fc:	74da      	strb	r2, [r3, #19]
 80024fe:	e010      	b.n	8002522 <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 8002500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002502:	89bb      	ldrh	r3, [r7, #12]
 8002504:	085b      	lsrs	r3, r3, #1
 8002506:	b29b      	uxth	r3, r3
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	b29a      	uxth	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002518:	4619      	mov	r1, r3
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	440b      	add	r3, r1
 8002520:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002528:	3301      	adds	r3, #1
 800252a:	b2da      	uxtb	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8002532:	89bb      	ldrh	r3, [r7, #12]
 8002534:	3301      	adds	r3, #1
 8002536:	81bb      	strh	r3, [r7, #12]
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	b29b      	uxth	r3, r3
 800253c:	89ba      	ldrh	r2, [r7, #12]
 800253e:	429a      	cmp	r2, r3
 8002540:	d3c8      	bcc.n	80024d4 <SendQuery+0x19c>
	    }
	    break;
 8002542:	e04a      	b.n	80025da <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8002544:	8c3b      	ldrh	r3, [r7, #32]
 8002546:	0a1b      	lsrs	r3, r3, #8
 8002548:	b29b      	uxth	r3, r3
 800254a:	b2da      	uxtb	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8002550:	8c3b      	ldrh	r3, [r7, #32]
 8002552:	b2da      	uxtb	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8002558:	8c3b      	ldrh	r3, [r7, #32]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	b2da      	uxtb	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2207      	movs	r2, #7
 8002568:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800256c:	2300      	movs	r3, #0
 800256e:	817b      	strh	r3, [r7, #10]
 8002570:	e02e      	b.n	80025d0 <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 8002572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002574:	897b      	ldrh	r3, [r7, #10]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4413      	add	r3, r2
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	b29a      	uxth	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002586:	4619      	mov	r1, r3
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	440b      	add	r3, r1
 800258e:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002596:	3301      	adds	r3, #1
 8002598:	b2da      	uxtb	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 80025a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025a2:	897b      	ldrh	r3, [r7, #10]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	881a      	ldrh	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80025b0:	4619      	mov	r1, r3
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	440b      	add	r3, r1
 80025b8:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80025c0:	3301      	adds	r3, #1
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 80025ca:	897b      	ldrh	r3, [r7, #10]
 80025cc:	3301      	adds	r3, #1
 80025ce:	817b      	strh	r3, [r7, #10]
 80025d0:	8c3b      	ldrh	r3, [r7, #32]
 80025d2:	897a      	ldrh	r2, [r7, #10]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d3cc      	bcc.n	8002572 <SendQuery+0x23a>
	    }
	    break;
 80025d8:	bf00      	nop
	}


	sendTxBuffer(modH);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fc02 	bl	8002de4 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 80025e6:	2300      	movs	r3, #0
 80025e8:	2200      	movs	r2, #0
 80025ea:	2100      	movs	r1, #0
 80025ec:	f010 fe42 	bl	8013274 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
	modH->i8lastError = 0;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	749a      	strb	r2, [r3, #18]
	return 0;
 80025fe:	2300      	movs	r3, #0


}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800260a:	b004      	add	sp, #16
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop

08002610 <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08c      	sub	sp, #48	@ 0x30
 8002614:	af02      	add	r7, sp, #8
 8002616:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	627b      	str	r3, [r7, #36]	@ 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 800261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002622:	f107 010c 	add.w	r1, r7, #12
 8002626:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800262a:	4618      	mov	r0, r3
 800262c:	f011 f852 	bl	80136d4 <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     /*Wait period of silence between modbus frame */
	 if(modH->port->Init.BaudRate <= 19200)
 8002630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 800263a:	d80b      	bhi.n	8002654 <StartTaskModbusMaster+0x44>
	 	osDelay((int)(35000/modH->port->Init.BaudRate) + 2);
 800263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f648 02b8 	movw	r2, #35000	@ 0x88b8
 8002646:	fbb2 f3f3 	udiv	r3, r2, r3
 800264a:	3302      	adds	r3, #2
 800264c:	4618      	mov	r0, r3
 800264e:	f00f ff29 	bl	80124a4 <osDelay>
 8002652:	e002      	b.n	800265a <StartTaskModbusMaster+0x4a>
	 else
	 	osDelay(3);
 8002654:	2003      	movs	r0, #3
 8002656:	f00f ff25 	bl	80124a4 <osDelay>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	f107 030c 	add.w	r3, r7, #12
 8002662:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002664:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002666:	f7ff fe67 	bl	8002338 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800266a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800266e:	2001      	movs	r0, #1
 8002670:	f012 fd3a 	bl	80150e8 <ulTaskNotifyTake>
 8002674:	6238      	str	r0, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	2200      	movs	r2, #0
 800267a:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d017      	beq.n	80026b2 <StartTaskModbusMaster+0xa2>
      {
    	  modH->i8state = COM_IDLE;
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	2200      	movs	r2, #0
 8002686:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	2211      	movs	r2, #17
 800268e:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8002690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002692:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002696:	3301      	adds	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80026a0:	69b8      	ldr	r0, [r7, #24]
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	7c9b      	ldrb	r3, [r3, #18]
 80026a6:	4619      	mov	r1, r3
 80026a8:	2300      	movs	r3, #0
 80026aa:	2203      	movs	r2, #3
 80026ac:	f012 fd68 	bl	8015180 <xTaskGenericNotify>
    	  continue;
 80026b0:	e096      	b.n	80027e0 <StartTaskModbusMaster+0x1d0>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 80026b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026b4:	f000 f98c 	bl	80029d0 <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80026be:	2b05      	cmp	r3, #5
 80026c0:	d817      	bhi.n	80026f2 <StartTaskModbusMaster+0xe2>

		  modH->i8state = COM_IDLE;
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	220f      	movs	r2, #15
 80026ce:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80026d6:	3301      	adds	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80026e0:	69b8      	ldr	r0, [r7, #24]
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	7c9b      	ldrb	r3, [r3, #18]
 80026e6:	4619      	mov	r1, r3
 80026e8:	2300      	movs	r3, #0
 80026ea:	2203      	movs	r2, #3
 80026ec:	f012 fd48 	bl	8015180 <xTaskGenericNotify>
		  continue;
 80026f0:	e076      	b.n	80027e0 <StartTaskModbusMaster+0x1d0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 80026f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f4:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 80026f8:	2300      	movs	r3, #0
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	2300      	movs	r3, #0
 80026fe:	2200      	movs	r2, #0
 8002700:	2103      	movs	r1, #3
 8002702:	f012 ffe1 	bl	80156c8 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 8002706:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002708:	f000 f8f2 	bl	80028f0 <validateAnswer>
 800270c:	4603      	mov	r3, r0
 800270e:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 8002710:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00f      	beq.n	8002738 <StartTaskModbusMaster+0x128>
	  {
		 modH->i8state = COM_IDLE;
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	2200      	movs	r2, #0
 800271c:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
         modH->i8lastError = u8exception;
 8002720:	7ffa      	ldrb	r2, [r7, #31]
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8002726:	69b8      	ldr	r0, [r7, #24]
 8002728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272a:	7c9b      	ldrb	r3, [r3, #18]
 800272c:	4619      	mov	r1, r3
 800272e:	2300      	movs	r3, #0
 8002730:	2203      	movs	r2, #3
 8002732:	f012 fd25 	bl	8015180 <xTaskGenericNotify>
	     continue;
 8002736:	e053      	b.n	80027e0 <StartTaskModbusMaster+0x1d0>
	  }

	  modH->i8lastError = u8exception;
 8002738:	7ffa      	ldrb	r2, [r7, #31]
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002744:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002748:	4618      	mov	r0, r3
 800274a:	f011 f8a5 	bl	8013898 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	7d1b      	ldrb	r3, [r3, #20]
 8002752:	3b01      	subs	r3, #1
 8002754:	2b0f      	cmp	r3, #15
 8002756:	d82b      	bhi.n	80027b0 <StartTaskModbusMaster+0x1a0>
 8002758:	a201      	add	r2, pc, #4	@ (adr r2, 8002760 <StartTaskModbusMaster+0x150>)
 800275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275e:	bf00      	nop
 8002760:	080027a1 	.word	0x080027a1
 8002764:	080027a1 	.word	0x080027a1
 8002768:	080027a9 	.word	0x080027a9
 800276c:	080027a9 	.word	0x080027a9
 8002770:	080027b1 	.word	0x080027b1
 8002774:	080027b1 	.word	0x080027b1
 8002778:	080027b1 	.word	0x080027b1
 800277c:	080027b1 	.word	0x080027b1
 8002780:	080027b1 	.word	0x080027b1
 8002784:	080027b1 	.word	0x080027b1
 8002788:	080027b1 	.word	0x080027b1
 800278c:	080027b1 	.word	0x080027b1
 8002790:	080027b1 	.word	0x080027b1
 8002794:	080027b1 	.word	0x080027b1
 8002798:	080027b1 	.word	0x080027b1
 800279c:	080027b1 	.word	0x080027b1
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 80027a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80027a2:	f000 f81f 	bl	80027e4 <get_FC1>
	      break;
 80027a6:	e004      	b.n	80027b2 <StartTaskModbusMaster+0x1a2>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 80027a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80027aa:	f000 f872 	bl	8002892 <get_FC3>
	      break;
 80027ae:	e000      	b.n	80027b2 <StartTaskModbusMaster+0x1a2>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 80027b0:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7

	  if (modH->i8lastError ==0) // no error, we use OP_OK_QUERY, since we need to use a different value than 0 to detect the timeout
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	7c9b      	ldrb	r3, [r3, #18]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10d      	bne.n	80027de <StartTaskModbusMaster+0x1ce>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 80027c8:	2300      	movs	r3, #0
 80027ca:	2200      	movs	r2, #0
 80027cc:	2100      	movs	r1, #0
 80027ce:	f010 fd51 	bl	8013274 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, OP_OK_QUERY, eSetValueWithOverwrite);
 80027d2:	69b8      	ldr	r0, [r7, #24]
 80027d4:	2300      	movs	r3, #0
 80027d6:	2203      	movs	r2, #3
 80027d8:	2114      	movs	r1, #20
 80027da:	f012 fcd1 	bl	8015180 <xTaskGenericNotify>
	  }


	  continue;
 80027de:	bf00      	nop
  {
 80027e0:	e71c      	b.n	800261c <StartTaskModbusMaster+0xc>
 80027e2:	bf00      	nop

080027e4 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 80027ec:	2303      	movs	r3, #3
 80027ee:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 80027f0:	2300      	movs	r3, #0
 80027f2:	73fb      	strb	r3, [r7, #15]
 80027f4:	e043      	b.n	800287e <get_FC1+0x9a>

        if(i%2)
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d01c      	beq.n	800283c <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 8002802:	7bfa      	ldrb	r2, [r7, #15]
 8002804:	7bbb      	ldrb	r3, [r7, #14]
 8002806:	4413      	add	r3, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	4413      	add	r3, r2
 800280c:	7cd8      	ldrb	r0, [r3, #19]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	085b      	lsrs	r3, r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4413      	add	r3, r2
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	b2d9      	uxtb	r1, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	085b      	lsrs	r3, r3, #1
 800282c:	b2db      	uxtb	r3, r3
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	18d4      	adds	r4, r2, r3
 8002832:	f000 fa5f 	bl	8002cf4 <word>
 8002836:	4603      	mov	r3, r0
 8002838:	8023      	strh	r3, [r4, #0]
 800283a:	e01d      	b.n	8002878 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	085b      	lsrs	r3, r3, #1
 8002846:	b2db      	uxtb	r3, r3
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	0a1b      	lsrs	r3, r3, #8
 8002850:	b29b      	uxth	r3, r3
 8002852:	b2d8      	uxtb	r0, r3
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	7bbb      	ldrb	r3, [r7, #14]
 8002858:	4413      	add	r3, r2
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	7cd9      	ldrb	r1, [r3, #19]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	b2db      	uxtb	r3, r3
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	18d4      	adds	r4, r2, r3
 8002870:	f000 fa40 	bl	8002cf4 <word>
 8002874:	4603      	mov	r3, r0
 8002876:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	3301      	adds	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	7d5b      	ldrb	r3, [r3, #21]
 8002882:	7bfa      	ldrb	r2, [r7, #15]
 8002884:	429a      	cmp	r2, r3
 8002886:	d3b6      	bcc.n	80027f6 <get_FC1+0x12>
        }

     }
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	bd90      	pop	{r4, r7, pc}

08002892 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8002892:	b590      	push	{r4, r7, lr}
 8002894:	b085      	sub	sp, #20
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800289a:	2303      	movs	r3, #3
 800289c:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800289e:	2300      	movs	r3, #0
 80028a0:	73bb      	strb	r3, [r7, #14]
 80028a2:	e018      	b.n	80028d6 <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	7cd8      	ldrb	r0, [r3, #19]
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	3301      	adds	r3, #1
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	7cd9      	ldrb	r1, [r3, #19]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80028bc:	7bbb      	ldrb	r3, [r7, #14]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	18d4      	adds	r4, r2, r3
 80028c2:	f000 fa17 	bl	8002cf4 <word>
 80028c6:	4603      	mov	r3, r0
 80028c8:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	3302      	adds	r3, #2
 80028ce:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 80028d0:	7bbb      	ldrb	r3, [r7, #14]
 80028d2:	3301      	adds	r3, #1
 80028d4:	73bb      	strb	r3, [r7, #14]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7d5b      	ldrb	r3, [r3, #21]
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	7bba      	ldrb	r2, [r7, #14]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d3df      	bcc.n	80028a4 <get_FC3+0x12>
    }
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd90      	pop	{r4, r7, pc}
	...

080028f0 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80028fe:	3b02      	subs	r3, #2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	4413      	add	r3, r2
 8002904:	7cdb      	ldrb	r3, [r3, #19]
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8002906:	b21b      	sxth	r3, r3
 8002908:	021b      	lsls	r3, r3, #8
 800290a:	b21a      	sxth	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002912:	3b01      	subs	r3, #1
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	440b      	add	r3, r1
 8002918:	7cdb      	ldrb	r3, [r3, #19]
 800291a:	b21b      	sxth	r3, r3
 800291c:	4313      	orrs	r3, r2
 800291e:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 8002920:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f103 0213 	add.w	r2, r3, #19
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800292e:	3b02      	subs	r3, #2
 8002930:	b2db      	uxtb	r3, r3
 8002932:	4619      	mov	r1, r3
 8002934:	4610      	mov	r0, r2
 8002936:	f000 f9f0 	bl	8002d1a <calcCRC>
 800293a:	4603      	mov	r3, r0
 800293c:	461a      	mov	r2, r3
 800293e:	89bb      	ldrh	r3, [r7, #12]
 8002940:	4293      	cmp	r3, r2
 8002942:	d009      	beq.n	8002958 <validateAnswer+0x68>
    {
    	modH->u16errCnt ++;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800294a:	3301      	adds	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return ERR_BAD_CRC;
 8002954:	230d      	movs	r3, #13
 8002956:	e034      	b.n	80029c2 <validateAnswer+0xd2>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	7d1b      	ldrb	r3, [r3, #20]
 800295c:	b25b      	sxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	da09      	bge.n	8002976 <validateAnswer+0x86>
    {
    	modH->u16errCnt ++;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002968:	3301      	adds	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return ERR_EXCEPTION;
 8002972:	230e      	movs	r3, #14
 8002974:	e025      	b.n	80029c2 <validateAnswer+0xd2>
    }

    // check fct code
    bool isSupported = false;
 8002976:	2300      	movs	r3, #0
 8002978:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800297a:	2300      	movs	r3, #0
 800297c:	73bb      	strb	r3, [r7, #14]
 800297e:	e00c      	b.n	800299a <validateAnswer+0xaa>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8002980:	7bbb      	ldrb	r3, [r7, #14]
 8002982:	4a12      	ldr	r2, [pc, #72]	@ (80029cc <validateAnswer+0xdc>)
 8002984:	5cd2      	ldrb	r2, [r2, r3]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	7d1b      	ldrb	r3, [r3, #20]
 800298a:	429a      	cmp	r2, r3
 800298c:	d102      	bne.n	8002994 <validateAnswer+0xa4>
        {
            isSupported = 1;
 800298e:	2301      	movs	r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
            break;
 8002992:	e005      	b.n	80029a0 <validateAnswer+0xb0>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8002994:	7bbb      	ldrb	r3, [r7, #14]
 8002996:	3301      	adds	r3, #1
 8002998:	73bb      	strb	r3, [r7, #14]
 800299a:	7bbb      	ldrb	r3, [r7, #14]
 800299c:	2b07      	cmp	r3, #7
 800299e:	d9ef      	bls.n	8002980 <validateAnswer+0x90>
        }
    }
    if (!isSupported)
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	f083 0301 	eor.w	r3, r3, #1
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d009      	beq.n	80029c0 <validateAnswer+0xd0>
    {
    	modH->u16errCnt ++;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80029b2:	3301      	adds	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return EXC_FUNC_CODE;
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <validateAnswer+0xd2>
    }

    return 0; // OK, no exception code thrown
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	08017e20 	.word	0x08017e20

080029d0 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d104      	bne.n	80029ec <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f008 fe6e 	bl	800b6c8 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <getRxBuffer+0x36>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	33c0      	adds	r3, #192	@ 0xc0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff f981 	bl	8001d02 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 8002a00:	230c      	movs	r3, #12
 8002a02:	81fb      	strh	r3, [r7, #14]
 8002a04:	e019      	b.n	8002a3a <getRxBuffer+0x6a>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3313      	adds	r3, #19
 8002a10:	4619      	mov	r1, r3
 8002a12:	4610      	mov	r0, r2
 8002a14:	f7ff f90f 	bl	8001c36 <RingGetAllBytes>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
		modH->u16InCnt++;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8002a28:	3301      	adds	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
		i16result = modH->u8BufferSize;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002a38:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d107      	bne.n	8002a54 <getRxBuffer+0x84>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6858      	ldr	r0, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	33a6      	adds	r3, #166	@ 0xa6
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f008 fdee 	bl	800b630 <HAL_UART_Receive_IT>
	}

    return i16result;
 8002a54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002a6e:	3b02      	subs	r3, #2
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	4413      	add	r3, r2
 8002a74:	7cdb      	ldrb	r3, [r3, #19]
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8002a76:	b21b      	sxth	r3, r3
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	b21a      	sxth	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002a82:	3b01      	subs	r3, #1
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	440b      	add	r3, r1
 8002a88:	7cdb      	ldrb	r3, [r3, #19]
 8002a8a:	b21b      	sxth	r3, r3
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8002a90:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f103 0213 	add.w	r2, r3, #19
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002a9e:	3b02      	subs	r3, #2
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	f000 f938 	bl	8002d1a <calcCRC>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	461a      	mov	r2, r3
 8002aae:	893b      	ldrh	r3, [r7, #8]
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d009      	beq.n	8002ac8 <validateRequest+0x68>
	    {
	       		modH->u16errCnt ++;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002aba:	3301      	adds	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	       		return ERR_BAD_CRC;
 8002ac4:	230d      	movs	r3, #13
 8002ac6:	e10e      	b.n	8002ce6 <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8002acc:	2300      	movs	r3, #0
 8002ace:	73bb      	strb	r3, [r7, #14]
 8002ad0:	e00c      	b.n	8002aec <validateRequest+0x8c>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8002ad2:	7bbb      	ldrb	r3, [r7, #14]
 8002ad4:	4a86      	ldr	r2, [pc, #536]	@ (8002cf0 <validateRequest+0x290>)
 8002ad6:	5cd2      	ldrb	r2, [r2, r3]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	7d1b      	ldrb	r3, [r3, #20]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d102      	bne.n	8002ae6 <validateRequest+0x86>
	        {
	            isSupported = 1;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
	            break;
 8002ae4:	e005      	b.n	8002af2 <validateRequest+0x92>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8002ae6:	7bbb      	ldrb	r3, [r7, #14]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	73bb      	strb	r3, [r7, #14]
 8002aec:	7bbb      	ldrb	r3, [r7, #14]
 8002aee:	2b07      	cmp	r3, #7
 8002af0:	d9ef      	bls.n	8002ad2 <validateRequest+0x72>
	        }
	    }
	    if (!isSupported)
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	f083 0301 	eor.w	r3, r3, #1
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <validateRequest+0xb2>
	    {
	    	modH->u16errCnt ++;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002b04:	3301      	adds	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	        return EXC_FUNC_CODE;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e0e9      	b.n	8002ce6 <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	7d1b      	ldrb	r3, [r3, #20]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	2b0f      	cmp	r3, #15
 8002b22:	f200 80df 	bhi.w	8002ce4 <validateRequest+0x284>
 8002b26:	a201      	add	r2, pc, #4	@ (adr r2, 8002b2c <validateRequest+0xcc>)
 8002b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2c:	08002b6d 	.word	0x08002b6d
 8002b30:	08002b6d 	.word	0x08002b6d
 8002b34:	08002c85 	.word	0x08002c85
 8002b38:	08002c85 	.word	0x08002c85
 8002b3c:	08002c19 	.word	0x08002c19
 8002b40:	08002c61 	.word	0x08002c61
 8002b44:	08002ce5 	.word	0x08002ce5
 8002b48:	08002ce5 	.word	0x08002ce5
 8002b4c:	08002ce5 	.word	0x08002ce5
 8002b50:	08002ce5 	.word	0x08002ce5
 8002b54:	08002ce5 	.word	0x08002ce5
 8002b58:	08002ce5 	.word	0x08002ce5
 8002b5c:	08002ce5 	.word	0x08002ce5
 8002b60:	08002ce5 	.word	0x08002ce5
 8002b64:	08002b6d 	.word	0x08002b6d
 8002b68:	08002c85 	.word	0x08002c85
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	7d5a      	ldrb	r2, [r3, #21]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	7d9b      	ldrb	r3, [r3, #22]
 8002b74:	4619      	mov	r1, r3
 8002b76:	4610      	mov	r0, r2
 8002b78:	f000 f8bc 	bl	8002cf4 <word>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	091b      	lsrs	r3, r3, #4
 8002b80:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	7dda      	ldrb	r2, [r3, #23]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	7e1b      	ldrb	r3, [r3, #24]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	f000 f8b1 	bl	8002cf4 <word>
 8002b92:	4603      	mov	r3, r0
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	7dda      	ldrb	r2, [r3, #23]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	7e1b      	ldrb	r3, [r3, #24]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	f000 f8a6 	bl	8002cf4 <word>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <validateRequest+0x15a>
 8002bb4:	897b      	ldrh	r3, [r7, #10]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 8002bba:	89ba      	ldrh	r2, [r7, #12]
 8002bbc:	897b      	ldrh	r3, [r7, #10]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	@ 0xa4
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	dd01      	ble.n	8002bce <validateRequest+0x16e>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e08b      	b.n	8002ce6 <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	7dda      	ldrb	r2, [r3, #23]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7e1b      	ldrb	r3, [r3, #24]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4610      	mov	r0, r2
 8002bda:	f000 f88b 	bl	8002cf4 <word>
 8002bde:	4603      	mov	r3, r0
 8002be0:	08db      	lsrs	r3, r3, #3
 8002be2:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	7dda      	ldrb	r2, [r3, #23]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	7e1b      	ldrb	r3, [r3, #24]
 8002bec:	4619      	mov	r1, r3
 8002bee:	4610      	mov	r0, r2
 8002bf0:	f000 f880 	bl	8002cf4 <word>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <validateRequest+0x1a6>
 8002c00:	897b      	ldrh	r3, [r7, #10]
 8002c02:	3301      	adds	r3, #1
 8002c04:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 8002c06:	897b      	ldrh	r3, [r7, #10]
 8002c08:	3305      	adds	r3, #5
 8002c0a:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8002c0c:	897b      	ldrh	r3, [r7, #10]
 8002c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c12:	d960      	bls.n	8002cd6 <validateRequest+0x276>
 8002c14:	2303      	movs	r3, #3
 8002c16:	e066      	b.n	8002ce6 <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	7d5a      	ldrb	r2, [r3, #21]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	7d9b      	ldrb	r3, [r3, #22]
 8002c20:	4619      	mov	r1, r3
 8002c22:	4610      	mov	r0, r2
 8002c24:	f000 f866 	bl	8002cf4 <word>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	091b      	lsrs	r3, r3, #4
 8002c2c:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	7d5a      	ldrb	r2, [r3, #21]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	7d9b      	ldrb	r3, [r3, #22]
 8002c36:	4619      	mov	r1, r3
 8002c38:	4610      	mov	r0, r2
 8002c3a:	f000 f85b 	bl	8002cf4 <word>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <validateRequest+0x1f0>
 8002c4a:	89bb      	ldrh	r3, [r7, #12]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs >= modH->u16regsize) return EXC_ADDR_RANGE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8002c56:	89ba      	ldrh	r2, [r7, #12]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d33e      	bcc.n	8002cda <validateRequest+0x27a>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e042      	b.n	8002ce6 <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	7d5a      	ldrb	r2, [r3, #21]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	7d9b      	ldrb	r3, [r3, #22]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	f000 f842 	bl	8002cf4 <word>
 8002c70:	4603      	mov	r3, r0
 8002c72:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs >= modH-> u16regsize) return EXC_ADDR_RANGE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8002c7a:	89ba      	ldrh	r2, [r7, #12]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d32e      	bcc.n	8002cde <validateRequest+0x27e>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e030      	b.n	8002ce6 <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7d5a      	ldrb	r2, [r3, #21]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	7d9b      	ldrb	r3, [r3, #22]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4610      	mov	r0, r2
 8002c90:	f000 f830 	bl	8002cf4 <word>
 8002c94:	4603      	mov	r3, r0
 8002c96:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	7dda      	ldrb	r2, [r3, #23]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	7e1b      	ldrb	r3, [r3, #24]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	f000 f826 	bl	8002cf4 <word>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8002cac:	89ba      	ldrh	r2, [r7, #12]
 8002cae:	897b      	ldrh	r3, [r7, #10]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	@ 0xa4
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	dd01      	ble.n	8002cc0 <validateRequest+0x260>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e012      	b.n	8002ce6 <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8002cc0:	897b      	ldrh	r3, [r7, #10]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3305      	adds	r3, #5
 8002cc8:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8002cca:	897b      	ldrh	r3, [r7, #10]
 8002ccc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cd0:	d907      	bls.n	8002ce2 <validateRequest+0x282>
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e007      	b.n	8002ce6 <validateRequest+0x286>
	        break;
 8002cd6:	bf00      	nop
 8002cd8:	e004      	b.n	8002ce4 <validateRequest+0x284>
	        break;
 8002cda:	bf00      	nop
 8002cdc:	e002      	b.n	8002ce4 <validateRequest+0x284>
	        break;
 8002cde:	bf00      	nop
 8002ce0:	e000      	b.n	8002ce4 <validateRequest+0x284>
	        break;
 8002ce2:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8002ce4:	2300      	movs	r3, #0

}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	08017e20 	.word	0x08017e20

08002cf4 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	460a      	mov	r2, r1
 8002cfe:	71fb      	strb	r3, [r7, #7]
 8002d00:	4613      	mov	r3, r2
 8002d02:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8002d04:	79bb      	ldrb	r3, [r7, #6]
 8002d06:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8002d0c:	89bb      	ldrh	r3, [r7, #12]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b087      	sub	sp, #28
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8002d26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d2a:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	74fb      	strb	r3, [r7, #19]
 8002d30:	e022      	b.n	8002d78 <calcCRC+0x5e>
    {
        temp = temp ^ Buffer[i];
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	4413      	add	r3, r2
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	4053      	eors	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8002d42:	2301      	movs	r3, #1
 8002d44:	74bb      	strb	r3, [r7, #18]
 8002d46:	e011      	b.n	8002d6c <calcCRC+0x52>
        {
            flag = temp & 0x0001;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	085b      	lsrs	r3, r3, #1
 8002d54:	617b      	str	r3, [r7, #20]
            if (flag)
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d004      	beq.n	8002d66 <calcCRC+0x4c>
                temp ^= 0xA001;
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	f24a 0301 	movw	r3, #40961	@ 0xa001
 8002d62:	4053      	eors	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8002d66:	7cbb      	ldrb	r3, [r7, #18]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	74bb      	strb	r3, [r7, #18]
 8002d6c:	7cbb      	ldrb	r3, [r7, #18]
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d9ea      	bls.n	8002d48 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8002d72:	7cfb      	ldrb	r3, [r7, #19]
 8002d74:	3301      	adds	r3, #1
 8002d76:	74fb      	strb	r3, [r7, #19]
 8002d78:	7cfa      	ldrb	r2, [r7, #19]
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d3d8      	bcc.n	8002d32 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	b29b      	uxth	r3, r3

}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8002da6:	b480      	push	{r7}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	4603      	mov	r3, r0
 8002dae:	6039      	str	r1, [r7, #0]
 8002db0:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	7d1b      	ldrb	r3, [r3, #20]
 8002db6:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	7a1a      	ldrb	r2, [r3, #8]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	3b80      	subs	r3, #128	@ 0x80
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	79fa      	ldrb	r2, [r7, #7]
 8002dce:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8002de4:	b590      	push	{r4, r7, lr}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	6078      	str	r0, [r7, #4]
    // when in slaveType and u8AddressMode == ADDRESS_BROADCAST, do not send anything
    if (modH->uModbusType == MB_SLAVE && modH->u8AddressMode == ADDRESS_BROADCAST)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d111      	bne.n	8002e18 <sendTxBuffer+0x34>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10c      	bne.n	8002e18 <sendTxBuffer+0x34>
    {
        modH->u8BufferSize = 0;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
        // increase message counter
        modH->u16OutCnt++;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
        return;
 8002e16:	e086      	b.n	8002f26 <sendTxBuffer+0x142>
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f103 0213 	add.w	r2, r3, #19
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002e24:	4619      	mov	r1, r3
 8002e26:	4610      	mov	r0, r2
 8002e28:	f7ff ff77 	bl	8002d1a <calcCRC>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8002e30:	89fb      	ldrh	r3, [r7, #14]
 8002e32:	0a1b      	lsrs	r3, r3, #8
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	440b      	add	r3, r1
 8002e44:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	89fb      	ldrh	r3, [r7, #14]
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	440b      	add	r3, r1
 8002e66:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002e6e:	3301      	adds	r3, #1
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00c      	beq.n	8002e9a <sendTxBuffer+0xb6>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f009 f8c7 	bl	800c018 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68d8      	ldr	r0, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	8a1b      	ldrh	r3, [r3, #16]
 8002e92:	2201      	movs	r2, #1
 8002e94:	4619      	mov	r1, r3
 8002e96:	f002 f88b 	bl	8004fb0 <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6858      	ldr	r0, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f103 0113 	add.w	r1, r3, #19
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f008 fb2c 	bl	800b508 <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8002eb0:	21fa      	movs	r1, #250	@ 0xfa
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	f012 f918 	bl	80150e8 <ulTaskNotifyTake>
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx) || defined(STM32F7) || defined(STM32WB) || defined(STM32G070xx) || defined(STM32F0) || defined(STM32G431xx) || defined(STM32H5)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 8002eb8:	bf00      	nop
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f7      	beq.n	8002eba <sendTxBuffer+0xd6>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00c      	beq.n	8002eec <sendTxBuffer+0x108>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68d8      	ldr	r0, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	8a1b      	ldrh	r3, [r3, #16]
 8002eda:	2200      	movs	r2, #0
 8002edc:	4619      	mov	r1, r3
 8002ede:	f002 f867 	bl	8004fb0 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f009 f8ea 	bl	800c0c0 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d10c      	bne.n	8002f0e <sendTxBuffer+0x12a>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8d3 40b8 	ldr.w	r4, [r3, #184]	@ 0xb8
 8002efa:	f011 fb43 	bl	8014584 <xTaskGetTickCount>
 8002efe:	4602      	mov	r2, r0
 8002f00:	2300      	movs	r3, #0
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	2300      	movs	r3, #0
 8002f06:	2102      	movs	r1, #2
 8002f08:	4620      	mov	r0, r4
 8002f0a:	f012 fbdd 	bl	80156c8 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
     // increase message counter
     modH->u16OutCnt++;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e


}
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd90      	pop	{r4, r7, pc}

08002f2c <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	7d5a      	ldrb	r2, [r3, #21]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7d9b      	ldrb	r3, [r3, #22]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	f7ff fed8 	bl	8002cf4 <word>
 8002f44:	4603      	mov	r3, r0
 8002f46:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	7dda      	ldrb	r2, [r3, #23]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7e1b      	ldrb	r3, [r3, #24]
 8002f50:	4619      	mov	r1, r3
 8002f52:	4610      	mov	r0, r2
 8002f54:	f7ff fece 	bl	8002cf4 <word>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8002f5c:	8a3b      	ldrh	r3, [r7, #16]
 8002f5e:	08db      	lsrs	r3, r3, #3
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8002f64:	8a3b      	ldrh	r3, [r7, #16]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <process_FC1+0x4a>
 8002f70:	7dfb      	ldrb	r3, [r7, #23]
 8002f72:	3301      	adds	r3, #1
 8002f74:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	7dfa      	ldrb	r2, [r7, #23]
 8002f7a:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2203      	movs	r2, #3
 8002f80:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
 8002f8e:	4413      	add	r3, r2
 8002f90:	3b01      	subs	r3, #1
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	2200      	movs	r2, #0
 8002f98:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	82bb      	strh	r3, [r7, #20]
 8002fa2:	e058      	b.n	8003056 <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8002fa4:	8a7a      	ldrh	r2, [r7, #18]
 8002fa6:	8abb      	ldrh	r3, [r7, #20]
 8002fa8:	4413      	add	r3, r2
 8002faa:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 8002fac:	89bb      	ldrh	r3, [r7, #12]
 8002fae:	091b      	lsrs	r3, r3, #4
 8002fb0:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8002fb2:	89bb      	ldrh	r3, [r7, #12]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	727b      	strb	r3, [r7, #9]

        bitWrite(
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002fc2:	897b      	ldrh	r3, [r7, #10]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	7a7b      	ldrb	r3, [r7, #9]
 8002fce:	fa42 f303 	asr.w	r3, r2, r3
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d014      	beq.n	8003004 <process_FC1+0xd8>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	7cda      	ldrb	r2, [r3, #19]
 8002fe8:	7dbb      	ldrb	r3, [r7, #22]
 8002fea:	2101      	movs	r1, #1
 8002fec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	f891 1093 	ldrb.w	r1, [r1, #147]	@ 0x93
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	440b      	add	r3, r1
 8003000:	74da      	strb	r2, [r3, #19]
 8003002:	e015      	b.n	8003030 <process_FC1+0x104>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800300a:	461a      	mov	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4413      	add	r3, r2
 8003010:	7cda      	ldrb	r2, [r3, #19]
 8003012:	7dbb      	ldrb	r3, [r7, #22]
 8003014:	2101      	movs	r1, #1
 8003016:	fa01 f303 	lsl.w	r3, r1, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	f891 1093 	ldrb.w	r1, [r1, #147]	@ 0x93
 8003026:	4013      	ands	r3, r2
 8003028:	b2da      	uxtb	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	440b      	add	r3, r1
 800302e:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8003030:	7dbb      	ldrb	r3, [r7, #22]
 8003032:	3301      	adds	r3, #1
 8003034:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8003036:	7dbb      	ldrb	r3, [r7, #22]
 8003038:	2b07      	cmp	r3, #7
 800303a:	d909      	bls.n	8003050 <process_FC1+0x124>
        {
            u8bitsno = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003046:	3301      	adds	r3, #1
 8003048:	b2da      	uxtb	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8003050:	8abb      	ldrh	r3, [r7, #20]
 8003052:	3301      	adds	r3, #1
 8003054:	82bb      	strh	r3, [r7, #20]
 8003056:	8aba      	ldrh	r2, [r7, #20]
 8003058:	8a3b      	ldrh	r3, [r7, #16]
 800305a:	429a      	cmp	r2, r3
 800305c:	d3a2      	bcc.n	8002fa4 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 800305e:	8a3b      	ldrh	r3, [r7, #16]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <process_FC1+0x14e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003070:	3301      	adds	r3, #1
 8003072:	b2da      	uxtb	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003080:	3302      	adds	r3, #2
 8003082:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff fead 	bl	8002de4 <sendTxBuffer>
    return u8CopyBufferSize;
 800308a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	7d5a      	ldrb	r2, [r3, #21]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	7d9b      	ldrb	r3, [r3, #22]
 80030a6:	4619      	mov	r1, r3
 80030a8:	4610      	mov	r0, r2
 80030aa:	f7ff fe23 	bl	8002cf4 <word>
 80030ae:	4603      	mov	r3, r0
 80030b0:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	7dda      	ldrb	r2, [r3, #23]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	7e1b      	ldrb	r3, [r3, #24]
 80030ba:	4619      	mov	r1, r3
 80030bc:	4610      	mov	r0, r2
 80030be:	f7ff fe19 	bl	8002cf4 <word>
 80030c2:	4603      	mov	r3, r0
 80030c4:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 80030c6:	7afb      	ldrb	r3, [r7, #11]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2203      	movs	r2, #3
 80030d4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 80030d8:	89bb      	ldrh	r3, [r7, #12]
 80030da:	81fb      	strh	r3, [r7, #14]
 80030dc:	e032      	b.n	8003144 <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80030e4:	89fb      	ldrh	r3, [r7, #14]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	0a1b      	lsrs	r3, r3, #8
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80030f6:	4619      	mov	r1, r3
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	440b      	add	r3, r1
 80030fe:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003106:	3301      	adds	r3, #1
 8003108:	b2da      	uxtb	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003116:	89fb      	ldrh	r3, [r7, #14]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	4413      	add	r3, r2
 800311c:	881a      	ldrh	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003124:	4619      	mov	r1, r3
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	440b      	add	r3, r1
 800312c:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003134:	3301      	adds	r3, #1
 8003136:	b2da      	uxtb	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800313e:	89fb      	ldrh	r3, [r7, #14]
 8003140:	3301      	adds	r3, #1
 8003142:	81fb      	strh	r3, [r7, #14]
 8003144:	89fa      	ldrh	r2, [r7, #14]
 8003146:	89b9      	ldrh	r1, [r7, #12]
 8003148:	7afb      	ldrb	r3, [r7, #11]
 800314a:	440b      	add	r3, r1
 800314c:	429a      	cmp	r2, r3
 800314e:	dbc6      	blt.n	80030de <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003156:	3302      	adds	r3, #2
 8003158:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff fe42 	bl	8002de4 <sendTxBuffer>

    return u8CopyBufferSize;
 8003160:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	7d5a      	ldrb	r2, [r3, #21]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	7d9b      	ldrb	r3, [r3, #22]
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f7ff fdb8 	bl	8002cf4 <word>
 8003184:	4603      	mov	r3, r0
 8003186:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 8003188:	89fb      	ldrh	r3, [r7, #14]
 800318a:	091b      	lsrs	r3, r3, #4
 800318c:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 800318e:	89fb      	ldrh	r3, [r7, #14]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	7ddb      	ldrb	r3, [r3, #23]
 800319c:	2bff      	cmp	r3, #255	@ 0xff
 800319e:	d115      	bne.n	80031cc <process_FC5+0x60>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80031a6:	89bb      	ldrh	r3, [r7, #12]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4413      	add	r3, r2
 80031ac:	8819      	ldrh	r1, [r3, #0]
 80031ae:	7afb      	ldrb	r3, [r7, #11]
 80031b0:	2201      	movs	r2, #1
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 80031be:	89bb      	ldrh	r3, [r7, #12]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4403      	add	r3, r0
 80031c4:	430a      	orrs	r2, r1
 80031c6:	b292      	uxth	r2, r2
 80031c8:	801a      	strh	r2, [r3, #0]
 80031ca:	e016      	b.n	80031fa <process_FC5+0x8e>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80031d2:	89bb      	ldrh	r3, [r7, #12]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	8819      	ldrh	r1, [r3, #0]
 80031da:	7afb      	ldrb	r3, [r7, #11]
 80031dc:	2201      	movs	r2, #1
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 80031ee:	89bb      	ldrh	r3, [r7, #12]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	4403      	add	r3, r0
 80031f4:	400a      	ands	r2, r1
 80031f6:	b292      	uxth	r2, r2
 80031f8:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2206      	movs	r2, #6
 80031fe:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003208:	3302      	adds	r3, #2
 800320a:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff fde9 	bl	8002de4 <sendTxBuffer>

    return u8CopyBufferSize;
 8003212:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b084      	sub	sp, #16
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	7d5a      	ldrb	r2, [r3, #21]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	7d9b      	ldrb	r3, [r3, #22]
 800322e:	4619      	mov	r1, r3
 8003230:	4610      	mov	r0, r2
 8003232:	f7ff fd5f 	bl	8002cf4 <word>
 8003236:	4603      	mov	r3, r0
 8003238:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	7dda      	ldrb	r2, [r3, #23]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	7e1b      	ldrb	r3, [r3, #24]
 8003242:	4619      	mov	r1, r3
 8003244:	4610      	mov	r0, r2
 8003246:	f7ff fd55 	bl	8002cf4 <word>
 800324a:	4603      	mov	r3, r0
 800324c:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003254:	89fb      	ldrh	r3, [r7, #14]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4413      	add	r3, r2
 800325a:	89ba      	ldrh	r2, [r7, #12]
 800325c:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2206      	movs	r2, #6
 8003262:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800326c:	3302      	adds	r3, #2
 800326e:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff fdb7 	bl	8002de4 <sendTxBuffer>

    return u8CopyBufferSize;
 8003276:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b086      	sub	sp, #24
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	7d5a      	ldrb	r2, [r3, #21]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	7d9b      	ldrb	r3, [r3, #22]
 8003292:	4619      	mov	r1, r3
 8003294:	4610      	mov	r0, r2
 8003296:	f7ff fd2d 	bl	8002cf4 <word>
 800329a:	4603      	mov	r3, r0
 800329c:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	7dda      	ldrb	r2, [r3, #23]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	7e1b      	ldrb	r3, [r3, #24]
 80032a6:	4619      	mov	r1, r3
 80032a8:	4610      	mov	r0, r2
 80032aa:	f7ff fd23 	bl	8002cf4 <word>
 80032ae:	4603      	mov	r3, r0
 80032b0:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 80032b6:	2307      	movs	r3, #7
 80032b8:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80032ba:	2300      	movs	r3, #0
 80032bc:	82bb      	strh	r3, [r7, #20]
 80032be:	e058      	b.n	8003372 <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 80032c0:	8a7a      	ldrh	r2, [r7, #18]
 80032c2:	8abb      	ldrh	r3, [r7, #20]
 80032c4:	4413      	add	r3, r2
 80032c6:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 80032c8:	89bb      	ldrh	r3, [r7, #12]
 80032ca:	091b      	lsrs	r3, r3, #4
 80032cc:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 80032ce:	89bb      	ldrh	r3, [r7, #12]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 80032d8:	7dfb      	ldrb	r3, [r7, #23]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	7cdb      	ldrb	r3, [r3, #19]
 80032e0:	461a      	mov	r2, r3
 80032e2:	7dbb      	ldrb	r3, [r7, #22]
 80032e4:	fa42 f303 	asr.w	r3, r2, r3
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bf14      	ite	ne
 80032f0:	2301      	movne	r3, #1
 80032f2:	2300      	moveq	r3, #0
 80032f4:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 80032f6:	7a3b      	ldrb	r3, [r7, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d015      	beq.n	8003328 <process_FC15+0xa6>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003302:	897b      	ldrh	r3, [r7, #10]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	4413      	add	r3, r2
 8003308:	8819      	ldrh	r1, [r3, #0]
 800330a:	7a7b      	ldrb	r3, [r7, #9]
 800330c:	2201      	movs	r2, #1
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	b29a      	uxth	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 800331a:	897b      	ldrh	r3, [r7, #10]
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4403      	add	r3, r0
 8003320:	430a      	orrs	r2, r1
 8003322:	b292      	uxth	r2, r2
 8003324:	801a      	strh	r2, [r3, #0]
 8003326:	e016      	b.n	8003356 <process_FC15+0xd4>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800332e:	897b      	ldrh	r3, [r7, #10]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	8819      	ldrh	r1, [r3, #0]
 8003336:	7a7b      	ldrb	r3, [r7, #9]
 8003338:	2201      	movs	r2, #1
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	b29b      	uxth	r3, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	b29a      	uxth	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 800334a:	897b      	ldrh	r3, [r7, #10]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4403      	add	r3, r0
 8003350:	400a      	ands	r2, r1
 8003352:	b292      	uxth	r2, r2
 8003354:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8003356:	7dbb      	ldrb	r3, [r7, #22]
 8003358:	3301      	adds	r3, #1
 800335a:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800335c:	7dbb      	ldrb	r3, [r7, #22]
 800335e:	2b07      	cmp	r3, #7
 8003360:	d904      	bls.n	800336c <process_FC15+0xea>
        {
            u8bitsno = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 8003366:	7dfb      	ldrb	r3, [r7, #23]
 8003368:	3301      	adds	r3, #1
 800336a:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800336c:	8abb      	ldrh	r3, [r7, #20]
 800336e:	3301      	adds	r3, #1
 8003370:	82bb      	strh	r3, [r7, #20]
 8003372:	8aba      	ldrh	r2, [r7, #20]
 8003374:	8a3b      	ldrh	r3, [r7, #16]
 8003376:	429a      	cmp	r2, r3
 8003378:	d3a2      	bcc.n	80032c0 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2206      	movs	r2, #6
 800337e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003388:	3302      	adds	r3, #2
 800338a:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff fd29 	bl	8002de4 <sendTxBuffer>
    return u8CopyBufferSize;
 8003392:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b086      	sub	sp, #24
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	7d5b      	ldrb	r3, [r3, #21]
 80033aa:	b21b      	sxth	r3, r3
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	b21a      	sxth	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	7d9b      	ldrb	r3, [r3, #22]
 80033b4:	b21b      	sxth	r3, r3
 80033b6:	4313      	orrs	r3, r2
 80033b8:	b21b      	sxth	r3, r3
 80033ba:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	7ddb      	ldrb	r3, [r3, #23]
 80033c0:	b21b      	sxth	r3, r3
 80033c2:	021b      	lsls	r3, r3, #8
 80033c4:	b21a      	sxth	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	7e1b      	ldrb	r3, [r3, #24]
 80033ca:	b21b      	sxth	r3, r3
 80033cc:	4313      	orrs	r3, r2
 80033ce:	b21b      	sxth	r3, r3
 80033d0:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 80033d8:	8a7b      	ldrh	r3, [r7, #18]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2206      	movs	r2, #6
 80033e4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 80033e8:	2300      	movs	r3, #0
 80033ea:	82fb      	strh	r3, [r7, #22]
 80033ec:	e01d      	b.n	800342a <process_FC16+0x8c>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 80033ee:	8afb      	ldrh	r3, [r7, #22]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	3307      	adds	r3, #7
        temp = word(
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	4413      	add	r3, r2
 80033f8:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 80033fa:	8afb      	ldrh	r3, [r7, #22]
 80033fc:	3304      	adds	r3, #4
 80033fe:	005b      	lsls	r3, r3, #1
        temp = word(
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	4413      	add	r3, r2
 8003404:	7cdb      	ldrb	r3, [r3, #19]
 8003406:	4619      	mov	r1, r3
 8003408:	f7ff fc74 	bl	8002cf4 <word>
 800340c:	4603      	mov	r3, r0
 800340e:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003416:	8ab9      	ldrh	r1, [r7, #20]
 8003418:	8afb      	ldrh	r3, [r7, #22]
 800341a:	440b      	add	r3, r1
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	89fa      	ldrh	r2, [r7, #14]
 8003422:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 8003424:	8afb      	ldrh	r3, [r7, #22]
 8003426:	3301      	adds	r3, #1
 8003428:	82fb      	strh	r3, [r7, #22]
 800342a:	8afa      	ldrh	r2, [r7, #22]
 800342c:	8a7b      	ldrh	r3, [r7, #18]
 800342e:	429a      	cmp	r2, r3
 8003430:	d3dd      	bcc.n	80033ee <process_FC16+0x50>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003438:	3302      	adds	r3, #2
 800343a:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff fcd1 	bl	8002de4 <sendTxBuffer>

    return u8CopyBufferSize;
 8003442:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <_ZN6SensorC1Ev>:
 * The Sensor base class provides an implementation of getVelocity(), and takes care of counting full
 * revolutions in a precise way, but if you wish you can additionally override these methods to provide more
 * optimal implementations for your hardware.
 * 
 */
class Sensor{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	4a12      	ldr	r2, [pc, #72]	@ (80034a4 <_ZN6SensorC1Ev+0x54>)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a11      	ldr	r2, [pc, #68]	@ (80034a8 <_ZN6SensorC1Ev+0x58>)
 8003462:	605a      	str	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	60da      	str	r2, [r3, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	611a      	str	r2, [r3, #16]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	615a      	str	r2, [r3, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	619a      	str	r2, [r3, #24]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	61da      	str	r2, [r3, #28]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	621a      	str	r2, [r3, #32]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	08017e68 	.word	0x08017e68
 80034a8:	38d1b717 	.word	0x38d1b717

080034ac <_ZN21ModbusAbsoluteEncoderC1EP17TIM_HandleTypeDefh>:
#include <cstdio>
#include "retarget.h"
// Define static constant
const float ModbusAbsoluteEncoder::RADIANS_PER_COUNT = 2.0f * M_PI / ModbusAbsoluteEncoder::ENCODER_RESOLUTION;

ModbusAbsoluteEncoder::ModbusAbsoluteEncoder(TIM_HandleTypeDef *htim, uint8_t unit_id)
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	4613      	mov	r3, r2
 80034b8:	71fb      	strb	r3, [r7, #7]
    last_position(0),
    full_rotations(0),
    zero_position(0),
    frequency_start_time(0),
    last_receive_count(0),
    encoder_initialized(false)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ffc7 	bl	8003450 <_ZN6SensorC1Ev>
 80034c2:	4a26      	ldr	r2, [pc, #152]	@ (800355c <_ZN21ModbusAbsoluteEncoderC1EP17TIM_HandleTypeDefh+0xb0>)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	601a      	str	r2, [r3, #0]
  : unit_id(unit_id),
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	79fa      	ldrb	r2, [r7, #7]
 80034cc:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
    encoder_initialized(false)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    comm_ok(false),
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
    modbus_state(IDLE),
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
    cached_angle(0.0f),
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    async_enabled(false),
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
    last_update_time(0),
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    encoder_receive_count(0),
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
    query_start_time(0),
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
    first_read(true),
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
    htim(htim),
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
    last_position(0),
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
    full_rotations(0),
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
    zero_position(0),
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
    frequency_start_time(0),
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
    last_receive_count(0),
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
    encoder_initialized(false)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
{
}
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	08017e30 	.word	0x08017e30

08003560 <_ZN21ModbusAbsoluteEncoder4initEv>:

void ModbusAbsoluteEncoder::init() {
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
    // Initialise timer stats
    //Initialize Modbus library
    ModbusInit(&ModbusH);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3324      	adds	r3, #36	@ 0x24
 800356c:	4618      	mov	r0, r3
 800356e:	f7fe fbe3 	bl	8001d38 <ModbusInit>
    //Start capturing traffic on serial Port
    ModbusStart(&ModbusH);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3324      	adds	r3, #36	@ 0x24
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe fc86 	bl	8001e88 <ModbusStart>
    frequency_start_time = HAL_GetTick();
 800357c:	f000 fc54 	bl	8003e28 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
    last_receive_count = 0;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
    encoder_initialized = true;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <_ZN21ModbusAbsoluteEncoder15sendModbusQueryEv>:

bool ModbusAbsoluteEncoder::sendModbusQuery() {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	6078      	str	r0, [r7, #4]
    modbus_t telegram;
    constructQuery(&telegram);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	332c      	adds	r3, #44	@ 0x2c
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f107 0208 	add.w	r2, r7, #8
 80035b4:	4611      	mov	r1, r2
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	4798      	blx	r3
    // 发送Modbus查询（非阻塞）
    ModbusDATA[0] = ~ModbusDATA[0];
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 80035c0:	43db      	mvns	r3, r3
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8a3 216c 	strh.w	r2, [r3, #364]	@ 0x16c
    ModbusQuery(&ModbusH, telegram);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	f107 0308 	add.w	r3, r7, #8
 80035d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035da:	f7fe fe3d 	bl	8002258 <ModbusQuery>

    modbus_state = QUERY_SENT;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
    query_start_time = HAL_GetTick();
 80035e6:	f000 fc1f 	bl	8003e28 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
    return true;
 80035f2:	2301      	movs	r3, #1
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv>:

bool ModbusAbsoluteEncoder::checkModbusResponse() {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
    // 检查Modbus响应是否准备好
    // 这里需要根据具体的Modbus库实现来检查
    // 假设ModbusQueryV2是阻塞版本，我们需要非阻塞检查
    
    // 简化实现：检查Modbus状态
    uint32_t u32NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // block until query finishes or timeouts
 8003604:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003608:	2001      	movs	r0, #1
 800360a:	f011 fd6d 	bl	80150e8 <ulTaskNotifyTake>
 800360e:	60f8      	str	r0, [r7, #12]
    if(u32NotificationValue != OP_OK_QUERY)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b14      	cmp	r3, #20
 8003614:	d001      	beq.n	800361a <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv+0x1e>
    {
        return false;
 8003616:	2300      	movs	r3, #0
 8003618:	e01e      	b.n	8003658 <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv+0x5c>
    } else {
        // 成功接收到响应
        encoder_receive_count++;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
        uint32_t current_position = ((uint32_t)ModbusDATA[0] << 16) | ModbusDATA[1];
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 800362e:	041b      	lsls	r3, r3, #16
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	f8b2 216e 	ldrh.w	r2, [r2, #366]	@ 0x16e
 8003636:	4313      	orrs	r3, r2
 8003638:	60bb      	str	r3, [r7, #8]
        updateAngleFromPosition(current_position);
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f947 	bl	80038d0 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm>
        comm_ok = true;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
        last_update_time = HAL_GetTick();
 800364a:	f000 fbed 	bl	8003e28 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
        // 通讯完成，检查结果
        return true;
 8003656:	2301      	movs	r3, #1
    }
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm>:

void ModbusAbsoluteEncoder::startAsyncReading(uint32_t update_frequency_hz) {
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
    if(!htim) {
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d104      	bne.n	800367e <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x1e>
        async_enabled = false;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
        return;
 800367c:	e058      	b.n	8003730 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0xd0>
    }

    // Configure TIM ARR based on requested frequency (assuming clock already set as in Encoder485)
    uint32_t arr_value = (100000 / update_frequency_hz) - 1;
 800367e:	4a2e      	ldr	r2, [pc, #184]	@ (8003738 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0xd8>)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	fbb2 f3f3 	udiv	r3, r2, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	60fb      	str	r3, [r7, #12]
    if(arr_value > 65535) arr_value = 65535;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003690:	d302      	bcc.n	8003698 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x38>
 8003692:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003696:	60fb      	str	r3, [r7, #12]
    if(arr_value < 10) arr_value = 10;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b09      	cmp	r3, #9
 800369c:	d801      	bhi.n	80036a2 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x42>
 800369e:	230a      	movs	r3, #10
 80036a0:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_DISABLE(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6a1a      	ldr	r2, [r3, #32]
 80036ac:	f241 1311 	movw	r3, #4369	@ 0x1111
 80036b0:	4013      	ands	r3, r2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	bf0c      	ite	eq
 80036b6:	2301      	moveq	r3, #1
 80036b8:	2300      	movne	r3, #0
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01a      	beq.n	80036f6 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x96>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6a1a      	ldr	r2, [r3, #32]
 80036ca:	f240 4344 	movw	r3, #1092	@ 0x444
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00b      	beq.n	80036f6 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x96>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
    htim->Instance->ARR = arr_value;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_TIM_SET_COUNTER(htim, 0);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2200      	movs	r2, #0
 800370c:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start_IT(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8003714:	4618      	mov	r0, r3
 8003716:	f006 fea5 	bl	800a464 <HAL_TIM_Base_Start_IT>

    async_enabled = true;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
    modbus_state = IDLE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185

    // Initial query so first value is available quickly
    sendModbusQuery();
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff ff38 	bl	80035a0 <_ZN21ModbusAbsoluteEncoder15sendModbusQueryEv>
}
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	000186a0 	.word	0x000186a0
 800373c:	00000000 	.word	0x00000000

08003740 <_ZN21ModbusAbsoluteEncoder8getAngleEv>:
        HAL_TIM_Base_Stop_IT(htim);
    }
}


float ModbusAbsoluteEncoder::getAngle() {
 8003740:	b580      	push	{r7, lr}
 8003742:	b08a      	sub	sp, #40	@ 0x28
 8003744:	af02      	add	r7, sp, #8
 8003746:	6078      	str	r0, [r7, #4]
    if(async_enabled) {
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 318c 	ldrb.w	r3, [r3, #396]	@ 0x18c
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <_ZN21ModbusAbsoluteEncoder8getAngleEv+0x1c>
        return cached_angle;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 800375a:	e059      	b.n	8003810 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xd0>
    }
    // 构建Modbus查询结构体
    modbus_t telegram;
    constructQuery(&telegram);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	332c      	adds	r3, #44	@ 0x2c
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f107 0208 	add.w	r2, r7, #8
 8003768:	4611      	mov	r1, r2
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
    // 发送Modbus查询（非阻塞）
    ModbusDATA[0] = ~ModbusDATA[0];
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 8003774:	43db      	mvns	r3, r3
 8003776:	b29a      	uxth	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8a3 216c 	strh.w	r2, [r3, #364]	@ 0x16c
    
    uint32_t result = ModbusQueryV2(&ModbusH, telegram);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	f107 0308 	add.w	r3, r7, #8
 800378c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800378e:	f7fe fda9 	bl	80022e4 <ModbusQueryV2>
 8003792:	61f8      	str	r0, [r7, #28]
    
    if (result != OP_OK_QUERY) {
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	2b14      	cmp	r3, #20
 8003798:	d02a      	beq.n	80037f0 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xb0>
        if (first_read) {
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <_ZN21ModbusAbsoluteEncoder8getAngleEv+0x6a>
            return 0.0f;
 80037a4:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8003828 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xe8>
 80037a8:	e032      	b.n	8003810 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xd0>
        } else {
            return (float)(last_position % ENCODER_RESOLUTION) * RADIANS_PER_COUNT + 
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 80037b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037b4:	ee07 3a90 	vmov	s15, r3
 80037b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037bc:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800382c <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xec>
 80037c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037c4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
                    (float)full_rotations * 2.0f * M_PI;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80037da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037de:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 8003820 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xe0>
 80037e2:	ee27 7b05 	vmul.f64	d7, d7, d5
            return (float)(last_position % ENCODER_RESOLUTION) * RADIANS_PER_COUNT + 
 80037e6:	ee36 7b07 	vadd.f64	d7, d6, d7
                    (float)full_rotations * 2.0f * M_PI;
 80037ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037ee:	e00f      	b.n	8003810 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xd0>
        }
    }
    
    uint32_t current_position = ((uint32_t)ModbusDATA[0] << 16) | ModbusDATA[1];
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 80037f6:	041b      	lsls	r3, r3, #16
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	f8b2 216e 	ldrh.w	r2, [r2, #366]	@ 0x16e
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
    updateAngleFromPosition(current_position);
 8003802:	69b9      	ldr	r1, [r7, #24]
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f863 	bl	80038d0 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm>
    
    return cached_angle;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
}
 8003810:	eeb0 0a67 	vmov.f32	s0, s15
 8003814:	3720      	adds	r7, #32
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	f3af 8000 	nop.w
 8003820:	54442d18 	.word	0x54442d18
 8003824:	400921fb 	.word	0x400921fb
 8003828:	00000000 	.word	0x00000000
 800382c:	3a490fdb 	.word	0x3a490fdb

08003830 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv>:

void ModbusAbsoluteEncoder::asyncUpdateCallback() {
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
    if(!async_enabled) return;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 318c 	ldrb.w	r3, [r3, #396]	@ 0x18c
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f083 0301 	eor.w	r3, r3, #1
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d122      	bne.n	8003890 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x60>

    switch(modbus_state) {
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x2a>
 8003854:	2b01      	cmp	r3, #1
 8003856:	d004      	beq.n	8003862 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x32>
 8003858:	e01b      	b.n	8003892 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
        case IDLE:
            sendModbusQuery();
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff fea0 	bl	80035a0 <_ZN21ModbusAbsoluteEncoder15sendModbusQueryEv>
//             printf("Sending query...");
            break;
 8003860:	e017      	b.n	8003892 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
        case QUERY_SENT:
            if(checkModbusResponse()) {
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff feca 	bl	80035fc <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d004      	beq.n	8003878 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x48>
                modbus_state = IDLE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
                // timeout
                comm_ok = false;
                modbus_state = IDLE;
                printf("Timeout, retrying...");
            }
            break;
 8003876:	e00c      	b.n	8003892 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
                comm_ok = false;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
                modbus_state = IDLE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
                printf("Timeout, retrying...");
 8003888:	4803      	ldr	r0, [pc, #12]	@ (8003898 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x68>)
 800388a:	f013 f811 	bl	80168b0 <iprintf>
            break;
 800388e:	e000      	b.n	8003892 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
    if(!async_enabled) return;
 8003890:	bf00      	nop
    }
}
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	08017cac 	.word	0x08017cac

0800389c <_ZN21ModbusAbsoluteEncoder14getSensorAngleEv>:

float ModbusAbsoluteEncoder::getSensorAngle() {
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
    return (float)(last_position % ENCODER_RESOLUTION) * RADIANS_PER_COUNT;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 80038aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038ae:	ee07 3a90 	vmov	s15, r3
 80038b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80038cc <_ZN21ModbusAbsoluteEncoder14getSensorAngleEv+0x30>
 80038ba:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80038be:	eeb0 0a67 	vmov.f32	s0, s15
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	3a490fdb 	.word	0x3a490fdb

080038d0 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm>:

uint32_t ModbusAbsoluteEncoder::reg2u32(uint16_t reg) {
    return (uint32_t)reg + ENCODER_ZERO_POSITION;
}

void ModbusAbsoluteEncoder::updateAngleFromPosition(uint32_t current_position) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
    if(first_read) {
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d007      	beq.n	80038f4 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm+0x24>
        zero_position = current_position;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
        first_read = false;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
    }

    last_position = current_position;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
    cached_angle = current_position * RADIANS_PER_COUNT;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003906:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003930 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm+0x60>
 800390a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
    if(angleUpdateCallback) {
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800391a:	2b00      	cmp	r3, #0
 800391c:	d004      	beq.n	8003928 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm+0x58>
        angleUpdateCallback(current_position);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8003924:	6838      	ldr	r0, [r7, #0]
 8003926:	4798      	blx	r3
    }
}
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	3a490fdb 	.word	0x3a490fdb

08003934 <_ZN21ModbusAbsoluteEncoder22setAngleUpdateCallbackEPFvmE>:

void ModbusAbsoluteEncoder::setAngleUpdateCallback(void (*callback)(uint32_t position)) {
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
    angleUpdateCallback = callback;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	ed87 0a01 	vstr	s0, [r7, #4]
 800395c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003960:	eef0 7ae7 	vabs.f32	s15, s15
 8003964:	eeb0 0a67 	vmov.f32	s0, s15
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <_ZN6Sensor6updateEv>:
#include "main.h"
#include <cmath>
#include "cmsis_os.h"
#define _2PI 6.28318530718f

void Sensor::update() {
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
    float val = getSensorAngle();
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	331c      	adds	r3, #28
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4798      	blx	r3
 8003988:	ed87 0a03 	vstr	s0, [r7, #12]
    if (val<0) // sensor angles are strictly non-negative. Negative values are used to signal errors.
 800398c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003990:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003998:	d434      	bmi.n	8003a04 <_ZN6Sensor6updateEv+0x90>
        return; // TODO signal error, e.g. via a flag and counter
    angle_prev_ts = HAL_GetTick();
 800399a:	f000 fa45 	bl	8003e28 <HAL_GetTick>
 800399e:	4603      	mov	r3, r0
 80039a0:	461a      	mov	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	611a      	str	r2, [r3, #16]
    float d_angle = val - angle_prev;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80039ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80039b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039b4:	edc7 7a02 	vstr	s15, [r7, #8]
    // if overflow happened track it as full rotation
    if(abs(d_angle) > (0.8f*_2PI) ) full_rotations += ( d_angle > 0 ) ? -1 : 1; 
 80039b8:	ed97 0a02 	vldr	s0, [r7, #8]
 80039bc:	f7ff ffc9 	bl	8003952 <_ZSt3absf>
 80039c0:	eef0 7a40 	vmov.f32	s15, s0
 80039c4:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003a0c <_ZN6Sensor6updateEv+0x98>
 80039c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d0:	bfcc      	ite	gt
 80039d2:	2301      	movgt	r3, #1
 80039d4:	2300      	movle	r3, #0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00f      	beq.n	80039fc <_ZN6Sensor6updateEv+0x88>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80039e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ec:	dd02      	ble.n	80039f4 <_ZN6Sensor6updateEv+0x80>
 80039ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039f2:	e000      	b.n	80039f6 <_ZN6Sensor6updateEv+0x82>
 80039f4:	2201      	movs	r2, #1
 80039f6:	441a      	add	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	61da      	str	r2, [r3, #28]
    angle_prev = val;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	60da      	str	r2, [r3, #12]
 8003a02:	e000      	b.n	8003a06 <_ZN6Sensor6updateEv+0x92>
        return; // TODO signal error, e.g. via a flag and counter
 8003a04:	bf00      	nop
}
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40a0d97c 	.word	0x40a0d97c

08003a10 <_ZN6Sensor11getVelocityEv>:


 /** get current angular velocity (rad/s) */
float Sensor::getVelocity() {
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
    // calculate sample time
    float Ts = (angle_prev_ts - vel_angle_prev_ts)*1e-6f;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691a      	ldr	r2, [r3, #16]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a2a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8003ae8 <_ZN6Sensor11getVelocityEv+0xd8>
 8003a2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a32:	edc7 7a03 	vstr	s15, [r7, #12]
    if (Ts < 0.0f) {    // handle micros() overflow - we need to reset vel_angle_prev_ts
 8003a36:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a42:	d50e      	bpl.n	8003a62 <_ZN6Sensor11getVelocityEv+0x52>
        vel_angle_prev = angle_prev;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	615a      	str	r2, [r3, #20]
        vel_full_rotations = full_rotations;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	621a      	str	r2, [r3, #32]
        vel_angle_prev_ts = angle_prev_ts;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	619a      	str	r2, [r3, #24]
        return velocity;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	e038      	b.n	8003ad4 <_ZN6Sensor11getVelocityEv+0xc4>
    }
    if (Ts < min_elapsed_time) return velocity; // don't update velocity if deltaT is too small
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a68:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a74:	d502      	bpl.n	8003a7c <_ZN6Sensor11getVelocityEv+0x6c>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	e02b      	b.n	8003ad4 <_ZN6Sensor11getVelocityEv+0xc4>

    velocity = ( (float)(full_rotations - vel_full_rotations)*_2PI + (angle_prev - vel_angle_prev) ) / Ts;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69da      	ldr	r2, [r3, #28]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	ee07 3a90 	vmov	s15, r3
 8003a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a8e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003aec <_ZN6Sensor11getVelocityEv+0xdc>
 8003a92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	edd3 6a03 	vldr	s13, [r3, #12]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003aa2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003aa6:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003aaa:	ed97 7a03 	vldr	s14, [r7, #12]
 8003aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	edc3 7a02 	vstr	s15, [r3, #8]
    vel_angle_prev = angle_prev;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	615a      	str	r2, [r3, #20]
    vel_full_rotations = full_rotations;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69da      	ldr	r2, [r3, #28]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	621a      	str	r2, [r3, #32]
    vel_angle_prev_ts = angle_prev_ts;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	619a      	str	r2, [r3, #24]
    return velocity;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
}
 8003ad4:	ee07 3a90 	vmov	s15, r3
 8003ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	358637bd 	.word	0x358637bd
 8003aec:	40c90fdb 	.word	0x40c90fdb

08003af0 <_ZN6Sensor4initEv>:



void Sensor::init() {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
    // initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
    getSensorAngle(); // call once
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	331c      	adds	r3, #28
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	4798      	blx	r3
    osDelay(1);
 8003b04:	2001      	movs	r0, #1
 8003b06:	f00e fccd 	bl	80124a4 <osDelay>
    vel_angle_prev = getSensorAngle(); // call again
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	331c      	adds	r3, #28
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
 8003b16:	eef0 7a40 	vmov.f32	s15, s0
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	edc3 7a05 	vstr	s15, [r3, #20]
    vel_angle_prev_ts = HAL_GetTick();
 8003b20:	f000 f982 	bl	8003e28 <HAL_GetTick>
 8003b24:	4603      	mov	r3, r0
 8003b26:	461a      	mov	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	619a      	str	r2, [r3, #24]
    osDelay(1);
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	f00e fcb9 	bl	80124a4 <osDelay>
    getSensorAngle(); // call once
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	331c      	adds	r3, #28
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	4798      	blx	r3
    osDelay(1);
 8003b3e:	2001      	movs	r0, #1
 8003b40:	f00e fcb0 	bl	80124a4 <osDelay>
    angle_prev = getSensorAngle(); // call again
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	331c      	adds	r3, #28
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	4798      	blx	r3
 8003b50:	eef0 7a40 	vmov.f32	s15, s0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	edc3 7a03 	vstr	s15, [r3, #12]
    angle_prev_ts = HAL_GetTick();
 8003b5a:	f000 f965 	bl	8003e28 <HAL_GetTick>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	461a      	mov	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	611a      	str	r2, [r3, #16]
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <_ZN6Sensor18getMechanicalAngleEv>:


float Sensor::getMechanicalAngle() {
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
    return angle_prev;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	ee07 3a90 	vmov	s15, r3
}
 8003b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <_ZN6Sensor8getAngleEv>:



float Sensor::getAngle(){
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
    return (float)full_rotations * _2PI + angle_prev;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	ee07 3a90 	vmov	s15, r3
 8003b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ba0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003bc0 <_ZN6Sensor8getAngleEv+0x34>
 8003ba4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bae:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	40c90fdb 	.word	0x40c90fdb
 8003bc4:	00000000 	.word	0x00000000

08003bc8 <_ZN6Sensor15getPreciseAngleEv>:



double Sensor::getPreciseAngle() {
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
    return (double)full_rotations * (double)_2PI + (double)angle_prev;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	ee07 3a90 	vmov	s15, r3
 8003bd8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003bdc:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8003c00 <_ZN6Sensor15getPreciseAngleEv+0x38>
 8003be0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bee:	ee36 7b07 	vadd.f64	d7, d6, d7
}
 8003bf2:	eeb0 0b47 	vmov.f64	d0, d7
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	60000000 	.word	0x60000000
 8003c04:	401921fb 	.word	0x401921fb

08003c08 <_ZN6Sensor16getFullRotationsEv>:



int32_t Sensor::getFullRotations() {
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
    return full_rotations;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <_ZN6Sensor11needsSearchEv>:



int Sensor::needsSearch() {
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
    return 0; // default false
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	e019      	b.n	8003c7e <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 8003c4a:	4a17      	ldr	r2, [pc, #92]	@ (8003ca8 <HAL_UART_TxCpltCallback+0x70>)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d10e      	bne.n	8003c78 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8003c5a:	4a13      	ldr	r2, [pc, #76]	@ (8003ca8 <HAL_UART_TxCpltCallback+0x70>)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c62:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8003c66:	f107 0308 	add.w	r3, r7, #8
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2100      	movs	r1, #0
 8003c72:	f011 fb47 	bl	8015304 <xTaskGenericNotifyFromISR>
	   		break;
 8003c76:	e008      	b.n	8003c8a <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003cac <HAL_UART_TxCpltCallback+0x74>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4293      	cmp	r3, r2
 8003c88:	dbdf      	blt.n	8003c4a <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d007      	beq.n	8003ca0 <HAL_UART_TxCpltCallback+0x68>
 8003c90:	4b07      	ldr	r3, [pc, #28]	@ (8003cb0 <HAL_UART_TxCpltCallback+0x78>)
 8003c92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8003ca0:	bf00      	nop
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	24000a2c 	.word	0x24000a2c
 8003cac:	24000a34 	.word	0x24000a34
 8003cb0:	e000ed04 	.word	0xe000ed04

08003cb4 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8003cb4:	b590      	push	{r4, r7, lr}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	e042      	b.n	8003d4c <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8003cc6:	4a2d      	ldr	r2, [pc, #180]	@ (8003d7c <HAL_UART_RxCpltCallback+0xc8>)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d137      	bne.n	8003d46 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 8003cd6:	4a29      	ldr	r2, [pc, #164]	@ (8003d7c <HAL_UART_RxCpltCallback+0xc8>)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cde:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d139      	bne.n	8003d5a <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8003ce6:	4a25      	ldr	r2, [pc, #148]	@ (8003d7c <HAL_UART_RxCpltCallback+0xc8>)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cee:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8003cf2:	4922      	ldr	r1, [pc, #136]	@ (8003d7c <HAL_UART_RxCpltCallback+0xc8>)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cfa:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4610      	mov	r0, r2
 8003d02:	f7fd ff51 	bl	8001ba8 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8003d06:	4a1d      	ldr	r2, [pc, #116]	@ (8003d7c <HAL_UART_RxCpltCallback+0xc8>)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0e:	6858      	ldr	r0, [r3, #4]
 8003d10:	4a1a      	ldr	r2, [pc, #104]	@ (8003d7c <HAL_UART_RxCpltCallback+0xc8>)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d18:	33a6      	adds	r3, #166	@ 0xa6
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	f007 fc87 	bl	800b630 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8003d22:	4a16      	ldr	r2, [pc, #88]	@ (8003d7c <HAL_UART_RxCpltCallback+0xc8>)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2a:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 8003d2e:	f010 fc39 	bl	80145a4 <xTaskGetTickCountFromISR>
 8003d32:	4602      	mov	r2, r0
 8003d34:	f107 0308 	add.w	r3, r7, #8
 8003d38:	2100      	movs	r1, #0
 8003d3a:	9100      	str	r1, [sp, #0]
 8003d3c:	2107      	movs	r1, #7
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f011 fcc2 	bl	80156c8 <xTimerGenericCommand>
    		}
    		break;
 8003d44:	e009      	b.n	8003d5a <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d80 <HAL_UART_RxCpltCallback+0xcc>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4293      	cmp	r3, r2
 8003d56:	dbb6      	blt.n	8003cc6 <HAL_UART_RxCpltCallback+0x12>
 8003d58:	e000      	b.n	8003d5c <HAL_UART_RxCpltCallback+0xa8>
    		break;
 8003d5a:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d007      	beq.n	8003d72 <HAL_UART_RxCpltCallback+0xbe>
 8003d62:	4b08      	ldr	r3, [pc, #32]	@ (8003d84 <HAL_UART_RxCpltCallback+0xd0>)
 8003d64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd90      	pop	{r4, r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	24000a2c 	.word	0x24000a2c
 8003d80:	24000a34 	.word	0x24000a34
 8003d84:	e000ed04 	.word	0xe000ed04

08003d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d8e:	2003      	movs	r0, #3
 8003d90:	f000 f933 	bl	8003ffa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d94:	f001 ff8a 	bl	8005cac <HAL_RCC_GetSysClockFreq>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	4b15      	ldr	r3, [pc, #84]	@ (8003df0 <HAL_Init+0x68>)
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	0a1b      	lsrs	r3, r3, #8
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	4913      	ldr	r1, [pc, #76]	@ (8003df4 <HAL_Init+0x6c>)
 8003da6:	5ccb      	ldrb	r3, [r1, r3]
 8003da8:	f003 031f 	and.w	r3, r3, #31
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
 8003db0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003db2:	4b0f      	ldr	r3, [pc, #60]	@ (8003df0 <HAL_Init+0x68>)
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	4a0e      	ldr	r2, [pc, #56]	@ (8003df4 <HAL_Init+0x6c>)
 8003dbc:	5cd3      	ldrb	r3, [r2, r3]
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8003df8 <HAL_Init+0x70>)
 8003dca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003dcc:	4a0b      	ldr	r2, [pc, #44]	@ (8003dfc <HAL_Init+0x74>)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dd2:	200f      	movs	r0, #15
 8003dd4:	f7fd fc9e 	bl	8001714 <HAL_InitTick>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e002      	b.n	8003de8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003de2:	f7fd fb4d 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	58024400 	.word	0x58024400
 8003df4:	08017d68 	.word	0x08017d68
 8003df8:	24000004 	.word	0x24000004
 8003dfc:	24000000 	.word	0x24000000

08003e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e04:	4b06      	ldr	r3, [pc, #24]	@ (8003e20 <HAL_IncTick+0x20>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4b06      	ldr	r3, [pc, #24]	@ (8003e24 <HAL_IncTick+0x24>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4413      	add	r3, r2
 8003e10:	4a04      	ldr	r2, [pc, #16]	@ (8003e24 <HAL_IncTick+0x24>)
 8003e12:	6013      	str	r3, [r2, #0]
}
 8003e14:	bf00      	nop
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	2400000c 	.word	0x2400000c
 8003e24:	24000a38 	.word	0x24000a38

08003e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e2c:	4b03      	ldr	r3, [pc, #12]	@ (8003e3c <HAL_GetTick+0x14>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	24000a38 	.word	0x24000a38

08003e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e48:	f7ff ffee 	bl	8003e28 <HAL_GetTick>
 8003e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e58:	d005      	beq.n	8003e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e84 <HAL_Delay+0x44>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4413      	add	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e66:	bf00      	nop
 8003e68:	f7ff ffde 	bl	8003e28 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d8f7      	bhi.n	8003e68 <HAL_Delay+0x28>
  {
  }
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	2400000c 	.word	0x2400000c

08003e88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003e8c:	4b03      	ldr	r3, [pc, #12]	@ (8003e9c <HAL_GetREVID+0x14>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	0c1b      	lsrs	r3, r3, #16
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	5c001000 	.word	0x5c001000

08003ea0 <__NVIC_SetPriorityGrouping>:
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ec8:	4b06      	ldr	r3, [pc, #24]	@ (8003ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ece:	4a04      	ldr	r2, [pc, #16]	@ (8003ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	60d3      	str	r3, [r2, #12]
}
 8003ed4:	bf00      	nop
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	e000ed00 	.word	0xe000ed00
 8003ee4:	05fa0000 	.word	0x05fa0000

08003ee8 <__NVIC_GetPriorityGrouping>:
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003eec:	4b04      	ldr	r3, [pc, #16]	@ (8003f00 <__NVIC_GetPriorityGrouping+0x18>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	0a1b      	lsrs	r3, r3, #8
 8003ef2:	f003 0307 	and.w	r3, r3, #7
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	e000ed00 	.word	0xe000ed00

08003f04 <__NVIC_EnableIRQ>:
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	db0b      	blt.n	8003f2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f16:	88fb      	ldrh	r3, [r7, #6]
 8003f18:	f003 021f 	and.w	r2, r3, #31
 8003f1c:	4907      	ldr	r1, [pc, #28]	@ (8003f3c <__NVIC_EnableIRQ+0x38>)
 8003f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	2001      	movs	r0, #1
 8003f26:	fa00 f202 	lsl.w	r2, r0, r2
 8003f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	e000e100 	.word	0xe000e100

08003f40 <__NVIC_SetPriority>:
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	db0a      	blt.n	8003f6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	490c      	ldr	r1, [pc, #48]	@ (8003f8c <__NVIC_SetPriority+0x4c>)
 8003f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f5e:	0112      	lsls	r2, r2, #4
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	440b      	add	r3, r1
 8003f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003f68:	e00a      	b.n	8003f80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4908      	ldr	r1, [pc, #32]	@ (8003f90 <__NVIC_SetPriority+0x50>)
 8003f70:	88fb      	ldrh	r3, [r7, #6]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	3b04      	subs	r3, #4
 8003f78:	0112      	lsls	r2, r2, #4
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	761a      	strb	r2, [r3, #24]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	e000e100 	.word	0xe000e100
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <NVIC_EncodePriority>:
{
 8003f94:	b480      	push	{r7}
 8003f96:	b089      	sub	sp, #36	@ 0x24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f1c3 0307 	rsb	r3, r3, #7
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	bf28      	it	cs
 8003fb2:	2304      	movcs	r3, #4
 8003fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	2b06      	cmp	r3, #6
 8003fbc:	d902      	bls.n	8003fc4 <NVIC_EncodePriority+0x30>
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	3b03      	subs	r3, #3
 8003fc2:	e000      	b.n	8003fc6 <NVIC_EncodePriority+0x32>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43da      	mvns	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fdc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	43d9      	mvns	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fec:	4313      	orrs	r3, r2
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3724      	adds	r7, #36	@ 0x24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff ff4c 	bl	8003ea0 <__NVIC_SetPriorityGrouping>
}
 8004008:	bf00      	nop
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800401e:	f7ff ff63 	bl	8003ee8 <__NVIC_GetPriorityGrouping>
 8004022:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	6978      	ldr	r0, [r7, #20]
 800402a:	f7ff ffb3 	bl	8003f94 <NVIC_EncodePriority>
 800402e:	4602      	mov	r2, r0
 8004030:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004034:	4611      	mov	r1, r2
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff ff82 	bl	8003f40 <__NVIC_SetPriority>
}
 800403c:	bf00      	nop
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800404e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff ff56 	bl	8003f04 <__NVIC_EnableIRQ>
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004064:	f3bf 8f5f 	dmb	sy
}
 8004068:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800406a:	4b07      	ldr	r3, [pc, #28]	@ (8004088 <HAL_MPU_Disable+0x28>)
 800406c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406e:	4a06      	ldr	r2, [pc, #24]	@ (8004088 <HAL_MPU_Disable+0x28>)
 8004070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004074:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004076:	4b05      	ldr	r3, [pc, #20]	@ (800408c <HAL_MPU_Disable+0x2c>)
 8004078:	2200      	movs	r2, #0
 800407a:	605a      	str	r2, [r3, #4]
}
 800407c:	bf00      	nop
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	e000ed00 	.word	0xe000ed00
 800408c:	e000ed90 	.word	0xe000ed90

08004090 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004098:	4a0b      	ldr	r2, [pc, #44]	@ (80040c8 <HAL_MPU_Enable+0x38>)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f043 0301 	orr.w	r3, r3, #1
 80040a0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80040a2:	4b0a      	ldr	r3, [pc, #40]	@ (80040cc <HAL_MPU_Enable+0x3c>)
 80040a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a6:	4a09      	ldr	r2, [pc, #36]	@ (80040cc <HAL_MPU_Enable+0x3c>)
 80040a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80040ae:	f3bf 8f4f 	dsb	sy
}
 80040b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040b4:	f3bf 8f6f 	isb	sy
}
 80040b8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	e000ed90 	.word	0xe000ed90
 80040cc:	e000ed00 	.word	0xe000ed00

080040d0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	785a      	ldrb	r2, [r3, #1]
 80040dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004154 <HAL_MPU_ConfigRegion+0x84>)
 80040de:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d029      	beq.n	800413c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80040e8:	4a1a      	ldr	r2, [pc, #104]	@ (8004154 <HAL_MPU_ConfigRegion+0x84>)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	7b1b      	ldrb	r3, [r3, #12]
 80040f4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	7adb      	ldrb	r3, [r3, #11]
 80040fa:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80040fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	7a9b      	ldrb	r3, [r3, #10]
 8004102:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004104:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	7b5b      	ldrb	r3, [r3, #13]
 800410a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800410c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	7b9b      	ldrb	r3, [r3, #14]
 8004112:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004114:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	7bdb      	ldrb	r3, [r3, #15]
 800411a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800411c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7a5b      	ldrb	r3, [r3, #9]
 8004122:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004124:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	7a1b      	ldrb	r3, [r3, #8]
 800412a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800412c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	7812      	ldrb	r2, [r2, #0]
 8004132:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004134:	4a07      	ldr	r2, [pc, #28]	@ (8004154 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004136:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004138:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800413a:	e005      	b.n	8004148 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800413c:	4b05      	ldr	r3, [pc, #20]	@ (8004154 <HAL_MPU_ConfigRegion+0x84>)
 800413e:	2200      	movs	r2, #0
 8004140:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8004142:	4b04      	ldr	r3, [pc, #16]	@ (8004154 <HAL_MPU_ConfigRegion+0x84>)
 8004144:	2200      	movs	r2, #0
 8004146:	611a      	str	r2, [r3, #16]
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	e000ed90 	.word	0xe000ed90

08004158 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004160:	f7ff fe62 	bl	8003e28 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e2dc      	b.n	800472a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d008      	beq.n	800418e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2280      	movs	r2, #128	@ 0x80
 8004180:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e2cd      	b.n	800472a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a76      	ldr	r2, [pc, #472]	@ (800436c <HAL_DMA_Abort+0x214>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d04a      	beq.n	800422e <HAL_DMA_Abort+0xd6>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a74      	ldr	r2, [pc, #464]	@ (8004370 <HAL_DMA_Abort+0x218>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d045      	beq.n	800422e <HAL_DMA_Abort+0xd6>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a73      	ldr	r2, [pc, #460]	@ (8004374 <HAL_DMA_Abort+0x21c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d040      	beq.n	800422e <HAL_DMA_Abort+0xd6>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a71      	ldr	r2, [pc, #452]	@ (8004378 <HAL_DMA_Abort+0x220>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d03b      	beq.n	800422e <HAL_DMA_Abort+0xd6>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a70      	ldr	r2, [pc, #448]	@ (800437c <HAL_DMA_Abort+0x224>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d036      	beq.n	800422e <HAL_DMA_Abort+0xd6>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a6e      	ldr	r2, [pc, #440]	@ (8004380 <HAL_DMA_Abort+0x228>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d031      	beq.n	800422e <HAL_DMA_Abort+0xd6>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a6d      	ldr	r2, [pc, #436]	@ (8004384 <HAL_DMA_Abort+0x22c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d02c      	beq.n	800422e <HAL_DMA_Abort+0xd6>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a6b      	ldr	r2, [pc, #428]	@ (8004388 <HAL_DMA_Abort+0x230>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d027      	beq.n	800422e <HAL_DMA_Abort+0xd6>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a6a      	ldr	r2, [pc, #424]	@ (800438c <HAL_DMA_Abort+0x234>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d022      	beq.n	800422e <HAL_DMA_Abort+0xd6>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a68      	ldr	r2, [pc, #416]	@ (8004390 <HAL_DMA_Abort+0x238>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d01d      	beq.n	800422e <HAL_DMA_Abort+0xd6>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a67      	ldr	r2, [pc, #412]	@ (8004394 <HAL_DMA_Abort+0x23c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d018      	beq.n	800422e <HAL_DMA_Abort+0xd6>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a65      	ldr	r2, [pc, #404]	@ (8004398 <HAL_DMA_Abort+0x240>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d013      	beq.n	800422e <HAL_DMA_Abort+0xd6>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a64      	ldr	r2, [pc, #400]	@ (800439c <HAL_DMA_Abort+0x244>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00e      	beq.n	800422e <HAL_DMA_Abort+0xd6>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a62      	ldr	r2, [pc, #392]	@ (80043a0 <HAL_DMA_Abort+0x248>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d009      	beq.n	800422e <HAL_DMA_Abort+0xd6>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a61      	ldr	r2, [pc, #388]	@ (80043a4 <HAL_DMA_Abort+0x24c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d004      	beq.n	800422e <HAL_DMA_Abort+0xd6>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a5f      	ldr	r2, [pc, #380]	@ (80043a8 <HAL_DMA_Abort+0x250>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d101      	bne.n	8004232 <HAL_DMA_Abort+0xda>
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <HAL_DMA_Abort+0xdc>
 8004232:	2300      	movs	r3, #0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d013      	beq.n	8004260 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 021e 	bic.w	r2, r2, #30
 8004246:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695a      	ldr	r2, [r3, #20]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004256:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	e00a      	b.n	8004276 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 020e 	bic.w	r2, r2, #14
 800426e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a3c      	ldr	r2, [pc, #240]	@ (800436c <HAL_DMA_Abort+0x214>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d072      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a3a      	ldr	r2, [pc, #232]	@ (8004370 <HAL_DMA_Abort+0x218>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d06d      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a39      	ldr	r2, [pc, #228]	@ (8004374 <HAL_DMA_Abort+0x21c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d068      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a37      	ldr	r2, [pc, #220]	@ (8004378 <HAL_DMA_Abort+0x220>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d063      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a36      	ldr	r2, [pc, #216]	@ (800437c <HAL_DMA_Abort+0x224>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d05e      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a34      	ldr	r2, [pc, #208]	@ (8004380 <HAL_DMA_Abort+0x228>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d059      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a33      	ldr	r2, [pc, #204]	@ (8004384 <HAL_DMA_Abort+0x22c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d054      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a31      	ldr	r2, [pc, #196]	@ (8004388 <HAL_DMA_Abort+0x230>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d04f      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a30      	ldr	r2, [pc, #192]	@ (800438c <HAL_DMA_Abort+0x234>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d04a      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a2e      	ldr	r2, [pc, #184]	@ (8004390 <HAL_DMA_Abort+0x238>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d045      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a2d      	ldr	r2, [pc, #180]	@ (8004394 <HAL_DMA_Abort+0x23c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d040      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004398 <HAL_DMA_Abort+0x240>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d03b      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a2a      	ldr	r2, [pc, #168]	@ (800439c <HAL_DMA_Abort+0x244>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d036      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a28      	ldr	r2, [pc, #160]	@ (80043a0 <HAL_DMA_Abort+0x248>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d031      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a27      	ldr	r2, [pc, #156]	@ (80043a4 <HAL_DMA_Abort+0x24c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d02c      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a25      	ldr	r2, [pc, #148]	@ (80043a8 <HAL_DMA_Abort+0x250>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d027      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a24      	ldr	r2, [pc, #144]	@ (80043ac <HAL_DMA_Abort+0x254>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d022      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a22      	ldr	r2, [pc, #136]	@ (80043b0 <HAL_DMA_Abort+0x258>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d01d      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a21      	ldr	r2, [pc, #132]	@ (80043b4 <HAL_DMA_Abort+0x25c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d018      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a1f      	ldr	r2, [pc, #124]	@ (80043b8 <HAL_DMA_Abort+0x260>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d013      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a1e      	ldr	r2, [pc, #120]	@ (80043bc <HAL_DMA_Abort+0x264>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d00e      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1c      	ldr	r2, [pc, #112]	@ (80043c0 <HAL_DMA_Abort+0x268>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d009      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1b      	ldr	r2, [pc, #108]	@ (80043c4 <HAL_DMA_Abort+0x26c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d004      	beq.n	8004366 <HAL_DMA_Abort+0x20e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a19      	ldr	r2, [pc, #100]	@ (80043c8 <HAL_DMA_Abort+0x270>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d132      	bne.n	80043cc <HAL_DMA_Abort+0x274>
 8004366:	2301      	movs	r3, #1
 8004368:	e031      	b.n	80043ce <HAL_DMA_Abort+0x276>
 800436a:	bf00      	nop
 800436c:	40020010 	.word	0x40020010
 8004370:	40020028 	.word	0x40020028
 8004374:	40020040 	.word	0x40020040
 8004378:	40020058 	.word	0x40020058
 800437c:	40020070 	.word	0x40020070
 8004380:	40020088 	.word	0x40020088
 8004384:	400200a0 	.word	0x400200a0
 8004388:	400200b8 	.word	0x400200b8
 800438c:	40020410 	.word	0x40020410
 8004390:	40020428 	.word	0x40020428
 8004394:	40020440 	.word	0x40020440
 8004398:	40020458 	.word	0x40020458
 800439c:	40020470 	.word	0x40020470
 80043a0:	40020488 	.word	0x40020488
 80043a4:	400204a0 	.word	0x400204a0
 80043a8:	400204b8 	.word	0x400204b8
 80043ac:	58025408 	.word	0x58025408
 80043b0:	5802541c 	.word	0x5802541c
 80043b4:	58025430 	.word	0x58025430
 80043b8:	58025444 	.word	0x58025444
 80043bc:	58025458 	.word	0x58025458
 80043c0:	5802546c 	.word	0x5802546c
 80043c4:	58025480 	.word	0x58025480
 80043c8:	58025494 	.word	0x58025494
 80043cc:	2300      	movs	r3, #0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d007      	beq.n	80043e2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a6d      	ldr	r2, [pc, #436]	@ (800459c <HAL_DMA_Abort+0x444>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d04a      	beq.n	8004482 <HAL_DMA_Abort+0x32a>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a6b      	ldr	r2, [pc, #428]	@ (80045a0 <HAL_DMA_Abort+0x448>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d045      	beq.n	8004482 <HAL_DMA_Abort+0x32a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a6a      	ldr	r2, [pc, #424]	@ (80045a4 <HAL_DMA_Abort+0x44c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d040      	beq.n	8004482 <HAL_DMA_Abort+0x32a>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a68      	ldr	r2, [pc, #416]	@ (80045a8 <HAL_DMA_Abort+0x450>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d03b      	beq.n	8004482 <HAL_DMA_Abort+0x32a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a67      	ldr	r2, [pc, #412]	@ (80045ac <HAL_DMA_Abort+0x454>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d036      	beq.n	8004482 <HAL_DMA_Abort+0x32a>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a65      	ldr	r2, [pc, #404]	@ (80045b0 <HAL_DMA_Abort+0x458>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d031      	beq.n	8004482 <HAL_DMA_Abort+0x32a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a64      	ldr	r2, [pc, #400]	@ (80045b4 <HAL_DMA_Abort+0x45c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d02c      	beq.n	8004482 <HAL_DMA_Abort+0x32a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a62      	ldr	r2, [pc, #392]	@ (80045b8 <HAL_DMA_Abort+0x460>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d027      	beq.n	8004482 <HAL_DMA_Abort+0x32a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a61      	ldr	r2, [pc, #388]	@ (80045bc <HAL_DMA_Abort+0x464>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d022      	beq.n	8004482 <HAL_DMA_Abort+0x32a>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a5f      	ldr	r2, [pc, #380]	@ (80045c0 <HAL_DMA_Abort+0x468>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d01d      	beq.n	8004482 <HAL_DMA_Abort+0x32a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a5e      	ldr	r2, [pc, #376]	@ (80045c4 <HAL_DMA_Abort+0x46c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d018      	beq.n	8004482 <HAL_DMA_Abort+0x32a>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a5c      	ldr	r2, [pc, #368]	@ (80045c8 <HAL_DMA_Abort+0x470>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d013      	beq.n	8004482 <HAL_DMA_Abort+0x32a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a5b      	ldr	r2, [pc, #364]	@ (80045cc <HAL_DMA_Abort+0x474>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00e      	beq.n	8004482 <HAL_DMA_Abort+0x32a>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a59      	ldr	r2, [pc, #356]	@ (80045d0 <HAL_DMA_Abort+0x478>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d009      	beq.n	8004482 <HAL_DMA_Abort+0x32a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a58      	ldr	r2, [pc, #352]	@ (80045d4 <HAL_DMA_Abort+0x47c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d004      	beq.n	8004482 <HAL_DMA_Abort+0x32a>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a56      	ldr	r2, [pc, #344]	@ (80045d8 <HAL_DMA_Abort+0x480>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d108      	bne.n	8004494 <HAL_DMA_Abort+0x33c>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0201 	bic.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	e007      	b.n	80044a4 <HAL_DMA_Abort+0x34c>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0201 	bic.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80044a4:	e013      	b.n	80044ce <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044a6:	f7ff fcbf 	bl	8003e28 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b05      	cmp	r3, #5
 80044b2:	d90c      	bls.n	80044ce <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2203      	movs	r2, #3
 80044be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e12d      	b.n	800472a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e5      	bne.n	80044a6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a2f      	ldr	r2, [pc, #188]	@ (800459c <HAL_DMA_Abort+0x444>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d04a      	beq.n	800457a <HAL_DMA_Abort+0x422>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a2d      	ldr	r2, [pc, #180]	@ (80045a0 <HAL_DMA_Abort+0x448>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d045      	beq.n	800457a <HAL_DMA_Abort+0x422>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a2c      	ldr	r2, [pc, #176]	@ (80045a4 <HAL_DMA_Abort+0x44c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d040      	beq.n	800457a <HAL_DMA_Abort+0x422>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a2a      	ldr	r2, [pc, #168]	@ (80045a8 <HAL_DMA_Abort+0x450>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d03b      	beq.n	800457a <HAL_DMA_Abort+0x422>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a29      	ldr	r2, [pc, #164]	@ (80045ac <HAL_DMA_Abort+0x454>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d036      	beq.n	800457a <HAL_DMA_Abort+0x422>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a27      	ldr	r2, [pc, #156]	@ (80045b0 <HAL_DMA_Abort+0x458>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d031      	beq.n	800457a <HAL_DMA_Abort+0x422>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a26      	ldr	r2, [pc, #152]	@ (80045b4 <HAL_DMA_Abort+0x45c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d02c      	beq.n	800457a <HAL_DMA_Abort+0x422>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a24      	ldr	r2, [pc, #144]	@ (80045b8 <HAL_DMA_Abort+0x460>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d027      	beq.n	800457a <HAL_DMA_Abort+0x422>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a23      	ldr	r2, [pc, #140]	@ (80045bc <HAL_DMA_Abort+0x464>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d022      	beq.n	800457a <HAL_DMA_Abort+0x422>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a21      	ldr	r2, [pc, #132]	@ (80045c0 <HAL_DMA_Abort+0x468>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d01d      	beq.n	800457a <HAL_DMA_Abort+0x422>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a20      	ldr	r2, [pc, #128]	@ (80045c4 <HAL_DMA_Abort+0x46c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d018      	beq.n	800457a <HAL_DMA_Abort+0x422>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1e      	ldr	r2, [pc, #120]	@ (80045c8 <HAL_DMA_Abort+0x470>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d013      	beq.n	800457a <HAL_DMA_Abort+0x422>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1d      	ldr	r2, [pc, #116]	@ (80045cc <HAL_DMA_Abort+0x474>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00e      	beq.n	800457a <HAL_DMA_Abort+0x422>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1b      	ldr	r2, [pc, #108]	@ (80045d0 <HAL_DMA_Abort+0x478>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d009      	beq.n	800457a <HAL_DMA_Abort+0x422>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a1a      	ldr	r2, [pc, #104]	@ (80045d4 <HAL_DMA_Abort+0x47c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d004      	beq.n	800457a <HAL_DMA_Abort+0x422>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a18      	ldr	r2, [pc, #96]	@ (80045d8 <HAL_DMA_Abort+0x480>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d101      	bne.n	800457e <HAL_DMA_Abort+0x426>
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <HAL_DMA_Abort+0x428>
 800457e:	2300      	movs	r3, #0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d02b      	beq.n	80045dc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004588:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	223f      	movs	r2, #63	@ 0x3f
 8004594:	409a      	lsls	r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	609a      	str	r2, [r3, #8]
 800459a:	e02a      	b.n	80045f2 <HAL_DMA_Abort+0x49a>
 800459c:	40020010 	.word	0x40020010
 80045a0:	40020028 	.word	0x40020028
 80045a4:	40020040 	.word	0x40020040
 80045a8:	40020058 	.word	0x40020058
 80045ac:	40020070 	.word	0x40020070
 80045b0:	40020088 	.word	0x40020088
 80045b4:	400200a0 	.word	0x400200a0
 80045b8:	400200b8 	.word	0x400200b8
 80045bc:	40020410 	.word	0x40020410
 80045c0:	40020428 	.word	0x40020428
 80045c4:	40020440 	.word	0x40020440
 80045c8:	40020458 	.word	0x40020458
 80045cc:	40020470 	.word	0x40020470
 80045d0:	40020488 	.word	0x40020488
 80045d4:	400204a0 	.word	0x400204a0
 80045d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	2201      	movs	r2, #1
 80045ec:	409a      	lsls	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a4f      	ldr	r2, [pc, #316]	@ (8004734 <HAL_DMA_Abort+0x5dc>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d072      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a4d      	ldr	r2, [pc, #308]	@ (8004738 <HAL_DMA_Abort+0x5e0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d06d      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a4c      	ldr	r2, [pc, #304]	@ (800473c <HAL_DMA_Abort+0x5e4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d068      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a4a      	ldr	r2, [pc, #296]	@ (8004740 <HAL_DMA_Abort+0x5e8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d063      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a49      	ldr	r2, [pc, #292]	@ (8004744 <HAL_DMA_Abort+0x5ec>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d05e      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a47      	ldr	r2, [pc, #284]	@ (8004748 <HAL_DMA_Abort+0x5f0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d059      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a46      	ldr	r2, [pc, #280]	@ (800474c <HAL_DMA_Abort+0x5f4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d054      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a44      	ldr	r2, [pc, #272]	@ (8004750 <HAL_DMA_Abort+0x5f8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d04f      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a43      	ldr	r2, [pc, #268]	@ (8004754 <HAL_DMA_Abort+0x5fc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d04a      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a41      	ldr	r2, [pc, #260]	@ (8004758 <HAL_DMA_Abort+0x600>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d045      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a40      	ldr	r2, [pc, #256]	@ (800475c <HAL_DMA_Abort+0x604>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d040      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a3e      	ldr	r2, [pc, #248]	@ (8004760 <HAL_DMA_Abort+0x608>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d03b      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a3d      	ldr	r2, [pc, #244]	@ (8004764 <HAL_DMA_Abort+0x60c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d036      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a3b      	ldr	r2, [pc, #236]	@ (8004768 <HAL_DMA_Abort+0x610>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d031      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a3a      	ldr	r2, [pc, #232]	@ (800476c <HAL_DMA_Abort+0x614>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d02c      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a38      	ldr	r2, [pc, #224]	@ (8004770 <HAL_DMA_Abort+0x618>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d027      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a37      	ldr	r2, [pc, #220]	@ (8004774 <HAL_DMA_Abort+0x61c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d022      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a35      	ldr	r2, [pc, #212]	@ (8004778 <HAL_DMA_Abort+0x620>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d01d      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a34      	ldr	r2, [pc, #208]	@ (800477c <HAL_DMA_Abort+0x624>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d018      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a32      	ldr	r2, [pc, #200]	@ (8004780 <HAL_DMA_Abort+0x628>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d013      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a31      	ldr	r2, [pc, #196]	@ (8004784 <HAL_DMA_Abort+0x62c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00e      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a2f      	ldr	r2, [pc, #188]	@ (8004788 <HAL_DMA_Abort+0x630>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d009      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a2e      	ldr	r2, [pc, #184]	@ (800478c <HAL_DMA_Abort+0x634>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d004      	beq.n	80046e2 <HAL_DMA_Abort+0x58a>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a2c      	ldr	r2, [pc, #176]	@ (8004790 <HAL_DMA_Abort+0x638>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d101      	bne.n	80046e6 <HAL_DMA_Abort+0x58e>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <HAL_DMA_Abort+0x590>
 80046e6:	2300      	movs	r3, #0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d015      	beq.n	8004718 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80046f4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00c      	beq.n	8004718 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004708:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800470c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004716:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40020010 	.word	0x40020010
 8004738:	40020028 	.word	0x40020028
 800473c:	40020040 	.word	0x40020040
 8004740:	40020058 	.word	0x40020058
 8004744:	40020070 	.word	0x40020070
 8004748:	40020088 	.word	0x40020088
 800474c:	400200a0 	.word	0x400200a0
 8004750:	400200b8 	.word	0x400200b8
 8004754:	40020410 	.word	0x40020410
 8004758:	40020428 	.word	0x40020428
 800475c:	40020440 	.word	0x40020440
 8004760:	40020458 	.word	0x40020458
 8004764:	40020470 	.word	0x40020470
 8004768:	40020488 	.word	0x40020488
 800476c:	400204a0 	.word	0x400204a0
 8004770:	400204b8 	.word	0x400204b8
 8004774:	58025408 	.word	0x58025408
 8004778:	5802541c 	.word	0x5802541c
 800477c:	58025430 	.word	0x58025430
 8004780:	58025444 	.word	0x58025444
 8004784:	58025458 	.word	0x58025458
 8004788:	5802546c 	.word	0x5802546c
 800478c:	58025480 	.word	0x58025480
 8004790:	58025494 	.word	0x58025494

08004794 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e237      	b.n	8004c16 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d004      	beq.n	80047bc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2280      	movs	r2, #128	@ 0x80
 80047b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e22c      	b.n	8004c16 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a5c      	ldr	r2, [pc, #368]	@ (8004934 <HAL_DMA_Abort_IT+0x1a0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d04a      	beq.n	800485c <HAL_DMA_Abort_IT+0xc8>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a5b      	ldr	r2, [pc, #364]	@ (8004938 <HAL_DMA_Abort_IT+0x1a4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d045      	beq.n	800485c <HAL_DMA_Abort_IT+0xc8>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a59      	ldr	r2, [pc, #356]	@ (800493c <HAL_DMA_Abort_IT+0x1a8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d040      	beq.n	800485c <HAL_DMA_Abort_IT+0xc8>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a58      	ldr	r2, [pc, #352]	@ (8004940 <HAL_DMA_Abort_IT+0x1ac>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d03b      	beq.n	800485c <HAL_DMA_Abort_IT+0xc8>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a56      	ldr	r2, [pc, #344]	@ (8004944 <HAL_DMA_Abort_IT+0x1b0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d036      	beq.n	800485c <HAL_DMA_Abort_IT+0xc8>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a55      	ldr	r2, [pc, #340]	@ (8004948 <HAL_DMA_Abort_IT+0x1b4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d031      	beq.n	800485c <HAL_DMA_Abort_IT+0xc8>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a53      	ldr	r2, [pc, #332]	@ (800494c <HAL_DMA_Abort_IT+0x1b8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d02c      	beq.n	800485c <HAL_DMA_Abort_IT+0xc8>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a52      	ldr	r2, [pc, #328]	@ (8004950 <HAL_DMA_Abort_IT+0x1bc>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d027      	beq.n	800485c <HAL_DMA_Abort_IT+0xc8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a50      	ldr	r2, [pc, #320]	@ (8004954 <HAL_DMA_Abort_IT+0x1c0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d022      	beq.n	800485c <HAL_DMA_Abort_IT+0xc8>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a4f      	ldr	r2, [pc, #316]	@ (8004958 <HAL_DMA_Abort_IT+0x1c4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d01d      	beq.n	800485c <HAL_DMA_Abort_IT+0xc8>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a4d      	ldr	r2, [pc, #308]	@ (800495c <HAL_DMA_Abort_IT+0x1c8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d018      	beq.n	800485c <HAL_DMA_Abort_IT+0xc8>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a4c      	ldr	r2, [pc, #304]	@ (8004960 <HAL_DMA_Abort_IT+0x1cc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d013      	beq.n	800485c <HAL_DMA_Abort_IT+0xc8>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a4a      	ldr	r2, [pc, #296]	@ (8004964 <HAL_DMA_Abort_IT+0x1d0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00e      	beq.n	800485c <HAL_DMA_Abort_IT+0xc8>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a49      	ldr	r2, [pc, #292]	@ (8004968 <HAL_DMA_Abort_IT+0x1d4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d009      	beq.n	800485c <HAL_DMA_Abort_IT+0xc8>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a47      	ldr	r2, [pc, #284]	@ (800496c <HAL_DMA_Abort_IT+0x1d8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d004      	beq.n	800485c <HAL_DMA_Abort_IT+0xc8>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a46      	ldr	r2, [pc, #280]	@ (8004970 <HAL_DMA_Abort_IT+0x1dc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d101      	bne.n	8004860 <HAL_DMA_Abort_IT+0xcc>
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <HAL_DMA_Abort_IT+0xce>
 8004860:	2300      	movs	r3, #0
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 8086 	beq.w	8004974 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2204      	movs	r2, #4
 800486c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a2f      	ldr	r2, [pc, #188]	@ (8004934 <HAL_DMA_Abort_IT+0x1a0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d04a      	beq.n	8004910 <HAL_DMA_Abort_IT+0x17c>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a2e      	ldr	r2, [pc, #184]	@ (8004938 <HAL_DMA_Abort_IT+0x1a4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d045      	beq.n	8004910 <HAL_DMA_Abort_IT+0x17c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a2c      	ldr	r2, [pc, #176]	@ (800493c <HAL_DMA_Abort_IT+0x1a8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d040      	beq.n	8004910 <HAL_DMA_Abort_IT+0x17c>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a2b      	ldr	r2, [pc, #172]	@ (8004940 <HAL_DMA_Abort_IT+0x1ac>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d03b      	beq.n	8004910 <HAL_DMA_Abort_IT+0x17c>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a29      	ldr	r2, [pc, #164]	@ (8004944 <HAL_DMA_Abort_IT+0x1b0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d036      	beq.n	8004910 <HAL_DMA_Abort_IT+0x17c>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a28      	ldr	r2, [pc, #160]	@ (8004948 <HAL_DMA_Abort_IT+0x1b4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d031      	beq.n	8004910 <HAL_DMA_Abort_IT+0x17c>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a26      	ldr	r2, [pc, #152]	@ (800494c <HAL_DMA_Abort_IT+0x1b8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d02c      	beq.n	8004910 <HAL_DMA_Abort_IT+0x17c>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a25      	ldr	r2, [pc, #148]	@ (8004950 <HAL_DMA_Abort_IT+0x1bc>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d027      	beq.n	8004910 <HAL_DMA_Abort_IT+0x17c>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a23      	ldr	r2, [pc, #140]	@ (8004954 <HAL_DMA_Abort_IT+0x1c0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d022      	beq.n	8004910 <HAL_DMA_Abort_IT+0x17c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a22      	ldr	r2, [pc, #136]	@ (8004958 <HAL_DMA_Abort_IT+0x1c4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d01d      	beq.n	8004910 <HAL_DMA_Abort_IT+0x17c>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a20      	ldr	r2, [pc, #128]	@ (800495c <HAL_DMA_Abort_IT+0x1c8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d018      	beq.n	8004910 <HAL_DMA_Abort_IT+0x17c>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004960 <HAL_DMA_Abort_IT+0x1cc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d013      	beq.n	8004910 <HAL_DMA_Abort_IT+0x17c>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004964 <HAL_DMA_Abort_IT+0x1d0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d00e      	beq.n	8004910 <HAL_DMA_Abort_IT+0x17c>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004968 <HAL_DMA_Abort_IT+0x1d4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d009      	beq.n	8004910 <HAL_DMA_Abort_IT+0x17c>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a1a      	ldr	r2, [pc, #104]	@ (800496c <HAL_DMA_Abort_IT+0x1d8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <HAL_DMA_Abort_IT+0x17c>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a19      	ldr	r2, [pc, #100]	@ (8004970 <HAL_DMA_Abort_IT+0x1dc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d108      	bne.n	8004922 <HAL_DMA_Abort_IT+0x18e>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0201 	bic.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	e178      	b.n	8004c14 <HAL_DMA_Abort_IT+0x480>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0201 	bic.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	e16f      	b.n	8004c14 <HAL_DMA_Abort_IT+0x480>
 8004934:	40020010 	.word	0x40020010
 8004938:	40020028 	.word	0x40020028
 800493c:	40020040 	.word	0x40020040
 8004940:	40020058 	.word	0x40020058
 8004944:	40020070 	.word	0x40020070
 8004948:	40020088 	.word	0x40020088
 800494c:	400200a0 	.word	0x400200a0
 8004950:	400200b8 	.word	0x400200b8
 8004954:	40020410 	.word	0x40020410
 8004958:	40020428 	.word	0x40020428
 800495c:	40020440 	.word	0x40020440
 8004960:	40020458 	.word	0x40020458
 8004964:	40020470 	.word	0x40020470
 8004968:	40020488 	.word	0x40020488
 800496c:	400204a0 	.word	0x400204a0
 8004970:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 020e 	bic.w	r2, r2, #14
 8004982:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a6c      	ldr	r2, [pc, #432]	@ (8004b3c <HAL_DMA_Abort_IT+0x3a8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d04a      	beq.n	8004a24 <HAL_DMA_Abort_IT+0x290>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a6b      	ldr	r2, [pc, #428]	@ (8004b40 <HAL_DMA_Abort_IT+0x3ac>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d045      	beq.n	8004a24 <HAL_DMA_Abort_IT+0x290>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a69      	ldr	r2, [pc, #420]	@ (8004b44 <HAL_DMA_Abort_IT+0x3b0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d040      	beq.n	8004a24 <HAL_DMA_Abort_IT+0x290>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a68      	ldr	r2, [pc, #416]	@ (8004b48 <HAL_DMA_Abort_IT+0x3b4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d03b      	beq.n	8004a24 <HAL_DMA_Abort_IT+0x290>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a66      	ldr	r2, [pc, #408]	@ (8004b4c <HAL_DMA_Abort_IT+0x3b8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d036      	beq.n	8004a24 <HAL_DMA_Abort_IT+0x290>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a65      	ldr	r2, [pc, #404]	@ (8004b50 <HAL_DMA_Abort_IT+0x3bc>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d031      	beq.n	8004a24 <HAL_DMA_Abort_IT+0x290>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a63      	ldr	r2, [pc, #396]	@ (8004b54 <HAL_DMA_Abort_IT+0x3c0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d02c      	beq.n	8004a24 <HAL_DMA_Abort_IT+0x290>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a62      	ldr	r2, [pc, #392]	@ (8004b58 <HAL_DMA_Abort_IT+0x3c4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d027      	beq.n	8004a24 <HAL_DMA_Abort_IT+0x290>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a60      	ldr	r2, [pc, #384]	@ (8004b5c <HAL_DMA_Abort_IT+0x3c8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d022      	beq.n	8004a24 <HAL_DMA_Abort_IT+0x290>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a5f      	ldr	r2, [pc, #380]	@ (8004b60 <HAL_DMA_Abort_IT+0x3cc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d01d      	beq.n	8004a24 <HAL_DMA_Abort_IT+0x290>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a5d      	ldr	r2, [pc, #372]	@ (8004b64 <HAL_DMA_Abort_IT+0x3d0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d018      	beq.n	8004a24 <HAL_DMA_Abort_IT+0x290>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a5c      	ldr	r2, [pc, #368]	@ (8004b68 <HAL_DMA_Abort_IT+0x3d4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d013      	beq.n	8004a24 <HAL_DMA_Abort_IT+0x290>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a5a      	ldr	r2, [pc, #360]	@ (8004b6c <HAL_DMA_Abort_IT+0x3d8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00e      	beq.n	8004a24 <HAL_DMA_Abort_IT+0x290>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a59      	ldr	r2, [pc, #356]	@ (8004b70 <HAL_DMA_Abort_IT+0x3dc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d009      	beq.n	8004a24 <HAL_DMA_Abort_IT+0x290>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a57      	ldr	r2, [pc, #348]	@ (8004b74 <HAL_DMA_Abort_IT+0x3e0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d004      	beq.n	8004a24 <HAL_DMA_Abort_IT+0x290>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a56      	ldr	r2, [pc, #344]	@ (8004b78 <HAL_DMA_Abort_IT+0x3e4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d108      	bne.n	8004a36 <HAL_DMA_Abort_IT+0x2a2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0201 	bic.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	e007      	b.n	8004a46 <HAL_DMA_Abort_IT+0x2b2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0201 	bic.w	r2, r2, #1
 8004a44:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a3c      	ldr	r2, [pc, #240]	@ (8004b3c <HAL_DMA_Abort_IT+0x3a8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d072      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a3a      	ldr	r2, [pc, #232]	@ (8004b40 <HAL_DMA_Abort_IT+0x3ac>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d06d      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a39      	ldr	r2, [pc, #228]	@ (8004b44 <HAL_DMA_Abort_IT+0x3b0>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d068      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a37      	ldr	r2, [pc, #220]	@ (8004b48 <HAL_DMA_Abort_IT+0x3b4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d063      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a36      	ldr	r2, [pc, #216]	@ (8004b4c <HAL_DMA_Abort_IT+0x3b8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d05e      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a34      	ldr	r2, [pc, #208]	@ (8004b50 <HAL_DMA_Abort_IT+0x3bc>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d059      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a33      	ldr	r2, [pc, #204]	@ (8004b54 <HAL_DMA_Abort_IT+0x3c0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d054      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a31      	ldr	r2, [pc, #196]	@ (8004b58 <HAL_DMA_Abort_IT+0x3c4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d04f      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a30      	ldr	r2, [pc, #192]	@ (8004b5c <HAL_DMA_Abort_IT+0x3c8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d04a      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a2e      	ldr	r2, [pc, #184]	@ (8004b60 <HAL_DMA_Abort_IT+0x3cc>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d045      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a2d      	ldr	r2, [pc, #180]	@ (8004b64 <HAL_DMA_Abort_IT+0x3d0>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d040      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a2b      	ldr	r2, [pc, #172]	@ (8004b68 <HAL_DMA_Abort_IT+0x3d4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d03b      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8004b6c <HAL_DMA_Abort_IT+0x3d8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d036      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a28      	ldr	r2, [pc, #160]	@ (8004b70 <HAL_DMA_Abort_IT+0x3dc>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d031      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a27      	ldr	r2, [pc, #156]	@ (8004b74 <HAL_DMA_Abort_IT+0x3e0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d02c      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a25      	ldr	r2, [pc, #148]	@ (8004b78 <HAL_DMA_Abort_IT+0x3e4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d027      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a24      	ldr	r2, [pc, #144]	@ (8004b7c <HAL_DMA_Abort_IT+0x3e8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d022      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a22      	ldr	r2, [pc, #136]	@ (8004b80 <HAL_DMA_Abort_IT+0x3ec>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d01d      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a21      	ldr	r2, [pc, #132]	@ (8004b84 <HAL_DMA_Abort_IT+0x3f0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d018      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1f      	ldr	r2, [pc, #124]	@ (8004b88 <HAL_DMA_Abort_IT+0x3f4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d013      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1e      	ldr	r2, [pc, #120]	@ (8004b8c <HAL_DMA_Abort_IT+0x3f8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00e      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1c      	ldr	r2, [pc, #112]	@ (8004b90 <HAL_DMA_Abort_IT+0x3fc>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d009      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a1b      	ldr	r2, [pc, #108]	@ (8004b94 <HAL_DMA_Abort_IT+0x400>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d004      	beq.n	8004b36 <HAL_DMA_Abort_IT+0x3a2>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a19      	ldr	r2, [pc, #100]	@ (8004b98 <HAL_DMA_Abort_IT+0x404>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d132      	bne.n	8004b9c <HAL_DMA_Abort_IT+0x408>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e031      	b.n	8004b9e <HAL_DMA_Abort_IT+0x40a>
 8004b3a:	bf00      	nop
 8004b3c:	40020010 	.word	0x40020010
 8004b40:	40020028 	.word	0x40020028
 8004b44:	40020040 	.word	0x40020040
 8004b48:	40020058 	.word	0x40020058
 8004b4c:	40020070 	.word	0x40020070
 8004b50:	40020088 	.word	0x40020088
 8004b54:	400200a0 	.word	0x400200a0
 8004b58:	400200b8 	.word	0x400200b8
 8004b5c:	40020410 	.word	0x40020410
 8004b60:	40020428 	.word	0x40020428
 8004b64:	40020440 	.word	0x40020440
 8004b68:	40020458 	.word	0x40020458
 8004b6c:	40020470 	.word	0x40020470
 8004b70:	40020488 	.word	0x40020488
 8004b74:	400204a0 	.word	0x400204a0
 8004b78:	400204b8 	.word	0x400204b8
 8004b7c:	58025408 	.word	0x58025408
 8004b80:	5802541c 	.word	0x5802541c
 8004b84:	58025430 	.word	0x58025430
 8004b88:	58025444 	.word	0x58025444
 8004b8c:	58025458 	.word	0x58025458
 8004b90:	5802546c 	.word	0x5802546c
 8004b94:	58025480 	.word	0x58025480
 8004b98:	58025494 	.word	0x58025494
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d028      	beq.n	8004bf4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bb0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bbc:	f003 031f 	and.w	r3, r3, #31
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	409a      	lsls	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004bd0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00c      	beq.n	8004bf4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004be4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004be8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004bf2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop

08004c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b089      	sub	sp, #36	@ 0x24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004c2e:	4b89      	ldr	r3, [pc, #548]	@ (8004e54 <HAL_GPIO_Init+0x234>)
 8004c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c32:	e194      	b.n	8004f5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	2101      	movs	r1, #1
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c40:	4013      	ands	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 8186 	beq.w	8004f58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d005      	beq.n	8004c64 <HAL_GPIO_Init+0x44>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f003 0303 	and.w	r3, r3, #3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d130      	bne.n	8004cc6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	2203      	movs	r2, #3
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	f003 0201 	and.w	r2, r3, #1
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d017      	beq.n	8004d02 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	2203      	movs	r2, #3
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d123      	bne.n	8004d56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	08da      	lsrs	r2, r3, #3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3208      	adds	r2, #8
 8004d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	220f      	movs	r2, #15
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	08da      	lsrs	r2, r3, #3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3208      	adds	r2, #8
 8004d50:	69b9      	ldr	r1, [r7, #24]
 8004d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	2203      	movs	r2, #3
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	43db      	mvns	r3, r3
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f003 0203 	and.w	r2, r3, #3
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 80e0 	beq.w	8004f58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d98:	4b2f      	ldr	r3, [pc, #188]	@ (8004e58 <HAL_GPIO_Init+0x238>)
 8004d9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d9e:	4a2e      	ldr	r2, [pc, #184]	@ (8004e58 <HAL_GPIO_Init+0x238>)
 8004da0:	f043 0302 	orr.w	r3, r3, #2
 8004da4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004da8:	4b2b      	ldr	r3, [pc, #172]	@ (8004e58 <HAL_GPIO_Init+0x238>)
 8004daa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004db6:	4a29      	ldr	r2, [pc, #164]	@ (8004e5c <HAL_GPIO_Init+0x23c>)
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	089b      	lsrs	r3, r3, #2
 8004dbc:	3302      	adds	r3, #2
 8004dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	220f      	movs	r2, #15
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a20      	ldr	r2, [pc, #128]	@ (8004e60 <HAL_GPIO_Init+0x240>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d052      	beq.n	8004e88 <HAL_GPIO_Init+0x268>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a1f      	ldr	r2, [pc, #124]	@ (8004e64 <HAL_GPIO_Init+0x244>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d031      	beq.n	8004e4e <HAL_GPIO_Init+0x22e>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a1e      	ldr	r2, [pc, #120]	@ (8004e68 <HAL_GPIO_Init+0x248>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d02b      	beq.n	8004e4a <HAL_GPIO_Init+0x22a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e6c <HAL_GPIO_Init+0x24c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d025      	beq.n	8004e46 <HAL_GPIO_Init+0x226>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8004e70 <HAL_GPIO_Init+0x250>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d01f      	beq.n	8004e42 <HAL_GPIO_Init+0x222>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a1b      	ldr	r2, [pc, #108]	@ (8004e74 <HAL_GPIO_Init+0x254>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d019      	beq.n	8004e3e <HAL_GPIO_Init+0x21e>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8004e78 <HAL_GPIO_Init+0x258>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <HAL_GPIO_Init+0x21a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a19      	ldr	r2, [pc, #100]	@ (8004e7c <HAL_GPIO_Init+0x25c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00d      	beq.n	8004e36 <HAL_GPIO_Init+0x216>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a18      	ldr	r2, [pc, #96]	@ (8004e80 <HAL_GPIO_Init+0x260>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d007      	beq.n	8004e32 <HAL_GPIO_Init+0x212>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a17      	ldr	r2, [pc, #92]	@ (8004e84 <HAL_GPIO_Init+0x264>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d101      	bne.n	8004e2e <HAL_GPIO_Init+0x20e>
 8004e2a:	2309      	movs	r3, #9
 8004e2c:	e02d      	b.n	8004e8a <HAL_GPIO_Init+0x26a>
 8004e2e:	230a      	movs	r3, #10
 8004e30:	e02b      	b.n	8004e8a <HAL_GPIO_Init+0x26a>
 8004e32:	2308      	movs	r3, #8
 8004e34:	e029      	b.n	8004e8a <HAL_GPIO_Init+0x26a>
 8004e36:	2307      	movs	r3, #7
 8004e38:	e027      	b.n	8004e8a <HAL_GPIO_Init+0x26a>
 8004e3a:	2306      	movs	r3, #6
 8004e3c:	e025      	b.n	8004e8a <HAL_GPIO_Init+0x26a>
 8004e3e:	2305      	movs	r3, #5
 8004e40:	e023      	b.n	8004e8a <HAL_GPIO_Init+0x26a>
 8004e42:	2304      	movs	r3, #4
 8004e44:	e021      	b.n	8004e8a <HAL_GPIO_Init+0x26a>
 8004e46:	2303      	movs	r3, #3
 8004e48:	e01f      	b.n	8004e8a <HAL_GPIO_Init+0x26a>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	e01d      	b.n	8004e8a <HAL_GPIO_Init+0x26a>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e01b      	b.n	8004e8a <HAL_GPIO_Init+0x26a>
 8004e52:	bf00      	nop
 8004e54:	58000080 	.word	0x58000080
 8004e58:	58024400 	.word	0x58024400
 8004e5c:	58000400 	.word	0x58000400
 8004e60:	58020000 	.word	0x58020000
 8004e64:	58020400 	.word	0x58020400
 8004e68:	58020800 	.word	0x58020800
 8004e6c:	58020c00 	.word	0x58020c00
 8004e70:	58021000 	.word	0x58021000
 8004e74:	58021400 	.word	0x58021400
 8004e78:	58021800 	.word	0x58021800
 8004e7c:	58021c00 	.word	0x58021c00
 8004e80:	58022000 	.word	0x58022000
 8004e84:	58022400 	.word	0x58022400
 8004e88:	2300      	movs	r3, #0
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	f002 0203 	and.w	r2, r2, #3
 8004e90:	0092      	lsls	r2, r2, #2
 8004e92:	4093      	lsls	r3, r2
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e9a:	4938      	ldr	r1, [pc, #224]	@ (8004f7c <HAL_GPIO_Init+0x35c>)
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	089b      	lsrs	r3, r3, #2
 8004ea0:	3302      	adds	r3, #2
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004ece:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004efc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	4013      	ands	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	43db      	mvns	r3, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	fa22 f303 	lsr.w	r3, r2, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f47f ae63 	bne.w	8004c34 <HAL_GPIO_Init+0x14>
  }
}
 8004f6e:	bf00      	nop
 8004f70:	bf00      	nop
 8004f72:	3724      	adds	r7, #36	@ 0x24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	58000400 	.word	0x58000400

08004f80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	460b      	mov	r3, r1
 8004f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	887b      	ldrh	r3, [r7, #2]
 8004f92:	4013      	ands	r3, r2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	73fb      	strb	r3, [r7, #15]
 8004f9c:	e001      	b.n	8004fa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	807b      	strh	r3, [r7, #2]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fc0:	787b      	ldrb	r3, [r7, #1]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fc6:	887a      	ldrh	r2, [r7, #2]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004fcc:	e003      	b.n	8004fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004fce:	887b      	ldrh	r3, [r7, #2]
 8004fd0:	041a      	lsls	r2, r3, #16
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	619a      	str	r2, [r3, #24]
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	460b      	mov	r3, r1
 8004fec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ff4:	887a      	ldrh	r2, [r7, #2]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	041a      	lsls	r2, r3, #16
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	43d9      	mvns	r1, r3
 8005000:	887b      	ldrh	r3, [r7, #2]
 8005002:	400b      	ands	r3, r1
 8005004:	431a      	orrs	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	619a      	str	r2, [r3, #24]
}
 800500a:	bf00      	nop
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
	...

08005018 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005020:	4b19      	ldr	r3, [pc, #100]	@ (8005088 <HAL_PWREx_ConfigSupply+0x70>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b04      	cmp	r3, #4
 800502a:	d00a      	beq.n	8005042 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800502c:	4b16      	ldr	r3, [pc, #88]	@ (8005088 <HAL_PWREx_ConfigSupply+0x70>)
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	429a      	cmp	r2, r3
 8005038:	d001      	beq.n	800503e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e01f      	b.n	800507e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	e01d      	b.n	800507e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005042:	4b11      	ldr	r3, [pc, #68]	@ (8005088 <HAL_PWREx_ConfigSupply+0x70>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f023 0207 	bic.w	r2, r3, #7
 800504a:	490f      	ldr	r1, [pc, #60]	@ (8005088 <HAL_PWREx_ConfigSupply+0x70>)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4313      	orrs	r3, r2
 8005050:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005052:	f7fe fee9 	bl	8003e28 <HAL_GetTick>
 8005056:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005058:	e009      	b.n	800506e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800505a:	f7fe fee5 	bl	8003e28 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005068:	d901      	bls.n	800506e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e007      	b.n	800507e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800506e:	4b06      	ldr	r3, [pc, #24]	@ (8005088 <HAL_PWREx_ConfigSupply+0x70>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800507a:	d1ee      	bne.n	800505a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	58024800 	.word	0x58024800

0800508c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08c      	sub	sp, #48	@ 0x30
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	f000 bc48 	b.w	8005930 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8088 	beq.w	80051be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ae:	4b99      	ldr	r3, [pc, #612]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050b8:	4b96      	ldr	r3, [pc, #600]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 80050ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80050be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c0:	2b10      	cmp	r3, #16
 80050c2:	d007      	beq.n	80050d4 <HAL_RCC_OscConfig+0x48>
 80050c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c6:	2b18      	cmp	r3, #24
 80050c8:	d111      	bne.n	80050ee <HAL_RCC_OscConfig+0x62>
 80050ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d10c      	bne.n	80050ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d4:	4b8f      	ldr	r3, [pc, #572]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d06d      	beq.n	80051bc <HAL_RCC_OscConfig+0x130>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d169      	bne.n	80051bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	f000 bc21 	b.w	8005930 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050f6:	d106      	bne.n	8005106 <HAL_RCC_OscConfig+0x7a>
 80050f8:	4b86      	ldr	r3, [pc, #536]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a85      	ldr	r2, [pc, #532]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 80050fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	e02e      	b.n	8005164 <HAL_RCC_OscConfig+0xd8>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10c      	bne.n	8005128 <HAL_RCC_OscConfig+0x9c>
 800510e:	4b81      	ldr	r3, [pc, #516]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a80      	ldr	r2, [pc, #512]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 8005114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	4b7e      	ldr	r3, [pc, #504]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a7d      	ldr	r2, [pc, #500]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 8005120:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	e01d      	b.n	8005164 <HAL_RCC_OscConfig+0xd8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005130:	d10c      	bne.n	800514c <HAL_RCC_OscConfig+0xc0>
 8005132:	4b78      	ldr	r3, [pc, #480]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a77      	ldr	r2, [pc, #476]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 8005138:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	4b75      	ldr	r3, [pc, #468]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a74      	ldr	r2, [pc, #464]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 8005144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	e00b      	b.n	8005164 <HAL_RCC_OscConfig+0xd8>
 800514c:	4b71      	ldr	r3, [pc, #452]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a70      	ldr	r2, [pc, #448]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 8005152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	4b6e      	ldr	r3, [pc, #440]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a6d      	ldr	r2, [pc, #436]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 800515e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d013      	beq.n	8005194 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516c:	f7fe fe5c 	bl	8003e28 <HAL_GetTick>
 8005170:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005174:	f7fe fe58 	bl	8003e28 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b64      	cmp	r3, #100	@ 0x64
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e3d4      	b.n	8005930 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005186:	4b63      	ldr	r3, [pc, #396]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0f0      	beq.n	8005174 <HAL_RCC_OscConfig+0xe8>
 8005192:	e014      	b.n	80051be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005194:	f7fe fe48 	bl	8003e28 <HAL_GetTick>
 8005198:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800519c:	f7fe fe44 	bl	8003e28 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b64      	cmp	r3, #100	@ 0x64
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e3c0      	b.n	8005930 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051ae:	4b59      	ldr	r3, [pc, #356]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1f0      	bne.n	800519c <HAL_RCC_OscConfig+0x110>
 80051ba:	e000      	b.n	80051be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 80ca 	beq.w	8005360 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051cc:	4b51      	ldr	r3, [pc, #324]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051d6:	4b4f      	ldr	r3, [pc, #316]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 80051d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051da:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d007      	beq.n	80051f2 <HAL_RCC_OscConfig+0x166>
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	2b18      	cmp	r3, #24
 80051e6:	d156      	bne.n	8005296 <HAL_RCC_OscConfig+0x20a>
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d151      	bne.n	8005296 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051f2:	4b48      	ldr	r3, [pc, #288]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0304 	and.w	r3, r3, #4
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d005      	beq.n	800520a <HAL_RCC_OscConfig+0x17e>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e392      	b.n	8005930 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800520a:	4b42      	ldr	r3, [pc, #264]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f023 0219 	bic.w	r2, r3, #25
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	493f      	ldr	r1, [pc, #252]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 8005218:	4313      	orrs	r3, r2
 800521a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521c:	f7fe fe04 	bl	8003e28 <HAL_GetTick>
 8005220:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005224:	f7fe fe00 	bl	8003e28 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e37c      	b.n	8005930 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005236:	4b37      	ldr	r3, [pc, #220]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0f0      	beq.n	8005224 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005242:	f7fe fe21 	bl	8003e88 <HAL_GetREVID>
 8005246:	4603      	mov	r3, r0
 8005248:	f241 0203 	movw	r2, #4099	@ 0x1003
 800524c:	4293      	cmp	r3, r2
 800524e:	d817      	bhi.n	8005280 <HAL_RCC_OscConfig+0x1f4>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	2b40      	cmp	r3, #64	@ 0x40
 8005256:	d108      	bne.n	800526a <HAL_RCC_OscConfig+0x1de>
 8005258:	4b2e      	ldr	r3, [pc, #184]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005260:	4a2c      	ldr	r2, [pc, #176]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 8005262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005266:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005268:	e07a      	b.n	8005360 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800526a:	4b2a      	ldr	r3, [pc, #168]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	031b      	lsls	r3, r3, #12
 8005278:	4926      	ldr	r1, [pc, #152]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 800527a:	4313      	orrs	r3, r2
 800527c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800527e:	e06f      	b.n	8005360 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005280:	4b24      	ldr	r3, [pc, #144]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	061b      	lsls	r3, r3, #24
 800528e:	4921      	ldr	r1, [pc, #132]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 8005290:	4313      	orrs	r3, r2
 8005292:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005294:	e064      	b.n	8005360 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d047      	beq.n	800532e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800529e:	4b1d      	ldr	r3, [pc, #116]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f023 0219 	bic.w	r2, r3, #25
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	491a      	ldr	r1, [pc, #104]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b0:	f7fe fdba 	bl	8003e28 <HAL_GetTick>
 80052b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052b8:	f7fe fdb6 	bl	8003e28 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e332      	b.n	8005930 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052ca:	4b12      	ldr	r3, [pc, #72]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0304 	and.w	r3, r3, #4
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f0      	beq.n	80052b8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d6:	f7fe fdd7 	bl	8003e88 <HAL_GetREVID>
 80052da:	4603      	mov	r3, r0
 80052dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d819      	bhi.n	8005318 <HAL_RCC_OscConfig+0x28c>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	2b40      	cmp	r3, #64	@ 0x40
 80052ea:	d108      	bne.n	80052fe <HAL_RCC_OscConfig+0x272>
 80052ec:	4b09      	ldr	r3, [pc, #36]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80052f4:	4a07      	ldr	r2, [pc, #28]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 80052f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052fa:	6053      	str	r3, [r2, #4]
 80052fc:	e030      	b.n	8005360 <HAL_RCC_OscConfig+0x2d4>
 80052fe:	4b05      	ldr	r3, [pc, #20]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	031b      	lsls	r3, r3, #12
 800530c:	4901      	ldr	r1, [pc, #4]	@ (8005314 <HAL_RCC_OscConfig+0x288>)
 800530e:	4313      	orrs	r3, r2
 8005310:	604b      	str	r3, [r1, #4]
 8005312:	e025      	b.n	8005360 <HAL_RCC_OscConfig+0x2d4>
 8005314:	58024400 	.word	0x58024400
 8005318:	4b9a      	ldr	r3, [pc, #616]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	061b      	lsls	r3, r3, #24
 8005326:	4997      	ldr	r1, [pc, #604]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 8005328:	4313      	orrs	r3, r2
 800532a:	604b      	str	r3, [r1, #4]
 800532c:	e018      	b.n	8005360 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800532e:	4b95      	ldr	r3, [pc, #596]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a94      	ldr	r2, [pc, #592]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 8005334:	f023 0301 	bic.w	r3, r3, #1
 8005338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533a:	f7fe fd75 	bl	8003e28 <HAL_GetTick>
 800533e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005340:	e008      	b.n	8005354 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005342:	f7fe fd71 	bl	8003e28 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d901      	bls.n	8005354 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e2ed      	b.n	8005930 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005354:	4b8b      	ldr	r3, [pc, #556]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1f0      	bne.n	8005342 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0310 	and.w	r3, r3, #16
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80a9 	beq.w	80054c0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800536e:	4b85      	ldr	r3, [pc, #532]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005376:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005378:	4b82      	ldr	r3, [pc, #520]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 800537a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	2b08      	cmp	r3, #8
 8005382:	d007      	beq.n	8005394 <HAL_RCC_OscConfig+0x308>
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2b18      	cmp	r3, #24
 8005388:	d13a      	bne.n	8005400 <HAL_RCC_OscConfig+0x374>
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f003 0303 	and.w	r3, r3, #3
 8005390:	2b01      	cmp	r3, #1
 8005392:	d135      	bne.n	8005400 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005394:	4b7b      	ldr	r3, [pc, #492]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800539c:	2b00      	cmp	r3, #0
 800539e:	d005      	beq.n	80053ac <HAL_RCC_OscConfig+0x320>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	2b80      	cmp	r3, #128	@ 0x80
 80053a6:	d001      	beq.n	80053ac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e2c1      	b.n	8005930 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053ac:	f7fe fd6c 	bl	8003e88 <HAL_GetREVID>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d817      	bhi.n	80053ea <HAL_RCC_OscConfig+0x35e>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	2b20      	cmp	r3, #32
 80053c0:	d108      	bne.n	80053d4 <HAL_RCC_OscConfig+0x348>
 80053c2:	4b70      	ldr	r3, [pc, #448]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80053ca:	4a6e      	ldr	r2, [pc, #440]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 80053cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053d0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053d2:	e075      	b.n	80054c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053d4:	4b6b      	ldr	r3, [pc, #428]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	069b      	lsls	r3, r3, #26
 80053e2:	4968      	ldr	r1, [pc, #416]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053e8:	e06a      	b.n	80054c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053ea:	4b66      	ldr	r3, [pc, #408]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	061b      	lsls	r3, r3, #24
 80053f8:	4962      	ldr	r1, [pc, #392]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053fe:	e05f      	b.n	80054c0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d042      	beq.n	800548e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005408:	4b5e      	ldr	r3, [pc, #376]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a5d      	ldr	r2, [pc, #372]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 800540e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005414:	f7fe fd08 	bl	8003e28 <HAL_GetTick>
 8005418:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800541c:	f7fe fd04 	bl	8003e28 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e280      	b.n	8005930 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800542e:	4b55      	ldr	r3, [pc, #340]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0f0      	beq.n	800541c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800543a:	f7fe fd25 	bl	8003e88 <HAL_GetREVID>
 800543e:	4603      	mov	r3, r0
 8005440:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005444:	4293      	cmp	r3, r2
 8005446:	d817      	bhi.n	8005478 <HAL_RCC_OscConfig+0x3ec>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	2b20      	cmp	r3, #32
 800544e:	d108      	bne.n	8005462 <HAL_RCC_OscConfig+0x3d6>
 8005450:	4b4c      	ldr	r3, [pc, #304]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005458:	4a4a      	ldr	r2, [pc, #296]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 800545a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800545e:	6053      	str	r3, [r2, #4]
 8005460:	e02e      	b.n	80054c0 <HAL_RCC_OscConfig+0x434>
 8005462:	4b48      	ldr	r3, [pc, #288]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	069b      	lsls	r3, r3, #26
 8005470:	4944      	ldr	r1, [pc, #272]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 8005472:	4313      	orrs	r3, r2
 8005474:	604b      	str	r3, [r1, #4]
 8005476:	e023      	b.n	80054c0 <HAL_RCC_OscConfig+0x434>
 8005478:	4b42      	ldr	r3, [pc, #264]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	061b      	lsls	r3, r3, #24
 8005486:	493f      	ldr	r1, [pc, #252]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 8005488:	4313      	orrs	r3, r2
 800548a:	60cb      	str	r3, [r1, #12]
 800548c:	e018      	b.n	80054c0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800548e:	4b3d      	ldr	r3, [pc, #244]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a3c      	ldr	r2, [pc, #240]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 8005494:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549a:	f7fe fcc5 	bl	8003e28 <HAL_GetTick>
 800549e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80054a2:	f7fe fcc1 	bl	8003e28 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e23d      	b.n	8005930 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054b4:	4b33      	ldr	r3, [pc, #204]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1f0      	bne.n	80054a2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0308 	and.w	r3, r3, #8
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d036      	beq.n	800553a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d019      	beq.n	8005508 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054d4:	4b2b      	ldr	r3, [pc, #172]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 80054d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 80054da:	f043 0301 	orr.w	r3, r3, #1
 80054de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e0:	f7fe fca2 	bl	8003e28 <HAL_GetTick>
 80054e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054e8:	f7fe fc9e 	bl	8003e28 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e21a      	b.n	8005930 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054fa:	4b22      	ldr	r3, [pc, #136]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 80054fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0f0      	beq.n	80054e8 <HAL_RCC_OscConfig+0x45c>
 8005506:	e018      	b.n	800553a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005508:	4b1e      	ldr	r3, [pc, #120]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 800550a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800550c:	4a1d      	ldr	r2, [pc, #116]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 800550e:	f023 0301 	bic.w	r3, r3, #1
 8005512:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005514:	f7fe fc88 	bl	8003e28 <HAL_GetTick>
 8005518:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800551c:	f7fe fc84 	bl	8003e28 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e200      	b.n	8005930 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800552e:	4b15      	ldr	r3, [pc, #84]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 8005530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f0      	bne.n	800551c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b00      	cmp	r3, #0
 8005544:	d039      	beq.n	80055ba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d01c      	beq.n	8005588 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800554e:	4b0d      	ldr	r3, [pc, #52]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a0c      	ldr	r2, [pc, #48]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 8005554:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005558:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800555a:	f7fe fc65 	bl	8003e28 <HAL_GetTick>
 800555e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005562:	f7fe fc61 	bl	8003e28 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e1dd      	b.n	8005930 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005574:	4b03      	ldr	r3, [pc, #12]	@ (8005584 <HAL_RCC_OscConfig+0x4f8>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0f0      	beq.n	8005562 <HAL_RCC_OscConfig+0x4d6>
 8005580:	e01b      	b.n	80055ba <HAL_RCC_OscConfig+0x52e>
 8005582:	bf00      	nop
 8005584:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005588:	4b9b      	ldr	r3, [pc, #620]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a9a      	ldr	r2, [pc, #616]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 800558e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005592:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005594:	f7fe fc48 	bl	8003e28 <HAL_GetTick>
 8005598:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800559c:	f7fe fc44 	bl	8003e28 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e1c0      	b.n	8005930 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055ae:	4b92      	ldr	r3, [pc, #584]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f0      	bne.n	800559c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 8081 	beq.w	80056ca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80055c8:	4b8c      	ldr	r3, [pc, #560]	@ (80057fc <HAL_RCC_OscConfig+0x770>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a8b      	ldr	r2, [pc, #556]	@ (80057fc <HAL_RCC_OscConfig+0x770>)
 80055ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055d4:	f7fe fc28 	bl	8003e28 <HAL_GetTick>
 80055d8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055dc:	f7fe fc24 	bl	8003e28 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b64      	cmp	r3, #100	@ 0x64
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e1a0      	b.n	8005930 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055ee:	4b83      	ldr	r3, [pc, #524]	@ (80057fc <HAL_RCC_OscConfig+0x770>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0f0      	beq.n	80055dc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d106      	bne.n	8005610 <HAL_RCC_OscConfig+0x584>
 8005602:	4b7d      	ldr	r3, [pc, #500]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005606:	4a7c      	ldr	r2, [pc, #496]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 8005608:	f043 0301 	orr.w	r3, r3, #1
 800560c:	6713      	str	r3, [r2, #112]	@ 0x70
 800560e:	e02d      	b.n	800566c <HAL_RCC_OscConfig+0x5e0>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10c      	bne.n	8005632 <HAL_RCC_OscConfig+0x5a6>
 8005618:	4b77      	ldr	r3, [pc, #476]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 800561a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800561c:	4a76      	ldr	r2, [pc, #472]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 800561e:	f023 0301 	bic.w	r3, r3, #1
 8005622:	6713      	str	r3, [r2, #112]	@ 0x70
 8005624:	4b74      	ldr	r3, [pc, #464]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 8005626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005628:	4a73      	ldr	r2, [pc, #460]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 800562a:	f023 0304 	bic.w	r3, r3, #4
 800562e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005630:	e01c      	b.n	800566c <HAL_RCC_OscConfig+0x5e0>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	2b05      	cmp	r3, #5
 8005638:	d10c      	bne.n	8005654 <HAL_RCC_OscConfig+0x5c8>
 800563a:	4b6f      	ldr	r3, [pc, #444]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 800563c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800563e:	4a6e      	ldr	r2, [pc, #440]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 8005640:	f043 0304 	orr.w	r3, r3, #4
 8005644:	6713      	str	r3, [r2, #112]	@ 0x70
 8005646:	4b6c      	ldr	r3, [pc, #432]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 8005648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564a:	4a6b      	ldr	r2, [pc, #428]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 800564c:	f043 0301 	orr.w	r3, r3, #1
 8005650:	6713      	str	r3, [r2, #112]	@ 0x70
 8005652:	e00b      	b.n	800566c <HAL_RCC_OscConfig+0x5e0>
 8005654:	4b68      	ldr	r3, [pc, #416]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 8005656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005658:	4a67      	ldr	r2, [pc, #412]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 800565a:	f023 0301 	bic.w	r3, r3, #1
 800565e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005660:	4b65      	ldr	r3, [pc, #404]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 8005662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005664:	4a64      	ldr	r2, [pc, #400]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 8005666:	f023 0304 	bic.w	r3, r3, #4
 800566a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d015      	beq.n	80056a0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005674:	f7fe fbd8 	bl	8003e28 <HAL_GetTick>
 8005678:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800567a:	e00a      	b.n	8005692 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800567c:	f7fe fbd4 	bl	8003e28 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800568a:	4293      	cmp	r3, r2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e14e      	b.n	8005930 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005692:	4b59      	ldr	r3, [pc, #356]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 8005694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0ee      	beq.n	800567c <HAL_RCC_OscConfig+0x5f0>
 800569e:	e014      	b.n	80056ca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a0:	f7fe fbc2 	bl	8003e28 <HAL_GetTick>
 80056a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056a6:	e00a      	b.n	80056be <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a8:	f7fe fbbe 	bl	8003e28 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e138      	b.n	8005930 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056be:	4b4e      	ldr	r3, [pc, #312]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1ee      	bne.n	80056a8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 812d 	beq.w	800592e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80056d4:	4b48      	ldr	r3, [pc, #288]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056dc:	2b18      	cmp	r3, #24
 80056de:	f000 80bd 	beq.w	800585c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	f040 809e 	bne.w	8005828 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ec:	4b42      	ldr	r3, [pc, #264]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a41      	ldr	r2, [pc, #260]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 80056f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f8:	f7fe fb96 	bl	8003e28 <HAL_GetTick>
 80056fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005700:	f7fe fb92 	bl	8003e28 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e10e      	b.n	8005930 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005712:	4b39      	ldr	r3, [pc, #228]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f0      	bne.n	8005700 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800571e:	4b36      	ldr	r3, [pc, #216]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 8005720:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005722:	4b37      	ldr	r3, [pc, #220]	@ (8005800 <HAL_RCC_OscConfig+0x774>)
 8005724:	4013      	ands	r3, r2
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800572e:	0112      	lsls	r2, r2, #4
 8005730:	430a      	orrs	r2, r1
 8005732:	4931      	ldr	r1, [pc, #196]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 8005734:	4313      	orrs	r3, r2
 8005736:	628b      	str	r3, [r1, #40]	@ 0x28
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573c:	3b01      	subs	r3, #1
 800573e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005746:	3b01      	subs	r3, #1
 8005748:	025b      	lsls	r3, r3, #9
 800574a:	b29b      	uxth	r3, r3
 800574c:	431a      	orrs	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005752:	3b01      	subs	r3, #1
 8005754:	041b      	lsls	r3, r3, #16
 8005756:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800575a:	431a      	orrs	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005760:	3b01      	subs	r3, #1
 8005762:	061b      	lsls	r3, r3, #24
 8005764:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005768:	4923      	ldr	r1, [pc, #140]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 800576a:	4313      	orrs	r3, r2
 800576c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800576e:	4b22      	ldr	r3, [pc, #136]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 8005770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005772:	4a21      	ldr	r2, [pc, #132]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 8005774:	f023 0301 	bic.w	r3, r3, #1
 8005778:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800577a:	4b1f      	ldr	r3, [pc, #124]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 800577c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800577e:	4b21      	ldr	r3, [pc, #132]	@ (8005804 <HAL_RCC_OscConfig+0x778>)
 8005780:	4013      	ands	r3, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005786:	00d2      	lsls	r2, r2, #3
 8005788:	491b      	ldr	r1, [pc, #108]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 800578a:	4313      	orrs	r3, r2
 800578c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800578e:	4b1a      	ldr	r3, [pc, #104]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 8005790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005792:	f023 020c 	bic.w	r2, r3, #12
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579a:	4917      	ldr	r1, [pc, #92]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 800579c:	4313      	orrs	r3, r2
 800579e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80057a0:	4b15      	ldr	r3, [pc, #84]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 80057a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a4:	f023 0202 	bic.w	r2, r3, #2
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ac:	4912      	ldr	r1, [pc, #72]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057b2:	4b11      	ldr	r3, [pc, #68]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 80057b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b6:	4a10      	ldr	r2, [pc, #64]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 80057b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057be:	4b0e      	ldr	r3, [pc, #56]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 80057c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c2:	4a0d      	ldr	r2, [pc, #52]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 80057c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80057ca:	4b0b      	ldr	r3, [pc, #44]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 80057cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ce:	4a0a      	ldr	r2, [pc, #40]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 80057d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80057d6:	4b08      	ldr	r3, [pc, #32]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 80057d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057da:	4a07      	ldr	r2, [pc, #28]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 80057dc:	f043 0301 	orr.w	r3, r3, #1
 80057e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057e2:	4b05      	ldr	r3, [pc, #20]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a04      	ldr	r2, [pc, #16]	@ (80057f8 <HAL_RCC_OscConfig+0x76c>)
 80057e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ee:	f7fe fb1b 	bl	8003e28 <HAL_GetTick>
 80057f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057f4:	e011      	b.n	800581a <HAL_RCC_OscConfig+0x78e>
 80057f6:	bf00      	nop
 80057f8:	58024400 	.word	0x58024400
 80057fc:	58024800 	.word	0x58024800
 8005800:	fffffc0c 	.word	0xfffffc0c
 8005804:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005808:	f7fe fb0e 	bl	8003e28 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e08a      	b.n	8005930 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800581a:	4b47      	ldr	r3, [pc, #284]	@ (8005938 <HAL_RCC_OscConfig+0x8ac>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0f0      	beq.n	8005808 <HAL_RCC_OscConfig+0x77c>
 8005826:	e082      	b.n	800592e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005828:	4b43      	ldr	r3, [pc, #268]	@ (8005938 <HAL_RCC_OscConfig+0x8ac>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a42      	ldr	r2, [pc, #264]	@ (8005938 <HAL_RCC_OscConfig+0x8ac>)
 800582e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005834:	f7fe faf8 	bl	8003e28 <HAL_GetTick>
 8005838:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800583c:	f7fe faf4 	bl	8003e28 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e070      	b.n	8005930 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800584e:	4b3a      	ldr	r3, [pc, #232]	@ (8005938 <HAL_RCC_OscConfig+0x8ac>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f0      	bne.n	800583c <HAL_RCC_OscConfig+0x7b0>
 800585a:	e068      	b.n	800592e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800585c:	4b36      	ldr	r3, [pc, #216]	@ (8005938 <HAL_RCC_OscConfig+0x8ac>)
 800585e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005860:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005862:	4b35      	ldr	r3, [pc, #212]	@ (8005938 <HAL_RCC_OscConfig+0x8ac>)
 8005864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005866:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586c:	2b01      	cmp	r3, #1
 800586e:	d031      	beq.n	80058d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f003 0203 	and.w	r2, r3, #3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800587a:	429a      	cmp	r2, r3
 800587c:	d12a      	bne.n	80058d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	091b      	lsrs	r3, r3, #4
 8005882:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800588a:	429a      	cmp	r2, r3
 800588c:	d122      	bne.n	80058d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005898:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800589a:	429a      	cmp	r2, r3
 800589c:	d11a      	bne.n	80058d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	0a5b      	lsrs	r3, r3, #9
 80058a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058aa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d111      	bne.n	80058d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	0c1b      	lsrs	r3, r3, #16
 80058b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058be:	429a      	cmp	r2, r3
 80058c0:	d108      	bne.n	80058d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	0e1b      	lsrs	r3, r3, #24
 80058c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d001      	beq.n	80058d8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e02b      	b.n	8005930 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80058d8:	4b17      	ldr	r3, [pc, #92]	@ (8005938 <HAL_RCC_OscConfig+0x8ac>)
 80058da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058dc:	08db      	lsrs	r3, r3, #3
 80058de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058e2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d01f      	beq.n	800592e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80058ee:	4b12      	ldr	r3, [pc, #72]	@ (8005938 <HAL_RCC_OscConfig+0x8ac>)
 80058f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f2:	4a11      	ldr	r2, [pc, #68]	@ (8005938 <HAL_RCC_OscConfig+0x8ac>)
 80058f4:	f023 0301 	bic.w	r3, r3, #1
 80058f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058fa:	f7fe fa95 	bl	8003e28 <HAL_GetTick>
 80058fe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005900:	bf00      	nop
 8005902:	f7fe fa91 	bl	8003e28 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590a:	4293      	cmp	r3, r2
 800590c:	d0f9      	beq.n	8005902 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800590e:	4b0a      	ldr	r3, [pc, #40]	@ (8005938 <HAL_RCC_OscConfig+0x8ac>)
 8005910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005912:	4b0a      	ldr	r3, [pc, #40]	@ (800593c <HAL_RCC_OscConfig+0x8b0>)
 8005914:	4013      	ands	r3, r2
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800591a:	00d2      	lsls	r2, r2, #3
 800591c:	4906      	ldr	r1, [pc, #24]	@ (8005938 <HAL_RCC_OscConfig+0x8ac>)
 800591e:	4313      	orrs	r3, r2
 8005920:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005922:	4b05      	ldr	r3, [pc, #20]	@ (8005938 <HAL_RCC_OscConfig+0x8ac>)
 8005924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005926:	4a04      	ldr	r2, [pc, #16]	@ (8005938 <HAL_RCC_OscConfig+0x8ac>)
 8005928:	f043 0301 	orr.w	r3, r3, #1
 800592c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3730      	adds	r7, #48	@ 0x30
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	58024400 	.word	0x58024400
 800593c:	ffff0007 	.word	0xffff0007

08005940 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e19c      	b.n	8005c8e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005954:	4b8a      	ldr	r3, [pc, #552]	@ (8005b80 <HAL_RCC_ClockConfig+0x240>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 030f 	and.w	r3, r3, #15
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d910      	bls.n	8005984 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005962:	4b87      	ldr	r3, [pc, #540]	@ (8005b80 <HAL_RCC_ClockConfig+0x240>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f023 020f 	bic.w	r2, r3, #15
 800596a:	4985      	ldr	r1, [pc, #532]	@ (8005b80 <HAL_RCC_ClockConfig+0x240>)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	4313      	orrs	r3, r2
 8005970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005972:	4b83      	ldr	r3, [pc, #524]	@ (8005b80 <HAL_RCC_ClockConfig+0x240>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d001      	beq.n	8005984 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e184      	b.n	8005c8e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d010      	beq.n	80059b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691a      	ldr	r2, [r3, #16]
 8005994:	4b7b      	ldr	r3, [pc, #492]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800599c:	429a      	cmp	r2, r3
 800599e:	d908      	bls.n	80059b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059a0:	4b78      	ldr	r3, [pc, #480]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	4975      	ldr	r1, [pc, #468]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d010      	beq.n	80059e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695a      	ldr	r2, [r3, #20]
 80059c2:	4b70      	ldr	r3, [pc, #448]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d908      	bls.n	80059e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059ce:	4b6d      	ldr	r3, [pc, #436]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	496a      	ldr	r1, [pc, #424]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0310 	and.w	r3, r3, #16
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d010      	beq.n	8005a0e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699a      	ldr	r2, [r3, #24]
 80059f0:	4b64      	ldr	r3, [pc, #400]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d908      	bls.n	8005a0e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059fc:	4b61      	ldr	r3, [pc, #388]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	495e      	ldr	r1, [pc, #376]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0320 	and.w	r3, r3, #32
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d010      	beq.n	8005a3c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69da      	ldr	r2, [r3, #28]
 8005a1e:	4b59      	ldr	r3, [pc, #356]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d908      	bls.n	8005a3c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a2a:	4b56      	ldr	r3, [pc, #344]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	4953      	ldr	r1, [pc, #332]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d010      	beq.n	8005a6a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68da      	ldr	r2, [r3, #12]
 8005a4c:	4b4d      	ldr	r3, [pc, #308]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d908      	bls.n	8005a6a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a58:	4b4a      	ldr	r3, [pc, #296]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	f023 020f 	bic.w	r2, r3, #15
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	4947      	ldr	r1, [pc, #284]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d055      	beq.n	8005b22 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a76:	4b43      	ldr	r3, [pc, #268]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	4940      	ldr	r1, [pc, #256]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d107      	bne.n	8005aa0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a90:	4b3c      	ldr	r3, [pc, #240]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d121      	bne.n	8005ae0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e0f6      	b.n	8005c8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	2b03      	cmp	r3, #3
 8005aa6:	d107      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005aa8:	4b36      	ldr	r3, [pc, #216]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d115      	bne.n	8005ae0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e0ea      	b.n	8005c8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d107      	bne.n	8005ad0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ac0:	4b30      	ldr	r3, [pc, #192]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d109      	bne.n	8005ae0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e0de      	b.n	8005c8e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e0d6      	b.n	8005c8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ae0:	4b28      	ldr	r3, [pc, #160]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	f023 0207 	bic.w	r2, r3, #7
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	4925      	ldr	r1, [pc, #148]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005af2:	f7fe f999 	bl	8003e28 <HAL_GetTick>
 8005af6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005af8:	e00a      	b.n	8005b10 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005afa:	f7fe f995 	bl	8003e28 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e0be      	b.n	8005c8e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b10:	4b1c      	ldr	r3, [pc, #112]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d1eb      	bne.n	8005afa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d010      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	4b14      	ldr	r3, [pc, #80]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d208      	bcs.n	8005b50 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b3e:	4b11      	ldr	r3, [pc, #68]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	f023 020f 	bic.w	r2, r3, #15
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	490e      	ldr	r1, [pc, #56]	@ (8005b84 <HAL_RCC_ClockConfig+0x244>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b50:	4b0b      	ldr	r3, [pc, #44]	@ (8005b80 <HAL_RCC_ClockConfig+0x240>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 030f 	and.w	r3, r3, #15
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d214      	bcs.n	8005b88 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b5e:	4b08      	ldr	r3, [pc, #32]	@ (8005b80 <HAL_RCC_ClockConfig+0x240>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f023 020f 	bic.w	r2, r3, #15
 8005b66:	4906      	ldr	r1, [pc, #24]	@ (8005b80 <HAL_RCC_ClockConfig+0x240>)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b6e:	4b04      	ldr	r3, [pc, #16]	@ (8005b80 <HAL_RCC_ClockConfig+0x240>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d005      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e086      	b.n	8005c8e <HAL_RCC_ClockConfig+0x34e>
 8005b80:	52002000 	.word	0x52002000
 8005b84:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d010      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	4b3f      	ldr	r3, [pc, #252]	@ (8005c98 <HAL_RCC_ClockConfig+0x358>)
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d208      	bcs.n	8005bb6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ba4:	4b3c      	ldr	r3, [pc, #240]	@ (8005c98 <HAL_RCC_ClockConfig+0x358>)
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	4939      	ldr	r1, [pc, #228]	@ (8005c98 <HAL_RCC_ClockConfig+0x358>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d010      	beq.n	8005be4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695a      	ldr	r2, [r3, #20]
 8005bc6:	4b34      	ldr	r3, [pc, #208]	@ (8005c98 <HAL_RCC_ClockConfig+0x358>)
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d208      	bcs.n	8005be4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005bd2:	4b31      	ldr	r3, [pc, #196]	@ (8005c98 <HAL_RCC_ClockConfig+0x358>)
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	492e      	ldr	r1, [pc, #184]	@ (8005c98 <HAL_RCC_ClockConfig+0x358>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0310 	and.w	r3, r3, #16
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d010      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699a      	ldr	r2, [r3, #24]
 8005bf4:	4b28      	ldr	r3, [pc, #160]	@ (8005c98 <HAL_RCC_ClockConfig+0x358>)
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d208      	bcs.n	8005c12 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c00:	4b25      	ldr	r3, [pc, #148]	@ (8005c98 <HAL_RCC_ClockConfig+0x358>)
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	4922      	ldr	r1, [pc, #136]	@ (8005c98 <HAL_RCC_ClockConfig+0x358>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d010      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69da      	ldr	r2, [r3, #28]
 8005c22:	4b1d      	ldr	r3, [pc, #116]	@ (8005c98 <HAL_RCC_ClockConfig+0x358>)
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d208      	bcs.n	8005c40 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8005c98 <HAL_RCC_ClockConfig+0x358>)
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	4917      	ldr	r1, [pc, #92]	@ (8005c98 <HAL_RCC_ClockConfig+0x358>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c40:	f000 f834 	bl	8005cac <HAL_RCC_GetSysClockFreq>
 8005c44:	4602      	mov	r2, r0
 8005c46:	4b14      	ldr	r3, [pc, #80]	@ (8005c98 <HAL_RCC_ClockConfig+0x358>)
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	0a1b      	lsrs	r3, r3, #8
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	4912      	ldr	r1, [pc, #72]	@ (8005c9c <HAL_RCC_ClockConfig+0x35c>)
 8005c52:	5ccb      	ldrb	r3, [r1, r3]
 8005c54:	f003 031f 	and.w	r3, r3, #31
 8005c58:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c98 <HAL_RCC_ClockConfig+0x358>)
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	f003 030f 	and.w	r3, r3, #15
 8005c66:	4a0d      	ldr	r2, [pc, #52]	@ (8005c9c <HAL_RCC_ClockConfig+0x35c>)
 8005c68:	5cd3      	ldrb	r3, [r2, r3]
 8005c6a:	f003 031f 	and.w	r3, r3, #31
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	fa22 f303 	lsr.w	r3, r2, r3
 8005c74:	4a0a      	ldr	r2, [pc, #40]	@ (8005ca0 <HAL_RCC_ClockConfig+0x360>)
 8005c76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c78:	4a0a      	ldr	r2, [pc, #40]	@ (8005ca4 <HAL_RCC_ClockConfig+0x364>)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca8 <HAL_RCC_ClockConfig+0x368>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fb fd46 	bl	8001714 <HAL_InitTick>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	58024400 	.word	0x58024400
 8005c9c:	08017d68 	.word	0x08017d68
 8005ca0:	24000004 	.word	0x24000004
 8005ca4:	24000000 	.word	0x24000000
 8005ca8:	24000008 	.word	0x24000008

08005cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b089      	sub	sp, #36	@ 0x24
 8005cb0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cb2:	4bb3      	ldr	r3, [pc, #716]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cba:	2b18      	cmp	r3, #24
 8005cbc:	f200 8155 	bhi.w	8005f6a <HAL_RCC_GetSysClockFreq+0x2be>
 8005cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc6:	bf00      	nop
 8005cc8:	08005d2d 	.word	0x08005d2d
 8005ccc:	08005f6b 	.word	0x08005f6b
 8005cd0:	08005f6b 	.word	0x08005f6b
 8005cd4:	08005f6b 	.word	0x08005f6b
 8005cd8:	08005f6b 	.word	0x08005f6b
 8005cdc:	08005f6b 	.word	0x08005f6b
 8005ce0:	08005f6b 	.word	0x08005f6b
 8005ce4:	08005f6b 	.word	0x08005f6b
 8005ce8:	08005d53 	.word	0x08005d53
 8005cec:	08005f6b 	.word	0x08005f6b
 8005cf0:	08005f6b 	.word	0x08005f6b
 8005cf4:	08005f6b 	.word	0x08005f6b
 8005cf8:	08005f6b 	.word	0x08005f6b
 8005cfc:	08005f6b 	.word	0x08005f6b
 8005d00:	08005f6b 	.word	0x08005f6b
 8005d04:	08005f6b 	.word	0x08005f6b
 8005d08:	08005d59 	.word	0x08005d59
 8005d0c:	08005f6b 	.word	0x08005f6b
 8005d10:	08005f6b 	.word	0x08005f6b
 8005d14:	08005f6b 	.word	0x08005f6b
 8005d18:	08005f6b 	.word	0x08005f6b
 8005d1c:	08005f6b 	.word	0x08005f6b
 8005d20:	08005f6b 	.word	0x08005f6b
 8005d24:	08005f6b 	.word	0x08005f6b
 8005d28:	08005d5f 	.word	0x08005d5f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d2c:	4b94      	ldr	r3, [pc, #592]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0320 	and.w	r3, r3, #32
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d009      	beq.n	8005d4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d38:	4b91      	ldr	r3, [pc, #580]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	08db      	lsrs	r3, r3, #3
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	4a90      	ldr	r2, [pc, #576]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d44:	fa22 f303 	lsr.w	r3, r2, r3
 8005d48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005d4a:	e111      	b.n	8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d4c:	4b8d      	ldr	r3, [pc, #564]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d4e:	61bb      	str	r3, [r7, #24]
      break;
 8005d50:	e10e      	b.n	8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005d52:	4b8d      	ldr	r3, [pc, #564]	@ (8005f88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d54:	61bb      	str	r3, [r7, #24]
      break;
 8005d56:	e10b      	b.n	8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005d58:	4b8c      	ldr	r3, [pc, #560]	@ (8005f8c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d5a:	61bb      	str	r3, [r7, #24]
      break;
 8005d5c:	e108      	b.n	8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d5e:	4b88      	ldr	r3, [pc, #544]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005d68:	4b85      	ldr	r3, [pc, #532]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6c:	091b      	lsrs	r3, r3, #4
 8005d6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d72:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d74:	4b82      	ldr	r3, [pc, #520]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d7e:	4b80      	ldr	r3, [pc, #512]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d82:	08db      	lsrs	r3, r3, #3
 8005d84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	fb02 f303 	mul.w	r3, r2, r3
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d96:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 80e1 	beq.w	8005f64 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	f000 8083 	beq.w	8005eb0 <HAL_RCC_GetSysClockFreq+0x204>
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	f200 80a1 	bhi.w	8005ef4 <HAL_RCC_GetSysClockFreq+0x248>
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <HAL_RCC_GetSysClockFreq+0x114>
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d056      	beq.n	8005e6c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005dbe:	e099      	b.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dc0:	4b6f      	ldr	r3, [pc, #444]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0320 	and.w	r3, r3, #32
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d02d      	beq.n	8005e28 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dcc:	4b6c      	ldr	r3, [pc, #432]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	08db      	lsrs	r3, r3, #3
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	4a6b      	ldr	r2, [pc, #428]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ddc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	ee07 3a90 	vmov	s15, r3
 8005de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	ee07 3a90 	vmov	s15, r3
 8005dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005df6:	4b62      	ldr	r3, [pc, #392]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e06:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e0a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005f90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e22:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005e26:	e087      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e32:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005f94 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e3a:	4b51      	ldr	r3, [pc, #324]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e4e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005f90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e6a:	e065      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e76:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005f98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e7e:	4b40      	ldr	r3, [pc, #256]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e86:	ee07 3a90 	vmov	s15, r3
 8005e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e92:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005f90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005eae:	e043      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	ee07 3a90 	vmov	s15, r3
 8005eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005f9c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ed6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005f90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ee2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ef2:	e021      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005f98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f06:	4b1e      	ldr	r3, [pc, #120]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f16:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f1a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005f90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f36:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005f38:	4b11      	ldr	r3, [pc, #68]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f3c:	0a5b      	lsrs	r3, r3, #9
 8005f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f42:	3301      	adds	r3, #1
 8005f44:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	ee07 3a90 	vmov	s15, r3
 8005f4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f50:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f5c:	ee17 3a90 	vmov	r3, s15
 8005f60:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005f62:	e005      	b.n	8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	61bb      	str	r3, [r7, #24]
      break;
 8005f68:	e002      	b.n	8005f70 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005f6a:	4b07      	ldr	r3, [pc, #28]	@ (8005f88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f6c:	61bb      	str	r3, [r7, #24]
      break;
 8005f6e:	bf00      	nop
  }

  return sysclockfreq;
 8005f70:	69bb      	ldr	r3, [r7, #24]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3724      	adds	r7, #36	@ 0x24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	58024400 	.word	0x58024400
 8005f84:	03d09000 	.word	0x03d09000
 8005f88:	003d0900 	.word	0x003d0900
 8005f8c:	017d7840 	.word	0x017d7840
 8005f90:	46000000 	.word	0x46000000
 8005f94:	4c742400 	.word	0x4c742400
 8005f98:	4a742400 	.word	0x4a742400
 8005f9c:	4bbebc20 	.word	0x4bbebc20

08005fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005fa6:	f7ff fe81 	bl	8005cac <HAL_RCC_GetSysClockFreq>
 8005faa:	4602      	mov	r2, r0
 8005fac:	4b10      	ldr	r3, [pc, #64]	@ (8005ff0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	0a1b      	lsrs	r3, r3, #8
 8005fb2:	f003 030f 	and.w	r3, r3, #15
 8005fb6:	490f      	ldr	r1, [pc, #60]	@ (8005ff4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005fb8:	5ccb      	ldrb	r3, [r1, r3]
 8005fba:	f003 031f 	and.w	r3, r3, #31
 8005fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	f003 030f 	and.w	r3, r3, #15
 8005fcc:	4a09      	ldr	r2, [pc, #36]	@ (8005ff4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005fce:	5cd3      	ldrb	r3, [r2, r3]
 8005fd0:	f003 031f 	and.w	r3, r3, #31
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005fda:	4a07      	ldr	r2, [pc, #28]	@ (8005ff8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005fdc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005fde:	4a07      	ldr	r2, [pc, #28]	@ (8005ffc <HAL_RCC_GetHCLKFreq+0x5c>)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005fe4:	4b04      	ldr	r3, [pc, #16]	@ (8005ff8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	58024400 	.word	0x58024400
 8005ff4:	08017d68 	.word	0x08017d68
 8005ff8:	24000004 	.word	0x24000004
 8005ffc:	24000000 	.word	0x24000000

08006000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006004:	f7ff ffcc 	bl	8005fa0 <HAL_RCC_GetHCLKFreq>
 8006008:	4602      	mov	r2, r0
 800600a:	4b06      	ldr	r3, [pc, #24]	@ (8006024 <HAL_RCC_GetPCLK1Freq+0x24>)
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	091b      	lsrs	r3, r3, #4
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	4904      	ldr	r1, [pc, #16]	@ (8006028 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006016:	5ccb      	ldrb	r3, [r1, r3]
 8006018:	f003 031f 	and.w	r3, r3, #31
 800601c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006020:	4618      	mov	r0, r3
 8006022:	bd80      	pop	{r7, pc}
 8006024:	58024400 	.word	0x58024400
 8006028:	08017d68 	.word	0x08017d68

0800602c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006030:	f7ff ffb6 	bl	8005fa0 <HAL_RCC_GetHCLKFreq>
 8006034:	4602      	mov	r2, r0
 8006036:	4b06      	ldr	r3, [pc, #24]	@ (8006050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	0a1b      	lsrs	r3, r3, #8
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	4904      	ldr	r1, [pc, #16]	@ (8006054 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006042:	5ccb      	ldrb	r3, [r1, r3]
 8006044:	f003 031f 	and.w	r3, r3, #31
 8006048:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800604c:	4618      	mov	r0, r3
 800604e:	bd80      	pop	{r7, pc}
 8006050:	58024400 	.word	0x58024400
 8006054:	08017d68 	.word	0x08017d68

08006058 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	223f      	movs	r2, #63	@ 0x3f
 8006066:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006068:	4b1a      	ldr	r3, [pc, #104]	@ (80060d4 <HAL_RCC_GetClockConfig+0x7c>)
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	f003 0207 	and.w	r2, r3, #7
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006074:	4b17      	ldr	r3, [pc, #92]	@ (80060d4 <HAL_RCC_GetClockConfig+0x7c>)
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006080:	4b14      	ldr	r3, [pc, #80]	@ (80060d4 <HAL_RCC_GetClockConfig+0x7c>)
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	f003 020f 	and.w	r2, r3, #15
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800608c:	4b11      	ldr	r3, [pc, #68]	@ (80060d4 <HAL_RCC_GetClockConfig+0x7c>)
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006098:	4b0e      	ldr	r3, [pc, #56]	@ (80060d4 <HAL_RCC_GetClockConfig+0x7c>)
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80060a4:	4b0b      	ldr	r3, [pc, #44]	@ (80060d4 <HAL_RCC_GetClockConfig+0x7c>)
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80060b0:	4b08      	ldr	r3, [pc, #32]	@ (80060d4 <HAL_RCC_GetClockConfig+0x7c>)
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060bc:	4b06      	ldr	r3, [pc, #24]	@ (80060d8 <HAL_RCC_GetClockConfig+0x80>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 020f 	and.w	r2, r3, #15
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	601a      	str	r2, [r3, #0]
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	58024400 	.word	0x58024400
 80060d8:	52002000 	.word	0x52002000

080060dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060e0:	b0ca      	sub	sp, #296	@ 0x128
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060e8:	2300      	movs	r3, #0
 80060ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060ee:	2300      	movs	r3, #0
 80060f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006100:	2500      	movs	r5, #0
 8006102:	ea54 0305 	orrs.w	r3, r4, r5
 8006106:	d049      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800610e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006112:	d02f      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006114:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006118:	d828      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800611a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800611e:	d01a      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006120:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006124:	d822      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800612a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800612e:	d007      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006130:	e01c      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006132:	4bb8      	ldr	r3, [pc, #736]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006136:	4ab7      	ldr	r2, [pc, #732]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800613c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800613e:	e01a      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006144:	3308      	adds	r3, #8
 8006146:	2102      	movs	r1, #2
 8006148:	4618      	mov	r0, r3
 800614a:	f002 fb61 	bl	8008810 <RCCEx_PLL2_Config>
 800614e:	4603      	mov	r3, r0
 8006150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006154:	e00f      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615a:	3328      	adds	r3, #40	@ 0x28
 800615c:	2102      	movs	r1, #2
 800615e:	4618      	mov	r0, r3
 8006160:	f002 fc08 	bl	8008974 <RCCEx_PLL3_Config>
 8006164:	4603      	mov	r3, r0
 8006166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800616a:	e004      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006172:	e000      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800617e:	4ba5      	ldr	r3, [pc, #660]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006182:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800618c:	4aa1      	ldr	r2, [pc, #644]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800618e:	430b      	orrs	r3, r1
 8006190:	6513      	str	r3, [r2, #80]	@ 0x50
 8006192:	e003      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006198:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800619c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80061a8:	f04f 0900 	mov.w	r9, #0
 80061ac:	ea58 0309 	orrs.w	r3, r8, r9
 80061b0:	d047      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80061b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b8:	2b04      	cmp	r3, #4
 80061ba:	d82a      	bhi.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80061bc:	a201      	add	r2, pc, #4	@ (adr r2, 80061c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80061be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c2:	bf00      	nop
 80061c4:	080061d9 	.word	0x080061d9
 80061c8:	080061e7 	.word	0x080061e7
 80061cc:	080061fd 	.word	0x080061fd
 80061d0:	0800621b 	.word	0x0800621b
 80061d4:	0800621b 	.word	0x0800621b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d8:	4b8e      	ldr	r3, [pc, #568]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061dc:	4a8d      	ldr	r2, [pc, #564]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061e4:	e01a      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ea:	3308      	adds	r3, #8
 80061ec:	2100      	movs	r1, #0
 80061ee:	4618      	mov	r0, r3
 80061f0:	f002 fb0e 	bl	8008810 <RCCEx_PLL2_Config>
 80061f4:	4603      	mov	r3, r0
 80061f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061fa:	e00f      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006200:	3328      	adds	r3, #40	@ 0x28
 8006202:	2100      	movs	r1, #0
 8006204:	4618      	mov	r0, r3
 8006206:	f002 fbb5 	bl	8008974 <RCCEx_PLL3_Config>
 800620a:	4603      	mov	r3, r0
 800620c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006210:	e004      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006218:	e000      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800621a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800621c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10a      	bne.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006224:	4b7b      	ldr	r3, [pc, #492]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006228:	f023 0107 	bic.w	r1, r3, #7
 800622c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006232:	4a78      	ldr	r2, [pc, #480]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006234:	430b      	orrs	r3, r1
 8006236:	6513      	str	r3, [r2, #80]	@ 0x50
 8006238:	e003      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800623a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800623e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800624e:	f04f 0b00 	mov.w	fp, #0
 8006252:	ea5a 030b 	orrs.w	r3, sl, fp
 8006256:	d04c      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800625c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800625e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006262:	d030      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006264:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006268:	d829      	bhi.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800626a:	2bc0      	cmp	r3, #192	@ 0xc0
 800626c:	d02d      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800626e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006270:	d825      	bhi.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006272:	2b80      	cmp	r3, #128	@ 0x80
 8006274:	d018      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006276:	2b80      	cmp	r3, #128	@ 0x80
 8006278:	d821      	bhi.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800627a:	2b00      	cmp	r3, #0
 800627c:	d002      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800627e:	2b40      	cmp	r3, #64	@ 0x40
 8006280:	d007      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006282:	e01c      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006284:	4b63      	ldr	r3, [pc, #396]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006288:	4a62      	ldr	r2, [pc, #392]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800628a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800628e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006290:	e01c      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006296:	3308      	adds	r3, #8
 8006298:	2100      	movs	r1, #0
 800629a:	4618      	mov	r0, r3
 800629c:	f002 fab8 	bl	8008810 <RCCEx_PLL2_Config>
 80062a0:	4603      	mov	r3, r0
 80062a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80062a6:	e011      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ac:	3328      	adds	r3, #40	@ 0x28
 80062ae:	2100      	movs	r1, #0
 80062b0:	4618      	mov	r0, r3
 80062b2:	f002 fb5f 	bl	8008974 <RCCEx_PLL3_Config>
 80062b6:	4603      	mov	r3, r0
 80062b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80062bc:	e006      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062c4:	e002      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80062c6:	bf00      	nop
 80062c8:	e000      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80062ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10a      	bne.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80062d4:	4b4f      	ldr	r3, [pc, #316]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062d8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80062dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062e2:	4a4c      	ldr	r2, [pc, #304]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062e4:	430b      	orrs	r3, r1
 80062e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80062e8:	e003      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80062f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80062fe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006302:	2300      	movs	r3, #0
 8006304:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006308:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800630c:	460b      	mov	r3, r1
 800630e:	4313      	orrs	r3, r2
 8006310:	d053      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006316:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800631a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800631e:	d035      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006320:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006324:	d82e      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006326:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800632a:	d031      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800632c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006330:	d828      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006332:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006336:	d01a      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006338:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800633c:	d822      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006342:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006346:	d007      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006348:	e01c      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800634a:	4b32      	ldr	r3, [pc, #200]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800634c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634e:	4a31      	ldr	r2, [pc, #196]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006354:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006356:	e01c      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800635c:	3308      	adds	r3, #8
 800635e:	2100      	movs	r1, #0
 8006360:	4618      	mov	r0, r3
 8006362:	f002 fa55 	bl	8008810 <RCCEx_PLL2_Config>
 8006366:	4603      	mov	r3, r0
 8006368:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800636c:	e011      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800636e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006372:	3328      	adds	r3, #40	@ 0x28
 8006374:	2100      	movs	r1, #0
 8006376:	4618      	mov	r0, r3
 8006378:	f002 fafc 	bl	8008974 <RCCEx_PLL3_Config>
 800637c:	4603      	mov	r3, r0
 800637e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006382:	e006      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800638a:	e002      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800638c:	bf00      	nop
 800638e:	e000      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10b      	bne.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800639a:	4b1e      	ldr	r3, [pc, #120]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800639c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800639e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80063a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80063aa:	4a1a      	ldr	r2, [pc, #104]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063ac:	430b      	orrs	r3, r1
 80063ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80063b0:	e003      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80063ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80063c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80063ca:	2300      	movs	r3, #0
 80063cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80063d0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80063d4:	460b      	mov	r3, r1
 80063d6:	4313      	orrs	r3, r2
 80063d8:	d056      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80063da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063e6:	d038      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80063e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063ec:	d831      	bhi.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80063f2:	d034      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80063f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80063f8:	d82b      	bhi.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063fe:	d01d      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006400:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006404:	d825      	bhi.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d006      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800640a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800640e:	d00a      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006410:	e01f      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006412:	bf00      	nop
 8006414:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006418:	4ba2      	ldr	r3, [pc, #648]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800641a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641c:	4aa1      	ldr	r2, [pc, #644]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800641e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006424:	e01c      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642a:	3308      	adds	r3, #8
 800642c:	2100      	movs	r1, #0
 800642e:	4618      	mov	r0, r3
 8006430:	f002 f9ee 	bl	8008810 <RCCEx_PLL2_Config>
 8006434:	4603      	mov	r3, r0
 8006436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800643a:	e011      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800643c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006440:	3328      	adds	r3, #40	@ 0x28
 8006442:	2100      	movs	r1, #0
 8006444:	4618      	mov	r0, r3
 8006446:	f002 fa95 	bl	8008974 <RCCEx_PLL3_Config>
 800644a:	4603      	mov	r3, r0
 800644c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006450:	e006      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006458:	e002      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800645a:	bf00      	nop
 800645c:	e000      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800645e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006460:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10b      	bne.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006468:	4b8e      	ldr	r3, [pc, #568]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800646a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800646c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006474:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006478:	4a8a      	ldr	r2, [pc, #552]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800647a:	430b      	orrs	r3, r1
 800647c:	6593      	str	r3, [r2, #88]	@ 0x58
 800647e:	e003      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006484:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006490:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006494:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006498:	2300      	movs	r3, #0
 800649a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800649e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80064a2:	460b      	mov	r3, r1
 80064a4:	4313      	orrs	r3, r2
 80064a6:	d03a      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80064a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064ae:	2b30      	cmp	r3, #48	@ 0x30
 80064b0:	d01f      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80064b2:	2b30      	cmp	r3, #48	@ 0x30
 80064b4:	d819      	bhi.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d00c      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80064ba:	2b20      	cmp	r3, #32
 80064bc:	d815      	bhi.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d019      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80064c2:	2b10      	cmp	r3, #16
 80064c4:	d111      	bne.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064c6:	4b77      	ldr	r3, [pc, #476]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ca:	4a76      	ldr	r2, [pc, #472]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80064d2:	e011      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d8:	3308      	adds	r3, #8
 80064da:	2102      	movs	r1, #2
 80064dc:	4618      	mov	r0, r3
 80064de:	f002 f997 	bl	8008810 <RCCEx_PLL2_Config>
 80064e2:	4603      	mov	r3, r0
 80064e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80064e8:	e006      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064f0:	e002      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80064f2:	bf00      	nop
 80064f4:	e000      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80064f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10a      	bne.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006500:	4b68      	ldr	r3, [pc, #416]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006504:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800650c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800650e:	4a65      	ldr	r2, [pc, #404]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006510:	430b      	orrs	r3, r1
 8006512:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006514:	e003      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800651a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800651e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006526:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800652a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800652e:	2300      	movs	r3, #0
 8006530:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006534:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006538:	460b      	mov	r3, r1
 800653a:	4313      	orrs	r3, r2
 800653c:	d051      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800653e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006544:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006548:	d035      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800654a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800654e:	d82e      	bhi.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006550:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006554:	d031      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006556:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800655a:	d828      	bhi.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800655c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006560:	d01a      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006566:	d822      	bhi.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800656c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006570:	d007      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006572:	e01c      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006574:	4b4b      	ldr	r3, [pc, #300]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006578:	4a4a      	ldr	r2, [pc, #296]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800657a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800657e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006580:	e01c      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006586:	3308      	adds	r3, #8
 8006588:	2100      	movs	r1, #0
 800658a:	4618      	mov	r0, r3
 800658c:	f002 f940 	bl	8008810 <RCCEx_PLL2_Config>
 8006590:	4603      	mov	r3, r0
 8006592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006596:	e011      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800659c:	3328      	adds	r3, #40	@ 0x28
 800659e:	2100      	movs	r1, #0
 80065a0:	4618      	mov	r0, r3
 80065a2:	f002 f9e7 	bl	8008974 <RCCEx_PLL3_Config>
 80065a6:	4603      	mov	r3, r0
 80065a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065ac:	e006      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065b4:	e002      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80065b6:	bf00      	nop
 80065b8:	e000      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80065ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10a      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80065c4:	4b37      	ldr	r3, [pc, #220]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80065cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065d2:	4a34      	ldr	r2, [pc, #208]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065d4:	430b      	orrs	r3, r1
 80065d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80065d8:	e003      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80065e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80065ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065f2:	2300      	movs	r3, #0
 80065f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80065f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80065fc:	460b      	mov	r3, r1
 80065fe:	4313      	orrs	r3, r2
 8006600:	d056      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006606:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006608:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800660c:	d033      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800660e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006612:	d82c      	bhi.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006614:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006618:	d02f      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800661a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800661e:	d826      	bhi.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006620:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006624:	d02b      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006626:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800662a:	d820      	bhi.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800662c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006630:	d012      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006632:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006636:	d81a      	bhi.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006638:	2b00      	cmp	r3, #0
 800663a:	d022      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800663c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006640:	d115      	bne.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006646:	3308      	adds	r3, #8
 8006648:	2101      	movs	r1, #1
 800664a:	4618      	mov	r0, r3
 800664c:	f002 f8e0 	bl	8008810 <RCCEx_PLL2_Config>
 8006650:	4603      	mov	r3, r0
 8006652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006656:	e015      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800665c:	3328      	adds	r3, #40	@ 0x28
 800665e:	2101      	movs	r1, #1
 8006660:	4618      	mov	r0, r3
 8006662:	f002 f987 	bl	8008974 <RCCEx_PLL3_Config>
 8006666:	4603      	mov	r3, r0
 8006668:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800666c:	e00a      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006674:	e006      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006676:	bf00      	nop
 8006678:	e004      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800667a:	bf00      	nop
 800667c:	e002      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800667e:	bf00      	nop
 8006680:	e000      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006682:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10d      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800668c:	4b05      	ldr	r3, [pc, #20]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800668e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006690:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006698:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800669a:	4a02      	ldr	r2, [pc, #8]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800669c:	430b      	orrs	r3, r1
 800669e:	6513      	str	r3, [r2, #80]	@ 0x50
 80066a0:	e006      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80066a2:	bf00      	nop
 80066a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80066b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80066bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80066c0:	2300      	movs	r3, #0
 80066c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80066c6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80066ca:	460b      	mov	r3, r1
 80066cc:	4313      	orrs	r3, r2
 80066ce:	d055      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80066d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80066d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066dc:	d033      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80066de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066e2:	d82c      	bhi.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066e8:	d02f      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80066ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ee:	d826      	bhi.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066f4:	d02b      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80066f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066fa:	d820      	bhi.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006700:	d012      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006702:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006706:	d81a      	bhi.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006708:	2b00      	cmp	r3, #0
 800670a:	d022      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800670c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006710:	d115      	bne.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006716:	3308      	adds	r3, #8
 8006718:	2101      	movs	r1, #1
 800671a:	4618      	mov	r0, r3
 800671c:	f002 f878 	bl	8008810 <RCCEx_PLL2_Config>
 8006720:	4603      	mov	r3, r0
 8006722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006726:	e015      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672c:	3328      	adds	r3, #40	@ 0x28
 800672e:	2101      	movs	r1, #1
 8006730:	4618      	mov	r0, r3
 8006732:	f002 f91f 	bl	8008974 <RCCEx_PLL3_Config>
 8006736:	4603      	mov	r3, r0
 8006738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800673c:	e00a      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006744:	e006      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006746:	bf00      	nop
 8006748:	e004      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800674a:	bf00      	nop
 800674c:	e002      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800674e:	bf00      	nop
 8006750:	e000      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006754:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10b      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800675c:	4ba3      	ldr	r3, [pc, #652]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800675e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006760:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006768:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800676c:	4a9f      	ldr	r2, [pc, #636]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800676e:	430b      	orrs	r3, r1
 8006770:	6593      	str	r3, [r2, #88]	@ 0x58
 8006772:	e003      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006774:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006778:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800677c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006788:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800678c:	2300      	movs	r3, #0
 800678e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006792:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006796:	460b      	mov	r3, r1
 8006798:	4313      	orrs	r3, r2
 800679a:	d037      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800679c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067a6:	d00e      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80067a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067ac:	d816      	bhi.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x700>
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d018      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80067b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067b6:	d111      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067b8:	4b8c      	ldr	r3, [pc, #560]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067bc:	4a8b      	ldr	r2, [pc, #556]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80067c4:	e00f      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ca:	3308      	adds	r3, #8
 80067cc:	2101      	movs	r1, #1
 80067ce:	4618      	mov	r0, r3
 80067d0:	f002 f81e 	bl	8008810 <RCCEx_PLL2_Config>
 80067d4:	4603      	mov	r3, r0
 80067d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80067da:	e004      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067e2:	e000      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80067e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10a      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067ee:	4b7f      	ldr	r3, [pc, #508]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80067f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067fc:	4a7b      	ldr	r2, [pc, #492]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067fe:	430b      	orrs	r3, r1
 8006800:	6513      	str	r3, [r2, #80]	@ 0x50
 8006802:	e003      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006808:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800680c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006814:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006818:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800681c:	2300      	movs	r3, #0
 800681e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006822:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006826:	460b      	mov	r3, r1
 8006828:	4313      	orrs	r3, r2
 800682a:	d039      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800682c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006832:	2b03      	cmp	r3, #3
 8006834:	d81c      	bhi.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006836:	a201      	add	r2, pc, #4	@ (adr r2, 800683c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683c:	08006879 	.word	0x08006879
 8006840:	0800684d 	.word	0x0800684d
 8006844:	0800685b 	.word	0x0800685b
 8006848:	08006879 	.word	0x08006879
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800684c:	4b67      	ldr	r3, [pc, #412]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800684e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006850:	4a66      	ldr	r2, [pc, #408]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006856:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006858:	e00f      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800685a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685e:	3308      	adds	r3, #8
 8006860:	2102      	movs	r1, #2
 8006862:	4618      	mov	r0, r3
 8006864:	f001 ffd4 	bl	8008810 <RCCEx_PLL2_Config>
 8006868:	4603      	mov	r3, r0
 800686a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800686e:	e004      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006876:	e000      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800687a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006882:	4b5a      	ldr	r3, [pc, #360]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006886:	f023 0103 	bic.w	r1, r3, #3
 800688a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006890:	4a56      	ldr	r2, [pc, #344]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006892:	430b      	orrs	r3, r1
 8006894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006896:	e003      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006898:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800689c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80068ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80068b0:	2300      	movs	r3, #0
 80068b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80068b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80068ba:	460b      	mov	r3, r1
 80068bc:	4313      	orrs	r3, r2
 80068be:	f000 809f 	beq.w	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068c2:	4b4b      	ldr	r3, [pc, #300]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a4a      	ldr	r2, [pc, #296]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80068c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068ce:	f7fd faab 	bl	8003e28 <HAL_GetTick>
 80068d2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068d6:	e00b      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068d8:	f7fd faa6 	bl	8003e28 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b64      	cmp	r3, #100	@ 0x64
 80068e6:	d903      	bls.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068ee:	e005      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068f0:	4b3f      	ldr	r3, [pc, #252]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0ed      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80068fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006900:	2b00      	cmp	r3, #0
 8006902:	d179      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006904:	4b39      	ldr	r3, [pc, #228]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006906:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800690c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006910:	4053      	eors	r3, r2
 8006912:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006916:	2b00      	cmp	r3, #0
 8006918:	d015      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800691a:	4b34      	ldr	r3, [pc, #208]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800691c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800691e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006922:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006926:	4b31      	ldr	r3, [pc, #196]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800692a:	4a30      	ldr	r2, [pc, #192]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800692c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006930:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006932:	4b2e      	ldr	r3, [pc, #184]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006936:	4a2d      	ldr	r2, [pc, #180]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006938:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800693c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800693e:	4a2b      	ldr	r2, [pc, #172]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006940:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006944:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800694e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006952:	d118      	bne.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006954:	f7fd fa68 	bl	8003e28 <HAL_GetTick>
 8006958:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800695c:	e00d      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800695e:	f7fd fa63 	bl	8003e28 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006968:	1ad2      	subs	r2, r2, r3
 800696a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800696e:	429a      	cmp	r2, r3
 8006970:	d903      	bls.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006978:	e005      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800697a:	4b1c      	ldr	r3, [pc, #112]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800697c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0eb      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800698a:	2b00      	cmp	r3, #0
 800698c:	d129      	bne.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800698e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006992:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800699a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800699e:	d10e      	bne.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80069a0:	4b12      	ldr	r3, [pc, #72]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80069a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069b0:	091a      	lsrs	r2, r3, #4
 80069b2:	4b10      	ldr	r3, [pc, #64]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	4a0d      	ldr	r2, [pc, #52]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069b8:	430b      	orrs	r3, r1
 80069ba:	6113      	str	r3, [r2, #16]
 80069bc:	e005      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80069be:	4b0b      	ldr	r3, [pc, #44]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	4a0a      	ldr	r2, [pc, #40]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80069c8:	6113      	str	r3, [r2, #16]
 80069ca:	4b08      	ldr	r3, [pc, #32]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069cc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80069ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069da:	4a04      	ldr	r2, [pc, #16]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069dc:	430b      	orrs	r3, r1
 80069de:	6713      	str	r3, [r2, #112]	@ 0x70
 80069e0:	e00e      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80069ea:	e009      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80069ec:	58024400 	.word	0x58024400
 80069f0:	58024800 	.word	0x58024800
 80069f4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a08:	f002 0301 	and.w	r3, r2, #1
 8006a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a10:	2300      	movs	r3, #0
 8006a12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	f000 8089 	beq.w	8006b34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a28:	2b28      	cmp	r3, #40	@ 0x28
 8006a2a:	d86b      	bhi.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a34 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a32:	bf00      	nop
 8006a34:	08006b0d 	.word	0x08006b0d
 8006a38:	08006b05 	.word	0x08006b05
 8006a3c:	08006b05 	.word	0x08006b05
 8006a40:	08006b05 	.word	0x08006b05
 8006a44:	08006b05 	.word	0x08006b05
 8006a48:	08006b05 	.word	0x08006b05
 8006a4c:	08006b05 	.word	0x08006b05
 8006a50:	08006b05 	.word	0x08006b05
 8006a54:	08006ad9 	.word	0x08006ad9
 8006a58:	08006b05 	.word	0x08006b05
 8006a5c:	08006b05 	.word	0x08006b05
 8006a60:	08006b05 	.word	0x08006b05
 8006a64:	08006b05 	.word	0x08006b05
 8006a68:	08006b05 	.word	0x08006b05
 8006a6c:	08006b05 	.word	0x08006b05
 8006a70:	08006b05 	.word	0x08006b05
 8006a74:	08006aef 	.word	0x08006aef
 8006a78:	08006b05 	.word	0x08006b05
 8006a7c:	08006b05 	.word	0x08006b05
 8006a80:	08006b05 	.word	0x08006b05
 8006a84:	08006b05 	.word	0x08006b05
 8006a88:	08006b05 	.word	0x08006b05
 8006a8c:	08006b05 	.word	0x08006b05
 8006a90:	08006b05 	.word	0x08006b05
 8006a94:	08006b0d 	.word	0x08006b0d
 8006a98:	08006b05 	.word	0x08006b05
 8006a9c:	08006b05 	.word	0x08006b05
 8006aa0:	08006b05 	.word	0x08006b05
 8006aa4:	08006b05 	.word	0x08006b05
 8006aa8:	08006b05 	.word	0x08006b05
 8006aac:	08006b05 	.word	0x08006b05
 8006ab0:	08006b05 	.word	0x08006b05
 8006ab4:	08006b0d 	.word	0x08006b0d
 8006ab8:	08006b05 	.word	0x08006b05
 8006abc:	08006b05 	.word	0x08006b05
 8006ac0:	08006b05 	.word	0x08006b05
 8006ac4:	08006b05 	.word	0x08006b05
 8006ac8:	08006b05 	.word	0x08006b05
 8006acc:	08006b05 	.word	0x08006b05
 8006ad0:	08006b05 	.word	0x08006b05
 8006ad4:	08006b0d 	.word	0x08006b0d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006adc:	3308      	adds	r3, #8
 8006ade:	2101      	movs	r1, #1
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f001 fe95 	bl	8008810 <RCCEx_PLL2_Config>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006aec:	e00f      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af2:	3328      	adds	r3, #40	@ 0x28
 8006af4:	2101      	movs	r1, #1
 8006af6:	4618      	mov	r0, r3
 8006af8:	f001 ff3c 	bl	8008974 <RCCEx_PLL3_Config>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b02:	e004      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b0a:	e000      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10a      	bne.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b16:	4bbf      	ldr	r3, [pc, #764]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b1a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b24:	4abb      	ldr	r2, [pc, #748]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b26:	430b      	orrs	r3, r1
 8006b28:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b2a:	e003      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3c:	f002 0302 	and.w	r3, r2, #2
 8006b40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b44:	2300      	movs	r3, #0
 8006b46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006b4a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4313      	orrs	r3, r2
 8006b52:	d041      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b5a:	2b05      	cmp	r3, #5
 8006b5c:	d824      	bhi.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b64 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b64:	08006bb1 	.word	0x08006bb1
 8006b68:	08006b7d 	.word	0x08006b7d
 8006b6c:	08006b93 	.word	0x08006b93
 8006b70:	08006bb1 	.word	0x08006bb1
 8006b74:	08006bb1 	.word	0x08006bb1
 8006b78:	08006bb1 	.word	0x08006bb1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b80:	3308      	adds	r3, #8
 8006b82:	2101      	movs	r1, #1
 8006b84:	4618      	mov	r0, r3
 8006b86:	f001 fe43 	bl	8008810 <RCCEx_PLL2_Config>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006b90:	e00f      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b96:	3328      	adds	r3, #40	@ 0x28
 8006b98:	2101      	movs	r1, #1
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f001 feea 	bl	8008974 <RCCEx_PLL3_Config>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ba6:	e004      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bae:	e000      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10a      	bne.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006bba:	4b96      	ldr	r3, [pc, #600]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bbe:	f023 0107 	bic.w	r1, r3, #7
 8006bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bc8:	4a92      	ldr	r2, [pc, #584]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006bca:	430b      	orrs	r3, r1
 8006bcc:	6553      	str	r3, [r2, #84]	@ 0x54
 8006bce:	e003      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be0:	f002 0304 	and.w	r3, r2, #4
 8006be4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006be8:	2300      	movs	r3, #0
 8006bea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	d044      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c00:	2b05      	cmp	r3, #5
 8006c02:	d825      	bhi.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006c04:	a201      	add	r2, pc, #4	@ (adr r2, 8006c0c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0a:	bf00      	nop
 8006c0c:	08006c59 	.word	0x08006c59
 8006c10:	08006c25 	.word	0x08006c25
 8006c14:	08006c3b 	.word	0x08006c3b
 8006c18:	08006c59 	.word	0x08006c59
 8006c1c:	08006c59 	.word	0x08006c59
 8006c20:	08006c59 	.word	0x08006c59
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c28:	3308      	adds	r3, #8
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f001 fdef 	bl	8008810 <RCCEx_PLL2_Config>
 8006c32:	4603      	mov	r3, r0
 8006c34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c38:	e00f      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3e:	3328      	adds	r3, #40	@ 0x28
 8006c40:	2101      	movs	r1, #1
 8006c42:	4618      	mov	r0, r3
 8006c44:	f001 fe96 	bl	8008974 <RCCEx_PLL3_Config>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c4e:	e004      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c56:	e000      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10b      	bne.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c62:	4b6c      	ldr	r3, [pc, #432]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c66:	f023 0107 	bic.w	r1, r3, #7
 8006c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c72:	4a68      	ldr	r2, [pc, #416]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c74:	430b      	orrs	r3, r1
 8006c76:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c78:	e003      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	f002 0320 	and.w	r3, r2, #32
 8006c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c92:	2300      	movs	r3, #0
 8006c94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	d055      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006cae:	d033      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006cb4:	d82c      	bhi.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cba:	d02f      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc0:	d826      	bhi.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006cc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006cc6:	d02b      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006cc8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006ccc:	d820      	bhi.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006cce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cd2:	d012      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006cd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cd8:	d81a      	bhi.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d022      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006cde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ce2:	d115      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce8:	3308      	adds	r3, #8
 8006cea:	2100      	movs	r1, #0
 8006cec:	4618      	mov	r0, r3
 8006cee:	f001 fd8f 	bl	8008810 <RCCEx_PLL2_Config>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006cf8:	e015      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfe:	3328      	adds	r3, #40	@ 0x28
 8006d00:	2102      	movs	r1, #2
 8006d02:	4618      	mov	r0, r3
 8006d04:	f001 fe36 	bl	8008974 <RCCEx_PLL3_Config>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d0e:	e00a      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d16:	e006      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d18:	bf00      	nop
 8006d1a:	e004      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d1c:	bf00      	nop
 8006d1e:	e002      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d20:	bf00      	nop
 8006d22:	e000      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10b      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d2e:	4b39      	ldr	r3, [pc, #228]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d32:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d3e:	4a35      	ldr	r2, [pc, #212]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d40:	430b      	orrs	r3, r1
 8006d42:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d44:	e003      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006d64:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006d68:	460b      	mov	r3, r1
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	d058      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d76:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006d7a:	d033      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006d7c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006d80:	d82c      	bhi.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d86:	d02f      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d8c:	d826      	bhi.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d92:	d02b      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006d94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d98:	d820      	bhi.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d9e:	d012      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006da0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006da4:	d81a      	bhi.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d022      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dae:	d115      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db4:	3308      	adds	r3, #8
 8006db6:	2100      	movs	r1, #0
 8006db8:	4618      	mov	r0, r3
 8006dba:	f001 fd29 	bl	8008810 <RCCEx_PLL2_Config>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006dc4:	e015      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dca:	3328      	adds	r3, #40	@ 0x28
 8006dcc:	2102      	movs	r1, #2
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f001 fdd0 	bl	8008974 <RCCEx_PLL3_Config>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006dda:	e00a      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006de2:	e006      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006de4:	bf00      	nop
 8006de6:	e004      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006de8:	bf00      	nop
 8006dea:	e002      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006dec:	bf00      	nop
 8006dee:	e000      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10e      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006dfa:	4b06      	ldr	r3, [pc, #24]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dfe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e0a:	4a02      	ldr	r2, [pc, #8]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e0c:	430b      	orrs	r3, r1
 8006e0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e10:	e006      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006e12:	bf00      	nop
 8006e14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e28:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006e2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e30:	2300      	movs	r3, #0
 8006e32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e36:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	d055      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006e48:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006e4c:	d033      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006e4e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006e52:	d82c      	bhi.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e58:	d02f      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006e5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e5e:	d826      	bhi.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e60:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006e64:	d02b      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006e66:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006e6a:	d820      	bhi.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e70:	d012      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006e72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e76:	d81a      	bhi.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d022      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006e7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e80:	d115      	bne.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e86:	3308      	adds	r3, #8
 8006e88:	2100      	movs	r1, #0
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f001 fcc0 	bl	8008810 <RCCEx_PLL2_Config>
 8006e90:	4603      	mov	r3, r0
 8006e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006e96:	e015      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9c:	3328      	adds	r3, #40	@ 0x28
 8006e9e:	2102      	movs	r1, #2
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f001 fd67 	bl	8008974 <RCCEx_PLL3_Config>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006eac:	e00a      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006eb4:	e006      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006eb6:	bf00      	nop
 8006eb8:	e004      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006eba:	bf00      	nop
 8006ebc:	e002      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006ebe:	bf00      	nop
 8006ec0:	e000      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10b      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ecc:	4ba1      	ldr	r3, [pc, #644]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006edc:	4a9d      	ldr	r2, [pc, #628]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ede:	430b      	orrs	r3, r1
 8006ee0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ee2:	e003      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ee8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	f002 0308 	and.w	r3, r2, #8
 8006ef8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006efc:	2300      	movs	r3, #0
 8006efe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f02:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006f06:	460b      	mov	r3, r1
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	d01e      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f18:	d10c      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1e:	3328      	adds	r3, #40	@ 0x28
 8006f20:	2102      	movs	r1, #2
 8006f22:	4618      	mov	r0, r3
 8006f24:	f001 fd26 	bl	8008974 <RCCEx_PLL3_Config>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d002      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006f34:	4b87      	ldr	r3, [pc, #540]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f38:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f44:	4a83      	ldr	r2, [pc, #524]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f46:	430b      	orrs	r3, r1
 8006f48:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f52:	f002 0310 	and.w	r3, r2, #16
 8006f56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f60:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006f64:	460b      	mov	r3, r1
 8006f66:	4313      	orrs	r3, r2
 8006f68:	d01e      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f76:	d10c      	bne.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7c:	3328      	adds	r3, #40	@ 0x28
 8006f7e:	2102      	movs	r1, #2
 8006f80:	4618      	mov	r0, r3
 8006f82:	f001 fcf7 	bl	8008974 <RCCEx_PLL3_Config>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f92:	4b70      	ldr	r3, [pc, #448]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006fa2:	4a6c      	ldr	r2, [pc, #432]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fa4:	430b      	orrs	r3, r1
 8006fa6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006fb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fb8:	2300      	movs	r3, #0
 8006fba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fbe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	d03e      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006fd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fd4:	d022      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006fd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fda:	d81b      	bhi.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d003      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fe4:	d00b      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006fe6:	e015      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fec:	3308      	adds	r3, #8
 8006fee:	2100      	movs	r1, #0
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f001 fc0d 	bl	8008810 <RCCEx_PLL2_Config>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ffc:	e00f      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007002:	3328      	adds	r3, #40	@ 0x28
 8007004:	2102      	movs	r1, #2
 8007006:	4618      	mov	r0, r3
 8007008:	f001 fcb4 	bl	8008974 <RCCEx_PLL3_Config>
 800700c:	4603      	mov	r3, r0
 800700e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007012:	e004      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800701a:	e000      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800701c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800701e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10b      	bne.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007026:	4b4b      	ldr	r3, [pc, #300]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800702a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800702e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007032:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007036:	4a47      	ldr	r2, [pc, #284]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007038:	430b      	orrs	r3, r1
 800703a:	6593      	str	r3, [r2, #88]	@ 0x58
 800703c:	e003      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800703e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007042:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800704a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007052:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007054:	2300      	movs	r3, #0
 8007056:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007058:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800705c:	460b      	mov	r3, r1
 800705e:	4313      	orrs	r3, r2
 8007060:	d03b      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800706a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800706e:	d01f      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007070:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007074:	d818      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800707a:	d003      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800707c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007080:	d007      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007082:	e011      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007084:	4b33      	ldr	r3, [pc, #204]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007088:	4a32      	ldr	r2, [pc, #200]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800708a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800708e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007090:	e00f      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007096:	3328      	adds	r3, #40	@ 0x28
 8007098:	2101      	movs	r1, #1
 800709a:	4618      	mov	r0, r3
 800709c:	f001 fc6a 	bl	8008974 <RCCEx_PLL3_Config>
 80070a0:	4603      	mov	r3, r0
 80070a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80070a6:	e004      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070ae:	e000      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80070b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10b      	bne.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070ba:	4b26      	ldr	r3, [pc, #152]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80070c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ca:	4a22      	ldr	r2, [pc, #136]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070cc:	430b      	orrs	r3, r1
 80070ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80070d0:	e003      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80070da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80070e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80070e8:	2300      	movs	r3, #0
 80070ea:	677b      	str	r3, [r7, #116]	@ 0x74
 80070ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80070f0:	460b      	mov	r3, r1
 80070f2:	4313      	orrs	r3, r2
 80070f4:	d034      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80070f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007104:	d007      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007106:	e011      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007108:	4b12      	ldr	r3, [pc, #72]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800710a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710c:	4a11      	ldr	r2, [pc, #68]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800710e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007112:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007114:	e00e      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800711a:	3308      	adds	r3, #8
 800711c:	2102      	movs	r1, #2
 800711e:	4618      	mov	r0, r3
 8007120:	f001 fb76 	bl	8008810 <RCCEx_PLL2_Config>
 8007124:	4603      	mov	r3, r0
 8007126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800712a:	e003      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007132:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007134:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10d      	bne.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800713c:	4b05      	ldr	r3, [pc, #20]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800713e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007140:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800714a:	4a02      	ldr	r2, [pc, #8]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800714c:	430b      	orrs	r3, r1
 800714e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007150:	e006      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007152:	bf00      	nop
 8007154:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007158:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800715c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007168:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800716c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800716e:	2300      	movs	r3, #0
 8007170:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007172:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007176:	460b      	mov	r3, r1
 8007178:	4313      	orrs	r3, r2
 800717a:	d00c      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800717c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007180:	3328      	adds	r3, #40	@ 0x28
 8007182:	2102      	movs	r1, #2
 8007184:	4618      	mov	r0, r3
 8007186:	f001 fbf5 	bl	8008974 <RCCEx_PLL3_Config>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80071a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80071a4:	2300      	movs	r3, #0
 80071a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80071a8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80071ac:	460b      	mov	r3, r1
 80071ae:	4313      	orrs	r3, r2
 80071b0:	d038      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80071b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071be:	d018      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80071c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071c4:	d811      	bhi.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80071c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071ca:	d014      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80071cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071d0:	d80b      	bhi.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d011      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80071d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071da:	d106      	bne.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071dc:	4bc3      	ldr	r3, [pc, #780]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e0:	4ac2      	ldr	r2, [pc, #776]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80071e8:	e008      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071f0:	e004      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80071f2:	bf00      	nop
 80071f4:	e002      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80071f6:	bf00      	nop
 80071f8:	e000      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80071fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10b      	bne.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007204:	4bb9      	ldr	r3, [pc, #740]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007208:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800720c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007214:	4ab5      	ldr	r2, [pc, #724]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007216:	430b      	orrs	r3, r1
 8007218:	6553      	str	r3, [r2, #84]	@ 0x54
 800721a:	e003      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800721c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007220:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007230:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007232:	2300      	movs	r3, #0
 8007234:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007236:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800723a:	460b      	mov	r3, r1
 800723c:	4313      	orrs	r3, r2
 800723e:	d009      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007240:	4baa      	ldr	r3, [pc, #680]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007244:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800724c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800724e:	4aa7      	ldr	r2, [pc, #668]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007250:	430b      	orrs	r3, r1
 8007252:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007260:	653b      	str	r3, [r7, #80]	@ 0x50
 8007262:	2300      	movs	r3, #0
 8007264:	657b      	str	r3, [r7, #84]	@ 0x54
 8007266:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800726a:	460b      	mov	r3, r1
 800726c:	4313      	orrs	r3, r2
 800726e:	d00a      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007270:	4b9e      	ldr	r3, [pc, #632]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800727c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007280:	4a9a      	ldr	r2, [pc, #616]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007282:	430b      	orrs	r3, r1
 8007284:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007292:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007294:	2300      	movs	r3, #0
 8007296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007298:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800729c:	460b      	mov	r3, r1
 800729e:	4313      	orrs	r3, r2
 80072a0:	d009      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072a2:	4b92      	ldr	r3, [pc, #584]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072a6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80072aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072b0:	4a8e      	ldr	r2, [pc, #568]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072b2:	430b      	orrs	r3, r1
 80072b4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80072b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072be:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80072c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80072c4:	2300      	movs	r3, #0
 80072c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80072c8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80072cc:	460b      	mov	r3, r1
 80072ce:	4313      	orrs	r3, r2
 80072d0:	d00e      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072d2:	4b86      	ldr	r3, [pc, #536]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	4a85      	ldr	r2, [pc, #532]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072dc:	6113      	str	r3, [r2, #16]
 80072de:	4b83      	ldr	r3, [pc, #524]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072e0:	6919      	ldr	r1, [r3, #16]
 80072e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80072ea:	4a80      	ldr	r2, [pc, #512]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072ec:	430b      	orrs	r3, r1
 80072ee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80072f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80072fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072fe:	2300      	movs	r3, #0
 8007300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007302:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007306:	460b      	mov	r3, r1
 8007308:	4313      	orrs	r3, r2
 800730a:	d009      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800730c:	4b77      	ldr	r3, [pc, #476]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800730e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007310:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800731a:	4a74      	ldr	r2, [pc, #464]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800731c:	430b      	orrs	r3, r1
 800731e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800732c:	633b      	str	r3, [r7, #48]	@ 0x30
 800732e:	2300      	movs	r3, #0
 8007330:	637b      	str	r3, [r7, #52]	@ 0x34
 8007332:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007336:	460b      	mov	r3, r1
 8007338:	4313      	orrs	r3, r2
 800733a:	d00a      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800733c:	4b6b      	ldr	r3, [pc, #428]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800733e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007340:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800734c:	4a67      	ldr	r2, [pc, #412]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800734e:	430b      	orrs	r3, r1
 8007350:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	2100      	movs	r1, #0
 800735c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007364:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007368:	460b      	mov	r3, r1
 800736a:	4313      	orrs	r3, r2
 800736c:	d011      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800736e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007372:	3308      	adds	r3, #8
 8007374:	2100      	movs	r1, #0
 8007376:	4618      	mov	r0, r3
 8007378:	f001 fa4a 	bl	8008810 <RCCEx_PLL2_Config>
 800737c:	4603      	mov	r3, r0
 800737e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800738e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739a:	2100      	movs	r1, #0
 800739c:	6239      	str	r1, [r7, #32]
 800739e:	f003 0302 	and.w	r3, r3, #2
 80073a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80073a4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80073a8:	460b      	mov	r3, r1
 80073aa:	4313      	orrs	r3, r2
 80073ac:	d011      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b2:	3308      	adds	r3, #8
 80073b4:	2101      	movs	r1, #1
 80073b6:	4618      	mov	r0, r3
 80073b8:	f001 fa2a 	bl	8008810 <RCCEx_PLL2_Config>
 80073bc:	4603      	mov	r3, r0
 80073be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80073c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80073d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073da:	2100      	movs	r1, #0
 80073dc:	61b9      	str	r1, [r7, #24]
 80073de:	f003 0304 	and.w	r3, r3, #4
 80073e2:	61fb      	str	r3, [r7, #28]
 80073e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80073e8:	460b      	mov	r3, r1
 80073ea:	4313      	orrs	r3, r2
 80073ec:	d011      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f2:	3308      	adds	r3, #8
 80073f4:	2102      	movs	r1, #2
 80073f6:	4618      	mov	r0, r3
 80073f8:	f001 fa0a 	bl	8008810 <RCCEx_PLL2_Config>
 80073fc:	4603      	mov	r3, r0
 80073fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800740a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800740e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741a:	2100      	movs	r1, #0
 800741c:	6139      	str	r1, [r7, #16]
 800741e:	f003 0308 	and.w	r3, r3, #8
 8007422:	617b      	str	r3, [r7, #20]
 8007424:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007428:	460b      	mov	r3, r1
 800742a:	4313      	orrs	r3, r2
 800742c:	d011      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800742e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007432:	3328      	adds	r3, #40	@ 0x28
 8007434:	2100      	movs	r1, #0
 8007436:	4618      	mov	r0, r3
 8007438:	f001 fa9c 	bl	8008974 <RCCEx_PLL3_Config>
 800743c:	4603      	mov	r3, r0
 800743e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800744e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	2100      	movs	r1, #0
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	f003 0310 	and.w	r3, r3, #16
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007468:	460b      	mov	r3, r1
 800746a:	4313      	orrs	r3, r2
 800746c:	d011      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800746e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007472:	3328      	adds	r3, #40	@ 0x28
 8007474:	2101      	movs	r1, #1
 8007476:	4618      	mov	r0, r3
 8007478:	f001 fa7c 	bl	8008974 <RCCEx_PLL3_Config>
 800747c:	4603      	mov	r3, r0
 800747e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800748a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800748e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	2100      	movs	r1, #0
 800749c:	6039      	str	r1, [r7, #0]
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	607b      	str	r3, [r7, #4]
 80074a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80074a8:	460b      	mov	r3, r1
 80074aa:	4313      	orrs	r3, r2
 80074ac:	d011      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b2:	3328      	adds	r3, #40	@ 0x28
 80074b4:	2102      	movs	r1, #2
 80074b6:	4618      	mov	r0, r3
 80074b8:	f001 fa5c 	bl	8008974 <RCCEx_PLL3_Config>
 80074bc:	4603      	mov	r3, r0
 80074be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80074c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80074d2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	e000      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80074e6:	46bd      	mov	sp, r7
 80074e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074ec:	58024400 	.word	0x58024400

080074f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b090      	sub	sp, #64	@ 0x40
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80074fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074fe:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007502:	430b      	orrs	r3, r1
 8007504:	f040 8094 	bne.w	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007508:	4b9e      	ldr	r3, [pc, #632]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800750a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800750c:	f003 0307 	and.w	r3, r3, #7
 8007510:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007514:	2b04      	cmp	r3, #4
 8007516:	f200 8087 	bhi.w	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800751a:	a201      	add	r2, pc, #4	@ (adr r2, 8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800751c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007520:	08007535 	.word	0x08007535
 8007524:	0800755d 	.word	0x0800755d
 8007528:	08007585 	.word	0x08007585
 800752c:	08007621 	.word	0x08007621
 8007530:	080075ad 	.word	0x080075ad
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007534:	4b93      	ldr	r3, [pc, #588]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800753c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007540:	d108      	bne.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007546:	4618      	mov	r0, r3
 8007548:	f001 f810 	bl	800856c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800754c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007550:	f000 bd45 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007554:	2300      	movs	r3, #0
 8007556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007558:	f000 bd41 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800755c:	4b89      	ldr	r3, [pc, #548]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007564:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007568:	d108      	bne.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800756a:	f107 0318 	add.w	r3, r7, #24
 800756e:	4618      	mov	r0, r3
 8007570:	f000 fd54 	bl	800801c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007578:	f000 bd31 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007580:	f000 bd2d 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007584:	4b7f      	ldr	r3, [pc, #508]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800758c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007590:	d108      	bne.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007592:	f107 030c 	add.w	r3, r7, #12
 8007596:	4618      	mov	r0, r3
 8007598:	f000 fe94 	bl	80082c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075a0:	f000 bd1d 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075a8:	f000 bd19 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075ac:	4b75      	ldr	r3, [pc, #468]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80075b4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075b6:	4b73      	ldr	r3, [pc, #460]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0304 	and.w	r3, r3, #4
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d10c      	bne.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80075c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d109      	bne.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075c8:	4b6e      	ldr	r3, [pc, #440]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	08db      	lsrs	r3, r3, #3
 80075ce:	f003 0303 	and.w	r3, r3, #3
 80075d2:	4a6d      	ldr	r2, [pc, #436]	@ (8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80075d4:	fa22 f303 	lsr.w	r3, r2, r3
 80075d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075da:	e01f      	b.n	800761c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075dc:	4b69      	ldr	r3, [pc, #420]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075e8:	d106      	bne.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80075ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075f0:	d102      	bne.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80075f2:	4b66      	ldr	r3, [pc, #408]	@ (800778c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80075f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075f6:	e011      	b.n	800761c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80075f8:	4b62      	ldr	r3, [pc, #392]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007604:	d106      	bne.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007608:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800760c:	d102      	bne.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800760e:	4b60      	ldr	r3, [pc, #384]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007610:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007612:	e003      	b.n	800761c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007614:	2300      	movs	r3, #0
 8007616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007618:	f000 bce1 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800761c:	f000 bcdf 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007620:	4b5c      	ldr	r3, [pc, #368]	@ (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007624:	f000 bcdb 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007628:	2300      	movs	r3, #0
 800762a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800762c:	f000 bcd7 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007630:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007634:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007638:	430b      	orrs	r3, r1
 800763a:	f040 80ad 	bne.w	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800763e:	4b51      	ldr	r3, [pc, #324]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007642:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007646:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800764e:	d056      	beq.n	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007656:	f200 8090 	bhi.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800765a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765c:	2bc0      	cmp	r3, #192	@ 0xc0
 800765e:	f000 8088 	beq.w	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007664:	2bc0      	cmp	r3, #192	@ 0xc0
 8007666:	f200 8088 	bhi.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800766a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766c:	2b80      	cmp	r3, #128	@ 0x80
 800766e:	d032      	beq.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007672:	2b80      	cmp	r3, #128	@ 0x80
 8007674:	f200 8081 	bhi.w	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800767e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007680:	2b40      	cmp	r3, #64	@ 0x40
 8007682:	d014      	beq.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007684:	e079      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007686:	4b3f      	ldr	r3, [pc, #252]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800768e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007692:	d108      	bne.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007698:	4618      	mov	r0, r3
 800769a:	f000 ff67 	bl	800856c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800769e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076a2:	f000 bc9c 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076a6:	2300      	movs	r3, #0
 80076a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076aa:	f000 bc98 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076ae:	4b35      	ldr	r3, [pc, #212]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076ba:	d108      	bne.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076bc:	f107 0318 	add.w	r3, r7, #24
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 fcab 	bl	800801c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076ca:	f000 bc88 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076ce:	2300      	movs	r3, #0
 80076d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076d2:	f000 bc84 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076d6:	4b2b      	ldr	r3, [pc, #172]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076e2:	d108      	bne.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076e4:	f107 030c 	add.w	r3, r7, #12
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 fdeb 	bl	80082c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076f2:	f000 bc74 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076f6:	2300      	movs	r3, #0
 80076f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076fa:	f000 bc70 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80076fe:	4b21      	ldr	r3, [pc, #132]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007702:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007706:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007708:	4b1e      	ldr	r3, [pc, #120]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0304 	and.w	r3, r3, #4
 8007710:	2b04      	cmp	r3, #4
 8007712:	d10c      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007716:	2b00      	cmp	r3, #0
 8007718:	d109      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800771a:	4b1a      	ldr	r3, [pc, #104]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	08db      	lsrs	r3, r3, #3
 8007720:	f003 0303 	and.w	r3, r3, #3
 8007724:	4a18      	ldr	r2, [pc, #96]	@ (8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007726:	fa22 f303 	lsr.w	r3, r2, r3
 800772a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800772c:	e01f      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800772e:	4b15      	ldr	r3, [pc, #84]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007736:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800773a:	d106      	bne.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800773c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800773e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007742:	d102      	bne.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007744:	4b11      	ldr	r3, [pc, #68]	@ (800778c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007746:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007748:	e011      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800774a:	4b0e      	ldr	r3, [pc, #56]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007752:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007756:	d106      	bne.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800775a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800775e:	d102      	bne.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007760:	4b0b      	ldr	r3, [pc, #44]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007762:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007764:	e003      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007766:	2300      	movs	r3, #0
 8007768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800776a:	f000 bc38 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800776e:	f000 bc36 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007772:	4b08      	ldr	r3, [pc, #32]	@ (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007776:	f000 bc32 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800777a:	2300      	movs	r3, #0
 800777c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800777e:	f000 bc2e 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007782:	bf00      	nop
 8007784:	58024400 	.word	0x58024400
 8007788:	03d09000 	.word	0x03d09000
 800778c:	003d0900 	.word	0x003d0900
 8007790:	017d7840 	.word	0x017d7840
 8007794:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800779c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80077a0:	430b      	orrs	r3, r1
 80077a2:	f040 809c 	bne.w	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80077a6:	4b9e      	ldr	r3, [pc, #632]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077aa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80077ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80077b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80077b6:	d054      	beq.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80077b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80077be:	f200 808b 	bhi.w	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80077c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80077c8:	f000 8083 	beq.w	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80077cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80077d2:	f200 8081 	bhi.w	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80077d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80077dc:	d02f      	beq.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80077de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80077e4:	d878      	bhi.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80077e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d004      	beq.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80077ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077f2:	d012      	beq.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80077f4:	e070      	b.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80077f6:	4b8a      	ldr	r3, [pc, #552]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007802:	d107      	bne.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007808:	4618      	mov	r0, r3
 800780a:	f000 feaf 	bl	800856c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800780e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007812:	e3e4      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007814:	2300      	movs	r3, #0
 8007816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007818:	e3e1      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800781a:	4b81      	ldr	r3, [pc, #516]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007822:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007826:	d107      	bne.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007828:	f107 0318 	add.w	r3, r7, #24
 800782c:	4618      	mov	r0, r3
 800782e:	f000 fbf5 	bl	800801c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007836:	e3d2      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007838:	2300      	movs	r3, #0
 800783a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800783c:	e3cf      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800783e:	4b78      	ldr	r3, [pc, #480]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800784a:	d107      	bne.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800784c:	f107 030c 	add.w	r3, r7, #12
 8007850:	4618      	mov	r0, r3
 8007852:	f000 fd37 	bl	80082c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800785a:	e3c0      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800785c:	2300      	movs	r3, #0
 800785e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007860:	e3bd      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007862:	4b6f      	ldr	r3, [pc, #444]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007866:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800786a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800786c:	4b6c      	ldr	r3, [pc, #432]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 0304 	and.w	r3, r3, #4
 8007874:	2b04      	cmp	r3, #4
 8007876:	d10c      	bne.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800787a:	2b00      	cmp	r3, #0
 800787c:	d109      	bne.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800787e:	4b68      	ldr	r3, [pc, #416]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	08db      	lsrs	r3, r3, #3
 8007884:	f003 0303 	and.w	r3, r3, #3
 8007888:	4a66      	ldr	r2, [pc, #408]	@ (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800788a:	fa22 f303 	lsr.w	r3, r2, r3
 800788e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007890:	e01e      	b.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007892:	4b63      	ldr	r3, [pc, #396]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800789a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800789e:	d106      	bne.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80078a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078a6:	d102      	bne.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078a8:	4b5f      	ldr	r3, [pc, #380]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80078aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078ac:	e010      	b.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078ae:	4b5c      	ldr	r3, [pc, #368]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078ba:	d106      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80078bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078c2:	d102      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80078c4:	4b59      	ldr	r3, [pc, #356]	@ (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80078c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078c8:	e002      	b.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80078ca:	2300      	movs	r3, #0
 80078cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80078ce:	e386      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80078d0:	e385      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80078d2:	4b57      	ldr	r3, [pc, #348]	@ (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80078d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078d6:	e382      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80078d8:	2300      	movs	r3, #0
 80078da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078dc:	e37f      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80078de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078e2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80078e6:	430b      	orrs	r3, r1
 80078e8:	f040 80a7 	bne.w	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80078ec:	4b4c      	ldr	r3, [pc, #304]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078f0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80078f4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80078f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80078fc:	d055      	beq.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80078fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007900:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007904:	f200 8096 	bhi.w	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800790e:	f000 8084 	beq.w	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007914:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007918:	f200 808c 	bhi.w	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800791c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007922:	d030      	beq.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007926:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800792a:	f200 8083 	bhi.w	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800792e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007930:	2b00      	cmp	r3, #0
 8007932:	d004      	beq.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007936:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800793a:	d012      	beq.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800793c:	e07a      	b.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800793e:	4b38      	ldr	r3, [pc, #224]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007946:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800794a:	d107      	bne.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800794c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007950:	4618      	mov	r0, r3
 8007952:	f000 fe0b 	bl	800856c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800795a:	e340      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800795c:	2300      	movs	r3, #0
 800795e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007960:	e33d      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007962:	4b2f      	ldr	r3, [pc, #188]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800796a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800796e:	d107      	bne.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007970:	f107 0318 	add.w	r3, r7, #24
 8007974:	4618      	mov	r0, r3
 8007976:	f000 fb51 	bl	800801c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800797e:	e32e      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007980:	2300      	movs	r3, #0
 8007982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007984:	e32b      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007986:	4b26      	ldr	r3, [pc, #152]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800798e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007992:	d107      	bne.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007994:	f107 030c 	add.w	r3, r7, #12
 8007998:	4618      	mov	r0, r3
 800799a:	f000 fc93 	bl	80082c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079a2:	e31c      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079a8:	e319      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80079b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0304 	and.w	r3, r3, #4
 80079bc:	2b04      	cmp	r3, #4
 80079be:	d10c      	bne.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80079c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d109      	bne.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079c6:	4b16      	ldr	r3, [pc, #88]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	08db      	lsrs	r3, r3, #3
 80079cc:	f003 0303 	and.w	r3, r3, #3
 80079d0:	4a14      	ldr	r2, [pc, #80]	@ (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80079d2:	fa22 f303 	lsr.w	r3, r2, r3
 80079d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079d8:	e01e      	b.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079da:	4b11      	ldr	r3, [pc, #68]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079e6:	d106      	bne.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80079e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079ee:	d102      	bne.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80079f0:	4b0d      	ldr	r3, [pc, #52]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80079f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079f4:	e010      	b.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a02:	d106      	bne.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a0a:	d102      	bne.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a0c:	4b07      	ldr	r3, [pc, #28]	@ (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a10:	e002      	b.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007a16:	e2e2      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a18:	e2e1      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a1a:	4b05      	ldr	r3, [pc, #20]	@ (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a1e:	e2de      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a20:	58024400 	.word	0x58024400
 8007a24:	03d09000 	.word	0x03d09000
 8007a28:	003d0900 	.word	0x003d0900
 8007a2c:	017d7840 	.word	0x017d7840
 8007a30:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007a34:	2300      	movs	r3, #0
 8007a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a38:	e2d1      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007a3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a3e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007a42:	430b      	orrs	r3, r1
 8007a44:	f040 809c 	bne.w	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007a48:	4b93      	ldr	r3, [pc, #588]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a4c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007a50:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a58:	d054      	beq.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a60:	f200 808b 	bhi.w	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a6a:	f000 8083 	beq.w	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a74:	f200 8081 	bhi.w	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a7e:	d02f      	beq.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a86:	d878      	bhi.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d004      	beq.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a94:	d012      	beq.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007a96:	e070      	b.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a98:	4b7f      	ldr	r3, [pc, #508]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007aa0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007aa4:	d107      	bne.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007aa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fd5e 	bl	800856c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ab4:	e293      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aba:	e290      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007abc:	4b76      	ldr	r3, [pc, #472]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ac4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ac8:	d107      	bne.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aca:	f107 0318 	add.w	r3, r7, #24
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 faa4 	bl	800801c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ad8:	e281      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ada:	2300      	movs	r3, #0
 8007adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ade:	e27e      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ae0:	4b6d      	ldr	r3, [pc, #436]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ae8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007aec:	d107      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aee:	f107 030c 	add.w	r3, r7, #12
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 fbe6 	bl	80082c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007afc:	e26f      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007afe:	2300      	movs	r3, #0
 8007b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b02:	e26c      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b04:	4b64      	ldr	r3, [pc, #400]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007b0c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b0e:	4b62      	ldr	r3, [pc, #392]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0304 	and.w	r3, r3, #4
 8007b16:	2b04      	cmp	r3, #4
 8007b18:	d10c      	bne.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d109      	bne.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b20:	4b5d      	ldr	r3, [pc, #372]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	08db      	lsrs	r3, r3, #3
 8007b26:	f003 0303 	and.w	r3, r3, #3
 8007b2a:	4a5c      	ldr	r2, [pc, #368]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b32:	e01e      	b.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b34:	4b58      	ldr	r3, [pc, #352]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b40:	d106      	bne.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b48:	d102      	bne.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b4a:	4b55      	ldr	r3, [pc, #340]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b4e:	e010      	b.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b50:	4b51      	ldr	r3, [pc, #324]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b5c:	d106      	bne.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b64:	d102      	bne.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b66:	4b4f      	ldr	r3, [pc, #316]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b6a:	e002      	b.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007b70:	e235      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b72:	e234      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b74:	4b4c      	ldr	r3, [pc, #304]	@ (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b78:	e231      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b7e:	e22e      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b84:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007b88:	430b      	orrs	r3, r1
 8007b8a:	f040 808f 	bne.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007b8e:	4b42      	ldr	r3, [pc, #264]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b92:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007b96:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b9a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b9e:	d06b      	beq.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ba6:	d874      	bhi.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007baa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007bae:	d056      	beq.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007bb6:	d86c      	bhi.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007bbe:	d03b      	beq.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007bc6:	d864      	bhi.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bce:	d021      	beq.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bd6:	d85c      	bhi.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d004      	beq.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007be4:	d004      	beq.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007be6:	e054      	b.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007be8:	f7fe fa0a 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 8007bec:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007bee:	e1f6      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bf0:	4b29      	ldr	r3, [pc, #164]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bfc:	d107      	bne.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bfe:	f107 0318 	add.w	r3, r7, #24
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 fa0a 	bl	800801c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c0c:	e1e7      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c12:	e1e4      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c14:	4b20      	ldr	r3, [pc, #128]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c20:	d107      	bne.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c22:	f107 030c 	add.w	r3, r7, #12
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 fb4c 	bl	80082c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c30:	e1d5      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c32:	2300      	movs	r3, #0
 8007c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c36:	e1d2      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c38:	4b17      	ldr	r3, [pc, #92]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0304 	and.w	r3, r3, #4
 8007c40:	2b04      	cmp	r3, #4
 8007c42:	d109      	bne.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c44:	4b14      	ldr	r3, [pc, #80]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	08db      	lsrs	r3, r3, #3
 8007c4a:	f003 0303 	and.w	r3, r3, #3
 8007c4e:	4a13      	ldr	r2, [pc, #76]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007c50:	fa22 f303 	lsr.w	r3, r2, r3
 8007c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c56:	e1c2      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c5c:	e1bf      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c6a:	d102      	bne.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c70:	e1b5      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c72:	2300      	movs	r3, #0
 8007c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c76:	e1b2      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007c78:	4b07      	ldr	r3, [pc, #28]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c84:	d102      	bne.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007c86:	4b07      	ldr	r3, [pc, #28]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c8a:	e1a8      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c90:	e1a5      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c96:	e1a2      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c98:	58024400 	.word	0x58024400
 8007c9c:	03d09000 	.word	0x03d09000
 8007ca0:	003d0900 	.word	0x003d0900
 8007ca4:	017d7840 	.word	0x017d7840
 8007ca8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	d173      	bne.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007cb8:	4b9c      	ldr	r3, [pc, #624]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007cc0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cc8:	d02f      	beq.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ccc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cd0:	d863      	bhi.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d004      	beq.n	8007ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cde:	d012      	beq.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007ce0:	e05b      	b.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ce2:	4b92      	ldr	r3, [pc, #584]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cee:	d107      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cf0:	f107 0318 	add.w	r3, r7, #24
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 f991 	bl	800801c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cfe:	e16e      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d00:	2300      	movs	r3, #0
 8007d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d04:	e16b      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d06:	4b89      	ldr	r3, [pc, #548]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d12:	d107      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d14:	f107 030c 	add.w	r3, r7, #12
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 fad3 	bl	80082c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d22:	e15c      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d24:	2300      	movs	r3, #0
 8007d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d28:	e159      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d2a:	4b80      	ldr	r3, [pc, #512]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007d32:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d34:	4b7d      	ldr	r3, [pc, #500]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	d10c      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d109      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d46:	4b79      	ldr	r3, [pc, #484]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	08db      	lsrs	r3, r3, #3
 8007d4c:	f003 0303 	and.w	r3, r3, #3
 8007d50:	4a77      	ldr	r2, [pc, #476]	@ (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007d52:	fa22 f303 	lsr.w	r3, r2, r3
 8007d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d58:	e01e      	b.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d5a:	4b74      	ldr	r3, [pc, #464]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d66:	d106      	bne.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d6e:	d102      	bne.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d70:	4b70      	ldr	r3, [pc, #448]	@ (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d74:	e010      	b.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d76:	4b6d      	ldr	r3, [pc, #436]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d82:	d106      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d8a:	d102      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007d8c:	4b6a      	ldr	r3, [pc, #424]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d90:	e002      	b.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007d96:	e122      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d98:	e121      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d9e:	e11e      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007da4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007da8:	430b      	orrs	r3, r1
 8007daa:	d133      	bne.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007dac:	4b5f      	ldr	r3, [pc, #380]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007db0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007db4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d004      	beq.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dc2:	d012      	beq.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007dc4:	e023      	b.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007dc6:	4b59      	ldr	r3, [pc, #356]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007dd2:	d107      	bne.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f000 fbc7 	bl	800856c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007de2:	e0fc      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007de8:	e0f9      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007dea:	4b50      	ldr	r3, [pc, #320]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007df2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007df6:	d107      	bne.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007df8:	f107 0318 	add.w	r3, r7, #24
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 f90d 	bl	800801c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e06:	e0ea      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e0c:	e0e7      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e12:	e0e4      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007e14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e18:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007e1c:	430b      	orrs	r3, r1
 8007e1e:	f040 808d 	bne.w	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007e22:	4b42      	ldr	r3, [pc, #264]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e26:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007e2a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e32:	d06b      	beq.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e3a:	d874      	bhi.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e42:	d056      	beq.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e4a:	d86c      	bhi.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e52:	d03b      	beq.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e5a:	d864      	bhi.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e62:	d021      	beq.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e6a:	d85c      	bhi.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d004      	beq.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e78:	d004      	beq.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007e7a:	e054      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007e7c:	f000 f8b8 	bl	8007ff0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007e80:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e82:	e0ac      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e84:	4b29      	ldr	r3, [pc, #164]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e90:	d107      	bne.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e92:	f107 0318 	add.w	r3, r7, #24
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 f8c0 	bl	800801c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ea0:	e09d      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea6:	e09a      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ea8:	4b20      	ldr	r3, [pc, #128]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007eb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eb4:	d107      	bne.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eb6:	f107 030c 	add.w	r3, r7, #12
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 fa02 	bl	80082c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ec4:	e08b      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eca:	e088      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ecc:	4b17      	ldr	r3, [pc, #92]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0304 	and.w	r3, r3, #4
 8007ed4:	2b04      	cmp	r3, #4
 8007ed6:	d109      	bne.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ed8:	4b14      	ldr	r3, [pc, #80]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	08db      	lsrs	r3, r3, #3
 8007ede:	f003 0303 	and.w	r3, r3, #3
 8007ee2:	4a13      	ldr	r2, [pc, #76]	@ (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eea:	e078      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef0:	e075      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007efa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007efe:	d102      	bne.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007f00:	4b0c      	ldr	r3, [pc, #48]	@ (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f04:	e06b      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f06:	2300      	movs	r3, #0
 8007f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f0a:	e068      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f0c:	4b07      	ldr	r3, [pc, #28]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f18:	d102      	bne.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007f1a:	4b07      	ldr	r3, [pc, #28]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f1e:	e05e      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f24:	e05b      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f2a:	e058      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f2c:	58024400 	.word	0x58024400
 8007f30:	03d09000 	.word	0x03d09000
 8007f34:	003d0900 	.word	0x003d0900
 8007f38:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007f3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f40:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007f44:	430b      	orrs	r3, r1
 8007f46:	d148      	bne.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007f48:	4b27      	ldr	r3, [pc, #156]	@ (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007f50:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f58:	d02a      	beq.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f60:	d838      	bhi.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d004      	beq.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f6e:	d00d      	beq.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007f70:	e030      	b.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f72:	4b1d      	ldr	r3, [pc, #116]	@ (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f7e:	d102      	bne.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007f80:	4b1a      	ldr	r3, [pc, #104]	@ (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f84:	e02b      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f8a:	e028      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f8c:	4b16      	ldr	r3, [pc, #88]	@ (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f98:	d107      	bne.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 fae4 	bl	800856c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fa8:	e019      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007faa:	2300      	movs	r3, #0
 8007fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fae:	e016      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fbc:	d107      	bne.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fbe:	f107 0318 	add.w	r3, r7, #24
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 f82a 	bl	800801c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fcc:	e007      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fd2:	e004      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fd8:	e001      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3740      	adds	r7, #64	@ 0x40
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	58024400 	.word	0x58024400
 8007fec:	017d7840 	.word	0x017d7840

08007ff0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007ff4:	f7fd ffd4 	bl	8005fa0 <HAL_RCC_GetHCLKFreq>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	4b06      	ldr	r3, [pc, #24]	@ (8008014 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	091b      	lsrs	r3, r3, #4
 8008000:	f003 0307 	and.w	r3, r3, #7
 8008004:	4904      	ldr	r1, [pc, #16]	@ (8008018 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008006:	5ccb      	ldrb	r3, [r1, r3]
 8008008:	f003 031f 	and.w	r3, r3, #31
 800800c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008010:	4618      	mov	r0, r3
 8008012:	bd80      	pop	{r7, pc}
 8008014:	58024400 	.word	0x58024400
 8008018:	08017d68 	.word	0x08017d68

0800801c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800801c:	b480      	push	{r7}
 800801e:	b089      	sub	sp, #36	@ 0x24
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008024:	4ba1      	ldr	r3, [pc, #644]	@ (80082ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008028:	f003 0303 	and.w	r3, r3, #3
 800802c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800802e:	4b9f      	ldr	r3, [pc, #636]	@ (80082ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008032:	0b1b      	lsrs	r3, r3, #12
 8008034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008038:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800803a:	4b9c      	ldr	r3, [pc, #624]	@ (80082ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800803c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803e:	091b      	lsrs	r3, r3, #4
 8008040:	f003 0301 	and.w	r3, r3, #1
 8008044:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008046:	4b99      	ldr	r3, [pc, #612]	@ (80082ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800804a:	08db      	lsrs	r3, r3, #3
 800804c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	fb02 f303 	mul.w	r3, r2, r3
 8008056:	ee07 3a90 	vmov	s15, r3
 800805a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	2b00      	cmp	r3, #0
 8008066:	f000 8111 	beq.w	800828c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	2b02      	cmp	r3, #2
 800806e:	f000 8083 	beq.w	8008178 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	2b02      	cmp	r3, #2
 8008076:	f200 80a1 	bhi.w	80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d003      	beq.n	8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d056      	beq.n	8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008086:	e099      	b.n	80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008088:	4b88      	ldr	r3, [pc, #544]	@ (80082ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0320 	and.w	r3, r3, #32
 8008090:	2b00      	cmp	r3, #0
 8008092:	d02d      	beq.n	80080f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008094:	4b85      	ldr	r3, [pc, #532]	@ (80082ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	08db      	lsrs	r3, r3, #3
 800809a:	f003 0303 	and.w	r3, r3, #3
 800809e:	4a84      	ldr	r2, [pc, #528]	@ (80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80080a0:	fa22 f303 	lsr.w	r3, r2, r3
 80080a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	ee07 3a90 	vmov	s15, r3
 80080ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	ee07 3a90 	vmov	s15, r3
 80080b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080be:	4b7b      	ldr	r3, [pc, #492]	@ (80082ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c6:	ee07 3a90 	vmov	s15, r3
 80080ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80080d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80082b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80080ee:	e087      	b.n	8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	ee07 3a90 	vmov	s15, r3
 80080f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80082b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80080fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008102:	4b6a      	ldr	r3, [pc, #424]	@ (80082ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800810a:	ee07 3a90 	vmov	s15, r3
 800810e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008112:	ed97 6a03 	vldr	s12, [r7, #12]
 8008116:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80082b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800811a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800811e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800812a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800812e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008132:	e065      	b.n	8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	ee07 3a90 	vmov	s15, r3
 800813a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800813e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008146:	4b59      	ldr	r3, [pc, #356]	@ (80082ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800814a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800814e:	ee07 3a90 	vmov	s15, r3
 8008152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008156:	ed97 6a03 	vldr	s12, [r7, #12]
 800815a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80082b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800815e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800816a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800816e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008176:	e043      	b.n	8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	ee07 3a90 	vmov	s15, r3
 800817e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008182:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80082c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800818a:	4b48      	ldr	r3, [pc, #288]	@ (80082ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800818c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800818e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008192:	ee07 3a90 	vmov	s15, r3
 8008196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800819a:	ed97 6a03 	vldr	s12, [r7, #12]
 800819e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80082b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081ba:	e021      	b.n	8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	ee07 3a90 	vmov	s15, r3
 80081c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80081ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ce:	4b37      	ldr	r3, [pc, #220]	@ (80082ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d6:	ee07 3a90 	vmov	s15, r3
 80081da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081de:	ed97 6a03 	vldr	s12, [r7, #12]
 80081e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80082b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008200:	4b2a      	ldr	r3, [pc, #168]	@ (80082ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008204:	0a5b      	lsrs	r3, r3, #9
 8008206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800820a:	ee07 3a90 	vmov	s15, r3
 800820e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008212:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800821a:	edd7 6a07 	vldr	s13, [r7, #28]
 800821e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008226:	ee17 2a90 	vmov	r2, s15
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800822e:	4b1f      	ldr	r3, [pc, #124]	@ (80082ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008232:	0c1b      	lsrs	r3, r3, #16
 8008234:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008238:	ee07 3a90 	vmov	s15, r3
 800823c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008240:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008244:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008248:	edd7 6a07 	vldr	s13, [r7, #28]
 800824c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008254:	ee17 2a90 	vmov	r2, s15
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800825c:	4b13      	ldr	r3, [pc, #76]	@ (80082ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800825e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008260:	0e1b      	lsrs	r3, r3, #24
 8008262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008266:	ee07 3a90 	vmov	s15, r3
 800826a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800826e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008272:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008276:	edd7 6a07 	vldr	s13, [r7, #28]
 800827a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800827e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008282:	ee17 2a90 	vmov	r2, s15
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800828a:	e008      	b.n	800829e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	609a      	str	r2, [r3, #8]
}
 800829e:	bf00      	nop
 80082a0:	3724      	adds	r7, #36	@ 0x24
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	58024400 	.word	0x58024400
 80082b0:	03d09000 	.word	0x03d09000
 80082b4:	46000000 	.word	0x46000000
 80082b8:	4c742400 	.word	0x4c742400
 80082bc:	4a742400 	.word	0x4a742400
 80082c0:	4bbebc20 	.word	0x4bbebc20

080082c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b089      	sub	sp, #36	@ 0x24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082cc:	4ba1      	ldr	r3, [pc, #644]	@ (8008554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d0:	f003 0303 	and.w	r3, r3, #3
 80082d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80082d6:	4b9f      	ldr	r3, [pc, #636]	@ (8008554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082da:	0d1b      	lsrs	r3, r3, #20
 80082dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80082e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80082e2:	4b9c      	ldr	r3, [pc, #624]	@ (8008554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e6:	0a1b      	lsrs	r3, r3, #8
 80082e8:	f003 0301 	and.w	r3, r3, #1
 80082ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80082ee:	4b99      	ldr	r3, [pc, #612]	@ (8008554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082f2:	08db      	lsrs	r3, r3, #3
 80082f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	fb02 f303 	mul.w	r3, r2, r3
 80082fe:	ee07 3a90 	vmov	s15, r3
 8008302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008306:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 8111 	beq.w	8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	2b02      	cmp	r3, #2
 8008316:	f000 8083 	beq.w	8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	2b02      	cmp	r3, #2
 800831e:	f200 80a1 	bhi.w	8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d003      	beq.n	8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d056      	beq.n	80083dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800832e:	e099      	b.n	8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008330:	4b88      	ldr	r3, [pc, #544]	@ (8008554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0320 	and.w	r3, r3, #32
 8008338:	2b00      	cmp	r3, #0
 800833a:	d02d      	beq.n	8008398 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800833c:	4b85      	ldr	r3, [pc, #532]	@ (8008554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	08db      	lsrs	r3, r3, #3
 8008342:	f003 0303 	and.w	r3, r3, #3
 8008346:	4a84      	ldr	r2, [pc, #528]	@ (8008558 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008348:	fa22 f303 	lsr.w	r3, r2, r3
 800834c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	ee07 3a90 	vmov	s15, r3
 8008354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	ee07 3a90 	vmov	s15, r3
 800835e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008366:	4b7b      	ldr	r3, [pc, #492]	@ (8008554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800836a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836e:	ee07 3a90 	vmov	s15, r3
 8008372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008376:	ed97 6a03 	vldr	s12, [r7, #12]
 800837a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800855c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800837e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800838a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800838e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008392:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008396:	e087      	b.n	80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	ee07 3a90 	vmov	s15, r3
 800839e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008560 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80083a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083aa:	4b6a      	ldr	r3, [pc, #424]	@ (8008554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b2:	ee07 3a90 	vmov	s15, r3
 80083b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80083be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800855c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083da:	e065      	b.n	80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	ee07 3a90 	vmov	s15, r3
 80083e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80083ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ee:	4b59      	ldr	r3, [pc, #356]	@ (8008554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008402:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800855c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800840a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800840e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800841a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800841e:	e043      	b.n	80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	ee07 3a90 	vmov	s15, r3
 8008426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800842a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008568 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800842e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008432:	4b48      	ldr	r3, [pc, #288]	@ (8008554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800843a:	ee07 3a90 	vmov	s15, r3
 800843e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008442:	ed97 6a03 	vldr	s12, [r7, #12]
 8008446:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800855c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800844a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800844e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800845a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800845e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008462:	e021      	b.n	80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	ee07 3a90 	vmov	s15, r3
 800846a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008476:	4b37      	ldr	r3, [pc, #220]	@ (8008554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800847a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800847e:	ee07 3a90 	vmov	s15, r3
 8008482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008486:	ed97 6a03 	vldr	s12, [r7, #12]
 800848a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800855c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800848e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800849a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800849e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80084a8:	4b2a      	ldr	r3, [pc, #168]	@ (8008554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ac:	0a5b      	lsrs	r3, r3, #9
 80084ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084b2:	ee07 3a90 	vmov	s15, r3
 80084b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80084c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084ce:	ee17 2a90 	vmov	r2, s15
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80084d6:	4b1f      	ldr	r3, [pc, #124]	@ (8008554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084da:	0c1b      	lsrs	r3, r3, #16
 80084dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084e0:	ee07 3a90 	vmov	s15, r3
 80084e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80084f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084fc:	ee17 2a90 	vmov	r2, s15
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008504:	4b13      	ldr	r3, [pc, #76]	@ (8008554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008508:	0e1b      	lsrs	r3, r3, #24
 800850a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800850e:	ee07 3a90 	vmov	s15, r3
 8008512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008516:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800851a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800851e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800852a:	ee17 2a90 	vmov	r2, s15
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008532:	e008      	b.n	8008546 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	609a      	str	r2, [r3, #8]
}
 8008546:	bf00      	nop
 8008548:	3724      	adds	r7, #36	@ 0x24
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	58024400 	.word	0x58024400
 8008558:	03d09000 	.word	0x03d09000
 800855c:	46000000 	.word	0x46000000
 8008560:	4c742400 	.word	0x4c742400
 8008564:	4a742400 	.word	0x4a742400
 8008568:	4bbebc20 	.word	0x4bbebc20

0800856c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800856c:	b480      	push	{r7}
 800856e:	b089      	sub	sp, #36	@ 0x24
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008574:	4ba0      	ldr	r3, [pc, #640]	@ (80087f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008578:	f003 0303 	and.w	r3, r3, #3
 800857c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800857e:	4b9e      	ldr	r3, [pc, #632]	@ (80087f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008582:	091b      	lsrs	r3, r3, #4
 8008584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008588:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800858a:	4b9b      	ldr	r3, [pc, #620]	@ (80087f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800858c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008594:	4b98      	ldr	r3, [pc, #608]	@ (80087f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008598:	08db      	lsrs	r3, r3, #3
 800859a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	fb02 f303 	mul.w	r3, r2, r3
 80085a4:	ee07 3a90 	vmov	s15, r3
 80085a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 8111 	beq.w	80087da <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	f000 8083 	beq.w	80086c6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	f200 80a1 	bhi.w	800870a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d056      	beq.n	8008682 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80085d4:	e099      	b.n	800870a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085d6:	4b88      	ldr	r3, [pc, #544]	@ (80087f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0320 	and.w	r3, r3, #32
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d02d      	beq.n	800863e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085e2:	4b85      	ldr	r3, [pc, #532]	@ (80087f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	08db      	lsrs	r3, r3, #3
 80085e8:	f003 0303 	and.w	r3, r3, #3
 80085ec:	4a83      	ldr	r2, [pc, #524]	@ (80087fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80085ee:	fa22 f303 	lsr.w	r3, r2, r3
 80085f2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	ee07 3a90 	vmov	s15, r3
 80085fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	ee07 3a90 	vmov	s15, r3
 8008604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800860c:	4b7a      	ldr	r3, [pc, #488]	@ (80087f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800860e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008614:	ee07 3a90 	vmov	s15, r3
 8008618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800861c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008620:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008800 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008624:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008628:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800862c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008630:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008638:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800863c:	e087      	b.n	800874e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	ee07 3a90 	vmov	s15, r3
 8008644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008648:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008804 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800864c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008650:	4b69      	ldr	r3, [pc, #420]	@ (80087f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008658:	ee07 3a90 	vmov	s15, r3
 800865c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008660:	ed97 6a03 	vldr	s12, [r7, #12]
 8008664:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008800 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008668:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800866c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008670:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008674:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800867c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008680:	e065      	b.n	800874e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	ee07 3a90 	vmov	s15, r3
 8008688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800868c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008808 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008690:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008694:	4b58      	ldr	r3, [pc, #352]	@ (80087f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800869c:	ee07 3a90 	vmov	s15, r3
 80086a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80086a8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008800 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80086ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086c4:	e043      	b.n	800874e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	ee07 3a90 	vmov	s15, r3
 80086cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800880c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80086d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086d8:	4b47      	ldr	r3, [pc, #284]	@ (80087f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e0:	ee07 3a90 	vmov	s15, r3
 80086e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ec:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008800 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80086f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008704:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008708:	e021      	b.n	800874e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	ee07 3a90 	vmov	s15, r3
 8008710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008714:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008804 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008718:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800871c:	4b36      	ldr	r3, [pc, #216]	@ (80087f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800871e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008724:	ee07 3a90 	vmov	s15, r3
 8008728:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800872c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008730:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008800 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008734:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008738:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800873c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008740:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008748:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800874c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800874e:	4b2a      	ldr	r3, [pc, #168]	@ (80087f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008752:	0a5b      	lsrs	r3, r3, #9
 8008754:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008758:	ee07 3a90 	vmov	s15, r3
 800875c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008760:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008764:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008768:	edd7 6a07 	vldr	s13, [r7, #28]
 800876c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008774:	ee17 2a90 	vmov	r2, s15
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800877c:	4b1e      	ldr	r3, [pc, #120]	@ (80087f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800877e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008780:	0c1b      	lsrs	r3, r3, #16
 8008782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008786:	ee07 3a90 	vmov	s15, r3
 800878a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800878e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008792:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008796:	edd7 6a07 	vldr	s13, [r7, #28]
 800879a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800879e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087a2:	ee17 2a90 	vmov	r2, s15
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80087aa:	4b13      	ldr	r3, [pc, #76]	@ (80087f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ae:	0e1b      	lsrs	r3, r3, #24
 80087b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087b4:	ee07 3a90 	vmov	s15, r3
 80087b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80087c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087d0:	ee17 2a90 	vmov	r2, s15
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80087d8:	e008      	b.n	80087ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	609a      	str	r2, [r3, #8]
}
 80087ec:	bf00      	nop
 80087ee:	3724      	adds	r7, #36	@ 0x24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	58024400 	.word	0x58024400
 80087fc:	03d09000 	.word	0x03d09000
 8008800:	46000000 	.word	0x46000000
 8008804:	4c742400 	.word	0x4c742400
 8008808:	4a742400 	.word	0x4a742400
 800880c:	4bbebc20 	.word	0x4bbebc20

08008810 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800881e:	4b53      	ldr	r3, [pc, #332]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 8008820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008822:	f003 0303 	and.w	r3, r3, #3
 8008826:	2b03      	cmp	r3, #3
 8008828:	d101      	bne.n	800882e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e099      	b.n	8008962 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800882e:	4b4f      	ldr	r3, [pc, #316]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a4e      	ldr	r2, [pc, #312]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 8008834:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800883a:	f7fb faf5 	bl	8003e28 <HAL_GetTick>
 800883e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008840:	e008      	b.n	8008854 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008842:	f7fb faf1 	bl	8003e28 <HAL_GetTick>
 8008846:	4602      	mov	r2, r0
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	2b02      	cmp	r3, #2
 800884e:	d901      	bls.n	8008854 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008850:	2303      	movs	r3, #3
 8008852:	e086      	b.n	8008962 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008854:	4b45      	ldr	r3, [pc, #276]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1f0      	bne.n	8008842 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008860:	4b42      	ldr	r3, [pc, #264]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 8008862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008864:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	031b      	lsls	r3, r3, #12
 800886e:	493f      	ldr	r1, [pc, #252]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 8008870:	4313      	orrs	r3, r2
 8008872:	628b      	str	r3, [r1, #40]	@ 0x28
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	3b01      	subs	r3, #1
 800887a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	3b01      	subs	r3, #1
 8008884:	025b      	lsls	r3, r3, #9
 8008886:	b29b      	uxth	r3, r3
 8008888:	431a      	orrs	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	3b01      	subs	r3, #1
 8008890:	041b      	lsls	r3, r3, #16
 8008892:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008896:	431a      	orrs	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	3b01      	subs	r3, #1
 800889e:	061b      	lsls	r3, r3, #24
 80088a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80088a4:	4931      	ldr	r1, [pc, #196]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 80088a6:	4313      	orrs	r3, r2
 80088a8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80088aa:	4b30      	ldr	r3, [pc, #192]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 80088ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	492d      	ldr	r1, [pc, #180]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 80088b8:	4313      	orrs	r3, r2
 80088ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80088bc:	4b2b      	ldr	r3, [pc, #172]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 80088be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088c0:	f023 0220 	bic.w	r2, r3, #32
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	4928      	ldr	r1, [pc, #160]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 80088ca:	4313      	orrs	r3, r2
 80088cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80088ce:	4b27      	ldr	r3, [pc, #156]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 80088d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d2:	4a26      	ldr	r2, [pc, #152]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 80088d4:	f023 0310 	bic.w	r3, r3, #16
 80088d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80088da:	4b24      	ldr	r3, [pc, #144]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 80088dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088de:	4b24      	ldr	r3, [pc, #144]	@ (8008970 <RCCEx_PLL2_Config+0x160>)
 80088e0:	4013      	ands	r3, r2
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	69d2      	ldr	r2, [r2, #28]
 80088e6:	00d2      	lsls	r2, r2, #3
 80088e8:	4920      	ldr	r1, [pc, #128]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80088ee:	4b1f      	ldr	r3, [pc, #124]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 80088f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f2:	4a1e      	ldr	r2, [pc, #120]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 80088f4:	f043 0310 	orr.w	r3, r3, #16
 80088f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d106      	bne.n	800890e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008900:	4b1a      	ldr	r3, [pc, #104]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 8008902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008904:	4a19      	ldr	r2, [pc, #100]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 8008906:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800890a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800890c:	e00f      	b.n	800892e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d106      	bne.n	8008922 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008914:	4b15      	ldr	r3, [pc, #84]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 8008916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008918:	4a14      	ldr	r2, [pc, #80]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 800891a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800891e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008920:	e005      	b.n	800892e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008922:	4b12      	ldr	r3, [pc, #72]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 8008924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008926:	4a11      	ldr	r2, [pc, #68]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 8008928:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800892c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800892e:	4b0f      	ldr	r3, [pc, #60]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a0e      	ldr	r2, [pc, #56]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 8008934:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800893a:	f7fb fa75 	bl	8003e28 <HAL_GetTick>
 800893e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008940:	e008      	b.n	8008954 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008942:	f7fb fa71 	bl	8003e28 <HAL_GetTick>
 8008946:	4602      	mov	r2, r0
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	2b02      	cmp	r3, #2
 800894e:	d901      	bls.n	8008954 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	e006      	b.n	8008962 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008954:	4b05      	ldr	r3, [pc, #20]	@ (800896c <RCCEx_PLL2_Config+0x15c>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800895c:	2b00      	cmp	r3, #0
 800895e:	d0f0      	beq.n	8008942 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008960:	7bfb      	ldrb	r3, [r7, #15]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	58024400 	.word	0x58024400
 8008970:	ffff0007 	.word	0xffff0007

08008974 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800897e:	2300      	movs	r3, #0
 8008980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008982:	4b53      	ldr	r3, [pc, #332]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	2b03      	cmp	r3, #3
 800898c:	d101      	bne.n	8008992 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e099      	b.n	8008ac6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008992:	4b4f      	ldr	r3, [pc, #316]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a4e      	ldr	r2, [pc, #312]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008998:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800899c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800899e:	f7fb fa43 	bl	8003e28 <HAL_GetTick>
 80089a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089a4:	e008      	b.n	80089b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80089a6:	f7fb fa3f 	bl	8003e28 <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d901      	bls.n	80089b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e086      	b.n	8008ac6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089b8:	4b45      	ldr	r3, [pc, #276]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1f0      	bne.n	80089a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80089c4:	4b42      	ldr	r3, [pc, #264]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 80089c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	051b      	lsls	r3, r3, #20
 80089d2:	493f      	ldr	r1, [pc, #252]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 80089d4:	4313      	orrs	r3, r2
 80089d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	3b01      	subs	r3, #1
 80089de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	3b01      	subs	r3, #1
 80089e8:	025b      	lsls	r3, r3, #9
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	431a      	orrs	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	3b01      	subs	r3, #1
 80089f4:	041b      	lsls	r3, r3, #16
 80089f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80089fa:	431a      	orrs	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	3b01      	subs	r3, #1
 8008a02:	061b      	lsls	r3, r3, #24
 8008a04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a08:	4931      	ldr	r1, [pc, #196]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008a0e:	4b30      	ldr	r3, [pc, #192]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a12:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	492d      	ldr	r1, [pc, #180]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008a20:	4b2b      	ldr	r3, [pc, #172]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a24:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	4928      	ldr	r1, [pc, #160]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008a32:	4b27      	ldr	r3, [pc, #156]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a36:	4a26      	ldr	r2, [pc, #152]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008a3e:	4b24      	ldr	r3, [pc, #144]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008a40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a42:	4b24      	ldr	r3, [pc, #144]	@ (8008ad4 <RCCEx_PLL3_Config+0x160>)
 8008a44:	4013      	ands	r3, r2
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	69d2      	ldr	r2, [r2, #28]
 8008a4a:	00d2      	lsls	r2, r2, #3
 8008a4c:	4920      	ldr	r1, [pc, #128]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008a52:	4b1f      	ldr	r3, [pc, #124]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a56:	4a1e      	ldr	r2, [pc, #120]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d106      	bne.n	8008a72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008a64:	4b1a      	ldr	r3, [pc, #104]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a68:	4a19      	ldr	r2, [pc, #100]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008a6a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a70:	e00f      	b.n	8008a92 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d106      	bne.n	8008a86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008a78:	4b15      	ldr	r3, [pc, #84]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7c:	4a14      	ldr	r2, [pc, #80]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008a7e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008a82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a84:	e005      	b.n	8008a92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008a86:	4b12      	ldr	r3, [pc, #72]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8a:	4a11      	ldr	r2, [pc, #68]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008a8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008a92:	4b0f      	ldr	r3, [pc, #60]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a0e      	ldr	r2, [pc, #56]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a9e:	f7fb f9c3 	bl	8003e28 <HAL_GetTick>
 8008aa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008aa4:	e008      	b.n	8008ab8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008aa6:	f7fb f9bf 	bl	8003e28 <HAL_GetTick>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d901      	bls.n	8008ab8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e006      	b.n	8008ac6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ab8:	4b05      	ldr	r3, [pc, #20]	@ (8008ad0 <RCCEx_PLL3_Config+0x15c>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d0f0      	beq.n	8008aa6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	58024400 	.word	0x58024400
 8008ad4:	ffff0007 	.word	0xffff0007

08008ad8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b08a      	sub	sp, #40	@ 0x28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e075      	b.n	8008bd6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d105      	bne.n	8008b02 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7f8 fcdd 	bl	80014bc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2204      	movs	r2, #4
 8008b06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f868 	bl	8008be0 <HAL_SD_InitCard>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e05d      	b.n	8008bd6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008b1a:	f107 0308 	add.w	r3, r7, #8
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fdaf 	bl	8009684 <HAL_SD_GetCardStatus>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d001      	beq.n	8008b30 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e052      	b.n	8008bd6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008b30:	7e3b      	ldrb	r3, [r7, #24]
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008b36:	7e7b      	ldrb	r3, [r7, #25]
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d10a      	bne.n	8008b5a <HAL_SD_Init+0x82>
 8008b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d102      	bne.n	8008b50 <HAL_SD_Init+0x78>
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d004      	beq.n	8008b5a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b56:	659a      	str	r2, [r3, #88]	@ 0x58
 8008b58:	e00b      	b.n	8008b72 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d104      	bne.n	8008b6c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b68:	659a      	str	r2, [r3, #88]	@ 0x58
 8008b6a:	e002      	b.n	8008b72 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	4619      	mov	r1, r3
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fe6d 	bl	8009858 <HAL_SD_ConfigWideBusOperation>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e026      	b.n	8008bd6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008b88:	f7fb f94e 	bl	8003e28 <HAL_GetTick>
 8008b8c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008b8e:	e011      	b.n	8008bb4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008b90:	f7fb f94a 	bl	8003e28 <HAL_GetTick>
 8008b94:	4602      	mov	r2, r0
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b9e:	d109      	bne.n	8008bb4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008ba6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e010      	b.n	8008bd6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 ff61 	bl	8009a7c <HAL_SD_GetCardState>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b04      	cmp	r3, #4
 8008bbe:	d1e7      	bne.n	8008b90 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3728      	adds	r7, #40	@ 0x28
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
	...

08008be0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008be0:	b590      	push	{r4, r7, lr}
 8008be2:	b08d      	sub	sp, #52	@ 0x34
 8008be4:	af02      	add	r7, sp, #8
 8008be6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008be8:	2300      	movs	r3, #0
 8008bea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008bec:	2300      	movs	r3, #0
 8008bee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008bf8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008bfc:	f04f 0100 	mov.w	r1, #0
 8008c00:	f7fe fc76 	bl	80074f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c04:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8008c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d109      	bne.n	8008c20 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008c1a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e070      	b.n	8008d02 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c22:	0a1b      	lsrs	r3, r3, #8
 8008c24:	4a39      	ldr	r2, [pc, #228]	@ (8008d0c <HAL_SD_InitCard+0x12c>)
 8008c26:	fba2 2303 	umull	r2, r3, r2, r3
 8008c2a:	091b      	lsrs	r3, r3, #4
 8008c2c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681c      	ldr	r4, [r3, #0]
 8008c32:	466a      	mov	r2, sp
 8008c34:	f107 0318 	add.w	r3, r7, #24
 8008c38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008c3c:	e882 0003 	stmia.w	r2, {r0, r1}
 8008c40:	f107 030c 	add.w	r3, r7, #12
 8008c44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c46:	4620      	mov	r0, r4
 8008c48:	f005 fb8e 	bl	800e368 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f005 fbd1 	bl	800e3f8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d005      	beq.n	8008c68 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	005b      	lsls	r3, r3, #1
 8008c60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c66:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d007      	beq.n	8008c7e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008c6e:	4a28      	ldr	r2, [pc, #160]	@ (8008d10 <HAL_SD_InitCard+0x130>)
 8008c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c76:	3301      	adds	r3, #1
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fb f8e1 	bl	8003e40 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 ffea 	bl	8009c58 <SD_PowerON>
 8008c84:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c86:	6a3b      	ldr	r3, [r7, #32]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d00b      	beq.n	8008ca4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	431a      	orrs	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e02e      	b.n	8008d02 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 ff09 	bl	8009abc <SD_InitCard>
 8008caa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00b      	beq.n	8008cca <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	431a      	orrs	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e01b      	b.n	8008d02 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f005 fc26 	bl	800e524 <SDMMC_CmdBlockLength>
 8008cd8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008cda:	6a3b      	ldr	r3, [r7, #32]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00f      	beq.n	8008d00 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a0b      	ldr	r2, [pc, #44]	@ (8008d14 <HAL_SD_InitCard+0x134>)
 8008ce6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cec:	6a3b      	ldr	r3, [r7, #32]
 8008cee:	431a      	orrs	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e000      	b.n	8008d02 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	372c      	adds	r7, #44	@ 0x2c
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd90      	pop	{r4, r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	014f8b59 	.word	0x014f8b59
 8008d10:	00012110 	.word	0x00012110
 8008d14:	1fe00fff 	.word	0x1fe00fff

08008d18 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b08c      	sub	sp, #48	@ 0x30
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]
 8008d24:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d107      	bne.n	8008d40 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d34:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e08d      	b.n	8008e5c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	f040 8086 	bne.w	8008e5a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008d54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	441a      	add	r2, r3
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d907      	bls.n	8008d72 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d66:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e074      	b.n	8008e5c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2203      	movs	r2, #3
 8008d76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	025a      	lsls	r2, r3, #9
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d002      	beq.n	8008d9e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8008d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9a:	025b      	lsls	r3, r3, #9
 8008d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008da2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	025b      	lsls	r3, r3, #9
 8008da8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008daa:	2390      	movs	r3, #144	@ 0x90
 8008dac:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008dae:	2302      	movs	r3, #2
 8008db0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008db6:	2300      	movs	r3, #0
 8008db8:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f107 0210 	add.w	r2, r7, #16
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f005 fb81 	bl	800e4cc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68da      	ldr	r2, [r3, #12]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008dd8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2201      	movs	r2, #1
 8008de8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d90a      	bls.n	8008e06 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2282      	movs	r2, #130	@ 0x82
 8008df4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f005 fbd7 	bl	800e5b0 <SDMMC_CmdReadMultiBlock>
 8008e02:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008e04:	e009      	b.n	8008e1a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2281      	movs	r2, #129	@ 0x81
 8008e0a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e12:	4618      	mov	r0, r3
 8008e14:	f005 fba9 	bl	800e56a <SDMMC_CmdReadSingleBlock>
 8008e18:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d012      	beq.n	8008e46 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a0f      	ldr	r2, [pc, #60]	@ (8008e64 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8008e26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e2e:	431a      	orrs	r2, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e00a      	b.n	8008e5c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8008e54:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	e000      	b.n	8008e5c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008e5a:	2302      	movs	r3, #2
  }
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3730      	adds	r7, #48	@ 0x30
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	1fe00fff 	.word	0x1fe00fff

08008e68 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b08c      	sub	sp, #48	@ 0x30
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
 8008e74:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d107      	bne.n	8008e90 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e84:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e08d      	b.n	8008fac <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	f040 8086 	bne.w	8008faa <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008ea4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	441a      	add	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d907      	bls.n	8008ec2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eb6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e074      	b.n	8008fac <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2203      	movs	r2, #3
 8008ec6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	025a      	lsls	r2, r3, #9
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d002      	beq.n	8008eee <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eea:	025b      	lsls	r3, r3, #9
 8008eec:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008eee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008ef2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	025b      	lsls	r3, r3, #9
 8008ef8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008efa:	2390      	movs	r3, #144	@ 0x90
 8008efc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008efe:	2300      	movs	r3, #0
 8008f00:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f02:	2300      	movs	r3, #0
 8008f04:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008f06:	2300      	movs	r3, #0
 8008f08:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f107 0210 	add.w	r2, r7, #16
 8008f12:	4611      	mov	r1, r2
 8008f14:	4618      	mov	r0, r3
 8008f16:	f005 fad9 	bl	800e4cc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68da      	ldr	r2, [r3, #12]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f28:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2201      	movs	r2, #1
 8008f38:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d90a      	bls.n	8008f56 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	22a0      	movs	r2, #160	@ 0xa0
 8008f44:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f005 fb75 	bl	800e63c <SDMMC_CmdWriteMultiBlock>
 8008f52:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008f54:	e009      	b.n	8008f6a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2290      	movs	r2, #144	@ 0x90
 8008f5a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f62:	4618      	mov	r0, r3
 8008f64:	f005 fb47 	bl	800e5f6 <SDMMC_CmdWriteSingleBlock>
 8008f68:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d012      	beq.n	8008f96 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a0f      	ldr	r2, [pc, #60]	@ (8008fb4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8008f76:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f7e:	431a      	orrs	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e00a      	b.n	8008fac <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8008fa4:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	e000      	b.n	8008fac <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008faa:	2302      	movs	r3, #2
  }
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3730      	adds	r7, #48	@ 0x30
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	1fe00fff 	.word	0x1fe00fff

08008fb8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fc4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d008      	beq.n	8008fe6 <HAL_SD_IRQHandler+0x2e>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f003 0308 	and.w	r3, r3, #8
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d003      	beq.n	8008fe6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f001 f926 	bl	800a230 <SD_Read_IT>
 8008fe4:	e19a      	b.n	800931c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 80ac 	beq.w	800914e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ffe:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	4b59      	ldr	r3, [pc, #356]	@ (8009170 <HAL_SD_IRQHandler+0x1b8>)
 800900c:	400b      	ands	r3, r1
 800900e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800901e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68da      	ldr	r2, [r3, #12]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800902e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f003 0308 	and.w	r3, r3, #8
 8009036:	2b00      	cmp	r3, #0
 8009038:	d038      	beq.n	80090ac <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f003 0302 	and.w	r3, r3, #2
 8009040:	2b00      	cmp	r3, #0
 8009042:	d104      	bne.n	800904e <HAL_SD_IRQHandler+0x96>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f003 0320 	and.w	r3, r3, #32
 800904a:	2b00      	cmp	r3, #0
 800904c:	d011      	beq.n	8009072 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4618      	mov	r0, r3
 8009054:	f005 fb16 	bl	800e684 <SDMMC_CmdStopTransfer>
 8009058:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d008      	beq.n	8009072 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	431a      	orrs	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f95b 	bl	8009328 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a3f      	ldr	r2, [pc, #252]	@ (8009174 <HAL_SD_IRQHandler+0x1bc>)
 8009078:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2201      	movs	r2, #1
 800907e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f003 0301 	and.w	r3, r3, #1
 800908e:	2b00      	cmp	r3, #0
 8009090:	d104      	bne.n	800909c <HAL_SD_IRQHandler+0xe4>
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f003 0302 	and.w	r3, r3, #2
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f005 ffc9 	bl	800f034 <HAL_SD_RxCpltCallback>
 80090a2:	e13b      	b.n	800931c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f005 ffbb 	bl	800f020 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80090aa:	e137      	b.n	800931c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f000 8132 	beq.w	800931c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2200      	movs	r2, #0
 80090be:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2200      	movs	r2, #0
 80090c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2200      	movs	r2, #0
 80090ce:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f003 0302 	and.w	r3, r3, #2
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d104      	bne.n	80090e4 <HAL_SD_IRQHandler+0x12c>
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f003 0320 	and.w	r3, r3, #32
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d011      	beq.n	8009108 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f005 facb 	bl	800e684 <SDMMC_CmdStopTransfer>
 80090ee:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d008      	beq.n	8009108 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	431a      	orrs	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f910 	bl	8009328 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f003 0310 	and.w	r3, r3, #16
 800911c:	2b00      	cmp	r3, #0
 800911e:	d104      	bne.n	800912a <HAL_SD_IRQHandler+0x172>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f003 0320 	and.w	r3, r3, #32
 8009126:	2b00      	cmp	r3, #0
 8009128:	d002      	beq.n	8009130 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f005 ff78 	bl	800f020 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f003 0301 	and.w	r3, r3, #1
 8009136:	2b00      	cmp	r3, #0
 8009138:	d105      	bne.n	8009146 <HAL_SD_IRQHandler+0x18e>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f003 0302 	and.w	r3, r3, #2
 8009140:	2b00      	cmp	r3, #0
 8009142:	f000 80eb 	beq.w	800931c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f005 ff74 	bl	800f034 <HAL_SD_RxCpltCallback>
}
 800914c:	e0e6      	b.n	800931c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009154:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00d      	beq.n	8009178 <HAL_SD_IRQHandler+0x1c0>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f003 0308 	and.w	r3, r3, #8
 8009162:	2b00      	cmp	r3, #0
 8009164:	d008      	beq.n	8009178 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f001 f8a8 	bl	800a2bc <SD_Write_IT>
 800916c:	e0d6      	b.n	800931c <HAL_SD_IRQHandler+0x364>
 800916e:	bf00      	nop
 8009170:	ffff3ec5 	.word	0xffff3ec5
 8009174:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800917e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 809d 	beq.w	80092c2 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800918e:	f003 0302 	and.w	r3, r3, #2
 8009192:	2b00      	cmp	r3, #0
 8009194:	d005      	beq.n	80091a2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800919a:	f043 0202 	orr.w	r2, r3, #2
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091a8:	f003 0308 	and.w	r3, r3, #8
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d005      	beq.n	80091bc <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091b4:	f043 0208 	orr.w	r2, r3, #8
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091c2:	f003 0320 	and.w	r3, r3, #32
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d005      	beq.n	80091d6 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091ce:	f043 0220 	orr.w	r2, r3, #32
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091dc:	f003 0310 	and.w	r3, r3, #16
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d005      	beq.n	80091f0 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091e8:	f043 0210 	orr.w	r2, r3, #16
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a4b      	ldr	r2, [pc, #300]	@ (8009324 <HAL_SD_IRQHandler+0x36c>)
 80091f6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009206:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68da      	ldr	r2, [r3, #12]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009216:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009226:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68da      	ldr	r2, [r3, #12]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009236:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4618      	mov	r0, r3
 800923e:	f005 fa21 	bl	800e684 <SDMMC_CmdStopTransfer>
 8009242:	4602      	mov	r2, r0
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009248:	431a      	orrs	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68da      	ldr	r2, [r3, #12]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800925c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009266:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f003 0308 	and.w	r3, r3, #8
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00a      	beq.n	8009288 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f851 	bl	8009328 <HAL_SD_ErrorCallback>
}
 8009286:	e049      	b.n	800931c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800928e:	2b00      	cmp	r3, #0
 8009290:	d044      	beq.n	800931c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009296:	2b00      	cmp	r3, #0
 8009298:	d040      	beq.n	800931c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80092a8:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2200      	movs	r2, #0
 80092b0:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f834 	bl	8009328 <HAL_SD_ErrorCallback>
}
 80092c0:	e02c      	b.n	800931c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d025      	beq.n	800931c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092d8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092e0:	f003 0304 	and.w	r3, r3, #4
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10c      	bne.n	8009302 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f003 0320 	and.w	r3, r3, #32
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d003      	beq.n	80092fa <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f001 f84a 	bl	800a38c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80092f8:	e010      	b.n	800931c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f001 f832 	bl	800a364 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8009300:	e00c      	b.n	800931c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f003 0320 	and.w	r3, r3, #32
 8009308:	2b00      	cmp	r3, #0
 800930a:	d003      	beq.n	8009314 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f001 f833 	bl	800a378 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8009312:	e003      	b.n	800931c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f001 f81b 	bl	800a350 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800931a:	e7ff      	b.n	800931c <HAL_SD_IRQHandler+0x364>
 800931c:	bf00      	nop
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	18000f3a 	.word	0x18000f3a

08009328 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800934a:	0f9b      	lsrs	r3, r3, #30
 800934c:	b2da      	uxtb	r2, r3
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009356:	0e9b      	lsrs	r3, r3, #26
 8009358:	b2db      	uxtb	r3, r3
 800935a:	f003 030f 	and.w	r3, r3, #15
 800935e:	b2da      	uxtb	r2, r3
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009368:	0e1b      	lsrs	r3, r3, #24
 800936a:	b2db      	uxtb	r3, r3
 800936c:	f003 0303 	and.w	r3, r3, #3
 8009370:	b2da      	uxtb	r2, r3
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800937a:	0c1b      	lsrs	r3, r3, #16
 800937c:	b2da      	uxtb	r2, r3
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009386:	0a1b      	lsrs	r3, r3, #8
 8009388:	b2da      	uxtb	r2, r3
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009392:	b2da      	uxtb	r2, r3
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800939c:	0d1b      	lsrs	r3, r3, #20
 800939e:	b29a      	uxth	r2, r3
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093a8:	0c1b      	lsrs	r3, r3, #16
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	f003 030f 	and.w	r3, r3, #15
 80093b0:	b2da      	uxtb	r2, r3
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093ba:	0bdb      	lsrs	r3, r3, #15
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	f003 0301 	and.w	r3, r3, #1
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093cc:	0b9b      	lsrs	r3, r3, #14
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	f003 0301 	and.w	r3, r3, #1
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093de:	0b5b      	lsrs	r3, r3, #13
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	f003 0301 	and.w	r3, r3, #1
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093f0:	0b1b      	lsrs	r3, r3, #12
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	f003 0301 	and.w	r3, r3, #1
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	2200      	movs	r2, #0
 8009402:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009408:	2b00      	cmp	r3, #0
 800940a:	d163      	bne.n	80094d4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009410:	009a      	lsls	r2, r3, #2
 8009412:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009416:	4013      	ands	r3, r2
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800941c:	0f92      	lsrs	r2, r2, #30
 800941e:	431a      	orrs	r2, r3
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009428:	0edb      	lsrs	r3, r3, #27
 800942a:	b2db      	uxtb	r3, r3
 800942c:	f003 0307 	and.w	r3, r3, #7
 8009430:	b2da      	uxtb	r2, r3
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800943a:	0e1b      	lsrs	r3, r3, #24
 800943c:	b2db      	uxtb	r3, r3
 800943e:	f003 0307 	and.w	r3, r3, #7
 8009442:	b2da      	uxtb	r2, r3
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800944c:	0d5b      	lsrs	r3, r3, #21
 800944e:	b2db      	uxtb	r3, r3
 8009450:	f003 0307 	and.w	r3, r3, #7
 8009454:	b2da      	uxtb	r2, r3
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800945e:	0c9b      	lsrs	r3, r3, #18
 8009460:	b2db      	uxtb	r3, r3
 8009462:	f003 0307 	and.w	r3, r3, #7
 8009466:	b2da      	uxtb	r2, r3
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009470:	0bdb      	lsrs	r3, r3, #15
 8009472:	b2db      	uxtb	r3, r3
 8009474:	f003 0307 	and.w	r3, r3, #7
 8009478:	b2da      	uxtb	r2, r3
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	7e1b      	ldrb	r3, [r3, #24]
 800948c:	b2db      	uxtb	r3, r3
 800948e:	f003 0307 	and.w	r3, r3, #7
 8009492:	3302      	adds	r3, #2
 8009494:	2201      	movs	r2, #1
 8009496:	fa02 f303 	lsl.w	r3, r2, r3
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800949e:	fb03 f202 	mul.w	r2, r3, r2
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	7a1b      	ldrb	r3, [r3, #8]
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	f003 030f 	and.w	r3, r3, #15
 80094b0:	2201      	movs	r2, #1
 80094b2:	409a      	lsls	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80094c0:	0a52      	lsrs	r2, r2, #9
 80094c2:	fb03 f202 	mul.w	r2, r3, r2
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094d0:	655a      	str	r2, [r3, #84]	@ 0x54
 80094d2:	e031      	b.n	8009538 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d11d      	bne.n	8009518 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094e0:	041b      	lsls	r3, r3, #16
 80094e2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094ea:	0c1b      	lsrs	r3, r3, #16
 80094ec:	431a      	orrs	r2, r3
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	3301      	adds	r3, #1
 80094f8:	029a      	lsls	r2, r3, #10
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800950c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	655a      	str	r2, [r3, #84]	@ 0x54
 8009516:	e00f      	b.n	8009538 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a58      	ldr	r2, [pc, #352]	@ (8009680 <HAL_SD_GetCardCSD+0x344>)
 800951e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009524:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e09d      	b.n	8009674 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800953c:	0b9b      	lsrs	r3, r3, #14
 800953e:	b2db      	uxtb	r3, r3
 8009540:	f003 0301 	and.w	r3, r3, #1
 8009544:	b2da      	uxtb	r2, r3
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800954e:	09db      	lsrs	r3, r3, #7
 8009550:	b2db      	uxtb	r3, r3
 8009552:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009556:	b2da      	uxtb	r2, r3
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009560:	b2db      	uxtb	r3, r3
 8009562:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009566:	b2da      	uxtb	r2, r3
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009570:	0fdb      	lsrs	r3, r3, #31
 8009572:	b2da      	uxtb	r2, r3
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800957c:	0f5b      	lsrs	r3, r3, #29
 800957e:	b2db      	uxtb	r3, r3
 8009580:	f003 0303 	and.w	r3, r3, #3
 8009584:	b2da      	uxtb	r2, r3
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800958e:	0e9b      	lsrs	r3, r3, #26
 8009590:	b2db      	uxtb	r3, r3
 8009592:	f003 0307 	and.w	r3, r3, #7
 8009596:	b2da      	uxtb	r2, r3
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80095a0:	0d9b      	lsrs	r3, r3, #22
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	f003 030f 	and.w	r3, r3, #15
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80095b2:	0d5b      	lsrs	r3, r3, #21
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	f003 0301 	and.w	r3, r3, #1
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80095ce:	0c1b      	lsrs	r3, r3, #16
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	f003 0301 	and.w	r3, r3, #1
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80095e2:	0bdb      	lsrs	r3, r3, #15
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80095f6:	0b9b      	lsrs	r3, r3, #14
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	f003 0301 	and.w	r3, r3, #1
 80095fe:	b2da      	uxtb	r2, r3
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800960a:	0b5b      	lsrs	r3, r3, #13
 800960c:	b2db      	uxtb	r3, r3
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	b2da      	uxtb	r2, r3
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800961e:	0b1b      	lsrs	r3, r3, #12
 8009620:	b2db      	uxtb	r3, r3
 8009622:	f003 0301 	and.w	r3, r3, #1
 8009626:	b2da      	uxtb	r2, r3
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009632:	0a9b      	lsrs	r3, r3, #10
 8009634:	b2db      	uxtb	r3, r3
 8009636:	f003 0303 	and.w	r3, r3, #3
 800963a:	b2da      	uxtb	r2, r3
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009646:	0a1b      	lsrs	r3, r3, #8
 8009648:	b2db      	uxtb	r3, r3
 800964a:	f003 0303 	and.w	r3, r3, #3
 800964e:	b2da      	uxtb	r2, r3
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800965a:	085b      	lsrs	r3, r3, #1
 800965c:	b2db      	uxtb	r3, r3
 800965e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009662:	b2da      	uxtb	r2, r3
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	2201      	movs	r2, #1
 800966e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	1fe00fff 	.word	0x1fe00fff

08009684 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b094      	sub	sp, #80	@ 0x50
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800968e:	2300      	movs	r3, #0
 8009690:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800969a:	b2db      	uxtb	r3, r3
 800969c:	2b03      	cmp	r3, #3
 800969e:	d101      	bne.n	80096a4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	e0a7      	b.n	80097f4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80096a4:	f107 0308 	add.w	r3, r7, #8
 80096a8:	4619      	mov	r1, r3
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 fb62 	bl	8009d74 <SD_SendSDStatus>
 80096b0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80096b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d011      	beq.n	80096dc <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a4f      	ldr	r2, [pc, #316]	@ (80097fc <HAL_SD_GetCardStatus+0x178>)
 80096be:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096c6:	431a      	orrs	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80096da:	e070      	b.n	80097be <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	099b      	lsrs	r3, r3, #6
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	f003 0303 	and.w	r3, r3, #3
 80096e6:	b2da      	uxtb	r2, r3
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	095b      	lsrs	r3, r3, #5
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	f003 0301 	and.w	r3, r3, #1
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	0a1b      	lsrs	r3, r3, #8
 8009700:	b29b      	uxth	r3, r3
 8009702:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009706:	b29a      	uxth	r2, r3
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	0e1b      	lsrs	r3, r3, #24
 800970c:	b29b      	uxth	r3, r3
 800970e:	4313      	orrs	r3, r2
 8009710:	b29a      	uxth	r2, r3
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	061a      	lsls	r2, r3, #24
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	021b      	lsls	r3, r3, #8
 800971e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009722:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	0a1b      	lsrs	r3, r3, #8
 8009728:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800972c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	0e1b      	lsrs	r3, r3, #24
 8009732:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	b2da      	uxtb	r2, r3
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	0a1b      	lsrs	r3, r3, #8
 8009744:	b2da      	uxtb	r2, r3
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	0d1b      	lsrs	r3, r3, #20
 800974e:	b2db      	uxtb	r3, r3
 8009750:	f003 030f 	and.w	r3, r3, #15
 8009754:	b2da      	uxtb	r2, r3
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	0c1b      	lsrs	r3, r3, #16
 800975e:	b29b      	uxth	r3, r3
 8009760:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009764:	b29a      	uxth	r2, r3
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	b29b      	uxth	r3, r3
 800976a:	b2db      	uxtb	r3, r3
 800976c:	b29b      	uxth	r3, r3
 800976e:	4313      	orrs	r3, r2
 8009770:	b29a      	uxth	r2, r3
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	0a9b      	lsrs	r3, r3, #10
 800977a:	b2db      	uxtb	r3, r3
 800977c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009780:	b2da      	uxtb	r2, r3
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	0a1b      	lsrs	r3, r3, #8
 800978a:	b2db      	uxtb	r3, r3
 800978c:	f003 0303 	and.w	r3, r3, #3
 8009790:	b2da      	uxtb	r2, r3
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	091b      	lsrs	r3, r3, #4
 800979a:	b2db      	uxtb	r3, r3
 800979c:	f003 030f 	and.w	r3, r3, #15
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	f003 030f 	and.w	r3, r3, #15
 80097ae:	b2da      	uxtb	r2, r3
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	0e1b      	lsrs	r3, r3, #24
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80097c6:	4618      	mov	r0, r3
 80097c8:	f004 feac 	bl	800e524 <SDMMC_CmdBlockLength>
 80097cc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80097ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00d      	beq.n	80097f0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a08      	ldr	r2, [pc, #32]	@ (80097fc <HAL_SD_GetCardStatus+0x178>)
 80097da:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097e0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 80097f0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3750      	adds	r7, #80	@ 0x50
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	1fe00fff 	.word	0x1fe00fff

08009800 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009858:	b590      	push	{r4, r7, lr}
 800985a:	b08d      	sub	sp, #52	@ 0x34
 800985c:	af02      	add	r7, sp, #8
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2203      	movs	r2, #3
 800986c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009874:	2b03      	cmp	r3, #3
 8009876:	d02e      	beq.n	80098d6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800987e:	d106      	bne.n	800988e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009884:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	635a      	str	r2, [r3, #52]	@ 0x34
 800988c:	e029      	b.n	80098e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009894:	d10a      	bne.n	80098ac <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 fb64 	bl	8009f64 <SD_WideBus_Enable>
 800989c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098a2:	6a3b      	ldr	r3, [r7, #32]
 80098a4:	431a      	orrs	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80098aa:	e01a      	b.n	80098e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10a      	bne.n	80098c8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fba1 	bl	8009ffa <SD_WideBus_Disable>
 80098b8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098be:	6a3b      	ldr	r3, [r7, #32]
 80098c0:	431a      	orrs	r2, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80098c6:	e00c      	b.n	80098e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098cc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80098d4:	e005      	b.n	80098e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098da:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d007      	beq.n	80098fa <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a5f      	ldr	r2, [pc, #380]	@ (8009a6c <HAL_SD_ConfigWideBusOperation+0x214>)
 80098f0:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80098f8:	e096      	b.n	8009a28 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80098fa:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80098fe:	f04f 0100 	mov.w	r1, #0
 8009902:	f7fd fdf5 	bl	80074f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8009906:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	2b00      	cmp	r3, #0
 800990c:	f000 8083 	beq.w	8009a16 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	695a      	ldr	r2, [r3, #20]
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	4950      	ldr	r1, [pc, #320]	@ (8009a70 <HAL_SD_ConfigWideBusOperation+0x218>)
 800992e:	fba1 1303 	umull	r1, r3, r1, r3
 8009932:	0e1b      	lsrs	r3, r3, #24
 8009934:	429a      	cmp	r2, r3
 8009936:	d303      	bcc.n	8009940 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	695b      	ldr	r3, [r3, #20]
 800993c:	61bb      	str	r3, [r7, #24]
 800993e:	e05a      	b.n	80099f6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009948:	d103      	bne.n	8009952 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	695b      	ldr	r3, [r3, #20]
 800994e:	61bb      	str	r3, [r7, #24]
 8009950:	e051      	b.n	80099f6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800995a:	d126      	bne.n	80099aa <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	695b      	ldr	r3, [r3, #20]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10e      	bne.n	8009982 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	4a43      	ldr	r2, [pc, #268]	@ (8009a74 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d906      	bls.n	800997a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	4a40      	ldr	r2, [pc, #256]	@ (8009a70 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009970:	fba2 2303 	umull	r2, r3, r2, r3
 8009974:	0e5b      	lsrs	r3, r3, #25
 8009976:	61bb      	str	r3, [r7, #24]
 8009978:	e03d      	b.n	80099f6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	61bb      	str	r3, [r7, #24]
 8009980:	e039      	b.n	80099f6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	005b      	lsls	r3, r3, #1
 8009988:	69fa      	ldr	r2, [r7, #28]
 800998a:	fbb2 f3f3 	udiv	r3, r2, r3
 800998e:	4a39      	ldr	r2, [pc, #228]	@ (8009a74 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d906      	bls.n	80099a2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	4a36      	ldr	r2, [pc, #216]	@ (8009a70 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009998:	fba2 2303 	umull	r2, r3, r2, r3
 800999c:	0e5b      	lsrs	r3, r3, #25
 800999e:	61bb      	str	r3, [r7, #24]
 80099a0:	e029      	b.n	80099f6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	61bb      	str	r3, [r7, #24]
 80099a8:	e025      	b.n	80099f6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10e      	bne.n	80099d0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	4a30      	ldr	r2, [pc, #192]	@ (8009a78 <HAL_SD_ConfigWideBusOperation+0x220>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d906      	bls.n	80099c8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	4a2c      	ldr	r2, [pc, #176]	@ (8009a70 <HAL_SD_ConfigWideBusOperation+0x218>)
 80099be:	fba2 2303 	umull	r2, r3, r2, r3
 80099c2:	0e1b      	lsrs	r3, r3, #24
 80099c4:	61bb      	str	r3, [r7, #24]
 80099c6:	e016      	b.n	80099f6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	695b      	ldr	r3, [r3, #20]
 80099cc:	61bb      	str	r3, [r7, #24]
 80099ce:	e012      	b.n	80099f6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	695b      	ldr	r3, [r3, #20]
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	69fa      	ldr	r2, [r7, #28]
 80099d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80099dc:	4a26      	ldr	r2, [pc, #152]	@ (8009a78 <HAL_SD_ConfigWideBusOperation+0x220>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d906      	bls.n	80099f0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	4a22      	ldr	r2, [pc, #136]	@ (8009a70 <HAL_SD_ConfigWideBusOperation+0x218>)
 80099e6:	fba2 2303 	umull	r2, r3, r2, r3
 80099ea:	0e1b      	lsrs	r3, r3, #24
 80099ec:	61bb      	str	r3, [r7, #24]
 80099ee:	e002      	b.n	80099f6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	695b      	ldr	r3, [r3, #20]
 80099f4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681c      	ldr	r4, [r3, #0]
 80099fa:	466a      	mov	r2, sp
 80099fc:	f107 0314 	add.w	r3, r7, #20
 8009a00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a04:	e882 0003 	stmia.w	r2, {r0, r1}
 8009a08:	f107 0308 	add.w	r3, r7, #8
 8009a0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f004 fcaa 	bl	800e368 <SDMMC_Init>
 8009a14:	e008      	b.n	8009a28 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a1a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009a30:	4618      	mov	r0, r3
 8009a32:	f004 fd77 	bl	800e524 <SDMMC_CmdBlockLength>
 8009a36:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a38:	6a3b      	ldr	r3, [r7, #32]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00c      	beq.n	8009a58 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a0a      	ldr	r2, [pc, #40]	@ (8009a6c <HAL_SD_ConfigWideBusOperation+0x214>)
 8009a44:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a4a:	6a3b      	ldr	r3, [r7, #32]
 8009a4c:	431a      	orrs	r2, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8009a60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	372c      	adds	r7, #44	@ 0x2c
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd90      	pop	{r4, r7, pc}
 8009a6c:	1fe00fff 	.word	0x1fe00fff
 8009a70:	55e63b89 	.word	0x55e63b89
 8009a74:	02faf080 	.word	0x02faf080
 8009a78:	017d7840 	.word	0x017d7840

08009a7c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b086      	sub	sp, #24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009a84:	2300      	movs	r3, #0
 8009a86:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009a88:	f107 030c 	add.w	r3, r7, #12
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fa40 	bl	8009f14 <SD_SendStatus>
 8009a94:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d005      	beq.n	8009aa8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	0a5b      	lsrs	r3, r3, #9
 8009aac:	f003 030f 	and.w	r3, r3, #15
 8009ab0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009ab2:	693b      	ldr	r3, [r7, #16]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3718      	adds	r7, #24
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b090      	sub	sp, #64	@ 0x40
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009ac8:	f7fa f9ae 	bl	8003e28 <HAL_GetTick>
 8009acc:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f004 fca1 	bl	800e41a <SDMMC_GetPowerState>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d102      	bne.n	8009ae4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009ade:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009ae2:	e0b5      	b.n	8009c50 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ae8:	2b03      	cmp	r3, #3
 8009aea:	d02e      	beq.n	8009b4a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f004 feec 	bl	800e8ce <SDMMC_CmdSendCID>
 8009af6:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d001      	beq.n	8009b02 <SD_InitCard+0x46>
    {
      return errorstate;
 8009afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b00:	e0a6      	b.n	8009c50 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2100      	movs	r1, #0
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f004 fccc 	bl	800e4a6 <SDMMC_GetResponse>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2104      	movs	r1, #4
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f004 fcc3 	bl	800e4a6 <SDMMC_GetResponse>
 8009b20:	4602      	mov	r2, r0
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2108      	movs	r1, #8
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f004 fcba 	bl	800e4a6 <SDMMC_GetResponse>
 8009b32:	4602      	mov	r2, r0
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	210c      	movs	r1, #12
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f004 fcb1 	bl	800e4a6 <SDMMC_GetResponse>
 8009b44:	4602      	mov	r2, r0
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	d01d      	beq.n	8009b8e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009b52:	e019      	b.n	8009b88 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f107 020a 	add.w	r2, r7, #10
 8009b5c:	4611      	mov	r1, r2
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f004 fef4 	bl	800e94c <SDMMC_CmdSetRelAdd>
 8009b64:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d001      	beq.n	8009b70 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b6e:	e06f      	b.n	8009c50 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009b70:	f7fa f95a 	bl	8003e28 <HAL_GetTick>
 8009b74:	4602      	mov	r2, r0
 8009b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d902      	bls.n	8009b88 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009b82:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009b86:	e063      	b.n	8009c50 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009b88:	897b      	ldrh	r3, [r7, #10]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d0e2      	beq.n	8009b54 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b92:	2b03      	cmp	r3, #3
 8009b94:	d036      	beq.n	8009c04 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009b96:	897b      	ldrh	r3, [r7, #10]
 8009b98:	461a      	mov	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ba6:	041b      	lsls	r3, r3, #16
 8009ba8:	4619      	mov	r1, r3
 8009baa:	4610      	mov	r0, r2
 8009bac:	f004 feae 	bl	800e90c <SDMMC_CmdSendCSD>
 8009bb0:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d001      	beq.n	8009bbc <SD_InitCard+0x100>
    {
      return errorstate;
 8009bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bba:	e049      	b.n	8009c50 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f004 fc6f 	bl	800e4a6 <SDMMC_GetResponse>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2104      	movs	r1, #4
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f004 fc66 	bl	800e4a6 <SDMMC_GetResponse>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2108      	movs	r1, #8
 8009be6:	4618      	mov	r0, r3
 8009be8:	f004 fc5d 	bl	800e4a6 <SDMMC_GetResponse>
 8009bec:	4602      	mov	r2, r0
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	210c      	movs	r1, #12
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f004 fc54 	bl	800e4a6 <SDMMC_GetResponse>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2104      	movs	r1, #4
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f004 fc4b 	bl	800e4a6 <SDMMC_GetResponse>
 8009c10:	4603      	mov	r3, r0
 8009c12:	0d1a      	lsrs	r2, r3, #20
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009c18:	f107 030c 	add.w	r3, r7, #12
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7ff fb8c 	bl	800933c <HAL_SD_GetCardCSD>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d002      	beq.n	8009c30 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c2a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009c2e:	e00f      	b.n	8009c50 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c38:	041b      	lsls	r3, r3, #16
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	f004 fd5d 	bl	800e6fc <SDMMC_CmdSelDesel>
 8009c42:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <SD_InitCard+0x192>
  {
    return errorstate;
 8009c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c4c:	e000      	b.n	8009c50 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3740      	adds	r7, #64	@ 0x40
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b086      	sub	sp, #24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c60:	2300      	movs	r3, #0
 8009c62:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009c64:	2300      	movs	r3, #0
 8009c66:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f004 fd66 	bl	800e742 <SDMMC_CmdGoIdleState>
 8009c76:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d001      	beq.n	8009c82 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	e072      	b.n	8009d68 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4618      	mov	r0, r3
 8009c88:	f004 fd79 	bl	800e77e <SDMMC_CmdOperCond>
 8009c8c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c94:	d10d      	bne.n	8009cb2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f004 fd4e 	bl	800e742 <SDMMC_CmdGoIdleState>
 8009ca6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d004      	beq.n	8009cb8 <SD_PowerON+0x60>
    {
      return errorstate;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	e05a      	b.n	8009d68 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d137      	bne.n	8009d30 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f004 fd79 	bl	800e7be <SDMMC_CmdAppCommand>
 8009ccc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d02d      	beq.n	8009d30 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009cd4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009cd8:	e046      	b.n	8009d68 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2100      	movs	r1, #0
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f004 fd6c 	bl	800e7be <SDMMC_CmdAppCommand>
 8009ce6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d001      	beq.n	8009cf2 <SD_PowerON+0x9a>
    {
      return errorstate;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	e03a      	b.n	8009d68 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	491e      	ldr	r1, [pc, #120]	@ (8009d70 <SD_PowerON+0x118>)
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f004 fd83 	bl	800e804 <SDMMC_CmdAppOperCommand>
 8009cfe:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d002      	beq.n	8009d0c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d06:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009d0a:	e02d      	b.n	8009d68 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2100      	movs	r1, #0
 8009d12:	4618      	mov	r0, r3
 8009d14:	f004 fbc7 	bl	800e4a6 <SDMMC_GetResponse>
 8009d18:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	0fdb      	lsrs	r3, r3, #31
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d101      	bne.n	8009d26 <SD_PowerON+0xce>
 8009d22:	2301      	movs	r3, #1
 8009d24:	e000      	b.n	8009d28 <SD_PowerON+0xd0>
 8009d26:	2300      	movs	r3, #0
 8009d28:	613b      	str	r3, [r7, #16]

    count++;
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d802      	bhi.n	8009d40 <SD_PowerON+0xe8>
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d0cc      	beq.n	8009cda <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d902      	bls.n	8009d50 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009d4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009d4e:	e00b      	b.n	8009d68 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d002      	beq.n	8009d66 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009d66:	2300      	movs	r3, #0
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3718      	adds	r7, #24
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	c1100000 	.word	0xc1100000

08009d74 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b08c      	sub	sp, #48	@ 0x30
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009d7e:	f7fa f853 	bl	8003e28 <HAL_GetTick>
 8009d82:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f004 fb89 	bl	800e4a6 <SDMMC_GetResponse>
 8009d94:	4603      	mov	r3, r0
 8009d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d9e:	d102      	bne.n	8009da6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009da0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009da4:	e0b0      	b.n	8009f08 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2140      	movs	r1, #64	@ 0x40
 8009dac:	4618      	mov	r0, r3
 8009dae:	f004 fbb9 	bl	800e524 <SDMMC_CmdBlockLength>
 8009db2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009db4:	6a3b      	ldr	r3, [r7, #32]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d005      	beq.n	8009dc6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009dc2:	6a3b      	ldr	r3, [r7, #32]
 8009dc4:	e0a0      	b.n	8009f08 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dce:	041b      	lsls	r3, r3, #16
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	4610      	mov	r0, r2
 8009dd4:	f004 fcf3 	bl	800e7be <SDMMC_CmdAppCommand>
 8009dd8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009dda:	6a3b      	ldr	r3, [r7, #32]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d005      	beq.n	8009dec <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009de8:	6a3b      	ldr	r3, [r7, #32]
 8009dea:	e08d      	b.n	8009f08 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009dec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009df0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009df2:	2340      	movs	r3, #64	@ 0x40
 8009df4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009df6:	2360      	movs	r3, #96	@ 0x60
 8009df8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009dfa:	2302      	movs	r3, #2
 8009dfc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009e02:	2301      	movs	r3, #1
 8009e04:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f107 0208 	add.w	r2, r7, #8
 8009e0e:	4611      	mov	r1, r2
 8009e10:	4618      	mov	r0, r3
 8009e12:	f004 fb5b 	bl	800e4cc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f004 fddb 	bl	800e9d6 <SDMMC_CmdStatusRegister>
 8009e20:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e22:	6a3b      	ldr	r3, [r7, #32]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d02b      	beq.n	8009e80 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009e30:	6a3b      	ldr	r3, [r7, #32]
 8009e32:	e069      	b.n	8009f08 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d013      	beq.n	8009e6a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009e42:	2300      	movs	r3, #0
 8009e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e46:	e00d      	b.n	8009e64 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f004 fab5 	bl	800e3bc <SDMMC_ReadFIFO>
 8009e52:	4602      	mov	r2, r0
 8009e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e56:	601a      	str	r2, [r3, #0]
        pData++;
 8009e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5a:	3304      	adds	r3, #4
 8009e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8009e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e60:	3301      	adds	r3, #1
 8009e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e66:	2b07      	cmp	r3, #7
 8009e68:	d9ee      	bls.n	8009e48 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e6a:	f7f9 ffdd 	bl	8003e28 <HAL_GetTick>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e72:	1ad3      	subs	r3, r2, r3
 8009e74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e78:	d102      	bne.n	8009e80 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009e7a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009e7e:	e043      	b.n	8009f08 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e86:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d0d2      	beq.n	8009e34 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e94:	f003 0308 	and.w	r3, r3, #8
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009e9c:	2308      	movs	r3, #8
 8009e9e:	e033      	b.n	8009f08 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ea6:	f003 0302 	and.w	r3, r3, #2
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009eae:	2302      	movs	r3, #2
 8009eb0:	e02a      	b.n	8009f08 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eb8:	f003 0320 	and.w	r3, r3, #32
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d017      	beq.n	8009ef0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009ec0:	2320      	movs	r3, #32
 8009ec2:	e021      	b.n	8009f08 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f004 fa77 	bl	800e3bc <SDMMC_ReadFIFO>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed2:	601a      	str	r2, [r3, #0]
    pData++;
 8009ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed6:	3304      	adds	r3, #4
 8009ed8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009eda:	f7f9 ffa5 	bl	8003e28 <HAL_GetTick>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee2:	1ad3      	subs	r3, r2, r3
 8009ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ee8:	d102      	bne.n	8009ef0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009eea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009eee:	e00b      	b.n	8009f08 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ef6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d1e2      	bne.n	8009ec4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a03      	ldr	r2, [pc, #12]	@ (8009f10 <SD_SendSDStatus+0x19c>)
 8009f04:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3730      	adds	r7, #48	@ 0x30
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	18000f3a 	.word	0x18000f3a

08009f14 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d102      	bne.n	8009f2a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009f24:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009f28:	e018      	b.n	8009f5c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f32:	041b      	lsls	r3, r3, #16
 8009f34:	4619      	mov	r1, r3
 8009f36:	4610      	mov	r0, r2
 8009f38:	f004 fd2a 	bl	800e990 <SDMMC_CmdSendStatus>
 8009f3c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d001      	beq.n	8009f48 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	e009      	b.n	8009f5c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f004 faa9 	bl	800e4a6 <SDMMC_GetResponse>
 8009f54:	4602      	mov	r2, r0
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	60fb      	str	r3, [r7, #12]
 8009f70:	2300      	movs	r3, #0
 8009f72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2100      	movs	r1, #0
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f004 fa93 	bl	800e4a6 <SDMMC_GetResponse>
 8009f80:	4603      	mov	r3, r0
 8009f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f8a:	d102      	bne.n	8009f92 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009f8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009f90:	e02f      	b.n	8009ff2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009f92:	f107 030c 	add.w	r3, r7, #12
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f879 	bl	800a090 <SD_FindSCR>
 8009f9e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d001      	beq.n	8009faa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	e023      	b.n	8009ff2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d01c      	beq.n	8009fee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fbc:	041b      	lsls	r3, r3, #16
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	4610      	mov	r0, r2
 8009fc2:	f004 fbfc 	bl	800e7be <SDMMC_CmdAppCommand>
 8009fc6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d001      	beq.n	8009fd2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	e00f      	b.n	8009ff2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2102      	movs	r1, #2
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f004 fc33 	bl	800e844 <SDMMC_CmdBusWidth>
 8009fde:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d001      	beq.n	8009fea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	e003      	b.n	8009ff2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009fea:	2300      	movs	r3, #0
 8009fec:	e001      	b.n	8009ff2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009fee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3718      	adds	r7, #24
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b086      	sub	sp, #24
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a002:	2300      	movs	r3, #0
 800a004:	60fb      	str	r3, [r7, #12]
 800a006:	2300      	movs	r3, #0
 800a008:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2100      	movs	r1, #0
 800a010:	4618      	mov	r0, r3
 800a012:	f004 fa48 	bl	800e4a6 <SDMMC_GetResponse>
 800a016:	4603      	mov	r3, r0
 800a018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a01c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a020:	d102      	bne.n	800a028 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a022:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a026:	e02f      	b.n	800a088 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a028:	f107 030c 	add.w	r3, r7, #12
 800a02c:	4619      	mov	r1, r3
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f82e 	bl	800a090 <SD_FindSCR>
 800a034:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d001      	beq.n	800a040 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	e023      	b.n	800a088 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a046:	2b00      	cmp	r3, #0
 800a048:	d01c      	beq.n	800a084 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a052:	041b      	lsls	r3, r3, #16
 800a054:	4619      	mov	r1, r3
 800a056:	4610      	mov	r0, r2
 800a058:	f004 fbb1 	bl	800e7be <SDMMC_CmdAppCommand>
 800a05c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	e00f      	b.n	800a088 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2100      	movs	r1, #0
 800a06e:	4618      	mov	r0, r3
 800a070:	f004 fbe8 	bl	800e844 <SDMMC_CmdBusWidth>
 800a074:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d001      	beq.n	800a080 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	e003      	b.n	800a088 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a080:	2300      	movs	r3, #0
 800a082:	e001      	b.n	800a088 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a084:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3718      	adds	r7, #24
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b08e      	sub	sp, #56	@ 0x38
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a09a:	f7f9 fec5 	bl	8003e28 <HAL_GetTick>
 800a09e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	60bb      	str	r3, [r7, #8]
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2108      	movs	r1, #8
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f004 fa34 	bl	800e524 <SDMMC_CmdBlockLength>
 800a0bc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d001      	beq.n	800a0c8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c6:	e0ad      	b.n	800a224 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0d0:	041b      	lsls	r3, r3, #16
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	f004 fb72 	bl	800e7be <SDMMC_CmdAppCommand>
 800a0da:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d001      	beq.n	800a0e6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e4:	e09e      	b.n	800a224 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a0e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a0ea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a0ec:	2308      	movs	r3, #8
 800a0ee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a0f0:	2330      	movs	r3, #48	@ 0x30
 800a0f2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f107 0210 	add.w	r2, r7, #16
 800a108:	4611      	mov	r1, r2
 800a10a:	4618      	mov	r0, r3
 800a10c:	f004 f9de 	bl	800e4cc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4618      	mov	r0, r3
 800a116:	f004 fbb8 	bl	800e88a <SDMMC_CmdSendSCR>
 800a11a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d027      	beq.n	800a172 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a124:	e07e      	b.n	800a224 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a12c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a130:	2b00      	cmp	r3, #0
 800a132:	d113      	bne.n	800a15c <SD_FindSCR+0xcc>
 800a134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a136:	2b00      	cmp	r3, #0
 800a138:	d110      	bne.n	800a15c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4618      	mov	r0, r3
 800a140:	f004 f93c 	bl	800e3bc <SDMMC_ReadFIFO>
 800a144:	4603      	mov	r3, r0
 800a146:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4618      	mov	r0, r3
 800a14e:	f004 f935 	bl	800e3bc <SDMMC_ReadFIFO>
 800a152:	4603      	mov	r3, r0
 800a154:	60fb      	str	r3, [r7, #12]
      index++;
 800a156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a158:	3301      	adds	r3, #1
 800a15a:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a15c:	f7f9 fe64 	bl	8003e28 <HAL_GetTick>
 800a160:	4602      	mov	r2, r0
 800a162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a16a:	d102      	bne.n	800a172 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a16c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a170:	e058      	b.n	800a224 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a178:	f240 532a 	movw	r3, #1322	@ 0x52a
 800a17c:	4013      	ands	r3, r2
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d0d1      	beq.n	800a126 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a188:	f003 0308 	and.w	r3, r3, #8
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d005      	beq.n	800a19c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2208      	movs	r2, #8
 800a196:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a198:	2308      	movs	r3, #8
 800a19a:	e043      	b.n	800a224 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1a2:	f003 0302 	and.w	r3, r3, #2
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d005      	beq.n	800a1b6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a1b2:	2302      	movs	r3, #2
 800a1b4:	e036      	b.n	800a224 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1bc:	f003 0320 	and.w	r3, r3, #32
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d005      	beq.n	800a1d0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2220      	movs	r2, #32
 800a1ca:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a1cc:	2320      	movs	r3, #32
 800a1ce:	e029      	b.n	800a224 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a15      	ldr	r2, [pc, #84]	@ (800a22c <SD_FindSCR+0x19c>)
 800a1d6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	061a      	lsls	r2, r3, #24
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	021b      	lsls	r3, r3, #8
 800a1e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a1e4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	0a1b      	lsrs	r3, r3, #8
 800a1ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a1ee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	0e1b      	lsrs	r3, r3, #24
 800a1f4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1f8:	601a      	str	r2, [r3, #0]
    scr++;
 800a1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1fc:	3304      	adds	r3, #4
 800a1fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	061a      	lsls	r2, r3, #24
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	021b      	lsls	r3, r3, #8
 800a208:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a20c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	0a1b      	lsrs	r3, r3, #8
 800a212:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a216:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	0e1b      	lsrs	r3, r3, #24
 800a21c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a21e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a220:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3738      	adds	r7, #56	@ 0x38
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	18000f3a 	.word	0x18000f3a

0800a230 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a23c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a242:	2b1f      	cmp	r3, #31
 800a244:	d936      	bls.n	800a2b4 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800a246:	2300      	movs	r3, #0
 800a248:	617b      	str	r3, [r7, #20]
 800a24a:	e027      	b.n	800a29c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4618      	mov	r0, r3
 800a252:	f004 f8b3 	bl	800e3bc <SDMMC_ReadFIFO>
 800a256:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	b2da      	uxtb	r2, r3
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	3301      	adds	r3, #1
 800a264:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	0a1b      	lsrs	r3, r3, #8
 800a26a:	b2da      	uxtb	r2, r3
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	3301      	adds	r3, #1
 800a274:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	0c1b      	lsrs	r3, r3, #16
 800a27a:	b2da      	uxtb	r2, r3
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	3301      	adds	r3, #1
 800a284:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	0e1b      	lsrs	r3, r3, #24
 800a28a:	b2da      	uxtb	r2, r3
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	3301      	adds	r3, #1
 800a294:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	3301      	adds	r3, #1
 800a29a:	617b      	str	r3, [r7, #20]
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	2b07      	cmp	r3, #7
 800a2a0:	d9d4      	bls.n	800a24c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	693a      	ldr	r2, [r7, #16]
 800a2a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ac:	f1a3 0220 	sub.w	r2, r3, #32
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800a2b4:	bf00      	nop
 800a2b6:	3718      	adds	r7, #24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	69db      	ldr	r3, [r3, #28]
 800a2c8:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	2b1f      	cmp	r3, #31
 800a2d0:	d93a      	bls.n	800a348 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	617b      	str	r3, [r7, #20]
 800a2d6:	e02b      	b.n	800a330 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	021a      	lsls	r2, r3, #8
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	041a      	lsls	r2, r3, #16
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	3301      	adds	r3, #1
 800a306:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	061a      	lsls	r2, r3, #24
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	4313      	orrs	r3, r2
 800a312:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	3301      	adds	r3, #1
 800a318:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f107 020c 	add.w	r2, r7, #12
 800a322:	4611      	mov	r1, r2
 800a324:	4618      	mov	r0, r3
 800a326:	f004 f856 	bl	800e3d6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	3301      	adds	r3, #1
 800a32e:	617b      	str	r3, [r7, #20]
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	2b07      	cmp	r3, #7
 800a334:	d9d0      	bls.n	800a2d8 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a1b      	ldr	r3, [r3, #32]
 800a340:	f1a3 0220 	sub.w	r2, r3, #32
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	621a      	str	r2, [r3, #32]
  }
}
 800a348:	bf00      	nop
 800a34a:	3718      	adds	r7, #24
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a358:	bf00      	nop
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a36c:	bf00      	nop
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d101      	bne.n	800a3b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e049      	b.n	800a446 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d106      	bne.n	800a3cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f841 	bl	800a44e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2202      	movs	r2, #2
 800a3d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	3304      	adds	r3, #4
 800a3dc:	4619      	mov	r1, r3
 800a3de:	4610      	mov	r0, r2
 800a3e0:	f000 fad0 	bl	800a984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2201      	movs	r2, #1
 800a430:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3708      	adds	r7, #8
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a44e:	b480      	push	{r7}
 800a450:	b083      	sub	sp, #12
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a456:	bf00      	nop
 800a458:	370c      	adds	r7, #12
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr
	...

0800a464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a472:	b2db      	uxtb	r3, r3
 800a474:	2b01      	cmp	r3, #1
 800a476:	d001      	beq.n	800a47c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	e054      	b.n	800a526 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2202      	movs	r2, #2
 800a480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	68da      	ldr	r2, [r3, #12]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f042 0201 	orr.w	r2, r2, #1
 800a492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a26      	ldr	r2, [pc, #152]	@ (800a534 <HAL_TIM_Base_Start_IT+0xd0>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d022      	beq.n	800a4e4 <HAL_TIM_Base_Start_IT+0x80>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4a6:	d01d      	beq.n	800a4e4 <HAL_TIM_Base_Start_IT+0x80>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a22      	ldr	r2, [pc, #136]	@ (800a538 <HAL_TIM_Base_Start_IT+0xd4>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d018      	beq.n	800a4e4 <HAL_TIM_Base_Start_IT+0x80>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a21      	ldr	r2, [pc, #132]	@ (800a53c <HAL_TIM_Base_Start_IT+0xd8>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d013      	beq.n	800a4e4 <HAL_TIM_Base_Start_IT+0x80>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a1f      	ldr	r2, [pc, #124]	@ (800a540 <HAL_TIM_Base_Start_IT+0xdc>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d00e      	beq.n	800a4e4 <HAL_TIM_Base_Start_IT+0x80>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a1e      	ldr	r2, [pc, #120]	@ (800a544 <HAL_TIM_Base_Start_IT+0xe0>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d009      	beq.n	800a4e4 <HAL_TIM_Base_Start_IT+0x80>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a1c      	ldr	r2, [pc, #112]	@ (800a548 <HAL_TIM_Base_Start_IT+0xe4>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d004      	beq.n	800a4e4 <HAL_TIM_Base_Start_IT+0x80>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a1b      	ldr	r2, [pc, #108]	@ (800a54c <HAL_TIM_Base_Start_IT+0xe8>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d115      	bne.n	800a510 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	689a      	ldr	r2, [r3, #8]
 800a4ea:	4b19      	ldr	r3, [pc, #100]	@ (800a550 <HAL_TIM_Base_Start_IT+0xec>)
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2b06      	cmp	r3, #6
 800a4f4:	d015      	beq.n	800a522 <HAL_TIM_Base_Start_IT+0xbe>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4fc:	d011      	beq.n	800a522 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f042 0201 	orr.w	r2, r2, #1
 800a50c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a50e:	e008      	b.n	800a522 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f042 0201 	orr.w	r2, r2, #1
 800a51e:	601a      	str	r2, [r3, #0]
 800a520:	e000      	b.n	800a524 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a522:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3714      	adds	r7, #20
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	40010000 	.word	0x40010000
 800a538:	40000400 	.word	0x40000400
 800a53c:	40000800 	.word	0x40000800
 800a540:	40000c00 	.word	0x40000c00
 800a544:	40010400 	.word	0x40010400
 800a548:	40001800 	.word	0x40001800
 800a54c:	40014000 	.word	0x40014000
 800a550:	00010007 	.word	0x00010007

0800a554 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d101      	bne.n	800a566 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	e049      	b.n	800a5fa <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d106      	bne.n	800a580 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f7f7 f812 	bl	80015a4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2202      	movs	r2, #2
 800a584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	3304      	adds	r3, #4
 800a590:	4619      	mov	r1, r3
 800a592:	4610      	mov	r0, r2
 800a594:	f000 f9f6 	bl	800a984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3708      	adds	r7, #8
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b082      	sub	sp, #8
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	f003 0302 	and.w	r3, r3, #2
 800a614:	2b02      	cmp	r3, #2
 800a616:	d122      	bne.n	800a65e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	f003 0302 	and.w	r3, r3, #2
 800a622:	2b02      	cmp	r3, #2
 800a624:	d11b      	bne.n	800a65e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f06f 0202 	mvn.w	r2, #2
 800a62e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	699b      	ldr	r3, [r3, #24]
 800a63c:	f003 0303 	and.w	r3, r3, #3
 800a640:	2b00      	cmp	r3, #0
 800a642:	d003      	beq.n	800a64c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f97f 	bl	800a948 <HAL_TIM_IC_CaptureCallback>
 800a64a:	e005      	b.n	800a658 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 f971 	bl	800a934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 f982 	bl	800a95c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	f003 0304 	and.w	r3, r3, #4
 800a668:	2b04      	cmp	r3, #4
 800a66a:	d122      	bne.n	800a6b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	f003 0304 	and.w	r3, r3, #4
 800a676:	2b04      	cmp	r3, #4
 800a678:	d11b      	bne.n	800a6b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f06f 0204 	mvn.w	r2, #4
 800a682:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2202      	movs	r2, #2
 800a688:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	699b      	ldr	r3, [r3, #24]
 800a690:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a694:	2b00      	cmp	r3, #0
 800a696:	d003      	beq.n	800a6a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 f955 	bl	800a948 <HAL_TIM_IC_CaptureCallback>
 800a69e:	e005      	b.n	800a6ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 f947 	bl	800a934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f958 	bl	800a95c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	691b      	ldr	r3, [r3, #16]
 800a6b8:	f003 0308 	and.w	r3, r3, #8
 800a6bc:	2b08      	cmp	r3, #8
 800a6be:	d122      	bne.n	800a706 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	f003 0308 	and.w	r3, r3, #8
 800a6ca:	2b08      	cmp	r3, #8
 800a6cc:	d11b      	bne.n	800a706 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f06f 0208 	mvn.w	r2, #8
 800a6d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2204      	movs	r2, #4
 800a6dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	69db      	ldr	r3, [r3, #28]
 800a6e4:	f003 0303 	and.w	r3, r3, #3
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d003      	beq.n	800a6f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 f92b 	bl	800a948 <HAL_TIM_IC_CaptureCallback>
 800a6f2:	e005      	b.n	800a700 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f91d 	bl	800a934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f92e 	bl	800a95c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	f003 0310 	and.w	r3, r3, #16
 800a710:	2b10      	cmp	r3, #16
 800a712:	d122      	bne.n	800a75a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	f003 0310 	and.w	r3, r3, #16
 800a71e:	2b10      	cmp	r3, #16
 800a720:	d11b      	bne.n	800a75a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f06f 0210 	mvn.w	r2, #16
 800a72a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2208      	movs	r2, #8
 800a730:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	69db      	ldr	r3, [r3, #28]
 800a738:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d003      	beq.n	800a748 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f901 	bl	800a948 <HAL_TIM_IC_CaptureCallback>
 800a746:	e005      	b.n	800a754 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 f8f3 	bl	800a934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f904 	bl	800a95c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	691b      	ldr	r3, [r3, #16]
 800a760:	f003 0301 	and.w	r3, r3, #1
 800a764:	2b01      	cmp	r3, #1
 800a766:	d10e      	bne.n	800a786 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	68db      	ldr	r3, [r3, #12]
 800a76e:	f003 0301 	and.w	r3, r3, #1
 800a772:	2b01      	cmp	r3, #1
 800a774:	d107      	bne.n	800a786 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f06f 0201 	mvn.w	r2, #1
 800a77e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f7f6 fd37 	bl	80011f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a790:	2b80      	cmp	r3, #128	@ 0x80
 800a792:	d10e      	bne.n	800a7b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a79e:	2b80      	cmp	r3, #128	@ 0x80
 800a7a0:	d107      	bne.n	800a7b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a7aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fcf1 	bl	800b194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	691b      	ldr	r3, [r3, #16]
 800a7b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7c0:	d10e      	bne.n	800a7e0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7cc:	2b80      	cmp	r3, #128	@ 0x80
 800a7ce:	d107      	bne.n	800a7e0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a7d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 fce4 	bl	800b1a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7ea:	2b40      	cmp	r3, #64	@ 0x40
 800a7ec:	d10e      	bne.n	800a80c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7f8:	2b40      	cmp	r3, #64	@ 0x40
 800a7fa:	d107      	bne.n	800a80c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 f8b2 	bl	800a970 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	f003 0320 	and.w	r3, r3, #32
 800a816:	2b20      	cmp	r3, #32
 800a818:	d10e      	bne.n	800a838 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	f003 0320 	and.w	r3, r3, #32
 800a824:	2b20      	cmp	r3, #32
 800a826:	d107      	bne.n	800a838 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f06f 0220 	mvn.w	r2, #32
 800a830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 fca4 	bl	800b180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a838:	bf00      	nop
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b086      	sub	sp, #24
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a84c:	2300      	movs	r3, #0
 800a84e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a856:	2b01      	cmp	r3, #1
 800a858:	d101      	bne.n	800a85e <HAL_TIM_OC_ConfigChannel+0x1e>
 800a85a:	2302      	movs	r3, #2
 800a85c:	e066      	b.n	800a92c <HAL_TIM_OC_ConfigChannel+0xec>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2201      	movs	r2, #1
 800a862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2b14      	cmp	r3, #20
 800a86a:	d857      	bhi.n	800a91c <HAL_TIM_OC_ConfigChannel+0xdc>
 800a86c:	a201      	add	r2, pc, #4	@ (adr r2, 800a874 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a872:	bf00      	nop
 800a874:	0800a8c9 	.word	0x0800a8c9
 800a878:	0800a91d 	.word	0x0800a91d
 800a87c:	0800a91d 	.word	0x0800a91d
 800a880:	0800a91d 	.word	0x0800a91d
 800a884:	0800a8d7 	.word	0x0800a8d7
 800a888:	0800a91d 	.word	0x0800a91d
 800a88c:	0800a91d 	.word	0x0800a91d
 800a890:	0800a91d 	.word	0x0800a91d
 800a894:	0800a8e5 	.word	0x0800a8e5
 800a898:	0800a91d 	.word	0x0800a91d
 800a89c:	0800a91d 	.word	0x0800a91d
 800a8a0:	0800a91d 	.word	0x0800a91d
 800a8a4:	0800a8f3 	.word	0x0800a8f3
 800a8a8:	0800a91d 	.word	0x0800a91d
 800a8ac:	0800a91d 	.word	0x0800a91d
 800a8b0:	0800a91d 	.word	0x0800a91d
 800a8b4:	0800a901 	.word	0x0800a901
 800a8b8:	0800a91d 	.word	0x0800a91d
 800a8bc:	0800a91d 	.word	0x0800a91d
 800a8c0:	0800a91d 	.word	0x0800a91d
 800a8c4:	0800a90f 	.word	0x0800a90f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68b9      	ldr	r1, [r7, #8]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 f8f2 	bl	800aab8 <TIM_OC1_SetConfig>
      break;
 800a8d4:	e025      	b.n	800a922 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	68b9      	ldr	r1, [r7, #8]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f000 f97b 	bl	800abd8 <TIM_OC2_SetConfig>
      break;
 800a8e2:	e01e      	b.n	800a922 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	68b9      	ldr	r1, [r7, #8]
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f000 f9fe 	bl	800acec <TIM_OC3_SetConfig>
      break;
 800a8f0:	e017      	b.n	800a922 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68b9      	ldr	r1, [r7, #8]
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f000 fa7f 	bl	800adfc <TIM_OC4_SetConfig>
      break;
 800a8fe:	e010      	b.n	800a922 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	68b9      	ldr	r1, [r7, #8]
 800a906:	4618      	mov	r0, r3
 800a908:	f000 fae2 	bl	800aed0 <TIM_OC5_SetConfig>
      break;
 800a90c:	e009      	b.n	800a922 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68b9      	ldr	r1, [r7, #8]
 800a914:	4618      	mov	r0, r3
 800a916:	f000 fb3f 	bl	800af98 <TIM_OC6_SetConfig>
      break;
 800a91a:	e002      	b.n	800a922 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a91c:	2301      	movs	r3, #1
 800a91e:	75fb      	strb	r3, [r7, #23]
      break;
 800a920:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2200      	movs	r2, #0
 800a926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a92a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3718      	adds	r7, #24
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a950:	bf00      	nop
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a40      	ldr	r2, [pc, #256]	@ (800aa98 <TIM_Base_SetConfig+0x114>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d013      	beq.n	800a9c4 <TIM_Base_SetConfig+0x40>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9a2:	d00f      	beq.n	800a9c4 <TIM_Base_SetConfig+0x40>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a3d      	ldr	r2, [pc, #244]	@ (800aa9c <TIM_Base_SetConfig+0x118>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d00b      	beq.n	800a9c4 <TIM_Base_SetConfig+0x40>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a3c      	ldr	r2, [pc, #240]	@ (800aaa0 <TIM_Base_SetConfig+0x11c>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d007      	beq.n	800a9c4 <TIM_Base_SetConfig+0x40>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a3b      	ldr	r2, [pc, #236]	@ (800aaa4 <TIM_Base_SetConfig+0x120>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d003      	beq.n	800a9c4 <TIM_Base_SetConfig+0x40>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a3a      	ldr	r2, [pc, #232]	@ (800aaa8 <TIM_Base_SetConfig+0x124>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d108      	bne.n	800a9d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a2f      	ldr	r2, [pc, #188]	@ (800aa98 <TIM_Base_SetConfig+0x114>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d01f      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9e4:	d01b      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4a2c      	ldr	r2, [pc, #176]	@ (800aa9c <TIM_Base_SetConfig+0x118>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d017      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a2b      	ldr	r2, [pc, #172]	@ (800aaa0 <TIM_Base_SetConfig+0x11c>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d013      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4a2a      	ldr	r2, [pc, #168]	@ (800aaa4 <TIM_Base_SetConfig+0x120>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d00f      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a29      	ldr	r2, [pc, #164]	@ (800aaa8 <TIM_Base_SetConfig+0x124>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d00b      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4a28      	ldr	r2, [pc, #160]	@ (800aaac <TIM_Base_SetConfig+0x128>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d007      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a27      	ldr	r2, [pc, #156]	@ (800aab0 <TIM_Base_SetConfig+0x12c>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d003      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a26      	ldr	r2, [pc, #152]	@ (800aab4 <TIM_Base_SetConfig+0x130>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d108      	bne.n	800aa30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	695b      	ldr	r3, [r3, #20]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	689a      	ldr	r2, [r3, #8]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a10      	ldr	r2, [pc, #64]	@ (800aa98 <TIM_Base_SetConfig+0x114>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d00f      	beq.n	800aa7c <TIM_Base_SetConfig+0xf8>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a12      	ldr	r2, [pc, #72]	@ (800aaa8 <TIM_Base_SetConfig+0x124>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d00b      	beq.n	800aa7c <TIM_Base_SetConfig+0xf8>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a11      	ldr	r2, [pc, #68]	@ (800aaac <TIM_Base_SetConfig+0x128>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d007      	beq.n	800aa7c <TIM_Base_SetConfig+0xf8>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4a10      	ldr	r2, [pc, #64]	@ (800aab0 <TIM_Base_SetConfig+0x12c>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d003      	beq.n	800aa7c <TIM_Base_SetConfig+0xf8>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a0f      	ldr	r2, [pc, #60]	@ (800aab4 <TIM_Base_SetConfig+0x130>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d103      	bne.n	800aa84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	691a      	ldr	r2, [r3, #16]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	615a      	str	r2, [r3, #20]
}
 800aa8a:	bf00      	nop
 800aa8c:	3714      	adds	r7, #20
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	40010000 	.word	0x40010000
 800aa9c:	40000400 	.word	0x40000400
 800aaa0:	40000800 	.word	0x40000800
 800aaa4:	40000c00 	.word	0x40000c00
 800aaa8:	40010400 	.word	0x40010400
 800aaac:	40014000 	.word	0x40014000
 800aab0:	40014400 	.word	0x40014400
 800aab4:	40014800 	.word	0x40014800

0800aab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b087      	sub	sp, #28
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a1b      	ldr	r3, [r3, #32]
 800aac6:	f023 0201 	bic.w	r2, r3, #1
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6a1b      	ldr	r3, [r3, #32]
 800aad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	699b      	ldr	r3, [r3, #24]
 800aade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	4b37      	ldr	r3, [pc, #220]	@ (800abc0 <TIM_OC1_SetConfig+0x108>)
 800aae4:	4013      	ands	r3, r2
 800aae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f023 0303 	bic.w	r3, r3, #3
 800aaee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	f023 0302 	bic.w	r3, r3, #2
 800ab00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	697a      	ldr	r2, [r7, #20]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4a2d      	ldr	r2, [pc, #180]	@ (800abc4 <TIM_OC1_SetConfig+0x10c>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d00f      	beq.n	800ab34 <TIM_OC1_SetConfig+0x7c>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4a2c      	ldr	r2, [pc, #176]	@ (800abc8 <TIM_OC1_SetConfig+0x110>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d00b      	beq.n	800ab34 <TIM_OC1_SetConfig+0x7c>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a2b      	ldr	r2, [pc, #172]	@ (800abcc <TIM_OC1_SetConfig+0x114>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d007      	beq.n	800ab34 <TIM_OC1_SetConfig+0x7c>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a2a      	ldr	r2, [pc, #168]	@ (800abd0 <TIM_OC1_SetConfig+0x118>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d003      	beq.n	800ab34 <TIM_OC1_SetConfig+0x7c>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a29      	ldr	r2, [pc, #164]	@ (800abd4 <TIM_OC1_SetConfig+0x11c>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d10c      	bne.n	800ab4e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	f023 0308 	bic.w	r3, r3, #8
 800ab3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	697a      	ldr	r2, [r7, #20]
 800ab42:	4313      	orrs	r3, r2
 800ab44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	f023 0304 	bic.w	r3, r3, #4
 800ab4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a1c      	ldr	r2, [pc, #112]	@ (800abc4 <TIM_OC1_SetConfig+0x10c>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d00f      	beq.n	800ab76 <TIM_OC1_SetConfig+0xbe>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4a1b      	ldr	r2, [pc, #108]	@ (800abc8 <TIM_OC1_SetConfig+0x110>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d00b      	beq.n	800ab76 <TIM_OC1_SetConfig+0xbe>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4a1a      	ldr	r2, [pc, #104]	@ (800abcc <TIM_OC1_SetConfig+0x114>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d007      	beq.n	800ab76 <TIM_OC1_SetConfig+0xbe>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4a19      	ldr	r2, [pc, #100]	@ (800abd0 <TIM_OC1_SetConfig+0x118>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d003      	beq.n	800ab76 <TIM_OC1_SetConfig+0xbe>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a18      	ldr	r2, [pc, #96]	@ (800abd4 <TIM_OC1_SetConfig+0x11c>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d111      	bne.n	800ab9a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ab84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	695b      	ldr	r3, [r3, #20]
 800ab8a:	693a      	ldr	r2, [r7, #16]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	693a      	ldr	r2, [r7, #16]
 800ab9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	685a      	ldr	r2, [r3, #4]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	697a      	ldr	r2, [r7, #20]
 800abb2:	621a      	str	r2, [r3, #32]
}
 800abb4:	bf00      	nop
 800abb6:	371c      	adds	r7, #28
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr
 800abc0:	fffeff8f 	.word	0xfffeff8f
 800abc4:	40010000 	.word	0x40010000
 800abc8:	40010400 	.word	0x40010400
 800abcc:	40014000 	.word	0x40014000
 800abd0:	40014400 	.word	0x40014400
 800abd4:	40014800 	.word	0x40014800

0800abd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abd8:	b480      	push	{r7}
 800abda:	b087      	sub	sp, #28
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a1b      	ldr	r3, [r3, #32]
 800abe6:	f023 0210 	bic.w	r2, r3, #16
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6a1b      	ldr	r3, [r3, #32]
 800abf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	699b      	ldr	r3, [r3, #24]
 800abfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	4b34      	ldr	r3, [pc, #208]	@ (800acd4 <TIM_OC2_SetConfig+0xfc>)
 800ac04:	4013      	ands	r3, r2
 800ac06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	021b      	lsls	r3, r3, #8
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	f023 0320 	bic.w	r3, r3, #32
 800ac22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	011b      	lsls	r3, r3, #4
 800ac2a:	697a      	ldr	r2, [r7, #20]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a29      	ldr	r2, [pc, #164]	@ (800acd8 <TIM_OC2_SetConfig+0x100>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d003      	beq.n	800ac40 <TIM_OC2_SetConfig+0x68>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a28      	ldr	r2, [pc, #160]	@ (800acdc <TIM_OC2_SetConfig+0x104>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d10d      	bne.n	800ac5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	011b      	lsls	r3, r3, #4
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a1e      	ldr	r2, [pc, #120]	@ (800acd8 <TIM_OC2_SetConfig+0x100>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d00f      	beq.n	800ac84 <TIM_OC2_SetConfig+0xac>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a1d      	ldr	r2, [pc, #116]	@ (800acdc <TIM_OC2_SetConfig+0x104>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d00b      	beq.n	800ac84 <TIM_OC2_SetConfig+0xac>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a1c      	ldr	r2, [pc, #112]	@ (800ace0 <TIM_OC2_SetConfig+0x108>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d007      	beq.n	800ac84 <TIM_OC2_SetConfig+0xac>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a1b      	ldr	r2, [pc, #108]	@ (800ace4 <TIM_OC2_SetConfig+0x10c>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d003      	beq.n	800ac84 <TIM_OC2_SetConfig+0xac>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a1a      	ldr	r2, [pc, #104]	@ (800ace8 <TIM_OC2_SetConfig+0x110>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d113      	bne.n	800acac <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ac8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ac92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	695b      	ldr	r3, [r3, #20]
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	697a      	ldr	r2, [r7, #20]
 800acc4:	621a      	str	r2, [r3, #32]
}
 800acc6:	bf00      	nop
 800acc8:	371c      	adds	r7, #28
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	feff8fff 	.word	0xfeff8fff
 800acd8:	40010000 	.word	0x40010000
 800acdc:	40010400 	.word	0x40010400
 800ace0:	40014000 	.word	0x40014000
 800ace4:	40014400 	.word	0x40014400
 800ace8:	40014800 	.word	0x40014800

0800acec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800acec:	b480      	push	{r7}
 800acee:	b087      	sub	sp, #28
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a1b      	ldr	r3, [r3, #32]
 800acfa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6a1b      	ldr	r3, [r3, #32]
 800ad06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	69db      	ldr	r3, [r3, #28]
 800ad12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	4b33      	ldr	r3, [pc, #204]	@ (800ade4 <TIM_OC3_SetConfig+0xf8>)
 800ad18:	4013      	ands	r3, r2
 800ad1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f023 0303 	bic.w	r3, r3, #3
 800ad22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ad34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	021b      	lsls	r3, r3, #8
 800ad3c:	697a      	ldr	r2, [r7, #20]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4a28      	ldr	r2, [pc, #160]	@ (800ade8 <TIM_OC3_SetConfig+0xfc>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d003      	beq.n	800ad52 <TIM_OC3_SetConfig+0x66>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4a27      	ldr	r2, [pc, #156]	@ (800adec <TIM_OC3_SetConfig+0x100>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d10d      	bne.n	800ad6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ad58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	021b      	lsls	r3, r3, #8
 800ad60:	697a      	ldr	r2, [r7, #20]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ad6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4a1d      	ldr	r2, [pc, #116]	@ (800ade8 <TIM_OC3_SetConfig+0xfc>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d00f      	beq.n	800ad96 <TIM_OC3_SetConfig+0xaa>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4a1c      	ldr	r2, [pc, #112]	@ (800adec <TIM_OC3_SetConfig+0x100>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d00b      	beq.n	800ad96 <TIM_OC3_SetConfig+0xaa>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4a1b      	ldr	r2, [pc, #108]	@ (800adf0 <TIM_OC3_SetConfig+0x104>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d007      	beq.n	800ad96 <TIM_OC3_SetConfig+0xaa>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4a1a      	ldr	r2, [pc, #104]	@ (800adf4 <TIM_OC3_SetConfig+0x108>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d003      	beq.n	800ad96 <TIM_OC3_SetConfig+0xaa>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	4a19      	ldr	r2, [pc, #100]	@ (800adf8 <TIM_OC3_SetConfig+0x10c>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d113      	bne.n	800adbe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ada4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	695b      	ldr	r3, [r3, #20]
 800adaa:	011b      	lsls	r3, r3, #4
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	4313      	orrs	r3, r2
 800adb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	699b      	ldr	r3, [r3, #24]
 800adb6:	011b      	lsls	r3, r3, #4
 800adb8:	693a      	ldr	r2, [r7, #16]
 800adba:	4313      	orrs	r3, r2
 800adbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	697a      	ldr	r2, [r7, #20]
 800add6:	621a      	str	r2, [r3, #32]
}
 800add8:	bf00      	nop
 800adda:	371c      	adds	r7, #28
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr
 800ade4:	fffeff8f 	.word	0xfffeff8f
 800ade8:	40010000 	.word	0x40010000
 800adec:	40010400 	.word	0x40010400
 800adf0:	40014000 	.word	0x40014000
 800adf4:	40014400 	.word	0x40014400
 800adf8:	40014800 	.word	0x40014800

0800adfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b087      	sub	sp, #28
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6a1b      	ldr	r3, [r3, #32]
 800ae0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a1b      	ldr	r3, [r3, #32]
 800ae16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	69db      	ldr	r3, [r3, #28]
 800ae22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae24:	68fa      	ldr	r2, [r7, #12]
 800ae26:	4b24      	ldr	r3, [pc, #144]	@ (800aeb8 <TIM_OC4_SetConfig+0xbc>)
 800ae28:	4013      	ands	r3, r2
 800ae2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	021b      	lsls	r3, r3, #8
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ae46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	031b      	lsls	r3, r3, #12
 800ae4e:	693a      	ldr	r2, [r7, #16]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a19      	ldr	r2, [pc, #100]	@ (800aebc <TIM_OC4_SetConfig+0xc0>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d00f      	beq.n	800ae7c <TIM_OC4_SetConfig+0x80>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4a18      	ldr	r2, [pc, #96]	@ (800aec0 <TIM_OC4_SetConfig+0xc4>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d00b      	beq.n	800ae7c <TIM_OC4_SetConfig+0x80>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a17      	ldr	r2, [pc, #92]	@ (800aec4 <TIM_OC4_SetConfig+0xc8>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d007      	beq.n	800ae7c <TIM_OC4_SetConfig+0x80>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a16      	ldr	r2, [pc, #88]	@ (800aec8 <TIM_OC4_SetConfig+0xcc>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d003      	beq.n	800ae7c <TIM_OC4_SetConfig+0x80>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a15      	ldr	r2, [pc, #84]	@ (800aecc <TIM_OC4_SetConfig+0xd0>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d109      	bne.n	800ae90 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	695b      	ldr	r3, [r3, #20]
 800ae88:	019b      	lsls	r3, r3, #6
 800ae8a:	697a      	ldr	r2, [r7, #20]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	685a      	ldr	r2, [r3, #4]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	693a      	ldr	r2, [r7, #16]
 800aea8:	621a      	str	r2, [r3, #32]
}
 800aeaa:	bf00      	nop
 800aeac:	371c      	adds	r7, #28
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	feff8fff 	.word	0xfeff8fff
 800aebc:	40010000 	.word	0x40010000
 800aec0:	40010400 	.word	0x40010400
 800aec4:	40014000 	.word	0x40014000
 800aec8:	40014400 	.word	0x40014400
 800aecc:	40014800 	.word	0x40014800

0800aed0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b087      	sub	sp, #28
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6a1b      	ldr	r3, [r3, #32]
 800aede:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	4b21      	ldr	r3, [pc, #132]	@ (800af80 <TIM_OC5_SetConfig+0xb0>)
 800aefc:	4013      	ands	r3, r2
 800aefe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	4313      	orrs	r3, r2
 800af08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800af10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	041b      	lsls	r3, r3, #16
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4a18      	ldr	r2, [pc, #96]	@ (800af84 <TIM_OC5_SetConfig+0xb4>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d00f      	beq.n	800af46 <TIM_OC5_SetConfig+0x76>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4a17      	ldr	r2, [pc, #92]	@ (800af88 <TIM_OC5_SetConfig+0xb8>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d00b      	beq.n	800af46 <TIM_OC5_SetConfig+0x76>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a16      	ldr	r2, [pc, #88]	@ (800af8c <TIM_OC5_SetConfig+0xbc>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d007      	beq.n	800af46 <TIM_OC5_SetConfig+0x76>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a15      	ldr	r2, [pc, #84]	@ (800af90 <TIM_OC5_SetConfig+0xc0>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d003      	beq.n	800af46 <TIM_OC5_SetConfig+0x76>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4a14      	ldr	r2, [pc, #80]	@ (800af94 <TIM_OC5_SetConfig+0xc4>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d109      	bne.n	800af5a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	695b      	ldr	r3, [r3, #20]
 800af52:	021b      	lsls	r3, r3, #8
 800af54:	697a      	ldr	r2, [r7, #20]
 800af56:	4313      	orrs	r3, r2
 800af58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	697a      	ldr	r2, [r7, #20]
 800af5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	685a      	ldr	r2, [r3, #4]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	693a      	ldr	r2, [r7, #16]
 800af72:	621a      	str	r2, [r3, #32]
}
 800af74:	bf00      	nop
 800af76:	371c      	adds	r7, #28
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	fffeff8f 	.word	0xfffeff8f
 800af84:	40010000 	.word	0x40010000
 800af88:	40010400 	.word	0x40010400
 800af8c:	40014000 	.word	0x40014000
 800af90:	40014400 	.word	0x40014400
 800af94:	40014800 	.word	0x40014800

0800af98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800af98:	b480      	push	{r7}
 800af9a:	b087      	sub	sp, #28
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6a1b      	ldr	r3, [r3, #32]
 800afb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	4b22      	ldr	r3, [pc, #136]	@ (800b04c <TIM_OC6_SetConfig+0xb4>)
 800afc4:	4013      	ands	r3, r2
 800afc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	021b      	lsls	r3, r3, #8
 800afce:	68fa      	ldr	r2, [r7, #12]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800afda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	051b      	lsls	r3, r3, #20
 800afe2:	693a      	ldr	r2, [r7, #16]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	4a19      	ldr	r2, [pc, #100]	@ (800b050 <TIM_OC6_SetConfig+0xb8>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d00f      	beq.n	800b010 <TIM_OC6_SetConfig+0x78>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4a18      	ldr	r2, [pc, #96]	@ (800b054 <TIM_OC6_SetConfig+0xbc>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d00b      	beq.n	800b010 <TIM_OC6_SetConfig+0x78>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a17      	ldr	r2, [pc, #92]	@ (800b058 <TIM_OC6_SetConfig+0xc0>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d007      	beq.n	800b010 <TIM_OC6_SetConfig+0x78>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a16      	ldr	r2, [pc, #88]	@ (800b05c <TIM_OC6_SetConfig+0xc4>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d003      	beq.n	800b010 <TIM_OC6_SetConfig+0x78>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a15      	ldr	r2, [pc, #84]	@ (800b060 <TIM_OC6_SetConfig+0xc8>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d109      	bne.n	800b024 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b016:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	695b      	ldr	r3, [r3, #20]
 800b01c:	029b      	lsls	r3, r3, #10
 800b01e:	697a      	ldr	r2, [r7, #20]
 800b020:	4313      	orrs	r3, r2
 800b022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	697a      	ldr	r2, [r7, #20]
 800b028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	685a      	ldr	r2, [r3, #4]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	693a      	ldr	r2, [r7, #16]
 800b03c:	621a      	str	r2, [r3, #32]
}
 800b03e:	bf00      	nop
 800b040:	371c      	adds	r7, #28
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop
 800b04c:	feff8fff 	.word	0xfeff8fff
 800b050:	40010000 	.word	0x40010000
 800b054:	40010400 	.word	0x40010400
 800b058:	40014000 	.word	0x40014000
 800b05c:	40014400 	.word	0x40014400
 800b060:	40014800 	.word	0x40014800

0800b064 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b074:	2b01      	cmp	r3, #1
 800b076:	d101      	bne.n	800b07c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b078:	2302      	movs	r3, #2
 800b07a:	e06d      	b.n	800b158 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2202      	movs	r2, #2
 800b088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a30      	ldr	r2, [pc, #192]	@ (800b164 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d004      	beq.n	800b0b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a2f      	ldr	r2, [pc, #188]	@ (800b168 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d108      	bne.n	800b0c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b0b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68fa      	ldr	r2, [r7, #12]
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a20      	ldr	r2, [pc, #128]	@ (800b164 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d022      	beq.n	800b12c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0ee:	d01d      	beq.n	800b12c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a1d      	ldr	r2, [pc, #116]	@ (800b16c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d018      	beq.n	800b12c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a1c      	ldr	r2, [pc, #112]	@ (800b170 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d013      	beq.n	800b12c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a1a      	ldr	r2, [pc, #104]	@ (800b174 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d00e      	beq.n	800b12c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a15      	ldr	r2, [pc, #84]	@ (800b168 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d009      	beq.n	800b12c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a16      	ldr	r2, [pc, #88]	@ (800b178 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d004      	beq.n	800b12c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a15      	ldr	r2, [pc, #84]	@ (800b17c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d10c      	bne.n	800b146 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b132:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	68ba      	ldr	r2, [r7, #8]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68ba      	ldr	r2, [r7, #8]
 800b144:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2201      	movs	r2, #1
 800b14a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3714      	adds	r7, #20
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr
 800b164:	40010000 	.word	0x40010000
 800b168:	40010400 	.word	0x40010400
 800b16c:	40000400 	.word	0x40000400
 800b170:	40000800 	.word	0x40000800
 800b174:	40000c00 	.word	0x40000c00
 800b178:	40001800 	.word	0x40001800
 800b17c:	40014000 	.word	0x40014000

0800b180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b188:	bf00      	nop
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b19c:	bf00      	nop
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b1b0:	bf00      	nop
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d101      	bne.n	800b1ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	e042      	b.n	800b254 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d106      	bne.n	800b1e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7f6 fa07 	bl	80015f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2224      	movs	r2, #36	@ 0x24
 800b1ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f022 0201 	bic.w	r2, r2, #1
 800b1fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 ffc8 	bl	800c194 <UART_SetConfig>
 800b204:	4603      	mov	r3, r0
 800b206:	2b01      	cmp	r3, #1
 800b208:	d101      	bne.n	800b20e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	e022      	b.n	800b254 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b212:	2b00      	cmp	r3, #0
 800b214:	d002      	beq.n	800b21c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f001 fd24 	bl	800cc64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	685a      	ldr	r2, [r3, #4]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b22a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	689a      	ldr	r2, [r3, #8]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b23a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f042 0201 	orr.w	r2, r2, #1
 800b24a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f001 fdab 	bl	800cda8 <UART_CheckIdleState>
 800b252:	4603      	mov	r3, r0
}
 800b254:	4618      	mov	r0, r3
 800b256:	3708      	adds	r7, #8
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b08a      	sub	sp, #40	@ 0x28
 800b260:	af02      	add	r7, sp, #8
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	603b      	str	r3, [r7, #0]
 800b268:	4613      	mov	r3, r2
 800b26a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b272:	2b20      	cmp	r3, #32
 800b274:	d17b      	bne.n	800b36e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <HAL_UART_Transmit+0x26>
 800b27c:	88fb      	ldrh	r3, [r7, #6]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d101      	bne.n	800b286 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	e074      	b.n	800b370 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2221      	movs	r2, #33	@ 0x21
 800b292:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b296:	f7f8 fdc7 	bl	8003e28 <HAL_GetTick>
 800b29a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	88fa      	ldrh	r2, [r7, #6]
 800b2a0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	88fa      	ldrh	r2, [r7, #6]
 800b2a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2b4:	d108      	bne.n	800b2c8 <HAL_UART_Transmit+0x6c>
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	691b      	ldr	r3, [r3, #16]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d104      	bne.n	800b2c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	61bb      	str	r3, [r7, #24]
 800b2c6:	e003      	b.n	800b2d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b2d0:	e030      	b.n	800b334 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	9300      	str	r3, [sp, #0]
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	2180      	movs	r1, #128	@ 0x80
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f001 fe0d 	bl	800cefc <UART_WaitOnFlagUntilTimeout>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d005      	beq.n	800b2f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2220      	movs	r2, #32
 800b2ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b2f0:	2303      	movs	r3, #3
 800b2f2:	e03d      	b.n	800b370 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d10b      	bne.n	800b312 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	881b      	ldrh	r3, [r3, #0]
 800b2fe:	461a      	mov	r2, r3
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b308:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	3302      	adds	r3, #2
 800b30e:	61bb      	str	r3, [r7, #24]
 800b310:	e007      	b.n	800b322 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	781a      	ldrb	r2, [r3, #0]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b31c:	69fb      	ldr	r3, [r7, #28]
 800b31e:	3301      	adds	r3, #1
 800b320:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b328:	b29b      	uxth	r3, r3
 800b32a:	3b01      	subs	r3, #1
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d1c8      	bne.n	800b2d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	2200      	movs	r2, #0
 800b348:	2140      	movs	r1, #64	@ 0x40
 800b34a:	68f8      	ldr	r0, [r7, #12]
 800b34c:	f001 fdd6 	bl	800cefc <UART_WaitOnFlagUntilTimeout>
 800b350:	4603      	mov	r3, r0
 800b352:	2b00      	cmp	r3, #0
 800b354:	d005      	beq.n	800b362 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2220      	movs	r2, #32
 800b35a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b35e:	2303      	movs	r3, #3
 800b360:	e006      	b.n	800b370 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2220      	movs	r2, #32
 800b366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b36a:	2300      	movs	r3, #0
 800b36c:	e000      	b.n	800b370 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b36e:	2302      	movs	r3, #2
  }
}
 800b370:	4618      	mov	r0, r3
 800b372:	3720      	adds	r7, #32
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b08a      	sub	sp, #40	@ 0x28
 800b37c:	af02      	add	r7, sp, #8
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	603b      	str	r3, [r7, #0]
 800b384:	4613      	mov	r3, r2
 800b386:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b38e:	2b20      	cmp	r3, #32
 800b390:	f040 80b5 	bne.w	800b4fe <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d002      	beq.n	800b3a0 <HAL_UART_Receive+0x28>
 800b39a:	88fb      	ldrh	r3, [r7, #6]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d101      	bne.n	800b3a4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e0ad      	b.n	800b500 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2222      	movs	r2, #34	@ 0x22
 800b3b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b3ba:	f7f8 fd35 	bl	8003e28 <HAL_GetTick>
 800b3be:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	88fa      	ldrh	r2, [r7, #6]
 800b3c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	88fa      	ldrh	r2, [r7, #6]
 800b3cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3d8:	d10e      	bne.n	800b3f8 <HAL_UART_Receive+0x80>
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d105      	bne.n	800b3ee <HAL_UART_Receive+0x76>
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b3e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b3ec:	e02d      	b.n	800b44a <HAL_UART_Receive+0xd2>
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	22ff      	movs	r2, #255	@ 0xff
 800b3f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b3f6:	e028      	b.n	800b44a <HAL_UART_Receive+0xd2>
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d10d      	bne.n	800b41c <HAL_UART_Receive+0xa4>
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	691b      	ldr	r3, [r3, #16]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d104      	bne.n	800b412 <HAL_UART_Receive+0x9a>
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	22ff      	movs	r2, #255	@ 0xff
 800b40c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b410:	e01b      	b.n	800b44a <HAL_UART_Receive+0xd2>
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	227f      	movs	r2, #127	@ 0x7f
 800b416:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b41a:	e016      	b.n	800b44a <HAL_UART_Receive+0xd2>
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	689b      	ldr	r3, [r3, #8]
 800b420:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b424:	d10d      	bne.n	800b442 <HAL_UART_Receive+0xca>
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	691b      	ldr	r3, [r3, #16]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d104      	bne.n	800b438 <HAL_UART_Receive+0xc0>
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	227f      	movs	r2, #127	@ 0x7f
 800b432:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b436:	e008      	b.n	800b44a <HAL_UART_Receive+0xd2>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	223f      	movs	r2, #63	@ 0x3f
 800b43c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b440:	e003      	b.n	800b44a <HAL_UART_Receive+0xd2>
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2200      	movs	r2, #0
 800b446:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b450:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	689b      	ldr	r3, [r3, #8]
 800b456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b45a:	d108      	bne.n	800b46e <HAL_UART_Receive+0xf6>
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	691b      	ldr	r3, [r3, #16]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d104      	bne.n	800b46e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800b464:	2300      	movs	r3, #0
 800b466:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	61bb      	str	r3, [r7, #24]
 800b46c:	e003      	b.n	800b476 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b472:	2300      	movs	r3, #0
 800b474:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b476:	e036      	b.n	800b4e6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	9300      	str	r3, [sp, #0]
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	2200      	movs	r2, #0
 800b480:	2120      	movs	r1, #32
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	f001 fd3a 	bl	800cefc <UART_WaitOnFlagUntilTimeout>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d005      	beq.n	800b49a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2220      	movs	r2, #32
 800b492:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800b496:	2303      	movs	r3, #3
 800b498:	e032      	b.n	800b500 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d10c      	bne.n	800b4ba <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a6:	b29a      	uxth	r2, r3
 800b4a8:	8a7b      	ldrh	r3, [r7, #18]
 800b4aa:	4013      	ands	r3, r2
 800b4ac:	b29a      	uxth	r2, r3
 800b4ae:	69bb      	ldr	r3, [r7, #24]
 800b4b0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	3302      	adds	r3, #2
 800b4b6:	61bb      	str	r3, [r7, #24]
 800b4b8:	e00c      	b.n	800b4d4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4c0:	b2da      	uxtb	r2, r3
 800b4c2:	8a7b      	ldrh	r3, [r7, #18]
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	4013      	ands	r3, r2
 800b4c8:	b2da      	uxtb	r2, r3
 800b4ca:	69fb      	ldr	r3, [r7, #28]
 800b4cc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	b29a      	uxth	r2, r3
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d1c2      	bne.n	800b478 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2220      	movs	r2, #32
 800b4f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	e000      	b.n	800b500 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800b4fe:	2302      	movs	r3, #2
  }
}
 800b500:	4618      	mov	r0, r3
 800b502:	3720      	adds	r7, #32
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b508:	b480      	push	{r7}
 800b50a:	b091      	sub	sp, #68	@ 0x44
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	4613      	mov	r3, r2
 800b514:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b51c:	2b20      	cmp	r3, #32
 800b51e:	d178      	bne.n	800b612 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d002      	beq.n	800b52c <HAL_UART_Transmit_IT+0x24>
 800b526:	88fb      	ldrh	r3, [r7, #6]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d101      	bne.n	800b530 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	e071      	b.n	800b614 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	68ba      	ldr	r2, [r7, #8]
 800b534:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	88fa      	ldrh	r2, [r7, #6]
 800b53a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	88fa      	ldrh	r2, [r7, #6]
 800b542:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2200      	movs	r2, #0
 800b550:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2221      	movs	r2, #33	@ 0x21
 800b558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b560:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b564:	d12a      	bne.n	800b5bc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b56e:	d107      	bne.n	800b580 <HAL_UART_Transmit_IT+0x78>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d103      	bne.n	800b580 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	4a29      	ldr	r2, [pc, #164]	@ (800b620 <HAL_UART_Transmit_IT+0x118>)
 800b57c:	679a      	str	r2, [r3, #120]	@ 0x78
 800b57e:	e002      	b.n	800b586 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	4a28      	ldr	r2, [pc, #160]	@ (800b624 <HAL_UART_Transmit_IT+0x11c>)
 800b584:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	3308      	adds	r3, #8
 800b58c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b590:	e853 3f00 	ldrex	r3, [r3]
 800b594:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b598:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b59c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	3308      	adds	r3, #8
 800b5a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b5a6:	637a      	str	r2, [r7, #52]	@ 0x34
 800b5a8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b5ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b5ae:	e841 2300 	strex	r3, r2, [r1]
 800b5b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d1e5      	bne.n	800b586 <HAL_UART_Transmit_IT+0x7e>
 800b5ba:	e028      	b.n	800b60e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5c4:	d107      	bne.n	800b5d6 <HAL_UART_Transmit_IT+0xce>
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d103      	bne.n	800b5d6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	4a15      	ldr	r2, [pc, #84]	@ (800b628 <HAL_UART_Transmit_IT+0x120>)
 800b5d2:	679a      	str	r2, [r3, #120]	@ 0x78
 800b5d4:	e002      	b.n	800b5dc <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	4a14      	ldr	r2, [pc, #80]	@ (800b62c <HAL_UART_Transmit_IT+0x124>)
 800b5da:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	e853 3f00 	ldrex	r3, [r3]
 800b5e8:	613b      	str	r3, [r7, #16]
   return(result);
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5fa:	623b      	str	r3, [r7, #32]
 800b5fc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5fe:	69f9      	ldr	r1, [r7, #28]
 800b600:	6a3a      	ldr	r2, [r7, #32]
 800b602:	e841 2300 	strex	r3, r2, [r1]
 800b606:	61bb      	str	r3, [r7, #24]
   return(result);
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1e6      	bne.n	800b5dc <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800b60e:	2300      	movs	r3, #0
 800b610:	e000      	b.n	800b614 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800b612:	2302      	movs	r3, #2
  }
}
 800b614:	4618      	mov	r0, r3
 800b616:	3744      	adds	r7, #68	@ 0x44
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	0800d5ad 	.word	0x0800d5ad
 800b624:	0800d4cd 	.word	0x0800d4cd
 800b628:	0800d40b 	.word	0x0800d40b
 800b62c:	0800d353 	.word	0x0800d353

0800b630 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b08a      	sub	sp, #40	@ 0x28
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	4613      	mov	r3, r2
 800b63c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b644:	2b20      	cmp	r3, #32
 800b646:	d137      	bne.n	800b6b8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d002      	beq.n	800b654 <HAL_UART_Receive_IT+0x24>
 800b64e:	88fb      	ldrh	r3, [r7, #6]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d101      	bne.n	800b658 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b654:	2301      	movs	r3, #1
 800b656:	e030      	b.n	800b6ba <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2200      	movs	r2, #0
 800b65c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a18      	ldr	r2, [pc, #96]	@ (800b6c4 <HAL_UART_Receive_IT+0x94>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d01f      	beq.n	800b6a8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b672:	2b00      	cmp	r3, #0
 800b674:	d018      	beq.n	800b6a8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	e853 3f00 	ldrex	r3, [r3]
 800b682:	613b      	str	r3, [r7, #16]
   return(result);
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b68a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	461a      	mov	r2, r3
 800b692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b694:	623b      	str	r3, [r7, #32]
 800b696:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b698:	69f9      	ldr	r1, [r7, #28]
 800b69a:	6a3a      	ldr	r2, [r7, #32]
 800b69c:	e841 2300 	strex	r3, r2, [r1]
 800b6a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b6a2:	69bb      	ldr	r3, [r7, #24]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d1e6      	bne.n	800b676 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b6a8:	88fb      	ldrh	r3, [r7, #6]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	68b9      	ldr	r1, [r7, #8]
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f001 fc8c 	bl	800cfcc <UART_Start_Receive_IT>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	e000      	b.n	800b6ba <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b6b8:	2302      	movs	r3, #2
  }
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3728      	adds	r7, #40	@ 0x28
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	58000c00 	.word	0x58000c00

0800b6c8 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b09a      	sub	sp, #104	@ 0x68
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6d8:	e853 3f00 	ldrex	r3, [r3]
 800b6dc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b6de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6e4:	667b      	str	r3, [r7, #100]	@ 0x64
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6ee:	657b      	str	r3, [r7, #84]	@ 0x54
 800b6f0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b6f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b6f6:	e841 2300 	strex	r3, r2, [r1]
 800b6fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b6fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1e6      	bne.n	800b6d0 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	3308      	adds	r3, #8
 800b708:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b70c:	e853 3f00 	ldrex	r3, [r3]
 800b710:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b714:	4b51      	ldr	r3, [pc, #324]	@ (800b85c <HAL_UART_AbortReceive_IT+0x194>)
 800b716:	4013      	ands	r3, r2
 800b718:	663b      	str	r3, [r7, #96]	@ 0x60
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	3308      	adds	r3, #8
 800b720:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b722:	643a      	str	r2, [r7, #64]	@ 0x40
 800b724:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b726:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b728:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b72a:	e841 2300 	strex	r3, r2, [r1]
 800b72e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b732:	2b00      	cmp	r3, #0
 800b734:	d1e5      	bne.n	800b702 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d118      	bne.n	800b770 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b744:	6a3b      	ldr	r3, [r7, #32]
 800b746:	e853 3f00 	ldrex	r3, [r3]
 800b74a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b74c:	69fb      	ldr	r3, [r7, #28]
 800b74e:	f023 0310 	bic.w	r3, r3, #16
 800b752:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	461a      	mov	r2, r3
 800b75a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b75c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b75e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b760:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b764:	e841 2300 	strex	r3, r2, [r1]
 800b768:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1e6      	bne.n	800b73e <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b77a:	2b40      	cmp	r3, #64	@ 0x40
 800b77c:	d154      	bne.n	800b828 <HAL_UART_AbortReceive_IT+0x160>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	3308      	adds	r3, #8
 800b784:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	e853 3f00 	ldrex	r3, [r3]
 800b78c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b794:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	3308      	adds	r3, #8
 800b79c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b79e:	61ba      	str	r2, [r7, #24]
 800b7a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a2:	6979      	ldr	r1, [r7, #20]
 800b7a4:	69ba      	ldr	r2, [r7, #24]
 800b7a6:	e841 2300 	strex	r3, r2, [r1]
 800b7aa:	613b      	str	r3, [r7, #16]
   return(result);
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d1e5      	bne.n	800b77e <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d017      	beq.n	800b7ec <HAL_UART_AbortReceive_IT+0x124>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7c2:	4a27      	ldr	r2, [pc, #156]	@ (800b860 <HAL_UART_AbortReceive_IT+0x198>)
 800b7c4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7f8 ffe1 	bl	8004794 <HAL_DMA_Abort_IT>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d03c      	beq.n	800b852 <HAL_UART_AbortReceive_IT+0x18a>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b7e6:	4610      	mov	r0, r2
 800b7e8:	4798      	blx	r3
 800b7ea:	e032      	b.n	800b852 <HAL_UART_AbortReceive_IT+0x18a>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	220f      	movs	r2, #15
 800b800:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	699a      	ldr	r2, [r3, #24]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f042 0208 	orr.w	r2, r2, #8
 800b810:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2220      	movs	r2, #32
 800b816:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2200      	movs	r2, #0
 800b81e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 fbe3 	bl	800bfec <HAL_UART_AbortReceiveCpltCallback>
 800b826:	e014      	b.n	800b852 <HAL_UART_AbortReceive_IT+0x18a>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2200      	movs	r2, #0
 800b82c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	220f      	movs	r2, #15
 800b83c:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2220      	movs	r2, #32
 800b842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2200      	movs	r2, #0
 800b84a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 fbcd 	bl	800bfec <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3768      	adds	r7, #104	@ 0x68
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	effffffe 	.word	0xeffffffe
 800b860:	0800d309 	.word	0x0800d309

0800b864 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b0ba      	sub	sp, #232	@ 0xe8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	69db      	ldr	r3, [r3, #28]
 800b872:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b88a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b88e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b892:	4013      	ands	r3, r2
 800b894:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b898:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d11b      	bne.n	800b8d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b8a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8a4:	f003 0320 	and.w	r3, r3, #32
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d015      	beq.n	800b8d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b8ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8b0:	f003 0320 	and.w	r3, r3, #32
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d105      	bne.n	800b8c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b8b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b8bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d009      	beq.n	800b8d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f000 8377 	beq.w	800bfbc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	4798      	blx	r3
      }
      return;
 800b8d6:	e371      	b.n	800bfbc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b8d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	f000 8123 	beq.w	800bb28 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b8e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b8e6:	4b8d      	ldr	r3, [pc, #564]	@ (800bb1c <HAL_UART_IRQHandler+0x2b8>)
 800b8e8:	4013      	ands	r3, r2
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d106      	bne.n	800b8fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b8ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b8f2:	4b8b      	ldr	r3, [pc, #556]	@ (800bb20 <HAL_UART_IRQHandler+0x2bc>)
 800b8f4:	4013      	ands	r3, r2
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	f000 8116 	beq.w	800bb28 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b8fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b900:	f003 0301 	and.w	r3, r3, #1
 800b904:	2b00      	cmp	r3, #0
 800b906:	d011      	beq.n	800b92c <HAL_UART_IRQHandler+0xc8>
 800b908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b90c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b910:	2b00      	cmp	r3, #0
 800b912:	d00b      	beq.n	800b92c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2201      	movs	r2, #1
 800b91a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b922:	f043 0201 	orr.w	r2, r3, #1
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b92c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b930:	f003 0302 	and.w	r3, r3, #2
 800b934:	2b00      	cmp	r3, #0
 800b936:	d011      	beq.n	800b95c <HAL_UART_IRQHandler+0xf8>
 800b938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b93c:	f003 0301 	and.w	r3, r3, #1
 800b940:	2b00      	cmp	r3, #0
 800b942:	d00b      	beq.n	800b95c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	2202      	movs	r2, #2
 800b94a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b952:	f043 0204 	orr.w	r2, r3, #4
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b95c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b960:	f003 0304 	and.w	r3, r3, #4
 800b964:	2b00      	cmp	r3, #0
 800b966:	d011      	beq.n	800b98c <HAL_UART_IRQHandler+0x128>
 800b968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b96c:	f003 0301 	and.w	r3, r3, #1
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00b      	beq.n	800b98c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2204      	movs	r2, #4
 800b97a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b982:	f043 0202 	orr.w	r2, r3, #2
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b98c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b990:	f003 0308 	and.w	r3, r3, #8
 800b994:	2b00      	cmp	r3, #0
 800b996:	d017      	beq.n	800b9c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b99c:	f003 0320 	and.w	r3, r3, #32
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d105      	bne.n	800b9b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b9a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b9a8:	4b5c      	ldr	r3, [pc, #368]	@ (800bb1c <HAL_UART_IRQHandler+0x2b8>)
 800b9aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00b      	beq.n	800b9c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2208      	movs	r2, #8
 800b9b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9be:	f043 0208 	orr.w	r2, r3, #8
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b9c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d012      	beq.n	800b9fa <HAL_UART_IRQHandler+0x196>
 800b9d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00c      	beq.n	800b9fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b9e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9f0:	f043 0220 	orr.w	r2, r3, #32
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f000 82dd 	beq.w	800bfc0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ba06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba0a:	f003 0320 	and.w	r3, r3, #32
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d013      	beq.n	800ba3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ba12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba16:	f003 0320 	and.w	r3, r3, #32
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d105      	bne.n	800ba2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ba1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d007      	beq.n	800ba3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d003      	beq.n	800ba3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba4e:	2b40      	cmp	r3, #64	@ 0x40
 800ba50:	d005      	beq.n	800ba5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ba52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ba56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d054      	beq.n	800bb08 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f001 fbd6 	bl	800d210 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba6e:	2b40      	cmp	r3, #64	@ 0x40
 800ba70:	d146      	bne.n	800bb00 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	3308      	adds	r3, #8
 800ba78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ba80:	e853 3f00 	ldrex	r3, [r3]
 800ba84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ba88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ba8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	3308      	adds	r3, #8
 800ba9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ba9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800baa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800baaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800baae:	e841 2300 	strex	r3, r2, [r1]
 800bab2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bab6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800baba:	2b00      	cmp	r3, #0
 800babc:	d1d9      	bne.n	800ba72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d017      	beq.n	800baf8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bace:	4a15      	ldr	r2, [pc, #84]	@ (800bb24 <HAL_UART_IRQHandler+0x2c0>)
 800bad0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bad8:	4618      	mov	r0, r3
 800bada:	f7f8 fe5b 	bl	8004794 <HAL_DMA_Abort_IT>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d019      	beq.n	800bb18 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800baea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800baf2:	4610      	mov	r0, r2
 800baf4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baf6:	e00f      	b.n	800bb18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fa6d 	bl	800bfd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bafe:	e00b      	b.n	800bb18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 fa69 	bl	800bfd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb06:	e007      	b.n	800bb18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 fa65 	bl	800bfd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800bb16:	e253      	b.n	800bfc0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb18:	bf00      	nop
    return;
 800bb1a:	e251      	b.n	800bfc0 <HAL_UART_IRQHandler+0x75c>
 800bb1c:	10000001 	.word	0x10000001
 800bb20:	04000120 	.word	0x04000120
 800bb24:	0800d2dd 	.word	0x0800d2dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	f040 81e7 	bne.w	800bf00 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bb32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb36:	f003 0310 	and.w	r3, r3, #16
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	f000 81e0 	beq.w	800bf00 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bb40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb44:	f003 0310 	and.w	r3, r3, #16
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f000 81d9 	beq.w	800bf00 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2210      	movs	r2, #16
 800bb54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb60:	2b40      	cmp	r3, #64	@ 0x40
 800bb62:	f040 8151 	bne.w	800be08 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a96      	ldr	r2, [pc, #600]	@ (800bdc8 <HAL_UART_IRQHandler+0x564>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d068      	beq.n	800bc46 <HAL_UART_IRQHandler+0x3e2>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a93      	ldr	r2, [pc, #588]	@ (800bdcc <HAL_UART_IRQHandler+0x568>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d061      	beq.n	800bc46 <HAL_UART_IRQHandler+0x3e2>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a91      	ldr	r2, [pc, #580]	@ (800bdd0 <HAL_UART_IRQHandler+0x56c>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d05a      	beq.n	800bc46 <HAL_UART_IRQHandler+0x3e2>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a8e      	ldr	r2, [pc, #568]	@ (800bdd4 <HAL_UART_IRQHandler+0x570>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d053      	beq.n	800bc46 <HAL_UART_IRQHandler+0x3e2>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4a8c      	ldr	r2, [pc, #560]	@ (800bdd8 <HAL_UART_IRQHandler+0x574>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d04c      	beq.n	800bc46 <HAL_UART_IRQHandler+0x3e2>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4a89      	ldr	r2, [pc, #548]	@ (800bddc <HAL_UART_IRQHandler+0x578>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d045      	beq.n	800bc46 <HAL_UART_IRQHandler+0x3e2>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a87      	ldr	r2, [pc, #540]	@ (800bde0 <HAL_UART_IRQHandler+0x57c>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d03e      	beq.n	800bc46 <HAL_UART_IRQHandler+0x3e2>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	4a84      	ldr	r2, [pc, #528]	@ (800bde4 <HAL_UART_IRQHandler+0x580>)
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d037      	beq.n	800bc46 <HAL_UART_IRQHandler+0x3e2>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a82      	ldr	r2, [pc, #520]	@ (800bde8 <HAL_UART_IRQHandler+0x584>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d030      	beq.n	800bc46 <HAL_UART_IRQHandler+0x3e2>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4a7f      	ldr	r2, [pc, #508]	@ (800bdec <HAL_UART_IRQHandler+0x588>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d029      	beq.n	800bc46 <HAL_UART_IRQHandler+0x3e2>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a7d      	ldr	r2, [pc, #500]	@ (800bdf0 <HAL_UART_IRQHandler+0x58c>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d022      	beq.n	800bc46 <HAL_UART_IRQHandler+0x3e2>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4a7a      	ldr	r2, [pc, #488]	@ (800bdf4 <HAL_UART_IRQHandler+0x590>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d01b      	beq.n	800bc46 <HAL_UART_IRQHandler+0x3e2>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a78      	ldr	r2, [pc, #480]	@ (800bdf8 <HAL_UART_IRQHandler+0x594>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d014      	beq.n	800bc46 <HAL_UART_IRQHandler+0x3e2>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a75      	ldr	r2, [pc, #468]	@ (800bdfc <HAL_UART_IRQHandler+0x598>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d00d      	beq.n	800bc46 <HAL_UART_IRQHandler+0x3e2>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4a73      	ldr	r2, [pc, #460]	@ (800be00 <HAL_UART_IRQHandler+0x59c>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d006      	beq.n	800bc46 <HAL_UART_IRQHandler+0x3e2>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a70      	ldr	r2, [pc, #448]	@ (800be04 <HAL_UART_IRQHandler+0x5a0>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d106      	bne.n	800bc54 <HAL_UART_IRQHandler+0x3f0>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	e005      	b.n	800bc60 <HAL_UART_IRQHandler+0x3fc>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f000 81ab 	beq.w	800bfc4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bc74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	f080 81a3 	bcs.w	800bfc4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bc84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc8e:	69db      	ldr	r3, [r3, #28]
 800bc90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc94:	f000 8087 	beq.w	800bda6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bca4:	e853 3f00 	ldrex	r3, [r3]
 800bca8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bcac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bcb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bcb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bcc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bcc6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bcce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bcd2:	e841 2300 	strex	r3, r2, [r1]
 800bcd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bcda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1da      	bne.n	800bc98 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	3308      	adds	r3, #8
 800bce8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bcec:	e853 3f00 	ldrex	r3, [r3]
 800bcf0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bcf2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bcf4:	f023 0301 	bic.w	r3, r3, #1
 800bcf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	3308      	adds	r3, #8
 800bd02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bd06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bd0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bd0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bd12:	e841 2300 	strex	r3, r2, [r1]
 800bd16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bd18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1e1      	bne.n	800bce2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	3308      	adds	r3, #8
 800bd24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd28:	e853 3f00 	ldrex	r3, [r3]
 800bd2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bd2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	3308      	adds	r3, #8
 800bd3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bd42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bd44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bd48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bd4a:	e841 2300 	strex	r3, r2, [r1]
 800bd4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bd50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d1e3      	bne.n	800bd1e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2220      	movs	r2, #32
 800bd5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd6c:	e853 3f00 	ldrex	r3, [r3]
 800bd70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bd72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd74:	f023 0310 	bic.w	r3, r3, #16
 800bd78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	461a      	mov	r2, r3
 800bd82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd86:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bd8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd8e:	e841 2300 	strex	r3, r2, [r1]
 800bd92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bd94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d1e4      	bne.n	800bd64 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7f8 f9d9 	bl	8004158 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2202      	movs	r2, #2
 800bdaa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	1ad3      	subs	r3, r2, r3
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 f91d 	bl	800c000 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bdc6:	e0fd      	b.n	800bfc4 <HAL_UART_IRQHandler+0x760>
 800bdc8:	40020010 	.word	0x40020010
 800bdcc:	40020028 	.word	0x40020028
 800bdd0:	40020040 	.word	0x40020040
 800bdd4:	40020058 	.word	0x40020058
 800bdd8:	40020070 	.word	0x40020070
 800bddc:	40020088 	.word	0x40020088
 800bde0:	400200a0 	.word	0x400200a0
 800bde4:	400200b8 	.word	0x400200b8
 800bde8:	40020410 	.word	0x40020410
 800bdec:	40020428 	.word	0x40020428
 800bdf0:	40020440 	.word	0x40020440
 800bdf4:	40020458 	.word	0x40020458
 800bdf8:	40020470 	.word	0x40020470
 800bdfc:	40020488 	.word	0x40020488
 800be00:	400204a0 	.word	0x400204a0
 800be04:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800be14:	b29b      	uxth	r3, r3
 800be16:	1ad3      	subs	r3, r2, r3
 800be18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800be22:	b29b      	uxth	r3, r3
 800be24:	2b00      	cmp	r3, #0
 800be26:	f000 80cf 	beq.w	800bfc8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800be2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800be2e:	2b00      	cmp	r3, #0
 800be30:	f000 80ca 	beq.w	800bfc8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be3c:	e853 3f00 	ldrex	r3, [r3]
 800be40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	461a      	mov	r2, r3
 800be52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be56:	647b      	str	r3, [r7, #68]	@ 0x44
 800be58:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be5e:	e841 2300 	strex	r3, r2, [r1]
 800be62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1e4      	bne.n	800be34 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	3308      	adds	r3, #8
 800be70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be74:	e853 3f00 	ldrex	r3, [r3]
 800be78:	623b      	str	r3, [r7, #32]
   return(result);
 800be7a:	6a3a      	ldr	r2, [r7, #32]
 800be7c:	4b55      	ldr	r3, [pc, #340]	@ (800bfd4 <HAL_UART_IRQHandler+0x770>)
 800be7e:	4013      	ands	r3, r2
 800be80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	3308      	adds	r3, #8
 800be8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800be8e:	633a      	str	r2, [r7, #48]	@ 0x30
 800be90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be96:	e841 2300 	strex	r3, r2, [r1]
 800be9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800be9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d1e3      	bne.n	800be6a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2220      	movs	r2, #32
 800bea6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	e853 3f00 	ldrex	r3, [r3]
 800bec2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f023 0310 	bic.w	r3, r3, #16
 800beca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	461a      	mov	r2, r3
 800bed4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bed8:	61fb      	str	r3, [r7, #28]
 800beda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bedc:	69b9      	ldr	r1, [r7, #24]
 800bede:	69fa      	ldr	r2, [r7, #28]
 800bee0:	e841 2300 	strex	r3, r2, [r1]
 800bee4:	617b      	str	r3, [r7, #20]
   return(result);
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1e4      	bne.n	800beb6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2202      	movs	r2, #2
 800bef0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bef2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bef6:	4619      	mov	r1, r3
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 f881 	bl	800c000 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800befe:	e063      	b.n	800bfc8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bf00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00e      	beq.n	800bf2a <HAL_UART_IRQHandler+0x6c6>
 800bf0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d008      	beq.n	800bf2a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800bf20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f002 f8fe 	bl	800e124 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf28:	e051      	b.n	800bfce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bf2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d014      	beq.n	800bf60 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bf36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d105      	bne.n	800bf4e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bf42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d008      	beq.n	800bf60 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d03a      	beq.n	800bfcc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	4798      	blx	r3
    }
    return;
 800bf5e:	e035      	b.n	800bfcc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bf60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d009      	beq.n	800bf80 <HAL_UART_IRQHandler+0x71c>
 800bf6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d003      	beq.n	800bf80 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f001 fb8c 	bl	800d696 <UART_EndTransmit_IT>
    return;
 800bf7e:	e026      	b.n	800bfce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bf80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d009      	beq.n	800bfa0 <HAL_UART_IRQHandler+0x73c>
 800bf8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf90:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d003      	beq.n	800bfa0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f002 f8d7 	bl	800e14c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf9e:	e016      	b.n	800bfce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bfa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d010      	beq.n	800bfce <HAL_UART_IRQHandler+0x76a>
 800bfac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	da0c      	bge.n	800bfce <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f002 f8bf 	bl	800e138 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bfba:	e008      	b.n	800bfce <HAL_UART_IRQHandler+0x76a>
      return;
 800bfbc:	bf00      	nop
 800bfbe:	e006      	b.n	800bfce <HAL_UART_IRQHandler+0x76a>
    return;
 800bfc0:	bf00      	nop
 800bfc2:	e004      	b.n	800bfce <HAL_UART_IRQHandler+0x76a>
      return;
 800bfc4:	bf00      	nop
 800bfc6:	e002      	b.n	800bfce <HAL_UART_IRQHandler+0x76a>
      return;
 800bfc8:	bf00      	nop
 800bfca:	e000      	b.n	800bfce <HAL_UART_IRQHandler+0x76a>
    return;
 800bfcc:	bf00      	nop
  }
}
 800bfce:	37e8      	adds	r7, #232	@ 0xe8
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	effffffe 	.word	0xeffffffe

0800bfd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bfe0:	bf00      	nop
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bff4:	bf00      	nop
 800bff6:	370c      	adds	r7, #12
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr

0800c000 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	460b      	mov	r3, r1
 800c00a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c00c:	bf00      	nop
 800c00e:	370c      	adds	r7, #12
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800c018:	b480      	push	{r7}
 800c01a:	b08f      	sub	sp, #60	@ 0x3c
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c026:	2b01      	cmp	r3, #1
 800c028:	d101      	bne.n	800c02e <HAL_HalfDuplex_EnableTransmitter+0x16>
 800c02a:	2302      	movs	r3, #2
 800c02c:	e042      	b.n	800c0b4 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2201      	movs	r2, #1
 800c032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2224      	movs	r2, #36	@ 0x24
 800c03a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c044:	6a3b      	ldr	r3, [r7, #32]
 800c046:	e853 3f00 	ldrex	r3, [r3]
 800c04a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	f023 030c 	bic.w	r3, r3, #12
 800c052:	637b      	str	r3, [r7, #52]	@ 0x34
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	461a      	mov	r2, r3
 800c05a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c05c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c05e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c060:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c064:	e841 2300 	strex	r3, r2, [r1]
 800c068:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d1e6      	bne.n	800c03e <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	e853 3f00 	ldrex	r3, [r3]
 800c07c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	f043 0308 	orr.w	r3, r3, #8
 800c084:	633b      	str	r3, [r7, #48]	@ 0x30
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	461a      	mov	r2, r3
 800c08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c08e:	61bb      	str	r3, [r7, #24]
 800c090:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c092:	6979      	ldr	r1, [r7, #20]
 800c094:	69ba      	ldr	r2, [r7, #24]
 800c096:	e841 2300 	strex	r3, r2, [r1]
 800c09a:	613b      	str	r3, [r7, #16]
   return(result);
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d1e6      	bne.n	800c070 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2220      	movs	r2, #32
 800c0a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c0b2:	2300      	movs	r3, #0
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	373c      	adds	r7, #60	@ 0x3c
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b08f      	sub	sp, #60	@ 0x3c
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d101      	bne.n	800c0d6 <HAL_HalfDuplex_EnableReceiver+0x16>
 800c0d2:	2302      	movs	r3, #2
 800c0d4:	e042      	b.n	800c15c <HAL_HalfDuplex_EnableReceiver+0x9c>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2201      	movs	r2, #1
 800c0da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2224      	movs	r2, #36	@ 0x24
 800c0e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ec:	6a3b      	ldr	r3, [r7, #32]
 800c0ee:	e853 3f00 	ldrex	r3, [r3]
 800c0f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	f023 030c 	bic.w	r3, r3, #12
 800c0fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	461a      	mov	r2, r3
 800c102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c106:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c108:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c10a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c10c:	e841 2300 	strex	r3, r2, [r1]
 800c110:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c114:	2b00      	cmp	r3, #0
 800c116:	d1e6      	bne.n	800c0e6 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	e853 3f00 	ldrex	r3, [r3]
 800c124:	60bb      	str	r3, [r7, #8]
   return(result);
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	f043 0304 	orr.w	r3, r3, #4
 800c12c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	461a      	mov	r2, r3
 800c134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c136:	61bb      	str	r3, [r7, #24]
 800c138:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13a:	6979      	ldr	r1, [r7, #20]
 800c13c:	69ba      	ldr	r2, [r7, #24]
 800c13e:	e841 2300 	strex	r3, r2, [r1]
 800c142:	613b      	str	r3, [r7, #16]
   return(result);
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1e6      	bne.n	800c118 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2220      	movs	r2, #32
 800c14e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c15a:	2300      	movs	r3, #0
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	373c      	adds	r7, #60	@ 0x3c
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr

0800c168 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800c168:	b480      	push	{r7}
 800c16a:	b085      	sub	sp, #20
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c176:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c17e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800c180:	68fa      	ldr	r2, [r7, #12]
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	4313      	orrs	r3, r2
}
 800c186:	4618      	mov	r0, r3
 800c188:	3714      	adds	r7, #20
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr
	...

0800c194 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c198:	b092      	sub	sp, #72	@ 0x48
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	689a      	ldr	r2, [r3, #8]
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	691b      	ldr	r3, [r3, #16]
 800c1ac:	431a      	orrs	r2, r3
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	695b      	ldr	r3, [r3, #20]
 800c1b2:	431a      	orrs	r2, r3
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	69db      	ldr	r3, [r3, #28]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	4bbe      	ldr	r3, [pc, #760]	@ (800c4bc <UART_SetConfig+0x328>)
 800c1c4:	4013      	ands	r3, r2
 800c1c6:	697a      	ldr	r2, [r7, #20]
 800c1c8:	6812      	ldr	r2, [r2, #0]
 800c1ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c1cc:	430b      	orrs	r3, r1
 800c1ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	68da      	ldr	r2, [r3, #12]
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	430a      	orrs	r2, r1
 800c1e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	699b      	ldr	r3, [r3, #24]
 800c1ea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4ab3      	ldr	r2, [pc, #716]	@ (800c4c0 <UART_SetConfig+0x32c>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d004      	beq.n	800c200 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	6a1b      	ldr	r3, [r3, #32]
 800c1fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	689a      	ldr	r2, [r3, #8]
 800c206:	4baf      	ldr	r3, [pc, #700]	@ (800c4c4 <UART_SetConfig+0x330>)
 800c208:	4013      	ands	r3, r2
 800c20a:	697a      	ldr	r2, [r7, #20]
 800c20c:	6812      	ldr	r2, [r2, #0]
 800c20e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c210:	430b      	orrs	r3, r1
 800c212:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c21a:	f023 010f 	bic.w	r1, r3, #15
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	430a      	orrs	r2, r1
 800c228:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4aa6      	ldr	r2, [pc, #664]	@ (800c4c8 <UART_SetConfig+0x334>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d177      	bne.n	800c324 <UART_SetConfig+0x190>
 800c234:	4ba5      	ldr	r3, [pc, #660]	@ (800c4cc <UART_SetConfig+0x338>)
 800c236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c238:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c23c:	2b28      	cmp	r3, #40	@ 0x28
 800c23e:	d86d      	bhi.n	800c31c <UART_SetConfig+0x188>
 800c240:	a201      	add	r2, pc, #4	@ (adr r2, 800c248 <UART_SetConfig+0xb4>)
 800c242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c246:	bf00      	nop
 800c248:	0800c2ed 	.word	0x0800c2ed
 800c24c:	0800c31d 	.word	0x0800c31d
 800c250:	0800c31d 	.word	0x0800c31d
 800c254:	0800c31d 	.word	0x0800c31d
 800c258:	0800c31d 	.word	0x0800c31d
 800c25c:	0800c31d 	.word	0x0800c31d
 800c260:	0800c31d 	.word	0x0800c31d
 800c264:	0800c31d 	.word	0x0800c31d
 800c268:	0800c2f5 	.word	0x0800c2f5
 800c26c:	0800c31d 	.word	0x0800c31d
 800c270:	0800c31d 	.word	0x0800c31d
 800c274:	0800c31d 	.word	0x0800c31d
 800c278:	0800c31d 	.word	0x0800c31d
 800c27c:	0800c31d 	.word	0x0800c31d
 800c280:	0800c31d 	.word	0x0800c31d
 800c284:	0800c31d 	.word	0x0800c31d
 800c288:	0800c2fd 	.word	0x0800c2fd
 800c28c:	0800c31d 	.word	0x0800c31d
 800c290:	0800c31d 	.word	0x0800c31d
 800c294:	0800c31d 	.word	0x0800c31d
 800c298:	0800c31d 	.word	0x0800c31d
 800c29c:	0800c31d 	.word	0x0800c31d
 800c2a0:	0800c31d 	.word	0x0800c31d
 800c2a4:	0800c31d 	.word	0x0800c31d
 800c2a8:	0800c305 	.word	0x0800c305
 800c2ac:	0800c31d 	.word	0x0800c31d
 800c2b0:	0800c31d 	.word	0x0800c31d
 800c2b4:	0800c31d 	.word	0x0800c31d
 800c2b8:	0800c31d 	.word	0x0800c31d
 800c2bc:	0800c31d 	.word	0x0800c31d
 800c2c0:	0800c31d 	.word	0x0800c31d
 800c2c4:	0800c31d 	.word	0x0800c31d
 800c2c8:	0800c30d 	.word	0x0800c30d
 800c2cc:	0800c31d 	.word	0x0800c31d
 800c2d0:	0800c31d 	.word	0x0800c31d
 800c2d4:	0800c31d 	.word	0x0800c31d
 800c2d8:	0800c31d 	.word	0x0800c31d
 800c2dc:	0800c31d 	.word	0x0800c31d
 800c2e0:	0800c31d 	.word	0x0800c31d
 800c2e4:	0800c31d 	.word	0x0800c31d
 800c2e8:	0800c315 	.word	0x0800c315
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2f2:	e222      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c2f4:	2304      	movs	r3, #4
 800c2f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2fa:	e21e      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c2fc:	2308      	movs	r3, #8
 800c2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c302:	e21a      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c304:	2310      	movs	r3, #16
 800c306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c30a:	e216      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c30c:	2320      	movs	r3, #32
 800c30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c312:	e212      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c314:	2340      	movs	r3, #64	@ 0x40
 800c316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c31a:	e20e      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c31c:	2380      	movs	r3, #128	@ 0x80
 800c31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c322:	e20a      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a69      	ldr	r2, [pc, #420]	@ (800c4d0 <UART_SetConfig+0x33c>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d130      	bne.n	800c390 <UART_SetConfig+0x1fc>
 800c32e:	4b67      	ldr	r3, [pc, #412]	@ (800c4cc <UART_SetConfig+0x338>)
 800c330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c332:	f003 0307 	and.w	r3, r3, #7
 800c336:	2b05      	cmp	r3, #5
 800c338:	d826      	bhi.n	800c388 <UART_SetConfig+0x1f4>
 800c33a:	a201      	add	r2, pc, #4	@ (adr r2, 800c340 <UART_SetConfig+0x1ac>)
 800c33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c340:	0800c359 	.word	0x0800c359
 800c344:	0800c361 	.word	0x0800c361
 800c348:	0800c369 	.word	0x0800c369
 800c34c:	0800c371 	.word	0x0800c371
 800c350:	0800c379 	.word	0x0800c379
 800c354:	0800c381 	.word	0x0800c381
 800c358:	2300      	movs	r3, #0
 800c35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c35e:	e1ec      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c360:	2304      	movs	r3, #4
 800c362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c366:	e1e8      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c368:	2308      	movs	r3, #8
 800c36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c36e:	e1e4      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c370:	2310      	movs	r3, #16
 800c372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c376:	e1e0      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c378:	2320      	movs	r3, #32
 800c37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c37e:	e1dc      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c380:	2340      	movs	r3, #64	@ 0x40
 800c382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c386:	e1d8      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c388:	2380      	movs	r3, #128	@ 0x80
 800c38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c38e:	e1d4      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a4f      	ldr	r2, [pc, #316]	@ (800c4d4 <UART_SetConfig+0x340>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d130      	bne.n	800c3fc <UART_SetConfig+0x268>
 800c39a:	4b4c      	ldr	r3, [pc, #304]	@ (800c4cc <UART_SetConfig+0x338>)
 800c39c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c39e:	f003 0307 	and.w	r3, r3, #7
 800c3a2:	2b05      	cmp	r3, #5
 800c3a4:	d826      	bhi.n	800c3f4 <UART_SetConfig+0x260>
 800c3a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c3ac <UART_SetConfig+0x218>)
 800c3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ac:	0800c3c5 	.word	0x0800c3c5
 800c3b0:	0800c3cd 	.word	0x0800c3cd
 800c3b4:	0800c3d5 	.word	0x0800c3d5
 800c3b8:	0800c3dd 	.word	0x0800c3dd
 800c3bc:	0800c3e5 	.word	0x0800c3e5
 800c3c0:	0800c3ed 	.word	0x0800c3ed
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ca:	e1b6      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c3cc:	2304      	movs	r3, #4
 800c3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3d2:	e1b2      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c3d4:	2308      	movs	r3, #8
 800c3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3da:	e1ae      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c3dc:	2310      	movs	r3, #16
 800c3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3e2:	e1aa      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c3e4:	2320      	movs	r3, #32
 800c3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ea:	e1a6      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c3ec:	2340      	movs	r3, #64	@ 0x40
 800c3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3f2:	e1a2      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c3f4:	2380      	movs	r3, #128	@ 0x80
 800c3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3fa:	e19e      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a35      	ldr	r2, [pc, #212]	@ (800c4d8 <UART_SetConfig+0x344>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d130      	bne.n	800c468 <UART_SetConfig+0x2d4>
 800c406:	4b31      	ldr	r3, [pc, #196]	@ (800c4cc <UART_SetConfig+0x338>)
 800c408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c40a:	f003 0307 	and.w	r3, r3, #7
 800c40e:	2b05      	cmp	r3, #5
 800c410:	d826      	bhi.n	800c460 <UART_SetConfig+0x2cc>
 800c412:	a201      	add	r2, pc, #4	@ (adr r2, 800c418 <UART_SetConfig+0x284>)
 800c414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c418:	0800c431 	.word	0x0800c431
 800c41c:	0800c439 	.word	0x0800c439
 800c420:	0800c441 	.word	0x0800c441
 800c424:	0800c449 	.word	0x0800c449
 800c428:	0800c451 	.word	0x0800c451
 800c42c:	0800c459 	.word	0x0800c459
 800c430:	2300      	movs	r3, #0
 800c432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c436:	e180      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c438:	2304      	movs	r3, #4
 800c43a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c43e:	e17c      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c440:	2308      	movs	r3, #8
 800c442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c446:	e178      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c448:	2310      	movs	r3, #16
 800c44a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c44e:	e174      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c450:	2320      	movs	r3, #32
 800c452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c456:	e170      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c458:	2340      	movs	r3, #64	@ 0x40
 800c45a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c45e:	e16c      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c460:	2380      	movs	r3, #128	@ 0x80
 800c462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c466:	e168      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a1b      	ldr	r2, [pc, #108]	@ (800c4dc <UART_SetConfig+0x348>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d142      	bne.n	800c4f8 <UART_SetConfig+0x364>
 800c472:	4b16      	ldr	r3, [pc, #88]	@ (800c4cc <UART_SetConfig+0x338>)
 800c474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c476:	f003 0307 	and.w	r3, r3, #7
 800c47a:	2b05      	cmp	r3, #5
 800c47c:	d838      	bhi.n	800c4f0 <UART_SetConfig+0x35c>
 800c47e:	a201      	add	r2, pc, #4	@ (adr r2, 800c484 <UART_SetConfig+0x2f0>)
 800c480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c484:	0800c49d 	.word	0x0800c49d
 800c488:	0800c4a5 	.word	0x0800c4a5
 800c48c:	0800c4ad 	.word	0x0800c4ad
 800c490:	0800c4b5 	.word	0x0800c4b5
 800c494:	0800c4e1 	.word	0x0800c4e1
 800c498:	0800c4e9 	.word	0x0800c4e9
 800c49c:	2300      	movs	r3, #0
 800c49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4a2:	e14a      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c4a4:	2304      	movs	r3, #4
 800c4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4aa:	e146      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c4ac:	2308      	movs	r3, #8
 800c4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4b2:	e142      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c4b4:	2310      	movs	r3, #16
 800c4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ba:	e13e      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c4bc:	cfff69f3 	.word	0xcfff69f3
 800c4c0:	58000c00 	.word	0x58000c00
 800c4c4:	11fff4ff 	.word	0x11fff4ff
 800c4c8:	40011000 	.word	0x40011000
 800c4cc:	58024400 	.word	0x58024400
 800c4d0:	40004400 	.word	0x40004400
 800c4d4:	40004800 	.word	0x40004800
 800c4d8:	40004c00 	.word	0x40004c00
 800c4dc:	40005000 	.word	0x40005000
 800c4e0:	2320      	movs	r3, #32
 800c4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4e6:	e128      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c4e8:	2340      	movs	r3, #64	@ 0x40
 800c4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ee:	e124      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c4f0:	2380      	movs	r3, #128	@ 0x80
 800c4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4f6:	e120      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4acb      	ldr	r2, [pc, #812]	@ (800c82c <UART_SetConfig+0x698>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d176      	bne.n	800c5f0 <UART_SetConfig+0x45c>
 800c502:	4bcb      	ldr	r3, [pc, #812]	@ (800c830 <UART_SetConfig+0x69c>)
 800c504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c506:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c50a:	2b28      	cmp	r3, #40	@ 0x28
 800c50c:	d86c      	bhi.n	800c5e8 <UART_SetConfig+0x454>
 800c50e:	a201      	add	r2, pc, #4	@ (adr r2, 800c514 <UART_SetConfig+0x380>)
 800c510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c514:	0800c5b9 	.word	0x0800c5b9
 800c518:	0800c5e9 	.word	0x0800c5e9
 800c51c:	0800c5e9 	.word	0x0800c5e9
 800c520:	0800c5e9 	.word	0x0800c5e9
 800c524:	0800c5e9 	.word	0x0800c5e9
 800c528:	0800c5e9 	.word	0x0800c5e9
 800c52c:	0800c5e9 	.word	0x0800c5e9
 800c530:	0800c5e9 	.word	0x0800c5e9
 800c534:	0800c5c1 	.word	0x0800c5c1
 800c538:	0800c5e9 	.word	0x0800c5e9
 800c53c:	0800c5e9 	.word	0x0800c5e9
 800c540:	0800c5e9 	.word	0x0800c5e9
 800c544:	0800c5e9 	.word	0x0800c5e9
 800c548:	0800c5e9 	.word	0x0800c5e9
 800c54c:	0800c5e9 	.word	0x0800c5e9
 800c550:	0800c5e9 	.word	0x0800c5e9
 800c554:	0800c5c9 	.word	0x0800c5c9
 800c558:	0800c5e9 	.word	0x0800c5e9
 800c55c:	0800c5e9 	.word	0x0800c5e9
 800c560:	0800c5e9 	.word	0x0800c5e9
 800c564:	0800c5e9 	.word	0x0800c5e9
 800c568:	0800c5e9 	.word	0x0800c5e9
 800c56c:	0800c5e9 	.word	0x0800c5e9
 800c570:	0800c5e9 	.word	0x0800c5e9
 800c574:	0800c5d1 	.word	0x0800c5d1
 800c578:	0800c5e9 	.word	0x0800c5e9
 800c57c:	0800c5e9 	.word	0x0800c5e9
 800c580:	0800c5e9 	.word	0x0800c5e9
 800c584:	0800c5e9 	.word	0x0800c5e9
 800c588:	0800c5e9 	.word	0x0800c5e9
 800c58c:	0800c5e9 	.word	0x0800c5e9
 800c590:	0800c5e9 	.word	0x0800c5e9
 800c594:	0800c5d9 	.word	0x0800c5d9
 800c598:	0800c5e9 	.word	0x0800c5e9
 800c59c:	0800c5e9 	.word	0x0800c5e9
 800c5a0:	0800c5e9 	.word	0x0800c5e9
 800c5a4:	0800c5e9 	.word	0x0800c5e9
 800c5a8:	0800c5e9 	.word	0x0800c5e9
 800c5ac:	0800c5e9 	.word	0x0800c5e9
 800c5b0:	0800c5e9 	.word	0x0800c5e9
 800c5b4:	0800c5e1 	.word	0x0800c5e1
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5be:	e0bc      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c5c0:	2304      	movs	r3, #4
 800c5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5c6:	e0b8      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c5c8:	2308      	movs	r3, #8
 800c5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ce:	e0b4      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c5d0:	2310      	movs	r3, #16
 800c5d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5d6:	e0b0      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c5d8:	2320      	movs	r3, #32
 800c5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5de:	e0ac      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c5e0:	2340      	movs	r3, #64	@ 0x40
 800c5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5e6:	e0a8      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c5e8:	2380      	movs	r3, #128	@ 0x80
 800c5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ee:	e0a4      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4a8f      	ldr	r2, [pc, #572]	@ (800c834 <UART_SetConfig+0x6a0>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d130      	bne.n	800c65c <UART_SetConfig+0x4c8>
 800c5fa:	4b8d      	ldr	r3, [pc, #564]	@ (800c830 <UART_SetConfig+0x69c>)
 800c5fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5fe:	f003 0307 	and.w	r3, r3, #7
 800c602:	2b05      	cmp	r3, #5
 800c604:	d826      	bhi.n	800c654 <UART_SetConfig+0x4c0>
 800c606:	a201      	add	r2, pc, #4	@ (adr r2, 800c60c <UART_SetConfig+0x478>)
 800c608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c60c:	0800c625 	.word	0x0800c625
 800c610:	0800c62d 	.word	0x0800c62d
 800c614:	0800c635 	.word	0x0800c635
 800c618:	0800c63d 	.word	0x0800c63d
 800c61c:	0800c645 	.word	0x0800c645
 800c620:	0800c64d 	.word	0x0800c64d
 800c624:	2300      	movs	r3, #0
 800c626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c62a:	e086      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c62c:	2304      	movs	r3, #4
 800c62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c632:	e082      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c634:	2308      	movs	r3, #8
 800c636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c63a:	e07e      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c63c:	2310      	movs	r3, #16
 800c63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c642:	e07a      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c644:	2320      	movs	r3, #32
 800c646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c64a:	e076      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c64c:	2340      	movs	r3, #64	@ 0x40
 800c64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c652:	e072      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c654:	2380      	movs	r3, #128	@ 0x80
 800c656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c65a:	e06e      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a75      	ldr	r2, [pc, #468]	@ (800c838 <UART_SetConfig+0x6a4>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d130      	bne.n	800c6c8 <UART_SetConfig+0x534>
 800c666:	4b72      	ldr	r3, [pc, #456]	@ (800c830 <UART_SetConfig+0x69c>)
 800c668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c66a:	f003 0307 	and.w	r3, r3, #7
 800c66e:	2b05      	cmp	r3, #5
 800c670:	d826      	bhi.n	800c6c0 <UART_SetConfig+0x52c>
 800c672:	a201      	add	r2, pc, #4	@ (adr r2, 800c678 <UART_SetConfig+0x4e4>)
 800c674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c678:	0800c691 	.word	0x0800c691
 800c67c:	0800c699 	.word	0x0800c699
 800c680:	0800c6a1 	.word	0x0800c6a1
 800c684:	0800c6a9 	.word	0x0800c6a9
 800c688:	0800c6b1 	.word	0x0800c6b1
 800c68c:	0800c6b9 	.word	0x0800c6b9
 800c690:	2300      	movs	r3, #0
 800c692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c696:	e050      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c698:	2304      	movs	r3, #4
 800c69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c69e:	e04c      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c6a0:	2308      	movs	r3, #8
 800c6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6a6:	e048      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c6a8:	2310      	movs	r3, #16
 800c6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ae:	e044      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c6b0:	2320      	movs	r3, #32
 800c6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6b6:	e040      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c6b8:	2340      	movs	r3, #64	@ 0x40
 800c6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6be:	e03c      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c6c0:	2380      	movs	r3, #128	@ 0x80
 800c6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6c6:	e038      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	4a5b      	ldr	r2, [pc, #364]	@ (800c83c <UART_SetConfig+0x6a8>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d130      	bne.n	800c734 <UART_SetConfig+0x5a0>
 800c6d2:	4b57      	ldr	r3, [pc, #348]	@ (800c830 <UART_SetConfig+0x69c>)
 800c6d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6d6:	f003 0307 	and.w	r3, r3, #7
 800c6da:	2b05      	cmp	r3, #5
 800c6dc:	d826      	bhi.n	800c72c <UART_SetConfig+0x598>
 800c6de:	a201      	add	r2, pc, #4	@ (adr r2, 800c6e4 <UART_SetConfig+0x550>)
 800c6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e4:	0800c6fd 	.word	0x0800c6fd
 800c6e8:	0800c705 	.word	0x0800c705
 800c6ec:	0800c70d 	.word	0x0800c70d
 800c6f0:	0800c715 	.word	0x0800c715
 800c6f4:	0800c71d 	.word	0x0800c71d
 800c6f8:	0800c725 	.word	0x0800c725
 800c6fc:	2302      	movs	r3, #2
 800c6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c702:	e01a      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c704:	2304      	movs	r3, #4
 800c706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c70a:	e016      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c70c:	2308      	movs	r3, #8
 800c70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c712:	e012      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c714:	2310      	movs	r3, #16
 800c716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c71a:	e00e      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c71c:	2320      	movs	r3, #32
 800c71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c722:	e00a      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c724:	2340      	movs	r3, #64	@ 0x40
 800c726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c72a:	e006      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c72c:	2380      	movs	r3, #128	@ 0x80
 800c72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c732:	e002      	b.n	800c73a <UART_SetConfig+0x5a6>
 800c734:	2380      	movs	r3, #128	@ 0x80
 800c736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4a3f      	ldr	r2, [pc, #252]	@ (800c83c <UART_SetConfig+0x6a8>)
 800c740:	4293      	cmp	r3, r2
 800c742:	f040 80f8 	bne.w	800c936 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c746:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c74a:	2b20      	cmp	r3, #32
 800c74c:	dc46      	bgt.n	800c7dc <UART_SetConfig+0x648>
 800c74e:	2b02      	cmp	r3, #2
 800c750:	f2c0 8082 	blt.w	800c858 <UART_SetConfig+0x6c4>
 800c754:	3b02      	subs	r3, #2
 800c756:	2b1e      	cmp	r3, #30
 800c758:	d87e      	bhi.n	800c858 <UART_SetConfig+0x6c4>
 800c75a:	a201      	add	r2, pc, #4	@ (adr r2, 800c760 <UART_SetConfig+0x5cc>)
 800c75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c760:	0800c7e3 	.word	0x0800c7e3
 800c764:	0800c859 	.word	0x0800c859
 800c768:	0800c7eb 	.word	0x0800c7eb
 800c76c:	0800c859 	.word	0x0800c859
 800c770:	0800c859 	.word	0x0800c859
 800c774:	0800c859 	.word	0x0800c859
 800c778:	0800c7fb 	.word	0x0800c7fb
 800c77c:	0800c859 	.word	0x0800c859
 800c780:	0800c859 	.word	0x0800c859
 800c784:	0800c859 	.word	0x0800c859
 800c788:	0800c859 	.word	0x0800c859
 800c78c:	0800c859 	.word	0x0800c859
 800c790:	0800c859 	.word	0x0800c859
 800c794:	0800c859 	.word	0x0800c859
 800c798:	0800c80b 	.word	0x0800c80b
 800c79c:	0800c859 	.word	0x0800c859
 800c7a0:	0800c859 	.word	0x0800c859
 800c7a4:	0800c859 	.word	0x0800c859
 800c7a8:	0800c859 	.word	0x0800c859
 800c7ac:	0800c859 	.word	0x0800c859
 800c7b0:	0800c859 	.word	0x0800c859
 800c7b4:	0800c859 	.word	0x0800c859
 800c7b8:	0800c859 	.word	0x0800c859
 800c7bc:	0800c859 	.word	0x0800c859
 800c7c0:	0800c859 	.word	0x0800c859
 800c7c4:	0800c859 	.word	0x0800c859
 800c7c8:	0800c859 	.word	0x0800c859
 800c7cc:	0800c859 	.word	0x0800c859
 800c7d0:	0800c859 	.word	0x0800c859
 800c7d4:	0800c859 	.word	0x0800c859
 800c7d8:	0800c84b 	.word	0x0800c84b
 800c7dc:	2b40      	cmp	r3, #64	@ 0x40
 800c7de:	d037      	beq.n	800c850 <UART_SetConfig+0x6bc>
 800c7e0:	e03a      	b.n	800c858 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c7e2:	f7fb fc05 	bl	8007ff0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c7e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c7e8:	e03c      	b.n	800c864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7fb fc14 	bl	800801c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7f8:	e034      	b.n	800c864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7fa:	f107 0318 	add.w	r3, r7, #24
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7fb fd60 	bl	80082c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c804:	69fb      	ldr	r3, [r7, #28]
 800c806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c808:	e02c      	b.n	800c864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c80a:	4b09      	ldr	r3, [pc, #36]	@ (800c830 <UART_SetConfig+0x69c>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f003 0320 	and.w	r3, r3, #32
 800c812:	2b00      	cmp	r3, #0
 800c814:	d016      	beq.n	800c844 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c816:	4b06      	ldr	r3, [pc, #24]	@ (800c830 <UART_SetConfig+0x69c>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	08db      	lsrs	r3, r3, #3
 800c81c:	f003 0303 	and.w	r3, r3, #3
 800c820:	4a07      	ldr	r2, [pc, #28]	@ (800c840 <UART_SetConfig+0x6ac>)
 800c822:	fa22 f303 	lsr.w	r3, r2, r3
 800c826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c828:	e01c      	b.n	800c864 <UART_SetConfig+0x6d0>
 800c82a:	bf00      	nop
 800c82c:	40011400 	.word	0x40011400
 800c830:	58024400 	.word	0x58024400
 800c834:	40007800 	.word	0x40007800
 800c838:	40007c00 	.word	0x40007c00
 800c83c:	58000c00 	.word	0x58000c00
 800c840:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c844:	4b9d      	ldr	r3, [pc, #628]	@ (800cabc <UART_SetConfig+0x928>)
 800c846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c848:	e00c      	b.n	800c864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c84a:	4b9d      	ldr	r3, [pc, #628]	@ (800cac0 <UART_SetConfig+0x92c>)
 800c84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c84e:	e009      	b.n	800c864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c850:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c856:	e005      	b.n	800c864 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c858:	2300      	movs	r3, #0
 800c85a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c85c:	2301      	movs	r3, #1
 800c85e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c862:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c866:	2b00      	cmp	r3, #0
 800c868:	f000 81de 	beq.w	800cc28 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c870:	4a94      	ldr	r2, [pc, #592]	@ (800cac4 <UART_SetConfig+0x930>)
 800c872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c876:	461a      	mov	r2, r3
 800c878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c87a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c87e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	685a      	ldr	r2, [r3, #4]
 800c884:	4613      	mov	r3, r2
 800c886:	005b      	lsls	r3, r3, #1
 800c888:	4413      	add	r3, r2
 800c88a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d305      	bcc.n	800c89c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c898:	429a      	cmp	r2, r3
 800c89a:	d903      	bls.n	800c8a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c89c:	2301      	movs	r3, #1
 800c89e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c8a2:	e1c1      	b.n	800cc28 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	60bb      	str	r3, [r7, #8]
 800c8aa:	60fa      	str	r2, [r7, #12]
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8b0:	4a84      	ldr	r2, [pc, #528]	@ (800cac4 <UART_SetConfig+0x930>)
 800c8b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	603b      	str	r3, [r7, #0]
 800c8bc:	607a      	str	r2, [r7, #4]
 800c8be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c8c6:	f7f3 fd63 	bl	8000390 <__aeabi_uldivmod>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	4610      	mov	r0, r2
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	f04f 0200 	mov.w	r2, #0
 800c8d6:	f04f 0300 	mov.w	r3, #0
 800c8da:	020b      	lsls	r3, r1, #8
 800c8dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c8e0:	0202      	lsls	r2, r0, #8
 800c8e2:	6979      	ldr	r1, [r7, #20]
 800c8e4:	6849      	ldr	r1, [r1, #4]
 800c8e6:	0849      	lsrs	r1, r1, #1
 800c8e8:	2000      	movs	r0, #0
 800c8ea:	460c      	mov	r4, r1
 800c8ec:	4605      	mov	r5, r0
 800c8ee:	eb12 0804 	adds.w	r8, r2, r4
 800c8f2:	eb43 0905 	adc.w	r9, r3, r5
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	469a      	mov	sl, r3
 800c8fe:	4693      	mov	fp, r2
 800c900:	4652      	mov	r2, sl
 800c902:	465b      	mov	r3, fp
 800c904:	4640      	mov	r0, r8
 800c906:	4649      	mov	r1, r9
 800c908:	f7f3 fd42 	bl	8000390 <__aeabi_uldivmod>
 800c90c:	4602      	mov	r2, r0
 800c90e:	460b      	mov	r3, r1
 800c910:	4613      	mov	r3, r2
 800c912:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c916:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c91a:	d308      	bcc.n	800c92e <UART_SetConfig+0x79a>
 800c91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c91e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c922:	d204      	bcs.n	800c92e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c92a:	60da      	str	r2, [r3, #12]
 800c92c:	e17c      	b.n	800cc28 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c92e:	2301      	movs	r3, #1
 800c930:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c934:	e178      	b.n	800cc28 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	69db      	ldr	r3, [r3, #28]
 800c93a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c93e:	f040 80c5 	bne.w	800cacc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c942:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c946:	2b20      	cmp	r3, #32
 800c948:	dc48      	bgt.n	800c9dc <UART_SetConfig+0x848>
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	db7b      	blt.n	800ca46 <UART_SetConfig+0x8b2>
 800c94e:	2b20      	cmp	r3, #32
 800c950:	d879      	bhi.n	800ca46 <UART_SetConfig+0x8b2>
 800c952:	a201      	add	r2, pc, #4	@ (adr r2, 800c958 <UART_SetConfig+0x7c4>)
 800c954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c958:	0800c9e3 	.word	0x0800c9e3
 800c95c:	0800c9eb 	.word	0x0800c9eb
 800c960:	0800ca47 	.word	0x0800ca47
 800c964:	0800ca47 	.word	0x0800ca47
 800c968:	0800c9f3 	.word	0x0800c9f3
 800c96c:	0800ca47 	.word	0x0800ca47
 800c970:	0800ca47 	.word	0x0800ca47
 800c974:	0800ca47 	.word	0x0800ca47
 800c978:	0800ca03 	.word	0x0800ca03
 800c97c:	0800ca47 	.word	0x0800ca47
 800c980:	0800ca47 	.word	0x0800ca47
 800c984:	0800ca47 	.word	0x0800ca47
 800c988:	0800ca47 	.word	0x0800ca47
 800c98c:	0800ca47 	.word	0x0800ca47
 800c990:	0800ca47 	.word	0x0800ca47
 800c994:	0800ca47 	.word	0x0800ca47
 800c998:	0800ca13 	.word	0x0800ca13
 800c99c:	0800ca47 	.word	0x0800ca47
 800c9a0:	0800ca47 	.word	0x0800ca47
 800c9a4:	0800ca47 	.word	0x0800ca47
 800c9a8:	0800ca47 	.word	0x0800ca47
 800c9ac:	0800ca47 	.word	0x0800ca47
 800c9b0:	0800ca47 	.word	0x0800ca47
 800c9b4:	0800ca47 	.word	0x0800ca47
 800c9b8:	0800ca47 	.word	0x0800ca47
 800c9bc:	0800ca47 	.word	0x0800ca47
 800c9c0:	0800ca47 	.word	0x0800ca47
 800c9c4:	0800ca47 	.word	0x0800ca47
 800c9c8:	0800ca47 	.word	0x0800ca47
 800c9cc:	0800ca47 	.word	0x0800ca47
 800c9d0:	0800ca47 	.word	0x0800ca47
 800c9d4:	0800ca47 	.word	0x0800ca47
 800c9d8:	0800ca39 	.word	0x0800ca39
 800c9dc:	2b40      	cmp	r3, #64	@ 0x40
 800c9de:	d02e      	beq.n	800ca3e <UART_SetConfig+0x8aa>
 800c9e0:	e031      	b.n	800ca46 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9e2:	f7f9 fb0d 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 800c9e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c9e8:	e033      	b.n	800ca52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9ea:	f7f9 fb1f 	bl	800602c <HAL_RCC_GetPCLK2Freq>
 800c9ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c9f0:	e02f      	b.n	800ca52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f7fb fb10 	bl	800801c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca00:	e027      	b.n	800ca52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca02:	f107 0318 	add.w	r3, r7, #24
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fb fc5c 	bl	80082c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca0c:	69fb      	ldr	r3, [r7, #28]
 800ca0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca10:	e01f      	b.n	800ca52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca12:	4b2d      	ldr	r3, [pc, #180]	@ (800cac8 <UART_SetConfig+0x934>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f003 0320 	and.w	r3, r3, #32
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d009      	beq.n	800ca32 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca1e:	4b2a      	ldr	r3, [pc, #168]	@ (800cac8 <UART_SetConfig+0x934>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	08db      	lsrs	r3, r3, #3
 800ca24:	f003 0303 	and.w	r3, r3, #3
 800ca28:	4a24      	ldr	r2, [pc, #144]	@ (800cabc <UART_SetConfig+0x928>)
 800ca2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ca2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca30:	e00f      	b.n	800ca52 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ca32:	4b22      	ldr	r3, [pc, #136]	@ (800cabc <UART_SetConfig+0x928>)
 800ca34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca36:	e00c      	b.n	800ca52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca38:	4b21      	ldr	r3, [pc, #132]	@ (800cac0 <UART_SetConfig+0x92c>)
 800ca3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca3c:	e009      	b.n	800ca52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca44:	e005      	b.n	800ca52 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ca46:	2300      	movs	r3, #0
 800ca48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ca50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ca52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	f000 80e7 	beq.w	800cc28 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca5e:	4a19      	ldr	r2, [pc, #100]	@ (800cac4 <UART_SetConfig+0x930>)
 800ca60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca64:	461a      	mov	r2, r3
 800ca66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca68:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca6c:	005a      	lsls	r2, r3, #1
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	085b      	lsrs	r3, r3, #1
 800ca74:	441a      	add	r2, r3
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca82:	2b0f      	cmp	r3, #15
 800ca84:	d916      	bls.n	800cab4 <UART_SetConfig+0x920>
 800ca86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca8c:	d212      	bcs.n	800cab4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ca8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	f023 030f 	bic.w	r3, r3, #15
 800ca96:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca9a:	085b      	lsrs	r3, r3, #1
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	f003 0307 	and.w	r3, r3, #7
 800caa2:	b29a      	uxth	r2, r3
 800caa4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800caa6:	4313      	orrs	r3, r2
 800caa8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800cab0:	60da      	str	r2, [r3, #12]
 800cab2:	e0b9      	b.n	800cc28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cab4:	2301      	movs	r3, #1
 800cab6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800caba:	e0b5      	b.n	800cc28 <UART_SetConfig+0xa94>
 800cabc:	03d09000 	.word	0x03d09000
 800cac0:	003d0900 	.word	0x003d0900
 800cac4:	08017e8c 	.word	0x08017e8c
 800cac8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800cacc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cad0:	2b20      	cmp	r3, #32
 800cad2:	dc49      	bgt.n	800cb68 <UART_SetConfig+0x9d4>
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	db7c      	blt.n	800cbd2 <UART_SetConfig+0xa3e>
 800cad8:	2b20      	cmp	r3, #32
 800cada:	d87a      	bhi.n	800cbd2 <UART_SetConfig+0xa3e>
 800cadc:	a201      	add	r2, pc, #4	@ (adr r2, 800cae4 <UART_SetConfig+0x950>)
 800cade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae2:	bf00      	nop
 800cae4:	0800cb6f 	.word	0x0800cb6f
 800cae8:	0800cb77 	.word	0x0800cb77
 800caec:	0800cbd3 	.word	0x0800cbd3
 800caf0:	0800cbd3 	.word	0x0800cbd3
 800caf4:	0800cb7f 	.word	0x0800cb7f
 800caf8:	0800cbd3 	.word	0x0800cbd3
 800cafc:	0800cbd3 	.word	0x0800cbd3
 800cb00:	0800cbd3 	.word	0x0800cbd3
 800cb04:	0800cb8f 	.word	0x0800cb8f
 800cb08:	0800cbd3 	.word	0x0800cbd3
 800cb0c:	0800cbd3 	.word	0x0800cbd3
 800cb10:	0800cbd3 	.word	0x0800cbd3
 800cb14:	0800cbd3 	.word	0x0800cbd3
 800cb18:	0800cbd3 	.word	0x0800cbd3
 800cb1c:	0800cbd3 	.word	0x0800cbd3
 800cb20:	0800cbd3 	.word	0x0800cbd3
 800cb24:	0800cb9f 	.word	0x0800cb9f
 800cb28:	0800cbd3 	.word	0x0800cbd3
 800cb2c:	0800cbd3 	.word	0x0800cbd3
 800cb30:	0800cbd3 	.word	0x0800cbd3
 800cb34:	0800cbd3 	.word	0x0800cbd3
 800cb38:	0800cbd3 	.word	0x0800cbd3
 800cb3c:	0800cbd3 	.word	0x0800cbd3
 800cb40:	0800cbd3 	.word	0x0800cbd3
 800cb44:	0800cbd3 	.word	0x0800cbd3
 800cb48:	0800cbd3 	.word	0x0800cbd3
 800cb4c:	0800cbd3 	.word	0x0800cbd3
 800cb50:	0800cbd3 	.word	0x0800cbd3
 800cb54:	0800cbd3 	.word	0x0800cbd3
 800cb58:	0800cbd3 	.word	0x0800cbd3
 800cb5c:	0800cbd3 	.word	0x0800cbd3
 800cb60:	0800cbd3 	.word	0x0800cbd3
 800cb64:	0800cbc5 	.word	0x0800cbc5
 800cb68:	2b40      	cmp	r3, #64	@ 0x40
 800cb6a:	d02e      	beq.n	800cbca <UART_SetConfig+0xa36>
 800cb6c:	e031      	b.n	800cbd2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb6e:	f7f9 fa47 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 800cb72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cb74:	e033      	b.n	800cbde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb76:	f7f9 fa59 	bl	800602c <HAL_RCC_GetPCLK2Freq>
 800cb7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cb7c:	e02f      	b.n	800cbde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fb fa4a 	bl	800801c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb8c:	e027      	b.n	800cbde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb8e:	f107 0318 	add.w	r3, r7, #24
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7fb fb96 	bl	80082c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb98:	69fb      	ldr	r3, [r7, #28]
 800cb9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb9c:	e01f      	b.n	800cbde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb9e:	4b2d      	ldr	r3, [pc, #180]	@ (800cc54 <UART_SetConfig+0xac0>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f003 0320 	and.w	r3, r3, #32
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d009      	beq.n	800cbbe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cbaa:	4b2a      	ldr	r3, [pc, #168]	@ (800cc54 <UART_SetConfig+0xac0>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	08db      	lsrs	r3, r3, #3
 800cbb0:	f003 0303 	and.w	r3, r3, #3
 800cbb4:	4a28      	ldr	r2, [pc, #160]	@ (800cc58 <UART_SetConfig+0xac4>)
 800cbb6:	fa22 f303 	lsr.w	r3, r2, r3
 800cbba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cbbc:	e00f      	b.n	800cbde <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800cbbe:	4b26      	ldr	r3, [pc, #152]	@ (800cc58 <UART_SetConfig+0xac4>)
 800cbc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbc2:	e00c      	b.n	800cbde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cbc4:	4b25      	ldr	r3, [pc, #148]	@ (800cc5c <UART_SetConfig+0xac8>)
 800cbc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbc8:	e009      	b.n	800cbde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbd0:	e005      	b.n	800cbde <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cbdc:	bf00      	nop
    }

    if (pclk != 0U)
 800cbde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d021      	beq.n	800cc28 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbe8:	4a1d      	ldr	r2, [pc, #116]	@ (800cc60 <UART_SetConfig+0xacc>)
 800cbea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbee:	461a      	mov	r2, r3
 800cbf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbf2:	fbb3 f2f2 	udiv	r2, r3, r2
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	085b      	lsrs	r3, r3, #1
 800cbfc:	441a      	add	r2, r3
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc06:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc0a:	2b0f      	cmp	r3, #15
 800cc0c:	d909      	bls.n	800cc22 <UART_SetConfig+0xa8e>
 800cc0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc14:	d205      	bcs.n	800cc22 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cc16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc18:	b29a      	uxth	r2, r3
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	60da      	str	r2, [r3, #12]
 800cc20:	e002      	b.n	800cc28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cc22:	2301      	movs	r3, #1
 800cc24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	2201      	movs	r2, #1
 800cc34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	2200      	movs	r2, #0
 800cc42:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cc44:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3748      	adds	r7, #72	@ 0x48
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc52:	bf00      	nop
 800cc54:	58024400 	.word	0x58024400
 800cc58:	03d09000 	.word	0x03d09000
 800cc5c:	003d0900 	.word	0x003d0900
 800cc60:	08017e8c 	.word	0x08017e8c

0800cc64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc70:	f003 0301 	and.w	r3, r3, #1
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00a      	beq.n	800cc8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	430a      	orrs	r2, r1
 800cc8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc92:	f003 0302 	and.w	r3, r3, #2
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d00a      	beq.n	800ccb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	430a      	orrs	r2, r1
 800ccae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccb4:	f003 0304 	and.w	r3, r3, #4
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d00a      	beq.n	800ccd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	430a      	orrs	r2, r1
 800ccd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccd6:	f003 0308 	and.w	r3, r3, #8
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00a      	beq.n	800ccf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	430a      	orrs	r2, r1
 800ccf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccf8:	f003 0310 	and.w	r3, r3, #16
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d00a      	beq.n	800cd16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	689b      	ldr	r3, [r3, #8]
 800cd06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	430a      	orrs	r2, r1
 800cd14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd1a:	f003 0320 	and.w	r3, r3, #32
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d00a      	beq.n	800cd38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	430a      	orrs	r2, r1
 800cd36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d01a      	beq.n	800cd7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	430a      	orrs	r2, r1
 800cd58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cd62:	d10a      	bne.n	800cd7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	430a      	orrs	r2, r1
 800cd78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d00a      	beq.n	800cd9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	430a      	orrs	r2, r1
 800cd9a:	605a      	str	r2, [r3, #4]
  }
}
 800cd9c:	bf00      	nop
 800cd9e:	370c      	adds	r7, #12
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr

0800cda8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b098      	sub	sp, #96	@ 0x60
 800cdac:	af02      	add	r7, sp, #8
 800cdae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cdb8:	f7f7 f836 	bl	8003e28 <HAL_GetTick>
 800cdbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f003 0308 	and.w	r3, r3, #8
 800cdc8:	2b08      	cmp	r3, #8
 800cdca:	d12f      	bne.n	800ce2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cdd0:	9300      	str	r3, [sp, #0]
 800cdd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f000 f88e 	bl	800cefc <UART_WaitOnFlagUntilTimeout>
 800cde0:	4603      	mov	r3, r0
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d022      	beq.n	800ce2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdee:	e853 3f00 	ldrex	r3, [r3]
 800cdf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cdf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cdfa:	653b      	str	r3, [r7, #80]	@ 0x50
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	461a      	mov	r2, r3
 800ce02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce04:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce06:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ce0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce0c:	e841 2300 	strex	r3, r2, [r1]
 800ce10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ce12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d1e6      	bne.n	800cde6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2220      	movs	r2, #32
 800ce1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce28:	2303      	movs	r3, #3
 800ce2a:	e063      	b.n	800cef4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f003 0304 	and.w	r3, r3, #4
 800ce36:	2b04      	cmp	r3, #4
 800ce38:	d149      	bne.n	800cece <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ce3e:	9300      	str	r3, [sp, #0]
 800ce40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce42:	2200      	movs	r2, #0
 800ce44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 f857 	bl	800cefc <UART_WaitOnFlagUntilTimeout>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d03c      	beq.n	800cece <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce5c:	e853 3f00 	ldrex	r3, [r3]
 800ce60:	623b      	str	r3, [r7, #32]
   return(result);
 800ce62:	6a3b      	ldr	r3, [r7, #32]
 800ce64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	461a      	mov	r2, r3
 800ce70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce72:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce7a:	e841 2300 	strex	r3, r2, [r1]
 800ce7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d1e6      	bne.n	800ce54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	3308      	adds	r3, #8
 800ce8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	e853 3f00 	ldrex	r3, [r3]
 800ce94:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f023 0301 	bic.w	r3, r3, #1
 800ce9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	3308      	adds	r3, #8
 800cea4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cea6:	61fa      	str	r2, [r7, #28]
 800cea8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceaa:	69b9      	ldr	r1, [r7, #24]
 800ceac:	69fa      	ldr	r2, [r7, #28]
 800ceae:	e841 2300 	strex	r3, r2, [r1]
 800ceb2:	617b      	str	r3, [r7, #20]
   return(result);
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d1e5      	bne.n	800ce86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2220      	movs	r2, #32
 800cebe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2200      	movs	r2, #0
 800cec6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ceca:	2303      	movs	r3, #3
 800cecc:	e012      	b.n	800cef4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2220      	movs	r2, #32
 800ced2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2220      	movs	r2, #32
 800ceda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2200      	movs	r2, #0
 800cee2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2200      	movs	r2, #0
 800cee8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2200      	movs	r2, #0
 800ceee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cef2:	2300      	movs	r3, #0
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3758      	adds	r7, #88	@ 0x58
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	603b      	str	r3, [r7, #0]
 800cf08:	4613      	mov	r3, r2
 800cf0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf0c:	e049      	b.n	800cfa2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf14:	d045      	beq.n	800cfa2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf16:	f7f6 ff87 	bl	8003e28 <HAL_GetTick>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	1ad3      	subs	r3, r2, r3
 800cf20:	69ba      	ldr	r2, [r7, #24]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d302      	bcc.n	800cf2c <UART_WaitOnFlagUntilTimeout+0x30>
 800cf26:	69bb      	ldr	r3, [r7, #24]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d101      	bne.n	800cf30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cf2c:	2303      	movs	r3, #3
 800cf2e:	e048      	b.n	800cfc2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f003 0304 	and.w	r3, r3, #4
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d031      	beq.n	800cfa2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	69db      	ldr	r3, [r3, #28]
 800cf44:	f003 0308 	and.w	r3, r3, #8
 800cf48:	2b08      	cmp	r3, #8
 800cf4a:	d110      	bne.n	800cf6e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	2208      	movs	r2, #8
 800cf52:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800cf54:	68f8      	ldr	r0, [r7, #12]
 800cf56:	f000 f95b 	bl	800d210 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	2208      	movs	r2, #8
 800cf5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2200      	movs	r2, #0
 800cf66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	e029      	b.n	800cfc2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	69db      	ldr	r3, [r3, #28]
 800cf74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cf78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf7c:	d111      	bne.n	800cfa2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cf86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf88:	68f8      	ldr	r0, [r7, #12]
 800cf8a:	f000 f941 	bl	800d210 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	2220      	movs	r2, #32
 800cf92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cf9e:	2303      	movs	r3, #3
 800cfa0:	e00f      	b.n	800cfc2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	69da      	ldr	r2, [r3, #28]
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	4013      	ands	r3, r2
 800cfac:	68ba      	ldr	r2, [r7, #8]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	bf0c      	ite	eq
 800cfb2:	2301      	moveq	r3, #1
 800cfb4:	2300      	movne	r3, #0
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	461a      	mov	r2, r3
 800cfba:	79fb      	ldrb	r3, [r7, #7]
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d0a6      	beq.n	800cf0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
	...

0800cfcc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b0a3      	sub	sp, #140	@ 0x8c
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	68ba      	ldr	r2, [r7, #8]
 800cfde:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	88fa      	ldrh	r2, [r7, #6]
 800cfe4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	88fa      	ldrh	r2, [r7, #6]
 800cfec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2200      	movs	r2, #0
 800cff4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	689b      	ldr	r3, [r3, #8]
 800cffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cffe:	d10e      	bne.n	800d01e <UART_Start_Receive_IT+0x52>
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	691b      	ldr	r3, [r3, #16]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d105      	bne.n	800d014 <UART_Start_Receive_IT+0x48>
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800d00e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d012:	e02d      	b.n	800d070 <UART_Start_Receive_IT+0xa4>
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	22ff      	movs	r2, #255	@ 0xff
 800d018:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d01c:	e028      	b.n	800d070 <UART_Start_Receive_IT+0xa4>
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	689b      	ldr	r3, [r3, #8]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d10d      	bne.n	800d042 <UART_Start_Receive_IT+0x76>
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	691b      	ldr	r3, [r3, #16]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d104      	bne.n	800d038 <UART_Start_Receive_IT+0x6c>
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	22ff      	movs	r2, #255	@ 0xff
 800d032:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d036:	e01b      	b.n	800d070 <UART_Start_Receive_IT+0xa4>
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	227f      	movs	r2, #127	@ 0x7f
 800d03c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d040:	e016      	b.n	800d070 <UART_Start_Receive_IT+0xa4>
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	689b      	ldr	r3, [r3, #8]
 800d046:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d04a:	d10d      	bne.n	800d068 <UART_Start_Receive_IT+0x9c>
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	691b      	ldr	r3, [r3, #16]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d104      	bne.n	800d05e <UART_Start_Receive_IT+0x92>
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	227f      	movs	r2, #127	@ 0x7f
 800d058:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d05c:	e008      	b.n	800d070 <UART_Start_Receive_IT+0xa4>
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	223f      	movs	r2, #63	@ 0x3f
 800d062:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d066:	e003      	b.n	800d070 <UART_Start_Receive_IT+0xa4>
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2200      	movs	r2, #0
 800d06c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	2200      	movs	r2, #0
 800d074:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2222      	movs	r2, #34	@ 0x22
 800d07c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	3308      	adds	r3, #8
 800d086:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d088:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d08a:	e853 3f00 	ldrex	r3, [r3]
 800d08e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d090:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d092:	f043 0301 	orr.w	r3, r3, #1
 800d096:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	3308      	adds	r3, #8
 800d0a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d0a4:	673a      	str	r2, [r7, #112]	@ 0x70
 800d0a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0a8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d0aa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d0ac:	e841 2300 	strex	r3, r2, [r1]
 800d0b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800d0b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d1e3      	bne.n	800d080 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d0c0:	d14f      	bne.n	800d162 <UART_Start_Receive_IT+0x196>
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d0c8:	88fa      	ldrh	r2, [r7, #6]
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d349      	bcc.n	800d162 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0d6:	d107      	bne.n	800d0e8 <UART_Start_Receive_IT+0x11c>
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	691b      	ldr	r3, [r3, #16]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d103      	bne.n	800d0e8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	4a47      	ldr	r2, [pc, #284]	@ (800d200 <UART_Start_Receive_IT+0x234>)
 800d0e4:	675a      	str	r2, [r3, #116]	@ 0x74
 800d0e6:	e002      	b.n	800d0ee <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	4a46      	ldr	r2, [pc, #280]	@ (800d204 <UART_Start_Receive_IT+0x238>)
 800d0ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	691b      	ldr	r3, [r3, #16]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d01a      	beq.n	800d12c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0fe:	e853 3f00 	ldrex	r3, [r3]
 800d102:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d106:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d10a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	461a      	mov	r2, r3
 800d114:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d118:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d11a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d11c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d11e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d120:	e841 2300 	strex	r3, r2, [r1]
 800d124:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800d126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1e4      	bne.n	800d0f6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	3308      	adds	r3, #8
 800d132:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d136:	e853 3f00 	ldrex	r3, [r3]
 800d13a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d13e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d142:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	3308      	adds	r3, #8
 800d14a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d14c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d14e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d150:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d152:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d154:	e841 2300 	strex	r3, r2, [r1]
 800d158:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d15a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d1e5      	bne.n	800d12c <UART_Start_Receive_IT+0x160>
 800d160:	e046      	b.n	800d1f0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d16a:	d107      	bne.n	800d17c <UART_Start_Receive_IT+0x1b0>
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d103      	bne.n	800d17c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	4a24      	ldr	r2, [pc, #144]	@ (800d208 <UART_Start_Receive_IT+0x23c>)
 800d178:	675a      	str	r2, [r3, #116]	@ 0x74
 800d17a:	e002      	b.n	800d182 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	4a23      	ldr	r2, [pc, #140]	@ (800d20c <UART_Start_Receive_IT+0x240>)
 800d180:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d019      	beq.n	800d1be <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d192:	e853 3f00 	ldrex	r3, [r3]
 800d196:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d19a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800d19e:	677b      	str	r3, [r7, #116]	@ 0x74
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d1a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1aa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d1ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1b0:	e841 2300 	strex	r3, r2, [r1]
 800d1b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d1b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d1e6      	bne.n	800d18a <UART_Start_Receive_IT+0x1be>
 800d1bc:	e018      	b.n	800d1f0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	e853 3f00 	ldrex	r3, [r3]
 800d1ca:	613b      	str	r3, [r7, #16]
   return(result);
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	f043 0320 	orr.w	r3, r3, #32
 800d1d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	461a      	mov	r2, r3
 800d1da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1dc:	623b      	str	r3, [r7, #32]
 800d1de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e0:	69f9      	ldr	r1, [r7, #28]
 800d1e2:	6a3a      	ldr	r2, [r7, #32]
 800d1e4:	e841 2300 	strex	r3, r2, [r1]
 800d1e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d1ea:	69bb      	ldr	r3, [r7, #24]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d1e6      	bne.n	800d1be <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d1f0:	2300      	movs	r3, #0
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	378c      	adds	r7, #140	@ 0x8c
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr
 800d1fe:	bf00      	nop
 800d200:	0800ddbd 	.word	0x0800ddbd
 800d204:	0800da5d 	.word	0x0800da5d
 800d208:	0800d8a5 	.word	0x0800d8a5
 800d20c:	0800d6ed 	.word	0x0800d6ed

0800d210 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d210:	b480      	push	{r7}
 800d212:	b095      	sub	sp, #84	@ 0x54
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d21e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d220:	e853 3f00 	ldrex	r3, [r3]
 800d224:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d228:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d22c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	461a      	mov	r2, r3
 800d234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d236:	643b      	str	r3, [r7, #64]	@ 0x40
 800d238:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d23a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d23c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d23e:	e841 2300 	strex	r3, r2, [r1]
 800d242:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d246:	2b00      	cmp	r3, #0
 800d248:	d1e6      	bne.n	800d218 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	3308      	adds	r3, #8
 800d250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d252:	6a3b      	ldr	r3, [r7, #32]
 800d254:	e853 3f00 	ldrex	r3, [r3]
 800d258:	61fb      	str	r3, [r7, #28]
   return(result);
 800d25a:	69fa      	ldr	r2, [r7, #28]
 800d25c:	4b1e      	ldr	r3, [pc, #120]	@ (800d2d8 <UART_EndRxTransfer+0xc8>)
 800d25e:	4013      	ands	r3, r2
 800d260:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	3308      	adds	r3, #8
 800d268:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d26a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d26c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d26e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d270:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d272:	e841 2300 	strex	r3, r2, [r1]
 800d276:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d1e5      	bne.n	800d24a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d282:	2b01      	cmp	r3, #1
 800d284:	d118      	bne.n	800d2b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	e853 3f00 	ldrex	r3, [r3]
 800d292:	60bb      	str	r3, [r7, #8]
   return(result);
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	f023 0310 	bic.w	r3, r3, #16
 800d29a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2a4:	61bb      	str	r3, [r7, #24]
 800d2a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a8:	6979      	ldr	r1, [r7, #20]
 800d2aa:	69ba      	ldr	r2, [r7, #24]
 800d2ac:	e841 2300 	strex	r3, r2, [r1]
 800d2b0:	613b      	str	r3, [r7, #16]
   return(result);
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d1e6      	bne.n	800d286 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2220      	movs	r2, #32
 800d2bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d2cc:	bf00      	nop
 800d2ce:	3754      	adds	r7, #84	@ 0x54
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr
 800d2d8:	effffffe 	.word	0xeffffffe

0800d2dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b084      	sub	sp, #16
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d2fa:	68f8      	ldr	r0, [r7, #12]
 800d2fc:	f7fe fe6c 	bl	800bfd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d300:	bf00      	nop
 800d302:	3710      	adds	r7, #16
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d314:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2200      	movs	r2, #0
 800d31a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	220f      	movs	r2, #15
 800d324:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	699a      	ldr	r2, [r3, #24]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f042 0208 	orr.w	r2, r2, #8
 800d334:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2220      	movs	r2, #32
 800d33a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	2200      	movs	r2, #0
 800d342:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	f7fe fe51 	bl	800bfec <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d34a:	bf00      	nop
 800d34c:	3710      	adds	r7, #16
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}

0800d352 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d352:	b480      	push	{r7}
 800d354:	b08f      	sub	sp, #60	@ 0x3c
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d360:	2b21      	cmp	r3, #33	@ 0x21
 800d362:	d14c      	bne.n	800d3fe <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d132      	bne.n	800d3d6 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d376:	6a3b      	ldr	r3, [r7, #32]
 800d378:	e853 3f00 	ldrex	r3, [r3]
 800d37c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d37e:	69fb      	ldr	r3, [r7, #28]
 800d380:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d384:	637b      	str	r3, [r7, #52]	@ 0x34
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	461a      	mov	r2, r3
 800d38c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d38e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d390:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d392:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d394:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d396:	e841 2300 	strex	r3, r2, [r1]
 800d39a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d1e6      	bne.n	800d370 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	e853 3f00 	ldrex	r3, [r3]
 800d3ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	461a      	mov	r2, r3
 800d3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c0:	61bb      	str	r3, [r7, #24]
 800d3c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3c4:	6979      	ldr	r1, [r7, #20]
 800d3c6:	69ba      	ldr	r2, [r7, #24]
 800d3c8:	e841 2300 	strex	r3, r2, [r1]
 800d3cc:	613b      	str	r3, [r7, #16]
   return(result);
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d1e6      	bne.n	800d3a2 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d3d4:	e013      	b.n	800d3fe <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3da:	781a      	ldrb	r2, [r3, #0]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3e6:	1c5a      	adds	r2, r3, #1
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d3f2:	b29b      	uxth	r3, r3
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800d3fe:	bf00      	nop
 800d400:	373c      	adds	r7, #60	@ 0x3c
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr

0800d40a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d40a:	b480      	push	{r7}
 800d40c:	b091      	sub	sp, #68	@ 0x44
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d418:	2b21      	cmp	r3, #33	@ 0x21
 800d41a:	d151      	bne.n	800d4c0 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d422:	b29b      	uxth	r3, r3
 800d424:	2b00      	cmp	r3, #0
 800d426:	d132      	bne.n	800d48e <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d430:	e853 3f00 	ldrex	r3, [r3]
 800d434:	623b      	str	r3, [r7, #32]
   return(result);
 800d436:	6a3b      	ldr	r3, [r7, #32]
 800d438:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d43c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	461a      	mov	r2, r3
 800d444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d446:	633b      	str	r3, [r7, #48]	@ 0x30
 800d448:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d44a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d44c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d44e:	e841 2300 	strex	r3, r2, [r1]
 800d452:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d456:	2b00      	cmp	r3, #0
 800d458:	d1e6      	bne.n	800d428 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	e853 3f00 	ldrex	r3, [r3]
 800d466:	60fb      	str	r3, [r7, #12]
   return(result);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d46e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	461a      	mov	r2, r3
 800d476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d478:	61fb      	str	r3, [r7, #28]
 800d47a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d47c:	69b9      	ldr	r1, [r7, #24]
 800d47e:	69fa      	ldr	r2, [r7, #28]
 800d480:	e841 2300 	strex	r3, r2, [r1]
 800d484:	617b      	str	r3, [r7, #20]
   return(result);
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d1e6      	bne.n	800d45a <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d48c:	e018      	b.n	800d4c0 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d492:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d496:	881b      	ldrh	r3, [r3, #0]
 800d498:	461a      	mov	r2, r3
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d4a2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4a8:	1c9a      	adds	r2, r3, #2
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d4b4:	b29b      	uxth	r3, r3
 800d4b6:	3b01      	subs	r3, #1
 800d4b8:	b29a      	uxth	r2, r3
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800d4c0:	bf00      	nop
 800d4c2:	3744      	adds	r7, #68	@ 0x44
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b091      	sub	sp, #68	@ 0x44
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d4da:	2b21      	cmp	r3, #33	@ 0x21
 800d4dc:	d160      	bne.n	800d5a0 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d4e4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d4e6:	e057      	b.n	800d598 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d133      	bne.n	800d55c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	3308      	adds	r3, #8
 800d4fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4fe:	e853 3f00 	ldrex	r3, [r3]
 800d502:	623b      	str	r3, [r7, #32]
   return(result);
 800d504:	6a3b      	ldr	r3, [r7, #32]
 800d506:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d50a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	3308      	adds	r3, #8
 800d512:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d514:	633a      	str	r2, [r7, #48]	@ 0x30
 800d516:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d518:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d51a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d51c:	e841 2300 	strex	r3, r2, [r1]
 800d520:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d524:	2b00      	cmp	r3, #0
 800d526:	d1e5      	bne.n	800d4f4 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	e853 3f00 	ldrex	r3, [r3]
 800d534:	60fb      	str	r3, [r7, #12]
   return(result);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d53c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	461a      	mov	r2, r3
 800d544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d546:	61fb      	str	r3, [r7, #28]
 800d548:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d54a:	69b9      	ldr	r1, [r7, #24]
 800d54c:	69fa      	ldr	r2, [r7, #28]
 800d54e:	e841 2300 	strex	r3, r2, [r1]
 800d552:	617b      	str	r3, [r7, #20]
   return(result);
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d1e6      	bne.n	800d528 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800d55a:	e021      	b.n	800d5a0 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	69db      	ldr	r3, [r3, #28]
 800d562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d566:	2b00      	cmp	r3, #0
 800d568:	d013      	beq.n	800d592 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d56e:	781a      	ldrb	r2, [r3, #0]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d57a:	1c5a      	adds	r2, r3, #1
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d586:	b29b      	uxth	r3, r3
 800d588:	3b01      	subs	r3, #1
 800d58a:	b29a      	uxth	r2, r3
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d592:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d594:	3b01      	subs	r3, #1
 800d596:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d598:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d1a4      	bne.n	800d4e8 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d59e:	e7ff      	b.n	800d5a0 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800d5a0:	bf00      	nop
 800d5a2:	3744      	adds	r7, #68	@ 0x44
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr

0800d5ac <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b091      	sub	sp, #68	@ 0x44
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d5ba:	2b21      	cmp	r3, #33	@ 0x21
 800d5bc:	d165      	bne.n	800d68a <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d5c4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d5c6:	e05c      	b.n	800d682 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d133      	bne.n	800d63c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	3308      	adds	r3, #8
 800d5da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5dc:	6a3b      	ldr	r3, [r7, #32]
 800d5de:	e853 3f00 	ldrex	r3, [r3]
 800d5e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800d5e4:	69fb      	ldr	r3, [r7, #28]
 800d5e6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d5ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	3308      	adds	r3, #8
 800d5f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d5f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d5fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d5fc:	e841 2300 	strex	r3, r2, [r1]
 800d600:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d604:	2b00      	cmp	r3, #0
 800d606:	d1e5      	bne.n	800d5d4 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	e853 3f00 	ldrex	r3, [r3]
 800d614:	60bb      	str	r3, [r7, #8]
   return(result);
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d61c:	633b      	str	r3, [r7, #48]	@ 0x30
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	461a      	mov	r2, r3
 800d624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d626:	61bb      	str	r3, [r7, #24]
 800d628:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d62a:	6979      	ldr	r1, [r7, #20]
 800d62c:	69ba      	ldr	r2, [r7, #24]
 800d62e:	e841 2300 	strex	r3, r2, [r1]
 800d632:	613b      	str	r3, [r7, #16]
   return(result);
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d1e6      	bne.n	800d608 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800d63a:	e026      	b.n	800d68a <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	69db      	ldr	r3, [r3, #28]
 800d642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d646:	2b00      	cmp	r3, #0
 800d648:	d018      	beq.n	800d67c <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d64e:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d652:	881b      	ldrh	r3, [r3, #0]
 800d654:	461a      	mov	r2, r3
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d65e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d664:	1c9a      	adds	r2, r3, #2
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d670:	b29b      	uxth	r3, r3
 800d672:	3b01      	subs	r3, #1
 800d674:	b29a      	uxth	r2, r3
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d67c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d67e:	3b01      	subs	r3, #1
 800d680:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d682:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d684:	2b00      	cmp	r3, #0
 800d686:	d19f      	bne.n	800d5c8 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d688:	e7ff      	b.n	800d68a <UART_TxISR_16BIT_FIFOEN+0xde>
 800d68a:	bf00      	nop
 800d68c:	3744      	adds	r7, #68	@ 0x44
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr

0800d696 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d696:	b580      	push	{r7, lr}
 800d698:	b088      	sub	sp, #32
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	e853 3f00 	ldrex	r3, [r3]
 800d6aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d6b2:	61fb      	str	r3, [r7, #28]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	69fb      	ldr	r3, [r7, #28]
 800d6bc:	61bb      	str	r3, [r7, #24]
 800d6be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c0:	6979      	ldr	r1, [r7, #20]
 800d6c2:	69ba      	ldr	r2, [r7, #24]
 800d6c4:	e841 2300 	strex	r3, r2, [r1]
 800d6c8:	613b      	str	r3, [r7, #16]
   return(result);
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d1e6      	bne.n	800d69e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2220      	movs	r2, #32
 800d6d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f7f6 faaa 	bl	8003c38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6e4:	bf00      	nop
 800d6e6:	3720      	adds	r7, #32
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b09c      	sub	sp, #112	@ 0x70
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d6fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d704:	2b22      	cmp	r3, #34	@ 0x22
 800d706:	f040 80be 	bne.w	800d886 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d710:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d714:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d718:	b2d9      	uxtb	r1, r3
 800d71a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d71e:	b2da      	uxtb	r2, r3
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d724:	400a      	ands	r2, r1
 800d726:	b2d2      	uxtb	r2, r2
 800d728:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d72e:	1c5a      	adds	r2, r3, #1
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d73a:	b29b      	uxth	r3, r3
 800d73c:	3b01      	subs	r3, #1
 800d73e:	b29a      	uxth	r2, r3
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	2b00      	cmp	r3, #0
 800d750:	f040 80a1 	bne.w	800d896 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d75a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d75c:	e853 3f00 	ldrex	r3, [r3]
 800d760:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d762:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d764:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d768:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	461a      	mov	r2, r3
 800d770:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d772:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d774:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d776:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d778:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d77a:	e841 2300 	strex	r3, r2, [r1]
 800d77e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d780:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d782:	2b00      	cmp	r3, #0
 800d784:	d1e6      	bne.n	800d754 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	3308      	adds	r3, #8
 800d78c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d790:	e853 3f00 	ldrex	r3, [r3]
 800d794:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d798:	f023 0301 	bic.w	r3, r3, #1
 800d79c:	667b      	str	r3, [r7, #100]	@ 0x64
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	3308      	adds	r3, #8
 800d7a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d7a6:	647a      	str	r2, [r7, #68]	@ 0x44
 800d7a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d7ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d7ae:	e841 2300 	strex	r3, r2, [r1]
 800d7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d7b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d1e5      	bne.n	800d786 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2220      	movs	r2, #32
 800d7be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	4a33      	ldr	r2, [pc, #204]	@ (800d8a0 <UART_RxISR_8BIT+0x1b4>)
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d01f      	beq.n	800d818 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d018      	beq.n	800d818 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ee:	e853 3f00 	ldrex	r3, [r3]
 800d7f2:	623b      	str	r3, [r7, #32]
   return(result);
 800d7f4:	6a3b      	ldr	r3, [r7, #32]
 800d7f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d7fa:	663b      	str	r3, [r7, #96]	@ 0x60
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	461a      	mov	r2, r3
 800d802:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d804:	633b      	str	r3, [r7, #48]	@ 0x30
 800d806:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d808:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d80a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d80c:	e841 2300 	strex	r3, r2, [r1]
 800d810:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d814:	2b00      	cmp	r3, #0
 800d816:	d1e6      	bne.n	800d7e6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	d12e      	bne.n	800d87e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2200      	movs	r2, #0
 800d824:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	e853 3f00 	ldrex	r3, [r3]
 800d832:	60fb      	str	r3, [r7, #12]
   return(result);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f023 0310 	bic.w	r3, r3, #16
 800d83a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	461a      	mov	r2, r3
 800d842:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d844:	61fb      	str	r3, [r7, #28]
 800d846:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d848:	69b9      	ldr	r1, [r7, #24]
 800d84a:	69fa      	ldr	r2, [r7, #28]
 800d84c:	e841 2300 	strex	r3, r2, [r1]
 800d850:	617b      	str	r3, [r7, #20]
   return(result);
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d1e6      	bne.n	800d826 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	69db      	ldr	r3, [r3, #28]
 800d85e:	f003 0310 	and.w	r3, r3, #16
 800d862:	2b10      	cmp	r3, #16
 800d864:	d103      	bne.n	800d86e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	2210      	movs	r2, #16
 800d86c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d874:	4619      	mov	r1, r3
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f7fe fbc2 	bl	800c000 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d87c:	e00b      	b.n	800d896 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f7f6 fa18 	bl	8003cb4 <HAL_UART_RxCpltCallback>
}
 800d884:	e007      	b.n	800d896 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	699a      	ldr	r2, [r3, #24]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f042 0208 	orr.w	r2, r2, #8
 800d894:	619a      	str	r2, [r3, #24]
}
 800d896:	bf00      	nop
 800d898:	3770      	adds	r7, #112	@ 0x70
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	58000c00 	.word	0x58000c00

0800d8a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b09c      	sub	sp, #112	@ 0x70
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d8b2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d8bc:	2b22      	cmp	r3, #34	@ 0x22
 800d8be:	f040 80be 	bne.w	800da3e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d8d2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800d8d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d8da:	4013      	ands	r3, r2
 800d8dc:	b29a      	uxth	r2, r3
 800d8de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d8e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8e6:	1c9a      	adds	r2, r3, #2
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	3b01      	subs	r3, #1
 800d8f6:	b29a      	uxth	r2, r3
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d904:	b29b      	uxth	r3, r3
 800d906:	2b00      	cmp	r3, #0
 800d908:	f040 80a1 	bne.w	800da4e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d914:	e853 3f00 	ldrex	r3, [r3]
 800d918:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d91a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d91c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d920:	667b      	str	r3, [r7, #100]	@ 0x64
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	461a      	mov	r2, r3
 800d928:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d92a:	657b      	str	r3, [r7, #84]	@ 0x54
 800d92c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d92e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d930:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d932:	e841 2300 	strex	r3, r2, [r1]
 800d936:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d1e6      	bne.n	800d90c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	3308      	adds	r3, #8
 800d944:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d948:	e853 3f00 	ldrex	r3, [r3]
 800d94c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d950:	f023 0301 	bic.w	r3, r3, #1
 800d954:	663b      	str	r3, [r7, #96]	@ 0x60
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	3308      	adds	r3, #8
 800d95c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d95e:	643a      	str	r2, [r7, #64]	@ 0x40
 800d960:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d962:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d964:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d966:	e841 2300 	strex	r3, r2, [r1]
 800d96a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d1e5      	bne.n	800d93e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2220      	movs	r2, #32
 800d976:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2200      	movs	r2, #0
 800d97e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a33      	ldr	r2, [pc, #204]	@ (800da58 <UART_RxISR_16BIT+0x1b4>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d01f      	beq.n	800d9d0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d018      	beq.n	800d9d0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a4:	6a3b      	ldr	r3, [r7, #32]
 800d9a6:	e853 3f00 	ldrex	r3, [r3]
 800d9aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d9b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d9bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d9be:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d9c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9c4:	e841 2300 	strex	r3, r2, [r1]
 800d9c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d1e6      	bne.n	800d99e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d12e      	bne.n	800da36 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	e853 3f00 	ldrex	r3, [r3]
 800d9ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	f023 0310 	bic.w	r3, r3, #16
 800d9f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d9fc:	61bb      	str	r3, [r7, #24]
 800d9fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da00:	6979      	ldr	r1, [r7, #20]
 800da02:	69ba      	ldr	r2, [r7, #24]
 800da04:	e841 2300 	strex	r3, r2, [r1]
 800da08:	613b      	str	r3, [r7, #16]
   return(result);
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d1e6      	bne.n	800d9de <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	69db      	ldr	r3, [r3, #28]
 800da16:	f003 0310 	and.w	r3, r3, #16
 800da1a:	2b10      	cmp	r3, #16
 800da1c:	d103      	bne.n	800da26 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	2210      	movs	r2, #16
 800da24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800da2c:	4619      	mov	r1, r3
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f7fe fae6 	bl	800c000 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800da34:	e00b      	b.n	800da4e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f7f6 f93c 	bl	8003cb4 <HAL_UART_RxCpltCallback>
}
 800da3c:	e007      	b.n	800da4e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	699a      	ldr	r2, [r3, #24]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	f042 0208 	orr.w	r2, r2, #8
 800da4c:	619a      	str	r2, [r3, #24]
}
 800da4e:	bf00      	nop
 800da50:	3770      	adds	r7, #112	@ 0x70
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	58000c00 	.word	0x58000c00

0800da5c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b0ac      	sub	sp, #176	@ 0xb0
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800da6a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	69db      	ldr	r3, [r3, #28]
 800da74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	689b      	ldr	r3, [r3, #8]
 800da88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800da92:	2b22      	cmp	r3, #34	@ 0x22
 800da94:	f040 8180 	bne.w	800dd98 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800da9e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800daa2:	e123      	b.n	800dcec <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daaa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800daae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800dab2:	b2d9      	uxtb	r1, r3
 800dab4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800dab8:	b2da      	uxtb	r2, r3
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dabe:	400a      	ands	r2, r1
 800dac0:	b2d2      	uxtb	r2, r2
 800dac2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dac8:	1c5a      	adds	r2, r3, #1
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dad4:	b29b      	uxth	r3, r3
 800dad6:	3b01      	subs	r3, #1
 800dad8:	b29a      	uxth	r2, r3
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	69db      	ldr	r3, [r3, #28]
 800dae6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800daea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800daee:	f003 0307 	and.w	r3, r3, #7
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d053      	beq.n	800db9e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800daf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dafa:	f003 0301 	and.w	r3, r3, #1
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d011      	beq.n	800db26 <UART_RxISR_8BIT_FIFOEN+0xca>
 800db02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800db06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d00b      	beq.n	800db26 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	2201      	movs	r2, #1
 800db14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db1c:	f043 0201 	orr.w	r2, r3, #1
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800db26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db2a:	f003 0302 	and.w	r3, r3, #2
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d011      	beq.n	800db56 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800db32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800db36:	f003 0301 	and.w	r3, r3, #1
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00b      	beq.n	800db56 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2202      	movs	r2, #2
 800db44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db4c:	f043 0204 	orr.w	r2, r3, #4
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800db56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db5a:	f003 0304 	and.w	r3, r3, #4
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d011      	beq.n	800db86 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800db62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800db66:	f003 0301 	and.w	r3, r3, #1
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d00b      	beq.n	800db86 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2204      	movs	r2, #4
 800db74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db7c:	f043 0202 	orr.w	r2, r3, #2
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d006      	beq.n	800db9e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f7fe fa21 	bl	800bfd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2200      	movs	r2, #0
 800db9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dba4:	b29b      	uxth	r3, r3
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	f040 80a0 	bne.w	800dcec <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dbb4:	e853 3f00 	ldrex	r3, [r3]
 800dbb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800dbba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dbc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	461a      	mov	r2, r3
 800dbca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dbce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dbd0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800dbd4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800dbd6:	e841 2300 	strex	r3, r2, [r1]
 800dbda:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800dbdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d1e4      	bne.n	800dbac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	3308      	adds	r3, #8
 800dbe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dbec:	e853 3f00 	ldrex	r3, [r3]
 800dbf0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800dbf2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dbf4:	4b6e      	ldr	r3, [pc, #440]	@ (800ddb0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800dbf6:	4013      	ands	r3, r2
 800dbf8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	3308      	adds	r3, #8
 800dc02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800dc06:	66ba      	str	r2, [r7, #104]	@ 0x68
 800dc08:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc0a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800dc0c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800dc0e:	e841 2300 	strex	r3, r2, [r1]
 800dc12:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800dc14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d1e3      	bne.n	800dbe2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2220      	movs	r2, #32
 800dc1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2200      	movs	r2, #0
 800dc26:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4a60      	ldr	r2, [pc, #384]	@ (800ddb4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d021      	beq.n	800dc7c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d01a      	beq.n	800dc7c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc4e:	e853 3f00 	ldrex	r3, [r3]
 800dc52:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800dc54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dc5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	461a      	mov	r2, r3
 800dc64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dc68:	657b      	str	r3, [r7, #84]	@ 0x54
 800dc6a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc6c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dc6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dc70:	e841 2300 	strex	r3, r2, [r1]
 800dc74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800dc76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d1e4      	bne.n	800dc46 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d130      	bne.n	800dce6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2200      	movs	r2, #0
 800dc88:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc92:	e853 3f00 	ldrex	r3, [r3]
 800dc96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dc98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc9a:	f023 0310 	bic.w	r3, r3, #16
 800dc9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	461a      	mov	r2, r3
 800dca8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dcac:	643b      	str	r3, [r7, #64]	@ 0x40
 800dcae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dcb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dcb4:	e841 2300 	strex	r3, r2, [r1]
 800dcb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dcba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d1e4      	bne.n	800dc8a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	69db      	ldr	r3, [r3, #28]
 800dcc6:	f003 0310 	and.w	r3, r3, #16
 800dcca:	2b10      	cmp	r3, #16
 800dccc:	d103      	bne.n	800dcd6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	2210      	movs	r2, #16
 800dcd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dcdc:	4619      	mov	r1, r3
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f7fe f98e 	bl	800c000 <HAL_UARTEx_RxEventCallback>
 800dce4:	e002      	b.n	800dcec <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f7f5 ffe4 	bl	8003cb4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dcec:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d006      	beq.n	800dd02 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800dcf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dcf8:	f003 0320 	and.w	r3, r3, #32
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	f47f aed1 	bne.w	800daa4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dd08:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dd0c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d049      	beq.n	800dda8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dd1a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d242      	bcs.n	800dda8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	3308      	adds	r3, #8
 800dd28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd2a:	6a3b      	ldr	r3, [r7, #32]
 800dd2c:	e853 3f00 	ldrex	r3, [r3]
 800dd30:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd32:	69fb      	ldr	r3, [r7, #28]
 800dd34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dd38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	3308      	adds	r3, #8
 800dd42:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800dd46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dd48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd4e:	e841 2300 	strex	r3, r2, [r1]
 800dd52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dd54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d1e3      	bne.n	800dd22 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	4a16      	ldr	r2, [pc, #88]	@ (800ddb8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800dd5e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	e853 3f00 	ldrex	r3, [r3]
 800dd6c:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	f043 0320 	orr.w	r3, r3, #32
 800dd74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dd82:	61bb      	str	r3, [r7, #24]
 800dd84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd86:	6979      	ldr	r1, [r7, #20]
 800dd88:	69ba      	ldr	r2, [r7, #24]
 800dd8a:	e841 2300 	strex	r3, r2, [r1]
 800dd8e:	613b      	str	r3, [r7, #16]
   return(result);
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d1e4      	bne.n	800dd60 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dd96:	e007      	b.n	800dda8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	699a      	ldr	r2, [r3, #24]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f042 0208 	orr.w	r2, r2, #8
 800dda6:	619a      	str	r2, [r3, #24]
}
 800dda8:	bf00      	nop
 800ddaa:	37b0      	adds	r7, #176	@ 0xb0
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	effffffe 	.word	0xeffffffe
 800ddb4:	58000c00 	.word	0x58000c00
 800ddb8:	0800d6ed 	.word	0x0800d6ed

0800ddbc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b0ae      	sub	sp, #184	@ 0xb8
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ddca:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	69db      	ldr	r3, [r3, #28]
 800ddd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	689b      	ldr	r3, [r3, #8]
 800dde8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ddf2:	2b22      	cmp	r3, #34	@ 0x22
 800ddf4:	f040 8184 	bne.w	800e100 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ddfe:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800de02:	e127      	b.n	800e054 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de0a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800de16:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800de1a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800de1e:	4013      	ands	r3, r2
 800de20:	b29a      	uxth	r2, r3
 800de22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800de26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de2c:	1c9a      	adds	r2, r3, #2
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800de38:	b29b      	uxth	r3, r3
 800de3a:	3b01      	subs	r3, #1
 800de3c:	b29a      	uxth	r2, r3
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	69db      	ldr	r3, [r3, #28]
 800de4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800de4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800de52:	f003 0307 	and.w	r3, r3, #7
 800de56:	2b00      	cmp	r3, #0
 800de58:	d053      	beq.n	800df02 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800de5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800de5e:	f003 0301 	and.w	r3, r3, #1
 800de62:	2b00      	cmp	r3, #0
 800de64:	d011      	beq.n	800de8a <UART_RxISR_16BIT_FIFOEN+0xce>
 800de66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d00b      	beq.n	800de8a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	2201      	movs	r2, #1
 800de78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de80:	f043 0201 	orr.w	r2, r3, #1
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800de8e:	f003 0302 	and.w	r3, r3, #2
 800de92:	2b00      	cmp	r3, #0
 800de94:	d011      	beq.n	800deba <UART_RxISR_16BIT_FIFOEN+0xfe>
 800de96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800de9a:	f003 0301 	and.w	r3, r3, #1
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d00b      	beq.n	800deba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2202      	movs	r2, #2
 800dea8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800deb0:	f043 0204 	orr.w	r2, r3, #4
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800deba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800debe:	f003 0304 	and.w	r3, r3, #4
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d011      	beq.n	800deea <UART_RxISR_16BIT_FIFOEN+0x12e>
 800dec6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800deca:	f003 0301 	and.w	r3, r3, #1
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d00b      	beq.n	800deea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	2204      	movs	r2, #4
 800ded8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dee0:	f043 0202 	orr.w	r2, r3, #2
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800def0:	2b00      	cmp	r3, #0
 800def2:	d006      	beq.n	800df02 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f7fe f86f 	bl	800bfd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2200      	movs	r2, #0
 800defe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800df08:	b29b      	uxth	r3, r3
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	f040 80a2 	bne.w	800e054 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800df18:	e853 3f00 	ldrex	r3, [r3]
 800df1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800df1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800df20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800df24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	461a      	mov	r2, r3
 800df2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800df32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800df36:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800df3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800df3e:	e841 2300 	strex	r3, r2, [r1]
 800df42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800df44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df46:	2b00      	cmp	r3, #0
 800df48:	d1e2      	bne.n	800df10 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	3308      	adds	r3, #8
 800df50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df54:	e853 3f00 	ldrex	r3, [r3]
 800df58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800df5a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800df5c:	4b6e      	ldr	r3, [pc, #440]	@ (800e118 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800df5e:	4013      	ands	r3, r2
 800df60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	3308      	adds	r3, #8
 800df6a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800df6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800df70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800df74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800df76:	e841 2300 	strex	r3, r2, [r1]
 800df7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800df7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d1e3      	bne.n	800df4a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2220      	movs	r2, #32
 800df86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2200      	movs	r2, #0
 800df8e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2200      	movs	r2, #0
 800df94:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4a60      	ldr	r2, [pc, #384]	@ (800e11c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d021      	beq.n	800dfe4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d01a      	beq.n	800dfe4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfb6:	e853 3f00 	ldrex	r3, [r3]
 800dfba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dfbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dfc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	461a      	mov	r2, r3
 800dfcc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800dfd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dfd2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dfd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dfd8:	e841 2300 	strex	r3, r2, [r1]
 800dfdc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dfde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d1e4      	bne.n	800dfae <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfe8:	2b01      	cmp	r3, #1
 800dfea:	d130      	bne.n	800e04e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2200      	movs	r2, #0
 800dff0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dffa:	e853 3f00 	ldrex	r3, [r3]
 800dffe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e002:	f023 0310 	bic.w	r3, r3, #16
 800e006:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	461a      	mov	r2, r3
 800e010:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e014:	647b      	str	r3, [r7, #68]	@ 0x44
 800e016:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e018:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e01a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e01c:	e841 2300 	strex	r3, r2, [r1]
 800e020:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e024:	2b00      	cmp	r3, #0
 800e026:	d1e4      	bne.n	800dff2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	69db      	ldr	r3, [r3, #28]
 800e02e:	f003 0310 	and.w	r3, r3, #16
 800e032:	2b10      	cmp	r3, #16
 800e034:	d103      	bne.n	800e03e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2210      	movs	r2, #16
 800e03c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e044:	4619      	mov	r1, r3
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f7fd ffda 	bl	800c000 <HAL_UARTEx_RxEventCallback>
 800e04c:	e002      	b.n	800e054 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f7f5 fe30 	bl	8003cb4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e054:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d006      	beq.n	800e06a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800e05c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e060:	f003 0320 	and.w	r3, r3, #32
 800e064:	2b00      	cmp	r3, #0
 800e066:	f47f aecd 	bne.w	800de04 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e070:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e074:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d049      	beq.n	800e110 <UART_RxISR_16BIT_FIFOEN+0x354>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e082:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800e086:	429a      	cmp	r2, r3
 800e088:	d242      	bcs.n	800e110 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	3308      	adds	r3, #8
 800e090:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e094:	e853 3f00 	ldrex	r3, [r3]
 800e098:	623b      	str	r3, [r7, #32]
   return(result);
 800e09a:	6a3b      	ldr	r3, [r7, #32]
 800e09c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e0a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	3308      	adds	r3, #8
 800e0aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e0ae:	633a      	str	r2, [r7, #48]	@ 0x30
 800e0b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e0b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0b6:	e841 2300 	strex	r3, r2, [r1]
 800e0ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d1e3      	bne.n	800e08a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	4a16      	ldr	r2, [pc, #88]	@ (800e120 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800e0c6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	e853 3f00 	ldrex	r3, [r3]
 800e0d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f043 0320 	orr.w	r3, r3, #32
 800e0dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e0ea:	61fb      	str	r3, [r7, #28]
 800e0ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0ee:	69b9      	ldr	r1, [r7, #24]
 800e0f0:	69fa      	ldr	r2, [r7, #28]
 800e0f2:	e841 2300 	strex	r3, r2, [r1]
 800e0f6:	617b      	str	r3, [r7, #20]
   return(result);
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d1e4      	bne.n	800e0c8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e0fe:	e007      	b.n	800e110 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	699a      	ldr	r2, [r3, #24]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f042 0208 	orr.w	r2, r2, #8
 800e10e:	619a      	str	r2, [r3, #24]
}
 800e110:	bf00      	nop
 800e112:	37b8      	adds	r7, #184	@ 0xb8
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}
 800e118:	effffffe 	.word	0xeffffffe
 800e11c:	58000c00 	.word	0x58000c00
 800e120:	0800d8a5 	.word	0x0800d8a5

0800e124 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e124:	b480      	push	{r7}
 800e126:	b083      	sub	sp, #12
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e12c:	bf00      	nop
 800e12e:	370c      	adds	r7, #12
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr

0800e138 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e138:	b480      	push	{r7}
 800e13a:	b083      	sub	sp, #12
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e140:	bf00      	nop
 800e142:	370c      	adds	r7, #12
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr

0800e14c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e154:	bf00      	nop
 800e156:	370c      	adds	r7, #12
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr

0800e160 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e160:	b480      	push	{r7}
 800e162:	b085      	sub	sp, #20
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e16e:	2b01      	cmp	r3, #1
 800e170:	d101      	bne.n	800e176 <HAL_UARTEx_DisableFifoMode+0x16>
 800e172:	2302      	movs	r3, #2
 800e174:	e027      	b.n	800e1c6 <HAL_UARTEx_DisableFifoMode+0x66>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2201      	movs	r2, #1
 800e17a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2224      	movs	r2, #36	@ 0x24
 800e182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f022 0201 	bic.w	r2, r2, #1
 800e19c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e1a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	68fa      	ldr	r2, [r7, #12]
 800e1b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2220      	movs	r2, #32
 800e1b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e1c4:	2300      	movs	r3, #0
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3714      	adds	r7, #20
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr

0800e1d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e1d2:	b580      	push	{r7, lr}
 800e1d4:	b084      	sub	sp, #16
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	6078      	str	r0, [r7, #4]
 800e1da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d101      	bne.n	800e1ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e1e6:	2302      	movs	r3, #2
 800e1e8:	e02d      	b.n	800e246 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2224      	movs	r2, #36	@ 0x24
 800e1f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f022 0201 	bic.w	r2, r2, #1
 800e210:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	689b      	ldr	r3, [r3, #8]
 800e218:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	683a      	ldr	r2, [r7, #0]
 800e222:	430a      	orrs	r2, r1
 800e224:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f000 f850 	bl	800e2cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	68fa      	ldr	r2, [r7, #12]
 800e232:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2220      	movs	r2, #32
 800e238:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2200      	movs	r2, #0
 800e240:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e244:	2300      	movs	r3, #0
}
 800e246:	4618      	mov	r0, r3
 800e248:	3710      	adds	r7, #16
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}

0800e24e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e24e:	b580      	push	{r7, lr}
 800e250:	b084      	sub	sp, #16
 800e252:	af00      	add	r7, sp, #0
 800e254:	6078      	str	r0, [r7, #4]
 800e256:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e25e:	2b01      	cmp	r3, #1
 800e260:	d101      	bne.n	800e266 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e262:	2302      	movs	r3, #2
 800e264:	e02d      	b.n	800e2c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2201      	movs	r2, #1
 800e26a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2224      	movs	r2, #36	@ 0x24
 800e272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f022 0201 	bic.w	r2, r2, #1
 800e28c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	689b      	ldr	r3, [r3, #8]
 800e294:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	683a      	ldr	r2, [r7, #0]
 800e29e:	430a      	orrs	r2, r1
 800e2a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f000 f812 	bl	800e2cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	68fa      	ldr	r2, [r7, #12]
 800e2ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2220      	movs	r2, #32
 800e2b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e2c0:	2300      	movs	r3, #0
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3710      	adds	r7, #16
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
	...

0800e2cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b085      	sub	sp, #20
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d108      	bne.n	800e2ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2201      	movs	r2, #1
 800e2e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e2ec:	e031      	b.n	800e352 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e2ee:	2310      	movs	r3, #16
 800e2f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e2f2:	2310      	movs	r3, #16
 800e2f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	689b      	ldr	r3, [r3, #8]
 800e2fc:	0e5b      	lsrs	r3, r3, #25
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	f003 0307 	and.w	r3, r3, #7
 800e304:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	689b      	ldr	r3, [r3, #8]
 800e30c:	0f5b      	lsrs	r3, r3, #29
 800e30e:	b2db      	uxtb	r3, r3
 800e310:	f003 0307 	and.w	r3, r3, #7
 800e314:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e316:	7bbb      	ldrb	r3, [r7, #14]
 800e318:	7b3a      	ldrb	r2, [r7, #12]
 800e31a:	4911      	ldr	r1, [pc, #68]	@ (800e360 <UARTEx_SetNbDataToProcess+0x94>)
 800e31c:	5c8a      	ldrb	r2, [r1, r2]
 800e31e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e322:	7b3a      	ldrb	r2, [r7, #12]
 800e324:	490f      	ldr	r1, [pc, #60]	@ (800e364 <UARTEx_SetNbDataToProcess+0x98>)
 800e326:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e328:	fb93 f3f2 	sdiv	r3, r3, r2
 800e32c:	b29a      	uxth	r2, r3
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e334:	7bfb      	ldrb	r3, [r7, #15]
 800e336:	7b7a      	ldrb	r2, [r7, #13]
 800e338:	4909      	ldr	r1, [pc, #36]	@ (800e360 <UARTEx_SetNbDataToProcess+0x94>)
 800e33a:	5c8a      	ldrb	r2, [r1, r2]
 800e33c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e340:	7b7a      	ldrb	r2, [r7, #13]
 800e342:	4908      	ldr	r1, [pc, #32]	@ (800e364 <UARTEx_SetNbDataToProcess+0x98>)
 800e344:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e346:	fb93 f3f2 	sdiv	r3, r3, r2
 800e34a:	b29a      	uxth	r2, r3
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e352:	bf00      	nop
 800e354:	3714      	adds	r7, #20
 800e356:	46bd      	mov	sp, r7
 800e358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35c:	4770      	bx	lr
 800e35e:	bf00      	nop
 800e360:	08017ea4 	.word	0x08017ea4
 800e364:	08017eac 	.word	0x08017eac

0800e368 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e368:	b084      	sub	sp, #16
 800e36a:	b480      	push	{r7}
 800e36c:	b085      	sub	sp, #20
 800e36e:	af00      	add	r7, sp, #0
 800e370:	6078      	str	r0, [r7, #4]
 800e372:	f107 001c 	add.w	r0, r7, #28
 800e376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e37a:	2300      	movs	r3, #0
 800e37c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800e37e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800e380:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800e382:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800e384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800e386:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800e388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800e38a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800e38e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800e390:	68fa      	ldr	r2, [r7, #12]
 800e392:	4313      	orrs	r3, r2
 800e394:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	685a      	ldr	r2, [r3, #4]
 800e39a:	4b07      	ldr	r3, [pc, #28]	@ (800e3b8 <SDMMC_Init+0x50>)
 800e39c:	4013      	ands	r3, r2
 800e39e:	68fa      	ldr	r2, [r7, #12]
 800e3a0:	431a      	orrs	r2, r3
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e3a6:	2300      	movs	r3, #0
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3714      	adds	r7, #20
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b2:	b004      	add	sp, #16
 800e3b4:	4770      	bx	lr
 800e3b6:	bf00      	nop
 800e3b8:	ffc02c00 	.word	0xffc02c00

0800e3bc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b083      	sub	sp, #12
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	370c      	adds	r7, #12
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d4:	4770      	bx	lr

0800e3d6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800e3d6:	b480      	push	{r7}
 800e3d8:	b083      	sub	sp, #12
 800e3da:	af00      	add	r7, sp, #0
 800e3dc:	6078      	str	r0, [r7, #4]
 800e3de:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	681a      	ldr	r2, [r3, #0]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800e3ea:	2300      	movs	r3, #0
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	370c      	adds	r7, #12
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr

0800e3f8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b083      	sub	sp, #12
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f043 0203 	orr.w	r2, r3, #3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e40c:	2300      	movs	r3, #0
}
 800e40e:	4618      	mov	r0, r3
 800e410:	370c      	adds	r7, #12
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr

0800e41a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800e41a:	b480      	push	{r7}
 800e41c:	b083      	sub	sp, #12
 800e41e:	af00      	add	r7, sp, #0
 800e420:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f003 0303 	and.w	r3, r3, #3
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	370c      	adds	r7, #12
 800e42e:	46bd      	mov	sp, r7
 800e430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e434:	4770      	bx	lr
	...

0800e438 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e438:	b480      	push	{r7}
 800e43a:	b085      	sub	sp, #20
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e442:	2300      	movs	r3, #0
 800e444:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e456:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800e45c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800e462:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e464:	68fa      	ldr	r2, [r7, #12]
 800e466:	4313      	orrs	r3, r2
 800e468:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	68da      	ldr	r2, [r3, #12]
 800e46e:	4b06      	ldr	r3, [pc, #24]	@ (800e488 <SDMMC_SendCommand+0x50>)
 800e470:	4013      	ands	r3, r2
 800e472:	68fa      	ldr	r2, [r7, #12]
 800e474:	431a      	orrs	r2, r3
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e47a:	2300      	movs	r3, #0
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3714      	adds	r7, #20
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr
 800e488:	fffee0c0 	.word	0xfffee0c0

0800e48c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e48c:	b480      	push	{r7}
 800e48e:	b083      	sub	sp, #12
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	691b      	ldr	r3, [r3, #16]
 800e498:	b2db      	uxtb	r3, r3
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	370c      	adds	r7, #12
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a4:	4770      	bx	lr

0800e4a6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e4a6:	b480      	push	{r7}
 800e4a8:	b085      	sub	sp, #20
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	6078      	str	r0, [r7, #4]
 800e4ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	3314      	adds	r3, #20
 800e4b4:	461a      	mov	r2, r3
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	4413      	add	r3, r2
 800e4ba:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3714      	adds	r7, #20
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr

0800e4cc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b085      	sub	sp, #20
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	681a      	ldr	r2, [r3, #0]
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	685a      	ldr	r2, [r3, #4]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e4f2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800e4f8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800e4fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e500:	68fa      	ldr	r2, [r7, #12]
 800e502:	4313      	orrs	r3, r2
 800e504:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e50a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	431a      	orrs	r2, r3
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e516:	2300      	movs	r3, #0

}
 800e518:	4618      	mov	r0, r3
 800e51a:	3714      	adds	r7, #20
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr

0800e524 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b088      	sub	sp, #32
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e532:	2310      	movs	r3, #16
 800e534:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e536:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e53a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e53c:	2300      	movs	r3, #0
 800e53e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e544:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e546:	f107 0308 	add.w	r3, r7, #8
 800e54a:	4619      	mov	r1, r3
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f7ff ff73 	bl	800e438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e552:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e556:	2110      	movs	r1, #16
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f000 fa5f 	bl	800ea1c <SDMMC_GetCmdResp1>
 800e55e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e560:	69fb      	ldr	r3, [r7, #28]
}
 800e562:	4618      	mov	r0, r3
 800e564:	3720      	adds	r7, #32
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}

0800e56a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e56a:	b580      	push	{r7, lr}
 800e56c:	b088      	sub	sp, #32
 800e56e:	af00      	add	r7, sp, #0
 800e570:	6078      	str	r0, [r7, #4]
 800e572:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e578:	2311      	movs	r3, #17
 800e57a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e57c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e580:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e582:	2300      	movs	r3, #0
 800e584:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e586:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e58a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e58c:	f107 0308 	add.w	r3, r7, #8
 800e590:	4619      	mov	r1, r3
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f7ff ff50 	bl	800e438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e59c:	2111      	movs	r1, #17
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 fa3c 	bl	800ea1c <SDMMC_GetCmdResp1>
 800e5a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5a6:	69fb      	ldr	r3, [r7, #28]
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3720      	adds	r7, #32
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}

0800e5b0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b088      	sub	sp, #32
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e5be:	2312      	movs	r3, #18
 800e5c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e5c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e5d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5d2:	f107 0308 	add.w	r3, r7, #8
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f7ff ff2d 	bl	800e438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e5de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e5e2:	2112      	movs	r1, #18
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 fa19 	bl	800ea1c <SDMMC_GetCmdResp1>
 800e5ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5ec:	69fb      	ldr	r3, [r7, #28]
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3720      	adds	r7, #32
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}

0800e5f6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b088      	sub	sp, #32
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
 800e5fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e604:	2318      	movs	r3, #24
 800e606:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e608:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e60c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e60e:	2300      	movs	r3, #0
 800e610:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e612:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e616:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e618:	f107 0308 	add.w	r3, r7, #8
 800e61c:	4619      	mov	r1, r3
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f7ff ff0a 	bl	800e438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e624:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e628:	2118      	movs	r1, #24
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f000 f9f6 	bl	800ea1c <SDMMC_GetCmdResp1>
 800e630:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e632:	69fb      	ldr	r3, [r7, #28]
}
 800e634:	4618      	mov	r0, r3
 800e636:	3720      	adds	r7, #32
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b088      	sub	sp, #32
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e64a:	2319      	movs	r3, #25
 800e64c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e64e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e652:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e654:	2300      	movs	r3, #0
 800e656:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e658:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e65c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e65e:	f107 0308 	add.w	r3, r7, #8
 800e662:	4619      	mov	r1, r3
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f7ff fee7 	bl	800e438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e66a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e66e:	2119      	movs	r1, #25
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f000 f9d3 	bl	800ea1c <SDMMC_GetCmdResp1>
 800e676:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e678:	69fb      	ldr	r3, [r7, #28]
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3720      	adds	r7, #32
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
	...

0800e684 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b088      	sub	sp, #32
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e68c:	2300      	movs	r3, #0
 800e68e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e690:	230c      	movs	r3, #12
 800e692:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e694:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e69a:	2300      	movs	r3, #0
 800e69c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e69e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e6a2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	68db      	ldr	r3, [r3, #12]
 800e6a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	68db      	ldr	r3, [r3, #12]
 800e6b4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6bc:	f107 0308 	add.w	r3, r7, #8
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f7ff feb8 	bl	800e438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e6c8:	4a0b      	ldr	r2, [pc, #44]	@ (800e6f8 <SDMMC_CmdStopTransfer+0x74>)
 800e6ca:	210c      	movs	r1, #12
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 f9a5 	bl	800ea1c <SDMMC_GetCmdResp1>
 800e6d2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	68db      	ldr	r3, [r3, #12]
 800e6d8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e6e6:	d101      	bne.n	800e6ec <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800e6ec:	69fb      	ldr	r3, [r7, #28]
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3720      	adds	r7, #32
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	05f5e100 	.word	0x05f5e100

0800e6fc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b088      	sub	sp, #32
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e70a:	2307      	movs	r3, #7
 800e70c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e70e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e712:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e714:	2300      	movs	r3, #0
 800e716:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e718:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e71c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e71e:	f107 0308 	add.w	r3, r7, #8
 800e722:	4619      	mov	r1, r3
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f7ff fe87 	bl	800e438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e72a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e72e:	2107      	movs	r1, #7
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f000 f973 	bl	800ea1c <SDMMC_GetCmdResp1>
 800e736:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e738:	69fb      	ldr	r3, [r7, #28]
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3720      	adds	r7, #32
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}

0800e742 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e742:	b580      	push	{r7, lr}
 800e744:	b088      	sub	sp, #32
 800e746:	af00      	add	r7, sp, #0
 800e748:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e74a:	2300      	movs	r3, #0
 800e74c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e74e:	2300      	movs	r3, #0
 800e750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e752:	2300      	movs	r3, #0
 800e754:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e756:	2300      	movs	r3, #0
 800e758:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e75a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e75e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e760:	f107 0308 	add.w	r3, r7, #8
 800e764:	4619      	mov	r1, r3
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f7ff fe66 	bl	800e438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f000 fb97 	bl	800eea0 <SDMMC_GetCmdError>
 800e772:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e774:	69fb      	ldr	r3, [r7, #28]
}
 800e776:	4618      	mov	r0, r3
 800e778:	3720      	adds	r7, #32
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}

0800e77e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e77e:	b580      	push	{r7, lr}
 800e780:	b088      	sub	sp, #32
 800e782:	af00      	add	r7, sp, #0
 800e784:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e786:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800e78a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e78c:	2308      	movs	r3, #8
 800e78e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e790:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e796:	2300      	movs	r3, #0
 800e798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e79a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e79e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e7a0:	f107 0308 	add.w	r3, r7, #8
 800e7a4:	4619      	mov	r1, r3
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f7ff fe46 	bl	800e438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f000 fb29 	bl	800ee04 <SDMMC_GetCmdResp7>
 800e7b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7b4:	69fb      	ldr	r3, [r7, #28]
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3720      	adds	r7, #32
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}

0800e7be <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e7be:	b580      	push	{r7, lr}
 800e7c0:	b088      	sub	sp, #32
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	6078      	str	r0, [r7, #4]
 800e7c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e7cc:	2337      	movs	r3, #55	@ 0x37
 800e7ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e7d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e7d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e7da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e7de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e7e0:	f107 0308 	add.w	r3, r7, #8
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	f7ff fe26 	bl	800e438 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e7ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e7f0:	2137      	movs	r1, #55	@ 0x37
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f000 f912 	bl	800ea1c <SDMMC_GetCmdResp1>
 800e7f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7fa:	69fb      	ldr	r3, [r7, #28]
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3720      	adds	r7, #32
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}

0800e804 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b088      	sub	sp, #32
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e812:	2329      	movs	r3, #41	@ 0x29
 800e814:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e816:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e81a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e81c:	2300      	movs	r3, #0
 800e81e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e820:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e824:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e826:	f107 0308 	add.w	r3, r7, #8
 800e82a:	4619      	mov	r1, r3
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f7ff fe03 	bl	800e438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f000 fa2e 	bl	800ec94 <SDMMC_GetCmdResp3>
 800e838:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e83a:	69fb      	ldr	r3, [r7, #28]
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3720      	adds	r7, #32
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b088      	sub	sp, #32
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e852:	2306      	movs	r3, #6
 800e854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e856:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e85a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e85c:	2300      	movs	r3, #0
 800e85e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e860:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e864:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e866:	f107 0308 	add.w	r3, r7, #8
 800e86a:	4619      	mov	r1, r3
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f7ff fde3 	bl	800e438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e872:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e876:	2106      	movs	r1, #6
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f000 f8cf 	bl	800ea1c <SDMMC_GetCmdResp1>
 800e87e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e880:	69fb      	ldr	r3, [r7, #28]
}
 800e882:	4618      	mov	r0, r3
 800e884:	3720      	adds	r7, #32
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}

0800e88a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e88a:	b580      	push	{r7, lr}
 800e88c:	b088      	sub	sp, #32
 800e88e:	af00      	add	r7, sp, #0
 800e890:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e892:	2300      	movs	r3, #0
 800e894:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e896:	2333      	movs	r3, #51	@ 0x33
 800e898:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e89a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e89e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e8a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e8a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e8aa:	f107 0308 	add.w	r3, r7, #8
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f7ff fdc1 	bl	800e438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e8b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e8ba:	2133      	movs	r1, #51	@ 0x33
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f000 f8ad 	bl	800ea1c <SDMMC_GetCmdResp1>
 800e8c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8c4:	69fb      	ldr	r3, [r7, #28]
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3720      	adds	r7, #32
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}

0800e8ce <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e8ce:	b580      	push	{r7, lr}
 800e8d0:	b088      	sub	sp, #32
 800e8d2:	af00      	add	r7, sp, #0
 800e8d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e8da:	2302      	movs	r3, #2
 800e8dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e8de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e8e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e8e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e8ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e8ee:	f107 0308 	add.w	r3, r7, #8
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f7ff fd9f 	bl	800e438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f000 f980 	bl	800ec00 <SDMMC_GetCmdResp2>
 800e900:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e902:	69fb      	ldr	r3, [r7, #28]
}
 800e904:	4618      	mov	r0, r3
 800e906:	3720      	adds	r7, #32
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}

0800e90c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b088      	sub	sp, #32
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
 800e914:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e91a:	2309      	movs	r3, #9
 800e91c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e91e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e922:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e924:	2300      	movs	r3, #0
 800e926:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e928:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e92c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e92e:	f107 0308 	add.w	r3, r7, #8
 800e932:	4619      	mov	r1, r3
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f7ff fd7f 	bl	800e438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f000 f960 	bl	800ec00 <SDMMC_GetCmdResp2>
 800e940:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e942:	69fb      	ldr	r3, [r7, #28]
}
 800e944:	4618      	mov	r0, r3
 800e946:	3720      	adds	r7, #32
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b088      	sub	sp, #32
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e956:	2300      	movs	r3, #0
 800e958:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e95a:	2303      	movs	r3, #3
 800e95c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e95e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e962:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e964:	2300      	movs	r3, #0
 800e966:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e96c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e96e:	f107 0308 	add.w	r3, r7, #8
 800e972:	4619      	mov	r1, r3
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f7ff fd5f 	bl	800e438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e97a:	683a      	ldr	r2, [r7, #0]
 800e97c:	2103      	movs	r1, #3
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f000 f9c8 	bl	800ed14 <SDMMC_GetCmdResp6>
 800e984:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e986:	69fb      	ldr	r3, [r7, #28]
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3720      	adds	r7, #32
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}

0800e990 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b088      	sub	sp, #32
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e99e:	230d      	movs	r3, #13
 800e9a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e9a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e9a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e9ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e9b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e9b2:	f107 0308 	add.w	r3, r7, #8
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f7ff fd3d 	bl	800e438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e9be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e9c2:	210d      	movs	r1, #13
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f000 f829 	bl	800ea1c <SDMMC_GetCmdResp1>
 800e9ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9cc:	69fb      	ldr	r3, [r7, #28]
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3720      	adds	r7, #32
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}

0800e9d6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800e9d6:	b580      	push	{r7, lr}
 800e9d8:	b088      	sub	sp, #32
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800e9e2:	230d      	movs	r3, #13
 800e9e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e9e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e9ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e9f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e9f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e9f6:	f107 0308 	add.w	r3, r7, #8
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f7ff fd1b 	bl	800e438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ea02:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ea06:	210d      	movs	r1, #13
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f000 f807 	bl	800ea1c <SDMMC_GetCmdResp1>
 800ea0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea10:	69fb      	ldr	r3, [r7, #28]
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3720      	adds	r7, #32
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
	...

0800ea1c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b088      	sub	sp, #32
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	60f8      	str	r0, [r7, #12]
 800ea24:	460b      	mov	r3, r1
 800ea26:	607a      	str	r2, [r7, #4]
 800ea28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ea2a:	4b70      	ldr	r3, [pc, #448]	@ (800ebec <SDMMC_GetCmdResp1+0x1d0>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4a70      	ldr	r2, [pc, #448]	@ (800ebf0 <SDMMC_GetCmdResp1+0x1d4>)
 800ea30:	fba2 2303 	umull	r2, r3, r2, r3
 800ea34:	0a5a      	lsrs	r2, r3, #9
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	fb02 f303 	mul.w	r3, r2, r3
 800ea3c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ea3e:	69fb      	ldr	r3, [r7, #28]
 800ea40:	1e5a      	subs	r2, r3, #1
 800ea42:	61fa      	str	r2, [r7, #28]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d102      	bne.n	800ea4e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ea48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ea4c:	e0c9      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea52:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ea54:	69ba      	ldr	r2, [r7, #24]
 800ea56:	4b67      	ldr	r3, [pc, #412]	@ (800ebf4 <SDMMC_GetCmdResp1+0x1d8>)
 800ea58:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d0ef      	beq.n	800ea3e <SDMMC_GetCmdResp1+0x22>
 800ea5e:	69bb      	ldr	r3, [r7, #24]
 800ea60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d1ea      	bne.n	800ea3e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea6c:	f003 0304 	and.w	r3, r3, #4
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d004      	beq.n	800ea7e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	2204      	movs	r2, #4
 800ea78:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea7a:	2304      	movs	r3, #4
 800ea7c:	e0b1      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea82:	f003 0301 	and.w	r3, r3, #1
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d004      	beq.n	800ea94 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea90:	2301      	movs	r3, #1
 800ea92:	e0a6      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	4a58      	ldr	r2, [pc, #352]	@ (800ebf8 <SDMMC_GetCmdResp1+0x1dc>)
 800ea98:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ea9a:	68f8      	ldr	r0, [r7, #12]
 800ea9c:	f7ff fcf6 	bl	800e48c <SDMMC_GetCommandResponse>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	7afb      	ldrb	r3, [r7, #11]
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d001      	beq.n	800eaae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eaaa:	2301      	movs	r3, #1
 800eaac:	e099      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800eaae:	2100      	movs	r1, #0
 800eab0:	68f8      	ldr	r0, [r7, #12]
 800eab2:	f7ff fcf8 	bl	800e4a6 <SDMMC_GetResponse>
 800eab6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800eab8:	697a      	ldr	r2, [r7, #20]
 800eaba:	4b50      	ldr	r3, [pc, #320]	@ (800ebfc <SDMMC_GetCmdResp1+0x1e0>)
 800eabc:	4013      	ands	r3, r2
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d101      	bne.n	800eac6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800eac2:	2300      	movs	r3, #0
 800eac4:	e08d      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	da02      	bge.n	800ead2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800eacc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ead0:	e087      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d001      	beq.n	800eae0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800eadc:	2340      	movs	r3, #64	@ 0x40
 800eade:	e080      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d001      	beq.n	800eaee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800eaea:	2380      	movs	r3, #128	@ 0x80
 800eaec:	e079      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d002      	beq.n	800eafe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800eaf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eafc:	e071      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d002      	beq.n	800eb0e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800eb08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eb0c:	e069      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d002      	beq.n	800eb1e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800eb18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eb1c:	e061      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d002      	beq.n	800eb2e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800eb28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800eb2c:	e059      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d002      	beq.n	800eb3e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800eb38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eb3c:	e051      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d002      	beq.n	800eb4e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eb48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800eb4c:	e049      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d002      	beq.n	800eb5e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800eb58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800eb5c:	e041      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d002      	beq.n	800eb6e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800eb68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eb6c:	e039      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d002      	beq.n	800eb7e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800eb78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800eb7c:	e031      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d002      	beq.n	800eb8e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800eb88:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800eb8c:	e029      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d002      	beq.n	800eb9e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800eb98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800eb9c:	e021      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d002      	beq.n	800ebae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800eba8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ebac:	e019      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d002      	beq.n	800ebbe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ebb8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ebbc:	e011      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d002      	beq.n	800ebce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ebc8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ebcc:	e009      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	f003 0308 	and.w	r3, r3, #8
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d002      	beq.n	800ebde <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ebd8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800ebdc:	e001      	b.n	800ebe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ebde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3720      	adds	r7, #32
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}
 800ebea:	bf00      	nop
 800ebec:	24000000 	.word	0x24000000
 800ebf0:	10624dd3 	.word	0x10624dd3
 800ebf4:	00200045 	.word	0x00200045
 800ebf8:	002000c5 	.word	0x002000c5
 800ebfc:	fdffe008 	.word	0xfdffe008

0800ec00 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ec00:	b480      	push	{r7}
 800ec02:	b085      	sub	sp, #20
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ec08:	4b1f      	ldr	r3, [pc, #124]	@ (800ec88 <SDMMC_GetCmdResp2+0x88>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4a1f      	ldr	r2, [pc, #124]	@ (800ec8c <SDMMC_GetCmdResp2+0x8c>)
 800ec0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ec12:	0a5b      	lsrs	r3, r3, #9
 800ec14:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec18:	fb02 f303 	mul.w	r3, r2, r3
 800ec1c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	1e5a      	subs	r2, r3, #1
 800ec22:	60fa      	str	r2, [r7, #12]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d102      	bne.n	800ec2e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ec28:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ec2c:	e026      	b.n	800ec7c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec32:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d0ef      	beq.n	800ec1e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d1ea      	bne.n	800ec1e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec4c:	f003 0304 	and.w	r3, r3, #4
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d004      	beq.n	800ec5e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2204      	movs	r2, #4
 800ec58:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec5a:	2304      	movs	r3, #4
 800ec5c:	e00e      	b.n	800ec7c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec62:	f003 0301 	and.w	r3, r3, #1
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d004      	beq.n	800ec74 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec70:	2301      	movs	r3, #1
 800ec72:	e003      	b.n	800ec7c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	4a06      	ldr	r2, [pc, #24]	@ (800ec90 <SDMMC_GetCmdResp2+0x90>)
 800ec78:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ec7a:	2300      	movs	r3, #0
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3714      	adds	r7, #20
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr
 800ec88:	24000000 	.word	0x24000000
 800ec8c:	10624dd3 	.word	0x10624dd3
 800ec90:	002000c5 	.word	0x002000c5

0800ec94 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b085      	sub	sp, #20
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ec9c:	4b1a      	ldr	r3, [pc, #104]	@ (800ed08 <SDMMC_GetCmdResp3+0x74>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	4a1a      	ldr	r2, [pc, #104]	@ (800ed0c <SDMMC_GetCmdResp3+0x78>)
 800eca2:	fba2 2303 	umull	r2, r3, r2, r3
 800eca6:	0a5b      	lsrs	r3, r3, #9
 800eca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ecac:	fb02 f303 	mul.w	r3, r2, r3
 800ecb0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	1e5a      	subs	r2, r3, #1
 800ecb6:	60fa      	str	r2, [r7, #12]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d102      	bne.n	800ecc2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ecbc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ecc0:	e01b      	b.n	800ecfa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecc6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d0ef      	beq.n	800ecb2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d1ea      	bne.n	800ecb2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ece0:	f003 0304 	and.w	r3, r3, #4
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d004      	beq.n	800ecf2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2204      	movs	r2, #4
 800ecec:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ecee:	2304      	movs	r3, #4
 800ecf0:	e003      	b.n	800ecfa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	4a06      	ldr	r2, [pc, #24]	@ (800ed10 <SDMMC_GetCmdResp3+0x7c>)
 800ecf6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ecf8:	2300      	movs	r3, #0
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3714      	adds	r7, #20
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed04:	4770      	bx	lr
 800ed06:	bf00      	nop
 800ed08:	24000000 	.word	0x24000000
 800ed0c:	10624dd3 	.word	0x10624dd3
 800ed10:	002000c5 	.word	0x002000c5

0800ed14 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b088      	sub	sp, #32
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	607a      	str	r2, [r7, #4]
 800ed20:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ed22:	4b35      	ldr	r3, [pc, #212]	@ (800edf8 <SDMMC_GetCmdResp6+0xe4>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	4a35      	ldr	r2, [pc, #212]	@ (800edfc <SDMMC_GetCmdResp6+0xe8>)
 800ed28:	fba2 2303 	umull	r2, r3, r2, r3
 800ed2c:	0a5b      	lsrs	r3, r3, #9
 800ed2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed32:	fb02 f303 	mul.w	r3, r2, r3
 800ed36:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	1e5a      	subs	r2, r3, #1
 800ed3c:	61fa      	str	r2, [r7, #28]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d102      	bne.n	800ed48 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed42:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ed46:	e052      	b.n	800edee <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed4c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ed4e:	69bb      	ldr	r3, [r7, #24]
 800ed50:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d0ef      	beq.n	800ed38 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ed58:	69bb      	ldr	r3, [r7, #24]
 800ed5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d1ea      	bne.n	800ed38 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed66:	f003 0304 	and.w	r3, r3, #4
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d004      	beq.n	800ed78 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	2204      	movs	r2, #4
 800ed72:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ed74:	2304      	movs	r3, #4
 800ed76:	e03a      	b.n	800edee <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed7c:	f003 0301 	and.w	r3, r3, #1
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d004      	beq.n	800ed8e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2201      	movs	r2, #1
 800ed88:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	e02f      	b.n	800edee <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ed8e:	68f8      	ldr	r0, [r7, #12]
 800ed90:	f7ff fb7c 	bl	800e48c <SDMMC_GetCommandResponse>
 800ed94:	4603      	mov	r3, r0
 800ed96:	461a      	mov	r2, r3
 800ed98:	7afb      	ldrb	r3, [r7, #11]
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d001      	beq.n	800eda2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed9e:	2301      	movs	r3, #1
 800eda0:	e025      	b.n	800edee <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	4a16      	ldr	r2, [pc, #88]	@ (800ee00 <SDMMC_GetCmdResp6+0xec>)
 800eda6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800eda8:	2100      	movs	r1, #0
 800edaa:	68f8      	ldr	r0, [r7, #12]
 800edac:	f7ff fb7b 	bl	800e4a6 <SDMMC_GetResponse>
 800edb0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d106      	bne.n	800edca <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	0c1b      	lsrs	r3, r3, #16
 800edc0:	b29a      	uxth	r2, r3
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800edc6:	2300      	movs	r3, #0
 800edc8:	e011      	b.n	800edee <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d002      	beq.n	800edda <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800edd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800edd8:	e009      	b.n	800edee <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d002      	beq.n	800edea <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ede4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ede8:	e001      	b.n	800edee <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800edea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3720      	adds	r7, #32
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	bf00      	nop
 800edf8:	24000000 	.word	0x24000000
 800edfc:	10624dd3 	.word	0x10624dd3
 800ee00:	002000c5 	.word	0x002000c5

0800ee04 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b085      	sub	sp, #20
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ee0c:	4b22      	ldr	r3, [pc, #136]	@ (800ee98 <SDMMC_GetCmdResp7+0x94>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	4a22      	ldr	r2, [pc, #136]	@ (800ee9c <SDMMC_GetCmdResp7+0x98>)
 800ee12:	fba2 2303 	umull	r2, r3, r2, r3
 800ee16:	0a5b      	lsrs	r3, r3, #9
 800ee18:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee1c:	fb02 f303 	mul.w	r3, r2, r3
 800ee20:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	1e5a      	subs	r2, r3, #1
 800ee26:	60fa      	str	r2, [r7, #12]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d102      	bne.n	800ee32 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ee2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ee30:	e02c      	b.n	800ee8c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee36:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d0ef      	beq.n	800ee22 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d1ea      	bne.n	800ee22 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee50:	f003 0304 	and.w	r3, r3, #4
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d004      	beq.n	800ee62 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2204      	movs	r2, #4
 800ee5c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ee5e:	2304      	movs	r3, #4
 800ee60:	e014      	b.n	800ee8c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee66:	f003 0301 	and.w	r3, r3, #1
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d004      	beq.n	800ee78 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2201      	movs	r2, #1
 800ee72:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ee74:	2301      	movs	r3, #1
 800ee76:	e009      	b.n	800ee8c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d002      	beq.n	800ee8a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2240      	movs	r2, #64	@ 0x40
 800ee88:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ee8a:	2300      	movs	r3, #0

}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3714      	adds	r7, #20
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr
 800ee98:	24000000 	.word	0x24000000
 800ee9c:	10624dd3 	.word	0x10624dd3

0800eea0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800eea0:	b480      	push	{r7}
 800eea2:	b085      	sub	sp, #20
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eea8:	4b11      	ldr	r3, [pc, #68]	@ (800eef0 <SDMMC_GetCmdError+0x50>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4a11      	ldr	r2, [pc, #68]	@ (800eef4 <SDMMC_GetCmdError+0x54>)
 800eeae:	fba2 2303 	umull	r2, r3, r2, r3
 800eeb2:	0a5b      	lsrs	r3, r3, #9
 800eeb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eeb8:	fb02 f303 	mul.w	r3, r2, r3
 800eebc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	1e5a      	subs	r2, r3, #1
 800eec2:	60fa      	str	r2, [r7, #12]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d102      	bne.n	800eece <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eec8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800eecc:	e009      	b.n	800eee2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d0f1      	beq.n	800eebe <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	4a06      	ldr	r2, [pc, #24]	@ (800eef8 <SDMMC_GetCmdError+0x58>)
 800eede:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800eee0:	2300      	movs	r3, #0
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3714      	adds	r7, #20
 800eee6:	46bd      	mov	sp, r7
 800eee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeec:	4770      	bx	lr
 800eeee:	bf00      	nop
 800eef0:	24000000 	.word	0x24000000
 800eef4:	10624dd3 	.word	0x10624dd3
 800eef8:	002000c5 	.word	0x002000c5

0800eefc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ef00:	4904      	ldr	r1, [pc, #16]	@ (800ef14 <MX_FATFS_Init+0x18>)
 800ef02:	4805      	ldr	r0, [pc, #20]	@ (800ef18 <MX_FATFS_Init+0x1c>)
 800ef04:	f003 f916 	bl	8012134 <FATFS_LinkDriver>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	4b03      	ldr	r3, [pc, #12]	@ (800ef1c <MX_FATFS_Init+0x20>)
 800ef0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ef10:	bf00      	nop
 800ef12:	bd80      	pop	{r7, pc}
 800ef14:	24000a40 	.word	0x24000a40
 800ef18:	08017eb4 	.word	0x08017eb4
 800ef1c:	24000a3c 	.word	0x24000a3c

0800ef20 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ef20:	b480      	push	{r7}
 800ef22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ef24:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr

0800ef30 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ef36:	2300      	movs	r3, #0
 800ef38:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ef3a:	f000 f885 	bl	800f048 <BSP_SD_IsDetected>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	d001      	beq.n	800ef48 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ef44:	2302      	movs	r3, #2
 800ef46:	e012      	b.n	800ef6e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ef48:	480b      	ldr	r0, [pc, #44]	@ (800ef78 <BSP_SD_Init+0x48>)
 800ef4a:	f7f9 fdc5 	bl	8008ad8 <HAL_SD_Init>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ef52:	79fb      	ldrb	r3, [r7, #7]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d109      	bne.n	800ef6c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ef58:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ef5c:	4806      	ldr	r0, [pc, #24]	@ (800ef78 <BSP_SD_Init+0x48>)
 800ef5e:	f7fa fc7b 	bl	8009858 <HAL_SD_ConfigWideBusOperation>
 800ef62:	4603      	mov	r3, r0
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d001      	beq.n	800ef6c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ef68:	2301      	movs	r3, #1
 800ef6a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ef6c:	79fb      	ldrb	r3, [r7, #7]
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3708      	adds	r7, #8
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop
 800ef78:	2400008c 	.word	0x2400008c

0800ef7c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b086      	sub	sp, #24
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	60f8      	str	r0, [r7, #12]
 800ef84:	60b9      	str	r1, [r7, #8]
 800ef86:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	68ba      	ldr	r2, [r7, #8]
 800ef90:	68f9      	ldr	r1, [r7, #12]
 800ef92:	4806      	ldr	r0, [pc, #24]	@ (800efac <BSP_SD_ReadBlocks_DMA+0x30>)
 800ef94:	f7f9 fec0 	bl	8008d18 <HAL_SD_ReadBlocks_DMA>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d001      	beq.n	800efa2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ef9e:	2301      	movs	r3, #1
 800efa0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800efa2:	7dfb      	ldrb	r3, [r7, #23]
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	3718      	adds	r7, #24
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}
 800efac:	2400008c 	.word	0x2400008c

0800efb0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b086      	sub	sp, #24
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	60f8      	str	r0, [r7, #12]
 800efb8:	60b9      	str	r1, [r7, #8]
 800efba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800efbc:	2300      	movs	r3, #0
 800efbe:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	68ba      	ldr	r2, [r7, #8]
 800efc4:	68f9      	ldr	r1, [r7, #12]
 800efc6:	4806      	ldr	r0, [pc, #24]	@ (800efe0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800efc8:	f7f9 ff4e 	bl	8008e68 <HAL_SD_WriteBlocks_DMA>
 800efcc:	4603      	mov	r3, r0
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d001      	beq.n	800efd6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800efd2:	2301      	movs	r3, #1
 800efd4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800efd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800efd8:	4618      	mov	r0, r3
 800efda:	3718      	adds	r7, #24
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}
 800efe0:	2400008c 	.word	0x2400008c

0800efe4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800efe8:	4805      	ldr	r0, [pc, #20]	@ (800f000 <BSP_SD_GetCardState+0x1c>)
 800efea:	f7fa fd47 	bl	8009a7c <HAL_SD_GetCardState>
 800efee:	4603      	mov	r3, r0
 800eff0:	2b04      	cmp	r3, #4
 800eff2:	bf14      	ite	ne
 800eff4:	2301      	movne	r3, #1
 800eff6:	2300      	moveq	r3, #0
 800eff8:	b2db      	uxtb	r3, r3
}
 800effa:	4618      	mov	r0, r3
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	2400008c 	.word	0x2400008c

0800f004 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f00c:	6879      	ldr	r1, [r7, #4]
 800f00e:	4803      	ldr	r0, [pc, #12]	@ (800f01c <BSP_SD_GetCardInfo+0x18>)
 800f010:	f7fa fbf6 	bl	8009800 <HAL_SD_GetCardInfo>
}
 800f014:	bf00      	nop
 800f016:	3708      	adds	r7, #8
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}
 800f01c:	2400008c 	.word	0x2400008c

0800f020 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b082      	sub	sp, #8
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800f028:	f000 f990 	bl	800f34c <BSP_SD_WriteCpltCallback>
}
 800f02c:	bf00      	nop
 800f02e:	3708      	adds	r7, #8
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b082      	sub	sp, #8
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f03c:	f000 f998 	bl	800f370 <BSP_SD_ReadCpltCallback>
}
 800f040:	bf00      	nop
 800f042:	3708      	adds	r7, #8
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}

0800f048 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f048:	b480      	push	{r7}
 800f04a:	b083      	sub	sp, #12
 800f04c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f04e:	2301      	movs	r3, #1
 800f050:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800f052:	79fb      	ldrb	r3, [r7, #7]
 800f054:	b2db      	uxtb	r3, r3
}
 800f056:	4618      	mov	r0, r3
 800f058:	370c      	adds	r7, #12
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr

0800f062 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f062:	b580      	push	{r7, lr}
 800f064:	b084      	sub	sp, #16
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800f06a:	f003 f969 	bl	8012340 <osKernelGetTickCount>
 800f06e:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800f070:	e006      	b.n	800f080 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f072:	f7ff ffb7 	bl	800efe4 <BSP_SD_GetCardState>
 800f076:	4603      	mov	r3, r0
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d101      	bne.n	800f080 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f07c:	2300      	movs	r3, #0
 800f07e:	e009      	b.n	800f094 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800f080:	f003 f95e 	bl	8012340 <osKernelGetTickCount>
 800f084:	4602      	mov	r2, r0
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	1ad3      	subs	r3, r2, r3
 800f08a:	687a      	ldr	r2, [r7, #4]
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d8f0      	bhi.n	800f072 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f090:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800f094:	4618      	mov	r0, r3
 800f096:	3710      	adds	r7, #16
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}

0800f09c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b082      	sub	sp, #8
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f0a6:	4b0b      	ldr	r3, [pc, #44]	@ (800f0d4 <SD_CheckStatus+0x38>)
 800f0a8:	2201      	movs	r2, #1
 800f0aa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f0ac:	f7ff ff9a 	bl	800efe4 <BSP_SD_GetCardState>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d107      	bne.n	800f0c6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f0b6:	4b07      	ldr	r3, [pc, #28]	@ (800f0d4 <SD_CheckStatus+0x38>)
 800f0b8:	781b      	ldrb	r3, [r3, #0]
 800f0ba:	b2db      	uxtb	r3, r3
 800f0bc:	f023 0301 	bic.w	r3, r3, #1
 800f0c0:	b2da      	uxtb	r2, r3
 800f0c2:	4b04      	ldr	r3, [pc, #16]	@ (800f0d4 <SD_CheckStatus+0x38>)
 800f0c4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f0c6:	4b03      	ldr	r3, [pc, #12]	@ (800f0d4 <SD_CheckStatus+0x38>)
 800f0c8:	781b      	ldrb	r3, [r3, #0]
 800f0ca:	b2db      	uxtb	r3, r3
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3708      	adds	r7, #8
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}
 800f0d4:	2400000d 	.word	0x2400000d

0800f0d8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b082      	sub	sp, #8
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	4603      	mov	r3, r0
 800f0e0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f0e2:	4b1c      	ldr	r3, [pc, #112]	@ (800f154 <SD_initialize+0x7c>)
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800f0e8:	f003 f8e2 	bl	80122b0 <osKernelGetState>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	2b02      	cmp	r3, #2
 800f0f0:	d129      	bne.n	800f146 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800f0f2:	f7ff ff1d 	bl	800ef30 <BSP_SD_Init>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d107      	bne.n	800f10c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800f0fc:	79fb      	ldrb	r3, [r7, #7]
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7ff ffcc 	bl	800f09c <SD_CheckStatus>
 800f104:	4603      	mov	r3, r0
 800f106:	461a      	mov	r2, r3
 800f108:	4b12      	ldr	r3, [pc, #72]	@ (800f154 <SD_initialize+0x7c>)
 800f10a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800f10c:	4b11      	ldr	r3, [pc, #68]	@ (800f154 <SD_initialize+0x7c>)
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	b2db      	uxtb	r3, r3
 800f112:	2b01      	cmp	r3, #1
 800f114:	d017      	beq.n	800f146 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800f116:	4b10      	ldr	r3, [pc, #64]	@ (800f158 <SD_initialize+0x80>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d107      	bne.n	800f12e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800f11e:	2200      	movs	r2, #0
 800f120:	2102      	movs	r1, #2
 800f122:	200a      	movs	r0, #10
 800f124:	f003 fb1c 	bl	8012760 <osMessageQueueNew>
 800f128:	4603      	mov	r3, r0
 800f12a:	4a0b      	ldr	r2, [pc, #44]	@ (800f158 <SD_initialize+0x80>)
 800f12c:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800f12e:	4b0a      	ldr	r3, [pc, #40]	@ (800f158 <SD_initialize+0x80>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d107      	bne.n	800f146 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800f136:	4b07      	ldr	r3, [pc, #28]	@ (800f154 <SD_initialize+0x7c>)
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	b2db      	uxtb	r3, r3
 800f13c:	f043 0301 	orr.w	r3, r3, #1
 800f140:	b2da      	uxtb	r2, r3
 800f142:	4b04      	ldr	r3, [pc, #16]	@ (800f154 <SD_initialize+0x7c>)
 800f144:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800f146:	4b03      	ldr	r3, [pc, #12]	@ (800f154 <SD_initialize+0x7c>)
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	b2db      	uxtb	r3, r3
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3708      	adds	r7, #8
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}
 800f154:	2400000d 	.word	0x2400000d
 800f158:	24000a44 	.word	0x24000a44

0800f15c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
 800f162:	4603      	mov	r3, r0
 800f164:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f166:	79fb      	ldrb	r3, [r7, #7]
 800f168:	4618      	mov	r0, r3
 800f16a:	f7ff ff97 	bl	800f09c <SD_CheckStatus>
 800f16e:	4603      	mov	r3, r0
}
 800f170:	4618      	mov	r0, r3
 800f172:	3708      	adds	r7, #8
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}

0800f178 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b088      	sub	sp, #32
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	60b9      	str	r1, [r7, #8]
 800f180:	607a      	str	r2, [r7, #4]
 800f182:	603b      	str	r3, [r7, #0]
 800f184:	4603      	mov	r3, r0
 800f186:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800f188:	2301      	movs	r3, #1
 800f18a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f18c:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f190:	f7ff ff67 	bl	800f062 <SD_CheckStatusWithTimeout>
 800f194:	4603      	mov	r3, r0
 800f196:	2b00      	cmp	r3, #0
 800f198:	da01      	bge.n	800f19e <SD_read+0x26>
  {
    return res;
 800f19a:	7ffb      	ldrb	r3, [r7, #31]
 800f19c:	e02f      	b.n	800f1fe <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800f19e:	683a      	ldr	r2, [r7, #0]
 800f1a0:	6879      	ldr	r1, [r7, #4]
 800f1a2:	68b8      	ldr	r0, [r7, #8]
 800f1a4:	f7ff feea 	bl	800ef7c <BSP_SD_ReadBlocks_DMA>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800f1ac:	7fbb      	ldrb	r3, [r7, #30]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d124      	bne.n	800f1fc <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f1b2:	4b15      	ldr	r3, [pc, #84]	@ (800f208 <SD_read+0x90>)
 800f1b4:	6818      	ldr	r0, [r3, #0]
 800f1b6:	f107 0112 	add.w	r1, r7, #18
 800f1ba:	f247 5330 	movw	r3, #30000	@ 0x7530
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f003 fba2 	bl	8012908 <osMessageQueueGet>
 800f1c4:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800f1c6:	69bb      	ldr	r3, [r7, #24]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d117      	bne.n	800f1fc <SD_read+0x84>
 800f1cc:	8a7b      	ldrh	r3, [r7, #18]
 800f1ce:	2b01      	cmp	r3, #1
 800f1d0:	d114      	bne.n	800f1fc <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800f1d2:	f003 f8b5 	bl	8012340 <osKernelGetTickCount>
 800f1d6:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f1d8:	e007      	b.n	800f1ea <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f1da:	f7ff ff03 	bl	800efe4 <BSP_SD_GetCardState>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d102      	bne.n	800f1ea <SD_read+0x72>
              {
                res = RES_OK;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800f1e8:	e008      	b.n	800f1fc <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f1ea:	f003 f8a9 	bl	8012340 <osKernelGetTickCount>
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	697b      	ldr	r3, [r7, #20]
 800f1f2:	1ad3      	subs	r3, r2, r3
 800f1f4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f1f8:	4293      	cmp	r3, r2
 800f1fa:	d9ee      	bls.n	800f1da <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800f1fc:	7ffb      	ldrb	r3, [r7, #31]
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3720      	adds	r7, #32
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
 800f206:	bf00      	nop
 800f208:	24000a44 	.word	0x24000a44

0800f20c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b088      	sub	sp, #32
 800f210:	af00      	add	r7, sp, #0
 800f212:	60b9      	str	r1, [r7, #8]
 800f214:	607a      	str	r2, [r7, #4]
 800f216:	603b      	str	r3, [r7, #0]
 800f218:	4603      	mov	r3, r0
 800f21a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f21c:	2301      	movs	r3, #1
 800f21e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f220:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f224:	f7ff ff1d 	bl	800f062 <SD_CheckStatusWithTimeout>
 800f228:	4603      	mov	r3, r0
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	da01      	bge.n	800f232 <SD_write+0x26>
  {
    return res;
 800f22e:	7ffb      	ldrb	r3, [r7, #31]
 800f230:	e02d      	b.n	800f28e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f232:	683a      	ldr	r2, [r7, #0]
 800f234:	6879      	ldr	r1, [r7, #4]
 800f236:	68b8      	ldr	r0, [r7, #8]
 800f238:	f7ff feba 	bl	800efb0 <BSP_SD_WriteBlocks_DMA>
 800f23c:	4603      	mov	r3, r0
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d124      	bne.n	800f28c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f242:	4b15      	ldr	r3, [pc, #84]	@ (800f298 <SD_write+0x8c>)
 800f244:	6818      	ldr	r0, [r3, #0]
 800f246:	f107 0112 	add.w	r1, r7, #18
 800f24a:	f247 5330 	movw	r3, #30000	@ 0x7530
 800f24e:	2200      	movs	r2, #0
 800f250:	f003 fb5a 	bl	8012908 <osMessageQueueGet>
 800f254:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800f256:	69bb      	ldr	r3, [r7, #24]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d117      	bne.n	800f28c <SD_write+0x80>
 800f25c:	8a7b      	ldrh	r3, [r7, #18]
 800f25e:	2b02      	cmp	r3, #2
 800f260:	d114      	bne.n	800f28c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800f262:	f003 f86d 	bl	8012340 <osKernelGetTickCount>
 800f266:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800f268:	e007      	b.n	800f27a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f26a:	f7ff febb 	bl	800efe4 <BSP_SD_GetCardState>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d102      	bne.n	800f27a <SD_write+0x6e>
          {
            res = RES_OK;
 800f274:	2300      	movs	r3, #0
 800f276:	77fb      	strb	r3, [r7, #31]
            break;
 800f278:	e008      	b.n	800f28c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800f27a:	f003 f861 	bl	8012340 <osKernelGetTickCount>
 800f27e:	4602      	mov	r2, r0
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	1ad3      	subs	r3, r2, r3
 800f284:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f288:	4293      	cmp	r3, r2
 800f28a:	d9ee      	bls.n	800f26a <SD_write+0x5e>
    }

  }
#endif

  return res;
 800f28c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3720      	adds	r7, #32
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
 800f296:	bf00      	nop
 800f298:	24000a44 	.word	0x24000a44

0800f29c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b08c      	sub	sp, #48	@ 0x30
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	603a      	str	r2, [r7, #0]
 800f2a6:	71fb      	strb	r3, [r7, #7]
 800f2a8:	460b      	mov	r3, r1
 800f2aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f2b2:	4b25      	ldr	r3, [pc, #148]	@ (800f348 <SD_ioctl+0xac>)
 800f2b4:	781b      	ldrb	r3, [r3, #0]
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	f003 0301 	and.w	r3, r3, #1
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d001      	beq.n	800f2c4 <SD_ioctl+0x28>
 800f2c0:	2303      	movs	r3, #3
 800f2c2:	e03c      	b.n	800f33e <SD_ioctl+0xa2>

  switch (cmd)
 800f2c4:	79bb      	ldrb	r3, [r7, #6]
 800f2c6:	2b03      	cmp	r3, #3
 800f2c8:	d834      	bhi.n	800f334 <SD_ioctl+0x98>
 800f2ca:	a201      	add	r2, pc, #4	@ (adr r2, 800f2d0 <SD_ioctl+0x34>)
 800f2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2d0:	0800f2e1 	.word	0x0800f2e1
 800f2d4:	0800f2e9 	.word	0x0800f2e9
 800f2d8:	0800f301 	.word	0x0800f301
 800f2dc:	0800f31b 	.word	0x0800f31b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f2e6:	e028      	b.n	800f33a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f2e8:	f107 0308 	add.w	r3, r7, #8
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f7ff fe89 	bl	800f004 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f2f2:	6a3a      	ldr	r2, [r7, #32]
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f2fe:	e01c      	b.n	800f33a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f300:	f107 0308 	add.w	r3, r7, #8
 800f304:	4618      	mov	r0, r3
 800f306:	f7ff fe7d 	bl	800f004 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f30c:	b29a      	uxth	r2, r3
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f312:	2300      	movs	r3, #0
 800f314:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f318:	e00f      	b.n	800f33a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f31a:	f107 0308 	add.w	r3, r7, #8
 800f31e:	4618      	mov	r0, r3
 800f320:	f7ff fe70 	bl	800f004 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f326:	0a5a      	lsrs	r2, r3, #9
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f32c:	2300      	movs	r3, #0
 800f32e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f332:	e002      	b.n	800f33a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f334:	2304      	movs	r3, #4
 800f336:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f33a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3730      	adds	r7, #48	@ 0x30
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}
 800f346:	bf00      	nop
 800f348:	2400000d 	.word	0x2400000d

0800f34c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800f352:	2302      	movs	r3, #2
 800f354:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800f356:	4b05      	ldr	r3, [pc, #20]	@ (800f36c <BSP_SD_WriteCpltCallback+0x20>)
 800f358:	6818      	ldr	r0, [r3, #0]
 800f35a:	1db9      	adds	r1, r7, #6
 800f35c:	2300      	movs	r3, #0
 800f35e:	2200      	movs	r2, #0
 800f360:	f003 fa72 	bl	8012848 <osMessageQueuePut>
#endif
}
 800f364:	bf00      	nop
 800f366:	3708      	adds	r7, #8
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	24000a44 	.word	0x24000a44

0800f370 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b082      	sub	sp, #8
 800f374:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800f376:	2301      	movs	r3, #1
 800f378:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800f37a:	4b05      	ldr	r3, [pc, #20]	@ (800f390 <BSP_SD_ReadCpltCallback+0x20>)
 800f37c:	6818      	ldr	r0, [r3, #0]
 800f37e:	1db9      	adds	r1, r7, #6
 800f380:	2300      	movs	r3, #0
 800f382:	2200      	movs	r2, #0
 800f384:	f003 fa60 	bl	8012848 <osMessageQueuePut>
#endif
}
 800f388:	bf00      	nop
 800f38a:	3708      	adds	r7, #8
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}
 800f390:	24000a44 	.word	0x24000a44

0800f394 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
 800f39a:	4603      	mov	r3, r0
 800f39c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f39e:	79fb      	ldrb	r3, [r7, #7]
 800f3a0:	4a08      	ldr	r2, [pc, #32]	@ (800f3c4 <disk_status+0x30>)
 800f3a2:	009b      	lsls	r3, r3, #2
 800f3a4:	4413      	add	r3, r2
 800f3a6:	685b      	ldr	r3, [r3, #4]
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	79fa      	ldrb	r2, [r7, #7]
 800f3ac:	4905      	ldr	r1, [pc, #20]	@ (800f3c4 <disk_status+0x30>)
 800f3ae:	440a      	add	r2, r1
 800f3b0:	7a12      	ldrb	r2, [r2, #8]
 800f3b2:	4610      	mov	r0, r2
 800f3b4:	4798      	blx	r3
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3710      	adds	r7, #16
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}
 800f3c4:	24000a70 	.word	0x24000a70

0800f3c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b084      	sub	sp, #16
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f3d6:	79fb      	ldrb	r3, [r7, #7]
 800f3d8:	4a0d      	ldr	r2, [pc, #52]	@ (800f410 <disk_initialize+0x48>)
 800f3da:	5cd3      	ldrb	r3, [r2, r3]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d111      	bne.n	800f404 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f3e0:	79fb      	ldrb	r3, [r7, #7]
 800f3e2:	4a0b      	ldr	r2, [pc, #44]	@ (800f410 <disk_initialize+0x48>)
 800f3e4:	2101      	movs	r1, #1
 800f3e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f3e8:	79fb      	ldrb	r3, [r7, #7]
 800f3ea:	4a09      	ldr	r2, [pc, #36]	@ (800f410 <disk_initialize+0x48>)
 800f3ec:	009b      	lsls	r3, r3, #2
 800f3ee:	4413      	add	r3, r2
 800f3f0:	685b      	ldr	r3, [r3, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	79fa      	ldrb	r2, [r7, #7]
 800f3f6:	4906      	ldr	r1, [pc, #24]	@ (800f410 <disk_initialize+0x48>)
 800f3f8:	440a      	add	r2, r1
 800f3fa:	7a12      	ldrb	r2, [r2, #8]
 800f3fc:	4610      	mov	r0, r2
 800f3fe:	4798      	blx	r3
 800f400:	4603      	mov	r3, r0
 800f402:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f404:	7bfb      	ldrb	r3, [r7, #15]
}
 800f406:	4618      	mov	r0, r3
 800f408:	3710      	adds	r7, #16
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}
 800f40e:	bf00      	nop
 800f410:	24000a70 	.word	0x24000a70

0800f414 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f414:	b590      	push	{r4, r7, lr}
 800f416:	b087      	sub	sp, #28
 800f418:	af00      	add	r7, sp, #0
 800f41a:	60b9      	str	r1, [r7, #8]
 800f41c:	607a      	str	r2, [r7, #4]
 800f41e:	603b      	str	r3, [r7, #0]
 800f420:	4603      	mov	r3, r0
 800f422:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f424:	7bfb      	ldrb	r3, [r7, #15]
 800f426:	4a0a      	ldr	r2, [pc, #40]	@ (800f450 <disk_read+0x3c>)
 800f428:	009b      	lsls	r3, r3, #2
 800f42a:	4413      	add	r3, r2
 800f42c:	685b      	ldr	r3, [r3, #4]
 800f42e:	689c      	ldr	r4, [r3, #8]
 800f430:	7bfb      	ldrb	r3, [r7, #15]
 800f432:	4a07      	ldr	r2, [pc, #28]	@ (800f450 <disk_read+0x3c>)
 800f434:	4413      	add	r3, r2
 800f436:	7a18      	ldrb	r0, [r3, #8]
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	687a      	ldr	r2, [r7, #4]
 800f43c:	68b9      	ldr	r1, [r7, #8]
 800f43e:	47a0      	blx	r4
 800f440:	4603      	mov	r3, r0
 800f442:	75fb      	strb	r3, [r7, #23]
  return res;
 800f444:	7dfb      	ldrb	r3, [r7, #23]
}
 800f446:	4618      	mov	r0, r3
 800f448:	371c      	adds	r7, #28
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd90      	pop	{r4, r7, pc}
 800f44e:	bf00      	nop
 800f450:	24000a70 	.word	0x24000a70

0800f454 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f454:	b590      	push	{r4, r7, lr}
 800f456:	b087      	sub	sp, #28
 800f458:	af00      	add	r7, sp, #0
 800f45a:	60b9      	str	r1, [r7, #8]
 800f45c:	607a      	str	r2, [r7, #4]
 800f45e:	603b      	str	r3, [r7, #0]
 800f460:	4603      	mov	r3, r0
 800f462:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f464:	7bfb      	ldrb	r3, [r7, #15]
 800f466:	4a0a      	ldr	r2, [pc, #40]	@ (800f490 <disk_write+0x3c>)
 800f468:	009b      	lsls	r3, r3, #2
 800f46a:	4413      	add	r3, r2
 800f46c:	685b      	ldr	r3, [r3, #4]
 800f46e:	68dc      	ldr	r4, [r3, #12]
 800f470:	7bfb      	ldrb	r3, [r7, #15]
 800f472:	4a07      	ldr	r2, [pc, #28]	@ (800f490 <disk_write+0x3c>)
 800f474:	4413      	add	r3, r2
 800f476:	7a18      	ldrb	r0, [r3, #8]
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	687a      	ldr	r2, [r7, #4]
 800f47c:	68b9      	ldr	r1, [r7, #8]
 800f47e:	47a0      	blx	r4
 800f480:	4603      	mov	r3, r0
 800f482:	75fb      	strb	r3, [r7, #23]
  return res;
 800f484:	7dfb      	ldrb	r3, [r7, #23]
}
 800f486:	4618      	mov	r0, r3
 800f488:	371c      	adds	r7, #28
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd90      	pop	{r4, r7, pc}
 800f48e:	bf00      	nop
 800f490:	24000a70 	.word	0x24000a70

0800f494 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b084      	sub	sp, #16
 800f498:	af00      	add	r7, sp, #0
 800f49a:	4603      	mov	r3, r0
 800f49c:	603a      	str	r2, [r7, #0]
 800f49e:	71fb      	strb	r3, [r7, #7]
 800f4a0:	460b      	mov	r3, r1
 800f4a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f4a4:	79fb      	ldrb	r3, [r7, #7]
 800f4a6:	4a09      	ldr	r2, [pc, #36]	@ (800f4cc <disk_ioctl+0x38>)
 800f4a8:	009b      	lsls	r3, r3, #2
 800f4aa:	4413      	add	r3, r2
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	691b      	ldr	r3, [r3, #16]
 800f4b0:	79fa      	ldrb	r2, [r7, #7]
 800f4b2:	4906      	ldr	r1, [pc, #24]	@ (800f4cc <disk_ioctl+0x38>)
 800f4b4:	440a      	add	r2, r1
 800f4b6:	7a10      	ldrb	r0, [r2, #8]
 800f4b8:	79b9      	ldrb	r1, [r7, #6]
 800f4ba:	683a      	ldr	r2, [r7, #0]
 800f4bc:	4798      	blx	r3
 800f4be:	4603      	mov	r3, r0
 800f4c0:	73fb      	strb	r3, [r7, #15]
  return res;
 800f4c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3710      	adds	r7, #16
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	24000a70 	.word	0x24000a70

0800f4d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f4d0:	b480      	push	{r7}
 800f4d2:	b085      	sub	sp, #20
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	3301      	adds	r3, #1
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f4e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f4e4:	021b      	lsls	r3, r3, #8
 800f4e6:	b21a      	sxth	r2, r3
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	b21b      	sxth	r3, r3
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	b21b      	sxth	r3, r3
 800f4f2:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f4f4:	89fb      	ldrh	r3, [r7, #14]
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3714      	adds	r7, #20
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f500:	4770      	bx	lr

0800f502 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f502:	b480      	push	{r7}
 800f504:	b085      	sub	sp, #20
 800f506:	af00      	add	r7, sp, #0
 800f508:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	3303      	adds	r3, #3
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	021b      	lsls	r3, r3, #8
 800f516:	687a      	ldr	r2, [r7, #4]
 800f518:	3202      	adds	r2, #2
 800f51a:	7812      	ldrb	r2, [r2, #0]
 800f51c:	4313      	orrs	r3, r2
 800f51e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	021b      	lsls	r3, r3, #8
 800f524:	687a      	ldr	r2, [r7, #4]
 800f526:	3201      	adds	r2, #1
 800f528:	7812      	ldrb	r2, [r2, #0]
 800f52a:	4313      	orrs	r3, r2
 800f52c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	021b      	lsls	r3, r3, #8
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	7812      	ldrb	r2, [r2, #0]
 800f536:	4313      	orrs	r3, r2
 800f538:	60fb      	str	r3, [r7, #12]
	return rv;
 800f53a:	68fb      	ldr	r3, [r7, #12]
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3714      	adds	r7, #20
 800f540:	46bd      	mov	sp, r7
 800f542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f546:	4770      	bx	lr

0800f548 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f548:	b480      	push	{r7}
 800f54a:	b083      	sub	sp, #12
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	460b      	mov	r3, r1
 800f552:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	1c5a      	adds	r2, r3, #1
 800f558:	607a      	str	r2, [r7, #4]
 800f55a:	887a      	ldrh	r2, [r7, #2]
 800f55c:	b2d2      	uxtb	r2, r2
 800f55e:	701a      	strb	r2, [r3, #0]
 800f560:	887b      	ldrh	r3, [r7, #2]
 800f562:	0a1b      	lsrs	r3, r3, #8
 800f564:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	1c5a      	adds	r2, r3, #1
 800f56a:	607a      	str	r2, [r7, #4]
 800f56c:	887a      	ldrh	r2, [r7, #2]
 800f56e:	b2d2      	uxtb	r2, r2
 800f570:	701a      	strb	r2, [r3, #0]
}
 800f572:	bf00      	nop
 800f574:	370c      	adds	r7, #12
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr

0800f57e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f57e:	b480      	push	{r7}
 800f580:	b083      	sub	sp, #12
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
 800f586:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	1c5a      	adds	r2, r3, #1
 800f58c:	607a      	str	r2, [r7, #4]
 800f58e:	683a      	ldr	r2, [r7, #0]
 800f590:	b2d2      	uxtb	r2, r2
 800f592:	701a      	strb	r2, [r3, #0]
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	0a1b      	lsrs	r3, r3, #8
 800f598:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	1c5a      	adds	r2, r3, #1
 800f59e:	607a      	str	r2, [r7, #4]
 800f5a0:	683a      	ldr	r2, [r7, #0]
 800f5a2:	b2d2      	uxtb	r2, r2
 800f5a4:	701a      	strb	r2, [r3, #0]
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	0a1b      	lsrs	r3, r3, #8
 800f5aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	1c5a      	adds	r2, r3, #1
 800f5b0:	607a      	str	r2, [r7, #4]
 800f5b2:	683a      	ldr	r2, [r7, #0]
 800f5b4:	b2d2      	uxtb	r2, r2
 800f5b6:	701a      	strb	r2, [r3, #0]
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	0a1b      	lsrs	r3, r3, #8
 800f5bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	1c5a      	adds	r2, r3, #1
 800f5c2:	607a      	str	r2, [r7, #4]
 800f5c4:	683a      	ldr	r2, [r7, #0]
 800f5c6:	b2d2      	uxtb	r2, r2
 800f5c8:	701a      	strb	r2, [r3, #0]
}
 800f5ca:	bf00      	nop
 800f5cc:	370c      	adds	r7, #12
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d4:	4770      	bx	lr

0800f5d6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f5d6:	b480      	push	{r7}
 800f5d8:	b087      	sub	sp, #28
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	60f8      	str	r0, [r7, #12]
 800f5de:	60b9      	str	r1, [r7, #8]
 800f5e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d00d      	beq.n	800f60c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f5f0:	693a      	ldr	r2, [r7, #16]
 800f5f2:	1c53      	adds	r3, r2, #1
 800f5f4:	613b      	str	r3, [r7, #16]
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	1c59      	adds	r1, r3, #1
 800f5fa:	6179      	str	r1, [r7, #20]
 800f5fc:	7812      	ldrb	r2, [r2, #0]
 800f5fe:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	3b01      	subs	r3, #1
 800f604:	607b      	str	r3, [r7, #4]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d1f1      	bne.n	800f5f0 <mem_cpy+0x1a>
	}
}
 800f60c:	bf00      	nop
 800f60e:	371c      	adds	r7, #28
 800f610:	46bd      	mov	sp, r7
 800f612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f616:	4770      	bx	lr

0800f618 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f618:	b480      	push	{r7}
 800f61a:	b087      	sub	sp, #28
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	1c5a      	adds	r2, r3, #1
 800f62c:	617a      	str	r2, [r7, #20]
 800f62e:	68ba      	ldr	r2, [r7, #8]
 800f630:	b2d2      	uxtb	r2, r2
 800f632:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	3b01      	subs	r3, #1
 800f638:	607b      	str	r3, [r7, #4]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d1f3      	bne.n	800f628 <mem_set+0x10>
}
 800f640:	bf00      	nop
 800f642:	bf00      	nop
 800f644:	371c      	adds	r7, #28
 800f646:	46bd      	mov	sp, r7
 800f648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64c:	4770      	bx	lr

0800f64e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f64e:	b480      	push	{r7}
 800f650:	b089      	sub	sp, #36	@ 0x24
 800f652:	af00      	add	r7, sp, #0
 800f654:	60f8      	str	r0, [r7, #12]
 800f656:	60b9      	str	r1, [r7, #8]
 800f658:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	61fb      	str	r3, [r7, #28]
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f662:	2300      	movs	r3, #0
 800f664:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	1c5a      	adds	r2, r3, #1
 800f66a:	61fa      	str	r2, [r7, #28]
 800f66c:	781b      	ldrb	r3, [r3, #0]
 800f66e:	4619      	mov	r1, r3
 800f670:	69bb      	ldr	r3, [r7, #24]
 800f672:	1c5a      	adds	r2, r3, #1
 800f674:	61ba      	str	r2, [r7, #24]
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	1acb      	subs	r3, r1, r3
 800f67a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	3b01      	subs	r3, #1
 800f680:	607b      	str	r3, [r7, #4]
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d002      	beq.n	800f68e <mem_cmp+0x40>
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d0eb      	beq.n	800f666 <mem_cmp+0x18>

	return r;
 800f68e:	697b      	ldr	r3, [r7, #20]
}
 800f690:	4618      	mov	r0, r3
 800f692:	3724      	adds	r7, #36	@ 0x24
 800f694:	46bd      	mov	sp, r7
 800f696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69a:	4770      	bx	lr

0800f69c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f69c:	b480      	push	{r7}
 800f69e:	b083      	sub	sp, #12
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
 800f6a4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f6a6:	e002      	b.n	800f6ae <chk_chr+0x12>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	3301      	adds	r3, #1
 800f6ac:	607b      	str	r3, [r7, #4]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	781b      	ldrb	r3, [r3, #0]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d005      	beq.n	800f6c2 <chk_chr+0x26>
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	461a      	mov	r2, r3
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d1f2      	bne.n	800f6a8 <chk_chr+0xc>
	return *str;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	781b      	ldrb	r3, [r3, #0]
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	370c      	adds	r7, #12
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr

0800f6d2 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800f6d2:	b580      	push	{r7, lr}
 800f6d4:	b082      	sub	sp, #8
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d009      	beq.n	800f6f4 <lock_fs+0x22>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	68db      	ldr	r3, [r3, #12]
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f002 fd5b 	bl	80121a0 <ff_req_grant>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d001      	beq.n	800f6f4 <lock_fs+0x22>
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	e000      	b.n	800f6f6 <lock_fs+0x24>
 800f6f4:	2300      	movs	r3, #0
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3708      	adds	r7, #8
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}

0800f6fe <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800f6fe:	b580      	push	{r7, lr}
 800f700:	b082      	sub	sp, #8
 800f702:	af00      	add	r7, sp, #0
 800f704:	6078      	str	r0, [r7, #4]
 800f706:	460b      	mov	r3, r1
 800f708:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d00d      	beq.n	800f72c <unlock_fs+0x2e>
 800f710:	78fb      	ldrb	r3, [r7, #3]
 800f712:	2b0c      	cmp	r3, #12
 800f714:	d00a      	beq.n	800f72c <unlock_fs+0x2e>
 800f716:	78fb      	ldrb	r3, [r7, #3]
 800f718:	2b0b      	cmp	r3, #11
 800f71a:	d007      	beq.n	800f72c <unlock_fs+0x2e>
 800f71c:	78fb      	ldrb	r3, [r7, #3]
 800f71e:	2b0f      	cmp	r3, #15
 800f720:	d004      	beq.n	800f72c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	68db      	ldr	r3, [r3, #12]
 800f726:	4618      	mov	r0, r3
 800f728:	f002 fd4f 	bl	80121ca <ff_rel_grant>
	}
}
 800f72c:	bf00      	nop
 800f72e:	3708      	adds	r7, #8
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f734:	b480      	push	{r7}
 800f736:	b085      	sub	sp, #20
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f73e:	2300      	movs	r3, #0
 800f740:	60bb      	str	r3, [r7, #8]
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	60fb      	str	r3, [r7, #12]
 800f746:	e029      	b.n	800f79c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f748:	4a27      	ldr	r2, [pc, #156]	@ (800f7e8 <chk_lock+0xb4>)
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	011b      	lsls	r3, r3, #4
 800f74e:	4413      	add	r3, r2
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d01d      	beq.n	800f792 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f756:	4a24      	ldr	r2, [pc, #144]	@ (800f7e8 <chk_lock+0xb4>)
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	011b      	lsls	r3, r3, #4
 800f75c:	4413      	add	r3, r2
 800f75e:	681a      	ldr	r2, [r3, #0]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	429a      	cmp	r2, r3
 800f766:	d116      	bne.n	800f796 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f768:	4a1f      	ldr	r2, [pc, #124]	@ (800f7e8 <chk_lock+0xb4>)
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	011b      	lsls	r3, r3, #4
 800f76e:	4413      	add	r3, r2
 800f770:	3304      	adds	r3, #4
 800f772:	681a      	ldr	r2, [r3, #0]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f778:	429a      	cmp	r2, r3
 800f77a:	d10c      	bne.n	800f796 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f77c:	4a1a      	ldr	r2, [pc, #104]	@ (800f7e8 <chk_lock+0xb4>)
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	011b      	lsls	r3, r3, #4
 800f782:	4413      	add	r3, r2
 800f784:	3308      	adds	r3, #8
 800f786:	681a      	ldr	r2, [r3, #0]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d102      	bne.n	800f796 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f790:	e007      	b.n	800f7a2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f792:	2301      	movs	r3, #1
 800f794:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	3301      	adds	r3, #1
 800f79a:	60fb      	str	r3, [r7, #12]
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2b01      	cmp	r3, #1
 800f7a0:	d9d2      	bls.n	800f748 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	2b02      	cmp	r3, #2
 800f7a6:	d109      	bne.n	800f7bc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d102      	bne.n	800f7b4 <chk_lock+0x80>
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	2b02      	cmp	r3, #2
 800f7b2:	d101      	bne.n	800f7b8 <chk_lock+0x84>
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	e010      	b.n	800f7da <chk_lock+0xa6>
 800f7b8:	2312      	movs	r3, #18
 800f7ba:	e00e      	b.n	800f7da <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d108      	bne.n	800f7d4 <chk_lock+0xa0>
 800f7c2:	4a09      	ldr	r2, [pc, #36]	@ (800f7e8 <chk_lock+0xb4>)
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	011b      	lsls	r3, r3, #4
 800f7c8:	4413      	add	r3, r2
 800f7ca:	330c      	adds	r3, #12
 800f7cc:	881b      	ldrh	r3, [r3, #0]
 800f7ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f7d2:	d101      	bne.n	800f7d8 <chk_lock+0xa4>
 800f7d4:	2310      	movs	r3, #16
 800f7d6:	e000      	b.n	800f7da <chk_lock+0xa6>
 800f7d8:	2300      	movs	r3, #0
}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	3714      	adds	r7, #20
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e4:	4770      	bx	lr
 800f7e6:	bf00      	nop
 800f7e8:	24000a50 	.word	0x24000a50

0800f7ec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	b083      	sub	sp, #12
 800f7f0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	607b      	str	r3, [r7, #4]
 800f7f6:	e002      	b.n	800f7fe <enq_lock+0x12>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	3301      	adds	r3, #1
 800f7fc:	607b      	str	r3, [r7, #4]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2b01      	cmp	r3, #1
 800f802:	d806      	bhi.n	800f812 <enq_lock+0x26>
 800f804:	4a09      	ldr	r2, [pc, #36]	@ (800f82c <enq_lock+0x40>)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	011b      	lsls	r3, r3, #4
 800f80a:	4413      	add	r3, r2
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d1f2      	bne.n	800f7f8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2b02      	cmp	r3, #2
 800f816:	bf14      	ite	ne
 800f818:	2301      	movne	r3, #1
 800f81a:	2300      	moveq	r3, #0
 800f81c:	b2db      	uxtb	r3, r3
}
 800f81e:	4618      	mov	r0, r3
 800f820:	370c      	adds	r7, #12
 800f822:	46bd      	mov	sp, r7
 800f824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f828:	4770      	bx	lr
 800f82a:	bf00      	nop
 800f82c:	24000a50 	.word	0x24000a50

0800f830 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f830:	b480      	push	{r7}
 800f832:	b085      	sub	sp, #20
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f83a:	2300      	movs	r3, #0
 800f83c:	60fb      	str	r3, [r7, #12]
 800f83e:	e01f      	b.n	800f880 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f840:	4a41      	ldr	r2, [pc, #260]	@ (800f948 <inc_lock+0x118>)
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	011b      	lsls	r3, r3, #4
 800f846:	4413      	add	r3, r2
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	429a      	cmp	r2, r3
 800f850:	d113      	bne.n	800f87a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f852:	4a3d      	ldr	r2, [pc, #244]	@ (800f948 <inc_lock+0x118>)
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	011b      	lsls	r3, r3, #4
 800f858:	4413      	add	r3, r2
 800f85a:	3304      	adds	r3, #4
 800f85c:	681a      	ldr	r2, [r3, #0]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f862:	429a      	cmp	r2, r3
 800f864:	d109      	bne.n	800f87a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f866:	4a38      	ldr	r2, [pc, #224]	@ (800f948 <inc_lock+0x118>)
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	011b      	lsls	r3, r3, #4
 800f86c:	4413      	add	r3, r2
 800f86e:	3308      	adds	r3, #8
 800f870:	681a      	ldr	r2, [r3, #0]
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f876:	429a      	cmp	r2, r3
 800f878:	d006      	beq.n	800f888 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	3301      	adds	r3, #1
 800f87e:	60fb      	str	r3, [r7, #12]
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	2b01      	cmp	r3, #1
 800f884:	d9dc      	bls.n	800f840 <inc_lock+0x10>
 800f886:	e000      	b.n	800f88a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f888:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	2b02      	cmp	r3, #2
 800f88e:	d132      	bne.n	800f8f6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f890:	2300      	movs	r3, #0
 800f892:	60fb      	str	r3, [r7, #12]
 800f894:	e002      	b.n	800f89c <inc_lock+0x6c>
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	3301      	adds	r3, #1
 800f89a:	60fb      	str	r3, [r7, #12]
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	2b01      	cmp	r3, #1
 800f8a0:	d806      	bhi.n	800f8b0 <inc_lock+0x80>
 800f8a2:	4a29      	ldr	r2, [pc, #164]	@ (800f948 <inc_lock+0x118>)
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	011b      	lsls	r3, r3, #4
 800f8a8:	4413      	add	r3, r2
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d1f2      	bne.n	800f896 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2b02      	cmp	r3, #2
 800f8b4:	d101      	bne.n	800f8ba <inc_lock+0x8a>
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	e040      	b.n	800f93c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681a      	ldr	r2, [r3, #0]
 800f8be:	4922      	ldr	r1, [pc, #136]	@ (800f948 <inc_lock+0x118>)
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	011b      	lsls	r3, r3, #4
 800f8c4:	440b      	add	r3, r1
 800f8c6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	689a      	ldr	r2, [r3, #8]
 800f8cc:	491e      	ldr	r1, [pc, #120]	@ (800f948 <inc_lock+0x118>)
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	011b      	lsls	r3, r3, #4
 800f8d2:	440b      	add	r3, r1
 800f8d4:	3304      	adds	r3, #4
 800f8d6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	695a      	ldr	r2, [r3, #20]
 800f8dc:	491a      	ldr	r1, [pc, #104]	@ (800f948 <inc_lock+0x118>)
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	011b      	lsls	r3, r3, #4
 800f8e2:	440b      	add	r3, r1
 800f8e4:	3308      	adds	r3, #8
 800f8e6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f8e8:	4a17      	ldr	r2, [pc, #92]	@ (800f948 <inc_lock+0x118>)
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	011b      	lsls	r3, r3, #4
 800f8ee:	4413      	add	r3, r2
 800f8f0:	330c      	adds	r3, #12
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d009      	beq.n	800f910 <inc_lock+0xe0>
 800f8fc:	4a12      	ldr	r2, [pc, #72]	@ (800f948 <inc_lock+0x118>)
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	011b      	lsls	r3, r3, #4
 800f902:	4413      	add	r3, r2
 800f904:	330c      	adds	r3, #12
 800f906:	881b      	ldrh	r3, [r3, #0]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d001      	beq.n	800f910 <inc_lock+0xe0>
 800f90c:	2300      	movs	r3, #0
 800f90e:	e015      	b.n	800f93c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d108      	bne.n	800f928 <inc_lock+0xf8>
 800f916:	4a0c      	ldr	r2, [pc, #48]	@ (800f948 <inc_lock+0x118>)
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	011b      	lsls	r3, r3, #4
 800f91c:	4413      	add	r3, r2
 800f91e:	330c      	adds	r3, #12
 800f920:	881b      	ldrh	r3, [r3, #0]
 800f922:	3301      	adds	r3, #1
 800f924:	b29a      	uxth	r2, r3
 800f926:	e001      	b.n	800f92c <inc_lock+0xfc>
 800f928:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f92c:	4906      	ldr	r1, [pc, #24]	@ (800f948 <inc_lock+0x118>)
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	011b      	lsls	r3, r3, #4
 800f932:	440b      	add	r3, r1
 800f934:	330c      	adds	r3, #12
 800f936:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	3301      	adds	r3, #1
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3714      	adds	r7, #20
 800f940:	46bd      	mov	sp, r7
 800f942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f946:	4770      	bx	lr
 800f948:	24000a50 	.word	0x24000a50

0800f94c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f94c:	b480      	push	{r7}
 800f94e:	b085      	sub	sp, #20
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f954:	2300      	movs	r3, #0
 800f956:	60fb      	str	r3, [r7, #12]
 800f958:	e010      	b.n	800f97c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f95a:	4a0d      	ldr	r2, [pc, #52]	@ (800f990 <clear_lock+0x44>)
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	011b      	lsls	r3, r3, #4
 800f960:	4413      	add	r3, r2
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	687a      	ldr	r2, [r7, #4]
 800f966:	429a      	cmp	r2, r3
 800f968:	d105      	bne.n	800f976 <clear_lock+0x2a>
 800f96a:	4a09      	ldr	r2, [pc, #36]	@ (800f990 <clear_lock+0x44>)
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	011b      	lsls	r3, r3, #4
 800f970:	4413      	add	r3, r2
 800f972:	2200      	movs	r2, #0
 800f974:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	3301      	adds	r3, #1
 800f97a:	60fb      	str	r3, [r7, #12]
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	2b01      	cmp	r3, #1
 800f980:	d9eb      	bls.n	800f95a <clear_lock+0xe>
	}
}
 800f982:	bf00      	nop
 800f984:	bf00      	nop
 800f986:	3714      	adds	r7, #20
 800f988:	46bd      	mov	sp, r7
 800f98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98e:	4770      	bx	lr
 800f990:	24000a50 	.word	0x24000a50

0800f994 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b086      	sub	sp, #24
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f99c:	2300      	movs	r3, #0
 800f99e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	78db      	ldrb	r3, [r3, #3]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d034      	beq.n	800fa12 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	7858      	ldrb	r0, [r3, #1]
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	697a      	ldr	r2, [r7, #20]
 800f9bc:	f7ff fd4a 	bl	800f454 <disk_write>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d002      	beq.n	800f9cc <sync_window+0x38>
			res = FR_DISK_ERR;
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	73fb      	strb	r3, [r7, #15]
 800f9ca:	e022      	b.n	800fa12 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9d6:	697a      	ldr	r2, [r7, #20]
 800f9d8:	1ad2      	subs	r2, r2, r3
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	69db      	ldr	r3, [r3, #28]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d217      	bcs.n	800fa12 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	789b      	ldrb	r3, [r3, #2]
 800f9e6:	613b      	str	r3, [r7, #16]
 800f9e8:	e010      	b.n	800fa0c <sync_window+0x78>
					wsect += fs->fsize;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	69db      	ldr	r3, [r3, #28]
 800f9ee:	697a      	ldr	r2, [r7, #20]
 800f9f0:	4413      	add	r3, r2
 800f9f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	7858      	ldrb	r0, [r3, #1]
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f9fe:	2301      	movs	r3, #1
 800fa00:	697a      	ldr	r2, [r7, #20]
 800fa02:	f7ff fd27 	bl	800f454 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	3b01      	subs	r3, #1
 800fa0a:	613b      	str	r3, [r7, #16]
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	2b01      	cmp	r3, #1
 800fa10:	d8eb      	bhi.n	800f9ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fa12:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3718      	adds	r7, #24
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}

0800fa1c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b084      	sub	sp, #16
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
 800fa24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fa26:	2300      	movs	r3, #0
 800fa28:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa2e:	683a      	ldr	r2, [r7, #0]
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d01b      	beq.n	800fa6c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f7ff ffad 	bl	800f994 <sync_window>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fa3e:	7bfb      	ldrb	r3, [r7, #15]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d113      	bne.n	800fa6c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	7858      	ldrb	r0, [r3, #1]
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800fa4e:	2301      	movs	r3, #1
 800fa50:	683a      	ldr	r2, [r7, #0]
 800fa52:	f7ff fcdf 	bl	800f414 <disk_read>
 800fa56:	4603      	mov	r3, r0
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d004      	beq.n	800fa66 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fa5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fa60:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fa62:	2301      	movs	r3, #1
 800fa64:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	683a      	ldr	r2, [r7, #0]
 800fa6a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800fa6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3710      	adds	r7, #16
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}
	...

0800fa78 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b084      	sub	sp, #16
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f7ff ff87 	bl	800f994 <sync_window>
 800fa86:	4603      	mov	r3, r0
 800fa88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fa8a:	7bfb      	ldrb	r3, [r7, #15]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d158      	bne.n	800fb42 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	2b03      	cmp	r3, #3
 800fa96:	d148      	bne.n	800fb2a <sync_fs+0xb2>
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	791b      	ldrb	r3, [r3, #4]
 800fa9c:	2b01      	cmp	r3, #1
 800fa9e:	d144      	bne.n	800fb2a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	3334      	adds	r3, #52	@ 0x34
 800faa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800faa8:	2100      	movs	r1, #0
 800faaa:	4618      	mov	r0, r3
 800faac:	f7ff fdb4 	bl	800f618 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	3334      	adds	r3, #52	@ 0x34
 800fab4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fab8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7ff fd43 	bl	800f548 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	3334      	adds	r3, #52	@ 0x34
 800fac6:	4921      	ldr	r1, [pc, #132]	@ (800fb4c <sync_fs+0xd4>)
 800fac8:	4618      	mov	r0, r3
 800faca:	f7ff fd58 	bl	800f57e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	3334      	adds	r3, #52	@ 0x34
 800fad2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fad6:	491e      	ldr	r1, [pc, #120]	@ (800fb50 <sync_fs+0xd8>)
 800fad8:	4618      	mov	r0, r3
 800fada:	f7ff fd50 	bl	800f57e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	3334      	adds	r3, #52	@ 0x34
 800fae2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	695b      	ldr	r3, [r3, #20]
 800faea:	4619      	mov	r1, r3
 800faec:	4610      	mov	r0, r2
 800faee:	f7ff fd46 	bl	800f57e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	3334      	adds	r3, #52	@ 0x34
 800faf6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	691b      	ldr	r3, [r3, #16]
 800fafe:	4619      	mov	r1, r3
 800fb00:	4610      	mov	r0, r2
 800fb02:	f7ff fd3c 	bl	800f57e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6a1b      	ldr	r3, [r3, #32]
 800fb0a:	1c5a      	adds	r2, r3, #1
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	7858      	ldrb	r0, [r3, #1]
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fb1e:	2301      	movs	r3, #1
 800fb20:	f7ff fc98 	bl	800f454 <disk_write>
			fs->fsi_flag = 0;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2200      	movs	r2, #0
 800fb28:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	785b      	ldrb	r3, [r3, #1]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	2100      	movs	r1, #0
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7ff fcae 	bl	800f494 <disk_ioctl>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d001      	beq.n	800fb42 <sync_fs+0xca>
 800fb3e:	2301      	movs	r3, #1
 800fb40:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fb42:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb44:	4618      	mov	r0, r3
 800fb46:	3710      	adds	r7, #16
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}
 800fb4c:	41615252 	.word	0x41615252
 800fb50:	61417272 	.word	0x61417272

0800fb54 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fb54:	b480      	push	{r7}
 800fb56:	b083      	sub	sp, #12
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
 800fb5c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	3b02      	subs	r3, #2
 800fb62:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	699b      	ldr	r3, [r3, #24]
 800fb68:	3b02      	subs	r3, #2
 800fb6a:	683a      	ldr	r2, [r7, #0]
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d301      	bcc.n	800fb74 <clust2sect+0x20>
 800fb70:	2300      	movs	r3, #0
 800fb72:	e008      	b.n	800fb86 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	895b      	ldrh	r3, [r3, #10]
 800fb78:	461a      	mov	r2, r3
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	fb03 f202 	mul.w	r2, r3, r2
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb84:	4413      	add	r3, r2
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	370c      	adds	r7, #12
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb90:	4770      	bx	lr

0800fb92 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fb92:	b580      	push	{r7, lr}
 800fb94:	b086      	sub	sp, #24
 800fb96:	af00      	add	r7, sp, #0
 800fb98:	6078      	str	r0, [r7, #4]
 800fb9a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	d904      	bls.n	800fbb2 <get_fat+0x20>
 800fba8:	693b      	ldr	r3, [r7, #16]
 800fbaa:	699b      	ldr	r3, [r3, #24]
 800fbac:	683a      	ldr	r2, [r7, #0]
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d302      	bcc.n	800fbb8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	617b      	str	r3, [r7, #20]
 800fbb6:	e08e      	b.n	800fcd6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fbb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fbbc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fbbe:	693b      	ldr	r3, [r7, #16]
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	2b03      	cmp	r3, #3
 800fbc4:	d061      	beq.n	800fc8a <get_fat+0xf8>
 800fbc6:	2b03      	cmp	r3, #3
 800fbc8:	dc7b      	bgt.n	800fcc2 <get_fat+0x130>
 800fbca:	2b01      	cmp	r3, #1
 800fbcc:	d002      	beq.n	800fbd4 <get_fat+0x42>
 800fbce:	2b02      	cmp	r3, #2
 800fbd0:	d041      	beq.n	800fc56 <get_fat+0xc4>
 800fbd2:	e076      	b.n	800fcc2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	60fb      	str	r3, [r7, #12]
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	085b      	lsrs	r3, r3, #1
 800fbdc:	68fa      	ldr	r2, [r7, #12]
 800fbde:	4413      	add	r3, r2
 800fbe0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	0a5b      	lsrs	r3, r3, #9
 800fbea:	4413      	add	r3, r2
 800fbec:	4619      	mov	r1, r3
 800fbee:	6938      	ldr	r0, [r7, #16]
 800fbf0:	f7ff ff14 	bl	800fa1c <move_window>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d166      	bne.n	800fcc8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	1c5a      	adds	r2, r3, #1
 800fbfe:	60fa      	str	r2, [r7, #12]
 800fc00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc04:	693a      	ldr	r2, [r7, #16]
 800fc06:	4413      	add	r3, r2
 800fc08:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fc0c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fc0e:	693b      	ldr	r3, [r7, #16]
 800fc10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	0a5b      	lsrs	r3, r3, #9
 800fc16:	4413      	add	r3, r2
 800fc18:	4619      	mov	r1, r3
 800fc1a:	6938      	ldr	r0, [r7, #16]
 800fc1c:	f7ff fefe 	bl	800fa1c <move_window>
 800fc20:	4603      	mov	r3, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d152      	bne.n	800fccc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc2c:	693a      	ldr	r2, [r7, #16]
 800fc2e:	4413      	add	r3, r2
 800fc30:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fc34:	021b      	lsls	r3, r3, #8
 800fc36:	68ba      	ldr	r2, [r7, #8]
 800fc38:	4313      	orrs	r3, r2
 800fc3a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	f003 0301 	and.w	r3, r3, #1
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d002      	beq.n	800fc4c <get_fat+0xba>
 800fc46:	68bb      	ldr	r3, [r7, #8]
 800fc48:	091b      	lsrs	r3, r3, #4
 800fc4a:	e002      	b.n	800fc52 <get_fat+0xc0>
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fc52:	617b      	str	r3, [r7, #20]
			break;
 800fc54:	e03f      	b.n	800fcd6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	0a1b      	lsrs	r3, r3, #8
 800fc5e:	4413      	add	r3, r2
 800fc60:	4619      	mov	r1, r3
 800fc62:	6938      	ldr	r0, [r7, #16]
 800fc64:	f7ff feda 	bl	800fa1c <move_window>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d130      	bne.n	800fcd0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	005b      	lsls	r3, r3, #1
 800fc78:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fc7c:	4413      	add	r3, r2
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7ff fc26 	bl	800f4d0 <ld_word>
 800fc84:	4603      	mov	r3, r0
 800fc86:	617b      	str	r3, [r7, #20]
			break;
 800fc88:	e025      	b.n	800fcd6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fc8a:	693b      	ldr	r3, [r7, #16]
 800fc8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	09db      	lsrs	r3, r3, #7
 800fc92:	4413      	add	r3, r2
 800fc94:	4619      	mov	r1, r3
 800fc96:	6938      	ldr	r0, [r7, #16]
 800fc98:	f7ff fec0 	bl	800fa1c <move_window>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d118      	bne.n	800fcd4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	009b      	lsls	r3, r3, #2
 800fcac:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fcb0:	4413      	add	r3, r2
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7ff fc25 	bl	800f502 <ld_dword>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800fcbe:	617b      	str	r3, [r7, #20]
			break;
 800fcc0:	e009      	b.n	800fcd6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	617b      	str	r3, [r7, #20]
 800fcc6:	e006      	b.n	800fcd6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fcc8:	bf00      	nop
 800fcca:	e004      	b.n	800fcd6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fccc:	bf00      	nop
 800fcce:	e002      	b.n	800fcd6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fcd0:	bf00      	nop
 800fcd2:	e000      	b.n	800fcd6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fcd4:	bf00      	nop
		}
	}

	return val;
 800fcd6:	697b      	ldr	r3, [r7, #20]
}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	3718      	adds	r7, #24
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}

0800fce0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fce0:	b590      	push	{r4, r7, lr}
 800fce2:	b089      	sub	sp, #36	@ 0x24
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fcec:	2302      	movs	r3, #2
 800fcee:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	2b01      	cmp	r3, #1
 800fcf4:	f240 80d9 	bls.w	800feaa <put_fat+0x1ca>
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	699b      	ldr	r3, [r3, #24]
 800fcfc:	68ba      	ldr	r2, [r7, #8]
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	f080 80d3 	bcs.w	800feaa <put_fat+0x1ca>
		switch (fs->fs_type) {
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	781b      	ldrb	r3, [r3, #0]
 800fd08:	2b03      	cmp	r3, #3
 800fd0a:	f000 8096 	beq.w	800fe3a <put_fat+0x15a>
 800fd0e:	2b03      	cmp	r3, #3
 800fd10:	f300 80cb 	bgt.w	800feaa <put_fat+0x1ca>
 800fd14:	2b01      	cmp	r3, #1
 800fd16:	d002      	beq.n	800fd1e <put_fat+0x3e>
 800fd18:	2b02      	cmp	r3, #2
 800fd1a:	d06e      	beq.n	800fdfa <put_fat+0x11a>
 800fd1c:	e0c5      	b.n	800feaa <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	61bb      	str	r3, [r7, #24]
 800fd22:	69bb      	ldr	r3, [r7, #24]
 800fd24:	085b      	lsrs	r3, r3, #1
 800fd26:	69ba      	ldr	r2, [r7, #24]
 800fd28:	4413      	add	r3, r2
 800fd2a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd30:	69bb      	ldr	r3, [r7, #24]
 800fd32:	0a5b      	lsrs	r3, r3, #9
 800fd34:	4413      	add	r3, r2
 800fd36:	4619      	mov	r1, r3
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f7ff fe6f 	bl	800fa1c <move_window>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fd42:	7ffb      	ldrb	r3, [r7, #31]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	f040 80a9 	bne.w	800fe9c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fd50:	69bb      	ldr	r3, [r7, #24]
 800fd52:	1c59      	adds	r1, r3, #1
 800fd54:	61b9      	str	r1, [r7, #24]
 800fd56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd5a:	4413      	add	r3, r2
 800fd5c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	f003 0301 	and.w	r3, r3, #1
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d00d      	beq.n	800fd84 <put_fat+0xa4>
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	b25b      	sxtb	r3, r3
 800fd6e:	f003 030f 	and.w	r3, r3, #15
 800fd72:	b25a      	sxtb	r2, r3
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	b25b      	sxtb	r3, r3
 800fd78:	011b      	lsls	r3, r3, #4
 800fd7a:	b25b      	sxtb	r3, r3
 800fd7c:	4313      	orrs	r3, r2
 800fd7e:	b25b      	sxtb	r3, r3
 800fd80:	b2db      	uxtb	r3, r3
 800fd82:	e001      	b.n	800fd88 <put_fat+0xa8>
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	b2db      	uxtb	r3, r3
 800fd88:	697a      	ldr	r2, [r7, #20]
 800fd8a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	2201      	movs	r2, #1
 800fd90:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd96:	69bb      	ldr	r3, [r7, #24]
 800fd98:	0a5b      	lsrs	r3, r3, #9
 800fd9a:	4413      	add	r3, r2
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	68f8      	ldr	r0, [r7, #12]
 800fda0:	f7ff fe3c 	bl	800fa1c <move_window>
 800fda4:	4603      	mov	r3, r0
 800fda6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fda8:	7ffb      	ldrb	r3, [r7, #31]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d178      	bne.n	800fea0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fdb4:	69bb      	ldr	r3, [r7, #24]
 800fdb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdba:	4413      	add	r3, r2
 800fdbc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fdbe:	68bb      	ldr	r3, [r7, #8]
 800fdc0:	f003 0301 	and.w	r3, r3, #1
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d003      	beq.n	800fdd0 <put_fat+0xf0>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	091b      	lsrs	r3, r3, #4
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	e00e      	b.n	800fdee <put_fat+0x10e>
 800fdd0:	697b      	ldr	r3, [r7, #20]
 800fdd2:	781b      	ldrb	r3, [r3, #0]
 800fdd4:	b25b      	sxtb	r3, r3
 800fdd6:	f023 030f 	bic.w	r3, r3, #15
 800fdda:	b25a      	sxtb	r2, r3
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	0a1b      	lsrs	r3, r3, #8
 800fde0:	b25b      	sxtb	r3, r3
 800fde2:	f003 030f 	and.w	r3, r3, #15
 800fde6:	b25b      	sxtb	r3, r3
 800fde8:	4313      	orrs	r3, r2
 800fdea:	b25b      	sxtb	r3, r3
 800fdec:	b2db      	uxtb	r3, r3
 800fdee:	697a      	ldr	r2, [r7, #20]
 800fdf0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2201      	movs	r2, #1
 800fdf6:	70da      	strb	r2, [r3, #3]
			break;
 800fdf8:	e057      	b.n	800feaa <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	0a1b      	lsrs	r3, r3, #8
 800fe02:	4413      	add	r3, r2
 800fe04:	4619      	mov	r1, r3
 800fe06:	68f8      	ldr	r0, [r7, #12]
 800fe08:	f7ff fe08 	bl	800fa1c <move_window>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fe10:	7ffb      	ldrb	r3, [r7, #31]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d146      	bne.n	800fea4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	005b      	lsls	r3, r3, #1
 800fe20:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fe24:	4413      	add	r3, r2
 800fe26:	687a      	ldr	r2, [r7, #4]
 800fe28:	b292      	uxth	r2, r2
 800fe2a:	4611      	mov	r1, r2
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7ff fb8b 	bl	800f548 <st_word>
			fs->wflag = 1;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	2201      	movs	r2, #1
 800fe36:	70da      	strb	r2, [r3, #3]
			break;
 800fe38:	e037      	b.n	800feaa <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	09db      	lsrs	r3, r3, #7
 800fe42:	4413      	add	r3, r2
 800fe44:	4619      	mov	r1, r3
 800fe46:	68f8      	ldr	r0, [r7, #12]
 800fe48:	f7ff fde8 	bl	800fa1c <move_window>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fe50:	7ffb      	ldrb	r3, [r7, #31]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d128      	bne.n	800fea8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	009b      	lsls	r3, r3, #2
 800fe66:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fe6a:	4413      	add	r3, r2
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7ff fb48 	bl	800f502 <ld_dword>
 800fe72:	4603      	mov	r3, r0
 800fe74:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800fe78:	4323      	orrs	r3, r4
 800fe7a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	009b      	lsls	r3, r3, #2
 800fe86:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fe8a:	4413      	add	r3, r2
 800fe8c:	6879      	ldr	r1, [r7, #4]
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7ff fb75 	bl	800f57e <st_dword>
			fs->wflag = 1;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2201      	movs	r2, #1
 800fe98:	70da      	strb	r2, [r3, #3]
			break;
 800fe9a:	e006      	b.n	800feaa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fe9c:	bf00      	nop
 800fe9e:	e004      	b.n	800feaa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fea0:	bf00      	nop
 800fea2:	e002      	b.n	800feaa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fea4:	bf00      	nop
 800fea6:	e000      	b.n	800feaa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fea8:	bf00      	nop
		}
	}
	return res;
 800feaa:	7ffb      	ldrb	r3, [r7, #31]
}
 800feac:	4618      	mov	r0, r3
 800feae:	3724      	adds	r7, #36	@ 0x24
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd90      	pop	{r4, r7, pc}

0800feb4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b088      	sub	sp, #32
 800feb8:	af00      	add	r7, sp, #0
 800feba:	60f8      	str	r0, [r7, #12]
 800febc:	60b9      	str	r1, [r7, #8]
 800febe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fec0:	2300      	movs	r3, #0
 800fec2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	2b01      	cmp	r3, #1
 800fece:	d904      	bls.n	800feda <remove_chain+0x26>
 800fed0:	69bb      	ldr	r3, [r7, #24]
 800fed2:	699b      	ldr	r3, [r3, #24]
 800fed4:	68ba      	ldr	r2, [r7, #8]
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d301      	bcc.n	800fede <remove_chain+0x2a>
 800feda:	2302      	movs	r3, #2
 800fedc:	e04b      	b.n	800ff76 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d00c      	beq.n	800fefe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fee4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fee8:	6879      	ldr	r1, [r7, #4]
 800feea:	69b8      	ldr	r0, [r7, #24]
 800feec:	f7ff fef8 	bl	800fce0 <put_fat>
 800fef0:	4603      	mov	r3, r0
 800fef2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fef4:	7ffb      	ldrb	r3, [r7, #31]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d001      	beq.n	800fefe <remove_chain+0x4a>
 800fefa:	7ffb      	ldrb	r3, [r7, #31]
 800fefc:	e03b      	b.n	800ff76 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fefe:	68b9      	ldr	r1, [r7, #8]
 800ff00:	68f8      	ldr	r0, [r7, #12]
 800ff02:	f7ff fe46 	bl	800fb92 <get_fat>
 800ff06:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d031      	beq.n	800ff72 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	2b01      	cmp	r3, #1
 800ff12:	d101      	bne.n	800ff18 <remove_chain+0x64>
 800ff14:	2302      	movs	r3, #2
 800ff16:	e02e      	b.n	800ff76 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ff1e:	d101      	bne.n	800ff24 <remove_chain+0x70>
 800ff20:	2301      	movs	r3, #1
 800ff22:	e028      	b.n	800ff76 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ff24:	2200      	movs	r2, #0
 800ff26:	68b9      	ldr	r1, [r7, #8]
 800ff28:	69b8      	ldr	r0, [r7, #24]
 800ff2a:	f7ff fed9 	bl	800fce0 <put_fat>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ff32:	7ffb      	ldrb	r3, [r7, #31]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d001      	beq.n	800ff3c <remove_chain+0x88>
 800ff38:	7ffb      	ldrb	r3, [r7, #31]
 800ff3a:	e01c      	b.n	800ff76 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ff3c:	69bb      	ldr	r3, [r7, #24]
 800ff3e:	695a      	ldr	r2, [r3, #20]
 800ff40:	69bb      	ldr	r3, [r7, #24]
 800ff42:	699b      	ldr	r3, [r3, #24]
 800ff44:	3b02      	subs	r3, #2
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d20b      	bcs.n	800ff62 <remove_chain+0xae>
			fs->free_clst++;
 800ff4a:	69bb      	ldr	r3, [r7, #24]
 800ff4c:	695b      	ldr	r3, [r3, #20]
 800ff4e:	1c5a      	adds	r2, r3, #1
 800ff50:	69bb      	ldr	r3, [r7, #24]
 800ff52:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ff54:	69bb      	ldr	r3, [r7, #24]
 800ff56:	791b      	ldrb	r3, [r3, #4]
 800ff58:	f043 0301 	orr.w	r3, r3, #1
 800ff5c:	b2da      	uxtb	r2, r3
 800ff5e:	69bb      	ldr	r3, [r7, #24]
 800ff60:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ff66:	69bb      	ldr	r3, [r7, #24]
 800ff68:	699b      	ldr	r3, [r3, #24]
 800ff6a:	68ba      	ldr	r2, [r7, #8]
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d3c6      	bcc.n	800fefe <remove_chain+0x4a>
 800ff70:	e000      	b.n	800ff74 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ff72:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ff74:	2300      	movs	r3, #0
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3720      	adds	r7, #32
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}

0800ff7e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ff7e:	b580      	push	{r7, lr}
 800ff80:	b088      	sub	sp, #32
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
 800ff86:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d10d      	bne.n	800ffb0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	691b      	ldr	r3, [r3, #16]
 800ff98:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ff9a:	69bb      	ldr	r3, [r7, #24]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d004      	beq.n	800ffaa <create_chain+0x2c>
 800ffa0:	693b      	ldr	r3, [r7, #16]
 800ffa2:	699b      	ldr	r3, [r3, #24]
 800ffa4:	69ba      	ldr	r2, [r7, #24]
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d31b      	bcc.n	800ffe2 <create_chain+0x64>
 800ffaa:	2301      	movs	r3, #1
 800ffac:	61bb      	str	r3, [r7, #24]
 800ffae:	e018      	b.n	800ffe2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ffb0:	6839      	ldr	r1, [r7, #0]
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f7ff fded 	bl	800fb92 <get_fat>
 800ffb8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	d801      	bhi.n	800ffc4 <create_chain+0x46>
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	e070      	b.n	80100a6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ffca:	d101      	bne.n	800ffd0 <create_chain+0x52>
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	e06a      	b.n	80100a6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	699b      	ldr	r3, [r3, #24]
 800ffd4:	68fa      	ldr	r2, [r7, #12]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d201      	bcs.n	800ffde <create_chain+0x60>
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	e063      	b.n	80100a6 <create_chain+0x128>
		scl = clst;
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ffe2:	69bb      	ldr	r3, [r7, #24]
 800ffe4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ffe6:	69fb      	ldr	r3, [r7, #28]
 800ffe8:	3301      	adds	r3, #1
 800ffea:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	699b      	ldr	r3, [r3, #24]
 800fff0:	69fa      	ldr	r2, [r7, #28]
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d307      	bcc.n	8010006 <create_chain+0x88>
				ncl = 2;
 800fff6:	2302      	movs	r3, #2
 800fff8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800fffa:	69fa      	ldr	r2, [r7, #28]
 800fffc:	69bb      	ldr	r3, [r7, #24]
 800fffe:	429a      	cmp	r2, r3
 8010000:	d901      	bls.n	8010006 <create_chain+0x88>
 8010002:	2300      	movs	r3, #0
 8010004:	e04f      	b.n	80100a6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010006:	69f9      	ldr	r1, [r7, #28]
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f7ff fdc2 	bl	800fb92 <get_fat>
 801000e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d00e      	beq.n	8010034 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	2b01      	cmp	r3, #1
 801001a:	d003      	beq.n	8010024 <create_chain+0xa6>
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010022:	d101      	bne.n	8010028 <create_chain+0xaa>
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	e03e      	b.n	80100a6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010028:	69fa      	ldr	r2, [r7, #28]
 801002a:	69bb      	ldr	r3, [r7, #24]
 801002c:	429a      	cmp	r2, r3
 801002e:	d1da      	bne.n	800ffe6 <create_chain+0x68>
 8010030:	2300      	movs	r3, #0
 8010032:	e038      	b.n	80100a6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010034:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010036:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801003a:	69f9      	ldr	r1, [r7, #28]
 801003c:	6938      	ldr	r0, [r7, #16]
 801003e:	f7ff fe4f 	bl	800fce0 <put_fat>
 8010042:	4603      	mov	r3, r0
 8010044:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010046:	7dfb      	ldrb	r3, [r7, #23]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d109      	bne.n	8010060 <create_chain+0xe2>
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d006      	beq.n	8010060 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010052:	69fa      	ldr	r2, [r7, #28]
 8010054:	6839      	ldr	r1, [r7, #0]
 8010056:	6938      	ldr	r0, [r7, #16]
 8010058:	f7ff fe42 	bl	800fce0 <put_fat>
 801005c:	4603      	mov	r3, r0
 801005e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010060:	7dfb      	ldrb	r3, [r7, #23]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d116      	bne.n	8010094 <create_chain+0x116>
		fs->last_clst = ncl;
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	69fa      	ldr	r2, [r7, #28]
 801006a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	695a      	ldr	r2, [r3, #20]
 8010070:	693b      	ldr	r3, [r7, #16]
 8010072:	699b      	ldr	r3, [r3, #24]
 8010074:	3b02      	subs	r3, #2
 8010076:	429a      	cmp	r2, r3
 8010078:	d804      	bhi.n	8010084 <create_chain+0x106>
 801007a:	693b      	ldr	r3, [r7, #16]
 801007c:	695b      	ldr	r3, [r3, #20]
 801007e:	1e5a      	subs	r2, r3, #1
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010084:	693b      	ldr	r3, [r7, #16]
 8010086:	791b      	ldrb	r3, [r3, #4]
 8010088:	f043 0301 	orr.w	r3, r3, #1
 801008c:	b2da      	uxtb	r2, r3
 801008e:	693b      	ldr	r3, [r7, #16]
 8010090:	711a      	strb	r2, [r3, #4]
 8010092:	e007      	b.n	80100a4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010094:	7dfb      	ldrb	r3, [r7, #23]
 8010096:	2b01      	cmp	r3, #1
 8010098:	d102      	bne.n	80100a0 <create_chain+0x122>
 801009a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801009e:	e000      	b.n	80100a2 <create_chain+0x124>
 80100a0:	2301      	movs	r3, #1
 80100a2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80100a4:	69fb      	ldr	r3, [r7, #28]
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3720      	adds	r7, #32
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}

080100ae <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80100ae:	b480      	push	{r7}
 80100b0:	b087      	sub	sp, #28
 80100b2:	af00      	add	r7, sp, #0
 80100b4:	6078      	str	r0, [r7, #4]
 80100b6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100c2:	3304      	adds	r3, #4
 80100c4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	0a5b      	lsrs	r3, r3, #9
 80100ca:	68fa      	ldr	r2, [r7, #12]
 80100cc:	8952      	ldrh	r2, [r2, #10]
 80100ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80100d2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80100d4:	693b      	ldr	r3, [r7, #16]
 80100d6:	1d1a      	adds	r2, r3, #4
 80100d8:	613a      	str	r2, [r7, #16]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d101      	bne.n	80100e8 <clmt_clust+0x3a>
 80100e4:	2300      	movs	r3, #0
 80100e6:	e010      	b.n	801010a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80100e8:	697a      	ldr	r2, [r7, #20]
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d307      	bcc.n	8010100 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80100f0:	697a      	ldr	r2, [r7, #20]
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	1ad3      	subs	r3, r2, r3
 80100f6:	617b      	str	r3, [r7, #20]
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	3304      	adds	r3, #4
 80100fc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80100fe:	e7e9      	b.n	80100d4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010100:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010102:	693b      	ldr	r3, [r7, #16]
 8010104:	681a      	ldr	r2, [r3, #0]
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	4413      	add	r3, r2
}
 801010a:	4618      	mov	r0, r3
 801010c:	371c      	adds	r7, #28
 801010e:	46bd      	mov	sp, r7
 8010110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010114:	4770      	bx	lr

08010116 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010116:	b580      	push	{r7, lr}
 8010118:	b086      	sub	sp, #24
 801011a:	af00      	add	r7, sp, #0
 801011c:	6078      	str	r0, [r7, #4]
 801011e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801012c:	d204      	bcs.n	8010138 <dir_sdi+0x22>
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	f003 031f 	and.w	r3, r3, #31
 8010134:	2b00      	cmp	r3, #0
 8010136:	d001      	beq.n	801013c <dir_sdi+0x26>
		return FR_INT_ERR;
 8010138:	2302      	movs	r3, #2
 801013a:	e063      	b.n	8010204 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	683a      	ldr	r2, [r7, #0]
 8010140:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	689b      	ldr	r3, [r3, #8]
 8010146:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d106      	bne.n	801015c <dir_sdi+0x46>
 801014e:	693b      	ldr	r3, [r7, #16]
 8010150:	781b      	ldrb	r3, [r3, #0]
 8010152:	2b02      	cmp	r3, #2
 8010154:	d902      	bls.n	801015c <dir_sdi+0x46>
		clst = fs->dirbase;
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801015a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d10c      	bne.n	801017c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	095b      	lsrs	r3, r3, #5
 8010166:	693a      	ldr	r2, [r7, #16]
 8010168:	8912      	ldrh	r2, [r2, #8]
 801016a:	4293      	cmp	r3, r2
 801016c:	d301      	bcc.n	8010172 <dir_sdi+0x5c>
 801016e:	2302      	movs	r3, #2
 8010170:	e048      	b.n	8010204 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010172:	693b      	ldr	r3, [r7, #16]
 8010174:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	61da      	str	r2, [r3, #28]
 801017a:	e029      	b.n	80101d0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	895b      	ldrh	r3, [r3, #10]
 8010180:	025b      	lsls	r3, r3, #9
 8010182:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010184:	e019      	b.n	80101ba <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6979      	ldr	r1, [r7, #20]
 801018a:	4618      	mov	r0, r3
 801018c:	f7ff fd01 	bl	800fb92 <get_fat>
 8010190:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010198:	d101      	bne.n	801019e <dir_sdi+0x88>
 801019a:	2301      	movs	r3, #1
 801019c:	e032      	b.n	8010204 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	2b01      	cmp	r3, #1
 80101a2:	d904      	bls.n	80101ae <dir_sdi+0x98>
 80101a4:	693b      	ldr	r3, [r7, #16]
 80101a6:	699b      	ldr	r3, [r3, #24]
 80101a8:	697a      	ldr	r2, [r7, #20]
 80101aa:	429a      	cmp	r2, r3
 80101ac:	d301      	bcc.n	80101b2 <dir_sdi+0x9c>
 80101ae:	2302      	movs	r3, #2
 80101b0:	e028      	b.n	8010204 <dir_sdi+0xee>
			ofs -= csz;
 80101b2:	683a      	ldr	r2, [r7, #0]
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	1ad3      	subs	r3, r2, r3
 80101b8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80101ba:	683a      	ldr	r2, [r7, #0]
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	429a      	cmp	r2, r3
 80101c0:	d2e1      	bcs.n	8010186 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80101c2:	6979      	ldr	r1, [r7, #20]
 80101c4:	6938      	ldr	r0, [r7, #16]
 80101c6:	f7ff fcc5 	bl	800fb54 <clust2sect>
 80101ca:	4602      	mov	r2, r0
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	697a      	ldr	r2, [r7, #20]
 80101d4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	69db      	ldr	r3, [r3, #28]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d101      	bne.n	80101e2 <dir_sdi+0xcc>
 80101de:	2302      	movs	r3, #2
 80101e0:	e010      	b.n	8010204 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	69da      	ldr	r2, [r3, #28]
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	0a5b      	lsrs	r3, r3, #9
 80101ea:	441a      	add	r2, r3
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101fc:	441a      	add	r2, r3
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010202:	2300      	movs	r3, #0
}
 8010204:	4618      	mov	r0, r3
 8010206:	3718      	adds	r7, #24
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}

0801020c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b086      	sub	sp, #24
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
 8010214:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	695b      	ldr	r3, [r3, #20]
 8010220:	3320      	adds	r3, #32
 8010222:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	69db      	ldr	r3, [r3, #28]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d003      	beq.n	8010234 <dir_next+0x28>
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010232:	d301      	bcc.n	8010238 <dir_next+0x2c>
 8010234:	2304      	movs	r3, #4
 8010236:	e0aa      	b.n	801038e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801023e:	2b00      	cmp	r3, #0
 8010240:	f040 8098 	bne.w	8010374 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	69db      	ldr	r3, [r3, #28]
 8010248:	1c5a      	adds	r2, r3, #1
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	699b      	ldr	r3, [r3, #24]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d10b      	bne.n	801026e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	095b      	lsrs	r3, r3, #5
 801025a:	68fa      	ldr	r2, [r7, #12]
 801025c:	8912      	ldrh	r2, [r2, #8]
 801025e:	4293      	cmp	r3, r2
 8010260:	f0c0 8088 	bcc.w	8010374 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2200      	movs	r2, #0
 8010268:	61da      	str	r2, [r3, #28]
 801026a:	2304      	movs	r3, #4
 801026c:	e08f      	b.n	801038e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	0a5b      	lsrs	r3, r3, #9
 8010272:	68fa      	ldr	r2, [r7, #12]
 8010274:	8952      	ldrh	r2, [r2, #10]
 8010276:	3a01      	subs	r2, #1
 8010278:	4013      	ands	r3, r2
 801027a:	2b00      	cmp	r3, #0
 801027c:	d17a      	bne.n	8010374 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801027e:	687a      	ldr	r2, [r7, #4]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	699b      	ldr	r3, [r3, #24]
 8010284:	4619      	mov	r1, r3
 8010286:	4610      	mov	r0, r2
 8010288:	f7ff fc83 	bl	800fb92 <get_fat>
 801028c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	2b01      	cmp	r3, #1
 8010292:	d801      	bhi.n	8010298 <dir_next+0x8c>
 8010294:	2302      	movs	r3, #2
 8010296:	e07a      	b.n	801038e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801029e:	d101      	bne.n	80102a4 <dir_next+0x98>
 80102a0:	2301      	movs	r3, #1
 80102a2:	e074      	b.n	801038e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	699b      	ldr	r3, [r3, #24]
 80102a8:	697a      	ldr	r2, [r7, #20]
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d358      	bcc.n	8010360 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d104      	bne.n	80102be <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2200      	movs	r2, #0
 80102b8:	61da      	str	r2, [r3, #28]
 80102ba:	2304      	movs	r3, #4
 80102bc:	e067      	b.n	801038e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80102be:	687a      	ldr	r2, [r7, #4]
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	699b      	ldr	r3, [r3, #24]
 80102c4:	4619      	mov	r1, r3
 80102c6:	4610      	mov	r0, r2
 80102c8:	f7ff fe59 	bl	800ff7e <create_chain>
 80102cc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d101      	bne.n	80102d8 <dir_next+0xcc>
 80102d4:	2307      	movs	r3, #7
 80102d6:	e05a      	b.n	801038e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	2b01      	cmp	r3, #1
 80102dc:	d101      	bne.n	80102e2 <dir_next+0xd6>
 80102de:	2302      	movs	r3, #2
 80102e0:	e055      	b.n	801038e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80102e8:	d101      	bne.n	80102ee <dir_next+0xe2>
 80102ea:	2301      	movs	r3, #1
 80102ec:	e04f      	b.n	801038e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80102ee:	68f8      	ldr	r0, [r7, #12]
 80102f0:	f7ff fb50 	bl	800f994 <sync_window>
 80102f4:	4603      	mov	r3, r0
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d001      	beq.n	80102fe <dir_next+0xf2>
 80102fa:	2301      	movs	r3, #1
 80102fc:	e047      	b.n	801038e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	3334      	adds	r3, #52	@ 0x34
 8010302:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010306:	2100      	movs	r1, #0
 8010308:	4618      	mov	r0, r3
 801030a:	f7ff f985 	bl	800f618 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801030e:	2300      	movs	r3, #0
 8010310:	613b      	str	r3, [r7, #16]
 8010312:	6979      	ldr	r1, [r7, #20]
 8010314:	68f8      	ldr	r0, [r7, #12]
 8010316:	f7ff fc1d 	bl	800fb54 <clust2sect>
 801031a:	4602      	mov	r2, r0
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	631a      	str	r2, [r3, #48]	@ 0x30
 8010320:	e012      	b.n	8010348 <dir_next+0x13c>
						fs->wflag = 1;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	2201      	movs	r2, #1
 8010326:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010328:	68f8      	ldr	r0, [r7, #12]
 801032a:	f7ff fb33 	bl	800f994 <sync_window>
 801032e:	4603      	mov	r3, r0
 8010330:	2b00      	cmp	r3, #0
 8010332:	d001      	beq.n	8010338 <dir_next+0x12c>
 8010334:	2301      	movs	r3, #1
 8010336:	e02a      	b.n	801038e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	3301      	adds	r3, #1
 801033c:	613b      	str	r3, [r7, #16]
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010342:	1c5a      	adds	r2, r3, #1
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	631a      	str	r2, [r3, #48]	@ 0x30
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	895b      	ldrh	r3, [r3, #10]
 801034c:	461a      	mov	r2, r3
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	4293      	cmp	r3, r2
 8010352:	d3e6      	bcc.n	8010322 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	1ad2      	subs	r2, r2, r3
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	697a      	ldr	r2, [r7, #20]
 8010364:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010366:	6979      	ldr	r1, [r7, #20]
 8010368:	68f8      	ldr	r0, [r7, #12]
 801036a:	f7ff fbf3 	bl	800fb54 <clust2sect>
 801036e:	4602      	mov	r2, r0
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	68ba      	ldr	r2, [r7, #8]
 8010378:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010386:	441a      	add	r2, r3
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801038c:	2300      	movs	r3, #0
}
 801038e:	4618      	mov	r0, r3
 8010390:	3718      	adds	r7, #24
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}

08010396 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010396:	b580      	push	{r7, lr}
 8010398:	b086      	sub	sp, #24
 801039a:	af00      	add	r7, sp, #0
 801039c:	6078      	str	r0, [r7, #4]
 801039e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80103a6:	2100      	movs	r1, #0
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f7ff feb4 	bl	8010116 <dir_sdi>
 80103ae:	4603      	mov	r3, r0
 80103b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80103b2:	7dfb      	ldrb	r3, [r7, #23]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d12b      	bne.n	8010410 <dir_alloc+0x7a>
		n = 0;
 80103b8:	2300      	movs	r3, #0
 80103ba:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	69db      	ldr	r3, [r3, #28]
 80103c0:	4619      	mov	r1, r3
 80103c2:	68f8      	ldr	r0, [r7, #12]
 80103c4:	f7ff fb2a 	bl	800fa1c <move_window>
 80103c8:	4603      	mov	r3, r0
 80103ca:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80103cc:	7dfb      	ldrb	r3, [r7, #23]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d11d      	bne.n	801040e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6a1b      	ldr	r3, [r3, #32]
 80103d6:	781b      	ldrb	r3, [r3, #0]
 80103d8:	2be5      	cmp	r3, #229	@ 0xe5
 80103da:	d004      	beq.n	80103e6 <dir_alloc+0x50>
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6a1b      	ldr	r3, [r3, #32]
 80103e0:	781b      	ldrb	r3, [r3, #0]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d107      	bne.n	80103f6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80103e6:	693b      	ldr	r3, [r7, #16]
 80103e8:	3301      	adds	r3, #1
 80103ea:	613b      	str	r3, [r7, #16]
 80103ec:	693a      	ldr	r2, [r7, #16]
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	429a      	cmp	r2, r3
 80103f2:	d102      	bne.n	80103fa <dir_alloc+0x64>
 80103f4:	e00c      	b.n	8010410 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80103f6:	2300      	movs	r3, #0
 80103f8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80103fa:	2101      	movs	r1, #1
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f7ff ff05 	bl	801020c <dir_next>
 8010402:	4603      	mov	r3, r0
 8010404:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010406:	7dfb      	ldrb	r3, [r7, #23]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d0d7      	beq.n	80103bc <dir_alloc+0x26>
 801040c:	e000      	b.n	8010410 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801040e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010410:	7dfb      	ldrb	r3, [r7, #23]
 8010412:	2b04      	cmp	r3, #4
 8010414:	d101      	bne.n	801041a <dir_alloc+0x84>
 8010416:	2307      	movs	r3, #7
 8010418:	75fb      	strb	r3, [r7, #23]
	return res;
 801041a:	7dfb      	ldrb	r3, [r7, #23]
}
 801041c:	4618      	mov	r0, r3
 801041e:	3718      	adds	r7, #24
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b084      	sub	sp, #16
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	331a      	adds	r3, #26
 8010432:	4618      	mov	r0, r3
 8010434:	f7ff f84c 	bl	800f4d0 <ld_word>
 8010438:	4603      	mov	r3, r0
 801043a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	781b      	ldrb	r3, [r3, #0]
 8010440:	2b03      	cmp	r3, #3
 8010442:	d109      	bne.n	8010458 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	3314      	adds	r3, #20
 8010448:	4618      	mov	r0, r3
 801044a:	f7ff f841 	bl	800f4d0 <ld_word>
 801044e:	4603      	mov	r3, r0
 8010450:	041b      	lsls	r3, r3, #16
 8010452:	68fa      	ldr	r2, [r7, #12]
 8010454:	4313      	orrs	r3, r2
 8010456:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010458:	68fb      	ldr	r3, [r7, #12]
}
 801045a:	4618      	mov	r0, r3
 801045c:	3710      	adds	r7, #16
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}

08010462 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010462:	b580      	push	{r7, lr}
 8010464:	b084      	sub	sp, #16
 8010466:	af00      	add	r7, sp, #0
 8010468:	60f8      	str	r0, [r7, #12]
 801046a:	60b9      	str	r1, [r7, #8]
 801046c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	331a      	adds	r3, #26
 8010472:	687a      	ldr	r2, [r7, #4]
 8010474:	b292      	uxth	r2, r2
 8010476:	4611      	mov	r1, r2
 8010478:	4618      	mov	r0, r3
 801047a:	f7ff f865 	bl	800f548 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	2b03      	cmp	r3, #3
 8010484:	d109      	bne.n	801049a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	f103 0214 	add.w	r2, r3, #20
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	0c1b      	lsrs	r3, r3, #16
 8010490:	b29b      	uxth	r3, r3
 8010492:	4619      	mov	r1, r3
 8010494:	4610      	mov	r0, r2
 8010496:	f7ff f857 	bl	800f548 <st_word>
	}
}
 801049a:	bf00      	nop
 801049c:	3710      	adds	r7, #16
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}

080104a2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80104a2:	b580      	push	{r7, lr}
 80104a4:	b086      	sub	sp, #24
 80104a6:	af00      	add	r7, sp, #0
 80104a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80104b0:	2100      	movs	r1, #0
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f7ff fe2f 	bl	8010116 <dir_sdi>
 80104b8:	4603      	mov	r3, r0
 80104ba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80104bc:	7dfb      	ldrb	r3, [r7, #23]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d001      	beq.n	80104c6 <dir_find+0x24>
 80104c2:	7dfb      	ldrb	r3, [r7, #23]
 80104c4:	e03e      	b.n	8010544 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	69db      	ldr	r3, [r3, #28]
 80104ca:	4619      	mov	r1, r3
 80104cc:	6938      	ldr	r0, [r7, #16]
 80104ce:	f7ff faa5 	bl	800fa1c <move_window>
 80104d2:	4603      	mov	r3, r0
 80104d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80104d6:	7dfb      	ldrb	r3, [r7, #23]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d12f      	bne.n	801053c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	6a1b      	ldr	r3, [r3, #32]
 80104e0:	781b      	ldrb	r3, [r3, #0]
 80104e2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80104e4:	7bfb      	ldrb	r3, [r7, #15]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d102      	bne.n	80104f0 <dir_find+0x4e>
 80104ea:	2304      	movs	r3, #4
 80104ec:	75fb      	strb	r3, [r7, #23]
 80104ee:	e028      	b.n	8010542 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	6a1b      	ldr	r3, [r3, #32]
 80104f4:	330b      	adds	r3, #11
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80104fc:	b2da      	uxtb	r2, r3
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	6a1b      	ldr	r3, [r3, #32]
 8010506:	330b      	adds	r3, #11
 8010508:	781b      	ldrb	r3, [r3, #0]
 801050a:	f003 0308 	and.w	r3, r3, #8
 801050e:	2b00      	cmp	r3, #0
 8010510:	d10a      	bne.n	8010528 <dir_find+0x86>
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6a18      	ldr	r0, [r3, #32]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	3324      	adds	r3, #36	@ 0x24
 801051a:	220b      	movs	r2, #11
 801051c:	4619      	mov	r1, r3
 801051e:	f7ff f896 	bl	800f64e <mem_cmp>
 8010522:	4603      	mov	r3, r0
 8010524:	2b00      	cmp	r3, #0
 8010526:	d00b      	beq.n	8010540 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010528:	2100      	movs	r1, #0
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f7ff fe6e 	bl	801020c <dir_next>
 8010530:	4603      	mov	r3, r0
 8010532:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010534:	7dfb      	ldrb	r3, [r7, #23]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d0c5      	beq.n	80104c6 <dir_find+0x24>
 801053a:	e002      	b.n	8010542 <dir_find+0xa0>
		if (res != FR_OK) break;
 801053c:	bf00      	nop
 801053e:	e000      	b.n	8010542 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010540:	bf00      	nop

	return res;
 8010542:	7dfb      	ldrb	r3, [r7, #23]
}
 8010544:	4618      	mov	r0, r3
 8010546:	3718      	adds	r7, #24
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b084      	sub	sp, #16
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801055a:	2101      	movs	r1, #1
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f7ff ff1a 	bl	8010396 <dir_alloc>
 8010562:	4603      	mov	r3, r0
 8010564:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010566:	7bfb      	ldrb	r3, [r7, #15]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d11c      	bne.n	80105a6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	69db      	ldr	r3, [r3, #28]
 8010570:	4619      	mov	r1, r3
 8010572:	68b8      	ldr	r0, [r7, #8]
 8010574:	f7ff fa52 	bl	800fa1c <move_window>
 8010578:	4603      	mov	r3, r0
 801057a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801057c:	7bfb      	ldrb	r3, [r7, #15]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d111      	bne.n	80105a6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6a1b      	ldr	r3, [r3, #32]
 8010586:	2220      	movs	r2, #32
 8010588:	2100      	movs	r1, #0
 801058a:	4618      	mov	r0, r3
 801058c:	f7ff f844 	bl	800f618 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6a18      	ldr	r0, [r3, #32]
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	3324      	adds	r3, #36	@ 0x24
 8010598:	220b      	movs	r2, #11
 801059a:	4619      	mov	r1, r3
 801059c:	f7ff f81b 	bl	800f5d6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	2201      	movs	r2, #1
 80105a4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80105a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	3710      	adds	r7, #16
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}

080105b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b088      	sub	sp, #32
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	60fb      	str	r3, [r7, #12]
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	3324      	adds	r3, #36	@ 0x24
 80105c4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80105c6:	220b      	movs	r2, #11
 80105c8:	2120      	movs	r1, #32
 80105ca:	68b8      	ldr	r0, [r7, #8]
 80105cc:	f7ff f824 	bl	800f618 <mem_set>
	si = i = 0; ni = 8;
 80105d0:	2300      	movs	r3, #0
 80105d2:	613b      	str	r3, [r7, #16]
 80105d4:	693b      	ldr	r3, [r7, #16]
 80105d6:	61fb      	str	r3, [r7, #28]
 80105d8:	2308      	movs	r3, #8
 80105da:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80105dc:	69fb      	ldr	r3, [r7, #28]
 80105de:	1c5a      	adds	r2, r3, #1
 80105e0:	61fa      	str	r2, [r7, #28]
 80105e2:	68fa      	ldr	r2, [r7, #12]
 80105e4:	4413      	add	r3, r2
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80105ea:	7efb      	ldrb	r3, [r7, #27]
 80105ec:	2b20      	cmp	r3, #32
 80105ee:	d94e      	bls.n	801068e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80105f0:	7efb      	ldrb	r3, [r7, #27]
 80105f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80105f4:	d006      	beq.n	8010604 <create_name+0x54>
 80105f6:	7efb      	ldrb	r3, [r7, #27]
 80105f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80105fa:	d110      	bne.n	801061e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80105fc:	e002      	b.n	8010604 <create_name+0x54>
 80105fe:	69fb      	ldr	r3, [r7, #28]
 8010600:	3301      	adds	r3, #1
 8010602:	61fb      	str	r3, [r7, #28]
 8010604:	68fa      	ldr	r2, [r7, #12]
 8010606:	69fb      	ldr	r3, [r7, #28]
 8010608:	4413      	add	r3, r2
 801060a:	781b      	ldrb	r3, [r3, #0]
 801060c:	2b2f      	cmp	r3, #47	@ 0x2f
 801060e:	d0f6      	beq.n	80105fe <create_name+0x4e>
 8010610:	68fa      	ldr	r2, [r7, #12]
 8010612:	69fb      	ldr	r3, [r7, #28]
 8010614:	4413      	add	r3, r2
 8010616:	781b      	ldrb	r3, [r3, #0]
 8010618:	2b5c      	cmp	r3, #92	@ 0x5c
 801061a:	d0f0      	beq.n	80105fe <create_name+0x4e>
			break;
 801061c:	e038      	b.n	8010690 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801061e:	7efb      	ldrb	r3, [r7, #27]
 8010620:	2b2e      	cmp	r3, #46	@ 0x2e
 8010622:	d003      	beq.n	801062c <create_name+0x7c>
 8010624:	693a      	ldr	r2, [r7, #16]
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	429a      	cmp	r2, r3
 801062a:	d30c      	bcc.n	8010646 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	2b0b      	cmp	r3, #11
 8010630:	d002      	beq.n	8010638 <create_name+0x88>
 8010632:	7efb      	ldrb	r3, [r7, #27]
 8010634:	2b2e      	cmp	r3, #46	@ 0x2e
 8010636:	d001      	beq.n	801063c <create_name+0x8c>
 8010638:	2306      	movs	r3, #6
 801063a:	e044      	b.n	80106c6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801063c:	2308      	movs	r3, #8
 801063e:	613b      	str	r3, [r7, #16]
 8010640:	230b      	movs	r3, #11
 8010642:	617b      	str	r3, [r7, #20]
			continue;
 8010644:	e022      	b.n	801068c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010646:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801064a:	2b00      	cmp	r3, #0
 801064c:	da04      	bge.n	8010658 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801064e:	7efb      	ldrb	r3, [r7, #27]
 8010650:	3b80      	subs	r3, #128	@ 0x80
 8010652:	4a1f      	ldr	r2, [pc, #124]	@ (80106d0 <create_name+0x120>)
 8010654:	5cd3      	ldrb	r3, [r2, r3]
 8010656:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010658:	7efb      	ldrb	r3, [r7, #27]
 801065a:	4619      	mov	r1, r3
 801065c:	481d      	ldr	r0, [pc, #116]	@ (80106d4 <create_name+0x124>)
 801065e:	f7ff f81d 	bl	800f69c <chk_chr>
 8010662:	4603      	mov	r3, r0
 8010664:	2b00      	cmp	r3, #0
 8010666:	d001      	beq.n	801066c <create_name+0xbc>
 8010668:	2306      	movs	r3, #6
 801066a:	e02c      	b.n	80106c6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801066c:	7efb      	ldrb	r3, [r7, #27]
 801066e:	2b60      	cmp	r3, #96	@ 0x60
 8010670:	d905      	bls.n	801067e <create_name+0xce>
 8010672:	7efb      	ldrb	r3, [r7, #27]
 8010674:	2b7a      	cmp	r3, #122	@ 0x7a
 8010676:	d802      	bhi.n	801067e <create_name+0xce>
 8010678:	7efb      	ldrb	r3, [r7, #27]
 801067a:	3b20      	subs	r3, #32
 801067c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801067e:	693b      	ldr	r3, [r7, #16]
 8010680:	1c5a      	adds	r2, r3, #1
 8010682:	613a      	str	r2, [r7, #16]
 8010684:	68ba      	ldr	r2, [r7, #8]
 8010686:	4413      	add	r3, r2
 8010688:	7efa      	ldrb	r2, [r7, #27]
 801068a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801068c:	e7a6      	b.n	80105dc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801068e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010690:	68fa      	ldr	r2, [r7, #12]
 8010692:	69fb      	ldr	r3, [r7, #28]
 8010694:	441a      	add	r2, r3
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801069a:	693b      	ldr	r3, [r7, #16]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d101      	bne.n	80106a4 <create_name+0xf4>
 80106a0:	2306      	movs	r3, #6
 80106a2:	e010      	b.n	80106c6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	2be5      	cmp	r3, #229	@ 0xe5
 80106aa:	d102      	bne.n	80106b2 <create_name+0x102>
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	2205      	movs	r2, #5
 80106b0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80106b2:	7efb      	ldrb	r3, [r7, #27]
 80106b4:	2b20      	cmp	r3, #32
 80106b6:	d801      	bhi.n	80106bc <create_name+0x10c>
 80106b8:	2204      	movs	r2, #4
 80106ba:	e000      	b.n	80106be <create_name+0x10e>
 80106bc:	2200      	movs	r2, #0
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	330b      	adds	r3, #11
 80106c2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80106c4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3720      	adds	r7, #32
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}
 80106ce:	bf00      	nop
 80106d0:	08017ec8 	.word	0x08017ec8
 80106d4:	08017cc4 	.word	0x08017cc4

080106d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b086      	sub	sp, #24
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
 80106e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80106ec:	e002      	b.n	80106f4 <follow_path+0x1c>
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	3301      	adds	r3, #1
 80106f2:	603b      	str	r3, [r7, #0]
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80106fa:	d0f8      	beq.n	80106ee <follow_path+0x16>
 80106fc:	683b      	ldr	r3, [r7, #0]
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	2b5c      	cmp	r3, #92	@ 0x5c
 8010702:	d0f4      	beq.n	80106ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	2200      	movs	r2, #0
 8010708:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	781b      	ldrb	r3, [r3, #0]
 801070e:	2b1f      	cmp	r3, #31
 8010710:	d80a      	bhi.n	8010728 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	2280      	movs	r2, #128	@ 0x80
 8010716:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801071a:	2100      	movs	r1, #0
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f7ff fcfa 	bl	8010116 <dir_sdi>
 8010722:	4603      	mov	r3, r0
 8010724:	75fb      	strb	r3, [r7, #23]
 8010726:	e043      	b.n	80107b0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010728:	463b      	mov	r3, r7
 801072a:	4619      	mov	r1, r3
 801072c:	6878      	ldr	r0, [r7, #4]
 801072e:	f7ff ff3f 	bl	80105b0 <create_name>
 8010732:	4603      	mov	r3, r0
 8010734:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010736:	7dfb      	ldrb	r3, [r7, #23]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d134      	bne.n	80107a6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f7ff feb0 	bl	80104a2 <dir_find>
 8010742:	4603      	mov	r3, r0
 8010744:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801074c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801074e:	7dfb      	ldrb	r3, [r7, #23]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d00a      	beq.n	801076a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010754:	7dfb      	ldrb	r3, [r7, #23]
 8010756:	2b04      	cmp	r3, #4
 8010758:	d127      	bne.n	80107aa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801075a:	7afb      	ldrb	r3, [r7, #11]
 801075c:	f003 0304 	and.w	r3, r3, #4
 8010760:	2b00      	cmp	r3, #0
 8010762:	d122      	bne.n	80107aa <follow_path+0xd2>
 8010764:	2305      	movs	r3, #5
 8010766:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010768:	e01f      	b.n	80107aa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801076a:	7afb      	ldrb	r3, [r7, #11]
 801076c:	f003 0304 	and.w	r3, r3, #4
 8010770:	2b00      	cmp	r3, #0
 8010772:	d11c      	bne.n	80107ae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	799b      	ldrb	r3, [r3, #6]
 8010778:	f003 0310 	and.w	r3, r3, #16
 801077c:	2b00      	cmp	r3, #0
 801077e:	d102      	bne.n	8010786 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010780:	2305      	movs	r3, #5
 8010782:	75fb      	strb	r3, [r7, #23]
 8010784:	e014      	b.n	80107b0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	695b      	ldr	r3, [r3, #20]
 8010790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010794:	4413      	add	r3, r2
 8010796:	4619      	mov	r1, r3
 8010798:	68f8      	ldr	r0, [r7, #12]
 801079a:	f7ff fe43 	bl	8010424 <ld_clust>
 801079e:	4602      	mov	r2, r0
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80107a4:	e7c0      	b.n	8010728 <follow_path+0x50>
			if (res != FR_OK) break;
 80107a6:	bf00      	nop
 80107a8:	e002      	b.n	80107b0 <follow_path+0xd8>
				break;
 80107aa:	bf00      	nop
 80107ac:	e000      	b.n	80107b0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80107ae:	bf00      	nop
			}
		}
	}

	return res;
 80107b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	3718      	adds	r7, #24
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}

080107ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80107ba:	b480      	push	{r7}
 80107bc:	b087      	sub	sp, #28
 80107be:	af00      	add	r7, sp, #0
 80107c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80107c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80107c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d031      	beq.n	8010834 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	617b      	str	r3, [r7, #20]
 80107d6:	e002      	b.n	80107de <get_ldnumber+0x24>
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	3301      	adds	r3, #1
 80107dc:	617b      	str	r3, [r7, #20]
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	2b20      	cmp	r3, #32
 80107e4:	d903      	bls.n	80107ee <get_ldnumber+0x34>
 80107e6:	697b      	ldr	r3, [r7, #20]
 80107e8:	781b      	ldrb	r3, [r3, #0]
 80107ea:	2b3a      	cmp	r3, #58	@ 0x3a
 80107ec:	d1f4      	bne.n	80107d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80107ee:	697b      	ldr	r3, [r7, #20]
 80107f0:	781b      	ldrb	r3, [r3, #0]
 80107f2:	2b3a      	cmp	r3, #58	@ 0x3a
 80107f4:	d11c      	bne.n	8010830 <get_ldnumber+0x76>
			tp = *path;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	1c5a      	adds	r2, r3, #1
 8010800:	60fa      	str	r2, [r7, #12]
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	3b30      	subs	r3, #48	@ 0x30
 8010806:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	2b09      	cmp	r3, #9
 801080c:	d80e      	bhi.n	801082c <get_ldnumber+0x72>
 801080e:	68fa      	ldr	r2, [r7, #12]
 8010810:	697b      	ldr	r3, [r7, #20]
 8010812:	429a      	cmp	r2, r3
 8010814:	d10a      	bne.n	801082c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d107      	bne.n	801082c <get_ldnumber+0x72>
					vol = (int)i;
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010820:	697b      	ldr	r3, [r7, #20]
 8010822:	3301      	adds	r3, #1
 8010824:	617b      	str	r3, [r7, #20]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	697a      	ldr	r2, [r7, #20]
 801082a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801082c:	693b      	ldr	r3, [r7, #16]
 801082e:	e002      	b.n	8010836 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010830:	2300      	movs	r3, #0
 8010832:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010834:	693b      	ldr	r3, [r7, #16]
}
 8010836:	4618      	mov	r0, r3
 8010838:	371c      	adds	r7, #28
 801083a:	46bd      	mov	sp, r7
 801083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010840:	4770      	bx	lr
	...

08010844 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b082      	sub	sp, #8
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
 801084c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	2200      	movs	r2, #0
 8010852:	70da      	strb	r2, [r3, #3]
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801085a:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801085c:	6839      	ldr	r1, [r7, #0]
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f7ff f8dc 	bl	800fa1c <move_window>
 8010864:	4603      	mov	r3, r0
 8010866:	2b00      	cmp	r3, #0
 8010868:	d001      	beq.n	801086e <check_fs+0x2a>
 801086a:	2304      	movs	r3, #4
 801086c:	e038      	b.n	80108e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	3334      	adds	r3, #52	@ 0x34
 8010872:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010876:	4618      	mov	r0, r3
 8010878:	f7fe fe2a 	bl	800f4d0 <ld_word>
 801087c:	4603      	mov	r3, r0
 801087e:	461a      	mov	r2, r3
 8010880:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010884:	429a      	cmp	r2, r3
 8010886:	d001      	beq.n	801088c <check_fs+0x48>
 8010888:	2303      	movs	r3, #3
 801088a:	e029      	b.n	80108e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010892:	2be9      	cmp	r3, #233	@ 0xe9
 8010894:	d009      	beq.n	80108aa <check_fs+0x66>
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801089c:	2beb      	cmp	r3, #235	@ 0xeb
 801089e:	d11e      	bne.n	80108de <check_fs+0x9a>
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80108a6:	2b90      	cmp	r3, #144	@ 0x90
 80108a8:	d119      	bne.n	80108de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	3334      	adds	r3, #52	@ 0x34
 80108ae:	3336      	adds	r3, #54	@ 0x36
 80108b0:	4618      	mov	r0, r3
 80108b2:	f7fe fe26 	bl	800f502 <ld_dword>
 80108b6:	4603      	mov	r3, r0
 80108b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80108bc:	4a0a      	ldr	r2, [pc, #40]	@ (80108e8 <check_fs+0xa4>)
 80108be:	4293      	cmp	r3, r2
 80108c0:	d101      	bne.n	80108c6 <check_fs+0x82>
 80108c2:	2300      	movs	r3, #0
 80108c4:	e00c      	b.n	80108e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	3334      	adds	r3, #52	@ 0x34
 80108ca:	3352      	adds	r3, #82	@ 0x52
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7fe fe18 	bl	800f502 <ld_dword>
 80108d2:	4603      	mov	r3, r0
 80108d4:	4a05      	ldr	r2, [pc, #20]	@ (80108ec <check_fs+0xa8>)
 80108d6:	4293      	cmp	r3, r2
 80108d8:	d101      	bne.n	80108de <check_fs+0x9a>
 80108da:	2300      	movs	r3, #0
 80108dc:	e000      	b.n	80108e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80108de:	2302      	movs	r3, #2
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3708      	adds	r7, #8
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	00544146 	.word	0x00544146
 80108ec:	33544146 	.word	0x33544146

080108f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b096      	sub	sp, #88	@ 0x58
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	60f8      	str	r0, [r7, #12]
 80108f8:	60b9      	str	r1, [r7, #8]
 80108fa:	4613      	mov	r3, r2
 80108fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	2200      	movs	r2, #0
 8010902:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010904:	68f8      	ldr	r0, [r7, #12]
 8010906:	f7ff ff58 	bl	80107ba <get_ldnumber>
 801090a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801090c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801090e:	2b00      	cmp	r3, #0
 8010910:	da01      	bge.n	8010916 <find_volume+0x26>
 8010912:	230b      	movs	r3, #11
 8010914:	e235      	b.n	8010d82 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010916:	4aa5      	ldr	r2, [pc, #660]	@ (8010bac <find_volume+0x2bc>)
 8010918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801091a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801091e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010922:	2b00      	cmp	r3, #0
 8010924:	d101      	bne.n	801092a <find_volume+0x3a>
 8010926:	230c      	movs	r3, #12
 8010928:	e22b      	b.n	8010d82 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 801092a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801092c:	f7fe fed1 	bl	800f6d2 <lock_fs>
 8010930:	4603      	mov	r3, r0
 8010932:	2b00      	cmp	r3, #0
 8010934:	d101      	bne.n	801093a <find_volume+0x4a>
 8010936:	230f      	movs	r3, #15
 8010938:	e223      	b.n	8010d82 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801093e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010940:	79fb      	ldrb	r3, [r7, #7]
 8010942:	f023 0301 	bic.w	r3, r3, #1
 8010946:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801094a:	781b      	ldrb	r3, [r3, #0]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d01a      	beq.n	8010986 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010952:	785b      	ldrb	r3, [r3, #1]
 8010954:	4618      	mov	r0, r3
 8010956:	f7fe fd1d 	bl	800f394 <disk_status>
 801095a:	4603      	mov	r3, r0
 801095c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010960:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010964:	f003 0301 	and.w	r3, r3, #1
 8010968:	2b00      	cmp	r3, #0
 801096a:	d10c      	bne.n	8010986 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801096c:	79fb      	ldrb	r3, [r7, #7]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d007      	beq.n	8010982 <find_volume+0x92>
 8010972:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010976:	f003 0304 	and.w	r3, r3, #4
 801097a:	2b00      	cmp	r3, #0
 801097c:	d001      	beq.n	8010982 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801097e:	230a      	movs	r3, #10
 8010980:	e1ff      	b.n	8010d82 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8010982:	2300      	movs	r3, #0
 8010984:	e1fd      	b.n	8010d82 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010988:	2200      	movs	r2, #0
 801098a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801098c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801098e:	b2da      	uxtb	r2, r3
 8010990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010992:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010996:	785b      	ldrb	r3, [r3, #1]
 8010998:	4618      	mov	r0, r3
 801099a:	f7fe fd15 	bl	800f3c8 <disk_initialize>
 801099e:	4603      	mov	r3, r0
 80109a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80109a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80109a8:	f003 0301 	and.w	r3, r3, #1
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d001      	beq.n	80109b4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80109b0:	2303      	movs	r3, #3
 80109b2:	e1e6      	b.n	8010d82 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80109b4:	79fb      	ldrb	r3, [r7, #7]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d007      	beq.n	80109ca <find_volume+0xda>
 80109ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80109be:	f003 0304 	and.w	r3, r3, #4
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d001      	beq.n	80109ca <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80109c6:	230a      	movs	r3, #10
 80109c8:	e1db      	b.n	8010d82 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80109ca:	2300      	movs	r3, #0
 80109cc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80109ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80109d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80109d2:	f7ff ff37 	bl	8010844 <check_fs>
 80109d6:	4603      	mov	r3, r0
 80109d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80109dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80109e0:	2b02      	cmp	r3, #2
 80109e2:	d149      	bne.n	8010a78 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80109e4:	2300      	movs	r3, #0
 80109e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80109e8:	e01e      	b.n	8010a28 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80109ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109ec:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80109f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109f2:	011b      	lsls	r3, r3, #4
 80109f4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80109f8:	4413      	add	r3, r2
 80109fa:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80109fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109fe:	3304      	adds	r3, #4
 8010a00:	781b      	ldrb	r3, [r3, #0]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d006      	beq.n	8010a14 <find_volume+0x124>
 8010a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a08:	3308      	adds	r3, #8
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7fe fd79 	bl	800f502 <ld_dword>
 8010a10:	4602      	mov	r2, r0
 8010a12:	e000      	b.n	8010a16 <find_volume+0x126>
 8010a14:	2200      	movs	r2, #0
 8010a16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a18:	009b      	lsls	r3, r3, #2
 8010a1a:	3358      	adds	r3, #88	@ 0x58
 8010a1c:	443b      	add	r3, r7
 8010a1e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a24:	3301      	adds	r3, #1
 8010a26:	643b      	str	r3, [r7, #64]	@ 0x40
 8010a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a2a:	2b03      	cmp	r3, #3
 8010a2c:	d9dd      	bls.n	80109ea <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010a2e:	2300      	movs	r3, #0
 8010a30:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8010a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d002      	beq.n	8010a3e <find_volume+0x14e>
 8010a38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a3a:	3b01      	subs	r3, #1
 8010a3c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a40:	009b      	lsls	r3, r3, #2
 8010a42:	3358      	adds	r3, #88	@ 0x58
 8010a44:	443b      	add	r3, r7
 8010a46:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010a4a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010a4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d005      	beq.n	8010a5e <find_volume+0x16e>
 8010a52:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010a54:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010a56:	f7ff fef5 	bl	8010844 <check_fs>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	e000      	b.n	8010a60 <find_volume+0x170>
 8010a5e:	2303      	movs	r3, #3
 8010a60:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010a64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010a68:	2b01      	cmp	r3, #1
 8010a6a:	d905      	bls.n	8010a78 <find_volume+0x188>
 8010a6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a6e:	3301      	adds	r3, #1
 8010a70:	643b      	str	r3, [r7, #64]	@ 0x40
 8010a72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a74:	2b03      	cmp	r3, #3
 8010a76:	d9e2      	bls.n	8010a3e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010a78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010a7c:	2b04      	cmp	r3, #4
 8010a7e:	d101      	bne.n	8010a84 <find_volume+0x194>
 8010a80:	2301      	movs	r3, #1
 8010a82:	e17e      	b.n	8010d82 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010a84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010a88:	2b01      	cmp	r3, #1
 8010a8a:	d901      	bls.n	8010a90 <find_volume+0x1a0>
 8010a8c:	230d      	movs	r3, #13
 8010a8e:	e178      	b.n	8010d82 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a92:	3334      	adds	r3, #52	@ 0x34
 8010a94:	330b      	adds	r3, #11
 8010a96:	4618      	mov	r0, r3
 8010a98:	f7fe fd1a 	bl	800f4d0 <ld_word>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010aa2:	d001      	beq.n	8010aa8 <find_volume+0x1b8>
 8010aa4:	230d      	movs	r3, #13
 8010aa6:	e16c      	b.n	8010d82 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aaa:	3334      	adds	r3, #52	@ 0x34
 8010aac:	3316      	adds	r3, #22
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7fe fd0e 	bl	800f4d0 <ld_word>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010ab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d106      	bne.n	8010acc <find_volume+0x1dc>
 8010abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ac0:	3334      	adds	r3, #52	@ 0x34
 8010ac2:	3324      	adds	r3, #36	@ 0x24
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f7fe fd1c 	bl	800f502 <ld_dword>
 8010aca:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8010acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ace:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010ad0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ad4:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8010ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ada:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ade:	789b      	ldrb	r3, [r3, #2]
 8010ae0:	2b01      	cmp	r3, #1
 8010ae2:	d005      	beq.n	8010af0 <find_volume+0x200>
 8010ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ae6:	789b      	ldrb	r3, [r3, #2]
 8010ae8:	2b02      	cmp	r3, #2
 8010aea:	d001      	beq.n	8010af0 <find_volume+0x200>
 8010aec:	230d      	movs	r3, #13
 8010aee:	e148      	b.n	8010d82 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010af2:	789b      	ldrb	r3, [r3, #2]
 8010af4:	461a      	mov	r2, r3
 8010af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010af8:	fb02 f303 	mul.w	r3, r2, r3
 8010afc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010b04:	461a      	mov	r2, r3
 8010b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b08:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b0c:	895b      	ldrh	r3, [r3, #10]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d008      	beq.n	8010b24 <find_volume+0x234>
 8010b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b14:	895b      	ldrh	r3, [r3, #10]
 8010b16:	461a      	mov	r2, r3
 8010b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b1a:	895b      	ldrh	r3, [r3, #10]
 8010b1c:	3b01      	subs	r3, #1
 8010b1e:	4013      	ands	r3, r2
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d001      	beq.n	8010b28 <find_volume+0x238>
 8010b24:	230d      	movs	r3, #13
 8010b26:	e12c      	b.n	8010d82 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b2a:	3334      	adds	r3, #52	@ 0x34
 8010b2c:	3311      	adds	r3, #17
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7fe fcce 	bl	800f4d0 <ld_word>
 8010b34:	4603      	mov	r3, r0
 8010b36:	461a      	mov	r2, r3
 8010b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b3a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b3e:	891b      	ldrh	r3, [r3, #8]
 8010b40:	f003 030f 	and.w	r3, r3, #15
 8010b44:	b29b      	uxth	r3, r3
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d001      	beq.n	8010b4e <find_volume+0x25e>
 8010b4a:	230d      	movs	r3, #13
 8010b4c:	e119      	b.n	8010d82 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b50:	3334      	adds	r3, #52	@ 0x34
 8010b52:	3313      	adds	r3, #19
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7fe fcbb 	bl	800f4d0 <ld_word>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010b5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d106      	bne.n	8010b72 <find_volume+0x282>
 8010b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b66:	3334      	adds	r3, #52	@ 0x34
 8010b68:	3320      	adds	r3, #32
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fe fcc9 	bl	800f502 <ld_dword>
 8010b70:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b74:	3334      	adds	r3, #52	@ 0x34
 8010b76:	330e      	adds	r3, #14
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7fe fca9 	bl	800f4d0 <ld_word>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010b82:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d101      	bne.n	8010b8c <find_volume+0x29c>
 8010b88:	230d      	movs	r3, #13
 8010b8a:	e0fa      	b.n	8010d82 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010b8c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b90:	4413      	add	r3, r2
 8010b92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010b94:	8912      	ldrh	r2, [r2, #8]
 8010b96:	0912      	lsrs	r2, r2, #4
 8010b98:	b292      	uxth	r2, r2
 8010b9a:	4413      	add	r3, r2
 8010b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010b9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ba2:	429a      	cmp	r2, r3
 8010ba4:	d204      	bcs.n	8010bb0 <find_volume+0x2c0>
 8010ba6:	230d      	movs	r3, #13
 8010ba8:	e0eb      	b.n	8010d82 <find_volume+0x492>
 8010baa:	bf00      	nop
 8010bac:	24000a48 	.word	0x24000a48
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010bb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bb4:	1ad3      	subs	r3, r2, r3
 8010bb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010bb8:	8952      	ldrh	r2, [r2, #10]
 8010bba:	fbb3 f3f2 	udiv	r3, r3, r2
 8010bbe:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d101      	bne.n	8010bca <find_volume+0x2da>
 8010bc6:	230d      	movs	r3, #13
 8010bc8:	e0db      	b.n	8010d82 <find_volume+0x492>
		fmt = FS_FAT32;
 8010bca:	2303      	movs	r3, #3
 8010bcc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bd2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010bd6:	4293      	cmp	r3, r2
 8010bd8:	d802      	bhi.n	8010be0 <find_volume+0x2f0>
 8010bda:	2302      	movs	r3, #2
 8010bdc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010be2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010be6:	4293      	cmp	r3, r2
 8010be8:	d802      	bhi.n	8010bf0 <find_volume+0x300>
 8010bea:	2301      	movs	r3, #1
 8010bec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bf2:	1c9a      	adds	r2, r3, #2
 8010bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bf6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bfa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010bfc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010bfe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010c00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c02:	441a      	add	r2, r3
 8010c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c06:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010c08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c0c:	441a      	add	r2, r3
 8010c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c10:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8010c12:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010c16:	2b03      	cmp	r3, #3
 8010c18:	d11e      	bne.n	8010c58 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c1c:	3334      	adds	r3, #52	@ 0x34
 8010c1e:	332a      	adds	r3, #42	@ 0x2a
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7fe fc55 	bl	800f4d0 <ld_word>
 8010c26:	4603      	mov	r3, r0
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d001      	beq.n	8010c30 <find_volume+0x340>
 8010c2c:	230d      	movs	r3, #13
 8010c2e:	e0a8      	b.n	8010d82 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c32:	891b      	ldrh	r3, [r3, #8]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d001      	beq.n	8010c3c <find_volume+0x34c>
 8010c38:	230d      	movs	r3, #13
 8010c3a:	e0a2      	b.n	8010d82 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c3e:	3334      	adds	r3, #52	@ 0x34
 8010c40:	332c      	adds	r3, #44	@ 0x2c
 8010c42:	4618      	mov	r0, r3
 8010c44:	f7fe fc5d 	bl	800f502 <ld_dword>
 8010c48:	4602      	mov	r2, r0
 8010c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c4c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c50:	699b      	ldr	r3, [r3, #24]
 8010c52:	009b      	lsls	r3, r3, #2
 8010c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8010c56:	e01f      	b.n	8010c98 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c5a:	891b      	ldrh	r3, [r3, #8]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d101      	bne.n	8010c64 <find_volume+0x374>
 8010c60:	230d      	movs	r3, #13
 8010c62:	e08e      	b.n	8010d82 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010c68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c6a:	441a      	add	r2, r3
 8010c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c6e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010c70:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010c74:	2b02      	cmp	r3, #2
 8010c76:	d103      	bne.n	8010c80 <find_volume+0x390>
 8010c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c7a:	699b      	ldr	r3, [r3, #24]
 8010c7c:	005b      	lsls	r3, r3, #1
 8010c7e:	e00a      	b.n	8010c96 <find_volume+0x3a6>
 8010c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c82:	699a      	ldr	r2, [r3, #24]
 8010c84:	4613      	mov	r3, r2
 8010c86:	005b      	lsls	r3, r3, #1
 8010c88:	4413      	add	r3, r2
 8010c8a:	085a      	lsrs	r2, r3, #1
 8010c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c8e:	699b      	ldr	r3, [r3, #24]
 8010c90:	f003 0301 	and.w	r3, r3, #1
 8010c94:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010c96:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c9a:	69da      	ldr	r2, [r3, #28]
 8010c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c9e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8010ca2:	0a5b      	lsrs	r3, r3, #9
 8010ca4:	429a      	cmp	r2, r3
 8010ca6:	d201      	bcs.n	8010cac <find_volume+0x3bc>
 8010ca8:	230d      	movs	r3, #13
 8010caa:	e06a      	b.n	8010d82 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010cb2:	615a      	str	r2, [r3, #20]
 8010cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cb6:	695a      	ldr	r2, [r3, #20]
 8010cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cba:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cbe:	2280      	movs	r2, #128	@ 0x80
 8010cc0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010cc2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010cc6:	2b03      	cmp	r3, #3
 8010cc8:	d149      	bne.n	8010d5e <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ccc:	3334      	adds	r3, #52	@ 0x34
 8010cce:	3330      	adds	r3, #48	@ 0x30
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f7fe fbfd 	bl	800f4d0 <ld_word>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	2b01      	cmp	r3, #1
 8010cda:	d140      	bne.n	8010d5e <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010cdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010cde:	3301      	adds	r3, #1
 8010ce0:	4619      	mov	r1, r3
 8010ce2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010ce4:	f7fe fe9a 	bl	800fa1c <move_window>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d137      	bne.n	8010d5e <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8010cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cf6:	3334      	adds	r3, #52	@ 0x34
 8010cf8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7fe fbe7 	bl	800f4d0 <ld_word>
 8010d02:	4603      	mov	r3, r0
 8010d04:	461a      	mov	r2, r3
 8010d06:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d127      	bne.n	8010d5e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d10:	3334      	adds	r3, #52	@ 0x34
 8010d12:	4618      	mov	r0, r3
 8010d14:	f7fe fbf5 	bl	800f502 <ld_dword>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	4a1c      	ldr	r2, [pc, #112]	@ (8010d8c <find_volume+0x49c>)
 8010d1c:	4293      	cmp	r3, r2
 8010d1e:	d11e      	bne.n	8010d5e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d22:	3334      	adds	r3, #52	@ 0x34
 8010d24:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f7fe fbea 	bl	800f502 <ld_dword>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	4a17      	ldr	r2, [pc, #92]	@ (8010d90 <find_volume+0x4a0>)
 8010d32:	4293      	cmp	r3, r2
 8010d34:	d113      	bne.n	8010d5e <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d38:	3334      	adds	r3, #52	@ 0x34
 8010d3a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f7fe fbdf 	bl	800f502 <ld_dword>
 8010d44:	4602      	mov	r2, r0
 8010d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d48:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d4c:	3334      	adds	r3, #52	@ 0x34
 8010d4e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8010d52:	4618      	mov	r0, r3
 8010d54:	f7fe fbd5 	bl	800f502 <ld_dword>
 8010d58:	4602      	mov	r2, r0
 8010d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d5c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d60:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8010d64:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010d66:	4b0b      	ldr	r3, [pc, #44]	@ (8010d94 <find_volume+0x4a4>)
 8010d68:	881b      	ldrh	r3, [r3, #0]
 8010d6a:	3301      	adds	r3, #1
 8010d6c:	b29a      	uxth	r2, r3
 8010d6e:	4b09      	ldr	r3, [pc, #36]	@ (8010d94 <find_volume+0x4a4>)
 8010d70:	801a      	strh	r2, [r3, #0]
 8010d72:	4b08      	ldr	r3, [pc, #32]	@ (8010d94 <find_volume+0x4a4>)
 8010d74:	881a      	ldrh	r2, [r3, #0]
 8010d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d78:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010d7a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010d7c:	f7fe fde6 	bl	800f94c <clear_lock>
#endif
	return FR_OK;
 8010d80:	2300      	movs	r3, #0
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3758      	adds	r7, #88	@ 0x58
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
 8010d8a:	bf00      	nop
 8010d8c:	41615252 	.word	0x41615252
 8010d90:	61417272 	.word	0x61417272
 8010d94:	24000a4c 	.word	0x24000a4c

08010d98 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b084      	sub	sp, #16
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
 8010da0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010da2:	2309      	movs	r3, #9
 8010da4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d02e      	beq.n	8010e0a <validate+0x72>
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d02a      	beq.n	8010e0a <validate+0x72>
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	781b      	ldrb	r3, [r3, #0]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d025      	beq.n	8010e0a <validate+0x72>
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	889a      	ldrh	r2, [r3, #4]
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	88db      	ldrh	r3, [r3, #6]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d11e      	bne.n	8010e0a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f7fe fc7e 	bl	800f6d2 <lock_fs>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d014      	beq.n	8010e06 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	785b      	ldrb	r3, [r3, #1]
 8010de2:	4618      	mov	r0, r3
 8010de4:	f7fe fad6 	bl	800f394 <disk_status>
 8010de8:	4603      	mov	r3, r0
 8010dea:	f003 0301 	and.w	r3, r3, #1
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d102      	bne.n	8010df8 <validate+0x60>
				res = FR_OK;
 8010df2:	2300      	movs	r3, #0
 8010df4:	73fb      	strb	r3, [r7, #15]
 8010df6:	e008      	b.n	8010e0a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	2100      	movs	r1, #0
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7fe fc7d 	bl	800f6fe <unlock_fs>
 8010e04:	e001      	b.n	8010e0a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010e06:	230f      	movs	r3, #15
 8010e08:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010e0a:	7bfb      	ldrb	r3, [r7, #15]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d102      	bne.n	8010e16 <validate+0x7e>
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	e000      	b.n	8010e18 <validate+0x80>
 8010e16:	2300      	movs	r3, #0
 8010e18:	683a      	ldr	r2, [r7, #0]
 8010e1a:	6013      	str	r3, [r2, #0]
	return res;
 8010e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3710      	adds	r7, #16
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}
	...

08010e28 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b088      	sub	sp, #32
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	60f8      	str	r0, [r7, #12]
 8010e30:	60b9      	str	r1, [r7, #8]
 8010e32:	4613      	mov	r3, r2
 8010e34:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010e36:	68bb      	ldr	r3, [r7, #8]
 8010e38:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010e3a:	f107 0310 	add.w	r3, r7, #16
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7ff fcbb 	bl	80107ba <get_ldnumber>
 8010e44:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010e46:	69fb      	ldr	r3, [r7, #28]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	da01      	bge.n	8010e50 <f_mount+0x28>
 8010e4c:	230b      	movs	r3, #11
 8010e4e:	e048      	b.n	8010ee2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010e50:	4a26      	ldr	r2, [pc, #152]	@ (8010eec <f_mount+0xc4>)
 8010e52:	69fb      	ldr	r3, [r7, #28]
 8010e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e58:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010e5a:	69bb      	ldr	r3, [r7, #24]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d00f      	beq.n	8010e80 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010e60:	69b8      	ldr	r0, [r7, #24]
 8010e62:	f7fe fd73 	bl	800f94c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010e66:	69bb      	ldr	r3, [r7, #24]
 8010e68:	68db      	ldr	r3, [r3, #12]
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f001 f98c 	bl	8012188 <ff_del_syncobj>
 8010e70:	4603      	mov	r3, r0
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d101      	bne.n	8010e7a <f_mount+0x52>
 8010e76:	2302      	movs	r3, #2
 8010e78:	e033      	b.n	8010ee2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010e7a:	69bb      	ldr	r3, [r7, #24]
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d00f      	beq.n	8010ea6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	2200      	movs	r2, #0
 8010e8a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010e8c:	69fb      	ldr	r3, [r7, #28]
 8010e8e:	b2da      	uxtb	r2, r3
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	330c      	adds	r3, #12
 8010e94:	4619      	mov	r1, r3
 8010e96:	4610      	mov	r0, r2
 8010e98:	f001 f95b 	bl	8012152 <ff_cre_syncobj>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d101      	bne.n	8010ea6 <f_mount+0x7e>
 8010ea2:	2302      	movs	r3, #2
 8010ea4:	e01d      	b.n	8010ee2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010ea6:	68fa      	ldr	r2, [r7, #12]
 8010ea8:	4910      	ldr	r1, [pc, #64]	@ (8010eec <f_mount+0xc4>)
 8010eaa:	69fb      	ldr	r3, [r7, #28]
 8010eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d002      	beq.n	8010ebc <f_mount+0x94>
 8010eb6:	79fb      	ldrb	r3, [r7, #7]
 8010eb8:	2b01      	cmp	r3, #1
 8010eba:	d001      	beq.n	8010ec0 <f_mount+0x98>
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	e010      	b.n	8010ee2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010ec0:	f107 010c 	add.w	r1, r7, #12
 8010ec4:	f107 0308 	add.w	r3, r7, #8
 8010ec8:	2200      	movs	r2, #0
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7ff fd10 	bl	80108f0 <find_volume>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	7dfa      	ldrb	r2, [r7, #23]
 8010ed8:	4611      	mov	r1, r2
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7fe fc0f 	bl	800f6fe <unlock_fs>
 8010ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3720      	adds	r7, #32
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}
 8010eea:	bf00      	nop
 8010eec:	24000a48 	.word	0x24000a48

08010ef0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b098      	sub	sp, #96	@ 0x60
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	60f8      	str	r0, [r7, #12]
 8010ef8:	60b9      	str	r1, [r7, #8]
 8010efa:	4613      	mov	r3, r2
 8010efc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d101      	bne.n	8010f08 <f_open+0x18>
 8010f04:	2309      	movs	r3, #9
 8010f06:	e1b0      	b.n	801126a <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010f08:	79fb      	ldrb	r3, [r7, #7]
 8010f0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010f0e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010f10:	79fa      	ldrb	r2, [r7, #7]
 8010f12:	f107 0110 	add.w	r1, r7, #16
 8010f16:	f107 0308 	add.w	r3, r7, #8
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7ff fce8 	bl	80108f0 <find_volume>
 8010f20:	4603      	mov	r3, r0
 8010f22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8010f26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	f040 818d 	bne.w	801124a <f_open+0x35a>
		dj.obj.fs = fs;
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010f34:	68ba      	ldr	r2, [r7, #8]
 8010f36:	f107 0314 	add.w	r3, r7, #20
 8010f3a:	4611      	mov	r1, r2
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f7ff fbcb 	bl	80106d8 <follow_path>
 8010f42:	4603      	mov	r3, r0
 8010f44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010f48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d118      	bne.n	8010f82 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010f50:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010f54:	b25b      	sxtb	r3, r3
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	da03      	bge.n	8010f62 <f_open+0x72>
				res = FR_INVALID_NAME;
 8010f5a:	2306      	movs	r3, #6
 8010f5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010f60:	e00f      	b.n	8010f82 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010f62:	79fb      	ldrb	r3, [r7, #7]
 8010f64:	2b01      	cmp	r3, #1
 8010f66:	bf8c      	ite	hi
 8010f68:	2301      	movhi	r3, #1
 8010f6a:	2300      	movls	r3, #0
 8010f6c:	b2db      	uxtb	r3, r3
 8010f6e:	461a      	mov	r2, r3
 8010f70:	f107 0314 	add.w	r3, r7, #20
 8010f74:	4611      	mov	r1, r2
 8010f76:	4618      	mov	r0, r3
 8010f78:	f7fe fbdc 	bl	800f734 <chk_lock>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010f82:	79fb      	ldrb	r3, [r7, #7]
 8010f84:	f003 031c 	and.w	r3, r3, #28
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d07f      	beq.n	801108c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8010f8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d017      	beq.n	8010fc4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010f94:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010f98:	2b04      	cmp	r3, #4
 8010f9a:	d10e      	bne.n	8010fba <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010f9c:	f7fe fc26 	bl	800f7ec <enq_lock>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d006      	beq.n	8010fb4 <f_open+0xc4>
 8010fa6:	f107 0314 	add.w	r3, r7, #20
 8010faa:	4618      	mov	r0, r3
 8010fac:	f7ff face 	bl	801054c <dir_register>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	e000      	b.n	8010fb6 <f_open+0xc6>
 8010fb4:	2312      	movs	r3, #18
 8010fb6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010fba:	79fb      	ldrb	r3, [r7, #7]
 8010fbc:	f043 0308 	orr.w	r3, r3, #8
 8010fc0:	71fb      	strb	r3, [r7, #7]
 8010fc2:	e010      	b.n	8010fe6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010fc4:	7ebb      	ldrb	r3, [r7, #26]
 8010fc6:	f003 0311 	and.w	r3, r3, #17
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d003      	beq.n	8010fd6 <f_open+0xe6>
					res = FR_DENIED;
 8010fce:	2307      	movs	r3, #7
 8010fd0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010fd4:	e007      	b.n	8010fe6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010fd6:	79fb      	ldrb	r3, [r7, #7]
 8010fd8:	f003 0304 	and.w	r3, r3, #4
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d002      	beq.n	8010fe6 <f_open+0xf6>
 8010fe0:	2308      	movs	r3, #8
 8010fe2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010fe6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d168      	bne.n	80110c0 <f_open+0x1d0>
 8010fee:	79fb      	ldrb	r3, [r7, #7]
 8010ff0:	f003 0308 	and.w	r3, r3, #8
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d063      	beq.n	80110c0 <f_open+0x1d0>
				dw = GET_FATTIME();
 8010ff8:	f7fd ff92 	bl	800ef20 <get_fattime>
 8010ffc:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011000:	330e      	adds	r3, #14
 8011002:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011004:	4618      	mov	r0, r3
 8011006:	f7fe faba 	bl	800f57e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801100a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801100c:	3316      	adds	r3, #22
 801100e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011010:	4618      	mov	r0, r3
 8011012:	f7fe fab4 	bl	800f57e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011018:	330b      	adds	r3, #11
 801101a:	2220      	movs	r2, #32
 801101c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011022:	4611      	mov	r1, r2
 8011024:	4618      	mov	r0, r3
 8011026:	f7ff f9fd 	bl	8010424 <ld_clust>
 801102a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011030:	2200      	movs	r2, #0
 8011032:	4618      	mov	r0, r3
 8011034:	f7ff fa15 	bl	8010462 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801103a:	331c      	adds	r3, #28
 801103c:	2100      	movs	r1, #0
 801103e:	4618      	mov	r0, r3
 8011040:	f7fe fa9d 	bl	800f57e <st_dword>
					fs->wflag = 1;
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	2201      	movs	r2, #1
 8011048:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801104a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801104c:	2b00      	cmp	r3, #0
 801104e:	d037      	beq.n	80110c0 <f_open+0x1d0>
						dw = fs->winsect;
 8011050:	693b      	ldr	r3, [r7, #16]
 8011052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011054:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8011056:	f107 0314 	add.w	r3, r7, #20
 801105a:	2200      	movs	r2, #0
 801105c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801105e:	4618      	mov	r0, r3
 8011060:	f7fe ff28 	bl	800feb4 <remove_chain>
 8011064:	4603      	mov	r3, r0
 8011066:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801106a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801106e:	2b00      	cmp	r3, #0
 8011070:	d126      	bne.n	80110c0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011076:	4618      	mov	r0, r3
 8011078:	f7fe fcd0 	bl	800fa1c <move_window>
 801107c:	4603      	mov	r3, r0
 801107e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011086:	3a01      	subs	r2, #1
 8011088:	611a      	str	r2, [r3, #16]
 801108a:	e019      	b.n	80110c0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801108c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011090:	2b00      	cmp	r3, #0
 8011092:	d115      	bne.n	80110c0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011094:	7ebb      	ldrb	r3, [r7, #26]
 8011096:	f003 0310 	and.w	r3, r3, #16
 801109a:	2b00      	cmp	r3, #0
 801109c:	d003      	beq.n	80110a6 <f_open+0x1b6>
					res = FR_NO_FILE;
 801109e:	2304      	movs	r3, #4
 80110a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80110a4:	e00c      	b.n	80110c0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80110a6:	79fb      	ldrb	r3, [r7, #7]
 80110a8:	f003 0302 	and.w	r3, r3, #2
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d007      	beq.n	80110c0 <f_open+0x1d0>
 80110b0:	7ebb      	ldrb	r3, [r7, #26]
 80110b2:	f003 0301 	and.w	r3, r3, #1
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d002      	beq.n	80110c0 <f_open+0x1d0>
						res = FR_DENIED;
 80110ba:	2307      	movs	r3, #7
 80110bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80110c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d126      	bne.n	8011116 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80110c8:	79fb      	ldrb	r3, [r7, #7]
 80110ca:	f003 0308 	and.w	r3, r3, #8
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d003      	beq.n	80110da <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80110d2:	79fb      	ldrb	r3, [r7, #7]
 80110d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80110e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80110e8:	79fb      	ldrb	r3, [r7, #7]
 80110ea:	2b01      	cmp	r3, #1
 80110ec:	bf8c      	ite	hi
 80110ee:	2301      	movhi	r3, #1
 80110f0:	2300      	movls	r3, #0
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	461a      	mov	r2, r3
 80110f6:	f107 0314 	add.w	r3, r7, #20
 80110fa:	4611      	mov	r1, r2
 80110fc:	4618      	mov	r0, r3
 80110fe:	f7fe fb97 	bl	800f830 <inc_lock>
 8011102:	4602      	mov	r2, r0
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	691b      	ldr	r3, [r3, #16]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d102      	bne.n	8011116 <f_open+0x226>
 8011110:	2302      	movs	r3, #2
 8011112:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011116:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801111a:	2b00      	cmp	r3, #0
 801111c:	f040 8095 	bne.w	801124a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011120:	693b      	ldr	r3, [r7, #16]
 8011122:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011124:	4611      	mov	r1, r2
 8011126:	4618      	mov	r0, r3
 8011128:	f7ff f97c 	bl	8010424 <ld_clust>
 801112c:	4602      	mov	r2, r0
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011134:	331c      	adds	r3, #28
 8011136:	4618      	mov	r0, r3
 8011138:	f7fe f9e3 	bl	800f502 <ld_dword>
 801113c:	4602      	mov	r2, r0
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	2200      	movs	r2, #0
 8011146:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011148:	693a      	ldr	r2, [r7, #16]
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	88da      	ldrh	r2, [r3, #6]
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	79fa      	ldrb	r2, [r7, #7]
 801115a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	2200      	movs	r2, #0
 8011160:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	2200      	movs	r2, #0
 8011166:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	2200      	movs	r2, #0
 801116c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	3330      	adds	r3, #48	@ 0x30
 8011172:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011176:	2100      	movs	r1, #0
 8011178:	4618      	mov	r0, r3
 801117a:	f7fe fa4d 	bl	800f618 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801117e:	79fb      	ldrb	r3, [r7, #7]
 8011180:	f003 0320 	and.w	r3, r3, #32
 8011184:	2b00      	cmp	r3, #0
 8011186:	d060      	beq.n	801124a <f_open+0x35a>
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	68db      	ldr	r3, [r3, #12]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d05c      	beq.n	801124a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	68da      	ldr	r2, [r3, #12]
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011198:	693b      	ldr	r3, [r7, #16]
 801119a:	895b      	ldrh	r3, [r3, #10]
 801119c:	025b      	lsls	r3, r3, #9
 801119e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	689b      	ldr	r3, [r3, #8]
 80111a4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	68db      	ldr	r3, [r3, #12]
 80111aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80111ac:	e016      	b.n	80111dc <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80111b2:	4618      	mov	r0, r3
 80111b4:	f7fe fced 	bl	800fb92 <get_fat>
 80111b8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80111ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80111bc:	2b01      	cmp	r3, #1
 80111be:	d802      	bhi.n	80111c6 <f_open+0x2d6>
 80111c0:	2302      	movs	r3, #2
 80111c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80111c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80111c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80111cc:	d102      	bne.n	80111d4 <f_open+0x2e4>
 80111ce:	2301      	movs	r3, #1
 80111d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80111d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80111d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80111d8:	1ad3      	subs	r3, r2, r3
 80111da:	657b      	str	r3, [r7, #84]	@ 0x54
 80111dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d103      	bne.n	80111ec <f_open+0x2fc>
 80111e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80111e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d8e0      	bhi.n	80111ae <f_open+0x2be>
				}
				fp->clust = clst;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80111f0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80111f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d127      	bne.n	801124a <f_open+0x35a>
 80111fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80111fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011200:	2b00      	cmp	r3, #0
 8011202:	d022      	beq.n	801124a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011204:	693b      	ldr	r3, [r7, #16]
 8011206:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011208:	4618      	mov	r0, r3
 801120a:	f7fe fca3 	bl	800fb54 <clust2sect>
 801120e:	6478      	str	r0, [r7, #68]	@ 0x44
 8011210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011212:	2b00      	cmp	r3, #0
 8011214:	d103      	bne.n	801121e <f_open+0x32e>
						res = FR_INT_ERR;
 8011216:	2302      	movs	r3, #2
 8011218:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801121c:	e015      	b.n	801124a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801121e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011220:	0a5a      	lsrs	r2, r3, #9
 8011222:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011224:	441a      	add	r2, r3
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801122a:	693b      	ldr	r3, [r7, #16]
 801122c:	7858      	ldrb	r0, [r3, #1]
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	6a1a      	ldr	r2, [r3, #32]
 8011238:	2301      	movs	r3, #1
 801123a:	f7fe f8eb 	bl	800f414 <disk_read>
 801123e:	4603      	mov	r3, r0
 8011240:	2b00      	cmp	r3, #0
 8011242:	d002      	beq.n	801124a <f_open+0x35a>
 8011244:	2301      	movs	r3, #1
 8011246:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801124a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801124e:	2b00      	cmp	r3, #0
 8011250:	d002      	beq.n	8011258 <f_open+0x368>
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	2200      	movs	r2, #0
 8011256:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801125e:	4611      	mov	r1, r2
 8011260:	4618      	mov	r0, r3
 8011262:	f7fe fa4c 	bl	800f6fe <unlock_fs>
 8011266:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801126a:	4618      	mov	r0, r3
 801126c:	3760      	adds	r7, #96	@ 0x60
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}

08011272 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011272:	b580      	push	{r7, lr}
 8011274:	b08c      	sub	sp, #48	@ 0x30
 8011276:	af00      	add	r7, sp, #0
 8011278:	60f8      	str	r0, [r7, #12]
 801127a:	60b9      	str	r1, [r7, #8]
 801127c:	607a      	str	r2, [r7, #4]
 801127e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	2200      	movs	r2, #0
 8011288:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	f107 0210 	add.w	r2, r7, #16
 8011290:	4611      	mov	r1, r2
 8011292:	4618      	mov	r0, r3
 8011294:	f7ff fd80 	bl	8010d98 <validate>
 8011298:	4603      	mov	r3, r0
 801129a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801129e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d107      	bne.n	80112b6 <f_write+0x44>
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	7d5b      	ldrb	r3, [r3, #21]
 80112aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80112ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d009      	beq.n	80112ca <f_write+0x58>
 80112b6:	693b      	ldr	r3, [r7, #16]
 80112b8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80112bc:	4611      	mov	r1, r2
 80112be:	4618      	mov	r0, r3
 80112c0:	f7fe fa1d 	bl	800f6fe <unlock_fs>
 80112c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80112c8:	e173      	b.n	80115b2 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	7d1b      	ldrb	r3, [r3, #20]
 80112ce:	f003 0302 	and.w	r3, r3, #2
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d106      	bne.n	80112e4 <f_write+0x72>
 80112d6:	693b      	ldr	r3, [r7, #16]
 80112d8:	2107      	movs	r1, #7
 80112da:	4618      	mov	r0, r3
 80112dc:	f7fe fa0f 	bl	800f6fe <unlock_fs>
 80112e0:	2307      	movs	r3, #7
 80112e2:	e166      	b.n	80115b2 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	699a      	ldr	r2, [r3, #24]
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	441a      	add	r2, r3
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	699b      	ldr	r3, [r3, #24]
 80112f0:	429a      	cmp	r2, r3
 80112f2:	f080 814b 	bcs.w	801158c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	699b      	ldr	r3, [r3, #24]
 80112fa:	43db      	mvns	r3, r3
 80112fc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80112fe:	e145      	b.n	801158c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	699b      	ldr	r3, [r3, #24]
 8011304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011308:	2b00      	cmp	r3, #0
 801130a:	f040 8101 	bne.w	8011510 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	699b      	ldr	r3, [r3, #24]
 8011312:	0a5b      	lsrs	r3, r3, #9
 8011314:	693a      	ldr	r2, [r7, #16]
 8011316:	8952      	ldrh	r2, [r2, #10]
 8011318:	3a01      	subs	r2, #1
 801131a:	4013      	ands	r3, r2
 801131c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801131e:	69bb      	ldr	r3, [r7, #24]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d14d      	bne.n	80113c0 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	699b      	ldr	r3, [r3, #24]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d10c      	bne.n	8011346 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	689b      	ldr	r3, [r3, #8]
 8011330:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011334:	2b00      	cmp	r3, #0
 8011336:	d11a      	bne.n	801136e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	2100      	movs	r1, #0
 801133c:	4618      	mov	r0, r3
 801133e:	f7fe fe1e 	bl	800ff7e <create_chain>
 8011342:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011344:	e013      	b.n	801136e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801134a:	2b00      	cmp	r3, #0
 801134c:	d007      	beq.n	801135e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	699b      	ldr	r3, [r3, #24]
 8011352:	4619      	mov	r1, r3
 8011354:	68f8      	ldr	r0, [r7, #12]
 8011356:	f7fe feaa 	bl	80100ae <clmt_clust>
 801135a:	62b8      	str	r0, [r7, #40]	@ 0x28
 801135c:	e007      	b.n	801136e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801135e:	68fa      	ldr	r2, [r7, #12]
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	69db      	ldr	r3, [r3, #28]
 8011364:	4619      	mov	r1, r3
 8011366:	4610      	mov	r0, r2
 8011368:	f7fe fe09 	bl	800ff7e <create_chain>
 801136c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801136e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011370:	2b00      	cmp	r3, #0
 8011372:	f000 8110 	beq.w	8011596 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011378:	2b01      	cmp	r3, #1
 801137a:	d109      	bne.n	8011390 <f_write+0x11e>
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	2202      	movs	r2, #2
 8011380:	755a      	strb	r2, [r3, #21]
 8011382:	693b      	ldr	r3, [r7, #16]
 8011384:	2102      	movs	r1, #2
 8011386:	4618      	mov	r0, r3
 8011388:	f7fe f9b9 	bl	800f6fe <unlock_fs>
 801138c:	2302      	movs	r3, #2
 801138e:	e110      	b.n	80115b2 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011392:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011396:	d109      	bne.n	80113ac <f_write+0x13a>
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	2201      	movs	r2, #1
 801139c:	755a      	strb	r2, [r3, #21]
 801139e:	693b      	ldr	r3, [r7, #16]
 80113a0:	2101      	movs	r1, #1
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7fe f9ab 	bl	800f6fe <unlock_fs>
 80113a8:	2301      	movs	r3, #1
 80113aa:	e102      	b.n	80115b2 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80113b0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	689b      	ldr	r3, [r3, #8]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d102      	bne.n	80113c0 <f_write+0x14e>
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80113be:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	7d1b      	ldrb	r3, [r3, #20]
 80113c4:	b25b      	sxtb	r3, r3
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	da1d      	bge.n	8011406 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	7858      	ldrb	r0, [r3, #1]
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	6a1a      	ldr	r2, [r3, #32]
 80113d8:	2301      	movs	r3, #1
 80113da:	f7fe f83b 	bl	800f454 <disk_write>
 80113de:	4603      	mov	r3, r0
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d009      	beq.n	80113f8 <f_write+0x186>
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	2201      	movs	r2, #1
 80113e8:	755a      	strb	r2, [r3, #21]
 80113ea:	693b      	ldr	r3, [r7, #16]
 80113ec:	2101      	movs	r1, #1
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7fe f985 	bl	800f6fe <unlock_fs>
 80113f4:	2301      	movs	r3, #1
 80113f6:	e0dc      	b.n	80115b2 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	7d1b      	ldrb	r3, [r3, #20]
 80113fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011400:	b2da      	uxtb	r2, r3
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011406:	693a      	ldr	r2, [r7, #16]
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	69db      	ldr	r3, [r3, #28]
 801140c:	4619      	mov	r1, r3
 801140e:	4610      	mov	r0, r2
 8011410:	f7fe fba0 	bl	800fb54 <clust2sect>
 8011414:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d109      	bne.n	8011430 <f_write+0x1be>
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	2202      	movs	r2, #2
 8011420:	755a      	strb	r2, [r3, #21]
 8011422:	693b      	ldr	r3, [r7, #16]
 8011424:	2102      	movs	r1, #2
 8011426:	4618      	mov	r0, r3
 8011428:	f7fe f969 	bl	800f6fe <unlock_fs>
 801142c:	2302      	movs	r3, #2
 801142e:	e0c0      	b.n	80115b2 <f_write+0x340>
			sect += csect;
 8011430:	697a      	ldr	r2, [r7, #20]
 8011432:	69bb      	ldr	r3, [r7, #24]
 8011434:	4413      	add	r3, r2
 8011436:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	0a5b      	lsrs	r3, r3, #9
 801143c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801143e:	6a3b      	ldr	r3, [r7, #32]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d041      	beq.n	80114c8 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011444:	69ba      	ldr	r2, [r7, #24]
 8011446:	6a3b      	ldr	r3, [r7, #32]
 8011448:	4413      	add	r3, r2
 801144a:	693a      	ldr	r2, [r7, #16]
 801144c:	8952      	ldrh	r2, [r2, #10]
 801144e:	4293      	cmp	r3, r2
 8011450:	d905      	bls.n	801145e <f_write+0x1ec>
					cc = fs->csize - csect;
 8011452:	693b      	ldr	r3, [r7, #16]
 8011454:	895b      	ldrh	r3, [r3, #10]
 8011456:	461a      	mov	r2, r3
 8011458:	69bb      	ldr	r3, [r7, #24]
 801145a:	1ad3      	subs	r3, r2, r3
 801145c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	7858      	ldrb	r0, [r3, #1]
 8011462:	6a3b      	ldr	r3, [r7, #32]
 8011464:	697a      	ldr	r2, [r7, #20]
 8011466:	69f9      	ldr	r1, [r7, #28]
 8011468:	f7fd fff4 	bl	800f454 <disk_write>
 801146c:	4603      	mov	r3, r0
 801146e:	2b00      	cmp	r3, #0
 8011470:	d009      	beq.n	8011486 <f_write+0x214>
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	2201      	movs	r2, #1
 8011476:	755a      	strb	r2, [r3, #21]
 8011478:	693b      	ldr	r3, [r7, #16]
 801147a:	2101      	movs	r1, #1
 801147c:	4618      	mov	r0, r3
 801147e:	f7fe f93e 	bl	800f6fe <unlock_fs>
 8011482:	2301      	movs	r3, #1
 8011484:	e095      	b.n	80115b2 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	6a1a      	ldr	r2, [r3, #32]
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	1ad3      	subs	r3, r2, r3
 801148e:	6a3a      	ldr	r2, [r7, #32]
 8011490:	429a      	cmp	r2, r3
 8011492:	d915      	bls.n	80114c0 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	6a1a      	ldr	r2, [r3, #32]
 801149e:	697b      	ldr	r3, [r7, #20]
 80114a0:	1ad3      	subs	r3, r2, r3
 80114a2:	025b      	lsls	r3, r3, #9
 80114a4:	69fa      	ldr	r2, [r7, #28]
 80114a6:	4413      	add	r3, r2
 80114a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80114ac:	4619      	mov	r1, r3
 80114ae:	f7fe f892 	bl	800f5d6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	7d1b      	ldrb	r3, [r3, #20]
 80114b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80114ba:	b2da      	uxtb	r2, r3
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80114c0:	6a3b      	ldr	r3, [r7, #32]
 80114c2:	025b      	lsls	r3, r3, #9
 80114c4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80114c6:	e044      	b.n	8011552 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	6a1b      	ldr	r3, [r3, #32]
 80114cc:	697a      	ldr	r2, [r7, #20]
 80114ce:	429a      	cmp	r2, r3
 80114d0:	d01b      	beq.n	801150a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	699a      	ldr	r2, [r3, #24]
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80114da:	429a      	cmp	r2, r3
 80114dc:	d215      	bcs.n	801150a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80114de:	693b      	ldr	r3, [r7, #16]
 80114e0:	7858      	ldrb	r0, [r3, #1]
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80114e8:	2301      	movs	r3, #1
 80114ea:	697a      	ldr	r2, [r7, #20]
 80114ec:	f7fd ff92 	bl	800f414 <disk_read>
 80114f0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d009      	beq.n	801150a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	2201      	movs	r2, #1
 80114fa:	755a      	strb	r2, [r3, #21]
 80114fc:	693b      	ldr	r3, [r7, #16]
 80114fe:	2101      	movs	r1, #1
 8011500:	4618      	mov	r0, r3
 8011502:	f7fe f8fc 	bl	800f6fe <unlock_fs>
 8011506:	2301      	movs	r3, #1
 8011508:	e053      	b.n	80115b2 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	697a      	ldr	r2, [r7, #20]
 801150e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	699b      	ldr	r3, [r3, #24]
 8011514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011518:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801151c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801151e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	429a      	cmp	r2, r3
 8011524:	d901      	bls.n	801152a <f_write+0x2b8>
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	699b      	ldr	r3, [r3, #24]
 8011534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011538:	4413      	add	r3, r2
 801153a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801153c:	69f9      	ldr	r1, [r7, #28]
 801153e:	4618      	mov	r0, r3
 8011540:	f7fe f849 	bl	800f5d6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	7d1b      	ldrb	r3, [r3, #20]
 8011548:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801154c:	b2da      	uxtb	r2, r3
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011552:	69fa      	ldr	r2, [r7, #28]
 8011554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011556:	4413      	add	r3, r2
 8011558:	61fb      	str	r3, [r7, #28]
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	699a      	ldr	r2, [r3, #24]
 801155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011560:	441a      	add	r2, r3
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	619a      	str	r2, [r3, #24]
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	68da      	ldr	r2, [r3, #12]
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	699b      	ldr	r3, [r3, #24]
 801156e:	429a      	cmp	r2, r3
 8011570:	bf38      	it	cc
 8011572:	461a      	movcc	r2, r3
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	60da      	str	r2, [r3, #12]
 8011578:	683b      	ldr	r3, [r7, #0]
 801157a:	681a      	ldr	r2, [r3, #0]
 801157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801157e:	441a      	add	r2, r3
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	601a      	str	r2, [r3, #0]
 8011584:	687a      	ldr	r2, [r7, #4]
 8011586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011588:	1ad3      	subs	r3, r2, r3
 801158a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2b00      	cmp	r3, #0
 8011590:	f47f aeb6 	bne.w	8011300 <f_write+0x8e>
 8011594:	e000      	b.n	8011598 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011596:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	7d1b      	ldrb	r3, [r3, #20]
 801159c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80115a0:	b2da      	uxtb	r2, r3
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80115a6:	693b      	ldr	r3, [r7, #16]
 80115a8:	2100      	movs	r1, #0
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7fe f8a7 	bl	800f6fe <unlock_fs>
 80115b0:	2300      	movs	r3, #0
}
 80115b2:	4618      	mov	r0, r3
 80115b4:	3730      	adds	r7, #48	@ 0x30
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd80      	pop	{r7, pc}

080115ba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80115ba:	b580      	push	{r7, lr}
 80115bc:	b086      	sub	sp, #24
 80115be:	af00      	add	r7, sp, #0
 80115c0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f107 0208 	add.w	r2, r7, #8
 80115c8:	4611      	mov	r1, r2
 80115ca:	4618      	mov	r0, r3
 80115cc:	f7ff fbe4 	bl	8010d98 <validate>
 80115d0:	4603      	mov	r3, r0
 80115d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80115d4:	7dfb      	ldrb	r3, [r7, #23]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d16d      	bne.n	80116b6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	7d1b      	ldrb	r3, [r3, #20]
 80115de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d067      	beq.n	80116b6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	7d1b      	ldrb	r3, [r3, #20]
 80115ea:	b25b      	sxtb	r3, r3
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	da1a      	bge.n	8011626 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	7858      	ldrb	r0, [r3, #1]
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6a1a      	ldr	r2, [r3, #32]
 80115fe:	2301      	movs	r3, #1
 8011600:	f7fd ff28 	bl	800f454 <disk_write>
 8011604:	4603      	mov	r3, r0
 8011606:	2b00      	cmp	r3, #0
 8011608:	d006      	beq.n	8011618 <f_sync+0x5e>
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	2101      	movs	r1, #1
 801160e:	4618      	mov	r0, r3
 8011610:	f7fe f875 	bl	800f6fe <unlock_fs>
 8011614:	2301      	movs	r3, #1
 8011616:	e055      	b.n	80116c4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	7d1b      	ldrb	r3, [r3, #20]
 801161c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011620:	b2da      	uxtb	r2, r3
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011626:	f7fd fc7b 	bl	800ef20 <get_fattime>
 801162a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801162c:	68ba      	ldr	r2, [r7, #8]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011632:	4619      	mov	r1, r3
 8011634:	4610      	mov	r0, r2
 8011636:	f7fe f9f1 	bl	800fa1c <move_window>
 801163a:	4603      	mov	r3, r0
 801163c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801163e:	7dfb      	ldrb	r3, [r7, #23]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d138      	bne.n	80116b6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011648:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	330b      	adds	r3, #11
 801164e:	781a      	ldrb	r2, [r3, #0]
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	330b      	adds	r3, #11
 8011654:	f042 0220 	orr.w	r2, r2, #32
 8011658:	b2d2      	uxtb	r2, r2
 801165a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	6818      	ldr	r0, [r3, #0]
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	689b      	ldr	r3, [r3, #8]
 8011664:	461a      	mov	r2, r3
 8011666:	68f9      	ldr	r1, [r7, #12]
 8011668:	f7fe fefb 	bl	8010462 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	f103 021c 	add.w	r2, r3, #28
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	68db      	ldr	r3, [r3, #12]
 8011676:	4619      	mov	r1, r3
 8011678:	4610      	mov	r0, r2
 801167a:	f7fd ff80 	bl	800f57e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	3316      	adds	r3, #22
 8011682:	6939      	ldr	r1, [r7, #16]
 8011684:	4618      	mov	r0, r3
 8011686:	f7fd ff7a 	bl	800f57e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	3312      	adds	r3, #18
 801168e:	2100      	movs	r1, #0
 8011690:	4618      	mov	r0, r3
 8011692:	f7fd ff59 	bl	800f548 <st_word>
					fs->wflag = 1;
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	2201      	movs	r2, #1
 801169a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	4618      	mov	r0, r3
 80116a0:	f7fe f9ea 	bl	800fa78 <sync_fs>
 80116a4:	4603      	mov	r3, r0
 80116a6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	7d1b      	ldrb	r3, [r3, #20]
 80116ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80116b0:	b2da      	uxtb	r2, r3
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	7dfa      	ldrb	r2, [r7, #23]
 80116ba:	4611      	mov	r1, r2
 80116bc:	4618      	mov	r0, r3
 80116be:	f7fe f81e 	bl	800f6fe <unlock_fs>
 80116c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	3718      	adds	r7, #24
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}

080116cc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b090      	sub	sp, #64	@ 0x40
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
 80116d4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f107 0208 	add.w	r2, r7, #8
 80116dc:	4611      	mov	r1, r2
 80116de:	4618      	mov	r0, r3
 80116e0:	f7ff fb5a 	bl	8010d98 <validate>
 80116e4:	4603      	mov	r3, r0
 80116e6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80116ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d103      	bne.n	80116fa <f_lseek+0x2e>
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	7d5b      	ldrb	r3, [r3, #21]
 80116f6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80116fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d009      	beq.n	8011716 <f_lseek+0x4a>
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8011708:	4611      	mov	r1, r2
 801170a:	4618      	mov	r0, r3
 801170c:	f7fd fff7 	bl	800f6fe <unlock_fs>
 8011710:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011714:	e229      	b.n	8011b6a <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801171a:	2b00      	cmp	r3, #0
 801171c:	f000 80ea 	beq.w	80118f4 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011726:	d164      	bne.n	80117f2 <f_lseek+0x126>
			tbl = fp->cltbl;
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801172c:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011730:	1d1a      	adds	r2, r3, #4
 8011732:	627a      	str	r2, [r7, #36]	@ 0x24
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	617b      	str	r3, [r7, #20]
 8011738:	2302      	movs	r3, #2
 801173a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	689b      	ldr	r3, [r3, #8]
 8011740:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8011742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011744:	2b00      	cmp	r3, #0
 8011746:	d044      	beq.n	80117d2 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801174a:	613b      	str	r3, [r7, #16]
 801174c:	2300      	movs	r3, #0
 801174e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011752:	3302      	adds	r3, #2
 8011754:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8011756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011758:	60fb      	str	r3, [r7, #12]
 801175a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801175c:	3301      	adds	r3, #1
 801175e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011764:	4618      	mov	r0, r3
 8011766:	f7fe fa14 	bl	800fb92 <get_fat>
 801176a:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801176c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801176e:	2b01      	cmp	r3, #1
 8011770:	d809      	bhi.n	8011786 <f_lseek+0xba>
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	2202      	movs	r2, #2
 8011776:	755a      	strb	r2, [r3, #21]
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	2102      	movs	r1, #2
 801177c:	4618      	mov	r0, r3
 801177e:	f7fd ffbe 	bl	800f6fe <unlock_fs>
 8011782:	2302      	movs	r3, #2
 8011784:	e1f1      	b.n	8011b6a <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011788:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801178c:	d109      	bne.n	80117a2 <f_lseek+0xd6>
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2201      	movs	r2, #1
 8011792:	755a      	strb	r2, [r3, #21]
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	2101      	movs	r1, #1
 8011798:	4618      	mov	r0, r3
 801179a:	f7fd ffb0 	bl	800f6fe <unlock_fs>
 801179e:	2301      	movs	r3, #1
 80117a0:	e1e3      	b.n	8011b6a <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	3301      	adds	r3, #1
 80117a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80117a8:	429a      	cmp	r2, r3
 80117aa:	d0d4      	beq.n	8011756 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80117ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80117ae:	697b      	ldr	r3, [r7, #20]
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d809      	bhi.n	80117c8 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80117b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117b6:	1d1a      	adds	r2, r3, #4
 80117b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80117ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80117bc:	601a      	str	r2, [r3, #0]
 80117be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117c0:	1d1a      	adds	r2, r3, #4
 80117c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80117c4:	693a      	ldr	r2, [r7, #16]
 80117c6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	699b      	ldr	r3, [r3, #24]
 80117cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80117ce:	429a      	cmp	r2, r3
 80117d0:	d3ba      	bcc.n	8011748 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80117d8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80117da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80117dc:	697b      	ldr	r3, [r7, #20]
 80117de:	429a      	cmp	r2, r3
 80117e0:	d803      	bhi.n	80117ea <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80117e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117e4:	2200      	movs	r2, #0
 80117e6:	601a      	str	r2, [r3, #0]
 80117e8:	e1b6      	b.n	8011b58 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80117ea:	2311      	movs	r3, #17
 80117ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80117f0:	e1b2      	b.n	8011b58 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	68db      	ldr	r3, [r3, #12]
 80117f6:	683a      	ldr	r2, [r7, #0]
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d902      	bls.n	8011802 <f_lseek+0x136>
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	68db      	ldr	r3, [r3, #12]
 8011800:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	683a      	ldr	r2, [r7, #0]
 8011806:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	2b00      	cmp	r3, #0
 801180c:	f000 81a4 	beq.w	8011b58 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	3b01      	subs	r3, #1
 8011814:	4619      	mov	r1, r3
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f7fe fc49 	bl	80100ae <clmt_clust>
 801181c:	4602      	mov	r2, r0
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011822:	68ba      	ldr	r2, [r7, #8]
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	69db      	ldr	r3, [r3, #28]
 8011828:	4619      	mov	r1, r3
 801182a:	4610      	mov	r0, r2
 801182c:	f7fe f992 	bl	800fb54 <clust2sect>
 8011830:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011832:	69bb      	ldr	r3, [r7, #24]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d109      	bne.n	801184c <f_lseek+0x180>
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	2202      	movs	r2, #2
 801183c:	755a      	strb	r2, [r3, #21]
 801183e:	68bb      	ldr	r3, [r7, #8]
 8011840:	2102      	movs	r1, #2
 8011842:	4618      	mov	r0, r3
 8011844:	f7fd ff5b 	bl	800f6fe <unlock_fs>
 8011848:	2302      	movs	r3, #2
 801184a:	e18e      	b.n	8011b6a <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	3b01      	subs	r3, #1
 8011850:	0a5b      	lsrs	r3, r3, #9
 8011852:	68ba      	ldr	r2, [r7, #8]
 8011854:	8952      	ldrh	r2, [r2, #10]
 8011856:	3a01      	subs	r2, #1
 8011858:	4013      	ands	r3, r2
 801185a:	69ba      	ldr	r2, [r7, #24]
 801185c:	4413      	add	r3, r2
 801185e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	699b      	ldr	r3, [r3, #24]
 8011864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011868:	2b00      	cmp	r3, #0
 801186a:	f000 8175 	beq.w	8011b58 <f_lseek+0x48c>
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	6a1b      	ldr	r3, [r3, #32]
 8011872:	69ba      	ldr	r2, [r7, #24]
 8011874:	429a      	cmp	r2, r3
 8011876:	f000 816f 	beq.w	8011b58 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	7d1b      	ldrb	r3, [r3, #20]
 801187e:	b25b      	sxtb	r3, r3
 8011880:	2b00      	cmp	r3, #0
 8011882:	da1d      	bge.n	80118c0 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	7858      	ldrb	r0, [r3, #1]
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	6a1a      	ldr	r2, [r3, #32]
 8011892:	2301      	movs	r3, #1
 8011894:	f7fd fdde 	bl	800f454 <disk_write>
 8011898:	4603      	mov	r3, r0
 801189a:	2b00      	cmp	r3, #0
 801189c:	d009      	beq.n	80118b2 <f_lseek+0x1e6>
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2201      	movs	r2, #1
 80118a2:	755a      	strb	r2, [r3, #21]
 80118a4:	68bb      	ldr	r3, [r7, #8]
 80118a6:	2101      	movs	r1, #1
 80118a8:	4618      	mov	r0, r3
 80118aa:	f7fd ff28 	bl	800f6fe <unlock_fs>
 80118ae:	2301      	movs	r3, #1
 80118b0:	e15b      	b.n	8011b6a <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	7d1b      	ldrb	r3, [r3, #20]
 80118b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80118ba:	b2da      	uxtb	r2, r3
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	7858      	ldrb	r0, [r3, #1]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80118ca:	2301      	movs	r3, #1
 80118cc:	69ba      	ldr	r2, [r7, #24]
 80118ce:	f7fd fda1 	bl	800f414 <disk_read>
 80118d2:	4603      	mov	r3, r0
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d009      	beq.n	80118ec <f_lseek+0x220>
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2201      	movs	r2, #1
 80118dc:	755a      	strb	r2, [r3, #21]
 80118de:	68bb      	ldr	r3, [r7, #8]
 80118e0:	2101      	movs	r1, #1
 80118e2:	4618      	mov	r0, r3
 80118e4:	f7fd ff0b 	bl	800f6fe <unlock_fs>
 80118e8:	2301      	movs	r3, #1
 80118ea:	e13e      	b.n	8011b6a <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	69ba      	ldr	r2, [r7, #24]
 80118f0:	621a      	str	r2, [r3, #32]
 80118f2:	e131      	b.n	8011b58 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	68db      	ldr	r3, [r3, #12]
 80118f8:	683a      	ldr	r2, [r7, #0]
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d908      	bls.n	8011910 <f_lseek+0x244>
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	7d1b      	ldrb	r3, [r3, #20]
 8011902:	f003 0302 	and.w	r3, r3, #2
 8011906:	2b00      	cmp	r3, #0
 8011908:	d102      	bne.n	8011910 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	68db      	ldr	r3, [r3, #12]
 801190e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	699b      	ldr	r3, [r3, #24]
 8011914:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011916:	2300      	movs	r3, #0
 8011918:	637b      	str	r3, [r7, #52]	@ 0x34
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801191e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	2b00      	cmp	r3, #0
 8011924:	f000 80c0 	beq.w	8011aa8 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	895b      	ldrh	r3, [r3, #10]
 801192c:	025b      	lsls	r3, r3, #9
 801192e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011930:	6a3b      	ldr	r3, [r7, #32]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d01b      	beq.n	801196e <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011936:	683b      	ldr	r3, [r7, #0]
 8011938:	1e5a      	subs	r2, r3, #1
 801193a:	69fb      	ldr	r3, [r7, #28]
 801193c:	fbb2 f2f3 	udiv	r2, r2, r3
 8011940:	6a3b      	ldr	r3, [r7, #32]
 8011942:	1e59      	subs	r1, r3, #1
 8011944:	69fb      	ldr	r3, [r7, #28]
 8011946:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801194a:	429a      	cmp	r2, r3
 801194c:	d30f      	bcc.n	801196e <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801194e:	6a3b      	ldr	r3, [r7, #32]
 8011950:	1e5a      	subs	r2, r3, #1
 8011952:	69fb      	ldr	r3, [r7, #28]
 8011954:	425b      	negs	r3, r3
 8011956:	401a      	ands	r2, r3
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	699b      	ldr	r3, [r3, #24]
 8011960:	683a      	ldr	r2, [r7, #0]
 8011962:	1ad3      	subs	r3, r2, r3
 8011964:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	69db      	ldr	r3, [r3, #28]
 801196a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801196c:	e02c      	b.n	80119c8 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	689b      	ldr	r3, [r3, #8]
 8011972:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011976:	2b00      	cmp	r3, #0
 8011978:	d123      	bne.n	80119c2 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2100      	movs	r1, #0
 801197e:	4618      	mov	r0, r3
 8011980:	f7fe fafd 	bl	800ff7e <create_chain>
 8011984:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011988:	2b01      	cmp	r3, #1
 801198a:	d109      	bne.n	80119a0 <f_lseek+0x2d4>
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2202      	movs	r2, #2
 8011990:	755a      	strb	r2, [r3, #21]
 8011992:	68bb      	ldr	r3, [r7, #8]
 8011994:	2102      	movs	r1, #2
 8011996:	4618      	mov	r0, r3
 8011998:	f7fd feb1 	bl	800f6fe <unlock_fs>
 801199c:	2302      	movs	r3, #2
 801199e:	e0e4      	b.n	8011b6a <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80119a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80119a6:	d109      	bne.n	80119bc <f_lseek+0x2f0>
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2201      	movs	r2, #1
 80119ac:	755a      	strb	r2, [r3, #21]
 80119ae:	68bb      	ldr	r3, [r7, #8]
 80119b0:	2101      	movs	r1, #1
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7fd fea3 	bl	800f6fe <unlock_fs>
 80119b8:	2301      	movs	r3, #1
 80119ba:	e0d6      	b.n	8011b6a <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80119c0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80119c6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80119c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d06c      	beq.n	8011aa8 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80119ce:	e044      	b.n	8011a5a <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80119d0:	683a      	ldr	r2, [r7, #0]
 80119d2:	69fb      	ldr	r3, [r7, #28]
 80119d4:	1ad3      	subs	r3, r2, r3
 80119d6:	603b      	str	r3, [r7, #0]
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	699a      	ldr	r2, [r3, #24]
 80119dc:	69fb      	ldr	r3, [r7, #28]
 80119de:	441a      	add	r2, r3
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	7d1b      	ldrb	r3, [r3, #20]
 80119e8:	f003 0302 	and.w	r3, r3, #2
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d00b      	beq.n	8011a08 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7fe fac2 	bl	800ff7e <create_chain>
 80119fa:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80119fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d108      	bne.n	8011a14 <f_lseek+0x348>
							ofs = 0; break;
 8011a02:	2300      	movs	r3, #0
 8011a04:	603b      	str	r3, [r7, #0]
 8011a06:	e02c      	b.n	8011a62 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7fe f8c0 	bl	800fb92 <get_fat>
 8011a12:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011a1a:	d109      	bne.n	8011a30 <f_lseek+0x364>
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2201      	movs	r2, #1
 8011a20:	755a      	strb	r2, [r3, #21]
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	2101      	movs	r1, #1
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7fd fe69 	bl	800f6fe <unlock_fs>
 8011a2c:	2301      	movs	r3, #1
 8011a2e:	e09c      	b.n	8011b6a <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a32:	2b01      	cmp	r3, #1
 8011a34:	d904      	bls.n	8011a40 <f_lseek+0x374>
 8011a36:	68bb      	ldr	r3, [r7, #8]
 8011a38:	699b      	ldr	r3, [r3, #24]
 8011a3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011a3c:	429a      	cmp	r2, r3
 8011a3e:	d309      	bcc.n	8011a54 <f_lseek+0x388>
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	2202      	movs	r2, #2
 8011a44:	755a      	strb	r2, [r3, #21]
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	2102      	movs	r1, #2
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7fd fe57 	bl	800f6fe <unlock_fs>
 8011a50:	2302      	movs	r3, #2
 8011a52:	e08a      	b.n	8011b6a <f_lseek+0x49e>
					fp->clust = clst;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011a58:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011a5a:	683a      	ldr	r2, [r7, #0]
 8011a5c:	69fb      	ldr	r3, [r7, #28]
 8011a5e:	429a      	cmp	r2, r3
 8011a60:	d8b6      	bhi.n	80119d0 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	699a      	ldr	r2, [r3, #24]
 8011a66:	683b      	ldr	r3, [r7, #0]
 8011a68:	441a      	add	r2, r3
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d017      	beq.n	8011aa8 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f7fe f869 	bl	800fb54 <clust2sect>
 8011a82:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d109      	bne.n	8011a9e <f_lseek+0x3d2>
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	2202      	movs	r2, #2
 8011a8e:	755a      	strb	r2, [r3, #21]
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	2102      	movs	r1, #2
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7fd fe32 	bl	800f6fe <unlock_fs>
 8011a9a:	2302      	movs	r3, #2
 8011a9c:	e065      	b.n	8011b6a <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	0a5b      	lsrs	r3, r3, #9
 8011aa2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011aa4:	4413      	add	r3, r2
 8011aa6:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	699a      	ldr	r2, [r3, #24]
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	68db      	ldr	r3, [r3, #12]
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d90a      	bls.n	8011aca <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	699a      	ldr	r2, [r3, #24]
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	7d1b      	ldrb	r3, [r3, #20]
 8011ac0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ac4:	b2da      	uxtb	r2, r3
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	699b      	ldr	r3, [r3, #24]
 8011ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d040      	beq.n	8011b58 <f_lseek+0x48c>
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	6a1b      	ldr	r3, [r3, #32]
 8011ada:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d03b      	beq.n	8011b58 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	7d1b      	ldrb	r3, [r3, #20]
 8011ae4:	b25b      	sxtb	r3, r3
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	da1d      	bge.n	8011b26 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	7858      	ldrb	r0, [r3, #1]
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	6a1a      	ldr	r2, [r3, #32]
 8011af8:	2301      	movs	r3, #1
 8011afa:	f7fd fcab 	bl	800f454 <disk_write>
 8011afe:	4603      	mov	r3, r0
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d009      	beq.n	8011b18 <f_lseek+0x44c>
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2201      	movs	r2, #1
 8011b08:	755a      	strb	r2, [r3, #21]
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	2101      	movs	r1, #1
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7fd fdf5 	bl	800f6fe <unlock_fs>
 8011b14:	2301      	movs	r3, #1
 8011b16:	e028      	b.n	8011b6a <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	7d1b      	ldrb	r3, [r3, #20]
 8011b1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011b20:	b2da      	uxtb	r2, r3
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011b26:	68bb      	ldr	r3, [r7, #8]
 8011b28:	7858      	ldrb	r0, [r3, #1]
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011b30:	2301      	movs	r3, #1
 8011b32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011b34:	f7fd fc6e 	bl	800f414 <disk_read>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d009      	beq.n	8011b52 <f_lseek+0x486>
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2201      	movs	r2, #1
 8011b42:	755a      	strb	r2, [r3, #21]
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	2101      	movs	r1, #1
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7fd fdd8 	bl	800f6fe <unlock_fs>
 8011b4e:	2301      	movs	r3, #1
 8011b50:	e00b      	b.n	8011b6a <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011b56:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8011b5e:	4611      	mov	r1, r2
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7fd fdcc 	bl	800f6fe <unlock_fs>
 8011b66:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3740      	adds	r7, #64	@ 0x40
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}

08011b72 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8011b72:	b580      	push	{r7, lr}
 8011b74:	b084      	sub	sp, #16
 8011b76:	af00      	add	r7, sp, #0
 8011b78:	6078      	str	r0, [r7, #4]
 8011b7a:	460b      	mov	r3, r1
 8011b7c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8011b7e:	78fb      	ldrb	r3, [r7, #3]
 8011b80:	2b0a      	cmp	r3, #10
 8011b82:	d103      	bne.n	8011b8c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8011b84:	210d      	movs	r1, #13
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f7ff fff3 	bl	8011b72 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	685b      	ldr	r3, [r3, #4]
 8011b90:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	db25      	blt.n	8011be4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	1c5a      	adds	r2, r3, #1
 8011b9c:	60fa      	str	r2, [r7, #12]
 8011b9e:	687a      	ldr	r2, [r7, #4]
 8011ba0:	4413      	add	r3, r2
 8011ba2:	78fa      	ldrb	r2, [r7, #3]
 8011ba4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	2b3c      	cmp	r3, #60	@ 0x3c
 8011baa:	dd12      	ble.n	8011bd2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	6818      	ldr	r0, [r3, #0]
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	f103 010c 	add.w	r1, r3, #12
 8011bb6:	68fa      	ldr	r2, [r7, #12]
 8011bb8:	f107 0308 	add.w	r3, r7, #8
 8011bbc:	f7ff fb59 	bl	8011272 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8011bc0:	68ba      	ldr	r2, [r7, #8]
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	d101      	bne.n	8011bcc <putc_bfd+0x5a>
 8011bc8:	2300      	movs	r3, #0
 8011bca:	e001      	b.n	8011bd0 <putc_bfd+0x5e>
 8011bcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011bd0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	68fa      	ldr	r2, [r7, #12]
 8011bd6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	689b      	ldr	r3, [r3, #8]
 8011bdc:	1c5a      	adds	r2, r3, #1
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	609a      	str	r2, [r3, #8]
 8011be2:	e000      	b.n	8011be6 <putc_bfd+0x74>
	if (i < 0) return;
 8011be4:	bf00      	nop
}
 8011be6:	3710      	adds	r7, #16
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}

08011bec <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b084      	sub	sp, #16
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	685b      	ldr	r3, [r3, #4]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	db16      	blt.n	8011c2a <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6818      	ldr	r0, [r3, #0]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f103 010c 	add.w	r1, r3, #12
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	685b      	ldr	r3, [r3, #4]
 8011c0a:	461a      	mov	r2, r3
 8011c0c:	f107 030c 	add.w	r3, r7, #12
 8011c10:	f7ff fb2f 	bl	8011272 <f_write>
 8011c14:	4603      	mov	r3, r0
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d107      	bne.n	8011c2a <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	685b      	ldr	r3, [r3, #4]
 8011c1e:	68fa      	ldr	r2, [r7, #12]
 8011c20:	4293      	cmp	r3, r2
 8011c22:	d102      	bne.n	8011c2a <putc_flush+0x3e>
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	689b      	ldr	r3, [r3, #8]
 8011c28:	e001      	b.n	8011c2e <putc_flush+0x42>
	return EOF;
 8011c2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8011c2e:	4618      	mov	r0, r3
 8011c30:	3710      	adds	r7, #16
 8011c32:	46bd      	mov	sp, r7
 8011c34:	bd80      	pop	{r7, pc}

08011c36 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8011c36:	b480      	push	{r7}
 8011c38:	b083      	sub	sp, #12
 8011c3a:	af00      	add	r7, sp, #0
 8011c3c:	6078      	str	r0, [r7, #4]
 8011c3e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	683a      	ldr	r2, [r7, #0]
 8011c44:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2200      	movs	r2, #0
 8011c4a:	605a      	str	r2, [r3, #4]
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	685a      	ldr	r2, [r3, #4]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	609a      	str	r2, [r3, #8]
}
 8011c54:	bf00      	nop
 8011c56:	370c      	adds	r7, #12
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5e:	4770      	bx	lr

08011c60 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8011c60:	b40e      	push	{r1, r2, r3}
 8011c62:	b580      	push	{r7, lr}
 8011c64:	b0a7      	sub	sp, #156	@ 0x9c
 8011c66:	af00      	add	r7, sp, #0
 8011c68:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8011c6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011c6e:	6879      	ldr	r1, [r7, #4]
 8011c70:	4618      	mov	r0, r3
 8011c72:	f7ff ffe0 	bl	8011c36 <putc_init>

	va_start(arp, fmt);
 8011c76:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8011c7a:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 8011c7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011c80:	1c5a      	adds	r2, r3, #1
 8011c82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 8011c8c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	f000 81f2 	beq.w	801207a <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8011c96:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011c9a:	2b25      	cmp	r3, #37	@ 0x25
 8011c9c:	d008      	beq.n	8011cb0 <f_printf+0x50>
			putc_bfd(&pb, c);
 8011c9e:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8011ca2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011ca6:	4611      	mov	r1, r2
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f7ff ff62 	bl	8011b72 <putc_bfd>
			continue;
 8011cae:	e1e3      	b.n	8012078 <f_printf+0x418>
		}
		w = f = 0;
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 8011cbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011cc0:	1c5a      	adds	r2, r3, #1
 8011cc2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011cc6:	781b      	ldrb	r3, [r3, #0]
 8011cc8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8011ccc:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011cd0:	2b30      	cmp	r3, #48	@ 0x30
 8011cd2:	d10b      	bne.n	8011cec <f_printf+0x8c>
			f = 1; c = *fmt++;
 8011cd4:	2301      	movs	r3, #1
 8011cd6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011cda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011cde:	1c5a      	adds	r2, r3, #1
 8011ce0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011ce4:	781b      	ldrb	r3, [r3, #0]
 8011ce6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8011cea:	e024      	b.n	8011d36 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8011cec:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011cf0:	2b2d      	cmp	r3, #45	@ 0x2d
 8011cf2:	d120      	bne.n	8011d36 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8011cf4:	2302      	movs	r3, #2
 8011cf6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011cfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011cfe:	1c5a      	adds	r2, r3, #1
 8011d00:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011d04:	781b      	ldrb	r3, [r3, #0]
 8011d06:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8011d0a:	e014      	b.n	8011d36 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8011d0c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011d10:	4613      	mov	r3, r2
 8011d12:	009b      	lsls	r3, r3, #2
 8011d14:	4413      	add	r3, r2
 8011d16:	005b      	lsls	r3, r3, #1
 8011d18:	461a      	mov	r2, r3
 8011d1a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011d1e:	4413      	add	r3, r2
 8011d20:	3b30      	subs	r3, #48	@ 0x30
 8011d22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 8011d26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011d2a:	1c5a      	adds	r2, r3, #1
 8011d2c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011d30:	781b      	ldrb	r3, [r3, #0]
 8011d32:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 8011d36:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011d3a:	2b2f      	cmp	r3, #47	@ 0x2f
 8011d3c:	d903      	bls.n	8011d46 <f_printf+0xe6>
 8011d3e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011d42:	2b39      	cmp	r3, #57	@ 0x39
 8011d44:	d9e2      	bls.n	8011d0c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8011d46:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011d4a:	2b6c      	cmp	r3, #108	@ 0x6c
 8011d4c:	d003      	beq.n	8011d56 <f_printf+0xf6>
 8011d4e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011d52:	2b4c      	cmp	r3, #76	@ 0x4c
 8011d54:	d10d      	bne.n	8011d72 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8011d56:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011d5a:	f043 0304 	orr.w	r3, r3, #4
 8011d5e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011d62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011d66:	1c5a      	adds	r2, r3, #1
 8011d68:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 8011d72:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	f000 8181 	beq.w	801207e <f_printf+0x41e>
		d = c;
 8011d7c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011d80:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 8011d84:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011d88:	2b60      	cmp	r3, #96	@ 0x60
 8011d8a:	d908      	bls.n	8011d9e <f_printf+0x13e>
 8011d8c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011d90:	2b7a      	cmp	r3, #122	@ 0x7a
 8011d92:	d804      	bhi.n	8011d9e <f_printf+0x13e>
 8011d94:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011d98:	3b20      	subs	r3, #32
 8011d9a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 8011d9e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011da2:	3b42      	subs	r3, #66	@ 0x42
 8011da4:	2b16      	cmp	r3, #22
 8011da6:	f200 8098 	bhi.w	8011eda <f_printf+0x27a>
 8011daa:	a201      	add	r2, pc, #4	@ (adr r2, 8011db0 <f_printf+0x150>)
 8011dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011db0:	08011ebb 	.word	0x08011ebb
 8011db4:	08011ea3 	.word	0x08011ea3
 8011db8:	08011ecb 	.word	0x08011ecb
 8011dbc:	08011edb 	.word	0x08011edb
 8011dc0:	08011edb 	.word	0x08011edb
 8011dc4:	08011edb 	.word	0x08011edb
 8011dc8:	08011edb 	.word	0x08011edb
 8011dcc:	08011edb 	.word	0x08011edb
 8011dd0:	08011edb 	.word	0x08011edb
 8011dd4:	08011edb 	.word	0x08011edb
 8011dd8:	08011edb 	.word	0x08011edb
 8011ddc:	08011edb 	.word	0x08011edb
 8011de0:	08011edb 	.word	0x08011edb
 8011de4:	08011ec3 	.word	0x08011ec3
 8011de8:	08011edb 	.word	0x08011edb
 8011dec:	08011edb 	.word	0x08011edb
 8011df0:	08011edb 	.word	0x08011edb
 8011df4:	08011e0d 	.word	0x08011e0d
 8011df8:	08011edb 	.word	0x08011edb
 8011dfc:	08011ecb 	.word	0x08011ecb
 8011e00:	08011edb 	.word	0x08011edb
 8011e04:	08011edb 	.word	0x08011edb
 8011e08:	08011ed3 	.word	0x08011ed3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8011e0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011e0e:	1d1a      	adds	r2, r3, #4
 8011e10:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 8011e16:	2300      	movs	r3, #0
 8011e18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011e1c:	e004      	b.n	8011e28 <f_printf+0x1c8>
 8011e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011e22:	3301      	adds	r3, #1
 8011e24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011e28:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011e2e:	4413      	add	r3, r2
 8011e30:	781b      	ldrb	r3, [r3, #0]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d1f3      	bne.n	8011e1e <f_printf+0x1be>
			if (!(f & 2)) {
 8011e36:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011e3a:	f003 0302 	and.w	r3, r3, #2
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d11a      	bne.n	8011e78 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8011e42:	e005      	b.n	8011e50 <f_printf+0x1f0>
 8011e44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011e48:	2120      	movs	r1, #32
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7ff fe91 	bl	8011b72 <putc_bfd>
 8011e50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011e54:	1c5a      	adds	r2, r3, #1
 8011e56:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011e5a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	d8f0      	bhi.n	8011e44 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8011e62:	e009      	b.n	8011e78 <f_printf+0x218>
 8011e64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011e66:	1c5a      	adds	r2, r3, #1
 8011e68:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011e6a:	781a      	ldrb	r2, [r3, #0]
 8011e6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011e70:	4611      	mov	r1, r2
 8011e72:	4618      	mov	r0, r3
 8011e74:	f7ff fe7d 	bl	8011b72 <putc_bfd>
 8011e78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011e7a:	781b      	ldrb	r3, [r3, #0]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d1f1      	bne.n	8011e64 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8011e80:	e005      	b.n	8011e8e <f_printf+0x22e>
 8011e82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011e86:	2120      	movs	r1, #32
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f7ff fe72 	bl	8011b72 <putc_bfd>
 8011e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011e92:	1c5a      	adds	r2, r3, #1
 8011e94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011e98:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011e9c:	429a      	cmp	r2, r3
 8011e9e:	d8f0      	bhi.n	8011e82 <f_printf+0x222>
			continue;
 8011ea0:	e0ea      	b.n	8012078 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8011ea2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011ea4:	1d1a      	adds	r2, r3, #4
 8011ea6:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	b2da      	uxtb	r2, r3
 8011eac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011eb0:	4611      	mov	r1, r2
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	f7ff fe5d 	bl	8011b72 <putc_bfd>
 8011eb8:	e0de      	b.n	8012078 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8011eba:	2302      	movs	r3, #2
 8011ebc:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011ec0:	e014      	b.n	8011eec <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8011ec2:	2308      	movs	r3, #8
 8011ec4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011ec8:	e010      	b.n	8011eec <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8011eca:	230a      	movs	r3, #10
 8011ecc:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011ed0:	e00c      	b.n	8011eec <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8011ed2:	2310      	movs	r3, #16
 8011ed4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011ed8:	e008      	b.n	8011eec <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8011eda:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8011ede:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011ee2:	4611      	mov	r1, r2
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f7ff fe44 	bl	8011b72 <putc_bfd>
 8011eea:	e0c5      	b.n	8012078 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8011eec:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011ef0:	f003 0304 	and.w	r3, r3, #4
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d004      	beq.n	8011f02 <f_printf+0x2a2>
 8011ef8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011efa:	1d1a      	adds	r2, r3, #4
 8011efc:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	e00c      	b.n	8011f1c <f_printf+0x2bc>
 8011f02:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011f06:	2b44      	cmp	r3, #68	@ 0x44
 8011f08:	d104      	bne.n	8011f14 <f_printf+0x2b4>
 8011f0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011f0c:	1d1a      	adds	r2, r3, #4
 8011f0e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	e003      	b.n	8011f1c <f_printf+0x2bc>
 8011f14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011f16:	1d1a      	adds	r2, r3, #4
 8011f18:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8011f20:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011f24:	2b44      	cmp	r3, #68	@ 0x44
 8011f26:	d10e      	bne.n	8011f46 <f_printf+0x2e6>
 8011f28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	da0a      	bge.n	8011f46 <f_printf+0x2e6>
			v = 0 - v;
 8011f30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011f34:	425b      	negs	r3, r3
 8011f36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 8011f3a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011f3e:	f043 0308 	orr.w	r3, r3, #8
 8011f42:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 8011f46:	2300      	movs	r3, #0
 8011f48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8011f4c:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8011f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011f54:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f58:	fb01 f202 	mul.w	r2, r1, r2
 8011f5c:	1a9b      	subs	r3, r3, r2
 8011f5e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8011f62:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8011f66:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8011f72:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011f76:	2b09      	cmp	r3, #9
 8011f78:	d90b      	bls.n	8011f92 <f_printf+0x332>
 8011f7a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011f7e:	2b78      	cmp	r3, #120	@ 0x78
 8011f80:	d101      	bne.n	8011f86 <f_printf+0x326>
 8011f82:	2227      	movs	r2, #39	@ 0x27
 8011f84:	e000      	b.n	8011f88 <f_printf+0x328>
 8011f86:	2207      	movs	r2, #7
 8011f88:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011f8c:	4413      	add	r3, r2
 8011f8e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 8011f92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011f96:	1c5a      	adds	r2, r3, #1
 8011f98:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8011f9c:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8011fa0:	3230      	adds	r2, #48	@ 0x30
 8011fa2:	b2d2      	uxtb	r2, r2
 8011fa4:	3398      	adds	r3, #152	@ 0x98
 8011fa6:	443b      	add	r3, r7
 8011fa8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8011fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d003      	beq.n	8011fbc <f_printf+0x35c>
 8011fb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011fb8:	2b1f      	cmp	r3, #31
 8011fba:	d9c7      	bls.n	8011f4c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8011fbc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011fc0:	f003 0308 	and.w	r3, r3, #8
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d009      	beq.n	8011fdc <f_printf+0x37c>
 8011fc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011fcc:	1c5a      	adds	r2, r3, #1
 8011fce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8011fd2:	3398      	adds	r3, #152	@ 0x98
 8011fd4:	443b      	add	r3, r7
 8011fd6:	222d      	movs	r2, #45	@ 0x2d
 8011fd8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8011fdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011fe0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011fe4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011fe8:	f003 0301 	and.w	r3, r3, #1
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d001      	beq.n	8011ff4 <f_printf+0x394>
 8011ff0:	2330      	movs	r3, #48	@ 0x30
 8011ff2:	e000      	b.n	8011ff6 <f_printf+0x396>
 8011ff4:	2320      	movs	r3, #32
 8011ff6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8011ffa:	e007      	b.n	801200c <f_printf+0x3ac>
 8011ffc:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8012000:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012004:	4611      	mov	r1, r2
 8012006:	4618      	mov	r0, r3
 8012008:	f7ff fdb3 	bl	8011b72 <putc_bfd>
 801200c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012010:	f003 0302 	and.w	r3, r3, #2
 8012014:	2b00      	cmp	r3, #0
 8012016:	d108      	bne.n	801202a <f_printf+0x3ca>
 8012018:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801201c:	1c5a      	adds	r2, r3, #1
 801201e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012022:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012026:	429a      	cmp	r2, r3
 8012028:	d8e8      	bhi.n	8011ffc <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 801202a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801202e:	3b01      	subs	r3, #1
 8012030:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012034:	f107 020c 	add.w	r2, r7, #12
 8012038:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801203c:	4413      	add	r3, r2
 801203e:	781a      	ldrb	r2, [r3, #0]
 8012040:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012044:	4611      	mov	r1, r2
 8012046:	4618      	mov	r0, r3
 8012048:	f7ff fd93 	bl	8011b72 <putc_bfd>
		} while (i);
 801204c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012050:	2b00      	cmp	r3, #0
 8012052:	d1ea      	bne.n	801202a <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8012054:	e007      	b.n	8012066 <f_printf+0x406>
 8012056:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 801205a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801205e:	4611      	mov	r1, r2
 8012060:	4618      	mov	r0, r3
 8012062:	f7ff fd86 	bl	8011b72 <putc_bfd>
 8012066:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801206a:	1c5a      	adds	r2, r3, #1
 801206c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012070:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012074:	429a      	cmp	r2, r3
 8012076:	d8ee      	bhi.n	8012056 <f_printf+0x3f6>
		c = *fmt++;
 8012078:	e600      	b.n	8011c7c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 801207a:	bf00      	nop
 801207c:	e000      	b.n	8012080 <f_printf+0x420>
		if (!c) break;
 801207e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8012080:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012084:	4618      	mov	r0, r3
 8012086:	f7ff fdb1 	bl	8011bec <putc_flush>
 801208a:	4603      	mov	r3, r0
}
 801208c:	4618      	mov	r0, r3
 801208e:	379c      	adds	r7, #156	@ 0x9c
 8012090:	46bd      	mov	sp, r7
 8012092:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012096:	b003      	add	sp, #12
 8012098:	4770      	bx	lr
 801209a:	bf00      	nop

0801209c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801209c:	b480      	push	{r7}
 801209e:	b087      	sub	sp, #28
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	60f8      	str	r0, [r7, #12]
 80120a4:	60b9      	str	r1, [r7, #8]
 80120a6:	4613      	mov	r3, r2
 80120a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80120aa:	2301      	movs	r3, #1
 80120ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80120ae:	2300      	movs	r3, #0
 80120b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80120b2:	4b1f      	ldr	r3, [pc, #124]	@ (8012130 <FATFS_LinkDriverEx+0x94>)
 80120b4:	7a5b      	ldrb	r3, [r3, #9]
 80120b6:	b2db      	uxtb	r3, r3
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d131      	bne.n	8012120 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80120bc:	4b1c      	ldr	r3, [pc, #112]	@ (8012130 <FATFS_LinkDriverEx+0x94>)
 80120be:	7a5b      	ldrb	r3, [r3, #9]
 80120c0:	b2db      	uxtb	r3, r3
 80120c2:	461a      	mov	r2, r3
 80120c4:	4b1a      	ldr	r3, [pc, #104]	@ (8012130 <FATFS_LinkDriverEx+0x94>)
 80120c6:	2100      	movs	r1, #0
 80120c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80120ca:	4b19      	ldr	r3, [pc, #100]	@ (8012130 <FATFS_LinkDriverEx+0x94>)
 80120cc:	7a5b      	ldrb	r3, [r3, #9]
 80120ce:	b2db      	uxtb	r3, r3
 80120d0:	4a17      	ldr	r2, [pc, #92]	@ (8012130 <FATFS_LinkDriverEx+0x94>)
 80120d2:	009b      	lsls	r3, r3, #2
 80120d4:	4413      	add	r3, r2
 80120d6:	68fa      	ldr	r2, [r7, #12]
 80120d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80120da:	4b15      	ldr	r3, [pc, #84]	@ (8012130 <FATFS_LinkDriverEx+0x94>)
 80120dc:	7a5b      	ldrb	r3, [r3, #9]
 80120de:	b2db      	uxtb	r3, r3
 80120e0:	461a      	mov	r2, r3
 80120e2:	4b13      	ldr	r3, [pc, #76]	@ (8012130 <FATFS_LinkDriverEx+0x94>)
 80120e4:	4413      	add	r3, r2
 80120e6:	79fa      	ldrb	r2, [r7, #7]
 80120e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80120ea:	4b11      	ldr	r3, [pc, #68]	@ (8012130 <FATFS_LinkDriverEx+0x94>)
 80120ec:	7a5b      	ldrb	r3, [r3, #9]
 80120ee:	b2db      	uxtb	r3, r3
 80120f0:	1c5a      	adds	r2, r3, #1
 80120f2:	b2d1      	uxtb	r1, r2
 80120f4:	4a0e      	ldr	r2, [pc, #56]	@ (8012130 <FATFS_LinkDriverEx+0x94>)
 80120f6:	7251      	strb	r1, [r2, #9]
 80120f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80120fa:	7dbb      	ldrb	r3, [r7, #22]
 80120fc:	3330      	adds	r3, #48	@ 0x30
 80120fe:	b2da      	uxtb	r2, r3
 8012100:	68bb      	ldr	r3, [r7, #8]
 8012102:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012104:	68bb      	ldr	r3, [r7, #8]
 8012106:	3301      	adds	r3, #1
 8012108:	223a      	movs	r2, #58	@ 0x3a
 801210a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801210c:	68bb      	ldr	r3, [r7, #8]
 801210e:	3302      	adds	r3, #2
 8012110:	222f      	movs	r2, #47	@ 0x2f
 8012112:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	3303      	adds	r3, #3
 8012118:	2200      	movs	r2, #0
 801211a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801211c:	2300      	movs	r3, #0
 801211e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012120:	7dfb      	ldrb	r3, [r7, #23]
}
 8012122:	4618      	mov	r0, r3
 8012124:	371c      	adds	r7, #28
 8012126:	46bd      	mov	sp, r7
 8012128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212c:	4770      	bx	lr
 801212e:	bf00      	nop
 8012130:	24000a70 	.word	0x24000a70

08012134 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b082      	sub	sp, #8
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
 801213c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801213e:	2200      	movs	r2, #0
 8012140:	6839      	ldr	r1, [r7, #0]
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f7ff ffaa 	bl	801209c <FATFS_LinkDriverEx>
 8012148:	4603      	mov	r3, r0
}
 801214a:	4618      	mov	r0, r3
 801214c:	3708      	adds	r7, #8
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}

08012152 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8012152:	b580      	push	{r7, lr}
 8012154:	b084      	sub	sp, #16
 8012156:	af00      	add	r7, sp, #0
 8012158:	4603      	mov	r3, r0
 801215a:	6039      	str	r1, [r7, #0]
 801215c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801215e:	2200      	movs	r2, #0
 8012160:	2101      	movs	r1, #1
 8012162:	2001      	movs	r0, #1
 8012164:	f000 f9b9 	bl	80124da <osSemaphoreNew>
 8012168:	4602      	mov	r2, r0
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801216e:	683b      	ldr	r3, [r7, #0]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	2b00      	cmp	r3, #0
 8012174:	bf14      	ite	ne
 8012176:	2301      	movne	r3, #1
 8012178:	2300      	moveq	r3, #0
 801217a:	b2db      	uxtb	r3, r3
 801217c:	60fb      	str	r3, [r7, #12]

    return ret;
 801217e:	68fb      	ldr	r3, [r7, #12]
}
 8012180:	4618      	mov	r0, r3
 8012182:	3710      	adds	r7, #16
 8012184:	46bd      	mov	sp, r7
 8012186:	bd80      	pop	{r7, pc}

08012188 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b082      	sub	sp, #8
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f000 fac1 	bl	8012718 <osSemaphoreDelete>
#endif
    return 1;
 8012196:	2301      	movs	r3, #1
}
 8012198:	4618      	mov	r0, r3
 801219a:	3708      	adds	r7, #8
 801219c:	46bd      	mov	sp, r7
 801219e:	bd80      	pop	{r7, pc}

080121a0 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b084      	sub	sp, #16
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80121a8:	2300      	movs	r3, #0
 80121aa:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80121ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80121b0:	6878      	ldr	r0, [r7, #4]
 80121b2:	f000 fa1b 	bl	80125ec <osSemaphoreAcquire>
 80121b6:	4603      	mov	r3, r0
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d101      	bne.n	80121c0 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80121bc:	2301      	movs	r3, #1
 80121be:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80121c0:	68fb      	ldr	r3, [r7, #12]
}
 80121c2:	4618      	mov	r0, r3
 80121c4:	3710      	adds	r7, #16
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd80      	pop	{r7, pc}

080121ca <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80121ca:	b580      	push	{r7, lr}
 80121cc:	b082      	sub	sp, #8
 80121ce:	af00      	add	r7, sp, #0
 80121d0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f000 fa5c 	bl	8012690 <osSemaphoreRelease>
#endif
}
 80121d8:	bf00      	nop
 80121da:	3708      	adds	r7, #8
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}

080121e0 <__NVIC_SetPriority>:
{
 80121e0:	b480      	push	{r7}
 80121e2:	b083      	sub	sp, #12
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	4603      	mov	r3, r0
 80121e8:	6039      	str	r1, [r7, #0]
 80121ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80121ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	db0a      	blt.n	801220a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80121f4:	683b      	ldr	r3, [r7, #0]
 80121f6:	b2da      	uxtb	r2, r3
 80121f8:	490c      	ldr	r1, [pc, #48]	@ (801222c <__NVIC_SetPriority+0x4c>)
 80121fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80121fe:	0112      	lsls	r2, r2, #4
 8012200:	b2d2      	uxtb	r2, r2
 8012202:	440b      	add	r3, r1
 8012204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8012208:	e00a      	b.n	8012220 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	b2da      	uxtb	r2, r3
 801220e:	4908      	ldr	r1, [pc, #32]	@ (8012230 <__NVIC_SetPriority+0x50>)
 8012210:	88fb      	ldrh	r3, [r7, #6]
 8012212:	f003 030f 	and.w	r3, r3, #15
 8012216:	3b04      	subs	r3, #4
 8012218:	0112      	lsls	r2, r2, #4
 801221a:	b2d2      	uxtb	r2, r2
 801221c:	440b      	add	r3, r1
 801221e:	761a      	strb	r2, [r3, #24]
}
 8012220:	bf00      	nop
 8012222:	370c      	adds	r7, #12
 8012224:	46bd      	mov	sp, r7
 8012226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222a:	4770      	bx	lr
 801222c:	e000e100 	.word	0xe000e100
 8012230:	e000ed00 	.word	0xe000ed00

08012234 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012234:	b580      	push	{r7, lr}
 8012236:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012238:	4b05      	ldr	r3, [pc, #20]	@ (8012250 <SysTick_Handler+0x1c>)
 801223a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801223c:	f002 fdae 	bl	8014d9c <xTaskGetSchedulerState>
 8012240:	4603      	mov	r3, r0
 8012242:	2b01      	cmp	r3, #1
 8012244:	d001      	beq.n	801224a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012246:	f003 ff2f 	bl	80160a8 <xPortSysTickHandler>
  }
}
 801224a:	bf00      	nop
 801224c:	bd80      	pop	{r7, pc}
 801224e:	bf00      	nop
 8012250:	e000e010 	.word	0xe000e010

08012254 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012254:	b580      	push	{r7, lr}
 8012256:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012258:	2100      	movs	r1, #0
 801225a:	f06f 0004 	mvn.w	r0, #4
 801225e:	f7ff ffbf 	bl	80121e0 <__NVIC_SetPriority>
#endif
}
 8012262:	bf00      	nop
 8012264:	bd80      	pop	{r7, pc}
	...

08012268 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012268:	b480      	push	{r7}
 801226a:	b083      	sub	sp, #12
 801226c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801226e:	f3ef 8305 	mrs	r3, IPSR
 8012272:	603b      	str	r3, [r7, #0]
  return(result);
 8012274:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012276:	2b00      	cmp	r3, #0
 8012278:	d003      	beq.n	8012282 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801227a:	f06f 0305 	mvn.w	r3, #5
 801227e:	607b      	str	r3, [r7, #4]
 8012280:	e00c      	b.n	801229c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012282:	4b0a      	ldr	r3, [pc, #40]	@ (80122ac <osKernelInitialize+0x44>)
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d105      	bne.n	8012296 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801228a:	4b08      	ldr	r3, [pc, #32]	@ (80122ac <osKernelInitialize+0x44>)
 801228c:	2201      	movs	r2, #1
 801228e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012290:	2300      	movs	r3, #0
 8012292:	607b      	str	r3, [r7, #4]
 8012294:	e002      	b.n	801229c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012296:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801229a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801229c:	687b      	ldr	r3, [r7, #4]
}
 801229e:	4618      	mov	r0, r3
 80122a0:	370c      	adds	r7, #12
 80122a2:	46bd      	mov	sp, r7
 80122a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a8:	4770      	bx	lr
 80122aa:	bf00      	nop
 80122ac:	24000a7c 	.word	0x24000a7c

080122b0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b082      	sub	sp, #8
 80122b4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80122b6:	f002 fd71 	bl	8014d9c <xTaskGetSchedulerState>
 80122ba:	4603      	mov	r3, r0
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d004      	beq.n	80122ca <osKernelGetState+0x1a>
 80122c0:	2b02      	cmp	r3, #2
 80122c2:	d105      	bne.n	80122d0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80122c4:	2302      	movs	r3, #2
 80122c6:	607b      	str	r3, [r7, #4]
      break;
 80122c8:	e00c      	b.n	80122e4 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80122ca:	2303      	movs	r3, #3
 80122cc:	607b      	str	r3, [r7, #4]
      break;
 80122ce:	e009      	b.n	80122e4 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80122d0:	4b07      	ldr	r3, [pc, #28]	@ (80122f0 <osKernelGetState+0x40>)
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	2b01      	cmp	r3, #1
 80122d6:	d102      	bne.n	80122de <osKernelGetState+0x2e>
        state = osKernelReady;
 80122d8:	2301      	movs	r3, #1
 80122da:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80122dc:	e001      	b.n	80122e2 <osKernelGetState+0x32>
        state = osKernelInactive;
 80122de:	2300      	movs	r3, #0
 80122e0:	607b      	str	r3, [r7, #4]
      break;
 80122e2:	bf00      	nop
  }

  return (state);
 80122e4:	687b      	ldr	r3, [r7, #4]
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	3708      	adds	r7, #8
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}
 80122ee:	bf00      	nop
 80122f0:	24000a7c 	.word	0x24000a7c

080122f4 <osKernelStart>:

osStatus_t osKernelStart (void) {
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b082      	sub	sp, #8
 80122f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80122fa:	f3ef 8305 	mrs	r3, IPSR
 80122fe:	603b      	str	r3, [r7, #0]
  return(result);
 8012300:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012302:	2b00      	cmp	r3, #0
 8012304:	d003      	beq.n	801230e <osKernelStart+0x1a>
    stat = osErrorISR;
 8012306:	f06f 0305 	mvn.w	r3, #5
 801230a:	607b      	str	r3, [r7, #4]
 801230c:	e010      	b.n	8012330 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801230e:	4b0b      	ldr	r3, [pc, #44]	@ (801233c <osKernelStart+0x48>)
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	2b01      	cmp	r3, #1
 8012314:	d109      	bne.n	801232a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012316:	f7ff ff9d 	bl	8012254 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801231a:	4b08      	ldr	r3, [pc, #32]	@ (801233c <osKernelStart+0x48>)
 801231c:	2202      	movs	r2, #2
 801231e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012320:	f002 f814 	bl	801434c <vTaskStartScheduler>
      stat = osOK;
 8012324:	2300      	movs	r3, #0
 8012326:	607b      	str	r3, [r7, #4]
 8012328:	e002      	b.n	8012330 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801232a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801232e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012330:	687b      	ldr	r3, [r7, #4]
}
 8012332:	4618      	mov	r0, r3
 8012334:	3708      	adds	r7, #8
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}
 801233a:	bf00      	nop
 801233c:	24000a7c 	.word	0x24000a7c

08012340 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8012340:	b580      	push	{r7, lr}
 8012342:	b082      	sub	sp, #8
 8012344:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012346:	f3ef 8305 	mrs	r3, IPSR
 801234a:	603b      	str	r3, [r7, #0]
  return(result);
 801234c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 801234e:	2b00      	cmp	r3, #0
 8012350:	d003      	beq.n	801235a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8012352:	f002 f927 	bl	80145a4 <xTaskGetTickCountFromISR>
 8012356:	6078      	str	r0, [r7, #4]
 8012358:	e002      	b.n	8012360 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 801235a:	f002 f913 	bl	8014584 <xTaskGetTickCount>
 801235e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8012360:	687b      	ldr	r3, [r7, #4]
}
 8012362:	4618      	mov	r0, r3
 8012364:	3708      	adds	r7, #8
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}

0801236a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801236a:	b580      	push	{r7, lr}
 801236c:	b08e      	sub	sp, #56	@ 0x38
 801236e:	af04      	add	r7, sp, #16
 8012370:	60f8      	str	r0, [r7, #12]
 8012372:	60b9      	str	r1, [r7, #8]
 8012374:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012376:	2300      	movs	r3, #0
 8012378:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801237a:	f3ef 8305 	mrs	r3, IPSR
 801237e:	617b      	str	r3, [r7, #20]
  return(result);
 8012380:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012382:	2b00      	cmp	r3, #0
 8012384:	d17e      	bne.n	8012484 <osThreadNew+0x11a>
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d07b      	beq.n	8012484 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801238c:	2380      	movs	r3, #128	@ 0x80
 801238e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012390:	2318      	movs	r3, #24
 8012392:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012394:	2300      	movs	r3, #0
 8012396:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8012398:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801239c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d045      	beq.n	8012430 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d002      	beq.n	80123b2 <osThreadNew+0x48>
        name = attr->name;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	699b      	ldr	r3, [r3, #24]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d002      	beq.n	80123c0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	699b      	ldr	r3, [r3, #24]
 80123be:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80123c0:	69fb      	ldr	r3, [r7, #28]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d008      	beq.n	80123d8 <osThreadNew+0x6e>
 80123c6:	69fb      	ldr	r3, [r7, #28]
 80123c8:	2b38      	cmp	r3, #56	@ 0x38
 80123ca:	d805      	bhi.n	80123d8 <osThreadNew+0x6e>
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	685b      	ldr	r3, [r3, #4]
 80123d0:	f003 0301 	and.w	r3, r3, #1
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d001      	beq.n	80123dc <osThreadNew+0x72>
        return (NULL);
 80123d8:	2300      	movs	r3, #0
 80123da:	e054      	b.n	8012486 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	695b      	ldr	r3, [r3, #20]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d003      	beq.n	80123ec <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	695b      	ldr	r3, [r3, #20]
 80123e8:	089b      	lsrs	r3, r3, #2
 80123ea:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	689b      	ldr	r3, [r3, #8]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d00e      	beq.n	8012412 <osThreadNew+0xa8>
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	68db      	ldr	r3, [r3, #12]
 80123f8:	2ba7      	cmp	r3, #167	@ 0xa7
 80123fa:	d90a      	bls.n	8012412 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012400:	2b00      	cmp	r3, #0
 8012402:	d006      	beq.n	8012412 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	695b      	ldr	r3, [r3, #20]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d002      	beq.n	8012412 <osThreadNew+0xa8>
        mem = 1;
 801240c:	2301      	movs	r3, #1
 801240e:	61bb      	str	r3, [r7, #24]
 8012410:	e010      	b.n	8012434 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	689b      	ldr	r3, [r3, #8]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d10c      	bne.n	8012434 <osThreadNew+0xca>
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	68db      	ldr	r3, [r3, #12]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d108      	bne.n	8012434 <osThreadNew+0xca>
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	691b      	ldr	r3, [r3, #16]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d104      	bne.n	8012434 <osThreadNew+0xca>
          mem = 0;
 801242a:	2300      	movs	r3, #0
 801242c:	61bb      	str	r3, [r7, #24]
 801242e:	e001      	b.n	8012434 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012430:	2300      	movs	r3, #0
 8012432:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012434:	69bb      	ldr	r3, [r7, #24]
 8012436:	2b01      	cmp	r3, #1
 8012438:	d110      	bne.n	801245c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801243e:	687a      	ldr	r2, [r7, #4]
 8012440:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012442:	9202      	str	r2, [sp, #8]
 8012444:	9301      	str	r3, [sp, #4]
 8012446:	69fb      	ldr	r3, [r7, #28]
 8012448:	9300      	str	r3, [sp, #0]
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	6a3a      	ldr	r2, [r7, #32]
 801244e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012450:	68f8      	ldr	r0, [r7, #12]
 8012452:	f001 fd87 	bl	8013f64 <xTaskCreateStatic>
 8012456:	4603      	mov	r3, r0
 8012458:	613b      	str	r3, [r7, #16]
 801245a:	e013      	b.n	8012484 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801245c:	69bb      	ldr	r3, [r7, #24]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d110      	bne.n	8012484 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012462:	6a3b      	ldr	r3, [r7, #32]
 8012464:	b29a      	uxth	r2, r3
 8012466:	f107 0310 	add.w	r3, r7, #16
 801246a:	9301      	str	r3, [sp, #4]
 801246c:	69fb      	ldr	r3, [r7, #28]
 801246e:	9300      	str	r3, [sp, #0]
 8012470:	68bb      	ldr	r3, [r7, #8]
 8012472:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012474:	68f8      	ldr	r0, [r7, #12]
 8012476:	f001 fdd5 	bl	8014024 <xTaskCreate>
 801247a:	4603      	mov	r3, r0
 801247c:	2b01      	cmp	r3, #1
 801247e:	d001      	beq.n	8012484 <osThreadNew+0x11a>
            hTask = NULL;
 8012480:	2300      	movs	r3, #0
 8012482:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012484:	693b      	ldr	r3, [r7, #16]
}
 8012486:	4618      	mov	r0, r3
 8012488:	3728      	adds	r7, #40	@ 0x28
 801248a:	46bd      	mov	sp, r7
 801248c:	bd80      	pop	{r7, pc}

0801248e <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 801248e:	b580      	push	{r7, lr}
 8012490:	b082      	sub	sp, #8
 8012492:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8012494:	f002 fc72 	bl	8014d7c <xTaskGetCurrentTaskHandle>
 8012498:	6078      	str	r0, [r7, #4]

  return (id);
 801249a:	687b      	ldr	r3, [r7, #4]
}
 801249c:	4618      	mov	r0, r3
 801249e:	3708      	adds	r7, #8
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}

080124a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b084      	sub	sp, #16
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80124ac:	f3ef 8305 	mrs	r3, IPSR
 80124b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80124b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d003      	beq.n	80124c0 <osDelay+0x1c>
    stat = osErrorISR;
 80124b8:	f06f 0305 	mvn.w	r3, #5
 80124bc:	60fb      	str	r3, [r7, #12]
 80124be:	e007      	b.n	80124d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80124c0:	2300      	movs	r3, #0
 80124c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d002      	beq.n	80124d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80124ca:	6878      	ldr	r0, [r7, #4]
 80124cc:	f001 ff08 	bl	80142e0 <vTaskDelay>
    }
  }

  return (stat);
 80124d0:	68fb      	ldr	r3, [r7, #12]
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	3710      	adds	r7, #16
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}

080124da <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80124da:	b580      	push	{r7, lr}
 80124dc:	b08a      	sub	sp, #40	@ 0x28
 80124de:	af02      	add	r7, sp, #8
 80124e0:	60f8      	str	r0, [r7, #12]
 80124e2:	60b9      	str	r1, [r7, #8]
 80124e4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80124e6:	2300      	movs	r3, #0
 80124e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80124ea:	f3ef 8305 	mrs	r3, IPSR
 80124ee:	613b      	str	r3, [r7, #16]
  return(result);
 80124f0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d175      	bne.n	80125e2 <osSemaphoreNew+0x108>
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d072      	beq.n	80125e2 <osSemaphoreNew+0x108>
 80124fc:	68ba      	ldr	r2, [r7, #8]
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	429a      	cmp	r2, r3
 8012502:	d86e      	bhi.n	80125e2 <osSemaphoreNew+0x108>
    mem = -1;
 8012504:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012508:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d015      	beq.n	801253c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	689b      	ldr	r3, [r3, #8]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d006      	beq.n	8012526 <osSemaphoreNew+0x4c>
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	68db      	ldr	r3, [r3, #12]
 801251c:	2b4f      	cmp	r3, #79	@ 0x4f
 801251e:	d902      	bls.n	8012526 <osSemaphoreNew+0x4c>
        mem = 1;
 8012520:	2301      	movs	r3, #1
 8012522:	61bb      	str	r3, [r7, #24]
 8012524:	e00c      	b.n	8012540 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	689b      	ldr	r3, [r3, #8]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d108      	bne.n	8012540 <osSemaphoreNew+0x66>
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	68db      	ldr	r3, [r3, #12]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d104      	bne.n	8012540 <osSemaphoreNew+0x66>
          mem = 0;
 8012536:	2300      	movs	r3, #0
 8012538:	61bb      	str	r3, [r7, #24]
 801253a:	e001      	b.n	8012540 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801253c:	2300      	movs	r3, #0
 801253e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8012540:	69bb      	ldr	r3, [r7, #24]
 8012542:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012546:	d04c      	beq.n	80125e2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	2b01      	cmp	r3, #1
 801254c:	d128      	bne.n	80125a0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801254e:	69bb      	ldr	r3, [r7, #24]
 8012550:	2b01      	cmp	r3, #1
 8012552:	d10a      	bne.n	801256a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	689b      	ldr	r3, [r3, #8]
 8012558:	2203      	movs	r2, #3
 801255a:	9200      	str	r2, [sp, #0]
 801255c:	2200      	movs	r2, #0
 801255e:	2100      	movs	r1, #0
 8012560:	2001      	movs	r0, #1
 8012562:	f000 fd3d 	bl	8012fe0 <xQueueGenericCreateStatic>
 8012566:	61f8      	str	r0, [r7, #28]
 8012568:	e005      	b.n	8012576 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 801256a:	2203      	movs	r2, #3
 801256c:	2100      	movs	r1, #0
 801256e:	2001      	movs	r0, #1
 8012570:	f000 fdb3 	bl	80130da <xQueueGenericCreate>
 8012574:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8012576:	69fb      	ldr	r3, [r7, #28]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d022      	beq.n	80125c2 <osSemaphoreNew+0xe8>
 801257c:	68bb      	ldr	r3, [r7, #8]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d01f      	beq.n	80125c2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012582:	2300      	movs	r3, #0
 8012584:	2200      	movs	r2, #0
 8012586:	2100      	movs	r1, #0
 8012588:	69f8      	ldr	r0, [r7, #28]
 801258a:	f000 fe73 	bl	8013274 <xQueueGenericSend>
 801258e:	4603      	mov	r3, r0
 8012590:	2b01      	cmp	r3, #1
 8012592:	d016      	beq.n	80125c2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8012594:	69f8      	ldr	r0, [r7, #28]
 8012596:	f001 fb11 	bl	8013bbc <vQueueDelete>
            hSemaphore = NULL;
 801259a:	2300      	movs	r3, #0
 801259c:	61fb      	str	r3, [r7, #28]
 801259e:	e010      	b.n	80125c2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80125a0:	69bb      	ldr	r3, [r7, #24]
 80125a2:	2b01      	cmp	r3, #1
 80125a4:	d108      	bne.n	80125b8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	689b      	ldr	r3, [r3, #8]
 80125aa:	461a      	mov	r2, r3
 80125ac:	68b9      	ldr	r1, [r7, #8]
 80125ae:	68f8      	ldr	r0, [r7, #12]
 80125b0:	f000 fdf1 	bl	8013196 <xQueueCreateCountingSemaphoreStatic>
 80125b4:	61f8      	str	r0, [r7, #28]
 80125b6:	e004      	b.n	80125c2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80125b8:	68b9      	ldr	r1, [r7, #8]
 80125ba:	68f8      	ldr	r0, [r7, #12]
 80125bc:	f000 fe24 	bl	8013208 <xQueueCreateCountingSemaphore>
 80125c0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80125c2:	69fb      	ldr	r3, [r7, #28]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d00c      	beq.n	80125e2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d003      	beq.n	80125d6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	617b      	str	r3, [r7, #20]
 80125d4:	e001      	b.n	80125da <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80125d6:	2300      	movs	r3, #0
 80125d8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80125da:	6979      	ldr	r1, [r7, #20]
 80125dc:	69f8      	ldr	r0, [r7, #28]
 80125de:	f001 fc39 	bl	8013e54 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80125e2:	69fb      	ldr	r3, [r7, #28]
}
 80125e4:	4618      	mov	r0, r3
 80125e6:	3720      	adds	r7, #32
 80125e8:	46bd      	mov	sp, r7
 80125ea:	bd80      	pop	{r7, pc}

080125ec <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b086      	sub	sp, #24
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
 80125f4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80125fa:	2300      	movs	r3, #0
 80125fc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80125fe:	693b      	ldr	r3, [r7, #16]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d103      	bne.n	801260c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8012604:	f06f 0303 	mvn.w	r3, #3
 8012608:	617b      	str	r3, [r7, #20]
 801260a:	e039      	b.n	8012680 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801260c:	f3ef 8305 	mrs	r3, IPSR
 8012610:	60fb      	str	r3, [r7, #12]
  return(result);
 8012612:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012614:	2b00      	cmp	r3, #0
 8012616:	d022      	beq.n	801265e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d003      	beq.n	8012626 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801261e:	f06f 0303 	mvn.w	r3, #3
 8012622:	617b      	str	r3, [r7, #20]
 8012624:	e02c      	b.n	8012680 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8012626:	2300      	movs	r3, #0
 8012628:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801262a:	f107 0308 	add.w	r3, r7, #8
 801262e:	461a      	mov	r2, r3
 8012630:	2100      	movs	r1, #0
 8012632:	6938      	ldr	r0, [r7, #16]
 8012634:	f001 fa40 	bl	8013ab8 <xQueueReceiveFromISR>
 8012638:	4603      	mov	r3, r0
 801263a:	2b01      	cmp	r3, #1
 801263c:	d003      	beq.n	8012646 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801263e:	f06f 0302 	mvn.w	r3, #2
 8012642:	617b      	str	r3, [r7, #20]
 8012644:	e01c      	b.n	8012680 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8012646:	68bb      	ldr	r3, [r7, #8]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d019      	beq.n	8012680 <osSemaphoreAcquire+0x94>
 801264c:	4b0f      	ldr	r3, [pc, #60]	@ (801268c <osSemaphoreAcquire+0xa0>)
 801264e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012652:	601a      	str	r2, [r3, #0]
 8012654:	f3bf 8f4f 	dsb	sy
 8012658:	f3bf 8f6f 	isb	sy
 801265c:	e010      	b.n	8012680 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801265e:	6839      	ldr	r1, [r7, #0]
 8012660:	6938      	ldr	r0, [r7, #16]
 8012662:	f001 f919 	bl	8013898 <xQueueSemaphoreTake>
 8012666:	4603      	mov	r3, r0
 8012668:	2b01      	cmp	r3, #1
 801266a:	d009      	beq.n	8012680 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d003      	beq.n	801267a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8012672:	f06f 0301 	mvn.w	r3, #1
 8012676:	617b      	str	r3, [r7, #20]
 8012678:	e002      	b.n	8012680 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801267a:	f06f 0302 	mvn.w	r3, #2
 801267e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8012680:	697b      	ldr	r3, [r7, #20]
}
 8012682:	4618      	mov	r0, r3
 8012684:	3718      	adds	r7, #24
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}
 801268a:	bf00      	nop
 801268c:	e000ed04 	.word	0xe000ed04

08012690 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8012690:	b580      	push	{r7, lr}
 8012692:	b086      	sub	sp, #24
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801269c:	2300      	movs	r3, #0
 801269e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80126a0:	693b      	ldr	r3, [r7, #16]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d103      	bne.n	80126ae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80126a6:	f06f 0303 	mvn.w	r3, #3
 80126aa:	617b      	str	r3, [r7, #20]
 80126ac:	e02c      	b.n	8012708 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126ae:	f3ef 8305 	mrs	r3, IPSR
 80126b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80126b4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d01a      	beq.n	80126f0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80126ba:	2300      	movs	r3, #0
 80126bc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80126be:	f107 0308 	add.w	r3, r7, #8
 80126c2:	4619      	mov	r1, r3
 80126c4:	6938      	ldr	r0, [r7, #16]
 80126c6:	f000 ff75 	bl	80135b4 <xQueueGiveFromISR>
 80126ca:	4603      	mov	r3, r0
 80126cc:	2b01      	cmp	r3, #1
 80126ce:	d003      	beq.n	80126d8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80126d0:	f06f 0302 	mvn.w	r3, #2
 80126d4:	617b      	str	r3, [r7, #20]
 80126d6:	e017      	b.n	8012708 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80126d8:	68bb      	ldr	r3, [r7, #8]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d014      	beq.n	8012708 <osSemaphoreRelease+0x78>
 80126de:	4b0d      	ldr	r3, [pc, #52]	@ (8012714 <osSemaphoreRelease+0x84>)
 80126e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80126e4:	601a      	str	r2, [r3, #0]
 80126e6:	f3bf 8f4f 	dsb	sy
 80126ea:	f3bf 8f6f 	isb	sy
 80126ee:	e00b      	b.n	8012708 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80126f0:	2300      	movs	r3, #0
 80126f2:	2200      	movs	r2, #0
 80126f4:	2100      	movs	r1, #0
 80126f6:	6938      	ldr	r0, [r7, #16]
 80126f8:	f000 fdbc 	bl	8013274 <xQueueGenericSend>
 80126fc:	4603      	mov	r3, r0
 80126fe:	2b01      	cmp	r3, #1
 8012700:	d002      	beq.n	8012708 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8012702:	f06f 0302 	mvn.w	r3, #2
 8012706:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8012708:	697b      	ldr	r3, [r7, #20]
}
 801270a:	4618      	mov	r0, r3
 801270c:	3718      	adds	r7, #24
 801270e:	46bd      	mov	sp, r7
 8012710:	bd80      	pop	{r7, pc}
 8012712:	bf00      	nop
 8012714:	e000ed04 	.word	0xe000ed04

08012718 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8012718:	b580      	push	{r7, lr}
 801271a:	b086      	sub	sp, #24
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012724:	f3ef 8305 	mrs	r3, IPSR
 8012728:	60fb      	str	r3, [r7, #12]
  return(result);
 801272a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 801272c:	2b00      	cmp	r3, #0
 801272e:	d003      	beq.n	8012738 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8012730:	f06f 0305 	mvn.w	r3, #5
 8012734:	617b      	str	r3, [r7, #20]
 8012736:	e00e      	b.n	8012756 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8012738:	693b      	ldr	r3, [r7, #16]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d103      	bne.n	8012746 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 801273e:	f06f 0303 	mvn.w	r3, #3
 8012742:	617b      	str	r3, [r7, #20]
 8012744:	e007      	b.n	8012756 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8012746:	6938      	ldr	r0, [r7, #16]
 8012748:	f001 fbae 	bl	8013ea8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 801274c:	2300      	movs	r3, #0
 801274e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8012750:	6938      	ldr	r0, [r7, #16]
 8012752:	f001 fa33 	bl	8013bbc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8012756:	697b      	ldr	r3, [r7, #20]
}
 8012758:	4618      	mov	r0, r3
 801275a:	3718      	adds	r7, #24
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}

08012760 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012760:	b580      	push	{r7, lr}
 8012762:	b08a      	sub	sp, #40	@ 0x28
 8012764:	af02      	add	r7, sp, #8
 8012766:	60f8      	str	r0, [r7, #12]
 8012768:	60b9      	str	r1, [r7, #8]
 801276a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801276c:	2300      	movs	r3, #0
 801276e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012770:	f3ef 8305 	mrs	r3, IPSR
 8012774:	613b      	str	r3, [r7, #16]
  return(result);
 8012776:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012778:	2b00      	cmp	r3, #0
 801277a:	d15f      	bne.n	801283c <osMessageQueueNew+0xdc>
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d05c      	beq.n	801283c <osMessageQueueNew+0xdc>
 8012782:	68bb      	ldr	r3, [r7, #8]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d059      	beq.n	801283c <osMessageQueueNew+0xdc>
    mem = -1;
 8012788:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801278c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d029      	beq.n	80127e8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	689b      	ldr	r3, [r3, #8]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d012      	beq.n	80127c2 <osMessageQueueNew+0x62>
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	68db      	ldr	r3, [r3, #12]
 80127a0:	2b4f      	cmp	r3, #79	@ 0x4f
 80127a2:	d90e      	bls.n	80127c2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d00a      	beq.n	80127c2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	695a      	ldr	r2, [r3, #20]
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	68b9      	ldr	r1, [r7, #8]
 80127b4:	fb01 f303 	mul.w	r3, r1, r3
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d302      	bcc.n	80127c2 <osMessageQueueNew+0x62>
        mem = 1;
 80127bc:	2301      	movs	r3, #1
 80127be:	61bb      	str	r3, [r7, #24]
 80127c0:	e014      	b.n	80127ec <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	689b      	ldr	r3, [r3, #8]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d110      	bne.n	80127ec <osMessageQueueNew+0x8c>
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	68db      	ldr	r3, [r3, #12]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d10c      	bne.n	80127ec <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d108      	bne.n	80127ec <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	695b      	ldr	r3, [r3, #20]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d104      	bne.n	80127ec <osMessageQueueNew+0x8c>
          mem = 0;
 80127e2:	2300      	movs	r3, #0
 80127e4:	61bb      	str	r3, [r7, #24]
 80127e6:	e001      	b.n	80127ec <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80127e8:	2300      	movs	r3, #0
 80127ea:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80127ec:	69bb      	ldr	r3, [r7, #24]
 80127ee:	2b01      	cmp	r3, #1
 80127f0:	d10b      	bne.n	801280a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	691a      	ldr	r2, [r3, #16]
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	689b      	ldr	r3, [r3, #8]
 80127fa:	2100      	movs	r1, #0
 80127fc:	9100      	str	r1, [sp, #0]
 80127fe:	68b9      	ldr	r1, [r7, #8]
 8012800:	68f8      	ldr	r0, [r7, #12]
 8012802:	f000 fbed 	bl	8012fe0 <xQueueGenericCreateStatic>
 8012806:	61f8      	str	r0, [r7, #28]
 8012808:	e008      	b.n	801281c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801280a:	69bb      	ldr	r3, [r7, #24]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d105      	bne.n	801281c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8012810:	2200      	movs	r2, #0
 8012812:	68b9      	ldr	r1, [r7, #8]
 8012814:	68f8      	ldr	r0, [r7, #12]
 8012816:	f000 fc60 	bl	80130da <xQueueGenericCreate>
 801281a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801281c:	69fb      	ldr	r3, [r7, #28]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d00c      	beq.n	801283c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d003      	beq.n	8012830 <osMessageQueueNew+0xd0>
        name = attr->name;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	617b      	str	r3, [r7, #20]
 801282e:	e001      	b.n	8012834 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8012830:	2300      	movs	r3, #0
 8012832:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012834:	6979      	ldr	r1, [r7, #20]
 8012836:	69f8      	ldr	r0, [r7, #28]
 8012838:	f001 fb0c 	bl	8013e54 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801283c:	69fb      	ldr	r3, [r7, #28]
}
 801283e:	4618      	mov	r0, r3
 8012840:	3720      	adds	r7, #32
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}
	...

08012848 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012848:	b580      	push	{r7, lr}
 801284a:	b088      	sub	sp, #32
 801284c:	af00      	add	r7, sp, #0
 801284e:	60f8      	str	r0, [r7, #12]
 8012850:	60b9      	str	r1, [r7, #8]
 8012852:	603b      	str	r3, [r7, #0]
 8012854:	4613      	mov	r3, r2
 8012856:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801285c:	2300      	movs	r3, #0
 801285e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012860:	f3ef 8305 	mrs	r3, IPSR
 8012864:	617b      	str	r3, [r7, #20]
  return(result);
 8012866:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012868:	2b00      	cmp	r3, #0
 801286a:	d028      	beq.n	80128be <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801286c:	69bb      	ldr	r3, [r7, #24]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d005      	beq.n	801287e <osMessageQueuePut+0x36>
 8012872:	68bb      	ldr	r3, [r7, #8]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d002      	beq.n	801287e <osMessageQueuePut+0x36>
 8012878:	683b      	ldr	r3, [r7, #0]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d003      	beq.n	8012886 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801287e:	f06f 0303 	mvn.w	r3, #3
 8012882:	61fb      	str	r3, [r7, #28]
 8012884:	e038      	b.n	80128f8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012886:	2300      	movs	r3, #0
 8012888:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801288a:	f107 0210 	add.w	r2, r7, #16
 801288e:	2300      	movs	r3, #0
 8012890:	68b9      	ldr	r1, [r7, #8]
 8012892:	69b8      	ldr	r0, [r7, #24]
 8012894:	f000 fdf0 	bl	8013478 <xQueueGenericSendFromISR>
 8012898:	4603      	mov	r3, r0
 801289a:	2b01      	cmp	r3, #1
 801289c:	d003      	beq.n	80128a6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801289e:	f06f 0302 	mvn.w	r3, #2
 80128a2:	61fb      	str	r3, [r7, #28]
 80128a4:	e028      	b.n	80128f8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d025      	beq.n	80128f8 <osMessageQueuePut+0xb0>
 80128ac:	4b15      	ldr	r3, [pc, #84]	@ (8012904 <osMessageQueuePut+0xbc>)
 80128ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80128b2:	601a      	str	r2, [r3, #0]
 80128b4:	f3bf 8f4f 	dsb	sy
 80128b8:	f3bf 8f6f 	isb	sy
 80128bc:	e01c      	b.n	80128f8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80128be:	69bb      	ldr	r3, [r7, #24]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d002      	beq.n	80128ca <osMessageQueuePut+0x82>
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d103      	bne.n	80128d2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80128ca:	f06f 0303 	mvn.w	r3, #3
 80128ce:	61fb      	str	r3, [r7, #28]
 80128d0:	e012      	b.n	80128f8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80128d2:	2300      	movs	r3, #0
 80128d4:	683a      	ldr	r2, [r7, #0]
 80128d6:	68b9      	ldr	r1, [r7, #8]
 80128d8:	69b8      	ldr	r0, [r7, #24]
 80128da:	f000 fccb 	bl	8013274 <xQueueGenericSend>
 80128de:	4603      	mov	r3, r0
 80128e0:	2b01      	cmp	r3, #1
 80128e2:	d009      	beq.n	80128f8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d003      	beq.n	80128f2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80128ea:	f06f 0301 	mvn.w	r3, #1
 80128ee:	61fb      	str	r3, [r7, #28]
 80128f0:	e002      	b.n	80128f8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80128f2:	f06f 0302 	mvn.w	r3, #2
 80128f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80128f8:	69fb      	ldr	r3, [r7, #28]
}
 80128fa:	4618      	mov	r0, r3
 80128fc:	3720      	adds	r7, #32
 80128fe:	46bd      	mov	sp, r7
 8012900:	bd80      	pop	{r7, pc}
 8012902:	bf00      	nop
 8012904:	e000ed04 	.word	0xe000ed04

08012908 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012908:	b580      	push	{r7, lr}
 801290a:	b088      	sub	sp, #32
 801290c:	af00      	add	r7, sp, #0
 801290e:	60f8      	str	r0, [r7, #12]
 8012910:	60b9      	str	r1, [r7, #8]
 8012912:	607a      	str	r2, [r7, #4]
 8012914:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801291a:	2300      	movs	r3, #0
 801291c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801291e:	f3ef 8305 	mrs	r3, IPSR
 8012922:	617b      	str	r3, [r7, #20]
  return(result);
 8012924:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012926:	2b00      	cmp	r3, #0
 8012928:	d028      	beq.n	801297c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801292a:	69bb      	ldr	r3, [r7, #24]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d005      	beq.n	801293c <osMessageQueueGet+0x34>
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d002      	beq.n	801293c <osMessageQueueGet+0x34>
 8012936:	683b      	ldr	r3, [r7, #0]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d003      	beq.n	8012944 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 801293c:	f06f 0303 	mvn.w	r3, #3
 8012940:	61fb      	str	r3, [r7, #28]
 8012942:	e037      	b.n	80129b4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8012944:	2300      	movs	r3, #0
 8012946:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012948:	f107 0310 	add.w	r3, r7, #16
 801294c:	461a      	mov	r2, r3
 801294e:	68b9      	ldr	r1, [r7, #8]
 8012950:	69b8      	ldr	r0, [r7, #24]
 8012952:	f001 f8b1 	bl	8013ab8 <xQueueReceiveFromISR>
 8012956:	4603      	mov	r3, r0
 8012958:	2b01      	cmp	r3, #1
 801295a:	d003      	beq.n	8012964 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 801295c:	f06f 0302 	mvn.w	r3, #2
 8012960:	61fb      	str	r3, [r7, #28]
 8012962:	e027      	b.n	80129b4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8012964:	693b      	ldr	r3, [r7, #16]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d024      	beq.n	80129b4 <osMessageQueueGet+0xac>
 801296a:	4b15      	ldr	r3, [pc, #84]	@ (80129c0 <osMessageQueueGet+0xb8>)
 801296c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012970:	601a      	str	r2, [r3, #0]
 8012972:	f3bf 8f4f 	dsb	sy
 8012976:	f3bf 8f6f 	isb	sy
 801297a:	e01b      	b.n	80129b4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801297c:	69bb      	ldr	r3, [r7, #24]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d002      	beq.n	8012988 <osMessageQueueGet+0x80>
 8012982:	68bb      	ldr	r3, [r7, #8]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d103      	bne.n	8012990 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012988:	f06f 0303 	mvn.w	r3, #3
 801298c:	61fb      	str	r3, [r7, #28]
 801298e:	e011      	b.n	80129b4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012990:	683a      	ldr	r2, [r7, #0]
 8012992:	68b9      	ldr	r1, [r7, #8]
 8012994:	69b8      	ldr	r0, [r7, #24]
 8012996:	f000 fe9d 	bl	80136d4 <xQueueReceive>
 801299a:	4603      	mov	r3, r0
 801299c:	2b01      	cmp	r3, #1
 801299e:	d009      	beq.n	80129b4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d003      	beq.n	80129ae <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80129a6:	f06f 0301 	mvn.w	r3, #1
 80129aa:	61fb      	str	r3, [r7, #28]
 80129ac:	e002      	b.n	80129b4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80129ae:	f06f 0302 	mvn.w	r3, #2
 80129b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80129b4:	69fb      	ldr	r3, [r7, #28]
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	3720      	adds	r7, #32
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}
 80129be:	bf00      	nop
 80129c0:	e000ed04 	.word	0xe000ed04

080129c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80129c4:	b480      	push	{r7}
 80129c6:	b085      	sub	sp, #20
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	60f8      	str	r0, [r7, #12]
 80129cc:	60b9      	str	r1, [r7, #8]
 80129ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	4a07      	ldr	r2, [pc, #28]	@ (80129f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80129d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	4a06      	ldr	r2, [pc, #24]	@ (80129f4 <vApplicationGetIdleTaskMemory+0x30>)
 80129da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2280      	movs	r2, #128	@ 0x80
 80129e0:	601a      	str	r2, [r3, #0]
}
 80129e2:	bf00      	nop
 80129e4:	3714      	adds	r7, #20
 80129e6:	46bd      	mov	sp, r7
 80129e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ec:	4770      	bx	lr
 80129ee:	bf00      	nop
 80129f0:	24000a80 	.word	0x24000a80
 80129f4:	24000b28 	.word	0x24000b28

080129f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80129f8:	b480      	push	{r7}
 80129fa:	b085      	sub	sp, #20
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	60f8      	str	r0, [r7, #12]
 8012a00:	60b9      	str	r1, [r7, #8]
 8012a02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	4a07      	ldr	r2, [pc, #28]	@ (8012a24 <vApplicationGetTimerTaskMemory+0x2c>)
 8012a08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	4a06      	ldr	r2, [pc, #24]	@ (8012a28 <vApplicationGetTimerTaskMemory+0x30>)
 8012a0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012a16:	601a      	str	r2, [r3, #0]
}
 8012a18:	bf00      	nop
 8012a1a:	3714      	adds	r7, #20
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a22:	4770      	bx	lr
 8012a24:	24000d28 	.word	0x24000d28
 8012a28:	24000dd0 	.word	0x24000dd0

08012a2c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b082      	sub	sp, #8
 8012a30:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8012a32:	2020      	movs	r0, #32
 8012a34:	f003 fbca 	bl	80161cc <pvPortMalloc>
 8012a38:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d00a      	beq.n	8012a56 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	2200      	movs	r2, #0
 8012a44:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	3304      	adds	r3, #4
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f000 f9aa 	bl	8012da4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	2200      	movs	r2, #0
 8012a54:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8012a56:	687b      	ldr	r3, [r7, #4]
	}
 8012a58:	4618      	mov	r0, r3
 8012a5a:	3708      	adds	r7, #8
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}

08012a60 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b090      	sub	sp, #64	@ 0x40
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	60f8      	str	r0, [r7, #12]
 8012a68:	60b9      	str	r1, [r7, #8]
 8012a6a:	607a      	str	r2, [r7, #4]
 8012a6c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8012a72:	2300      	movs	r3, #0
 8012a74:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8012a76:	2300      	movs	r3, #0
 8012a78:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d10b      	bne.n	8012a98 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a84:	f383 8811 	msr	BASEPRI, r3
 8012a88:	f3bf 8f6f 	isb	sy
 8012a8c:	f3bf 8f4f 	dsb	sy
 8012a90:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012a92:	bf00      	nop
 8012a94:	bf00      	nop
 8012a96:	e7fd      	b.n	8012a94 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012a98:	68bb      	ldr	r3, [r7, #8]
 8012a9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012a9e:	d30b      	bcc.n	8012ab8 <xEventGroupWaitBits+0x58>
	__asm volatile
 8012aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012aa4:	f383 8811 	msr	BASEPRI, r3
 8012aa8:	f3bf 8f6f 	isb	sy
 8012aac:	f3bf 8f4f 	dsb	sy
 8012ab0:	61fb      	str	r3, [r7, #28]
}
 8012ab2:	bf00      	nop
 8012ab4:	bf00      	nop
 8012ab6:	e7fd      	b.n	8012ab4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8012ab8:	68bb      	ldr	r3, [r7, #8]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d10b      	bne.n	8012ad6 <xEventGroupWaitBits+0x76>
	__asm volatile
 8012abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ac2:	f383 8811 	msr	BASEPRI, r3
 8012ac6:	f3bf 8f6f 	isb	sy
 8012aca:	f3bf 8f4f 	dsb	sy
 8012ace:	61bb      	str	r3, [r7, #24]
}
 8012ad0:	bf00      	nop
 8012ad2:	bf00      	nop
 8012ad4:	e7fd      	b.n	8012ad2 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012ad6:	f002 f961 	bl	8014d9c <xTaskGetSchedulerState>
 8012ada:	4603      	mov	r3, r0
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d102      	bne.n	8012ae6 <xEventGroupWaitBits+0x86>
 8012ae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d101      	bne.n	8012aea <xEventGroupWaitBits+0x8a>
 8012ae6:	2301      	movs	r3, #1
 8012ae8:	e000      	b.n	8012aec <xEventGroupWaitBits+0x8c>
 8012aea:	2300      	movs	r3, #0
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d10b      	bne.n	8012b08 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8012af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012af4:	f383 8811 	msr	BASEPRI, r3
 8012af8:	f3bf 8f6f 	isb	sy
 8012afc:	f3bf 8f4f 	dsb	sy
 8012b00:	617b      	str	r3, [r7, #20]
}
 8012b02:	bf00      	nop
 8012b04:	bf00      	nop
 8012b06:	e7fd      	b.n	8012b04 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8012b08:	f001 fc90 	bl	801442c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8012b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8012b12:	683a      	ldr	r2, [r7, #0]
 8012b14:	68b9      	ldr	r1, [r7, #8]
 8012b16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012b18:	f000 f90d 	bl	8012d36 <prvTestWaitCondition>
 8012b1c:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8012b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d00e      	beq.n	8012b42 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8012b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8012b28:	2300      	movs	r3, #0
 8012b2a:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d028      	beq.n	8012b84 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b34:	681a      	ldr	r2, [r3, #0]
 8012b36:	68bb      	ldr	r3, [r7, #8]
 8012b38:	43db      	mvns	r3, r3
 8012b3a:	401a      	ands	r2, r3
 8012b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b3e:	601a      	str	r2, [r3, #0]
 8012b40:	e020      	b.n	8012b84 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8012b42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d104      	bne.n	8012b52 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8012b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8012b4c:	2301      	movs	r3, #1
 8012b4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8012b50:	e018      	b.n	8012b84 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d003      	beq.n	8012b60 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8012b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8012b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8012b60:	683b      	ldr	r3, [r7, #0]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d003      	beq.n	8012b6e <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8012b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8012b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8012b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b70:	1d18      	adds	r0, r3, #4
 8012b72:	68ba      	ldr	r2, [r7, #8]
 8012b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b76:	4313      	orrs	r3, r2
 8012b78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012b7a:	4619      	mov	r1, r3
 8012b7c:	f001 fe6a 	bl	8014854 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8012b80:	2300      	movs	r3, #0
 8012b82:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8012b84:	f001 fc60 	bl	8014448 <xTaskResumeAll>
 8012b88:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8012b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d031      	beq.n	8012bf4 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8012b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d107      	bne.n	8012ba6 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8012b96:	4b1a      	ldr	r3, [pc, #104]	@ (8012c00 <xEventGroupWaitBits+0x1a0>)
 8012b98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012b9c:	601a      	str	r2, [r3, #0]
 8012b9e:	f3bf 8f4f 	dsb	sy
 8012ba2:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8012ba6:	f002 fa73 	bl	8015090 <uxTaskResetEventItemValue>
 8012baa:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8012bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d11a      	bne.n	8012bec <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8012bb6:	f003 f9e7 	bl	8015f88 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8012bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8012bc0:	683a      	ldr	r2, [r7, #0]
 8012bc2:	68b9      	ldr	r1, [r7, #8]
 8012bc4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012bc6:	f000 f8b6 	bl	8012d36 <prvTestWaitCondition>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d009      	beq.n	8012be4 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d006      	beq.n	8012be4 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012bd8:	681a      	ldr	r2, [r3, #0]
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	43db      	mvns	r3, r3
 8012bde:	401a      	ands	r2, r3
 8012be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012be2:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8012be4:	2301      	movs	r3, #1
 8012be6:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8012be8:	f003 fa00 	bl	8015fec <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012bee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8012bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	3740      	adds	r7, #64	@ 0x40
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	bd80      	pop	{r7, pc}
 8012bfe:	bf00      	nop
 8012c00:	e000ed04 	.word	0xe000ed04

08012c04 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b08e      	sub	sp, #56	@ 0x38
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
 8012c0c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8012c0e:	2300      	movs	r3, #0
 8012c10:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8012c16:	2300      	movs	r3, #0
 8012c18:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d10b      	bne.n	8012c38 <xEventGroupSetBits+0x34>
	__asm volatile
 8012c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c24:	f383 8811 	msr	BASEPRI, r3
 8012c28:	f3bf 8f6f 	isb	sy
 8012c2c:	f3bf 8f4f 	dsb	sy
 8012c30:	613b      	str	r3, [r7, #16]
}
 8012c32:	bf00      	nop
 8012c34:	bf00      	nop
 8012c36:	e7fd      	b.n	8012c34 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012c38:	683b      	ldr	r3, [r7, #0]
 8012c3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012c3e:	d30b      	bcc.n	8012c58 <xEventGroupSetBits+0x54>
	__asm volatile
 8012c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c44:	f383 8811 	msr	BASEPRI, r3
 8012c48:	f3bf 8f6f 	isb	sy
 8012c4c:	f3bf 8f4f 	dsb	sy
 8012c50:	60fb      	str	r3, [r7, #12]
}
 8012c52:	bf00      	nop
 8012c54:	bf00      	nop
 8012c56:	e7fd      	b.n	8012c54 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8012c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c5a:	3304      	adds	r3, #4
 8012c5c:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c60:	3308      	adds	r3, #8
 8012c62:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8012c64:	f001 fbe2 	bl	801442c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8012c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c6a:	68db      	ldr	r3, [r3, #12]
 8012c6c:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8012c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c70:	681a      	ldr	r2, [r3, #0]
 8012c72:	683b      	ldr	r3, [r7, #0]
 8012c74:	431a      	orrs	r2, r3
 8012c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c78:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8012c7a:	e03c      	b.n	8012cf6 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8012c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8012c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8012c88:	2300      	movs	r3, #0
 8012c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8012c8c:	69bb      	ldr	r3, [r7, #24]
 8012c8e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8012c92:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012c94:	69bb      	ldr	r3, [r7, #24]
 8012c96:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012c9a:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8012c9c:	697b      	ldr	r3, [r7, #20]
 8012c9e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d108      	bne.n	8012cb8 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8012ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ca8:	681a      	ldr	r2, [r3, #0]
 8012caa:	69bb      	ldr	r3, [r7, #24]
 8012cac:	4013      	ands	r3, r2
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d00b      	beq.n	8012cca <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8012cb2:	2301      	movs	r3, #1
 8012cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012cb6:	e008      	b.n	8012cca <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8012cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cba:	681a      	ldr	r2, [r3, #0]
 8012cbc:	69bb      	ldr	r3, [r7, #24]
 8012cbe:	4013      	ands	r3, r2
 8012cc0:	69ba      	ldr	r2, [r7, #24]
 8012cc2:	429a      	cmp	r2, r3
 8012cc4:	d101      	bne.n	8012cca <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8012cc6:	2301      	movs	r3, #1
 8012cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8012cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d010      	beq.n	8012cf2 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8012cd0:	697b      	ldr	r3, [r7, #20]
 8012cd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d003      	beq.n	8012ce2 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8012cda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012cdc:	69bb      	ldr	r3, [r7, #24]
 8012cde:	4313      	orrs	r3, r2
 8012ce0:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8012ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8012cea:	4619      	mov	r1, r3
 8012cec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8012cee:	f001 fe7f 	bl	80149f0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8012cf2:	69fb      	ldr	r3, [r7, #28]
 8012cf4:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8012cf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012cf8:	6a3b      	ldr	r3, [r7, #32]
 8012cfa:	429a      	cmp	r2, r3
 8012cfc:	d1be      	bne.n	8012c7c <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8012cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d00:	681a      	ldr	r2, [r3, #0]
 8012d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d04:	43db      	mvns	r3, r3
 8012d06:	401a      	ands	r2, r3
 8012d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d0a:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8012d0c:	f001 fb9c 	bl	8014448 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8012d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d12:	681b      	ldr	r3, [r3, #0]
}
 8012d14:	4618      	mov	r0, r3
 8012d16:	3738      	adds	r7, #56	@ 0x38
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}

08012d1c <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b082      	sub	sp, #8
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8012d26:	6839      	ldr	r1, [r7, #0]
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f7ff ff6b 	bl	8012c04 <xEventGroupSetBits>
}
 8012d2e:	bf00      	nop
 8012d30:	3708      	adds	r7, #8
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}

08012d36 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8012d36:	b480      	push	{r7}
 8012d38:	b087      	sub	sp, #28
 8012d3a:	af00      	add	r7, sp, #0
 8012d3c:	60f8      	str	r0, [r7, #12]
 8012d3e:	60b9      	str	r1, [r7, #8]
 8012d40:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8012d42:	2300      	movs	r3, #0
 8012d44:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d107      	bne.n	8012d5c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8012d4c:	68fa      	ldr	r2, [r7, #12]
 8012d4e:	68bb      	ldr	r3, [r7, #8]
 8012d50:	4013      	ands	r3, r2
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d00a      	beq.n	8012d6c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012d56:	2301      	movs	r3, #1
 8012d58:	617b      	str	r3, [r7, #20]
 8012d5a:	e007      	b.n	8012d6c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8012d5c:	68fa      	ldr	r2, [r7, #12]
 8012d5e:	68bb      	ldr	r3, [r7, #8]
 8012d60:	4013      	ands	r3, r2
 8012d62:	68ba      	ldr	r2, [r7, #8]
 8012d64:	429a      	cmp	r2, r3
 8012d66:	d101      	bne.n	8012d6c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012d68:	2301      	movs	r3, #1
 8012d6a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8012d6c:	697b      	ldr	r3, [r7, #20]
}
 8012d6e:	4618      	mov	r0, r3
 8012d70:	371c      	adds	r7, #28
 8012d72:	46bd      	mov	sp, r7
 8012d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d78:	4770      	bx	lr
	...

08012d7c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b086      	sub	sp, #24
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	60f8      	str	r0, [r7, #12]
 8012d84:	60b9      	str	r1, [r7, #8]
 8012d86:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	68ba      	ldr	r2, [r7, #8]
 8012d8c:	68f9      	ldr	r1, [r7, #12]
 8012d8e:	4804      	ldr	r0, [pc, #16]	@ (8012da0 <xEventGroupSetBitsFromISR+0x24>)
 8012d90:	f002 ffaa 	bl	8015ce8 <xTimerPendFunctionCallFromISR>
 8012d94:	6178      	str	r0, [r7, #20]

		return xReturn;
 8012d96:	697b      	ldr	r3, [r7, #20]
	}
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3718      	adds	r7, #24
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}
 8012da0:	08012d1d 	.word	0x08012d1d

08012da4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012da4:	b480      	push	{r7}
 8012da6:	b083      	sub	sp, #12
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	f103 0208 	add.w	r2, r3, #8
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012dbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	f103 0208 	add.w	r2, r3, #8
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	f103 0208 	add.w	r2, r3, #8
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012dd8:	bf00      	nop
 8012dda:	370c      	adds	r7, #12
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de2:	4770      	bx	lr

08012de4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012de4:	b480      	push	{r7}
 8012de6:	b083      	sub	sp, #12
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2200      	movs	r2, #0
 8012df0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012df2:	bf00      	nop
 8012df4:	370c      	adds	r7, #12
 8012df6:	46bd      	mov	sp, r7
 8012df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfc:	4770      	bx	lr

08012dfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012dfe:	b480      	push	{r7}
 8012e00:	b085      	sub	sp, #20
 8012e02:	af00      	add	r7, sp, #0
 8012e04:	6078      	str	r0, [r7, #4]
 8012e06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012e0e:	683b      	ldr	r3, [r7, #0]
 8012e10:	68fa      	ldr	r2, [r7, #12]
 8012e12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	689a      	ldr	r2, [r3, #8]
 8012e18:	683b      	ldr	r3, [r7, #0]
 8012e1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	689b      	ldr	r3, [r3, #8]
 8012e20:	683a      	ldr	r2, [r7, #0]
 8012e22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	683a      	ldr	r2, [r7, #0]
 8012e28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012e2a:	683b      	ldr	r3, [r7, #0]
 8012e2c:	687a      	ldr	r2, [r7, #4]
 8012e2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	1c5a      	adds	r2, r3, #1
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	601a      	str	r2, [r3, #0]
}
 8012e3a:	bf00      	nop
 8012e3c:	3714      	adds	r7, #20
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e44:	4770      	bx	lr

08012e46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012e46:	b480      	push	{r7}
 8012e48:	b085      	sub	sp, #20
 8012e4a:	af00      	add	r7, sp, #0
 8012e4c:	6078      	str	r0, [r7, #4]
 8012e4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012e5c:	d103      	bne.n	8012e66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	691b      	ldr	r3, [r3, #16]
 8012e62:	60fb      	str	r3, [r7, #12]
 8012e64:	e00c      	b.n	8012e80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	3308      	adds	r3, #8
 8012e6a:	60fb      	str	r3, [r7, #12]
 8012e6c:	e002      	b.n	8012e74 <vListInsert+0x2e>
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	685b      	ldr	r3, [r3, #4]
 8012e72:	60fb      	str	r3, [r7, #12]
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	685b      	ldr	r3, [r3, #4]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	68ba      	ldr	r2, [r7, #8]
 8012e7c:	429a      	cmp	r2, r3
 8012e7e:	d2f6      	bcs.n	8012e6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	685a      	ldr	r2, [r3, #4]
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	685b      	ldr	r3, [r3, #4]
 8012e8c:	683a      	ldr	r2, [r7, #0]
 8012e8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	68fa      	ldr	r2, [r7, #12]
 8012e94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	683a      	ldr	r2, [r7, #0]
 8012e9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	687a      	ldr	r2, [r7, #4]
 8012ea0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	1c5a      	adds	r2, r3, #1
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	601a      	str	r2, [r3, #0]
}
 8012eac:	bf00      	nop
 8012eae:	3714      	adds	r7, #20
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb6:	4770      	bx	lr

08012eb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012eb8:	b480      	push	{r7}
 8012eba:	b085      	sub	sp, #20
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	691b      	ldr	r3, [r3, #16]
 8012ec4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	685b      	ldr	r3, [r3, #4]
 8012eca:	687a      	ldr	r2, [r7, #4]
 8012ecc:	6892      	ldr	r2, [r2, #8]
 8012ece:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	689b      	ldr	r3, [r3, #8]
 8012ed4:	687a      	ldr	r2, [r7, #4]
 8012ed6:	6852      	ldr	r2, [r2, #4]
 8012ed8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	685b      	ldr	r3, [r3, #4]
 8012ede:	687a      	ldr	r2, [r7, #4]
 8012ee0:	429a      	cmp	r2, r3
 8012ee2:	d103      	bne.n	8012eec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	689a      	ldr	r2, [r3, #8]
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	2200      	movs	r2, #0
 8012ef0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	1e5a      	subs	r2, r3, #1
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	681b      	ldr	r3, [r3, #0]
}
 8012f00:	4618      	mov	r0, r3
 8012f02:	3714      	adds	r7, #20
 8012f04:	46bd      	mov	sp, r7
 8012f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0a:	4770      	bx	lr

08012f0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b084      	sub	sp, #16
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
 8012f14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d10b      	bne.n	8012f38 <xQueueGenericReset+0x2c>
	__asm volatile
 8012f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f24:	f383 8811 	msr	BASEPRI, r3
 8012f28:	f3bf 8f6f 	isb	sy
 8012f2c:	f3bf 8f4f 	dsb	sy
 8012f30:	60bb      	str	r3, [r7, #8]
}
 8012f32:	bf00      	nop
 8012f34:	bf00      	nop
 8012f36:	e7fd      	b.n	8012f34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012f38:	f003 f826 	bl	8015f88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	681a      	ldr	r2, [r3, #0]
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f44:	68f9      	ldr	r1, [r7, #12]
 8012f46:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012f48:	fb01 f303 	mul.w	r3, r1, r3
 8012f4c:	441a      	add	r2, r3
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	2200      	movs	r2, #0
 8012f56:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	681a      	ldr	r2, [r3, #0]
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	681a      	ldr	r2, [r3, #0]
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f68:	3b01      	subs	r3, #1
 8012f6a:	68f9      	ldr	r1, [r7, #12]
 8012f6c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012f6e:	fb01 f303 	mul.w	r3, r1, r3
 8012f72:	441a      	add	r2, r3
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	22ff      	movs	r2, #255	@ 0xff
 8012f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	22ff      	movs	r2, #255	@ 0xff
 8012f84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012f88:	683b      	ldr	r3, [r7, #0]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d114      	bne.n	8012fb8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	691b      	ldr	r3, [r3, #16]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d01a      	beq.n	8012fcc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	3310      	adds	r3, #16
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f001 fcc4 	bl	8014928 <xTaskRemoveFromEventList>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d012      	beq.n	8012fcc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8012fdc <xQueueGenericReset+0xd0>)
 8012fa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012fac:	601a      	str	r2, [r3, #0]
 8012fae:	f3bf 8f4f 	dsb	sy
 8012fb2:	f3bf 8f6f 	isb	sy
 8012fb6:	e009      	b.n	8012fcc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	3310      	adds	r3, #16
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7ff fef1 	bl	8012da4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	3324      	adds	r3, #36	@ 0x24
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f7ff feec 	bl	8012da4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012fcc:	f003 f80e 	bl	8015fec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012fd0:	2301      	movs	r3, #1
}
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	3710      	adds	r7, #16
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd80      	pop	{r7, pc}
 8012fda:	bf00      	nop
 8012fdc:	e000ed04 	.word	0xe000ed04

08012fe0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b08e      	sub	sp, #56	@ 0x38
 8012fe4:	af02      	add	r7, sp, #8
 8012fe6:	60f8      	str	r0, [r7, #12]
 8012fe8:	60b9      	str	r1, [r7, #8]
 8012fea:	607a      	str	r2, [r7, #4]
 8012fec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d10b      	bne.n	801300c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8012ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ff8:	f383 8811 	msr	BASEPRI, r3
 8012ffc:	f3bf 8f6f 	isb	sy
 8013000:	f3bf 8f4f 	dsb	sy
 8013004:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013006:	bf00      	nop
 8013008:	bf00      	nop
 801300a:	e7fd      	b.n	8013008 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801300c:	683b      	ldr	r3, [r7, #0]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d10b      	bne.n	801302a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8013012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013016:	f383 8811 	msr	BASEPRI, r3
 801301a:	f3bf 8f6f 	isb	sy
 801301e:	f3bf 8f4f 	dsb	sy
 8013022:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013024:	bf00      	nop
 8013026:	bf00      	nop
 8013028:	e7fd      	b.n	8013026 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d002      	beq.n	8013036 <xQueueGenericCreateStatic+0x56>
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d001      	beq.n	801303a <xQueueGenericCreateStatic+0x5a>
 8013036:	2301      	movs	r3, #1
 8013038:	e000      	b.n	801303c <xQueueGenericCreateStatic+0x5c>
 801303a:	2300      	movs	r3, #0
 801303c:	2b00      	cmp	r3, #0
 801303e:	d10b      	bne.n	8013058 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8013040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013044:	f383 8811 	msr	BASEPRI, r3
 8013048:	f3bf 8f6f 	isb	sy
 801304c:	f3bf 8f4f 	dsb	sy
 8013050:	623b      	str	r3, [r7, #32]
}
 8013052:	bf00      	nop
 8013054:	bf00      	nop
 8013056:	e7fd      	b.n	8013054 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d102      	bne.n	8013064 <xQueueGenericCreateStatic+0x84>
 801305e:	68bb      	ldr	r3, [r7, #8]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d101      	bne.n	8013068 <xQueueGenericCreateStatic+0x88>
 8013064:	2301      	movs	r3, #1
 8013066:	e000      	b.n	801306a <xQueueGenericCreateStatic+0x8a>
 8013068:	2300      	movs	r3, #0
 801306a:	2b00      	cmp	r3, #0
 801306c:	d10b      	bne.n	8013086 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801306e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013072:	f383 8811 	msr	BASEPRI, r3
 8013076:	f3bf 8f6f 	isb	sy
 801307a:	f3bf 8f4f 	dsb	sy
 801307e:	61fb      	str	r3, [r7, #28]
}
 8013080:	bf00      	nop
 8013082:	bf00      	nop
 8013084:	e7fd      	b.n	8013082 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013086:	2350      	movs	r3, #80	@ 0x50
 8013088:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801308a:	697b      	ldr	r3, [r7, #20]
 801308c:	2b50      	cmp	r3, #80	@ 0x50
 801308e:	d00b      	beq.n	80130a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8013090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013094:	f383 8811 	msr	BASEPRI, r3
 8013098:	f3bf 8f6f 	isb	sy
 801309c:	f3bf 8f4f 	dsb	sy
 80130a0:	61bb      	str	r3, [r7, #24]
}
 80130a2:	bf00      	nop
 80130a4:	bf00      	nop
 80130a6:	e7fd      	b.n	80130a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80130a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80130aa:	683b      	ldr	r3, [r7, #0]
 80130ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80130ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d00d      	beq.n	80130d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80130b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130b6:	2201      	movs	r2, #1
 80130b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80130bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80130c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130c2:	9300      	str	r3, [sp, #0]
 80130c4:	4613      	mov	r3, r2
 80130c6:	687a      	ldr	r2, [r7, #4]
 80130c8:	68b9      	ldr	r1, [r7, #8]
 80130ca:	68f8      	ldr	r0, [r7, #12]
 80130cc:	f000 f840 	bl	8013150 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80130d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80130d2:	4618      	mov	r0, r3
 80130d4:	3730      	adds	r7, #48	@ 0x30
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}

080130da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80130da:	b580      	push	{r7, lr}
 80130dc:	b08a      	sub	sp, #40	@ 0x28
 80130de:	af02      	add	r7, sp, #8
 80130e0:	60f8      	str	r0, [r7, #12]
 80130e2:	60b9      	str	r1, [r7, #8]
 80130e4:	4613      	mov	r3, r2
 80130e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d10b      	bne.n	8013106 <xQueueGenericCreate+0x2c>
	__asm volatile
 80130ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130f2:	f383 8811 	msr	BASEPRI, r3
 80130f6:	f3bf 8f6f 	isb	sy
 80130fa:	f3bf 8f4f 	dsb	sy
 80130fe:	613b      	str	r3, [r7, #16]
}
 8013100:	bf00      	nop
 8013102:	bf00      	nop
 8013104:	e7fd      	b.n	8013102 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	68ba      	ldr	r2, [r7, #8]
 801310a:	fb02 f303 	mul.w	r3, r2, r3
 801310e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013110:	69fb      	ldr	r3, [r7, #28]
 8013112:	3350      	adds	r3, #80	@ 0x50
 8013114:	4618      	mov	r0, r3
 8013116:	f003 f859 	bl	80161cc <pvPortMalloc>
 801311a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801311c:	69bb      	ldr	r3, [r7, #24]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d011      	beq.n	8013146 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013122:	69bb      	ldr	r3, [r7, #24]
 8013124:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013126:	697b      	ldr	r3, [r7, #20]
 8013128:	3350      	adds	r3, #80	@ 0x50
 801312a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801312c:	69bb      	ldr	r3, [r7, #24]
 801312e:	2200      	movs	r2, #0
 8013130:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013134:	79fa      	ldrb	r2, [r7, #7]
 8013136:	69bb      	ldr	r3, [r7, #24]
 8013138:	9300      	str	r3, [sp, #0]
 801313a:	4613      	mov	r3, r2
 801313c:	697a      	ldr	r2, [r7, #20]
 801313e:	68b9      	ldr	r1, [r7, #8]
 8013140:	68f8      	ldr	r0, [r7, #12]
 8013142:	f000 f805 	bl	8013150 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013146:	69bb      	ldr	r3, [r7, #24]
	}
 8013148:	4618      	mov	r0, r3
 801314a:	3720      	adds	r7, #32
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}

08013150 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b084      	sub	sp, #16
 8013154:	af00      	add	r7, sp, #0
 8013156:	60f8      	str	r0, [r7, #12]
 8013158:	60b9      	str	r1, [r7, #8]
 801315a:	607a      	str	r2, [r7, #4]
 801315c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d103      	bne.n	801316c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013164:	69bb      	ldr	r3, [r7, #24]
 8013166:	69ba      	ldr	r2, [r7, #24]
 8013168:	601a      	str	r2, [r3, #0]
 801316a:	e002      	b.n	8013172 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801316c:	69bb      	ldr	r3, [r7, #24]
 801316e:	687a      	ldr	r2, [r7, #4]
 8013170:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013172:	69bb      	ldr	r3, [r7, #24]
 8013174:	68fa      	ldr	r2, [r7, #12]
 8013176:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013178:	69bb      	ldr	r3, [r7, #24]
 801317a:	68ba      	ldr	r2, [r7, #8]
 801317c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801317e:	2101      	movs	r1, #1
 8013180:	69b8      	ldr	r0, [r7, #24]
 8013182:	f7ff fec3 	bl	8012f0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013186:	69bb      	ldr	r3, [r7, #24]
 8013188:	78fa      	ldrb	r2, [r7, #3]
 801318a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801318e:	bf00      	nop
 8013190:	3710      	adds	r7, #16
 8013192:	46bd      	mov	sp, r7
 8013194:	bd80      	pop	{r7, pc}

08013196 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8013196:	b580      	push	{r7, lr}
 8013198:	b08a      	sub	sp, #40	@ 0x28
 801319a:	af02      	add	r7, sp, #8
 801319c:	60f8      	str	r0, [r7, #12]
 801319e:	60b9      	str	r1, [r7, #8]
 80131a0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d10b      	bne.n	80131c0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80131a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131ac:	f383 8811 	msr	BASEPRI, r3
 80131b0:	f3bf 8f6f 	isb	sy
 80131b4:	f3bf 8f4f 	dsb	sy
 80131b8:	61bb      	str	r3, [r7, #24]
}
 80131ba:	bf00      	nop
 80131bc:	bf00      	nop
 80131be:	e7fd      	b.n	80131bc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80131c0:	68ba      	ldr	r2, [r7, #8]
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	429a      	cmp	r2, r3
 80131c6:	d90b      	bls.n	80131e0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80131c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131cc:	f383 8811 	msr	BASEPRI, r3
 80131d0:	f3bf 8f6f 	isb	sy
 80131d4:	f3bf 8f4f 	dsb	sy
 80131d8:	617b      	str	r3, [r7, #20]
}
 80131da:	bf00      	nop
 80131dc:	bf00      	nop
 80131de:	e7fd      	b.n	80131dc <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80131e0:	2302      	movs	r3, #2
 80131e2:	9300      	str	r3, [sp, #0]
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2200      	movs	r2, #0
 80131e8:	2100      	movs	r1, #0
 80131ea:	68f8      	ldr	r0, [r7, #12]
 80131ec:	f7ff fef8 	bl	8012fe0 <xQueueGenericCreateStatic>
 80131f0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80131f2:	69fb      	ldr	r3, [r7, #28]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d002      	beq.n	80131fe <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80131f8:	69fb      	ldr	r3, [r7, #28]
 80131fa:	68ba      	ldr	r2, [r7, #8]
 80131fc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80131fe:	69fb      	ldr	r3, [r7, #28]
	}
 8013200:	4618      	mov	r0, r3
 8013202:	3720      	adds	r7, #32
 8013204:	46bd      	mov	sp, r7
 8013206:	bd80      	pop	{r7, pc}

08013208 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8013208:	b580      	push	{r7, lr}
 801320a:	b086      	sub	sp, #24
 801320c:	af00      	add	r7, sp, #0
 801320e:	6078      	str	r0, [r7, #4]
 8013210:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d10b      	bne.n	8013230 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8013218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801321c:	f383 8811 	msr	BASEPRI, r3
 8013220:	f3bf 8f6f 	isb	sy
 8013224:	f3bf 8f4f 	dsb	sy
 8013228:	613b      	str	r3, [r7, #16]
}
 801322a:	bf00      	nop
 801322c:	bf00      	nop
 801322e:	e7fd      	b.n	801322c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8013230:	683a      	ldr	r2, [r7, #0]
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	429a      	cmp	r2, r3
 8013236:	d90b      	bls.n	8013250 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8013238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801323c:	f383 8811 	msr	BASEPRI, r3
 8013240:	f3bf 8f6f 	isb	sy
 8013244:	f3bf 8f4f 	dsb	sy
 8013248:	60fb      	str	r3, [r7, #12]
}
 801324a:	bf00      	nop
 801324c:	bf00      	nop
 801324e:	e7fd      	b.n	801324c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013250:	2202      	movs	r2, #2
 8013252:	2100      	movs	r1, #0
 8013254:	6878      	ldr	r0, [r7, #4]
 8013256:	f7ff ff40 	bl	80130da <xQueueGenericCreate>
 801325a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d002      	beq.n	8013268 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8013262:	697b      	ldr	r3, [r7, #20]
 8013264:	683a      	ldr	r2, [r7, #0]
 8013266:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013268:	697b      	ldr	r3, [r7, #20]
	}
 801326a:	4618      	mov	r0, r3
 801326c:	3718      	adds	r7, #24
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}
	...

08013274 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b08e      	sub	sp, #56	@ 0x38
 8013278:	af00      	add	r7, sp, #0
 801327a:	60f8      	str	r0, [r7, #12]
 801327c:	60b9      	str	r1, [r7, #8]
 801327e:	607a      	str	r2, [r7, #4]
 8013280:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013282:	2300      	movs	r3, #0
 8013284:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801328a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801328c:	2b00      	cmp	r3, #0
 801328e:	d10b      	bne.n	80132a8 <xQueueGenericSend+0x34>
	__asm volatile
 8013290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013294:	f383 8811 	msr	BASEPRI, r3
 8013298:	f3bf 8f6f 	isb	sy
 801329c:	f3bf 8f4f 	dsb	sy
 80132a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80132a2:	bf00      	nop
 80132a4:	bf00      	nop
 80132a6:	e7fd      	b.n	80132a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80132a8:	68bb      	ldr	r3, [r7, #8]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d103      	bne.n	80132b6 <xQueueGenericSend+0x42>
 80132ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d101      	bne.n	80132ba <xQueueGenericSend+0x46>
 80132b6:	2301      	movs	r3, #1
 80132b8:	e000      	b.n	80132bc <xQueueGenericSend+0x48>
 80132ba:	2300      	movs	r3, #0
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d10b      	bne.n	80132d8 <xQueueGenericSend+0x64>
	__asm volatile
 80132c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132c4:	f383 8811 	msr	BASEPRI, r3
 80132c8:	f3bf 8f6f 	isb	sy
 80132cc:	f3bf 8f4f 	dsb	sy
 80132d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80132d2:	bf00      	nop
 80132d4:	bf00      	nop
 80132d6:	e7fd      	b.n	80132d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80132d8:	683b      	ldr	r3, [r7, #0]
 80132da:	2b02      	cmp	r3, #2
 80132dc:	d103      	bne.n	80132e6 <xQueueGenericSend+0x72>
 80132de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80132e2:	2b01      	cmp	r3, #1
 80132e4:	d101      	bne.n	80132ea <xQueueGenericSend+0x76>
 80132e6:	2301      	movs	r3, #1
 80132e8:	e000      	b.n	80132ec <xQueueGenericSend+0x78>
 80132ea:	2300      	movs	r3, #0
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d10b      	bne.n	8013308 <xQueueGenericSend+0x94>
	__asm volatile
 80132f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132f4:	f383 8811 	msr	BASEPRI, r3
 80132f8:	f3bf 8f6f 	isb	sy
 80132fc:	f3bf 8f4f 	dsb	sy
 8013300:	623b      	str	r3, [r7, #32]
}
 8013302:	bf00      	nop
 8013304:	bf00      	nop
 8013306:	e7fd      	b.n	8013304 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013308:	f001 fd48 	bl	8014d9c <xTaskGetSchedulerState>
 801330c:	4603      	mov	r3, r0
 801330e:	2b00      	cmp	r3, #0
 8013310:	d102      	bne.n	8013318 <xQueueGenericSend+0xa4>
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d101      	bne.n	801331c <xQueueGenericSend+0xa8>
 8013318:	2301      	movs	r3, #1
 801331a:	e000      	b.n	801331e <xQueueGenericSend+0xaa>
 801331c:	2300      	movs	r3, #0
 801331e:	2b00      	cmp	r3, #0
 8013320:	d10b      	bne.n	801333a <xQueueGenericSend+0xc6>
	__asm volatile
 8013322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013326:	f383 8811 	msr	BASEPRI, r3
 801332a:	f3bf 8f6f 	isb	sy
 801332e:	f3bf 8f4f 	dsb	sy
 8013332:	61fb      	str	r3, [r7, #28]
}
 8013334:	bf00      	nop
 8013336:	bf00      	nop
 8013338:	e7fd      	b.n	8013336 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801333a:	f002 fe25 	bl	8015f88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801333e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013340:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013346:	429a      	cmp	r2, r3
 8013348:	d302      	bcc.n	8013350 <xQueueGenericSend+0xdc>
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	2b02      	cmp	r3, #2
 801334e:	d129      	bne.n	80133a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013350:	683a      	ldr	r2, [r7, #0]
 8013352:	68b9      	ldr	r1, [r7, #8]
 8013354:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013356:	f000 fc6d 	bl	8013c34 <prvCopyDataToQueue>
 801335a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801335c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013360:	2b00      	cmp	r3, #0
 8013362:	d010      	beq.n	8013386 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013366:	3324      	adds	r3, #36	@ 0x24
 8013368:	4618      	mov	r0, r3
 801336a:	f001 fadd 	bl	8014928 <xTaskRemoveFromEventList>
 801336e:	4603      	mov	r3, r0
 8013370:	2b00      	cmp	r3, #0
 8013372:	d013      	beq.n	801339c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013374:	4b3f      	ldr	r3, [pc, #252]	@ (8013474 <xQueueGenericSend+0x200>)
 8013376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801337a:	601a      	str	r2, [r3, #0]
 801337c:	f3bf 8f4f 	dsb	sy
 8013380:	f3bf 8f6f 	isb	sy
 8013384:	e00a      	b.n	801339c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013388:	2b00      	cmp	r3, #0
 801338a:	d007      	beq.n	801339c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801338c:	4b39      	ldr	r3, [pc, #228]	@ (8013474 <xQueueGenericSend+0x200>)
 801338e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013392:	601a      	str	r2, [r3, #0]
 8013394:	f3bf 8f4f 	dsb	sy
 8013398:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801339c:	f002 fe26 	bl	8015fec <vPortExitCritical>
				return pdPASS;
 80133a0:	2301      	movs	r3, #1
 80133a2:	e063      	b.n	801346c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d103      	bne.n	80133b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80133aa:	f002 fe1f 	bl	8015fec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80133ae:	2300      	movs	r3, #0
 80133b0:	e05c      	b.n	801346c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80133b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d106      	bne.n	80133c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80133b8:	f107 0314 	add.w	r3, r7, #20
 80133bc:	4618      	mov	r0, r3
 80133be:	f001 fb7b 	bl	8014ab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80133c2:	2301      	movs	r3, #1
 80133c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80133c6:	f002 fe11 	bl	8015fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80133ca:	f001 f82f 	bl	801442c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80133ce:	f002 fddb 	bl	8015f88 <vPortEnterCritical>
 80133d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80133d8:	b25b      	sxtb	r3, r3
 80133da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80133de:	d103      	bne.n	80133e8 <xQueueGenericSend+0x174>
 80133e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133e2:	2200      	movs	r2, #0
 80133e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80133e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80133ee:	b25b      	sxtb	r3, r3
 80133f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80133f4:	d103      	bne.n	80133fe <xQueueGenericSend+0x18a>
 80133f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133f8:	2200      	movs	r2, #0
 80133fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80133fe:	f002 fdf5 	bl	8015fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013402:	1d3a      	adds	r2, r7, #4
 8013404:	f107 0314 	add.w	r3, r7, #20
 8013408:	4611      	mov	r1, r2
 801340a:	4618      	mov	r0, r3
 801340c:	f001 fb6a 	bl	8014ae4 <xTaskCheckForTimeOut>
 8013410:	4603      	mov	r3, r0
 8013412:	2b00      	cmp	r3, #0
 8013414:	d124      	bne.n	8013460 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013416:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013418:	f000 fd04 	bl	8013e24 <prvIsQueueFull>
 801341c:	4603      	mov	r3, r0
 801341e:	2b00      	cmp	r3, #0
 8013420:	d018      	beq.n	8013454 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013424:	3310      	adds	r3, #16
 8013426:	687a      	ldr	r2, [r7, #4]
 8013428:	4611      	mov	r1, r2
 801342a:	4618      	mov	r0, r3
 801342c:	f001 f9ec 	bl	8014808 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013430:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013432:	f000 fc8f 	bl	8013d54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013436:	f001 f807 	bl	8014448 <xTaskResumeAll>
 801343a:	4603      	mov	r3, r0
 801343c:	2b00      	cmp	r3, #0
 801343e:	f47f af7c 	bne.w	801333a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8013442:	4b0c      	ldr	r3, [pc, #48]	@ (8013474 <xQueueGenericSend+0x200>)
 8013444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013448:	601a      	str	r2, [r3, #0]
 801344a:	f3bf 8f4f 	dsb	sy
 801344e:	f3bf 8f6f 	isb	sy
 8013452:	e772      	b.n	801333a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013454:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013456:	f000 fc7d 	bl	8013d54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801345a:	f000 fff5 	bl	8014448 <xTaskResumeAll>
 801345e:	e76c      	b.n	801333a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013460:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013462:	f000 fc77 	bl	8013d54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013466:	f000 ffef 	bl	8014448 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801346a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801346c:	4618      	mov	r0, r3
 801346e:	3738      	adds	r7, #56	@ 0x38
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}
 8013474:	e000ed04 	.word	0xe000ed04

08013478 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b090      	sub	sp, #64	@ 0x40
 801347c:	af00      	add	r7, sp, #0
 801347e:	60f8      	str	r0, [r7, #12]
 8013480:	60b9      	str	r1, [r7, #8]
 8013482:	607a      	str	r2, [r7, #4]
 8013484:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801348a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801348c:	2b00      	cmp	r3, #0
 801348e:	d10b      	bne.n	80134a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8013490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013494:	f383 8811 	msr	BASEPRI, r3
 8013498:	f3bf 8f6f 	isb	sy
 801349c:	f3bf 8f4f 	dsb	sy
 80134a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80134a2:	bf00      	nop
 80134a4:	bf00      	nop
 80134a6:	e7fd      	b.n	80134a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80134a8:	68bb      	ldr	r3, [r7, #8]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d103      	bne.n	80134b6 <xQueueGenericSendFromISR+0x3e>
 80134ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d101      	bne.n	80134ba <xQueueGenericSendFromISR+0x42>
 80134b6:	2301      	movs	r3, #1
 80134b8:	e000      	b.n	80134bc <xQueueGenericSendFromISR+0x44>
 80134ba:	2300      	movs	r3, #0
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d10b      	bne.n	80134d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80134c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134c4:	f383 8811 	msr	BASEPRI, r3
 80134c8:	f3bf 8f6f 	isb	sy
 80134cc:	f3bf 8f4f 	dsb	sy
 80134d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80134d2:	bf00      	nop
 80134d4:	bf00      	nop
 80134d6:	e7fd      	b.n	80134d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80134d8:	683b      	ldr	r3, [r7, #0]
 80134da:	2b02      	cmp	r3, #2
 80134dc:	d103      	bne.n	80134e6 <xQueueGenericSendFromISR+0x6e>
 80134de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80134e2:	2b01      	cmp	r3, #1
 80134e4:	d101      	bne.n	80134ea <xQueueGenericSendFromISR+0x72>
 80134e6:	2301      	movs	r3, #1
 80134e8:	e000      	b.n	80134ec <xQueueGenericSendFromISR+0x74>
 80134ea:	2300      	movs	r3, #0
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d10b      	bne.n	8013508 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80134f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134f4:	f383 8811 	msr	BASEPRI, r3
 80134f8:	f3bf 8f6f 	isb	sy
 80134fc:	f3bf 8f4f 	dsb	sy
 8013500:	623b      	str	r3, [r7, #32]
}
 8013502:	bf00      	nop
 8013504:	bf00      	nop
 8013506:	e7fd      	b.n	8013504 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013508:	f002 fe1e 	bl	8016148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801350c:	f3ef 8211 	mrs	r2, BASEPRI
 8013510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013514:	f383 8811 	msr	BASEPRI, r3
 8013518:	f3bf 8f6f 	isb	sy
 801351c:	f3bf 8f4f 	dsb	sy
 8013520:	61fa      	str	r2, [r7, #28]
 8013522:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013524:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013526:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801352a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801352c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801352e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013530:	429a      	cmp	r2, r3
 8013532:	d302      	bcc.n	801353a <xQueueGenericSendFromISR+0xc2>
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	2b02      	cmp	r3, #2
 8013538:	d12f      	bne.n	801359a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801353a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801353c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013540:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013548:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801354a:	683a      	ldr	r2, [r7, #0]
 801354c:	68b9      	ldr	r1, [r7, #8]
 801354e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013550:	f000 fb70 	bl	8013c34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013554:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8013558:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801355c:	d112      	bne.n	8013584 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801355e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013562:	2b00      	cmp	r3, #0
 8013564:	d016      	beq.n	8013594 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013568:	3324      	adds	r3, #36	@ 0x24
 801356a:	4618      	mov	r0, r3
 801356c:	f001 f9dc 	bl	8014928 <xTaskRemoveFromEventList>
 8013570:	4603      	mov	r3, r0
 8013572:	2b00      	cmp	r3, #0
 8013574:	d00e      	beq.n	8013594 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d00b      	beq.n	8013594 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	2201      	movs	r2, #1
 8013580:	601a      	str	r2, [r3, #0]
 8013582:	e007      	b.n	8013594 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013584:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013588:	3301      	adds	r3, #1
 801358a:	b2db      	uxtb	r3, r3
 801358c:	b25a      	sxtb	r2, r3
 801358e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013594:	2301      	movs	r3, #1
 8013596:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8013598:	e001      	b.n	801359e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801359a:	2300      	movs	r3, #0
 801359c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801359e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135a0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80135a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80135aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	3740      	adds	r7, #64	@ 0x40
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}

080135b4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b08e      	sub	sp, #56	@ 0x38
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
 80135bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80135c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d10b      	bne.n	80135e0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80135c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135cc:	f383 8811 	msr	BASEPRI, r3
 80135d0:	f3bf 8f6f 	isb	sy
 80135d4:	f3bf 8f4f 	dsb	sy
 80135d8:	623b      	str	r3, [r7, #32]
}
 80135da:	bf00      	nop
 80135dc:	bf00      	nop
 80135de:	e7fd      	b.n	80135dc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80135e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d00b      	beq.n	8013600 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80135e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135ec:	f383 8811 	msr	BASEPRI, r3
 80135f0:	f3bf 8f6f 	isb	sy
 80135f4:	f3bf 8f4f 	dsb	sy
 80135f8:	61fb      	str	r3, [r7, #28]
}
 80135fa:	bf00      	nop
 80135fc:	bf00      	nop
 80135fe:	e7fd      	b.n	80135fc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d103      	bne.n	8013610 <xQueueGiveFromISR+0x5c>
 8013608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801360a:	689b      	ldr	r3, [r3, #8]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d101      	bne.n	8013614 <xQueueGiveFromISR+0x60>
 8013610:	2301      	movs	r3, #1
 8013612:	e000      	b.n	8013616 <xQueueGiveFromISR+0x62>
 8013614:	2300      	movs	r3, #0
 8013616:	2b00      	cmp	r3, #0
 8013618:	d10b      	bne.n	8013632 <xQueueGiveFromISR+0x7e>
	__asm volatile
 801361a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801361e:	f383 8811 	msr	BASEPRI, r3
 8013622:	f3bf 8f6f 	isb	sy
 8013626:	f3bf 8f4f 	dsb	sy
 801362a:	61bb      	str	r3, [r7, #24]
}
 801362c:	bf00      	nop
 801362e:	bf00      	nop
 8013630:	e7fd      	b.n	801362e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013632:	f002 fd89 	bl	8016148 <vPortValidateInterruptPriority>
	__asm volatile
 8013636:	f3ef 8211 	mrs	r2, BASEPRI
 801363a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801363e:	f383 8811 	msr	BASEPRI, r3
 8013642:	f3bf 8f6f 	isb	sy
 8013646:	f3bf 8f4f 	dsb	sy
 801364a:	617a      	str	r2, [r7, #20]
 801364c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801364e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013650:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013656:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801365a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801365c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801365e:	429a      	cmp	r2, r3
 8013660:	d22b      	bcs.n	80136ba <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013664:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013668:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801366c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801366e:	1c5a      	adds	r2, r3, #1
 8013670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013672:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013674:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013678:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801367c:	d112      	bne.n	80136a4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801367e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013682:	2b00      	cmp	r3, #0
 8013684:	d016      	beq.n	80136b4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013688:	3324      	adds	r3, #36	@ 0x24
 801368a:	4618      	mov	r0, r3
 801368c:	f001 f94c 	bl	8014928 <xTaskRemoveFromEventList>
 8013690:	4603      	mov	r3, r0
 8013692:	2b00      	cmp	r3, #0
 8013694:	d00e      	beq.n	80136b4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d00b      	beq.n	80136b4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	2201      	movs	r2, #1
 80136a0:	601a      	str	r2, [r3, #0]
 80136a2:	e007      	b.n	80136b4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80136a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136a8:	3301      	adds	r3, #1
 80136aa:	b2db      	uxtb	r3, r3
 80136ac:	b25a      	sxtb	r2, r3
 80136ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80136b4:	2301      	movs	r3, #1
 80136b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80136b8:	e001      	b.n	80136be <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80136ba:	2300      	movs	r3, #0
 80136bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80136be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136c0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	f383 8811 	msr	BASEPRI, r3
}
 80136c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80136ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80136cc:	4618      	mov	r0, r3
 80136ce:	3738      	adds	r7, #56	@ 0x38
 80136d0:	46bd      	mov	sp, r7
 80136d2:	bd80      	pop	{r7, pc}

080136d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b08c      	sub	sp, #48	@ 0x30
 80136d8:	af00      	add	r7, sp, #0
 80136da:	60f8      	str	r0, [r7, #12]
 80136dc:	60b9      	str	r1, [r7, #8]
 80136de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80136e0:	2300      	movs	r3, #0
 80136e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80136e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d10b      	bne.n	8013706 <xQueueReceive+0x32>
	__asm volatile
 80136ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136f2:	f383 8811 	msr	BASEPRI, r3
 80136f6:	f3bf 8f6f 	isb	sy
 80136fa:	f3bf 8f4f 	dsb	sy
 80136fe:	623b      	str	r3, [r7, #32]
}
 8013700:	bf00      	nop
 8013702:	bf00      	nop
 8013704:	e7fd      	b.n	8013702 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013706:	68bb      	ldr	r3, [r7, #8]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d103      	bne.n	8013714 <xQueueReceive+0x40>
 801370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801370e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013710:	2b00      	cmp	r3, #0
 8013712:	d101      	bne.n	8013718 <xQueueReceive+0x44>
 8013714:	2301      	movs	r3, #1
 8013716:	e000      	b.n	801371a <xQueueReceive+0x46>
 8013718:	2300      	movs	r3, #0
 801371a:	2b00      	cmp	r3, #0
 801371c:	d10b      	bne.n	8013736 <xQueueReceive+0x62>
	__asm volatile
 801371e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013722:	f383 8811 	msr	BASEPRI, r3
 8013726:	f3bf 8f6f 	isb	sy
 801372a:	f3bf 8f4f 	dsb	sy
 801372e:	61fb      	str	r3, [r7, #28]
}
 8013730:	bf00      	nop
 8013732:	bf00      	nop
 8013734:	e7fd      	b.n	8013732 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013736:	f001 fb31 	bl	8014d9c <xTaskGetSchedulerState>
 801373a:	4603      	mov	r3, r0
 801373c:	2b00      	cmp	r3, #0
 801373e:	d102      	bne.n	8013746 <xQueueReceive+0x72>
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d101      	bne.n	801374a <xQueueReceive+0x76>
 8013746:	2301      	movs	r3, #1
 8013748:	e000      	b.n	801374c <xQueueReceive+0x78>
 801374a:	2300      	movs	r3, #0
 801374c:	2b00      	cmp	r3, #0
 801374e:	d10b      	bne.n	8013768 <xQueueReceive+0x94>
	__asm volatile
 8013750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013754:	f383 8811 	msr	BASEPRI, r3
 8013758:	f3bf 8f6f 	isb	sy
 801375c:	f3bf 8f4f 	dsb	sy
 8013760:	61bb      	str	r3, [r7, #24]
}
 8013762:	bf00      	nop
 8013764:	bf00      	nop
 8013766:	e7fd      	b.n	8013764 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013768:	f002 fc0e 	bl	8015f88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801376c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801376e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013770:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013774:	2b00      	cmp	r3, #0
 8013776:	d01f      	beq.n	80137b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013778:	68b9      	ldr	r1, [r7, #8]
 801377a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801377c:	f000 fac4 	bl	8013d08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013782:	1e5a      	subs	r2, r3, #1
 8013784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013786:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801378a:	691b      	ldr	r3, [r3, #16]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d00f      	beq.n	80137b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013792:	3310      	adds	r3, #16
 8013794:	4618      	mov	r0, r3
 8013796:	f001 f8c7 	bl	8014928 <xTaskRemoveFromEventList>
 801379a:	4603      	mov	r3, r0
 801379c:	2b00      	cmp	r3, #0
 801379e:	d007      	beq.n	80137b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80137a0:	4b3c      	ldr	r3, [pc, #240]	@ (8013894 <xQueueReceive+0x1c0>)
 80137a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80137a6:	601a      	str	r2, [r3, #0]
 80137a8:	f3bf 8f4f 	dsb	sy
 80137ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80137b0:	f002 fc1c 	bl	8015fec <vPortExitCritical>
				return pdPASS;
 80137b4:	2301      	movs	r3, #1
 80137b6:	e069      	b.n	801388c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d103      	bne.n	80137c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80137be:	f002 fc15 	bl	8015fec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80137c2:	2300      	movs	r3, #0
 80137c4:	e062      	b.n	801388c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80137c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d106      	bne.n	80137da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80137cc:	f107 0310 	add.w	r3, r7, #16
 80137d0:	4618      	mov	r0, r3
 80137d2:	f001 f971 	bl	8014ab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80137d6:	2301      	movs	r3, #1
 80137d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80137da:	f002 fc07 	bl	8015fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80137de:	f000 fe25 	bl	801442c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80137e2:	f002 fbd1 	bl	8015f88 <vPortEnterCritical>
 80137e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80137ec:	b25b      	sxtb	r3, r3
 80137ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80137f2:	d103      	bne.n	80137fc <xQueueReceive+0x128>
 80137f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137f6:	2200      	movs	r2, #0
 80137f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80137fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013802:	b25b      	sxtb	r3, r3
 8013804:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013808:	d103      	bne.n	8013812 <xQueueReceive+0x13e>
 801380a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801380c:	2200      	movs	r2, #0
 801380e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013812:	f002 fbeb 	bl	8015fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013816:	1d3a      	adds	r2, r7, #4
 8013818:	f107 0310 	add.w	r3, r7, #16
 801381c:	4611      	mov	r1, r2
 801381e:	4618      	mov	r0, r3
 8013820:	f001 f960 	bl	8014ae4 <xTaskCheckForTimeOut>
 8013824:	4603      	mov	r3, r0
 8013826:	2b00      	cmp	r3, #0
 8013828:	d123      	bne.n	8013872 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801382a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801382c:	f000 fae4 	bl	8013df8 <prvIsQueueEmpty>
 8013830:	4603      	mov	r3, r0
 8013832:	2b00      	cmp	r3, #0
 8013834:	d017      	beq.n	8013866 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013838:	3324      	adds	r3, #36	@ 0x24
 801383a:	687a      	ldr	r2, [r7, #4]
 801383c:	4611      	mov	r1, r2
 801383e:	4618      	mov	r0, r3
 8013840:	f000 ffe2 	bl	8014808 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013844:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013846:	f000 fa85 	bl	8013d54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801384a:	f000 fdfd 	bl	8014448 <xTaskResumeAll>
 801384e:	4603      	mov	r3, r0
 8013850:	2b00      	cmp	r3, #0
 8013852:	d189      	bne.n	8013768 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8013854:	4b0f      	ldr	r3, [pc, #60]	@ (8013894 <xQueueReceive+0x1c0>)
 8013856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801385a:	601a      	str	r2, [r3, #0]
 801385c:	f3bf 8f4f 	dsb	sy
 8013860:	f3bf 8f6f 	isb	sy
 8013864:	e780      	b.n	8013768 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013866:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013868:	f000 fa74 	bl	8013d54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801386c:	f000 fdec 	bl	8014448 <xTaskResumeAll>
 8013870:	e77a      	b.n	8013768 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013872:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013874:	f000 fa6e 	bl	8013d54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013878:	f000 fde6 	bl	8014448 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801387c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801387e:	f000 fabb 	bl	8013df8 <prvIsQueueEmpty>
 8013882:	4603      	mov	r3, r0
 8013884:	2b00      	cmp	r3, #0
 8013886:	f43f af6f 	beq.w	8013768 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801388a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801388c:	4618      	mov	r0, r3
 801388e:	3730      	adds	r7, #48	@ 0x30
 8013890:	46bd      	mov	sp, r7
 8013892:	bd80      	pop	{r7, pc}
 8013894:	e000ed04 	.word	0xe000ed04

08013898 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b08e      	sub	sp, #56	@ 0x38
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
 80138a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80138a2:	2300      	movs	r3, #0
 80138a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80138aa:	2300      	movs	r3, #0
 80138ac:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80138ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d10b      	bne.n	80138cc <xQueueSemaphoreTake+0x34>
	__asm volatile
 80138b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138b8:	f383 8811 	msr	BASEPRI, r3
 80138bc:	f3bf 8f6f 	isb	sy
 80138c0:	f3bf 8f4f 	dsb	sy
 80138c4:	623b      	str	r3, [r7, #32]
}
 80138c6:	bf00      	nop
 80138c8:	bf00      	nop
 80138ca:	e7fd      	b.n	80138c8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80138cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d00b      	beq.n	80138ec <xQueueSemaphoreTake+0x54>
	__asm volatile
 80138d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138d8:	f383 8811 	msr	BASEPRI, r3
 80138dc:	f3bf 8f6f 	isb	sy
 80138e0:	f3bf 8f4f 	dsb	sy
 80138e4:	61fb      	str	r3, [r7, #28]
}
 80138e6:	bf00      	nop
 80138e8:	bf00      	nop
 80138ea:	e7fd      	b.n	80138e8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80138ec:	f001 fa56 	bl	8014d9c <xTaskGetSchedulerState>
 80138f0:	4603      	mov	r3, r0
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d102      	bne.n	80138fc <xQueueSemaphoreTake+0x64>
 80138f6:	683b      	ldr	r3, [r7, #0]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d101      	bne.n	8013900 <xQueueSemaphoreTake+0x68>
 80138fc:	2301      	movs	r3, #1
 80138fe:	e000      	b.n	8013902 <xQueueSemaphoreTake+0x6a>
 8013900:	2300      	movs	r3, #0
 8013902:	2b00      	cmp	r3, #0
 8013904:	d10b      	bne.n	801391e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8013906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801390a:	f383 8811 	msr	BASEPRI, r3
 801390e:	f3bf 8f6f 	isb	sy
 8013912:	f3bf 8f4f 	dsb	sy
 8013916:	61bb      	str	r3, [r7, #24]
}
 8013918:	bf00      	nop
 801391a:	bf00      	nop
 801391c:	e7fd      	b.n	801391a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801391e:	f002 fb33 	bl	8015f88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013926:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801392a:	2b00      	cmp	r3, #0
 801392c:	d024      	beq.n	8013978 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801392e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013930:	1e5a      	subs	r2, r3, #1
 8013932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013934:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d104      	bne.n	8013948 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801393e:	f001 fbbf 	bl	80150c0 <pvTaskIncrementMutexHeldCount>
 8013942:	4602      	mov	r2, r0
 8013944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013946:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801394a:	691b      	ldr	r3, [r3, #16]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d00f      	beq.n	8013970 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013952:	3310      	adds	r3, #16
 8013954:	4618      	mov	r0, r3
 8013956:	f000 ffe7 	bl	8014928 <xTaskRemoveFromEventList>
 801395a:	4603      	mov	r3, r0
 801395c:	2b00      	cmp	r3, #0
 801395e:	d007      	beq.n	8013970 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013960:	4b54      	ldr	r3, [pc, #336]	@ (8013ab4 <xQueueSemaphoreTake+0x21c>)
 8013962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013966:	601a      	str	r2, [r3, #0]
 8013968:	f3bf 8f4f 	dsb	sy
 801396c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013970:	f002 fb3c 	bl	8015fec <vPortExitCritical>
				return pdPASS;
 8013974:	2301      	movs	r3, #1
 8013976:	e098      	b.n	8013aaa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d112      	bne.n	80139a4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801397e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013980:	2b00      	cmp	r3, #0
 8013982:	d00b      	beq.n	801399c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8013984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013988:	f383 8811 	msr	BASEPRI, r3
 801398c:	f3bf 8f6f 	isb	sy
 8013990:	f3bf 8f4f 	dsb	sy
 8013994:	617b      	str	r3, [r7, #20]
}
 8013996:	bf00      	nop
 8013998:	bf00      	nop
 801399a:	e7fd      	b.n	8013998 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801399c:	f002 fb26 	bl	8015fec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80139a0:	2300      	movs	r3, #0
 80139a2:	e082      	b.n	8013aaa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80139a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d106      	bne.n	80139b8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80139aa:	f107 030c 	add.w	r3, r7, #12
 80139ae:	4618      	mov	r0, r3
 80139b0:	f001 f882 	bl	8014ab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80139b4:	2301      	movs	r3, #1
 80139b6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80139b8:	f002 fb18 	bl	8015fec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80139bc:	f000 fd36 	bl	801442c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80139c0:	f002 fae2 	bl	8015f88 <vPortEnterCritical>
 80139c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80139ca:	b25b      	sxtb	r3, r3
 80139cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80139d0:	d103      	bne.n	80139da <xQueueSemaphoreTake+0x142>
 80139d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139d4:	2200      	movs	r2, #0
 80139d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80139da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80139e0:	b25b      	sxtb	r3, r3
 80139e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80139e6:	d103      	bne.n	80139f0 <xQueueSemaphoreTake+0x158>
 80139e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ea:	2200      	movs	r2, #0
 80139ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80139f0:	f002 fafc 	bl	8015fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80139f4:	463a      	mov	r2, r7
 80139f6:	f107 030c 	add.w	r3, r7, #12
 80139fa:	4611      	mov	r1, r2
 80139fc:	4618      	mov	r0, r3
 80139fe:	f001 f871 	bl	8014ae4 <xTaskCheckForTimeOut>
 8013a02:	4603      	mov	r3, r0
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d132      	bne.n	8013a6e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013a08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013a0a:	f000 f9f5 	bl	8013df8 <prvIsQueueEmpty>
 8013a0e:	4603      	mov	r3, r0
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d026      	beq.n	8013a62 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d109      	bne.n	8013a30 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8013a1c:	f002 fab4 	bl	8015f88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a22:	689b      	ldr	r3, [r3, #8]
 8013a24:	4618      	mov	r0, r3
 8013a26:	f001 f9d7 	bl	8014dd8 <xTaskPriorityInherit>
 8013a2a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8013a2c:	f002 fade 	bl	8015fec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a32:	3324      	adds	r3, #36	@ 0x24
 8013a34:	683a      	ldr	r2, [r7, #0]
 8013a36:	4611      	mov	r1, r2
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f000 fee5 	bl	8014808 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013a3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013a40:	f000 f988 	bl	8013d54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013a44:	f000 fd00 	bl	8014448 <xTaskResumeAll>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	f47f af67 	bne.w	801391e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8013a50:	4b18      	ldr	r3, [pc, #96]	@ (8013ab4 <xQueueSemaphoreTake+0x21c>)
 8013a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a56:	601a      	str	r2, [r3, #0]
 8013a58:	f3bf 8f4f 	dsb	sy
 8013a5c:	f3bf 8f6f 	isb	sy
 8013a60:	e75d      	b.n	801391e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013a62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013a64:	f000 f976 	bl	8013d54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013a68:	f000 fcee 	bl	8014448 <xTaskResumeAll>
 8013a6c:	e757      	b.n	801391e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013a6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013a70:	f000 f970 	bl	8013d54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013a74:	f000 fce8 	bl	8014448 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013a78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013a7a:	f000 f9bd 	bl	8013df8 <prvIsQueueEmpty>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	f43f af4c 	beq.w	801391e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d00d      	beq.n	8013aa8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8013a8c:	f002 fa7c 	bl	8015f88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013a90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013a92:	f000 f8b7 	bl	8013c04 <prvGetDisinheritPriorityAfterTimeout>
 8013a96:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a9a:	689b      	ldr	r3, [r3, #8]
 8013a9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f001 fa72 	bl	8014f88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013aa4:	f002 faa2 	bl	8015fec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013aa8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	3738      	adds	r7, #56	@ 0x38
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bd80      	pop	{r7, pc}
 8013ab2:	bf00      	nop
 8013ab4:	e000ed04 	.word	0xe000ed04

08013ab8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b08e      	sub	sp, #56	@ 0x38
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	60f8      	str	r0, [r7, #12]
 8013ac0:	60b9      	str	r1, [r7, #8]
 8013ac2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d10b      	bne.n	8013ae6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8013ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ad2:	f383 8811 	msr	BASEPRI, r3
 8013ad6:	f3bf 8f6f 	isb	sy
 8013ada:	f3bf 8f4f 	dsb	sy
 8013ade:	623b      	str	r3, [r7, #32]
}
 8013ae0:	bf00      	nop
 8013ae2:	bf00      	nop
 8013ae4:	e7fd      	b.n	8013ae2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013ae6:	68bb      	ldr	r3, [r7, #8]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d103      	bne.n	8013af4 <xQueueReceiveFromISR+0x3c>
 8013aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d101      	bne.n	8013af8 <xQueueReceiveFromISR+0x40>
 8013af4:	2301      	movs	r3, #1
 8013af6:	e000      	b.n	8013afa <xQueueReceiveFromISR+0x42>
 8013af8:	2300      	movs	r3, #0
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d10b      	bne.n	8013b16 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8013afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b02:	f383 8811 	msr	BASEPRI, r3
 8013b06:	f3bf 8f6f 	isb	sy
 8013b0a:	f3bf 8f4f 	dsb	sy
 8013b0e:	61fb      	str	r3, [r7, #28]
}
 8013b10:	bf00      	nop
 8013b12:	bf00      	nop
 8013b14:	e7fd      	b.n	8013b12 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013b16:	f002 fb17 	bl	8016148 <vPortValidateInterruptPriority>
	__asm volatile
 8013b1a:	f3ef 8211 	mrs	r2, BASEPRI
 8013b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b22:	f383 8811 	msr	BASEPRI, r3
 8013b26:	f3bf 8f6f 	isb	sy
 8013b2a:	f3bf 8f4f 	dsb	sy
 8013b2e:	61ba      	str	r2, [r7, #24]
 8013b30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013b32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b3a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d02f      	beq.n	8013ba2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013b48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013b4c:	68b9      	ldr	r1, [r7, #8]
 8013b4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013b50:	f000 f8da 	bl	8013d08 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b56:	1e5a      	subs	r2, r3, #1
 8013b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b5a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013b5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013b60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013b64:	d112      	bne.n	8013b8c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b68:	691b      	ldr	r3, [r3, #16]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d016      	beq.n	8013b9c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b70:	3310      	adds	r3, #16
 8013b72:	4618      	mov	r0, r3
 8013b74:	f000 fed8 	bl	8014928 <xTaskRemoveFromEventList>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d00e      	beq.n	8013b9c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d00b      	beq.n	8013b9c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	2201      	movs	r2, #1
 8013b88:	601a      	str	r2, [r3, #0]
 8013b8a:	e007      	b.n	8013b9c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013b90:	3301      	adds	r3, #1
 8013b92:	b2db      	uxtb	r3, r3
 8013b94:	b25a      	sxtb	r2, r3
 8013b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8013b9c:	2301      	movs	r3, #1
 8013b9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013ba0:	e001      	b.n	8013ba6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	637b      	str	r3, [r7, #52]	@ 0x34
 8013ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ba8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013baa:	693b      	ldr	r3, [r7, #16]
 8013bac:	f383 8811 	msr	BASEPRI, r3
}
 8013bb0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	3738      	adds	r7, #56	@ 0x38
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bd80      	pop	{r7, pc}

08013bbc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b084      	sub	sp, #16
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d10b      	bne.n	8013be6 <vQueueDelete+0x2a>
	__asm volatile
 8013bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bd2:	f383 8811 	msr	BASEPRI, r3
 8013bd6:	f3bf 8f6f 	isb	sy
 8013bda:	f3bf 8f4f 	dsb	sy
 8013bde:	60bb      	str	r3, [r7, #8]
}
 8013be0:	bf00      	nop
 8013be2:	bf00      	nop
 8013be4:	e7fd      	b.n	8013be2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013be6:	68f8      	ldr	r0, [r7, #12]
 8013be8:	f000 f95e 	bl	8013ea8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d102      	bne.n	8013bfc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8013bf6:	68f8      	ldr	r0, [r7, #12]
 8013bf8:	f002 fbb6 	bl	8016368 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013bfc:	bf00      	nop
 8013bfe:	3710      	adds	r7, #16
 8013c00:	46bd      	mov	sp, r7
 8013c02:	bd80      	pop	{r7, pc}

08013c04 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013c04:	b480      	push	{r7}
 8013c06:	b085      	sub	sp, #20
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d006      	beq.n	8013c22 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8013c1e:	60fb      	str	r3, [r7, #12]
 8013c20:	e001      	b.n	8013c26 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013c22:	2300      	movs	r3, #0
 8013c24:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013c26:	68fb      	ldr	r3, [r7, #12]
	}
 8013c28:	4618      	mov	r0, r3
 8013c2a:	3714      	adds	r7, #20
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c32:	4770      	bx	lr

08013c34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013c34:	b580      	push	{r7, lr}
 8013c36:	b086      	sub	sp, #24
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	60f8      	str	r0, [r7, #12]
 8013c3c:	60b9      	str	r1, [r7, #8]
 8013c3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013c40:	2300      	movs	r3, #0
 8013c42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d10d      	bne.n	8013c6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d14d      	bne.n	8013cf6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	689b      	ldr	r3, [r3, #8]
 8013c5e:	4618      	mov	r0, r3
 8013c60:	f001 f922 	bl	8014ea8 <xTaskPriorityDisinherit>
 8013c64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	2200      	movs	r2, #0
 8013c6a:	609a      	str	r2, [r3, #8]
 8013c6c:	e043      	b.n	8013cf6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d119      	bne.n	8013ca8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	6858      	ldr	r0, [r3, #4]
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c7c:	461a      	mov	r2, r3
 8013c7e:	68b9      	ldr	r1, [r7, #8]
 8013c80:	f003 f91d 	bl	8016ebe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	685a      	ldr	r2, [r3, #4]
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c8c:	441a      	add	r2, r3
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	685a      	ldr	r2, [r3, #4]
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	689b      	ldr	r3, [r3, #8]
 8013c9a:	429a      	cmp	r2, r3
 8013c9c:	d32b      	bcc.n	8013cf6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	681a      	ldr	r2, [r3, #0]
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	605a      	str	r2, [r3, #4]
 8013ca6:	e026      	b.n	8013cf6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	68d8      	ldr	r0, [r3, #12]
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013cb0:	461a      	mov	r2, r3
 8013cb2:	68b9      	ldr	r1, [r7, #8]
 8013cb4:	f003 f903 	bl	8016ebe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	68da      	ldr	r2, [r3, #12]
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013cc0:	425b      	negs	r3, r3
 8013cc2:	441a      	add	r2, r3
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	68da      	ldr	r2, [r3, #12]
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	429a      	cmp	r2, r3
 8013cd2:	d207      	bcs.n	8013ce4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	689a      	ldr	r2, [r3, #8]
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013cdc:	425b      	negs	r3, r3
 8013cde:	441a      	add	r2, r3
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2b02      	cmp	r3, #2
 8013ce8:	d105      	bne.n	8013cf6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013cea:	693b      	ldr	r3, [r7, #16]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d002      	beq.n	8013cf6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013cf0:	693b      	ldr	r3, [r7, #16]
 8013cf2:	3b01      	subs	r3, #1
 8013cf4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013cf6:	693b      	ldr	r3, [r7, #16]
 8013cf8:	1c5a      	adds	r2, r3, #1
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013cfe:	697b      	ldr	r3, [r7, #20]
}
 8013d00:	4618      	mov	r0, r3
 8013d02:	3718      	adds	r7, #24
 8013d04:	46bd      	mov	sp, r7
 8013d06:	bd80      	pop	{r7, pc}

08013d08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b082      	sub	sp, #8
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
 8013d10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d018      	beq.n	8013d4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	68da      	ldr	r2, [r3, #12]
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d22:	441a      	add	r2, r3
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	68da      	ldr	r2, [r3, #12]
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	689b      	ldr	r3, [r3, #8]
 8013d30:	429a      	cmp	r2, r3
 8013d32:	d303      	bcc.n	8013d3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	681a      	ldr	r2, [r3, #0]
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	68d9      	ldr	r1, [r3, #12]
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d44:	461a      	mov	r2, r3
 8013d46:	6838      	ldr	r0, [r7, #0]
 8013d48:	f003 f8b9 	bl	8016ebe <memcpy>
	}
}
 8013d4c:	bf00      	nop
 8013d4e:	3708      	adds	r7, #8
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd80      	pop	{r7, pc}

08013d54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b084      	sub	sp, #16
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013d5c:	f002 f914 	bl	8015f88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013d66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013d68:	e011      	b.n	8013d8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d012      	beq.n	8013d98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	3324      	adds	r3, #36	@ 0x24
 8013d76:	4618      	mov	r0, r3
 8013d78:	f000 fdd6 	bl	8014928 <xTaskRemoveFromEventList>
 8013d7c:	4603      	mov	r3, r0
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d001      	beq.n	8013d86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013d82:	f000 ff13 	bl	8014bac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013d86:	7bfb      	ldrb	r3, [r7, #15]
 8013d88:	3b01      	subs	r3, #1
 8013d8a:	b2db      	uxtb	r3, r3
 8013d8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	dce9      	bgt.n	8013d6a <prvUnlockQueue+0x16>
 8013d96:	e000      	b.n	8013d9a <prvUnlockQueue+0x46>
					break;
 8013d98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	22ff      	movs	r2, #255	@ 0xff
 8013d9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013da2:	f002 f923 	bl	8015fec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013da6:	f002 f8ef 	bl	8015f88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013db0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013db2:	e011      	b.n	8013dd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	691b      	ldr	r3, [r3, #16]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d012      	beq.n	8013de2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	3310      	adds	r3, #16
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f000 fdb1 	bl	8014928 <xTaskRemoveFromEventList>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d001      	beq.n	8013dd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013dcc:	f000 feee 	bl	8014bac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013dd0:	7bbb      	ldrb	r3, [r7, #14]
 8013dd2:	3b01      	subs	r3, #1
 8013dd4:	b2db      	uxtb	r3, r3
 8013dd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013dd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	dce9      	bgt.n	8013db4 <prvUnlockQueue+0x60>
 8013de0:	e000      	b.n	8013de4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013de2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	22ff      	movs	r2, #255	@ 0xff
 8013de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013dec:	f002 f8fe 	bl	8015fec <vPortExitCritical>
}
 8013df0:	bf00      	nop
 8013df2:	3710      	adds	r7, #16
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}

08013df8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b084      	sub	sp, #16
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013e00:	f002 f8c2 	bl	8015f88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d102      	bne.n	8013e12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013e0c:	2301      	movs	r3, #1
 8013e0e:	60fb      	str	r3, [r7, #12]
 8013e10:	e001      	b.n	8013e16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013e12:	2300      	movs	r3, #0
 8013e14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013e16:	f002 f8e9 	bl	8015fec <vPortExitCritical>

	return xReturn;
 8013e1a:	68fb      	ldr	r3, [r7, #12]
}
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	3710      	adds	r7, #16
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd80      	pop	{r7, pc}

08013e24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b084      	sub	sp, #16
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013e2c:	f002 f8ac 	bl	8015f88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e38:	429a      	cmp	r2, r3
 8013e3a:	d102      	bne.n	8013e42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	60fb      	str	r3, [r7, #12]
 8013e40:	e001      	b.n	8013e46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013e42:	2300      	movs	r3, #0
 8013e44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013e46:	f002 f8d1 	bl	8015fec <vPortExitCritical>

	return xReturn;
 8013e4a:	68fb      	ldr	r3, [r7, #12]
}
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	3710      	adds	r7, #16
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}

08013e54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013e54:	b480      	push	{r7}
 8013e56:	b085      	sub	sp, #20
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
 8013e5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013e5e:	2300      	movs	r3, #0
 8013e60:	60fb      	str	r3, [r7, #12]
 8013e62:	e014      	b.n	8013e8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013e64:	4a0f      	ldr	r2, [pc, #60]	@ (8013ea4 <vQueueAddToRegistry+0x50>)
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d10b      	bne.n	8013e88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013e70:	490c      	ldr	r1, [pc, #48]	@ (8013ea4 <vQueueAddToRegistry+0x50>)
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	683a      	ldr	r2, [r7, #0]
 8013e76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8013ea4 <vQueueAddToRegistry+0x50>)
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	00db      	lsls	r3, r3, #3
 8013e80:	4413      	add	r3, r2
 8013e82:	687a      	ldr	r2, [r7, #4]
 8013e84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013e86:	e006      	b.n	8013e96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	3301      	adds	r3, #1
 8013e8c:	60fb      	str	r3, [r7, #12]
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	2b07      	cmp	r3, #7
 8013e92:	d9e7      	bls.n	8013e64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013e94:	bf00      	nop
 8013e96:	bf00      	nop
 8013e98:	3714      	adds	r7, #20
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea0:	4770      	bx	lr
 8013ea2:	bf00      	nop
 8013ea4:	240011d0 	.word	0x240011d0

08013ea8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013ea8:	b480      	push	{r7}
 8013eaa:	b085      	sub	sp, #20
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	60fb      	str	r3, [r7, #12]
 8013eb4:	e016      	b.n	8013ee4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013eb6:	4a10      	ldr	r2, [pc, #64]	@ (8013ef8 <vQueueUnregisterQueue+0x50>)
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	00db      	lsls	r3, r3, #3
 8013ebc:	4413      	add	r3, r2
 8013ebe:	685b      	ldr	r3, [r3, #4]
 8013ec0:	687a      	ldr	r2, [r7, #4]
 8013ec2:	429a      	cmp	r2, r3
 8013ec4:	d10b      	bne.n	8013ede <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8013ef8 <vQueueUnregisterQueue+0x50>)
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	2100      	movs	r1, #0
 8013ecc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013ed0:	4a09      	ldr	r2, [pc, #36]	@ (8013ef8 <vQueueUnregisterQueue+0x50>)
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	00db      	lsls	r3, r3, #3
 8013ed6:	4413      	add	r3, r2
 8013ed8:	2200      	movs	r2, #0
 8013eda:	605a      	str	r2, [r3, #4]
				break;
 8013edc:	e006      	b.n	8013eec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	3301      	adds	r3, #1
 8013ee2:	60fb      	str	r3, [r7, #12]
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	2b07      	cmp	r3, #7
 8013ee8:	d9e5      	bls.n	8013eb6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013eea:	bf00      	nop
 8013eec:	bf00      	nop
 8013eee:	3714      	adds	r7, #20
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef6:	4770      	bx	lr
 8013ef8:	240011d0 	.word	0x240011d0

08013efc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b086      	sub	sp, #24
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	60f8      	str	r0, [r7, #12]
 8013f04:	60b9      	str	r1, [r7, #8]
 8013f06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013f0c:	f002 f83c 	bl	8015f88 <vPortEnterCritical>
 8013f10:	697b      	ldr	r3, [r7, #20]
 8013f12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013f16:	b25b      	sxtb	r3, r3
 8013f18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013f1c:	d103      	bne.n	8013f26 <vQueueWaitForMessageRestricted+0x2a>
 8013f1e:	697b      	ldr	r3, [r7, #20]
 8013f20:	2200      	movs	r2, #0
 8013f22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013f26:	697b      	ldr	r3, [r7, #20]
 8013f28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013f2c:	b25b      	sxtb	r3, r3
 8013f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013f32:	d103      	bne.n	8013f3c <vQueueWaitForMessageRestricted+0x40>
 8013f34:	697b      	ldr	r3, [r7, #20]
 8013f36:	2200      	movs	r2, #0
 8013f38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013f3c:	f002 f856 	bl	8015fec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013f40:	697b      	ldr	r3, [r7, #20]
 8013f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d106      	bne.n	8013f56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013f48:	697b      	ldr	r3, [r7, #20]
 8013f4a:	3324      	adds	r3, #36	@ 0x24
 8013f4c:	687a      	ldr	r2, [r7, #4]
 8013f4e:	68b9      	ldr	r1, [r7, #8]
 8013f50:	4618      	mov	r0, r3
 8013f52:	f000 fcbd 	bl	80148d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013f56:	6978      	ldr	r0, [r7, #20]
 8013f58:	f7ff fefc 	bl	8013d54 <prvUnlockQueue>
	}
 8013f5c:	bf00      	nop
 8013f5e:	3718      	adds	r7, #24
 8013f60:	46bd      	mov	sp, r7
 8013f62:	bd80      	pop	{r7, pc}

08013f64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b08e      	sub	sp, #56	@ 0x38
 8013f68:	af04      	add	r7, sp, #16
 8013f6a:	60f8      	str	r0, [r7, #12]
 8013f6c:	60b9      	str	r1, [r7, #8]
 8013f6e:	607a      	str	r2, [r7, #4]
 8013f70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d10b      	bne.n	8013f90 <xTaskCreateStatic+0x2c>
	__asm volatile
 8013f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f7c:	f383 8811 	msr	BASEPRI, r3
 8013f80:	f3bf 8f6f 	isb	sy
 8013f84:	f3bf 8f4f 	dsb	sy
 8013f88:	623b      	str	r3, [r7, #32]
}
 8013f8a:	bf00      	nop
 8013f8c:	bf00      	nop
 8013f8e:	e7fd      	b.n	8013f8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d10b      	bne.n	8013fae <xTaskCreateStatic+0x4a>
	__asm volatile
 8013f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f9a:	f383 8811 	msr	BASEPRI, r3
 8013f9e:	f3bf 8f6f 	isb	sy
 8013fa2:	f3bf 8f4f 	dsb	sy
 8013fa6:	61fb      	str	r3, [r7, #28]
}
 8013fa8:	bf00      	nop
 8013faa:	bf00      	nop
 8013fac:	e7fd      	b.n	8013faa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013fae:	23a8      	movs	r3, #168	@ 0xa8
 8013fb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013fb2:	693b      	ldr	r3, [r7, #16]
 8013fb4:	2ba8      	cmp	r3, #168	@ 0xa8
 8013fb6:	d00b      	beq.n	8013fd0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8013fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fbc:	f383 8811 	msr	BASEPRI, r3
 8013fc0:	f3bf 8f6f 	isb	sy
 8013fc4:	f3bf 8f4f 	dsb	sy
 8013fc8:	61bb      	str	r3, [r7, #24]
}
 8013fca:	bf00      	nop
 8013fcc:	bf00      	nop
 8013fce:	e7fd      	b.n	8013fcc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013fd0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d01e      	beq.n	8014016 <xTaskCreateStatic+0xb2>
 8013fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d01b      	beq.n	8014016 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fe0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fe4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013fe6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fea:	2202      	movs	r2, #2
 8013fec:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	9303      	str	r3, [sp, #12]
 8013ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ff6:	9302      	str	r3, [sp, #8]
 8013ff8:	f107 0314 	add.w	r3, r7, #20
 8013ffc:	9301      	str	r3, [sp, #4]
 8013ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014000:	9300      	str	r3, [sp, #0]
 8014002:	683b      	ldr	r3, [r7, #0]
 8014004:	687a      	ldr	r2, [r7, #4]
 8014006:	68b9      	ldr	r1, [r7, #8]
 8014008:	68f8      	ldr	r0, [r7, #12]
 801400a:	f000 f851 	bl	80140b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801400e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014010:	f000 f8f6 	bl	8014200 <prvAddNewTaskToReadyList>
 8014014:	e001      	b.n	801401a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8014016:	2300      	movs	r3, #0
 8014018:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801401a:	697b      	ldr	r3, [r7, #20]
	}
 801401c:	4618      	mov	r0, r3
 801401e:	3728      	adds	r7, #40	@ 0x28
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}

08014024 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014024:	b580      	push	{r7, lr}
 8014026:	b08c      	sub	sp, #48	@ 0x30
 8014028:	af04      	add	r7, sp, #16
 801402a:	60f8      	str	r0, [r7, #12]
 801402c:	60b9      	str	r1, [r7, #8]
 801402e:	603b      	str	r3, [r7, #0]
 8014030:	4613      	mov	r3, r2
 8014032:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014034:	88fb      	ldrh	r3, [r7, #6]
 8014036:	009b      	lsls	r3, r3, #2
 8014038:	4618      	mov	r0, r3
 801403a:	f002 f8c7 	bl	80161cc <pvPortMalloc>
 801403e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d00e      	beq.n	8014064 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014046:	20a8      	movs	r0, #168	@ 0xa8
 8014048:	f002 f8c0 	bl	80161cc <pvPortMalloc>
 801404c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801404e:	69fb      	ldr	r3, [r7, #28]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d003      	beq.n	801405c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014054:	69fb      	ldr	r3, [r7, #28]
 8014056:	697a      	ldr	r2, [r7, #20]
 8014058:	631a      	str	r2, [r3, #48]	@ 0x30
 801405a:	e005      	b.n	8014068 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801405c:	6978      	ldr	r0, [r7, #20]
 801405e:	f002 f983 	bl	8016368 <vPortFree>
 8014062:	e001      	b.n	8014068 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014064:	2300      	movs	r3, #0
 8014066:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014068:	69fb      	ldr	r3, [r7, #28]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d017      	beq.n	801409e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801406e:	69fb      	ldr	r3, [r7, #28]
 8014070:	2200      	movs	r2, #0
 8014072:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014076:	88fa      	ldrh	r2, [r7, #6]
 8014078:	2300      	movs	r3, #0
 801407a:	9303      	str	r3, [sp, #12]
 801407c:	69fb      	ldr	r3, [r7, #28]
 801407e:	9302      	str	r3, [sp, #8]
 8014080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014082:	9301      	str	r3, [sp, #4]
 8014084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014086:	9300      	str	r3, [sp, #0]
 8014088:	683b      	ldr	r3, [r7, #0]
 801408a:	68b9      	ldr	r1, [r7, #8]
 801408c:	68f8      	ldr	r0, [r7, #12]
 801408e:	f000 f80f 	bl	80140b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014092:	69f8      	ldr	r0, [r7, #28]
 8014094:	f000 f8b4 	bl	8014200 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014098:	2301      	movs	r3, #1
 801409a:	61bb      	str	r3, [r7, #24]
 801409c:	e002      	b.n	80140a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801409e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80140a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80140a4:	69bb      	ldr	r3, [r7, #24]
	}
 80140a6:	4618      	mov	r0, r3
 80140a8:	3720      	adds	r7, #32
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd80      	pop	{r7, pc}
	...

080140b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b088      	sub	sp, #32
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	60f8      	str	r0, [r7, #12]
 80140b8:	60b9      	str	r1, [r7, #8]
 80140ba:	607a      	str	r2, [r7, #4]
 80140bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80140be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140c0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	009b      	lsls	r3, r3, #2
 80140c6:	461a      	mov	r2, r3
 80140c8:	21a5      	movs	r1, #165	@ 0xa5
 80140ca:	f002 fe0f 	bl	8016cec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80140ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80140d2:	6879      	ldr	r1, [r7, #4]
 80140d4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80140d8:	440b      	add	r3, r1
 80140da:	009b      	lsls	r3, r3, #2
 80140dc:	4413      	add	r3, r2
 80140de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80140e0:	69bb      	ldr	r3, [r7, #24]
 80140e2:	f023 0307 	bic.w	r3, r3, #7
 80140e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80140e8:	69bb      	ldr	r3, [r7, #24]
 80140ea:	f003 0307 	and.w	r3, r3, #7
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d00b      	beq.n	801410a <prvInitialiseNewTask+0x5a>
	__asm volatile
 80140f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140f6:	f383 8811 	msr	BASEPRI, r3
 80140fa:	f3bf 8f6f 	isb	sy
 80140fe:	f3bf 8f4f 	dsb	sy
 8014102:	617b      	str	r3, [r7, #20]
}
 8014104:	bf00      	nop
 8014106:	bf00      	nop
 8014108:	e7fd      	b.n	8014106 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801410a:	68bb      	ldr	r3, [r7, #8]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d01f      	beq.n	8014150 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014110:	2300      	movs	r3, #0
 8014112:	61fb      	str	r3, [r7, #28]
 8014114:	e012      	b.n	801413c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014116:	68ba      	ldr	r2, [r7, #8]
 8014118:	69fb      	ldr	r3, [r7, #28]
 801411a:	4413      	add	r3, r2
 801411c:	7819      	ldrb	r1, [r3, #0]
 801411e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014120:	69fb      	ldr	r3, [r7, #28]
 8014122:	4413      	add	r3, r2
 8014124:	3334      	adds	r3, #52	@ 0x34
 8014126:	460a      	mov	r2, r1
 8014128:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801412a:	68ba      	ldr	r2, [r7, #8]
 801412c:	69fb      	ldr	r3, [r7, #28]
 801412e:	4413      	add	r3, r2
 8014130:	781b      	ldrb	r3, [r3, #0]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d006      	beq.n	8014144 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014136:	69fb      	ldr	r3, [r7, #28]
 8014138:	3301      	adds	r3, #1
 801413a:	61fb      	str	r3, [r7, #28]
 801413c:	69fb      	ldr	r3, [r7, #28]
 801413e:	2b0f      	cmp	r3, #15
 8014140:	d9e9      	bls.n	8014116 <prvInitialiseNewTask+0x66>
 8014142:	e000      	b.n	8014146 <prvInitialiseNewTask+0x96>
			{
				break;
 8014144:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014148:	2200      	movs	r2, #0
 801414a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801414e:	e003      	b.n	8014158 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014152:	2200      	movs	r2, #0
 8014154:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801415a:	2b37      	cmp	r3, #55	@ 0x37
 801415c:	d901      	bls.n	8014162 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801415e:	2337      	movs	r3, #55	@ 0x37
 8014160:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014164:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014166:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801416a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801416c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801416e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014170:	2200      	movs	r2, #0
 8014172:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014176:	3304      	adds	r3, #4
 8014178:	4618      	mov	r0, r3
 801417a:	f7fe fe33 	bl	8012de4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801417e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014180:	3318      	adds	r3, #24
 8014182:	4618      	mov	r0, r3
 8014184:	f7fe fe2e 	bl	8012de4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801418a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801418c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801418e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014190:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014196:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801419a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801419c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801419e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141a0:	2200      	movs	r2, #0
 80141a2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80141a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141a8:	2200      	movs	r2, #0
 80141aa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80141ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141b0:	3354      	adds	r3, #84	@ 0x54
 80141b2:	224c      	movs	r2, #76	@ 0x4c
 80141b4:	2100      	movs	r1, #0
 80141b6:	4618      	mov	r0, r3
 80141b8:	f002 fd98 	bl	8016cec <memset>
 80141bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141be:	4a0d      	ldr	r2, [pc, #52]	@ (80141f4 <prvInitialiseNewTask+0x144>)
 80141c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80141c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141c4:	4a0c      	ldr	r2, [pc, #48]	@ (80141f8 <prvInitialiseNewTask+0x148>)
 80141c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80141c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141ca:	4a0c      	ldr	r2, [pc, #48]	@ (80141fc <prvInitialiseNewTask+0x14c>)
 80141cc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80141ce:	683a      	ldr	r2, [r7, #0]
 80141d0:	68f9      	ldr	r1, [r7, #12]
 80141d2:	69b8      	ldr	r0, [r7, #24]
 80141d4:	f001 fda8 	bl	8015d28 <pxPortInitialiseStack>
 80141d8:	4602      	mov	r2, r0
 80141da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80141de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d002      	beq.n	80141ea <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80141e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80141e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80141ea:	bf00      	nop
 80141ec:	3720      	adds	r7, #32
 80141ee:	46bd      	mov	sp, r7
 80141f0:	bd80      	pop	{r7, pc}
 80141f2:	bf00      	nop
 80141f4:	2400546c 	.word	0x2400546c
 80141f8:	240054d4 	.word	0x240054d4
 80141fc:	2400553c 	.word	0x2400553c

08014200 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b082      	sub	sp, #8
 8014204:	af00      	add	r7, sp, #0
 8014206:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014208:	f001 febe 	bl	8015f88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801420c:	4b2d      	ldr	r3, [pc, #180]	@ (80142c4 <prvAddNewTaskToReadyList+0xc4>)
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	3301      	adds	r3, #1
 8014212:	4a2c      	ldr	r2, [pc, #176]	@ (80142c4 <prvAddNewTaskToReadyList+0xc4>)
 8014214:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014216:	4b2c      	ldr	r3, [pc, #176]	@ (80142c8 <prvAddNewTaskToReadyList+0xc8>)
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	2b00      	cmp	r3, #0
 801421c:	d109      	bne.n	8014232 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801421e:	4a2a      	ldr	r2, [pc, #168]	@ (80142c8 <prvAddNewTaskToReadyList+0xc8>)
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014224:	4b27      	ldr	r3, [pc, #156]	@ (80142c4 <prvAddNewTaskToReadyList+0xc4>)
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	2b01      	cmp	r3, #1
 801422a:	d110      	bne.n	801424e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801422c:	f000 fce2 	bl	8014bf4 <prvInitialiseTaskLists>
 8014230:	e00d      	b.n	801424e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014232:	4b26      	ldr	r3, [pc, #152]	@ (80142cc <prvAddNewTaskToReadyList+0xcc>)
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d109      	bne.n	801424e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801423a:	4b23      	ldr	r3, [pc, #140]	@ (80142c8 <prvAddNewTaskToReadyList+0xc8>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014244:	429a      	cmp	r2, r3
 8014246:	d802      	bhi.n	801424e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014248:	4a1f      	ldr	r2, [pc, #124]	@ (80142c8 <prvAddNewTaskToReadyList+0xc8>)
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801424e:	4b20      	ldr	r3, [pc, #128]	@ (80142d0 <prvAddNewTaskToReadyList+0xd0>)
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	3301      	adds	r3, #1
 8014254:	4a1e      	ldr	r2, [pc, #120]	@ (80142d0 <prvAddNewTaskToReadyList+0xd0>)
 8014256:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014258:	4b1d      	ldr	r3, [pc, #116]	@ (80142d0 <prvAddNewTaskToReadyList+0xd0>)
 801425a:	681a      	ldr	r2, [r3, #0]
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014264:	4b1b      	ldr	r3, [pc, #108]	@ (80142d4 <prvAddNewTaskToReadyList+0xd4>)
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	429a      	cmp	r2, r3
 801426a:	d903      	bls.n	8014274 <prvAddNewTaskToReadyList+0x74>
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014270:	4a18      	ldr	r2, [pc, #96]	@ (80142d4 <prvAddNewTaskToReadyList+0xd4>)
 8014272:	6013      	str	r3, [r2, #0]
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014278:	4613      	mov	r3, r2
 801427a:	009b      	lsls	r3, r3, #2
 801427c:	4413      	add	r3, r2
 801427e:	009b      	lsls	r3, r3, #2
 8014280:	4a15      	ldr	r2, [pc, #84]	@ (80142d8 <prvAddNewTaskToReadyList+0xd8>)
 8014282:	441a      	add	r2, r3
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	3304      	adds	r3, #4
 8014288:	4619      	mov	r1, r3
 801428a:	4610      	mov	r0, r2
 801428c:	f7fe fdb7 	bl	8012dfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014290:	f001 feac 	bl	8015fec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014294:	4b0d      	ldr	r3, [pc, #52]	@ (80142cc <prvAddNewTaskToReadyList+0xcc>)
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d00e      	beq.n	80142ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801429c:	4b0a      	ldr	r3, [pc, #40]	@ (80142c8 <prvAddNewTaskToReadyList+0xc8>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142a6:	429a      	cmp	r2, r3
 80142a8:	d207      	bcs.n	80142ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80142aa:	4b0c      	ldr	r3, [pc, #48]	@ (80142dc <prvAddNewTaskToReadyList+0xdc>)
 80142ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80142b0:	601a      	str	r2, [r3, #0]
 80142b2:	f3bf 8f4f 	dsb	sy
 80142b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80142ba:	bf00      	nop
 80142bc:	3708      	adds	r7, #8
 80142be:	46bd      	mov	sp, r7
 80142c0:	bd80      	pop	{r7, pc}
 80142c2:	bf00      	nop
 80142c4:	240016e4 	.word	0x240016e4
 80142c8:	24001210 	.word	0x24001210
 80142cc:	240016f0 	.word	0x240016f0
 80142d0:	24001700 	.word	0x24001700
 80142d4:	240016ec 	.word	0x240016ec
 80142d8:	24001214 	.word	0x24001214
 80142dc:	e000ed04 	.word	0xe000ed04

080142e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b084      	sub	sp, #16
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80142e8:	2300      	movs	r3, #0
 80142ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d018      	beq.n	8014324 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80142f2:	4b14      	ldr	r3, [pc, #80]	@ (8014344 <vTaskDelay+0x64>)
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d00b      	beq.n	8014312 <vTaskDelay+0x32>
	__asm volatile
 80142fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142fe:	f383 8811 	msr	BASEPRI, r3
 8014302:	f3bf 8f6f 	isb	sy
 8014306:	f3bf 8f4f 	dsb	sy
 801430a:	60bb      	str	r3, [r7, #8]
}
 801430c:	bf00      	nop
 801430e:	bf00      	nop
 8014310:	e7fd      	b.n	801430e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014312:	f000 f88b 	bl	801442c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014316:	2100      	movs	r1, #0
 8014318:	6878      	ldr	r0, [r7, #4]
 801431a:	f001 f8d9 	bl	80154d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801431e:	f000 f893 	bl	8014448 <xTaskResumeAll>
 8014322:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d107      	bne.n	801433a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801432a:	4b07      	ldr	r3, [pc, #28]	@ (8014348 <vTaskDelay+0x68>)
 801432c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014330:	601a      	str	r2, [r3, #0]
 8014332:	f3bf 8f4f 	dsb	sy
 8014336:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801433a:	bf00      	nop
 801433c:	3710      	adds	r7, #16
 801433e:	46bd      	mov	sp, r7
 8014340:	bd80      	pop	{r7, pc}
 8014342:	bf00      	nop
 8014344:	2400170c 	.word	0x2400170c
 8014348:	e000ed04 	.word	0xe000ed04

0801434c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801434c:	b580      	push	{r7, lr}
 801434e:	b08a      	sub	sp, #40	@ 0x28
 8014350:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014352:	2300      	movs	r3, #0
 8014354:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014356:	2300      	movs	r3, #0
 8014358:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801435a:	463a      	mov	r2, r7
 801435c:	1d39      	adds	r1, r7, #4
 801435e:	f107 0308 	add.w	r3, r7, #8
 8014362:	4618      	mov	r0, r3
 8014364:	f7fe fb2e 	bl	80129c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014368:	6839      	ldr	r1, [r7, #0]
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	68ba      	ldr	r2, [r7, #8]
 801436e:	9202      	str	r2, [sp, #8]
 8014370:	9301      	str	r3, [sp, #4]
 8014372:	2300      	movs	r3, #0
 8014374:	9300      	str	r3, [sp, #0]
 8014376:	2300      	movs	r3, #0
 8014378:	460a      	mov	r2, r1
 801437a:	4924      	ldr	r1, [pc, #144]	@ (801440c <vTaskStartScheduler+0xc0>)
 801437c:	4824      	ldr	r0, [pc, #144]	@ (8014410 <vTaskStartScheduler+0xc4>)
 801437e:	f7ff fdf1 	bl	8013f64 <xTaskCreateStatic>
 8014382:	4603      	mov	r3, r0
 8014384:	4a23      	ldr	r2, [pc, #140]	@ (8014414 <vTaskStartScheduler+0xc8>)
 8014386:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014388:	4b22      	ldr	r3, [pc, #136]	@ (8014414 <vTaskStartScheduler+0xc8>)
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d002      	beq.n	8014396 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014390:	2301      	movs	r3, #1
 8014392:	617b      	str	r3, [r7, #20]
 8014394:	e001      	b.n	801439a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014396:	2300      	movs	r3, #0
 8014398:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801439a:	697b      	ldr	r3, [r7, #20]
 801439c:	2b01      	cmp	r3, #1
 801439e:	d102      	bne.n	80143a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80143a0:	f001 f8ea 	bl	8015578 <xTimerCreateTimerTask>
 80143a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80143a6:	697b      	ldr	r3, [r7, #20]
 80143a8:	2b01      	cmp	r3, #1
 80143aa:	d11b      	bne.n	80143e4 <vTaskStartScheduler+0x98>
	__asm volatile
 80143ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143b0:	f383 8811 	msr	BASEPRI, r3
 80143b4:	f3bf 8f6f 	isb	sy
 80143b8:	f3bf 8f4f 	dsb	sy
 80143bc:	613b      	str	r3, [r7, #16]
}
 80143be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80143c0:	4b15      	ldr	r3, [pc, #84]	@ (8014418 <vTaskStartScheduler+0xcc>)
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	3354      	adds	r3, #84	@ 0x54
 80143c6:	4a15      	ldr	r2, [pc, #84]	@ (801441c <vTaskStartScheduler+0xd0>)
 80143c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80143ca:	4b15      	ldr	r3, [pc, #84]	@ (8014420 <vTaskStartScheduler+0xd4>)
 80143cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80143d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80143d2:	4b14      	ldr	r3, [pc, #80]	@ (8014424 <vTaskStartScheduler+0xd8>)
 80143d4:	2201      	movs	r2, #1
 80143d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80143d8:	4b13      	ldr	r3, [pc, #76]	@ (8014428 <vTaskStartScheduler+0xdc>)
 80143da:	2200      	movs	r2, #0
 80143dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80143de:	f001 fd2f 	bl	8015e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80143e2:	e00f      	b.n	8014404 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80143ea:	d10b      	bne.n	8014404 <vTaskStartScheduler+0xb8>
	__asm volatile
 80143ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143f0:	f383 8811 	msr	BASEPRI, r3
 80143f4:	f3bf 8f6f 	isb	sy
 80143f8:	f3bf 8f4f 	dsb	sy
 80143fc:	60fb      	str	r3, [r7, #12]
}
 80143fe:	bf00      	nop
 8014400:	bf00      	nop
 8014402:	e7fd      	b.n	8014400 <vTaskStartScheduler+0xb4>
}
 8014404:	bf00      	nop
 8014406:	3718      	adds	r7, #24
 8014408:	46bd      	mov	sp, r7
 801440a:	bd80      	pop	{r7, pc}
 801440c:	08017d08 	.word	0x08017d08
 8014410:	08014bc5 	.word	0x08014bc5
 8014414:	24001708 	.word	0x24001708
 8014418:	24001210 	.word	0x24001210
 801441c:	24000020 	.word	0x24000020
 8014420:	24001704 	.word	0x24001704
 8014424:	240016f0 	.word	0x240016f0
 8014428:	240016e8 	.word	0x240016e8

0801442c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801442c:	b480      	push	{r7}
 801442e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014430:	4b04      	ldr	r3, [pc, #16]	@ (8014444 <vTaskSuspendAll+0x18>)
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	3301      	adds	r3, #1
 8014436:	4a03      	ldr	r2, [pc, #12]	@ (8014444 <vTaskSuspendAll+0x18>)
 8014438:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801443a:	bf00      	nop
 801443c:	46bd      	mov	sp, r7
 801443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014442:	4770      	bx	lr
 8014444:	2400170c 	.word	0x2400170c

08014448 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014448:	b580      	push	{r7, lr}
 801444a:	b084      	sub	sp, #16
 801444c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801444e:	2300      	movs	r3, #0
 8014450:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014452:	2300      	movs	r3, #0
 8014454:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014456:	4b42      	ldr	r3, [pc, #264]	@ (8014560 <xTaskResumeAll+0x118>)
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d10b      	bne.n	8014476 <xTaskResumeAll+0x2e>
	__asm volatile
 801445e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014462:	f383 8811 	msr	BASEPRI, r3
 8014466:	f3bf 8f6f 	isb	sy
 801446a:	f3bf 8f4f 	dsb	sy
 801446e:	603b      	str	r3, [r7, #0]
}
 8014470:	bf00      	nop
 8014472:	bf00      	nop
 8014474:	e7fd      	b.n	8014472 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014476:	f001 fd87 	bl	8015f88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801447a:	4b39      	ldr	r3, [pc, #228]	@ (8014560 <xTaskResumeAll+0x118>)
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	3b01      	subs	r3, #1
 8014480:	4a37      	ldr	r2, [pc, #220]	@ (8014560 <xTaskResumeAll+0x118>)
 8014482:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014484:	4b36      	ldr	r3, [pc, #216]	@ (8014560 <xTaskResumeAll+0x118>)
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d162      	bne.n	8014552 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801448c:	4b35      	ldr	r3, [pc, #212]	@ (8014564 <xTaskResumeAll+0x11c>)
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d05e      	beq.n	8014552 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014494:	e02f      	b.n	80144f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014496:	4b34      	ldr	r3, [pc, #208]	@ (8014568 <xTaskResumeAll+0x120>)
 8014498:	68db      	ldr	r3, [r3, #12]
 801449a:	68db      	ldr	r3, [r3, #12]
 801449c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	3318      	adds	r3, #24
 80144a2:	4618      	mov	r0, r3
 80144a4:	f7fe fd08 	bl	8012eb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	3304      	adds	r3, #4
 80144ac:	4618      	mov	r0, r3
 80144ae:	f7fe fd03 	bl	8012eb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80144b6:	4b2d      	ldr	r3, [pc, #180]	@ (801456c <xTaskResumeAll+0x124>)
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	429a      	cmp	r2, r3
 80144bc:	d903      	bls.n	80144c6 <xTaskResumeAll+0x7e>
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144c2:	4a2a      	ldr	r2, [pc, #168]	@ (801456c <xTaskResumeAll+0x124>)
 80144c4:	6013      	str	r3, [r2, #0]
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80144ca:	4613      	mov	r3, r2
 80144cc:	009b      	lsls	r3, r3, #2
 80144ce:	4413      	add	r3, r2
 80144d0:	009b      	lsls	r3, r3, #2
 80144d2:	4a27      	ldr	r2, [pc, #156]	@ (8014570 <xTaskResumeAll+0x128>)
 80144d4:	441a      	add	r2, r3
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	3304      	adds	r3, #4
 80144da:	4619      	mov	r1, r3
 80144dc:	4610      	mov	r0, r2
 80144de:	f7fe fc8e 	bl	8012dfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80144e6:	4b23      	ldr	r3, [pc, #140]	@ (8014574 <xTaskResumeAll+0x12c>)
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144ec:	429a      	cmp	r2, r3
 80144ee:	d302      	bcc.n	80144f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80144f0:	4b21      	ldr	r3, [pc, #132]	@ (8014578 <xTaskResumeAll+0x130>)
 80144f2:	2201      	movs	r2, #1
 80144f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80144f6:	4b1c      	ldr	r3, [pc, #112]	@ (8014568 <xTaskResumeAll+0x120>)
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d1cb      	bne.n	8014496 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d001      	beq.n	8014508 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014504:	f000 fc1a 	bl	8014d3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014508:	4b1c      	ldr	r3, [pc, #112]	@ (801457c <xTaskResumeAll+0x134>)
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d010      	beq.n	8014536 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014514:	f000 f858 	bl	80145c8 <xTaskIncrementTick>
 8014518:	4603      	mov	r3, r0
 801451a:	2b00      	cmp	r3, #0
 801451c:	d002      	beq.n	8014524 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801451e:	4b16      	ldr	r3, [pc, #88]	@ (8014578 <xTaskResumeAll+0x130>)
 8014520:	2201      	movs	r2, #1
 8014522:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	3b01      	subs	r3, #1
 8014528:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d1f1      	bne.n	8014514 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8014530:	4b12      	ldr	r3, [pc, #72]	@ (801457c <xTaskResumeAll+0x134>)
 8014532:	2200      	movs	r2, #0
 8014534:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014536:	4b10      	ldr	r3, [pc, #64]	@ (8014578 <xTaskResumeAll+0x130>)
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d009      	beq.n	8014552 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801453e:	2301      	movs	r3, #1
 8014540:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014542:	4b0f      	ldr	r3, [pc, #60]	@ (8014580 <xTaskResumeAll+0x138>)
 8014544:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014548:	601a      	str	r2, [r3, #0]
 801454a:	f3bf 8f4f 	dsb	sy
 801454e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014552:	f001 fd4b 	bl	8015fec <vPortExitCritical>

	return xAlreadyYielded;
 8014556:	68bb      	ldr	r3, [r7, #8]
}
 8014558:	4618      	mov	r0, r3
 801455a:	3710      	adds	r7, #16
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}
 8014560:	2400170c 	.word	0x2400170c
 8014564:	240016e4 	.word	0x240016e4
 8014568:	240016a4 	.word	0x240016a4
 801456c:	240016ec 	.word	0x240016ec
 8014570:	24001214 	.word	0x24001214
 8014574:	24001210 	.word	0x24001210
 8014578:	240016f8 	.word	0x240016f8
 801457c:	240016f4 	.word	0x240016f4
 8014580:	e000ed04 	.word	0xe000ed04

08014584 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014584:	b480      	push	{r7}
 8014586:	b083      	sub	sp, #12
 8014588:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801458a:	4b05      	ldr	r3, [pc, #20]	@ (80145a0 <xTaskGetTickCount+0x1c>)
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014590:	687b      	ldr	r3, [r7, #4]
}
 8014592:	4618      	mov	r0, r3
 8014594:	370c      	adds	r7, #12
 8014596:	46bd      	mov	sp, r7
 8014598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801459c:	4770      	bx	lr
 801459e:	bf00      	nop
 80145a0:	240016e8 	.word	0x240016e8

080145a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b082      	sub	sp, #8
 80145a8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80145aa:	f001 fdcd 	bl	8016148 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80145ae:	2300      	movs	r3, #0
 80145b0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80145b2:	4b04      	ldr	r3, [pc, #16]	@ (80145c4 <xTaskGetTickCountFromISR+0x20>)
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80145b8:	683b      	ldr	r3, [r7, #0]
}
 80145ba:	4618      	mov	r0, r3
 80145bc:	3708      	adds	r7, #8
 80145be:	46bd      	mov	sp, r7
 80145c0:	bd80      	pop	{r7, pc}
 80145c2:	bf00      	nop
 80145c4:	240016e8 	.word	0x240016e8

080145c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b086      	sub	sp, #24
 80145cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80145ce:	2300      	movs	r3, #0
 80145d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80145d2:	4b4f      	ldr	r3, [pc, #316]	@ (8014710 <xTaskIncrementTick+0x148>)
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	f040 8090 	bne.w	80146fc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80145dc:	4b4d      	ldr	r3, [pc, #308]	@ (8014714 <xTaskIncrementTick+0x14c>)
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	3301      	adds	r3, #1
 80145e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80145e4:	4a4b      	ldr	r2, [pc, #300]	@ (8014714 <xTaskIncrementTick+0x14c>)
 80145e6:	693b      	ldr	r3, [r7, #16]
 80145e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80145ea:	693b      	ldr	r3, [r7, #16]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d121      	bne.n	8014634 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80145f0:	4b49      	ldr	r3, [pc, #292]	@ (8014718 <xTaskIncrementTick+0x150>)
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d00b      	beq.n	8014612 <xTaskIncrementTick+0x4a>
	__asm volatile
 80145fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145fe:	f383 8811 	msr	BASEPRI, r3
 8014602:	f3bf 8f6f 	isb	sy
 8014606:	f3bf 8f4f 	dsb	sy
 801460a:	603b      	str	r3, [r7, #0]
}
 801460c:	bf00      	nop
 801460e:	bf00      	nop
 8014610:	e7fd      	b.n	801460e <xTaskIncrementTick+0x46>
 8014612:	4b41      	ldr	r3, [pc, #260]	@ (8014718 <xTaskIncrementTick+0x150>)
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	60fb      	str	r3, [r7, #12]
 8014618:	4b40      	ldr	r3, [pc, #256]	@ (801471c <xTaskIncrementTick+0x154>)
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	4a3e      	ldr	r2, [pc, #248]	@ (8014718 <xTaskIncrementTick+0x150>)
 801461e:	6013      	str	r3, [r2, #0]
 8014620:	4a3e      	ldr	r2, [pc, #248]	@ (801471c <xTaskIncrementTick+0x154>)
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	6013      	str	r3, [r2, #0]
 8014626:	4b3e      	ldr	r3, [pc, #248]	@ (8014720 <xTaskIncrementTick+0x158>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	3301      	adds	r3, #1
 801462c:	4a3c      	ldr	r2, [pc, #240]	@ (8014720 <xTaskIncrementTick+0x158>)
 801462e:	6013      	str	r3, [r2, #0]
 8014630:	f000 fb84 	bl	8014d3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014634:	4b3b      	ldr	r3, [pc, #236]	@ (8014724 <xTaskIncrementTick+0x15c>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	693a      	ldr	r2, [r7, #16]
 801463a:	429a      	cmp	r2, r3
 801463c:	d349      	bcc.n	80146d2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801463e:	4b36      	ldr	r3, [pc, #216]	@ (8014718 <xTaskIncrementTick+0x150>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d104      	bne.n	8014652 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014648:	4b36      	ldr	r3, [pc, #216]	@ (8014724 <xTaskIncrementTick+0x15c>)
 801464a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801464e:	601a      	str	r2, [r3, #0]
					break;
 8014650:	e03f      	b.n	80146d2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014652:	4b31      	ldr	r3, [pc, #196]	@ (8014718 <xTaskIncrementTick+0x150>)
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	68db      	ldr	r3, [r3, #12]
 8014658:	68db      	ldr	r3, [r3, #12]
 801465a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801465c:	68bb      	ldr	r3, [r7, #8]
 801465e:	685b      	ldr	r3, [r3, #4]
 8014660:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014662:	693a      	ldr	r2, [r7, #16]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	429a      	cmp	r2, r3
 8014668:	d203      	bcs.n	8014672 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801466a:	4a2e      	ldr	r2, [pc, #184]	@ (8014724 <xTaskIncrementTick+0x15c>)
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014670:	e02f      	b.n	80146d2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014672:	68bb      	ldr	r3, [r7, #8]
 8014674:	3304      	adds	r3, #4
 8014676:	4618      	mov	r0, r3
 8014678:	f7fe fc1e 	bl	8012eb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014680:	2b00      	cmp	r3, #0
 8014682:	d004      	beq.n	801468e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	3318      	adds	r3, #24
 8014688:	4618      	mov	r0, r3
 801468a:	f7fe fc15 	bl	8012eb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014692:	4b25      	ldr	r3, [pc, #148]	@ (8014728 <xTaskIncrementTick+0x160>)
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	429a      	cmp	r2, r3
 8014698:	d903      	bls.n	80146a2 <xTaskIncrementTick+0xda>
 801469a:	68bb      	ldr	r3, [r7, #8]
 801469c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801469e:	4a22      	ldr	r2, [pc, #136]	@ (8014728 <xTaskIncrementTick+0x160>)
 80146a0:	6013      	str	r3, [r2, #0]
 80146a2:	68bb      	ldr	r3, [r7, #8]
 80146a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146a6:	4613      	mov	r3, r2
 80146a8:	009b      	lsls	r3, r3, #2
 80146aa:	4413      	add	r3, r2
 80146ac:	009b      	lsls	r3, r3, #2
 80146ae:	4a1f      	ldr	r2, [pc, #124]	@ (801472c <xTaskIncrementTick+0x164>)
 80146b0:	441a      	add	r2, r3
 80146b2:	68bb      	ldr	r3, [r7, #8]
 80146b4:	3304      	adds	r3, #4
 80146b6:	4619      	mov	r1, r3
 80146b8:	4610      	mov	r0, r2
 80146ba:	f7fe fba0 	bl	8012dfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80146be:	68bb      	ldr	r3, [r7, #8]
 80146c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146c2:	4b1b      	ldr	r3, [pc, #108]	@ (8014730 <xTaskIncrementTick+0x168>)
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146c8:	429a      	cmp	r2, r3
 80146ca:	d3b8      	bcc.n	801463e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80146cc:	2301      	movs	r3, #1
 80146ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80146d0:	e7b5      	b.n	801463e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80146d2:	4b17      	ldr	r3, [pc, #92]	@ (8014730 <xTaskIncrementTick+0x168>)
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146d8:	4914      	ldr	r1, [pc, #80]	@ (801472c <xTaskIncrementTick+0x164>)
 80146da:	4613      	mov	r3, r2
 80146dc:	009b      	lsls	r3, r3, #2
 80146de:	4413      	add	r3, r2
 80146e0:	009b      	lsls	r3, r3, #2
 80146e2:	440b      	add	r3, r1
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	2b01      	cmp	r3, #1
 80146e8:	d901      	bls.n	80146ee <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80146ea:	2301      	movs	r3, #1
 80146ec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80146ee:	4b11      	ldr	r3, [pc, #68]	@ (8014734 <xTaskIncrementTick+0x16c>)
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d007      	beq.n	8014706 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80146f6:	2301      	movs	r3, #1
 80146f8:	617b      	str	r3, [r7, #20]
 80146fa:	e004      	b.n	8014706 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80146fc:	4b0e      	ldr	r3, [pc, #56]	@ (8014738 <xTaskIncrementTick+0x170>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	3301      	adds	r3, #1
 8014702:	4a0d      	ldr	r2, [pc, #52]	@ (8014738 <xTaskIncrementTick+0x170>)
 8014704:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014706:	697b      	ldr	r3, [r7, #20]
}
 8014708:	4618      	mov	r0, r3
 801470a:	3718      	adds	r7, #24
 801470c:	46bd      	mov	sp, r7
 801470e:	bd80      	pop	{r7, pc}
 8014710:	2400170c 	.word	0x2400170c
 8014714:	240016e8 	.word	0x240016e8
 8014718:	2400169c 	.word	0x2400169c
 801471c:	240016a0 	.word	0x240016a0
 8014720:	240016fc 	.word	0x240016fc
 8014724:	24001704 	.word	0x24001704
 8014728:	240016ec 	.word	0x240016ec
 801472c:	24001214 	.word	0x24001214
 8014730:	24001210 	.word	0x24001210
 8014734:	240016f8 	.word	0x240016f8
 8014738:	240016f4 	.word	0x240016f4

0801473c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801473c:	b480      	push	{r7}
 801473e:	b085      	sub	sp, #20
 8014740:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014742:	4b2b      	ldr	r3, [pc, #172]	@ (80147f0 <vTaskSwitchContext+0xb4>)
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d003      	beq.n	8014752 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801474a:	4b2a      	ldr	r3, [pc, #168]	@ (80147f4 <vTaskSwitchContext+0xb8>)
 801474c:	2201      	movs	r2, #1
 801474e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014750:	e047      	b.n	80147e2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8014752:	4b28      	ldr	r3, [pc, #160]	@ (80147f4 <vTaskSwitchContext+0xb8>)
 8014754:	2200      	movs	r2, #0
 8014756:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014758:	4b27      	ldr	r3, [pc, #156]	@ (80147f8 <vTaskSwitchContext+0xbc>)
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	60fb      	str	r3, [r7, #12]
 801475e:	e011      	b.n	8014784 <vTaskSwitchContext+0x48>
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d10b      	bne.n	801477e <vTaskSwitchContext+0x42>
	__asm volatile
 8014766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801476a:	f383 8811 	msr	BASEPRI, r3
 801476e:	f3bf 8f6f 	isb	sy
 8014772:	f3bf 8f4f 	dsb	sy
 8014776:	607b      	str	r3, [r7, #4]
}
 8014778:	bf00      	nop
 801477a:	bf00      	nop
 801477c:	e7fd      	b.n	801477a <vTaskSwitchContext+0x3e>
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	3b01      	subs	r3, #1
 8014782:	60fb      	str	r3, [r7, #12]
 8014784:	491d      	ldr	r1, [pc, #116]	@ (80147fc <vTaskSwitchContext+0xc0>)
 8014786:	68fa      	ldr	r2, [r7, #12]
 8014788:	4613      	mov	r3, r2
 801478a:	009b      	lsls	r3, r3, #2
 801478c:	4413      	add	r3, r2
 801478e:	009b      	lsls	r3, r3, #2
 8014790:	440b      	add	r3, r1
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d0e3      	beq.n	8014760 <vTaskSwitchContext+0x24>
 8014798:	68fa      	ldr	r2, [r7, #12]
 801479a:	4613      	mov	r3, r2
 801479c:	009b      	lsls	r3, r3, #2
 801479e:	4413      	add	r3, r2
 80147a0:	009b      	lsls	r3, r3, #2
 80147a2:	4a16      	ldr	r2, [pc, #88]	@ (80147fc <vTaskSwitchContext+0xc0>)
 80147a4:	4413      	add	r3, r2
 80147a6:	60bb      	str	r3, [r7, #8]
 80147a8:	68bb      	ldr	r3, [r7, #8]
 80147aa:	685b      	ldr	r3, [r3, #4]
 80147ac:	685a      	ldr	r2, [r3, #4]
 80147ae:	68bb      	ldr	r3, [r7, #8]
 80147b0:	605a      	str	r2, [r3, #4]
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	685a      	ldr	r2, [r3, #4]
 80147b6:	68bb      	ldr	r3, [r7, #8]
 80147b8:	3308      	adds	r3, #8
 80147ba:	429a      	cmp	r2, r3
 80147bc:	d104      	bne.n	80147c8 <vTaskSwitchContext+0x8c>
 80147be:	68bb      	ldr	r3, [r7, #8]
 80147c0:	685b      	ldr	r3, [r3, #4]
 80147c2:	685a      	ldr	r2, [r3, #4]
 80147c4:	68bb      	ldr	r3, [r7, #8]
 80147c6:	605a      	str	r2, [r3, #4]
 80147c8:	68bb      	ldr	r3, [r7, #8]
 80147ca:	685b      	ldr	r3, [r3, #4]
 80147cc:	68db      	ldr	r3, [r3, #12]
 80147ce:	4a0c      	ldr	r2, [pc, #48]	@ (8014800 <vTaskSwitchContext+0xc4>)
 80147d0:	6013      	str	r3, [r2, #0]
 80147d2:	4a09      	ldr	r2, [pc, #36]	@ (80147f8 <vTaskSwitchContext+0xbc>)
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80147d8:	4b09      	ldr	r3, [pc, #36]	@ (8014800 <vTaskSwitchContext+0xc4>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	3354      	adds	r3, #84	@ 0x54
 80147de:	4a09      	ldr	r2, [pc, #36]	@ (8014804 <vTaskSwitchContext+0xc8>)
 80147e0:	6013      	str	r3, [r2, #0]
}
 80147e2:	bf00      	nop
 80147e4:	3714      	adds	r7, #20
 80147e6:	46bd      	mov	sp, r7
 80147e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ec:	4770      	bx	lr
 80147ee:	bf00      	nop
 80147f0:	2400170c 	.word	0x2400170c
 80147f4:	240016f8 	.word	0x240016f8
 80147f8:	240016ec 	.word	0x240016ec
 80147fc:	24001214 	.word	0x24001214
 8014800:	24001210 	.word	0x24001210
 8014804:	24000020 	.word	0x24000020

08014808 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014808:	b580      	push	{r7, lr}
 801480a:	b084      	sub	sp, #16
 801480c:	af00      	add	r7, sp, #0
 801480e:	6078      	str	r0, [r7, #4]
 8014810:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d10b      	bne.n	8014830 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8014818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801481c:	f383 8811 	msr	BASEPRI, r3
 8014820:	f3bf 8f6f 	isb	sy
 8014824:	f3bf 8f4f 	dsb	sy
 8014828:	60fb      	str	r3, [r7, #12]
}
 801482a:	bf00      	nop
 801482c:	bf00      	nop
 801482e:	e7fd      	b.n	801482c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014830:	4b07      	ldr	r3, [pc, #28]	@ (8014850 <vTaskPlaceOnEventList+0x48>)
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	3318      	adds	r3, #24
 8014836:	4619      	mov	r1, r3
 8014838:	6878      	ldr	r0, [r7, #4]
 801483a:	f7fe fb04 	bl	8012e46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801483e:	2101      	movs	r1, #1
 8014840:	6838      	ldr	r0, [r7, #0]
 8014842:	f000 fe45 	bl	80154d0 <prvAddCurrentTaskToDelayedList>
}
 8014846:	bf00      	nop
 8014848:	3710      	adds	r7, #16
 801484a:	46bd      	mov	sp, r7
 801484c:	bd80      	pop	{r7, pc}
 801484e:	bf00      	nop
 8014850:	24001210 	.word	0x24001210

08014854 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b086      	sub	sp, #24
 8014858:	af00      	add	r7, sp, #0
 801485a:	60f8      	str	r0, [r7, #12]
 801485c:	60b9      	str	r1, [r7, #8]
 801485e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d10b      	bne.n	801487e <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8014866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801486a:	f383 8811 	msr	BASEPRI, r3
 801486e:	f3bf 8f6f 	isb	sy
 8014872:	f3bf 8f4f 	dsb	sy
 8014876:	617b      	str	r3, [r7, #20]
}
 8014878:	bf00      	nop
 801487a:	bf00      	nop
 801487c:	e7fd      	b.n	801487a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801487e:	4b12      	ldr	r3, [pc, #72]	@ (80148c8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d10b      	bne.n	801489e <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8014886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801488a:	f383 8811 	msr	BASEPRI, r3
 801488e:	f3bf 8f6f 	isb	sy
 8014892:	f3bf 8f4f 	dsb	sy
 8014896:	613b      	str	r3, [r7, #16]
}
 8014898:	bf00      	nop
 801489a:	bf00      	nop
 801489c:	e7fd      	b.n	801489a <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801489e:	4b0b      	ldr	r3, [pc, #44]	@ (80148cc <vTaskPlaceOnUnorderedEventList+0x78>)
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	68ba      	ldr	r2, [r7, #8]
 80148a4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80148a8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80148aa:	4b08      	ldr	r3, [pc, #32]	@ (80148cc <vTaskPlaceOnUnorderedEventList+0x78>)
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	3318      	adds	r3, #24
 80148b0:	4619      	mov	r1, r3
 80148b2:	68f8      	ldr	r0, [r7, #12]
 80148b4:	f7fe faa3 	bl	8012dfe <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80148b8:	2101      	movs	r1, #1
 80148ba:	6878      	ldr	r0, [r7, #4]
 80148bc:	f000 fe08 	bl	80154d0 <prvAddCurrentTaskToDelayedList>
}
 80148c0:	bf00      	nop
 80148c2:	3718      	adds	r7, #24
 80148c4:	46bd      	mov	sp, r7
 80148c6:	bd80      	pop	{r7, pc}
 80148c8:	2400170c 	.word	0x2400170c
 80148cc:	24001210 	.word	0x24001210

080148d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b086      	sub	sp, #24
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	60f8      	str	r0, [r7, #12]
 80148d8:	60b9      	str	r1, [r7, #8]
 80148da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d10b      	bne.n	80148fa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80148e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148e6:	f383 8811 	msr	BASEPRI, r3
 80148ea:	f3bf 8f6f 	isb	sy
 80148ee:	f3bf 8f4f 	dsb	sy
 80148f2:	617b      	str	r3, [r7, #20]
}
 80148f4:	bf00      	nop
 80148f6:	bf00      	nop
 80148f8:	e7fd      	b.n	80148f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80148fa:	4b0a      	ldr	r3, [pc, #40]	@ (8014924 <vTaskPlaceOnEventListRestricted+0x54>)
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	3318      	adds	r3, #24
 8014900:	4619      	mov	r1, r3
 8014902:	68f8      	ldr	r0, [r7, #12]
 8014904:	f7fe fa7b 	bl	8012dfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d002      	beq.n	8014914 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801490e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014912:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014914:	6879      	ldr	r1, [r7, #4]
 8014916:	68b8      	ldr	r0, [r7, #8]
 8014918:	f000 fdda 	bl	80154d0 <prvAddCurrentTaskToDelayedList>
	}
 801491c:	bf00      	nop
 801491e:	3718      	adds	r7, #24
 8014920:	46bd      	mov	sp, r7
 8014922:	bd80      	pop	{r7, pc}
 8014924:	24001210 	.word	0x24001210

08014928 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b086      	sub	sp, #24
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	68db      	ldr	r3, [r3, #12]
 8014934:	68db      	ldr	r3, [r3, #12]
 8014936:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014938:	693b      	ldr	r3, [r7, #16]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d10b      	bne.n	8014956 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801493e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014942:	f383 8811 	msr	BASEPRI, r3
 8014946:	f3bf 8f6f 	isb	sy
 801494a:	f3bf 8f4f 	dsb	sy
 801494e:	60fb      	str	r3, [r7, #12]
}
 8014950:	bf00      	nop
 8014952:	bf00      	nop
 8014954:	e7fd      	b.n	8014952 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014956:	693b      	ldr	r3, [r7, #16]
 8014958:	3318      	adds	r3, #24
 801495a:	4618      	mov	r0, r3
 801495c:	f7fe faac 	bl	8012eb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014960:	4b1d      	ldr	r3, [pc, #116]	@ (80149d8 <xTaskRemoveFromEventList+0xb0>)
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d11d      	bne.n	80149a4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014968:	693b      	ldr	r3, [r7, #16]
 801496a:	3304      	adds	r3, #4
 801496c:	4618      	mov	r0, r3
 801496e:	f7fe faa3 	bl	8012eb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014972:	693b      	ldr	r3, [r7, #16]
 8014974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014976:	4b19      	ldr	r3, [pc, #100]	@ (80149dc <xTaskRemoveFromEventList+0xb4>)
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	429a      	cmp	r2, r3
 801497c:	d903      	bls.n	8014986 <xTaskRemoveFromEventList+0x5e>
 801497e:	693b      	ldr	r3, [r7, #16]
 8014980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014982:	4a16      	ldr	r2, [pc, #88]	@ (80149dc <xTaskRemoveFromEventList+0xb4>)
 8014984:	6013      	str	r3, [r2, #0]
 8014986:	693b      	ldr	r3, [r7, #16]
 8014988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801498a:	4613      	mov	r3, r2
 801498c:	009b      	lsls	r3, r3, #2
 801498e:	4413      	add	r3, r2
 8014990:	009b      	lsls	r3, r3, #2
 8014992:	4a13      	ldr	r2, [pc, #76]	@ (80149e0 <xTaskRemoveFromEventList+0xb8>)
 8014994:	441a      	add	r2, r3
 8014996:	693b      	ldr	r3, [r7, #16]
 8014998:	3304      	adds	r3, #4
 801499a:	4619      	mov	r1, r3
 801499c:	4610      	mov	r0, r2
 801499e:	f7fe fa2e 	bl	8012dfe <vListInsertEnd>
 80149a2:	e005      	b.n	80149b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80149a4:	693b      	ldr	r3, [r7, #16]
 80149a6:	3318      	adds	r3, #24
 80149a8:	4619      	mov	r1, r3
 80149aa:	480e      	ldr	r0, [pc, #56]	@ (80149e4 <xTaskRemoveFromEventList+0xbc>)
 80149ac:	f7fe fa27 	bl	8012dfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80149b0:	693b      	ldr	r3, [r7, #16]
 80149b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149b4:	4b0c      	ldr	r3, [pc, #48]	@ (80149e8 <xTaskRemoveFromEventList+0xc0>)
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149ba:	429a      	cmp	r2, r3
 80149bc:	d905      	bls.n	80149ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80149be:	2301      	movs	r3, #1
 80149c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80149c2:	4b0a      	ldr	r3, [pc, #40]	@ (80149ec <xTaskRemoveFromEventList+0xc4>)
 80149c4:	2201      	movs	r2, #1
 80149c6:	601a      	str	r2, [r3, #0]
 80149c8:	e001      	b.n	80149ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80149ca:	2300      	movs	r3, #0
 80149cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80149ce:	697b      	ldr	r3, [r7, #20]
}
 80149d0:	4618      	mov	r0, r3
 80149d2:	3718      	adds	r7, #24
 80149d4:	46bd      	mov	sp, r7
 80149d6:	bd80      	pop	{r7, pc}
 80149d8:	2400170c 	.word	0x2400170c
 80149dc:	240016ec 	.word	0x240016ec
 80149e0:	24001214 	.word	0x24001214
 80149e4:	240016a4 	.word	0x240016a4
 80149e8:	24001210 	.word	0x24001210
 80149ec:	240016f8 	.word	0x240016f8

080149f0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b086      	sub	sp, #24
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
 80149f8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80149fa:	4b2a      	ldr	r3, [pc, #168]	@ (8014aa4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d10b      	bne.n	8014a1a <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8014a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a06:	f383 8811 	msr	BASEPRI, r3
 8014a0a:	f3bf 8f6f 	isb	sy
 8014a0e:	f3bf 8f4f 	dsb	sy
 8014a12:	613b      	str	r3, [r7, #16]
}
 8014a14:	bf00      	nop
 8014a16:	bf00      	nop
 8014a18:	e7fd      	b.n	8014a16 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	68db      	ldr	r3, [r3, #12]
 8014a28:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014a2a:	697b      	ldr	r3, [r7, #20]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d10b      	bne.n	8014a48 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8014a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a34:	f383 8811 	msr	BASEPRI, r3
 8014a38:	f3bf 8f6f 	isb	sy
 8014a3c:	f3bf 8f4f 	dsb	sy
 8014a40:	60fb      	str	r3, [r7, #12]
}
 8014a42:	bf00      	nop
 8014a44:	bf00      	nop
 8014a46:	e7fd      	b.n	8014a44 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8014a48:	6878      	ldr	r0, [r7, #4]
 8014a4a:	f7fe fa35 	bl	8012eb8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014a4e:	697b      	ldr	r3, [r7, #20]
 8014a50:	3304      	adds	r3, #4
 8014a52:	4618      	mov	r0, r3
 8014a54:	f7fe fa30 	bl	8012eb8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014a58:	697b      	ldr	r3, [r7, #20]
 8014a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a5c:	4b12      	ldr	r3, [pc, #72]	@ (8014aa8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	429a      	cmp	r2, r3
 8014a62:	d903      	bls.n	8014a6c <vTaskRemoveFromUnorderedEventList+0x7c>
 8014a64:	697b      	ldr	r3, [r7, #20]
 8014a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a68:	4a0f      	ldr	r2, [pc, #60]	@ (8014aa8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014a6a:	6013      	str	r3, [r2, #0]
 8014a6c:	697b      	ldr	r3, [r7, #20]
 8014a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a70:	4613      	mov	r3, r2
 8014a72:	009b      	lsls	r3, r3, #2
 8014a74:	4413      	add	r3, r2
 8014a76:	009b      	lsls	r3, r3, #2
 8014a78:	4a0c      	ldr	r2, [pc, #48]	@ (8014aac <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014a7a:	441a      	add	r2, r3
 8014a7c:	697b      	ldr	r3, [r7, #20]
 8014a7e:	3304      	adds	r3, #4
 8014a80:	4619      	mov	r1, r3
 8014a82:	4610      	mov	r0, r2
 8014a84:	f7fe f9bb 	bl	8012dfe <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014a88:	697b      	ldr	r3, [r7, #20]
 8014a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a8c:	4b08      	ldr	r3, [pc, #32]	@ (8014ab0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a92:	429a      	cmp	r2, r3
 8014a94:	d902      	bls.n	8014a9c <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014a96:	4b07      	ldr	r3, [pc, #28]	@ (8014ab4 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8014a98:	2201      	movs	r2, #1
 8014a9a:	601a      	str	r2, [r3, #0]
	}
}
 8014a9c:	bf00      	nop
 8014a9e:	3718      	adds	r7, #24
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	bd80      	pop	{r7, pc}
 8014aa4:	2400170c 	.word	0x2400170c
 8014aa8:	240016ec 	.word	0x240016ec
 8014aac:	24001214 	.word	0x24001214
 8014ab0:	24001210 	.word	0x24001210
 8014ab4:	240016f8 	.word	0x240016f8

08014ab8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014ab8:	b480      	push	{r7}
 8014aba:	b083      	sub	sp, #12
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014ac0:	4b06      	ldr	r3, [pc, #24]	@ (8014adc <vTaskInternalSetTimeOutState+0x24>)
 8014ac2:	681a      	ldr	r2, [r3, #0]
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014ac8:	4b05      	ldr	r3, [pc, #20]	@ (8014ae0 <vTaskInternalSetTimeOutState+0x28>)
 8014aca:	681a      	ldr	r2, [r3, #0]
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	605a      	str	r2, [r3, #4]
}
 8014ad0:	bf00      	nop
 8014ad2:	370c      	adds	r7, #12
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ada:	4770      	bx	lr
 8014adc:	240016fc 	.word	0x240016fc
 8014ae0:	240016e8 	.word	0x240016e8

08014ae4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b088      	sub	sp, #32
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
 8014aec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d10b      	bne.n	8014b0c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8014af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014af8:	f383 8811 	msr	BASEPRI, r3
 8014afc:	f3bf 8f6f 	isb	sy
 8014b00:	f3bf 8f4f 	dsb	sy
 8014b04:	613b      	str	r3, [r7, #16]
}
 8014b06:	bf00      	nop
 8014b08:	bf00      	nop
 8014b0a:	e7fd      	b.n	8014b08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d10b      	bne.n	8014b2a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8014b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b16:	f383 8811 	msr	BASEPRI, r3
 8014b1a:	f3bf 8f6f 	isb	sy
 8014b1e:	f3bf 8f4f 	dsb	sy
 8014b22:	60fb      	str	r3, [r7, #12]
}
 8014b24:	bf00      	nop
 8014b26:	bf00      	nop
 8014b28:	e7fd      	b.n	8014b26 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8014b2a:	f001 fa2d 	bl	8015f88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8014ba4 <xTaskCheckForTimeOut+0xc0>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	685b      	ldr	r3, [r3, #4]
 8014b38:	69ba      	ldr	r2, [r7, #24]
 8014b3a:	1ad3      	subs	r3, r2, r3
 8014b3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014b3e:	683b      	ldr	r3, [r7, #0]
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014b46:	d102      	bne.n	8014b4e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014b48:	2300      	movs	r3, #0
 8014b4a:	61fb      	str	r3, [r7, #28]
 8014b4c:	e023      	b.n	8014b96 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	681a      	ldr	r2, [r3, #0]
 8014b52:	4b15      	ldr	r3, [pc, #84]	@ (8014ba8 <xTaskCheckForTimeOut+0xc4>)
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	429a      	cmp	r2, r3
 8014b58:	d007      	beq.n	8014b6a <xTaskCheckForTimeOut+0x86>
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	685b      	ldr	r3, [r3, #4]
 8014b5e:	69ba      	ldr	r2, [r7, #24]
 8014b60:	429a      	cmp	r2, r3
 8014b62:	d302      	bcc.n	8014b6a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014b64:	2301      	movs	r3, #1
 8014b66:	61fb      	str	r3, [r7, #28]
 8014b68:	e015      	b.n	8014b96 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014b6a:	683b      	ldr	r3, [r7, #0]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	697a      	ldr	r2, [r7, #20]
 8014b70:	429a      	cmp	r2, r3
 8014b72:	d20b      	bcs.n	8014b8c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014b74:	683b      	ldr	r3, [r7, #0]
 8014b76:	681a      	ldr	r2, [r3, #0]
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	1ad2      	subs	r2, r2, r3
 8014b7c:	683b      	ldr	r3, [r7, #0]
 8014b7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014b80:	6878      	ldr	r0, [r7, #4]
 8014b82:	f7ff ff99 	bl	8014ab8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014b86:	2300      	movs	r3, #0
 8014b88:	61fb      	str	r3, [r7, #28]
 8014b8a:	e004      	b.n	8014b96 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014b8c:	683b      	ldr	r3, [r7, #0]
 8014b8e:	2200      	movs	r2, #0
 8014b90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014b92:	2301      	movs	r3, #1
 8014b94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014b96:	f001 fa29 	bl	8015fec <vPortExitCritical>

	return xReturn;
 8014b9a:	69fb      	ldr	r3, [r7, #28]
}
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	3720      	adds	r7, #32
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd80      	pop	{r7, pc}
 8014ba4:	240016e8 	.word	0x240016e8
 8014ba8:	240016fc 	.word	0x240016fc

08014bac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014bac:	b480      	push	{r7}
 8014bae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014bb0:	4b03      	ldr	r3, [pc, #12]	@ (8014bc0 <vTaskMissedYield+0x14>)
 8014bb2:	2201      	movs	r2, #1
 8014bb4:	601a      	str	r2, [r3, #0]
}
 8014bb6:	bf00      	nop
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bbe:	4770      	bx	lr
 8014bc0:	240016f8 	.word	0x240016f8

08014bc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b082      	sub	sp, #8
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014bcc:	f000 f852 	bl	8014c74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014bd0:	4b06      	ldr	r3, [pc, #24]	@ (8014bec <prvIdleTask+0x28>)
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	2b01      	cmp	r3, #1
 8014bd6:	d9f9      	bls.n	8014bcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8014bd8:	4b05      	ldr	r3, [pc, #20]	@ (8014bf0 <prvIdleTask+0x2c>)
 8014bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014bde:	601a      	str	r2, [r3, #0]
 8014be0:	f3bf 8f4f 	dsb	sy
 8014be4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014be8:	e7f0      	b.n	8014bcc <prvIdleTask+0x8>
 8014bea:	bf00      	nop
 8014bec:	24001214 	.word	0x24001214
 8014bf0:	e000ed04 	.word	0xe000ed04

08014bf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b082      	sub	sp, #8
 8014bf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	607b      	str	r3, [r7, #4]
 8014bfe:	e00c      	b.n	8014c1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014c00:	687a      	ldr	r2, [r7, #4]
 8014c02:	4613      	mov	r3, r2
 8014c04:	009b      	lsls	r3, r3, #2
 8014c06:	4413      	add	r3, r2
 8014c08:	009b      	lsls	r3, r3, #2
 8014c0a:	4a12      	ldr	r2, [pc, #72]	@ (8014c54 <prvInitialiseTaskLists+0x60>)
 8014c0c:	4413      	add	r3, r2
 8014c0e:	4618      	mov	r0, r3
 8014c10:	f7fe f8c8 	bl	8012da4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	3301      	adds	r3, #1
 8014c18:	607b      	str	r3, [r7, #4]
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	2b37      	cmp	r3, #55	@ 0x37
 8014c1e:	d9ef      	bls.n	8014c00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014c20:	480d      	ldr	r0, [pc, #52]	@ (8014c58 <prvInitialiseTaskLists+0x64>)
 8014c22:	f7fe f8bf 	bl	8012da4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014c26:	480d      	ldr	r0, [pc, #52]	@ (8014c5c <prvInitialiseTaskLists+0x68>)
 8014c28:	f7fe f8bc 	bl	8012da4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014c2c:	480c      	ldr	r0, [pc, #48]	@ (8014c60 <prvInitialiseTaskLists+0x6c>)
 8014c2e:	f7fe f8b9 	bl	8012da4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014c32:	480c      	ldr	r0, [pc, #48]	@ (8014c64 <prvInitialiseTaskLists+0x70>)
 8014c34:	f7fe f8b6 	bl	8012da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014c38:	480b      	ldr	r0, [pc, #44]	@ (8014c68 <prvInitialiseTaskLists+0x74>)
 8014c3a:	f7fe f8b3 	bl	8012da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8014c6c <prvInitialiseTaskLists+0x78>)
 8014c40:	4a05      	ldr	r2, [pc, #20]	@ (8014c58 <prvInitialiseTaskLists+0x64>)
 8014c42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014c44:	4b0a      	ldr	r3, [pc, #40]	@ (8014c70 <prvInitialiseTaskLists+0x7c>)
 8014c46:	4a05      	ldr	r2, [pc, #20]	@ (8014c5c <prvInitialiseTaskLists+0x68>)
 8014c48:	601a      	str	r2, [r3, #0]
}
 8014c4a:	bf00      	nop
 8014c4c:	3708      	adds	r7, #8
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}
 8014c52:	bf00      	nop
 8014c54:	24001214 	.word	0x24001214
 8014c58:	24001674 	.word	0x24001674
 8014c5c:	24001688 	.word	0x24001688
 8014c60:	240016a4 	.word	0x240016a4
 8014c64:	240016b8 	.word	0x240016b8
 8014c68:	240016d0 	.word	0x240016d0
 8014c6c:	2400169c 	.word	0x2400169c
 8014c70:	240016a0 	.word	0x240016a0

08014c74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b082      	sub	sp, #8
 8014c78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014c7a:	e019      	b.n	8014cb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014c7c:	f001 f984 	bl	8015f88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c80:	4b10      	ldr	r3, [pc, #64]	@ (8014cc4 <prvCheckTasksWaitingTermination+0x50>)
 8014c82:	68db      	ldr	r3, [r3, #12]
 8014c84:	68db      	ldr	r3, [r3, #12]
 8014c86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	3304      	adds	r3, #4
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	f7fe f913 	bl	8012eb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014c92:	4b0d      	ldr	r3, [pc, #52]	@ (8014cc8 <prvCheckTasksWaitingTermination+0x54>)
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	3b01      	subs	r3, #1
 8014c98:	4a0b      	ldr	r2, [pc, #44]	@ (8014cc8 <prvCheckTasksWaitingTermination+0x54>)
 8014c9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8014ccc <prvCheckTasksWaitingTermination+0x58>)
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	3b01      	subs	r3, #1
 8014ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8014ccc <prvCheckTasksWaitingTermination+0x58>)
 8014ca4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014ca6:	f001 f9a1 	bl	8015fec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014caa:	6878      	ldr	r0, [r7, #4]
 8014cac:	f000 f810 	bl	8014cd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014cb0:	4b06      	ldr	r3, [pc, #24]	@ (8014ccc <prvCheckTasksWaitingTermination+0x58>)
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d1e1      	bne.n	8014c7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014cb8:	bf00      	nop
 8014cba:	bf00      	nop
 8014cbc:	3708      	adds	r7, #8
 8014cbe:	46bd      	mov	sp, r7
 8014cc0:	bd80      	pop	{r7, pc}
 8014cc2:	bf00      	nop
 8014cc4:	240016b8 	.word	0x240016b8
 8014cc8:	240016e4 	.word	0x240016e4
 8014ccc:	240016cc 	.word	0x240016cc

08014cd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b084      	sub	sp, #16
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	3354      	adds	r3, #84	@ 0x54
 8014cdc:	4618      	mov	r0, r3
 8014cde:	f002 f81d 	bl	8016d1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d108      	bne.n	8014cfe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	f001 fb39 	bl	8016368 <vPortFree>
				vPortFree( pxTCB );
 8014cf6:	6878      	ldr	r0, [r7, #4]
 8014cf8:	f001 fb36 	bl	8016368 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014cfc:	e019      	b.n	8014d32 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014d04:	2b01      	cmp	r3, #1
 8014d06:	d103      	bne.n	8014d10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014d08:	6878      	ldr	r0, [r7, #4]
 8014d0a:	f001 fb2d 	bl	8016368 <vPortFree>
	}
 8014d0e:	e010      	b.n	8014d32 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014d16:	2b02      	cmp	r3, #2
 8014d18:	d00b      	beq.n	8014d32 <prvDeleteTCB+0x62>
	__asm volatile
 8014d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d1e:	f383 8811 	msr	BASEPRI, r3
 8014d22:	f3bf 8f6f 	isb	sy
 8014d26:	f3bf 8f4f 	dsb	sy
 8014d2a:	60fb      	str	r3, [r7, #12]
}
 8014d2c:	bf00      	nop
 8014d2e:	bf00      	nop
 8014d30:	e7fd      	b.n	8014d2e <prvDeleteTCB+0x5e>
	}
 8014d32:	bf00      	nop
 8014d34:	3710      	adds	r7, #16
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}
	...

08014d3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014d3c:	b480      	push	{r7}
 8014d3e:	b083      	sub	sp, #12
 8014d40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014d42:	4b0c      	ldr	r3, [pc, #48]	@ (8014d74 <prvResetNextTaskUnblockTime+0x38>)
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d104      	bne.n	8014d56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8014d78 <prvResetNextTaskUnblockTime+0x3c>)
 8014d4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014d52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014d54:	e008      	b.n	8014d68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d56:	4b07      	ldr	r3, [pc, #28]	@ (8014d74 <prvResetNextTaskUnblockTime+0x38>)
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	68db      	ldr	r3, [r3, #12]
 8014d5c:	68db      	ldr	r3, [r3, #12]
 8014d5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	685b      	ldr	r3, [r3, #4]
 8014d64:	4a04      	ldr	r2, [pc, #16]	@ (8014d78 <prvResetNextTaskUnblockTime+0x3c>)
 8014d66:	6013      	str	r3, [r2, #0]
}
 8014d68:	bf00      	nop
 8014d6a:	370c      	adds	r7, #12
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d72:	4770      	bx	lr
 8014d74:	2400169c 	.word	0x2400169c
 8014d78:	24001704 	.word	0x24001704

08014d7c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8014d7c:	b480      	push	{r7}
 8014d7e:	b083      	sub	sp, #12
 8014d80:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8014d82:	4b05      	ldr	r3, [pc, #20]	@ (8014d98 <xTaskGetCurrentTaskHandle+0x1c>)
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	607b      	str	r3, [r7, #4]

		return xReturn;
 8014d88:	687b      	ldr	r3, [r7, #4]
	}
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	370c      	adds	r7, #12
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d94:	4770      	bx	lr
 8014d96:	bf00      	nop
 8014d98:	24001210 	.word	0x24001210

08014d9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014d9c:	b480      	push	{r7}
 8014d9e:	b083      	sub	sp, #12
 8014da0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014da2:	4b0b      	ldr	r3, [pc, #44]	@ (8014dd0 <xTaskGetSchedulerState+0x34>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d102      	bne.n	8014db0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014daa:	2301      	movs	r3, #1
 8014dac:	607b      	str	r3, [r7, #4]
 8014dae:	e008      	b.n	8014dc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014db0:	4b08      	ldr	r3, [pc, #32]	@ (8014dd4 <xTaskGetSchedulerState+0x38>)
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d102      	bne.n	8014dbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014db8:	2302      	movs	r3, #2
 8014dba:	607b      	str	r3, [r7, #4]
 8014dbc:	e001      	b.n	8014dc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014dc2:	687b      	ldr	r3, [r7, #4]
	}
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	370c      	adds	r7, #12
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dce:	4770      	bx	lr
 8014dd0:	240016f0 	.word	0x240016f0
 8014dd4:	2400170c 	.word	0x2400170c

08014dd8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b084      	sub	sp, #16
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014de4:	2300      	movs	r3, #0
 8014de6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d051      	beq.n	8014e92 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014dee:	68bb      	ldr	r3, [r7, #8]
 8014df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014df2:	4b2a      	ldr	r3, [pc, #168]	@ (8014e9c <xTaskPriorityInherit+0xc4>)
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014df8:	429a      	cmp	r2, r3
 8014dfa:	d241      	bcs.n	8014e80 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014dfc:	68bb      	ldr	r3, [r7, #8]
 8014dfe:	699b      	ldr	r3, [r3, #24]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	db06      	blt.n	8014e12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014e04:	4b25      	ldr	r3, [pc, #148]	@ (8014e9c <xTaskPriorityInherit+0xc4>)
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e0a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014e0e:	68bb      	ldr	r3, [r7, #8]
 8014e10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014e12:	68bb      	ldr	r3, [r7, #8]
 8014e14:	6959      	ldr	r1, [r3, #20]
 8014e16:	68bb      	ldr	r3, [r7, #8]
 8014e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e1a:	4613      	mov	r3, r2
 8014e1c:	009b      	lsls	r3, r3, #2
 8014e1e:	4413      	add	r3, r2
 8014e20:	009b      	lsls	r3, r3, #2
 8014e22:	4a1f      	ldr	r2, [pc, #124]	@ (8014ea0 <xTaskPriorityInherit+0xc8>)
 8014e24:	4413      	add	r3, r2
 8014e26:	4299      	cmp	r1, r3
 8014e28:	d122      	bne.n	8014e70 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014e2a:	68bb      	ldr	r3, [r7, #8]
 8014e2c:	3304      	adds	r3, #4
 8014e2e:	4618      	mov	r0, r3
 8014e30:	f7fe f842 	bl	8012eb8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014e34:	4b19      	ldr	r3, [pc, #100]	@ (8014e9c <xTaskPriorityInherit+0xc4>)
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e3a:	68bb      	ldr	r3, [r7, #8]
 8014e3c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014e3e:	68bb      	ldr	r3, [r7, #8]
 8014e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e42:	4b18      	ldr	r3, [pc, #96]	@ (8014ea4 <xTaskPriorityInherit+0xcc>)
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	429a      	cmp	r2, r3
 8014e48:	d903      	bls.n	8014e52 <xTaskPriorityInherit+0x7a>
 8014e4a:	68bb      	ldr	r3, [r7, #8]
 8014e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e4e:	4a15      	ldr	r2, [pc, #84]	@ (8014ea4 <xTaskPriorityInherit+0xcc>)
 8014e50:	6013      	str	r3, [r2, #0]
 8014e52:	68bb      	ldr	r3, [r7, #8]
 8014e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e56:	4613      	mov	r3, r2
 8014e58:	009b      	lsls	r3, r3, #2
 8014e5a:	4413      	add	r3, r2
 8014e5c:	009b      	lsls	r3, r3, #2
 8014e5e:	4a10      	ldr	r2, [pc, #64]	@ (8014ea0 <xTaskPriorityInherit+0xc8>)
 8014e60:	441a      	add	r2, r3
 8014e62:	68bb      	ldr	r3, [r7, #8]
 8014e64:	3304      	adds	r3, #4
 8014e66:	4619      	mov	r1, r3
 8014e68:	4610      	mov	r0, r2
 8014e6a:	f7fd ffc8 	bl	8012dfe <vListInsertEnd>
 8014e6e:	e004      	b.n	8014e7a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014e70:	4b0a      	ldr	r3, [pc, #40]	@ (8014e9c <xTaskPriorityInherit+0xc4>)
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e76:	68bb      	ldr	r3, [r7, #8]
 8014e78:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014e7a:	2301      	movs	r3, #1
 8014e7c:	60fb      	str	r3, [r7, #12]
 8014e7e:	e008      	b.n	8014e92 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014e80:	68bb      	ldr	r3, [r7, #8]
 8014e82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014e84:	4b05      	ldr	r3, [pc, #20]	@ (8014e9c <xTaskPriorityInherit+0xc4>)
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	d201      	bcs.n	8014e92 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014e8e:	2301      	movs	r3, #1
 8014e90:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014e92:	68fb      	ldr	r3, [r7, #12]
	}
 8014e94:	4618      	mov	r0, r3
 8014e96:	3710      	adds	r7, #16
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	bd80      	pop	{r7, pc}
 8014e9c:	24001210 	.word	0x24001210
 8014ea0:	24001214 	.word	0x24001214
 8014ea4:	240016ec 	.word	0x240016ec

08014ea8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b086      	sub	sp, #24
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d058      	beq.n	8014f70 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014ebe:	4b2f      	ldr	r3, [pc, #188]	@ (8014f7c <xTaskPriorityDisinherit+0xd4>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	693a      	ldr	r2, [r7, #16]
 8014ec4:	429a      	cmp	r2, r3
 8014ec6:	d00b      	beq.n	8014ee0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8014ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ecc:	f383 8811 	msr	BASEPRI, r3
 8014ed0:	f3bf 8f6f 	isb	sy
 8014ed4:	f3bf 8f4f 	dsb	sy
 8014ed8:	60fb      	str	r3, [r7, #12]
}
 8014eda:	bf00      	nop
 8014edc:	bf00      	nop
 8014ede:	e7fd      	b.n	8014edc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014ee0:	693b      	ldr	r3, [r7, #16]
 8014ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d10b      	bne.n	8014f00 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8014ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014eec:	f383 8811 	msr	BASEPRI, r3
 8014ef0:	f3bf 8f6f 	isb	sy
 8014ef4:	f3bf 8f4f 	dsb	sy
 8014ef8:	60bb      	str	r3, [r7, #8]
}
 8014efa:	bf00      	nop
 8014efc:	bf00      	nop
 8014efe:	e7fd      	b.n	8014efc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8014f00:	693b      	ldr	r3, [r7, #16]
 8014f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014f04:	1e5a      	subs	r2, r3, #1
 8014f06:	693b      	ldr	r3, [r7, #16]
 8014f08:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014f0a:	693b      	ldr	r3, [r7, #16]
 8014f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f0e:	693b      	ldr	r3, [r7, #16]
 8014f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014f12:	429a      	cmp	r2, r3
 8014f14:	d02c      	beq.n	8014f70 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014f16:	693b      	ldr	r3, [r7, #16]
 8014f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d128      	bne.n	8014f70 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014f1e:	693b      	ldr	r3, [r7, #16]
 8014f20:	3304      	adds	r3, #4
 8014f22:	4618      	mov	r0, r3
 8014f24:	f7fd ffc8 	bl	8012eb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014f28:	693b      	ldr	r3, [r7, #16]
 8014f2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014f2c:	693b      	ldr	r3, [r7, #16]
 8014f2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f30:	693b      	ldr	r3, [r7, #16]
 8014f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014f38:	693b      	ldr	r3, [r7, #16]
 8014f3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014f3c:	693b      	ldr	r3, [r7, #16]
 8014f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f40:	4b0f      	ldr	r3, [pc, #60]	@ (8014f80 <xTaskPriorityDisinherit+0xd8>)
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	429a      	cmp	r2, r3
 8014f46:	d903      	bls.n	8014f50 <xTaskPriorityDisinherit+0xa8>
 8014f48:	693b      	ldr	r3, [r7, #16]
 8014f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f4c:	4a0c      	ldr	r2, [pc, #48]	@ (8014f80 <xTaskPriorityDisinherit+0xd8>)
 8014f4e:	6013      	str	r3, [r2, #0]
 8014f50:	693b      	ldr	r3, [r7, #16]
 8014f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f54:	4613      	mov	r3, r2
 8014f56:	009b      	lsls	r3, r3, #2
 8014f58:	4413      	add	r3, r2
 8014f5a:	009b      	lsls	r3, r3, #2
 8014f5c:	4a09      	ldr	r2, [pc, #36]	@ (8014f84 <xTaskPriorityDisinherit+0xdc>)
 8014f5e:	441a      	add	r2, r3
 8014f60:	693b      	ldr	r3, [r7, #16]
 8014f62:	3304      	adds	r3, #4
 8014f64:	4619      	mov	r1, r3
 8014f66:	4610      	mov	r0, r2
 8014f68:	f7fd ff49 	bl	8012dfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014f6c:	2301      	movs	r3, #1
 8014f6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014f70:	697b      	ldr	r3, [r7, #20]
	}
 8014f72:	4618      	mov	r0, r3
 8014f74:	3718      	adds	r7, #24
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}
 8014f7a:	bf00      	nop
 8014f7c:	24001210 	.word	0x24001210
 8014f80:	240016ec 	.word	0x240016ec
 8014f84:	24001214 	.word	0x24001214

08014f88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b088      	sub	sp, #32
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	6078      	str	r0, [r7, #4]
 8014f90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014f96:	2301      	movs	r3, #1
 8014f98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d06c      	beq.n	801507a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014fa0:	69bb      	ldr	r3, [r7, #24]
 8014fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d10b      	bne.n	8014fc0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8014fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fac:	f383 8811 	msr	BASEPRI, r3
 8014fb0:	f3bf 8f6f 	isb	sy
 8014fb4:	f3bf 8f4f 	dsb	sy
 8014fb8:	60fb      	str	r3, [r7, #12]
}
 8014fba:	bf00      	nop
 8014fbc:	bf00      	nop
 8014fbe:	e7fd      	b.n	8014fbc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014fc0:	69bb      	ldr	r3, [r7, #24]
 8014fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014fc4:	683a      	ldr	r2, [r7, #0]
 8014fc6:	429a      	cmp	r2, r3
 8014fc8:	d902      	bls.n	8014fd0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014fca:	683b      	ldr	r3, [r7, #0]
 8014fcc:	61fb      	str	r3, [r7, #28]
 8014fce:	e002      	b.n	8014fd6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014fd0:	69bb      	ldr	r3, [r7, #24]
 8014fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014fd4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014fd6:	69bb      	ldr	r3, [r7, #24]
 8014fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014fda:	69fa      	ldr	r2, [r7, #28]
 8014fdc:	429a      	cmp	r2, r3
 8014fde:	d04c      	beq.n	801507a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014fe0:	69bb      	ldr	r3, [r7, #24]
 8014fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014fe4:	697a      	ldr	r2, [r7, #20]
 8014fe6:	429a      	cmp	r2, r3
 8014fe8:	d147      	bne.n	801507a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014fea:	4b26      	ldr	r3, [pc, #152]	@ (8015084 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	69ba      	ldr	r2, [r7, #24]
 8014ff0:	429a      	cmp	r2, r3
 8014ff2:	d10b      	bne.n	801500c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8014ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ff8:	f383 8811 	msr	BASEPRI, r3
 8014ffc:	f3bf 8f6f 	isb	sy
 8015000:	f3bf 8f4f 	dsb	sy
 8015004:	60bb      	str	r3, [r7, #8]
}
 8015006:	bf00      	nop
 8015008:	bf00      	nop
 801500a:	e7fd      	b.n	8015008 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801500c:	69bb      	ldr	r3, [r7, #24]
 801500e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015010:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8015012:	69bb      	ldr	r3, [r7, #24]
 8015014:	69fa      	ldr	r2, [r7, #28]
 8015016:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015018:	69bb      	ldr	r3, [r7, #24]
 801501a:	699b      	ldr	r3, [r3, #24]
 801501c:	2b00      	cmp	r3, #0
 801501e:	db04      	blt.n	801502a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015020:	69fb      	ldr	r3, [r7, #28]
 8015022:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015026:	69bb      	ldr	r3, [r7, #24]
 8015028:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801502a:	69bb      	ldr	r3, [r7, #24]
 801502c:	6959      	ldr	r1, [r3, #20]
 801502e:	693a      	ldr	r2, [r7, #16]
 8015030:	4613      	mov	r3, r2
 8015032:	009b      	lsls	r3, r3, #2
 8015034:	4413      	add	r3, r2
 8015036:	009b      	lsls	r3, r3, #2
 8015038:	4a13      	ldr	r2, [pc, #76]	@ (8015088 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801503a:	4413      	add	r3, r2
 801503c:	4299      	cmp	r1, r3
 801503e:	d11c      	bne.n	801507a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015040:	69bb      	ldr	r3, [r7, #24]
 8015042:	3304      	adds	r3, #4
 8015044:	4618      	mov	r0, r3
 8015046:	f7fd ff37 	bl	8012eb8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801504a:	69bb      	ldr	r3, [r7, #24]
 801504c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801504e:	4b0f      	ldr	r3, [pc, #60]	@ (801508c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	429a      	cmp	r2, r3
 8015054:	d903      	bls.n	801505e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8015056:	69bb      	ldr	r3, [r7, #24]
 8015058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801505a:	4a0c      	ldr	r2, [pc, #48]	@ (801508c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801505c:	6013      	str	r3, [r2, #0]
 801505e:	69bb      	ldr	r3, [r7, #24]
 8015060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015062:	4613      	mov	r3, r2
 8015064:	009b      	lsls	r3, r3, #2
 8015066:	4413      	add	r3, r2
 8015068:	009b      	lsls	r3, r3, #2
 801506a:	4a07      	ldr	r2, [pc, #28]	@ (8015088 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801506c:	441a      	add	r2, r3
 801506e:	69bb      	ldr	r3, [r7, #24]
 8015070:	3304      	adds	r3, #4
 8015072:	4619      	mov	r1, r3
 8015074:	4610      	mov	r0, r2
 8015076:	f7fd fec2 	bl	8012dfe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801507a:	bf00      	nop
 801507c:	3720      	adds	r7, #32
 801507e:	46bd      	mov	sp, r7
 8015080:	bd80      	pop	{r7, pc}
 8015082:	bf00      	nop
 8015084:	24001210 	.word	0x24001210
 8015088:	24001214 	.word	0x24001214
 801508c:	240016ec 	.word	0x240016ec

08015090 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015090:	b480      	push	{r7}
 8015092:	b083      	sub	sp, #12
 8015094:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015096:	4b09      	ldr	r3, [pc, #36]	@ (80150bc <uxTaskResetEventItemValue+0x2c>)
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	699b      	ldr	r3, [r3, #24]
 801509c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801509e:	4b07      	ldr	r3, [pc, #28]	@ (80150bc <uxTaskResetEventItemValue+0x2c>)
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150a4:	4b05      	ldr	r3, [pc, #20]	@ (80150bc <uxTaskResetEventItemValue+0x2c>)
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80150ac:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80150ae:	687b      	ldr	r3, [r7, #4]
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	370c      	adds	r7, #12
 80150b4:	46bd      	mov	sp, r7
 80150b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ba:	4770      	bx	lr
 80150bc:	24001210 	.word	0x24001210

080150c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80150c0:	b480      	push	{r7}
 80150c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80150c4:	4b07      	ldr	r3, [pc, #28]	@ (80150e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d004      	beq.n	80150d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80150cc:	4b05      	ldr	r3, [pc, #20]	@ (80150e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80150d2:	3201      	adds	r2, #1
 80150d4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80150d6:	4b03      	ldr	r3, [pc, #12]	@ (80150e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80150d8:	681b      	ldr	r3, [r3, #0]
	}
 80150da:	4618      	mov	r0, r3
 80150dc:	46bd      	mov	sp, r7
 80150de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e2:	4770      	bx	lr
 80150e4:	24001210 	.word	0x24001210

080150e8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b084      	sub	sp, #16
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
 80150f0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80150f2:	f000 ff49 	bl	8015f88 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80150f6:	4b20      	ldr	r3, [pc, #128]	@ (8015178 <ulTaskNotifyTake+0x90>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d113      	bne.n	801512a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8015102:	4b1d      	ldr	r3, [pc, #116]	@ (8015178 <ulTaskNotifyTake+0x90>)
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	2201      	movs	r2, #1
 8015108:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 801510c:	683b      	ldr	r3, [r7, #0]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d00b      	beq.n	801512a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015112:	2101      	movs	r1, #1
 8015114:	6838      	ldr	r0, [r7, #0]
 8015116:	f000 f9db 	bl	80154d0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801511a:	4b18      	ldr	r3, [pc, #96]	@ (801517c <ulTaskNotifyTake+0x94>)
 801511c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015120:	601a      	str	r2, [r3, #0]
 8015122:	f3bf 8f4f 	dsb	sy
 8015126:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801512a:	f000 ff5f 	bl	8015fec <vPortExitCritical>

		taskENTER_CRITICAL();
 801512e:	f000 ff2b 	bl	8015f88 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8015132:	4b11      	ldr	r3, [pc, #68]	@ (8015178 <ulTaskNotifyTake+0x90>)
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801513a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d00e      	beq.n	8015160 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d005      	beq.n	8015154 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8015148:	4b0b      	ldr	r3, [pc, #44]	@ (8015178 <ulTaskNotifyTake+0x90>)
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	2200      	movs	r2, #0
 801514e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8015152:	e005      	b.n	8015160 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8015154:	4b08      	ldr	r3, [pc, #32]	@ (8015178 <ulTaskNotifyTake+0x90>)
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	68fa      	ldr	r2, [r7, #12]
 801515a:	3a01      	subs	r2, #1
 801515c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015160:	4b05      	ldr	r3, [pc, #20]	@ (8015178 <ulTaskNotifyTake+0x90>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	2200      	movs	r2, #0
 8015166:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 801516a:	f000 ff3f 	bl	8015fec <vPortExitCritical>

		return ulReturn;
 801516e:	68fb      	ldr	r3, [r7, #12]
	}
 8015170:	4618      	mov	r0, r3
 8015172:	3710      	adds	r7, #16
 8015174:	46bd      	mov	sp, r7
 8015176:	bd80      	pop	{r7, pc}
 8015178:	24001210 	.word	0x24001210
 801517c:	e000ed04 	.word	0xe000ed04

08015180 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8015180:	b580      	push	{r7, lr}
 8015182:	b08a      	sub	sp, #40	@ 0x28
 8015184:	af00      	add	r7, sp, #0
 8015186:	60f8      	str	r0, [r7, #12]
 8015188:	60b9      	str	r1, [r7, #8]
 801518a:	603b      	str	r3, [r7, #0]
 801518c:	4613      	mov	r3, r2
 801518e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8015190:	2301      	movs	r3, #1
 8015192:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d10b      	bne.n	80151b2 <xTaskGenericNotify+0x32>
	__asm volatile
 801519a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801519e:	f383 8811 	msr	BASEPRI, r3
 80151a2:	f3bf 8f6f 	isb	sy
 80151a6:	f3bf 8f4f 	dsb	sy
 80151aa:	61bb      	str	r3, [r7, #24]
}
 80151ac:	bf00      	nop
 80151ae:	bf00      	nop
 80151b0:	e7fd      	b.n	80151ae <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80151b6:	f000 fee7 	bl	8015f88 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80151ba:	683b      	ldr	r3, [r7, #0]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d004      	beq.n	80151ca <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80151c0:	6a3b      	ldr	r3, [r7, #32]
 80151c2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80151c6:	683b      	ldr	r3, [r7, #0]
 80151c8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80151ca:	6a3b      	ldr	r3, [r7, #32]
 80151cc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80151d0:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80151d2:	6a3b      	ldr	r3, [r7, #32]
 80151d4:	2202      	movs	r2, #2
 80151d6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80151da:	79fb      	ldrb	r3, [r7, #7]
 80151dc:	2b04      	cmp	r3, #4
 80151de:	d82e      	bhi.n	801523e <xTaskGenericNotify+0xbe>
 80151e0:	a201      	add	r2, pc, #4	@ (adr r2, 80151e8 <xTaskGenericNotify+0x68>)
 80151e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151e6:	bf00      	nop
 80151e8:	08015263 	.word	0x08015263
 80151ec:	080151fd 	.word	0x080151fd
 80151f0:	0801520f 	.word	0x0801520f
 80151f4:	0801521f 	.word	0x0801521f
 80151f8:	08015229 	.word	0x08015229
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80151fc:	6a3b      	ldr	r3, [r7, #32]
 80151fe:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015202:	68bb      	ldr	r3, [r7, #8]
 8015204:	431a      	orrs	r2, r3
 8015206:	6a3b      	ldr	r3, [r7, #32]
 8015208:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801520c:	e02c      	b.n	8015268 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801520e:	6a3b      	ldr	r3, [r7, #32]
 8015210:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015214:	1c5a      	adds	r2, r3, #1
 8015216:	6a3b      	ldr	r3, [r7, #32]
 8015218:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801521c:	e024      	b.n	8015268 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801521e:	6a3b      	ldr	r3, [r7, #32]
 8015220:	68ba      	ldr	r2, [r7, #8]
 8015222:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015226:	e01f      	b.n	8015268 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8015228:	7ffb      	ldrb	r3, [r7, #31]
 801522a:	2b02      	cmp	r3, #2
 801522c:	d004      	beq.n	8015238 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801522e:	6a3b      	ldr	r3, [r7, #32]
 8015230:	68ba      	ldr	r2, [r7, #8]
 8015232:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8015236:	e017      	b.n	8015268 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8015238:	2300      	movs	r3, #0
 801523a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 801523c:	e014      	b.n	8015268 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801523e:	6a3b      	ldr	r3, [r7, #32]
 8015240:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015244:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015248:	d00d      	beq.n	8015266 <xTaskGenericNotify+0xe6>
	__asm volatile
 801524a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801524e:	f383 8811 	msr	BASEPRI, r3
 8015252:	f3bf 8f6f 	isb	sy
 8015256:	f3bf 8f4f 	dsb	sy
 801525a:	617b      	str	r3, [r7, #20]
}
 801525c:	bf00      	nop
 801525e:	bf00      	nop
 8015260:	e7fd      	b.n	801525e <xTaskGenericNotify+0xde>
					break;
 8015262:	bf00      	nop
 8015264:	e000      	b.n	8015268 <xTaskGenericNotify+0xe8>

					break;
 8015266:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015268:	7ffb      	ldrb	r3, [r7, #31]
 801526a:	2b01      	cmp	r3, #1
 801526c:	d13b      	bne.n	80152e6 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801526e:	6a3b      	ldr	r3, [r7, #32]
 8015270:	3304      	adds	r3, #4
 8015272:	4618      	mov	r0, r3
 8015274:	f7fd fe20 	bl	8012eb8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8015278:	6a3b      	ldr	r3, [r7, #32]
 801527a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801527c:	4b1d      	ldr	r3, [pc, #116]	@ (80152f4 <xTaskGenericNotify+0x174>)
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	429a      	cmp	r2, r3
 8015282:	d903      	bls.n	801528c <xTaskGenericNotify+0x10c>
 8015284:	6a3b      	ldr	r3, [r7, #32]
 8015286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015288:	4a1a      	ldr	r2, [pc, #104]	@ (80152f4 <xTaskGenericNotify+0x174>)
 801528a:	6013      	str	r3, [r2, #0]
 801528c:	6a3b      	ldr	r3, [r7, #32]
 801528e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015290:	4613      	mov	r3, r2
 8015292:	009b      	lsls	r3, r3, #2
 8015294:	4413      	add	r3, r2
 8015296:	009b      	lsls	r3, r3, #2
 8015298:	4a17      	ldr	r2, [pc, #92]	@ (80152f8 <xTaskGenericNotify+0x178>)
 801529a:	441a      	add	r2, r3
 801529c:	6a3b      	ldr	r3, [r7, #32]
 801529e:	3304      	adds	r3, #4
 80152a0:	4619      	mov	r1, r3
 80152a2:	4610      	mov	r0, r2
 80152a4:	f7fd fdab 	bl	8012dfe <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80152a8:	6a3b      	ldr	r3, [r7, #32]
 80152aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d00b      	beq.n	80152c8 <xTaskGenericNotify+0x148>
	__asm volatile
 80152b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152b4:	f383 8811 	msr	BASEPRI, r3
 80152b8:	f3bf 8f6f 	isb	sy
 80152bc:	f3bf 8f4f 	dsb	sy
 80152c0:	613b      	str	r3, [r7, #16]
}
 80152c2:	bf00      	nop
 80152c4:	bf00      	nop
 80152c6:	e7fd      	b.n	80152c4 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80152c8:	6a3b      	ldr	r3, [r7, #32]
 80152ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80152cc:	4b0b      	ldr	r3, [pc, #44]	@ (80152fc <xTaskGenericNotify+0x17c>)
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152d2:	429a      	cmp	r2, r3
 80152d4:	d907      	bls.n	80152e6 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80152d6:	4b0a      	ldr	r3, [pc, #40]	@ (8015300 <xTaskGenericNotify+0x180>)
 80152d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80152dc:	601a      	str	r2, [r3, #0]
 80152de:	f3bf 8f4f 	dsb	sy
 80152e2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80152e6:	f000 fe81 	bl	8015fec <vPortExitCritical>

		return xReturn;
 80152ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80152ec:	4618      	mov	r0, r3
 80152ee:	3728      	adds	r7, #40	@ 0x28
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd80      	pop	{r7, pc}
 80152f4:	240016ec 	.word	0x240016ec
 80152f8:	24001214 	.word	0x24001214
 80152fc:	24001210 	.word	0x24001210
 8015300:	e000ed04 	.word	0xe000ed04

08015304 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015304:	b580      	push	{r7, lr}
 8015306:	b08e      	sub	sp, #56	@ 0x38
 8015308:	af00      	add	r7, sp, #0
 801530a:	60f8      	str	r0, [r7, #12]
 801530c:	60b9      	str	r1, [r7, #8]
 801530e:	603b      	str	r3, [r7, #0]
 8015310:	4613      	mov	r3, r2
 8015312:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8015314:	2301      	movs	r3, #1
 8015316:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d10b      	bne.n	8015336 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 801531e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015322:	f383 8811 	msr	BASEPRI, r3
 8015326:	f3bf 8f6f 	isb	sy
 801532a:	f3bf 8f4f 	dsb	sy
 801532e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015330:	bf00      	nop
 8015332:	bf00      	nop
 8015334:	e7fd      	b.n	8015332 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015336:	f000 ff07 	bl	8016148 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 801533e:	f3ef 8211 	mrs	r2, BASEPRI
 8015342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015346:	f383 8811 	msr	BASEPRI, r3
 801534a:	f3bf 8f6f 	isb	sy
 801534e:	f3bf 8f4f 	dsb	sy
 8015352:	623a      	str	r2, [r7, #32]
 8015354:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8015356:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015358:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801535a:	683b      	ldr	r3, [r7, #0]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d004      	beq.n	801536a <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8015360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015362:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015366:	683b      	ldr	r3, [r7, #0]
 8015368:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801536a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801536c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8015370:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015376:	2202      	movs	r2, #2
 8015378:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 801537c:	79fb      	ldrb	r3, [r7, #7]
 801537e:	2b04      	cmp	r3, #4
 8015380:	d82e      	bhi.n	80153e0 <xTaskGenericNotifyFromISR+0xdc>
 8015382:	a201      	add	r2, pc, #4	@ (adr r2, 8015388 <xTaskGenericNotifyFromISR+0x84>)
 8015384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015388:	08015405 	.word	0x08015405
 801538c:	0801539d 	.word	0x0801539d
 8015390:	080153af 	.word	0x080153af
 8015394:	080153bf 	.word	0x080153bf
 8015398:	080153c9 	.word	0x080153c9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801539c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801539e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80153a2:	68bb      	ldr	r3, [r7, #8]
 80153a4:	431a      	orrs	r2, r3
 80153a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153a8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80153ac:	e02d      	b.n	801540a <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80153ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80153b4:	1c5a      	adds	r2, r3, #1
 80153b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153b8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80153bc:	e025      	b.n	801540a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80153be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153c0:	68ba      	ldr	r2, [r7, #8]
 80153c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80153c6:	e020      	b.n	801540a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80153c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80153cc:	2b02      	cmp	r3, #2
 80153ce:	d004      	beq.n	80153da <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80153d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153d2:	68ba      	ldr	r2, [r7, #8]
 80153d4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80153d8:	e017      	b.n	801540a <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 80153da:	2300      	movs	r3, #0
 80153dc:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80153de:	e014      	b.n	801540a <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80153e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80153e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80153ea:	d00d      	beq.n	8015408 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 80153ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153f0:	f383 8811 	msr	BASEPRI, r3
 80153f4:	f3bf 8f6f 	isb	sy
 80153f8:	f3bf 8f4f 	dsb	sy
 80153fc:	61bb      	str	r3, [r7, #24]
}
 80153fe:	bf00      	nop
 8015400:	bf00      	nop
 8015402:	e7fd      	b.n	8015400 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8015404:	bf00      	nop
 8015406:	e000      	b.n	801540a <xTaskGenericNotifyFromISR+0x106>
					break;
 8015408:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801540a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801540e:	2b01      	cmp	r3, #1
 8015410:	d147      	bne.n	80154a2 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8015412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015416:	2b00      	cmp	r3, #0
 8015418:	d00b      	beq.n	8015432 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 801541a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801541e:	f383 8811 	msr	BASEPRI, r3
 8015422:	f3bf 8f6f 	isb	sy
 8015426:	f3bf 8f4f 	dsb	sy
 801542a:	617b      	str	r3, [r7, #20]
}
 801542c:	bf00      	nop
 801542e:	bf00      	nop
 8015430:	e7fd      	b.n	801542e <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015432:	4b21      	ldr	r3, [pc, #132]	@ (80154b8 <xTaskGenericNotifyFromISR+0x1b4>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d11d      	bne.n	8015476 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801543a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801543c:	3304      	adds	r3, #4
 801543e:	4618      	mov	r0, r3
 8015440:	f7fd fd3a 	bl	8012eb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015448:	4b1c      	ldr	r3, [pc, #112]	@ (80154bc <xTaskGenericNotifyFromISR+0x1b8>)
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	429a      	cmp	r2, r3
 801544e:	d903      	bls.n	8015458 <xTaskGenericNotifyFromISR+0x154>
 8015450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015454:	4a19      	ldr	r2, [pc, #100]	@ (80154bc <xTaskGenericNotifyFromISR+0x1b8>)
 8015456:	6013      	str	r3, [r2, #0]
 8015458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801545a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801545c:	4613      	mov	r3, r2
 801545e:	009b      	lsls	r3, r3, #2
 8015460:	4413      	add	r3, r2
 8015462:	009b      	lsls	r3, r3, #2
 8015464:	4a16      	ldr	r2, [pc, #88]	@ (80154c0 <xTaskGenericNotifyFromISR+0x1bc>)
 8015466:	441a      	add	r2, r3
 8015468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801546a:	3304      	adds	r3, #4
 801546c:	4619      	mov	r1, r3
 801546e:	4610      	mov	r0, r2
 8015470:	f7fd fcc5 	bl	8012dfe <vListInsertEnd>
 8015474:	e005      	b.n	8015482 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8015476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015478:	3318      	adds	r3, #24
 801547a:	4619      	mov	r1, r3
 801547c:	4811      	ldr	r0, [pc, #68]	@ (80154c4 <xTaskGenericNotifyFromISR+0x1c0>)
 801547e:	f7fd fcbe 	bl	8012dfe <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015486:	4b10      	ldr	r3, [pc, #64]	@ (80154c8 <xTaskGenericNotifyFromISR+0x1c4>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801548c:	429a      	cmp	r2, r3
 801548e:	d908      	bls.n	80154a2 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8015490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015492:	2b00      	cmp	r3, #0
 8015494:	d002      	beq.n	801549c <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8015496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015498:	2201      	movs	r2, #1
 801549a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801549c:	4b0b      	ldr	r3, [pc, #44]	@ (80154cc <xTaskGenericNotifyFromISR+0x1c8>)
 801549e:	2201      	movs	r2, #1
 80154a0:	601a      	str	r2, [r3, #0]
 80154a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80154a6:	693b      	ldr	r3, [r7, #16]
 80154a8:	f383 8811 	msr	BASEPRI, r3
}
 80154ac:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80154ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80154b0:	4618      	mov	r0, r3
 80154b2:	3738      	adds	r7, #56	@ 0x38
 80154b4:	46bd      	mov	sp, r7
 80154b6:	bd80      	pop	{r7, pc}
 80154b8:	2400170c 	.word	0x2400170c
 80154bc:	240016ec 	.word	0x240016ec
 80154c0:	24001214 	.word	0x24001214
 80154c4:	240016a4 	.word	0x240016a4
 80154c8:	24001210 	.word	0x24001210
 80154cc:	240016f8 	.word	0x240016f8

080154d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b084      	sub	sp, #16
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
 80154d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80154da:	4b21      	ldr	r3, [pc, #132]	@ (8015560 <prvAddCurrentTaskToDelayedList+0x90>)
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80154e0:	4b20      	ldr	r3, [pc, #128]	@ (8015564 <prvAddCurrentTaskToDelayedList+0x94>)
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	3304      	adds	r3, #4
 80154e6:	4618      	mov	r0, r3
 80154e8:	f7fd fce6 	bl	8012eb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80154f2:	d10a      	bne.n	801550a <prvAddCurrentTaskToDelayedList+0x3a>
 80154f4:	683b      	ldr	r3, [r7, #0]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d007      	beq.n	801550a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80154fa:	4b1a      	ldr	r3, [pc, #104]	@ (8015564 <prvAddCurrentTaskToDelayedList+0x94>)
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	3304      	adds	r3, #4
 8015500:	4619      	mov	r1, r3
 8015502:	4819      	ldr	r0, [pc, #100]	@ (8015568 <prvAddCurrentTaskToDelayedList+0x98>)
 8015504:	f7fd fc7b 	bl	8012dfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015508:	e026      	b.n	8015558 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801550a:	68fa      	ldr	r2, [r7, #12]
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	4413      	add	r3, r2
 8015510:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015512:	4b14      	ldr	r3, [pc, #80]	@ (8015564 <prvAddCurrentTaskToDelayedList+0x94>)
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	68ba      	ldr	r2, [r7, #8]
 8015518:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801551a:	68ba      	ldr	r2, [r7, #8]
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	429a      	cmp	r2, r3
 8015520:	d209      	bcs.n	8015536 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015522:	4b12      	ldr	r3, [pc, #72]	@ (801556c <prvAddCurrentTaskToDelayedList+0x9c>)
 8015524:	681a      	ldr	r2, [r3, #0]
 8015526:	4b0f      	ldr	r3, [pc, #60]	@ (8015564 <prvAddCurrentTaskToDelayedList+0x94>)
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	3304      	adds	r3, #4
 801552c:	4619      	mov	r1, r3
 801552e:	4610      	mov	r0, r2
 8015530:	f7fd fc89 	bl	8012e46 <vListInsert>
}
 8015534:	e010      	b.n	8015558 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015536:	4b0e      	ldr	r3, [pc, #56]	@ (8015570 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015538:	681a      	ldr	r2, [r3, #0]
 801553a:	4b0a      	ldr	r3, [pc, #40]	@ (8015564 <prvAddCurrentTaskToDelayedList+0x94>)
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	3304      	adds	r3, #4
 8015540:	4619      	mov	r1, r3
 8015542:	4610      	mov	r0, r2
 8015544:	f7fd fc7f 	bl	8012e46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015548:	4b0a      	ldr	r3, [pc, #40]	@ (8015574 <prvAddCurrentTaskToDelayedList+0xa4>)
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	68ba      	ldr	r2, [r7, #8]
 801554e:	429a      	cmp	r2, r3
 8015550:	d202      	bcs.n	8015558 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015552:	4a08      	ldr	r2, [pc, #32]	@ (8015574 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015554:	68bb      	ldr	r3, [r7, #8]
 8015556:	6013      	str	r3, [r2, #0]
}
 8015558:	bf00      	nop
 801555a:	3710      	adds	r7, #16
 801555c:	46bd      	mov	sp, r7
 801555e:	bd80      	pop	{r7, pc}
 8015560:	240016e8 	.word	0x240016e8
 8015564:	24001210 	.word	0x24001210
 8015568:	240016d0 	.word	0x240016d0
 801556c:	240016a0 	.word	0x240016a0
 8015570:	2400169c 	.word	0x2400169c
 8015574:	24001704 	.word	0x24001704

08015578 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b08a      	sub	sp, #40	@ 0x28
 801557c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801557e:	2300      	movs	r3, #0
 8015580:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015582:	f000 fb71 	bl	8015c68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015586:	4b1d      	ldr	r3, [pc, #116]	@ (80155fc <xTimerCreateTimerTask+0x84>)
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d021      	beq.n	80155d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801558e:	2300      	movs	r3, #0
 8015590:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015592:	2300      	movs	r3, #0
 8015594:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015596:	1d3a      	adds	r2, r7, #4
 8015598:	f107 0108 	add.w	r1, r7, #8
 801559c:	f107 030c 	add.w	r3, r7, #12
 80155a0:	4618      	mov	r0, r3
 80155a2:	f7fd fa29 	bl	80129f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80155a6:	6879      	ldr	r1, [r7, #4]
 80155a8:	68bb      	ldr	r3, [r7, #8]
 80155aa:	68fa      	ldr	r2, [r7, #12]
 80155ac:	9202      	str	r2, [sp, #8]
 80155ae:	9301      	str	r3, [sp, #4]
 80155b0:	2302      	movs	r3, #2
 80155b2:	9300      	str	r3, [sp, #0]
 80155b4:	2300      	movs	r3, #0
 80155b6:	460a      	mov	r2, r1
 80155b8:	4911      	ldr	r1, [pc, #68]	@ (8015600 <xTimerCreateTimerTask+0x88>)
 80155ba:	4812      	ldr	r0, [pc, #72]	@ (8015604 <xTimerCreateTimerTask+0x8c>)
 80155bc:	f7fe fcd2 	bl	8013f64 <xTaskCreateStatic>
 80155c0:	4603      	mov	r3, r0
 80155c2:	4a11      	ldr	r2, [pc, #68]	@ (8015608 <xTimerCreateTimerTask+0x90>)
 80155c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80155c6:	4b10      	ldr	r3, [pc, #64]	@ (8015608 <xTimerCreateTimerTask+0x90>)
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d001      	beq.n	80155d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80155ce:	2301      	movs	r3, #1
 80155d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80155d2:	697b      	ldr	r3, [r7, #20]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d10b      	bne.n	80155f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80155d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155dc:	f383 8811 	msr	BASEPRI, r3
 80155e0:	f3bf 8f6f 	isb	sy
 80155e4:	f3bf 8f4f 	dsb	sy
 80155e8:	613b      	str	r3, [r7, #16]
}
 80155ea:	bf00      	nop
 80155ec:	bf00      	nop
 80155ee:	e7fd      	b.n	80155ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80155f0:	697b      	ldr	r3, [r7, #20]
}
 80155f2:	4618      	mov	r0, r3
 80155f4:	3718      	adds	r7, #24
 80155f6:	46bd      	mov	sp, r7
 80155f8:	bd80      	pop	{r7, pc}
 80155fa:	bf00      	nop
 80155fc:	24001740 	.word	0x24001740
 8015600:	08017d10 	.word	0x08017d10
 8015604:	08015801 	.word	0x08015801
 8015608:	24001744 	.word	0x24001744

0801560c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 801560c:	b580      	push	{r7, lr}
 801560e:	b088      	sub	sp, #32
 8015610:	af02      	add	r7, sp, #8
 8015612:	60f8      	str	r0, [r7, #12]
 8015614:	60b9      	str	r1, [r7, #8]
 8015616:	607a      	str	r2, [r7, #4]
 8015618:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801561a:	202c      	movs	r0, #44	@ 0x2c
 801561c:	f000 fdd6 	bl	80161cc <pvPortMalloc>
 8015620:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8015622:	697b      	ldr	r3, [r7, #20]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d00d      	beq.n	8015644 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8015628:	697b      	ldr	r3, [r7, #20]
 801562a:	2200      	movs	r2, #0
 801562c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8015630:	697b      	ldr	r3, [r7, #20]
 8015632:	9301      	str	r3, [sp, #4]
 8015634:	6a3b      	ldr	r3, [r7, #32]
 8015636:	9300      	str	r3, [sp, #0]
 8015638:	683b      	ldr	r3, [r7, #0]
 801563a:	687a      	ldr	r2, [r7, #4]
 801563c:	68b9      	ldr	r1, [r7, #8]
 801563e:	68f8      	ldr	r0, [r7, #12]
 8015640:	f000 f805 	bl	801564e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8015644:	697b      	ldr	r3, [r7, #20]
	}
 8015646:	4618      	mov	r0, r3
 8015648:	3718      	adds	r7, #24
 801564a:	46bd      	mov	sp, r7
 801564c:	bd80      	pop	{r7, pc}

0801564e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801564e:	b580      	push	{r7, lr}
 8015650:	b086      	sub	sp, #24
 8015652:	af00      	add	r7, sp, #0
 8015654:	60f8      	str	r0, [r7, #12]
 8015656:	60b9      	str	r1, [r7, #8]
 8015658:	607a      	str	r2, [r7, #4]
 801565a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801565c:	68bb      	ldr	r3, [r7, #8]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d10b      	bne.n	801567a <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8015662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015666:	f383 8811 	msr	BASEPRI, r3
 801566a:	f3bf 8f6f 	isb	sy
 801566e:	f3bf 8f4f 	dsb	sy
 8015672:	617b      	str	r3, [r7, #20]
}
 8015674:	bf00      	nop
 8015676:	bf00      	nop
 8015678:	e7fd      	b.n	8015676 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 801567a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801567c:	2b00      	cmp	r3, #0
 801567e:	d01e      	beq.n	80156be <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8015680:	f000 faf2 	bl	8015c68 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8015684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015686:	68fa      	ldr	r2, [r7, #12]
 8015688:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801568c:	68ba      	ldr	r2, [r7, #8]
 801568e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8015690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015692:	683a      	ldr	r2, [r7, #0]
 8015694:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8015696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015698:	6a3a      	ldr	r2, [r7, #32]
 801569a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801569e:	3304      	adds	r3, #4
 80156a0:	4618      	mov	r0, r3
 80156a2:	f7fd fb9f 	bl	8012de4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d008      	beq.n	80156be <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80156ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80156b2:	f043 0304 	orr.w	r3, r3, #4
 80156b6:	b2da      	uxtb	r2, r3
 80156b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80156be:	bf00      	nop
 80156c0:	3718      	adds	r7, #24
 80156c2:	46bd      	mov	sp, r7
 80156c4:	bd80      	pop	{r7, pc}
	...

080156c8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80156c8:	b580      	push	{r7, lr}
 80156ca:	b08a      	sub	sp, #40	@ 0x28
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	60f8      	str	r0, [r7, #12]
 80156d0:	60b9      	str	r1, [r7, #8]
 80156d2:	607a      	str	r2, [r7, #4]
 80156d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80156d6:	2300      	movs	r3, #0
 80156d8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d10b      	bne.n	80156f8 <xTimerGenericCommand+0x30>
	__asm volatile
 80156e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156e4:	f383 8811 	msr	BASEPRI, r3
 80156e8:	f3bf 8f6f 	isb	sy
 80156ec:	f3bf 8f4f 	dsb	sy
 80156f0:	623b      	str	r3, [r7, #32]
}
 80156f2:	bf00      	nop
 80156f4:	bf00      	nop
 80156f6:	e7fd      	b.n	80156f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80156f8:	4b19      	ldr	r3, [pc, #100]	@ (8015760 <xTimerGenericCommand+0x98>)
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d02a      	beq.n	8015756 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015700:	68bb      	ldr	r3, [r7, #8]
 8015702:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801570c:	68bb      	ldr	r3, [r7, #8]
 801570e:	2b05      	cmp	r3, #5
 8015710:	dc18      	bgt.n	8015744 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015712:	f7ff fb43 	bl	8014d9c <xTaskGetSchedulerState>
 8015716:	4603      	mov	r3, r0
 8015718:	2b02      	cmp	r3, #2
 801571a:	d109      	bne.n	8015730 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801571c:	4b10      	ldr	r3, [pc, #64]	@ (8015760 <xTimerGenericCommand+0x98>)
 801571e:	6818      	ldr	r0, [r3, #0]
 8015720:	f107 0110 	add.w	r1, r7, #16
 8015724:	2300      	movs	r3, #0
 8015726:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015728:	f7fd fda4 	bl	8013274 <xQueueGenericSend>
 801572c:	6278      	str	r0, [r7, #36]	@ 0x24
 801572e:	e012      	b.n	8015756 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015730:	4b0b      	ldr	r3, [pc, #44]	@ (8015760 <xTimerGenericCommand+0x98>)
 8015732:	6818      	ldr	r0, [r3, #0]
 8015734:	f107 0110 	add.w	r1, r7, #16
 8015738:	2300      	movs	r3, #0
 801573a:	2200      	movs	r2, #0
 801573c:	f7fd fd9a 	bl	8013274 <xQueueGenericSend>
 8015740:	6278      	str	r0, [r7, #36]	@ 0x24
 8015742:	e008      	b.n	8015756 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015744:	4b06      	ldr	r3, [pc, #24]	@ (8015760 <xTimerGenericCommand+0x98>)
 8015746:	6818      	ldr	r0, [r3, #0]
 8015748:	f107 0110 	add.w	r1, r7, #16
 801574c:	2300      	movs	r3, #0
 801574e:	683a      	ldr	r2, [r7, #0]
 8015750:	f7fd fe92 	bl	8013478 <xQueueGenericSendFromISR>
 8015754:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015758:	4618      	mov	r0, r3
 801575a:	3728      	adds	r7, #40	@ 0x28
 801575c:	46bd      	mov	sp, r7
 801575e:	bd80      	pop	{r7, pc}
 8015760:	24001740 	.word	0x24001740

08015764 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b088      	sub	sp, #32
 8015768:	af02      	add	r7, sp, #8
 801576a:	6078      	str	r0, [r7, #4]
 801576c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801576e:	4b23      	ldr	r3, [pc, #140]	@ (80157fc <prvProcessExpiredTimer+0x98>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	68db      	ldr	r3, [r3, #12]
 8015774:	68db      	ldr	r3, [r3, #12]
 8015776:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015778:	697b      	ldr	r3, [r7, #20]
 801577a:	3304      	adds	r3, #4
 801577c:	4618      	mov	r0, r3
 801577e:	f7fd fb9b 	bl	8012eb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015782:	697b      	ldr	r3, [r7, #20]
 8015784:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015788:	f003 0304 	and.w	r3, r3, #4
 801578c:	2b00      	cmp	r3, #0
 801578e:	d023      	beq.n	80157d8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015790:	697b      	ldr	r3, [r7, #20]
 8015792:	699a      	ldr	r2, [r3, #24]
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	18d1      	adds	r1, r2, r3
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	683a      	ldr	r2, [r7, #0]
 801579c:	6978      	ldr	r0, [r7, #20]
 801579e:	f000 f8d5 	bl	801594c <prvInsertTimerInActiveList>
 80157a2:	4603      	mov	r3, r0
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d020      	beq.n	80157ea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80157a8:	2300      	movs	r3, #0
 80157aa:	9300      	str	r3, [sp, #0]
 80157ac:	2300      	movs	r3, #0
 80157ae:	687a      	ldr	r2, [r7, #4]
 80157b0:	2100      	movs	r1, #0
 80157b2:	6978      	ldr	r0, [r7, #20]
 80157b4:	f7ff ff88 	bl	80156c8 <xTimerGenericCommand>
 80157b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80157ba:	693b      	ldr	r3, [r7, #16]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d114      	bne.n	80157ea <prvProcessExpiredTimer+0x86>
	__asm volatile
 80157c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157c4:	f383 8811 	msr	BASEPRI, r3
 80157c8:	f3bf 8f6f 	isb	sy
 80157cc:	f3bf 8f4f 	dsb	sy
 80157d0:	60fb      	str	r3, [r7, #12]
}
 80157d2:	bf00      	nop
 80157d4:	bf00      	nop
 80157d6:	e7fd      	b.n	80157d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80157de:	f023 0301 	bic.w	r3, r3, #1
 80157e2:	b2da      	uxtb	r2, r3
 80157e4:	697b      	ldr	r3, [r7, #20]
 80157e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80157ea:	697b      	ldr	r3, [r7, #20]
 80157ec:	6a1b      	ldr	r3, [r3, #32]
 80157ee:	6978      	ldr	r0, [r7, #20]
 80157f0:	4798      	blx	r3
}
 80157f2:	bf00      	nop
 80157f4:	3718      	adds	r7, #24
 80157f6:	46bd      	mov	sp, r7
 80157f8:	bd80      	pop	{r7, pc}
 80157fa:	bf00      	nop
 80157fc:	24001738 	.word	0x24001738

08015800 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b084      	sub	sp, #16
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015808:	f107 0308 	add.w	r3, r7, #8
 801580c:	4618      	mov	r0, r3
 801580e:	f000 f859 	bl	80158c4 <prvGetNextExpireTime>
 8015812:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015814:	68bb      	ldr	r3, [r7, #8]
 8015816:	4619      	mov	r1, r3
 8015818:	68f8      	ldr	r0, [r7, #12]
 801581a:	f000 f805 	bl	8015828 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801581e:	f000 f8d7 	bl	80159d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015822:	bf00      	nop
 8015824:	e7f0      	b.n	8015808 <prvTimerTask+0x8>
	...

08015828 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b084      	sub	sp, #16
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
 8015830:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015832:	f7fe fdfb 	bl	801442c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015836:	f107 0308 	add.w	r3, r7, #8
 801583a:	4618      	mov	r0, r3
 801583c:	f000 f866 	bl	801590c <prvSampleTimeNow>
 8015840:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015842:	68bb      	ldr	r3, [r7, #8]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d130      	bne.n	80158aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015848:	683b      	ldr	r3, [r7, #0]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d10a      	bne.n	8015864 <prvProcessTimerOrBlockTask+0x3c>
 801584e:	687a      	ldr	r2, [r7, #4]
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	429a      	cmp	r2, r3
 8015854:	d806      	bhi.n	8015864 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015856:	f7fe fdf7 	bl	8014448 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801585a:	68f9      	ldr	r1, [r7, #12]
 801585c:	6878      	ldr	r0, [r7, #4]
 801585e:	f7ff ff81 	bl	8015764 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015862:	e024      	b.n	80158ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015864:	683b      	ldr	r3, [r7, #0]
 8015866:	2b00      	cmp	r3, #0
 8015868:	d008      	beq.n	801587c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801586a:	4b13      	ldr	r3, [pc, #76]	@ (80158b8 <prvProcessTimerOrBlockTask+0x90>)
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d101      	bne.n	8015878 <prvProcessTimerOrBlockTask+0x50>
 8015874:	2301      	movs	r3, #1
 8015876:	e000      	b.n	801587a <prvProcessTimerOrBlockTask+0x52>
 8015878:	2300      	movs	r3, #0
 801587a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801587c:	4b0f      	ldr	r3, [pc, #60]	@ (80158bc <prvProcessTimerOrBlockTask+0x94>)
 801587e:	6818      	ldr	r0, [r3, #0]
 8015880:	687a      	ldr	r2, [r7, #4]
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	1ad3      	subs	r3, r2, r3
 8015886:	683a      	ldr	r2, [r7, #0]
 8015888:	4619      	mov	r1, r3
 801588a:	f7fe fb37 	bl	8013efc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801588e:	f7fe fddb 	bl	8014448 <xTaskResumeAll>
 8015892:	4603      	mov	r3, r0
 8015894:	2b00      	cmp	r3, #0
 8015896:	d10a      	bne.n	80158ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015898:	4b09      	ldr	r3, [pc, #36]	@ (80158c0 <prvProcessTimerOrBlockTask+0x98>)
 801589a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801589e:	601a      	str	r2, [r3, #0]
 80158a0:	f3bf 8f4f 	dsb	sy
 80158a4:	f3bf 8f6f 	isb	sy
}
 80158a8:	e001      	b.n	80158ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80158aa:	f7fe fdcd 	bl	8014448 <xTaskResumeAll>
}
 80158ae:	bf00      	nop
 80158b0:	3710      	adds	r7, #16
 80158b2:	46bd      	mov	sp, r7
 80158b4:	bd80      	pop	{r7, pc}
 80158b6:	bf00      	nop
 80158b8:	2400173c 	.word	0x2400173c
 80158bc:	24001740 	.word	0x24001740
 80158c0:	e000ed04 	.word	0xe000ed04

080158c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80158c4:	b480      	push	{r7}
 80158c6:	b085      	sub	sp, #20
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80158cc:	4b0e      	ldr	r3, [pc, #56]	@ (8015908 <prvGetNextExpireTime+0x44>)
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d101      	bne.n	80158da <prvGetNextExpireTime+0x16>
 80158d6:	2201      	movs	r2, #1
 80158d8:	e000      	b.n	80158dc <prvGetNextExpireTime+0x18>
 80158da:	2200      	movs	r2, #0
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d105      	bne.n	80158f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80158e8:	4b07      	ldr	r3, [pc, #28]	@ (8015908 <prvGetNextExpireTime+0x44>)
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	68db      	ldr	r3, [r3, #12]
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	60fb      	str	r3, [r7, #12]
 80158f2:	e001      	b.n	80158f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80158f4:	2300      	movs	r3, #0
 80158f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80158f8:	68fb      	ldr	r3, [r7, #12]
}
 80158fa:	4618      	mov	r0, r3
 80158fc:	3714      	adds	r7, #20
 80158fe:	46bd      	mov	sp, r7
 8015900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015904:	4770      	bx	lr
 8015906:	bf00      	nop
 8015908:	24001738 	.word	0x24001738

0801590c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801590c:	b580      	push	{r7, lr}
 801590e:	b084      	sub	sp, #16
 8015910:	af00      	add	r7, sp, #0
 8015912:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015914:	f7fe fe36 	bl	8014584 <xTaskGetTickCount>
 8015918:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801591a:	4b0b      	ldr	r3, [pc, #44]	@ (8015948 <prvSampleTimeNow+0x3c>)
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	68fa      	ldr	r2, [r7, #12]
 8015920:	429a      	cmp	r2, r3
 8015922:	d205      	bcs.n	8015930 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015924:	f000 f93a 	bl	8015b9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	2201      	movs	r2, #1
 801592c:	601a      	str	r2, [r3, #0]
 801592e:	e002      	b.n	8015936 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	2200      	movs	r2, #0
 8015934:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015936:	4a04      	ldr	r2, [pc, #16]	@ (8015948 <prvSampleTimeNow+0x3c>)
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801593c:	68fb      	ldr	r3, [r7, #12]
}
 801593e:	4618      	mov	r0, r3
 8015940:	3710      	adds	r7, #16
 8015942:	46bd      	mov	sp, r7
 8015944:	bd80      	pop	{r7, pc}
 8015946:	bf00      	nop
 8015948:	24001748 	.word	0x24001748

0801594c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b086      	sub	sp, #24
 8015950:	af00      	add	r7, sp, #0
 8015952:	60f8      	str	r0, [r7, #12]
 8015954:	60b9      	str	r1, [r7, #8]
 8015956:	607a      	str	r2, [r7, #4]
 8015958:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801595a:	2300      	movs	r3, #0
 801595c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	68ba      	ldr	r2, [r7, #8]
 8015962:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	68fa      	ldr	r2, [r7, #12]
 8015968:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801596a:	68ba      	ldr	r2, [r7, #8]
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	429a      	cmp	r2, r3
 8015970:	d812      	bhi.n	8015998 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015972:	687a      	ldr	r2, [r7, #4]
 8015974:	683b      	ldr	r3, [r7, #0]
 8015976:	1ad2      	subs	r2, r2, r3
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	699b      	ldr	r3, [r3, #24]
 801597c:	429a      	cmp	r2, r3
 801597e:	d302      	bcc.n	8015986 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015980:	2301      	movs	r3, #1
 8015982:	617b      	str	r3, [r7, #20]
 8015984:	e01b      	b.n	80159be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015986:	4b10      	ldr	r3, [pc, #64]	@ (80159c8 <prvInsertTimerInActiveList+0x7c>)
 8015988:	681a      	ldr	r2, [r3, #0]
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	3304      	adds	r3, #4
 801598e:	4619      	mov	r1, r3
 8015990:	4610      	mov	r0, r2
 8015992:	f7fd fa58 	bl	8012e46 <vListInsert>
 8015996:	e012      	b.n	80159be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015998:	687a      	ldr	r2, [r7, #4]
 801599a:	683b      	ldr	r3, [r7, #0]
 801599c:	429a      	cmp	r2, r3
 801599e:	d206      	bcs.n	80159ae <prvInsertTimerInActiveList+0x62>
 80159a0:	68ba      	ldr	r2, [r7, #8]
 80159a2:	683b      	ldr	r3, [r7, #0]
 80159a4:	429a      	cmp	r2, r3
 80159a6:	d302      	bcc.n	80159ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80159a8:	2301      	movs	r3, #1
 80159aa:	617b      	str	r3, [r7, #20]
 80159ac:	e007      	b.n	80159be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80159ae:	4b07      	ldr	r3, [pc, #28]	@ (80159cc <prvInsertTimerInActiveList+0x80>)
 80159b0:	681a      	ldr	r2, [r3, #0]
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	3304      	adds	r3, #4
 80159b6:	4619      	mov	r1, r3
 80159b8:	4610      	mov	r0, r2
 80159ba:	f7fd fa44 	bl	8012e46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80159be:	697b      	ldr	r3, [r7, #20]
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	3718      	adds	r7, #24
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd80      	pop	{r7, pc}
 80159c8:	2400173c 	.word	0x2400173c
 80159cc:	24001738 	.word	0x24001738

080159d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b08e      	sub	sp, #56	@ 0x38
 80159d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80159d6:	e0ce      	b.n	8015b76 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	da19      	bge.n	8015a12 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80159de:	1d3b      	adds	r3, r7, #4
 80159e0:	3304      	adds	r3, #4
 80159e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80159e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d10b      	bne.n	8015a02 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80159ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159ee:	f383 8811 	msr	BASEPRI, r3
 80159f2:	f3bf 8f6f 	isb	sy
 80159f6:	f3bf 8f4f 	dsb	sy
 80159fa:	61fb      	str	r3, [r7, #28]
}
 80159fc:	bf00      	nop
 80159fe:	bf00      	nop
 8015a00:	e7fd      	b.n	80159fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015a08:	6850      	ldr	r0, [r2, #4]
 8015a0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015a0c:	6892      	ldr	r2, [r2, #8]
 8015a0e:	4611      	mov	r1, r2
 8015a10:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	f2c0 80ae 	blt.w	8015b76 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a20:	695b      	ldr	r3, [r3, #20]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d004      	beq.n	8015a30 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a28:	3304      	adds	r3, #4
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7fd fa44 	bl	8012eb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015a30:	463b      	mov	r3, r7
 8015a32:	4618      	mov	r0, r3
 8015a34:	f7ff ff6a 	bl	801590c <prvSampleTimeNow>
 8015a38:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	2b09      	cmp	r3, #9
 8015a3e:	f200 8097 	bhi.w	8015b70 <prvProcessReceivedCommands+0x1a0>
 8015a42:	a201      	add	r2, pc, #4	@ (adr r2, 8015a48 <prvProcessReceivedCommands+0x78>)
 8015a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a48:	08015a71 	.word	0x08015a71
 8015a4c:	08015a71 	.word	0x08015a71
 8015a50:	08015a71 	.word	0x08015a71
 8015a54:	08015ae7 	.word	0x08015ae7
 8015a58:	08015afb 	.word	0x08015afb
 8015a5c:	08015b47 	.word	0x08015b47
 8015a60:	08015a71 	.word	0x08015a71
 8015a64:	08015a71 	.word	0x08015a71
 8015a68:	08015ae7 	.word	0x08015ae7
 8015a6c:	08015afb 	.word	0x08015afb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015a76:	f043 0301 	orr.w	r3, r3, #1
 8015a7a:	b2da      	uxtb	r2, r3
 8015a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015a82:	68ba      	ldr	r2, [r7, #8]
 8015a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a86:	699b      	ldr	r3, [r3, #24]
 8015a88:	18d1      	adds	r1, r2, r3
 8015a8a:	68bb      	ldr	r3, [r7, #8]
 8015a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015a90:	f7ff ff5c 	bl	801594c <prvInsertTimerInActiveList>
 8015a94:	4603      	mov	r3, r0
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d06c      	beq.n	8015b74 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a9c:	6a1b      	ldr	r3, [r3, #32]
 8015a9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015aa0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015aa8:	f003 0304 	and.w	r3, r3, #4
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d061      	beq.n	8015b74 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015ab0:	68ba      	ldr	r2, [r7, #8]
 8015ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ab4:	699b      	ldr	r3, [r3, #24]
 8015ab6:	441a      	add	r2, r3
 8015ab8:	2300      	movs	r3, #0
 8015aba:	9300      	str	r3, [sp, #0]
 8015abc:	2300      	movs	r3, #0
 8015abe:	2100      	movs	r1, #0
 8015ac0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015ac2:	f7ff fe01 	bl	80156c8 <xTimerGenericCommand>
 8015ac6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015ac8:	6a3b      	ldr	r3, [r7, #32]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d152      	bne.n	8015b74 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8015ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ad2:	f383 8811 	msr	BASEPRI, r3
 8015ad6:	f3bf 8f6f 	isb	sy
 8015ada:	f3bf 8f4f 	dsb	sy
 8015ade:	61bb      	str	r3, [r7, #24]
}
 8015ae0:	bf00      	nop
 8015ae2:	bf00      	nop
 8015ae4:	e7fd      	b.n	8015ae2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015aec:	f023 0301 	bic.w	r3, r3, #1
 8015af0:	b2da      	uxtb	r2, r3
 8015af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015af4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8015af8:	e03d      	b.n	8015b76 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015afc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015b00:	f043 0301 	orr.w	r3, r3, #1
 8015b04:	b2da      	uxtb	r2, r3
 8015b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015b0c:	68ba      	ldr	r2, [r7, #8]
 8015b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b14:	699b      	ldr	r3, [r3, #24]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d10b      	bne.n	8015b32 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8015b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b1e:	f383 8811 	msr	BASEPRI, r3
 8015b22:	f3bf 8f6f 	isb	sy
 8015b26:	f3bf 8f4f 	dsb	sy
 8015b2a:	617b      	str	r3, [r7, #20]
}
 8015b2c:	bf00      	nop
 8015b2e:	bf00      	nop
 8015b30:	e7fd      	b.n	8015b2e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b34:	699a      	ldr	r2, [r3, #24]
 8015b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b38:	18d1      	adds	r1, r2, r3
 8015b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015b3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015b40:	f7ff ff04 	bl	801594c <prvInsertTimerInActiveList>
					break;
 8015b44:	e017      	b.n	8015b76 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015b4c:	f003 0302 	and.w	r3, r3, #2
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d103      	bne.n	8015b5c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8015b54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015b56:	f000 fc07 	bl	8016368 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015b5a:	e00c      	b.n	8015b76 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015b62:	f023 0301 	bic.w	r3, r3, #1
 8015b66:	b2da      	uxtb	r2, r3
 8015b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8015b6e:	e002      	b.n	8015b76 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8015b70:	bf00      	nop
 8015b72:	e000      	b.n	8015b76 <prvProcessReceivedCommands+0x1a6>
					break;
 8015b74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015b76:	4b08      	ldr	r3, [pc, #32]	@ (8015b98 <prvProcessReceivedCommands+0x1c8>)
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	1d39      	adds	r1, r7, #4
 8015b7c:	2200      	movs	r2, #0
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f7fd fda8 	bl	80136d4 <xQueueReceive>
 8015b84:	4603      	mov	r3, r0
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	f47f af26 	bne.w	80159d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8015b8c:	bf00      	nop
 8015b8e:	bf00      	nop
 8015b90:	3730      	adds	r7, #48	@ 0x30
 8015b92:	46bd      	mov	sp, r7
 8015b94:	bd80      	pop	{r7, pc}
 8015b96:	bf00      	nop
 8015b98:	24001740 	.word	0x24001740

08015b9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	b088      	sub	sp, #32
 8015ba0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015ba2:	e049      	b.n	8015c38 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8015c60 <prvSwitchTimerLists+0xc4>)
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	68db      	ldr	r3, [r3, #12]
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015bae:	4b2c      	ldr	r3, [pc, #176]	@ (8015c60 <prvSwitchTimerLists+0xc4>)
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	68db      	ldr	r3, [r3, #12]
 8015bb4:	68db      	ldr	r3, [r3, #12]
 8015bb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	3304      	adds	r3, #4
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	f7fd f97b 	bl	8012eb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	6a1b      	ldr	r3, [r3, #32]
 8015bc6:	68f8      	ldr	r0, [r7, #12]
 8015bc8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015bd0:	f003 0304 	and.w	r3, r3, #4
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d02f      	beq.n	8015c38 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	699b      	ldr	r3, [r3, #24]
 8015bdc:	693a      	ldr	r2, [r7, #16]
 8015bde:	4413      	add	r3, r2
 8015be0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015be2:	68ba      	ldr	r2, [r7, #8]
 8015be4:	693b      	ldr	r3, [r7, #16]
 8015be6:	429a      	cmp	r2, r3
 8015be8:	d90e      	bls.n	8015c08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	68ba      	ldr	r2, [r7, #8]
 8015bee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	68fa      	ldr	r2, [r7, #12]
 8015bf4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8015c60 <prvSwitchTimerLists+0xc4>)
 8015bf8:	681a      	ldr	r2, [r3, #0]
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	3304      	adds	r3, #4
 8015bfe:	4619      	mov	r1, r3
 8015c00:	4610      	mov	r0, r2
 8015c02:	f7fd f920 	bl	8012e46 <vListInsert>
 8015c06:	e017      	b.n	8015c38 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015c08:	2300      	movs	r3, #0
 8015c0a:	9300      	str	r3, [sp, #0]
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	693a      	ldr	r2, [r7, #16]
 8015c10:	2100      	movs	r1, #0
 8015c12:	68f8      	ldr	r0, [r7, #12]
 8015c14:	f7ff fd58 	bl	80156c8 <xTimerGenericCommand>
 8015c18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d10b      	bne.n	8015c38 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8015c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c24:	f383 8811 	msr	BASEPRI, r3
 8015c28:	f3bf 8f6f 	isb	sy
 8015c2c:	f3bf 8f4f 	dsb	sy
 8015c30:	603b      	str	r3, [r7, #0]
}
 8015c32:	bf00      	nop
 8015c34:	bf00      	nop
 8015c36:	e7fd      	b.n	8015c34 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015c38:	4b09      	ldr	r3, [pc, #36]	@ (8015c60 <prvSwitchTimerLists+0xc4>)
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d1b0      	bne.n	8015ba4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015c42:	4b07      	ldr	r3, [pc, #28]	@ (8015c60 <prvSwitchTimerLists+0xc4>)
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015c48:	4b06      	ldr	r3, [pc, #24]	@ (8015c64 <prvSwitchTimerLists+0xc8>)
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	4a04      	ldr	r2, [pc, #16]	@ (8015c60 <prvSwitchTimerLists+0xc4>)
 8015c4e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015c50:	4a04      	ldr	r2, [pc, #16]	@ (8015c64 <prvSwitchTimerLists+0xc8>)
 8015c52:	697b      	ldr	r3, [r7, #20]
 8015c54:	6013      	str	r3, [r2, #0]
}
 8015c56:	bf00      	nop
 8015c58:	3718      	adds	r7, #24
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd80      	pop	{r7, pc}
 8015c5e:	bf00      	nop
 8015c60:	24001738 	.word	0x24001738
 8015c64:	2400173c 	.word	0x2400173c

08015c68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b082      	sub	sp, #8
 8015c6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015c6e:	f000 f98b 	bl	8015f88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015c72:	4b15      	ldr	r3, [pc, #84]	@ (8015cc8 <prvCheckForValidListAndQueue+0x60>)
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d120      	bne.n	8015cbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015c7a:	4814      	ldr	r0, [pc, #80]	@ (8015ccc <prvCheckForValidListAndQueue+0x64>)
 8015c7c:	f7fd f892 	bl	8012da4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015c80:	4813      	ldr	r0, [pc, #76]	@ (8015cd0 <prvCheckForValidListAndQueue+0x68>)
 8015c82:	f7fd f88f 	bl	8012da4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015c86:	4b13      	ldr	r3, [pc, #76]	@ (8015cd4 <prvCheckForValidListAndQueue+0x6c>)
 8015c88:	4a10      	ldr	r2, [pc, #64]	@ (8015ccc <prvCheckForValidListAndQueue+0x64>)
 8015c8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015c8c:	4b12      	ldr	r3, [pc, #72]	@ (8015cd8 <prvCheckForValidListAndQueue+0x70>)
 8015c8e:	4a10      	ldr	r2, [pc, #64]	@ (8015cd0 <prvCheckForValidListAndQueue+0x68>)
 8015c90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015c92:	2300      	movs	r3, #0
 8015c94:	9300      	str	r3, [sp, #0]
 8015c96:	4b11      	ldr	r3, [pc, #68]	@ (8015cdc <prvCheckForValidListAndQueue+0x74>)
 8015c98:	4a11      	ldr	r2, [pc, #68]	@ (8015ce0 <prvCheckForValidListAndQueue+0x78>)
 8015c9a:	2110      	movs	r1, #16
 8015c9c:	200a      	movs	r0, #10
 8015c9e:	f7fd f99f 	bl	8012fe0 <xQueueGenericCreateStatic>
 8015ca2:	4603      	mov	r3, r0
 8015ca4:	4a08      	ldr	r2, [pc, #32]	@ (8015cc8 <prvCheckForValidListAndQueue+0x60>)
 8015ca6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015ca8:	4b07      	ldr	r3, [pc, #28]	@ (8015cc8 <prvCheckForValidListAndQueue+0x60>)
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d005      	beq.n	8015cbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015cb0:	4b05      	ldr	r3, [pc, #20]	@ (8015cc8 <prvCheckForValidListAndQueue+0x60>)
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	490b      	ldr	r1, [pc, #44]	@ (8015ce4 <prvCheckForValidListAndQueue+0x7c>)
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	f7fe f8cc 	bl	8013e54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015cbc:	f000 f996 	bl	8015fec <vPortExitCritical>
}
 8015cc0:	bf00      	nop
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	bd80      	pop	{r7, pc}
 8015cc6:	bf00      	nop
 8015cc8:	24001740 	.word	0x24001740
 8015ccc:	24001710 	.word	0x24001710
 8015cd0:	24001724 	.word	0x24001724
 8015cd4:	24001738 	.word	0x24001738
 8015cd8:	2400173c 	.word	0x2400173c
 8015cdc:	240017ec 	.word	0x240017ec
 8015ce0:	2400174c 	.word	0x2400174c
 8015ce4:	08017d18 	.word	0x08017d18

08015ce8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b08a      	sub	sp, #40	@ 0x28
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	60f8      	str	r0, [r7, #12]
 8015cf0:	60b9      	str	r1, [r7, #8]
 8015cf2:	607a      	str	r2, [r7, #4]
 8015cf4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8015cf6:	f06f 0301 	mvn.w	r3, #1
 8015cfa:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015d00:	68bb      	ldr	r3, [r7, #8]
 8015d02:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015d08:	4b06      	ldr	r3, [pc, #24]	@ (8015d24 <xTimerPendFunctionCallFromISR+0x3c>)
 8015d0a:	6818      	ldr	r0, [r3, #0]
 8015d0c:	f107 0114 	add.w	r1, r7, #20
 8015d10:	2300      	movs	r3, #0
 8015d12:	683a      	ldr	r2, [r7, #0]
 8015d14:	f7fd fbb0 	bl	8013478 <xQueueGenericSendFromISR>
 8015d18:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8015d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	3728      	adds	r7, #40	@ 0x28
 8015d20:	46bd      	mov	sp, r7
 8015d22:	bd80      	pop	{r7, pc}
 8015d24:	24001740 	.word	0x24001740

08015d28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015d28:	b480      	push	{r7}
 8015d2a:	b085      	sub	sp, #20
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	60f8      	str	r0, [r7, #12]
 8015d30:	60b9      	str	r1, [r7, #8]
 8015d32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	3b04      	subs	r3, #4
 8015d38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8015d40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	3b04      	subs	r3, #4
 8015d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015d48:	68bb      	ldr	r3, [r7, #8]
 8015d4a:	f023 0201 	bic.w	r2, r3, #1
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	3b04      	subs	r3, #4
 8015d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015d58:	4a0c      	ldr	r2, [pc, #48]	@ (8015d8c <pxPortInitialiseStack+0x64>)
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	3b14      	subs	r3, #20
 8015d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015d64:	687a      	ldr	r2, [r7, #4]
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	3b04      	subs	r3, #4
 8015d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	f06f 0202 	mvn.w	r2, #2
 8015d76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	3b20      	subs	r3, #32
 8015d7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015d7e:	68fb      	ldr	r3, [r7, #12]
}
 8015d80:	4618      	mov	r0, r3
 8015d82:	3714      	adds	r7, #20
 8015d84:	46bd      	mov	sp, r7
 8015d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8a:	4770      	bx	lr
 8015d8c:	08015d91 	.word	0x08015d91

08015d90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015d90:	b480      	push	{r7}
 8015d92:	b085      	sub	sp, #20
 8015d94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015d96:	2300      	movs	r3, #0
 8015d98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015d9a:	4b13      	ldr	r3, [pc, #76]	@ (8015de8 <prvTaskExitError+0x58>)
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015da2:	d00b      	beq.n	8015dbc <prvTaskExitError+0x2c>
	__asm volatile
 8015da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015da8:	f383 8811 	msr	BASEPRI, r3
 8015dac:	f3bf 8f6f 	isb	sy
 8015db0:	f3bf 8f4f 	dsb	sy
 8015db4:	60fb      	str	r3, [r7, #12]
}
 8015db6:	bf00      	nop
 8015db8:	bf00      	nop
 8015dba:	e7fd      	b.n	8015db8 <prvTaskExitError+0x28>
	__asm volatile
 8015dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015dc0:	f383 8811 	msr	BASEPRI, r3
 8015dc4:	f3bf 8f6f 	isb	sy
 8015dc8:	f3bf 8f4f 	dsb	sy
 8015dcc:	60bb      	str	r3, [r7, #8]
}
 8015dce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015dd0:	bf00      	nop
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d0fc      	beq.n	8015dd2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015dd8:	bf00      	nop
 8015dda:	bf00      	nop
 8015ddc:	3714      	adds	r7, #20
 8015dde:	46bd      	mov	sp, r7
 8015de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de4:	4770      	bx	lr
 8015de6:	bf00      	nop
 8015de8:	24000010 	.word	0x24000010
 8015dec:	00000000 	.word	0x00000000

08015df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015df0:	4b07      	ldr	r3, [pc, #28]	@ (8015e10 <pxCurrentTCBConst2>)
 8015df2:	6819      	ldr	r1, [r3, #0]
 8015df4:	6808      	ldr	r0, [r1, #0]
 8015df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dfa:	f380 8809 	msr	PSP, r0
 8015dfe:	f3bf 8f6f 	isb	sy
 8015e02:	f04f 0000 	mov.w	r0, #0
 8015e06:	f380 8811 	msr	BASEPRI, r0
 8015e0a:	4770      	bx	lr
 8015e0c:	f3af 8000 	nop.w

08015e10 <pxCurrentTCBConst2>:
 8015e10:	24001210 	.word	0x24001210
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015e14:	bf00      	nop
 8015e16:	bf00      	nop

08015e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015e18:	4808      	ldr	r0, [pc, #32]	@ (8015e3c <prvPortStartFirstTask+0x24>)
 8015e1a:	6800      	ldr	r0, [r0, #0]
 8015e1c:	6800      	ldr	r0, [r0, #0]
 8015e1e:	f380 8808 	msr	MSP, r0
 8015e22:	f04f 0000 	mov.w	r0, #0
 8015e26:	f380 8814 	msr	CONTROL, r0
 8015e2a:	b662      	cpsie	i
 8015e2c:	b661      	cpsie	f
 8015e2e:	f3bf 8f4f 	dsb	sy
 8015e32:	f3bf 8f6f 	isb	sy
 8015e36:	df00      	svc	0
 8015e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015e3a:	bf00      	nop
 8015e3c:	e000ed08 	.word	0xe000ed08

08015e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b086      	sub	sp, #24
 8015e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015e46:	4b47      	ldr	r3, [pc, #284]	@ (8015f64 <xPortStartScheduler+0x124>)
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	4a47      	ldr	r2, [pc, #284]	@ (8015f68 <xPortStartScheduler+0x128>)
 8015e4c:	4293      	cmp	r3, r2
 8015e4e:	d10b      	bne.n	8015e68 <xPortStartScheduler+0x28>
	__asm volatile
 8015e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e54:	f383 8811 	msr	BASEPRI, r3
 8015e58:	f3bf 8f6f 	isb	sy
 8015e5c:	f3bf 8f4f 	dsb	sy
 8015e60:	60fb      	str	r3, [r7, #12]
}
 8015e62:	bf00      	nop
 8015e64:	bf00      	nop
 8015e66:	e7fd      	b.n	8015e64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015e68:	4b3e      	ldr	r3, [pc, #248]	@ (8015f64 <xPortStartScheduler+0x124>)
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	4a3f      	ldr	r2, [pc, #252]	@ (8015f6c <xPortStartScheduler+0x12c>)
 8015e6e:	4293      	cmp	r3, r2
 8015e70:	d10b      	bne.n	8015e8a <xPortStartScheduler+0x4a>
	__asm volatile
 8015e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e76:	f383 8811 	msr	BASEPRI, r3
 8015e7a:	f3bf 8f6f 	isb	sy
 8015e7e:	f3bf 8f4f 	dsb	sy
 8015e82:	613b      	str	r3, [r7, #16]
}
 8015e84:	bf00      	nop
 8015e86:	bf00      	nop
 8015e88:	e7fd      	b.n	8015e86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015e8a:	4b39      	ldr	r3, [pc, #228]	@ (8015f70 <xPortStartScheduler+0x130>)
 8015e8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015e8e:	697b      	ldr	r3, [r7, #20]
 8015e90:	781b      	ldrb	r3, [r3, #0]
 8015e92:	b2db      	uxtb	r3, r3
 8015e94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015e96:	697b      	ldr	r3, [r7, #20]
 8015e98:	22ff      	movs	r2, #255	@ 0xff
 8015e9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015e9c:	697b      	ldr	r3, [r7, #20]
 8015e9e:	781b      	ldrb	r3, [r3, #0]
 8015ea0:	b2db      	uxtb	r3, r3
 8015ea2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015ea4:	78fb      	ldrb	r3, [r7, #3]
 8015ea6:	b2db      	uxtb	r3, r3
 8015ea8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8015eac:	b2da      	uxtb	r2, r3
 8015eae:	4b31      	ldr	r3, [pc, #196]	@ (8015f74 <xPortStartScheduler+0x134>)
 8015eb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015eb2:	4b31      	ldr	r3, [pc, #196]	@ (8015f78 <xPortStartScheduler+0x138>)
 8015eb4:	2207      	movs	r2, #7
 8015eb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015eb8:	e009      	b.n	8015ece <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8015eba:	4b2f      	ldr	r3, [pc, #188]	@ (8015f78 <xPortStartScheduler+0x138>)
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	3b01      	subs	r3, #1
 8015ec0:	4a2d      	ldr	r2, [pc, #180]	@ (8015f78 <xPortStartScheduler+0x138>)
 8015ec2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015ec4:	78fb      	ldrb	r3, [r7, #3]
 8015ec6:	b2db      	uxtb	r3, r3
 8015ec8:	005b      	lsls	r3, r3, #1
 8015eca:	b2db      	uxtb	r3, r3
 8015ecc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015ece:	78fb      	ldrb	r3, [r7, #3]
 8015ed0:	b2db      	uxtb	r3, r3
 8015ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015ed6:	2b80      	cmp	r3, #128	@ 0x80
 8015ed8:	d0ef      	beq.n	8015eba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015eda:	4b27      	ldr	r3, [pc, #156]	@ (8015f78 <xPortStartScheduler+0x138>)
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	f1c3 0307 	rsb	r3, r3, #7
 8015ee2:	2b04      	cmp	r3, #4
 8015ee4:	d00b      	beq.n	8015efe <xPortStartScheduler+0xbe>
	__asm volatile
 8015ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015eea:	f383 8811 	msr	BASEPRI, r3
 8015eee:	f3bf 8f6f 	isb	sy
 8015ef2:	f3bf 8f4f 	dsb	sy
 8015ef6:	60bb      	str	r3, [r7, #8]
}
 8015ef8:	bf00      	nop
 8015efa:	bf00      	nop
 8015efc:	e7fd      	b.n	8015efa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015efe:	4b1e      	ldr	r3, [pc, #120]	@ (8015f78 <xPortStartScheduler+0x138>)
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	021b      	lsls	r3, r3, #8
 8015f04:	4a1c      	ldr	r2, [pc, #112]	@ (8015f78 <xPortStartScheduler+0x138>)
 8015f06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015f08:	4b1b      	ldr	r3, [pc, #108]	@ (8015f78 <xPortStartScheduler+0x138>)
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015f10:	4a19      	ldr	r2, [pc, #100]	@ (8015f78 <xPortStartScheduler+0x138>)
 8015f12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	b2da      	uxtb	r2, r3
 8015f18:	697b      	ldr	r3, [r7, #20]
 8015f1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015f1c:	4b17      	ldr	r3, [pc, #92]	@ (8015f7c <xPortStartScheduler+0x13c>)
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	4a16      	ldr	r2, [pc, #88]	@ (8015f7c <xPortStartScheduler+0x13c>)
 8015f22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8015f26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015f28:	4b14      	ldr	r3, [pc, #80]	@ (8015f7c <xPortStartScheduler+0x13c>)
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	4a13      	ldr	r2, [pc, #76]	@ (8015f7c <xPortStartScheduler+0x13c>)
 8015f2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015f32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015f34:	f000 f8da 	bl	80160ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015f38:	4b11      	ldr	r3, [pc, #68]	@ (8015f80 <xPortStartScheduler+0x140>)
 8015f3a:	2200      	movs	r2, #0
 8015f3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015f3e:	f000 f8f9 	bl	8016134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015f42:	4b10      	ldr	r3, [pc, #64]	@ (8015f84 <xPortStartScheduler+0x144>)
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	4a0f      	ldr	r2, [pc, #60]	@ (8015f84 <xPortStartScheduler+0x144>)
 8015f48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8015f4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015f4e:	f7ff ff63 	bl	8015e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015f52:	f7fe fbf3 	bl	801473c <vTaskSwitchContext>
	prvTaskExitError();
 8015f56:	f7ff ff1b 	bl	8015d90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015f5a:	2300      	movs	r3, #0
}
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	3718      	adds	r7, #24
 8015f60:	46bd      	mov	sp, r7
 8015f62:	bd80      	pop	{r7, pc}
 8015f64:	e000ed00 	.word	0xe000ed00
 8015f68:	410fc271 	.word	0x410fc271
 8015f6c:	410fc270 	.word	0x410fc270
 8015f70:	e000e400 	.word	0xe000e400
 8015f74:	2400183c 	.word	0x2400183c
 8015f78:	24001840 	.word	0x24001840
 8015f7c:	e000ed20 	.word	0xe000ed20
 8015f80:	24000010 	.word	0x24000010
 8015f84:	e000ef34 	.word	0xe000ef34

08015f88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015f88:	b480      	push	{r7}
 8015f8a:	b083      	sub	sp, #12
 8015f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8015f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f92:	f383 8811 	msr	BASEPRI, r3
 8015f96:	f3bf 8f6f 	isb	sy
 8015f9a:	f3bf 8f4f 	dsb	sy
 8015f9e:	607b      	str	r3, [r7, #4]
}
 8015fa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015fa2:	4b10      	ldr	r3, [pc, #64]	@ (8015fe4 <vPortEnterCritical+0x5c>)
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	3301      	adds	r3, #1
 8015fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8015fe4 <vPortEnterCritical+0x5c>)
 8015faa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015fac:	4b0d      	ldr	r3, [pc, #52]	@ (8015fe4 <vPortEnterCritical+0x5c>)
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	2b01      	cmp	r3, #1
 8015fb2:	d110      	bne.n	8015fd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8015fe8 <vPortEnterCritical+0x60>)
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	b2db      	uxtb	r3, r3
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d00b      	beq.n	8015fd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8015fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fc2:	f383 8811 	msr	BASEPRI, r3
 8015fc6:	f3bf 8f6f 	isb	sy
 8015fca:	f3bf 8f4f 	dsb	sy
 8015fce:	603b      	str	r3, [r7, #0]
}
 8015fd0:	bf00      	nop
 8015fd2:	bf00      	nop
 8015fd4:	e7fd      	b.n	8015fd2 <vPortEnterCritical+0x4a>
	}
}
 8015fd6:	bf00      	nop
 8015fd8:	370c      	adds	r7, #12
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe0:	4770      	bx	lr
 8015fe2:	bf00      	nop
 8015fe4:	24000010 	.word	0x24000010
 8015fe8:	e000ed04 	.word	0xe000ed04

08015fec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015fec:	b480      	push	{r7}
 8015fee:	b083      	sub	sp, #12
 8015ff0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015ff2:	4b12      	ldr	r3, [pc, #72]	@ (801603c <vPortExitCritical+0x50>)
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d10b      	bne.n	8016012 <vPortExitCritical+0x26>
	__asm volatile
 8015ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ffe:	f383 8811 	msr	BASEPRI, r3
 8016002:	f3bf 8f6f 	isb	sy
 8016006:	f3bf 8f4f 	dsb	sy
 801600a:	607b      	str	r3, [r7, #4]
}
 801600c:	bf00      	nop
 801600e:	bf00      	nop
 8016010:	e7fd      	b.n	801600e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016012:	4b0a      	ldr	r3, [pc, #40]	@ (801603c <vPortExitCritical+0x50>)
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	3b01      	subs	r3, #1
 8016018:	4a08      	ldr	r2, [pc, #32]	@ (801603c <vPortExitCritical+0x50>)
 801601a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801601c:	4b07      	ldr	r3, [pc, #28]	@ (801603c <vPortExitCritical+0x50>)
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d105      	bne.n	8016030 <vPortExitCritical+0x44>
 8016024:	2300      	movs	r3, #0
 8016026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016028:	683b      	ldr	r3, [r7, #0]
 801602a:	f383 8811 	msr	BASEPRI, r3
}
 801602e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016030:	bf00      	nop
 8016032:	370c      	adds	r7, #12
 8016034:	46bd      	mov	sp, r7
 8016036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603a:	4770      	bx	lr
 801603c:	24000010 	.word	0x24000010

08016040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016040:	f3ef 8009 	mrs	r0, PSP
 8016044:	f3bf 8f6f 	isb	sy
 8016048:	4b15      	ldr	r3, [pc, #84]	@ (80160a0 <pxCurrentTCBConst>)
 801604a:	681a      	ldr	r2, [r3, #0]
 801604c:	f01e 0f10 	tst.w	lr, #16
 8016050:	bf08      	it	eq
 8016052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801605a:	6010      	str	r0, [r2, #0]
 801605c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016060:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016064:	f380 8811 	msr	BASEPRI, r0
 8016068:	f3bf 8f4f 	dsb	sy
 801606c:	f3bf 8f6f 	isb	sy
 8016070:	f7fe fb64 	bl	801473c <vTaskSwitchContext>
 8016074:	f04f 0000 	mov.w	r0, #0
 8016078:	f380 8811 	msr	BASEPRI, r0
 801607c:	bc09      	pop	{r0, r3}
 801607e:	6819      	ldr	r1, [r3, #0]
 8016080:	6808      	ldr	r0, [r1, #0]
 8016082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016086:	f01e 0f10 	tst.w	lr, #16
 801608a:	bf08      	it	eq
 801608c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016090:	f380 8809 	msr	PSP, r0
 8016094:	f3bf 8f6f 	isb	sy
 8016098:	4770      	bx	lr
 801609a:	bf00      	nop
 801609c:	f3af 8000 	nop.w

080160a0 <pxCurrentTCBConst>:
 80160a0:	24001210 	.word	0x24001210
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80160a4:	bf00      	nop
 80160a6:	bf00      	nop

080160a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b082      	sub	sp, #8
 80160ac:	af00      	add	r7, sp, #0
	__asm volatile
 80160ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160b2:	f383 8811 	msr	BASEPRI, r3
 80160b6:	f3bf 8f6f 	isb	sy
 80160ba:	f3bf 8f4f 	dsb	sy
 80160be:	607b      	str	r3, [r7, #4]
}
 80160c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80160c2:	f7fe fa81 	bl	80145c8 <xTaskIncrementTick>
 80160c6:	4603      	mov	r3, r0
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d003      	beq.n	80160d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80160cc:	4b06      	ldr	r3, [pc, #24]	@ (80160e8 <xPortSysTickHandler+0x40>)
 80160ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80160d2:	601a      	str	r2, [r3, #0]
 80160d4:	2300      	movs	r3, #0
 80160d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80160d8:	683b      	ldr	r3, [r7, #0]
 80160da:	f383 8811 	msr	BASEPRI, r3
}
 80160de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80160e0:	bf00      	nop
 80160e2:	3708      	adds	r7, #8
 80160e4:	46bd      	mov	sp, r7
 80160e6:	bd80      	pop	{r7, pc}
 80160e8:	e000ed04 	.word	0xe000ed04

080160ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80160ec:	b480      	push	{r7}
 80160ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80160f0:	4b0b      	ldr	r3, [pc, #44]	@ (8016120 <vPortSetupTimerInterrupt+0x34>)
 80160f2:	2200      	movs	r2, #0
 80160f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80160f6:	4b0b      	ldr	r3, [pc, #44]	@ (8016124 <vPortSetupTimerInterrupt+0x38>)
 80160f8:	2200      	movs	r2, #0
 80160fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80160fc:	4b0a      	ldr	r3, [pc, #40]	@ (8016128 <vPortSetupTimerInterrupt+0x3c>)
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	4a0a      	ldr	r2, [pc, #40]	@ (801612c <vPortSetupTimerInterrupt+0x40>)
 8016102:	fba2 2303 	umull	r2, r3, r2, r3
 8016106:	099b      	lsrs	r3, r3, #6
 8016108:	4a09      	ldr	r2, [pc, #36]	@ (8016130 <vPortSetupTimerInterrupt+0x44>)
 801610a:	3b01      	subs	r3, #1
 801610c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801610e:	4b04      	ldr	r3, [pc, #16]	@ (8016120 <vPortSetupTimerInterrupt+0x34>)
 8016110:	2207      	movs	r2, #7
 8016112:	601a      	str	r2, [r3, #0]
}
 8016114:	bf00      	nop
 8016116:	46bd      	mov	sp, r7
 8016118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611c:	4770      	bx	lr
 801611e:	bf00      	nop
 8016120:	e000e010 	.word	0xe000e010
 8016124:	e000e018 	.word	0xe000e018
 8016128:	24000000 	.word	0x24000000
 801612c:	10624dd3 	.word	0x10624dd3
 8016130:	e000e014 	.word	0xe000e014

08016134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016134:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8016144 <vPortEnableVFP+0x10>
 8016138:	6801      	ldr	r1, [r0, #0]
 801613a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801613e:	6001      	str	r1, [r0, #0]
 8016140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016142:	bf00      	nop
 8016144:	e000ed88 	.word	0xe000ed88

08016148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016148:	b480      	push	{r7}
 801614a:	b085      	sub	sp, #20
 801614c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801614e:	f3ef 8305 	mrs	r3, IPSR
 8016152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	2b0f      	cmp	r3, #15
 8016158:	d915      	bls.n	8016186 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801615a:	4a18      	ldr	r2, [pc, #96]	@ (80161bc <vPortValidateInterruptPriority+0x74>)
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	4413      	add	r3, r2
 8016160:	781b      	ldrb	r3, [r3, #0]
 8016162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016164:	4b16      	ldr	r3, [pc, #88]	@ (80161c0 <vPortValidateInterruptPriority+0x78>)
 8016166:	781b      	ldrb	r3, [r3, #0]
 8016168:	7afa      	ldrb	r2, [r7, #11]
 801616a:	429a      	cmp	r2, r3
 801616c:	d20b      	bcs.n	8016186 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801616e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016172:	f383 8811 	msr	BASEPRI, r3
 8016176:	f3bf 8f6f 	isb	sy
 801617a:	f3bf 8f4f 	dsb	sy
 801617e:	607b      	str	r3, [r7, #4]
}
 8016180:	bf00      	nop
 8016182:	bf00      	nop
 8016184:	e7fd      	b.n	8016182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016186:	4b0f      	ldr	r3, [pc, #60]	@ (80161c4 <vPortValidateInterruptPriority+0x7c>)
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801618e:	4b0e      	ldr	r3, [pc, #56]	@ (80161c8 <vPortValidateInterruptPriority+0x80>)
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	429a      	cmp	r2, r3
 8016194:	d90b      	bls.n	80161ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8016196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801619a:	f383 8811 	msr	BASEPRI, r3
 801619e:	f3bf 8f6f 	isb	sy
 80161a2:	f3bf 8f4f 	dsb	sy
 80161a6:	603b      	str	r3, [r7, #0]
}
 80161a8:	bf00      	nop
 80161aa:	bf00      	nop
 80161ac:	e7fd      	b.n	80161aa <vPortValidateInterruptPriority+0x62>
	}
 80161ae:	bf00      	nop
 80161b0:	3714      	adds	r7, #20
 80161b2:	46bd      	mov	sp, r7
 80161b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b8:	4770      	bx	lr
 80161ba:	bf00      	nop
 80161bc:	e000e3f0 	.word	0xe000e3f0
 80161c0:	2400183c 	.word	0x2400183c
 80161c4:	e000ed0c 	.word	0xe000ed0c
 80161c8:	24001840 	.word	0x24001840

080161cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b08a      	sub	sp, #40	@ 0x28
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80161d4:	2300      	movs	r3, #0
 80161d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80161d8:	f7fe f928 	bl	801442c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80161dc:	4b5c      	ldr	r3, [pc, #368]	@ (8016350 <pvPortMalloc+0x184>)
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d101      	bne.n	80161e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80161e4:	f000 f924 	bl	8016430 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80161e8:	4b5a      	ldr	r3, [pc, #360]	@ (8016354 <pvPortMalloc+0x188>)
 80161ea:	681a      	ldr	r2, [r3, #0]
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	4013      	ands	r3, r2
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	f040 8095 	bne.w	8016320 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d01e      	beq.n	801623a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80161fc:	2208      	movs	r2, #8
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	4413      	add	r3, r2
 8016202:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	f003 0307 	and.w	r3, r3, #7
 801620a:	2b00      	cmp	r3, #0
 801620c:	d015      	beq.n	801623a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	f023 0307 	bic.w	r3, r3, #7
 8016214:	3308      	adds	r3, #8
 8016216:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	f003 0307 	and.w	r3, r3, #7
 801621e:	2b00      	cmp	r3, #0
 8016220:	d00b      	beq.n	801623a <pvPortMalloc+0x6e>
	__asm volatile
 8016222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016226:	f383 8811 	msr	BASEPRI, r3
 801622a:	f3bf 8f6f 	isb	sy
 801622e:	f3bf 8f4f 	dsb	sy
 8016232:	617b      	str	r3, [r7, #20]
}
 8016234:	bf00      	nop
 8016236:	bf00      	nop
 8016238:	e7fd      	b.n	8016236 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d06f      	beq.n	8016320 <pvPortMalloc+0x154>
 8016240:	4b45      	ldr	r3, [pc, #276]	@ (8016358 <pvPortMalloc+0x18c>)
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	687a      	ldr	r2, [r7, #4]
 8016246:	429a      	cmp	r2, r3
 8016248:	d86a      	bhi.n	8016320 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801624a:	4b44      	ldr	r3, [pc, #272]	@ (801635c <pvPortMalloc+0x190>)
 801624c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801624e:	4b43      	ldr	r3, [pc, #268]	@ (801635c <pvPortMalloc+0x190>)
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016254:	e004      	b.n	8016260 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016258:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801625a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016262:	685b      	ldr	r3, [r3, #4]
 8016264:	687a      	ldr	r2, [r7, #4]
 8016266:	429a      	cmp	r2, r3
 8016268:	d903      	bls.n	8016272 <pvPortMalloc+0xa6>
 801626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d1f1      	bne.n	8016256 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016272:	4b37      	ldr	r3, [pc, #220]	@ (8016350 <pvPortMalloc+0x184>)
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016278:	429a      	cmp	r2, r3
 801627a:	d051      	beq.n	8016320 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801627c:	6a3b      	ldr	r3, [r7, #32]
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	2208      	movs	r2, #8
 8016282:	4413      	add	r3, r2
 8016284:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016288:	681a      	ldr	r2, [r3, #0]
 801628a:	6a3b      	ldr	r3, [r7, #32]
 801628c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016290:	685a      	ldr	r2, [r3, #4]
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	1ad2      	subs	r2, r2, r3
 8016296:	2308      	movs	r3, #8
 8016298:	005b      	lsls	r3, r3, #1
 801629a:	429a      	cmp	r2, r3
 801629c:	d920      	bls.n	80162e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801629e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	4413      	add	r3, r2
 80162a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80162a6:	69bb      	ldr	r3, [r7, #24]
 80162a8:	f003 0307 	and.w	r3, r3, #7
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d00b      	beq.n	80162c8 <pvPortMalloc+0xfc>
	__asm volatile
 80162b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162b4:	f383 8811 	msr	BASEPRI, r3
 80162b8:	f3bf 8f6f 	isb	sy
 80162bc:	f3bf 8f4f 	dsb	sy
 80162c0:	613b      	str	r3, [r7, #16]
}
 80162c2:	bf00      	nop
 80162c4:	bf00      	nop
 80162c6:	e7fd      	b.n	80162c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80162c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162ca:	685a      	ldr	r2, [r3, #4]
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	1ad2      	subs	r2, r2, r3
 80162d0:	69bb      	ldr	r3, [r7, #24]
 80162d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80162d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162d6:	687a      	ldr	r2, [r7, #4]
 80162d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80162da:	69b8      	ldr	r0, [r7, #24]
 80162dc:	f000 f90a 	bl	80164f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80162e0:	4b1d      	ldr	r3, [pc, #116]	@ (8016358 <pvPortMalloc+0x18c>)
 80162e2:	681a      	ldr	r2, [r3, #0]
 80162e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162e6:	685b      	ldr	r3, [r3, #4]
 80162e8:	1ad3      	subs	r3, r2, r3
 80162ea:	4a1b      	ldr	r2, [pc, #108]	@ (8016358 <pvPortMalloc+0x18c>)
 80162ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80162ee:	4b1a      	ldr	r3, [pc, #104]	@ (8016358 <pvPortMalloc+0x18c>)
 80162f0:	681a      	ldr	r2, [r3, #0]
 80162f2:	4b1b      	ldr	r3, [pc, #108]	@ (8016360 <pvPortMalloc+0x194>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	429a      	cmp	r2, r3
 80162f8:	d203      	bcs.n	8016302 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80162fa:	4b17      	ldr	r3, [pc, #92]	@ (8016358 <pvPortMalloc+0x18c>)
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	4a18      	ldr	r2, [pc, #96]	@ (8016360 <pvPortMalloc+0x194>)
 8016300:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016304:	685a      	ldr	r2, [r3, #4]
 8016306:	4b13      	ldr	r3, [pc, #76]	@ (8016354 <pvPortMalloc+0x188>)
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	431a      	orrs	r2, r3
 801630c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801630e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016312:	2200      	movs	r2, #0
 8016314:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016316:	4b13      	ldr	r3, [pc, #76]	@ (8016364 <pvPortMalloc+0x198>)
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	3301      	adds	r3, #1
 801631c:	4a11      	ldr	r2, [pc, #68]	@ (8016364 <pvPortMalloc+0x198>)
 801631e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016320:	f7fe f892 	bl	8014448 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016324:	69fb      	ldr	r3, [r7, #28]
 8016326:	f003 0307 	and.w	r3, r3, #7
 801632a:	2b00      	cmp	r3, #0
 801632c:	d00b      	beq.n	8016346 <pvPortMalloc+0x17a>
	__asm volatile
 801632e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016332:	f383 8811 	msr	BASEPRI, r3
 8016336:	f3bf 8f6f 	isb	sy
 801633a:	f3bf 8f4f 	dsb	sy
 801633e:	60fb      	str	r3, [r7, #12]
}
 8016340:	bf00      	nop
 8016342:	bf00      	nop
 8016344:	e7fd      	b.n	8016342 <pvPortMalloc+0x176>
	return pvReturn;
 8016346:	69fb      	ldr	r3, [r7, #28]
}
 8016348:	4618      	mov	r0, r3
 801634a:	3728      	adds	r7, #40	@ 0x28
 801634c:	46bd      	mov	sp, r7
 801634e:	bd80      	pop	{r7, pc}
 8016350:	2400544c 	.word	0x2400544c
 8016354:	24005460 	.word	0x24005460
 8016358:	24005450 	.word	0x24005450
 801635c:	24005444 	.word	0x24005444
 8016360:	24005454 	.word	0x24005454
 8016364:	24005458 	.word	0x24005458

08016368 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016368:	b580      	push	{r7, lr}
 801636a:	b086      	sub	sp, #24
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d04f      	beq.n	801641a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801637a:	2308      	movs	r3, #8
 801637c:	425b      	negs	r3, r3
 801637e:	697a      	ldr	r2, [r7, #20]
 8016380:	4413      	add	r3, r2
 8016382:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016384:	697b      	ldr	r3, [r7, #20]
 8016386:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016388:	693b      	ldr	r3, [r7, #16]
 801638a:	685a      	ldr	r2, [r3, #4]
 801638c:	4b25      	ldr	r3, [pc, #148]	@ (8016424 <vPortFree+0xbc>)
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	4013      	ands	r3, r2
 8016392:	2b00      	cmp	r3, #0
 8016394:	d10b      	bne.n	80163ae <vPortFree+0x46>
	__asm volatile
 8016396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801639a:	f383 8811 	msr	BASEPRI, r3
 801639e:	f3bf 8f6f 	isb	sy
 80163a2:	f3bf 8f4f 	dsb	sy
 80163a6:	60fb      	str	r3, [r7, #12]
}
 80163a8:	bf00      	nop
 80163aa:	bf00      	nop
 80163ac:	e7fd      	b.n	80163aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80163ae:	693b      	ldr	r3, [r7, #16]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d00b      	beq.n	80163ce <vPortFree+0x66>
	__asm volatile
 80163b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163ba:	f383 8811 	msr	BASEPRI, r3
 80163be:	f3bf 8f6f 	isb	sy
 80163c2:	f3bf 8f4f 	dsb	sy
 80163c6:	60bb      	str	r3, [r7, #8]
}
 80163c8:	bf00      	nop
 80163ca:	bf00      	nop
 80163cc:	e7fd      	b.n	80163ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80163ce:	693b      	ldr	r3, [r7, #16]
 80163d0:	685a      	ldr	r2, [r3, #4]
 80163d2:	4b14      	ldr	r3, [pc, #80]	@ (8016424 <vPortFree+0xbc>)
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	4013      	ands	r3, r2
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d01e      	beq.n	801641a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80163dc:	693b      	ldr	r3, [r7, #16]
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d11a      	bne.n	801641a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80163e4:	693b      	ldr	r3, [r7, #16]
 80163e6:	685a      	ldr	r2, [r3, #4]
 80163e8:	4b0e      	ldr	r3, [pc, #56]	@ (8016424 <vPortFree+0xbc>)
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	43db      	mvns	r3, r3
 80163ee:	401a      	ands	r2, r3
 80163f0:	693b      	ldr	r3, [r7, #16]
 80163f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80163f4:	f7fe f81a 	bl	801442c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80163f8:	693b      	ldr	r3, [r7, #16]
 80163fa:	685a      	ldr	r2, [r3, #4]
 80163fc:	4b0a      	ldr	r3, [pc, #40]	@ (8016428 <vPortFree+0xc0>)
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	4413      	add	r3, r2
 8016402:	4a09      	ldr	r2, [pc, #36]	@ (8016428 <vPortFree+0xc0>)
 8016404:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016406:	6938      	ldr	r0, [r7, #16]
 8016408:	f000 f874 	bl	80164f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801640c:	4b07      	ldr	r3, [pc, #28]	@ (801642c <vPortFree+0xc4>)
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	3301      	adds	r3, #1
 8016412:	4a06      	ldr	r2, [pc, #24]	@ (801642c <vPortFree+0xc4>)
 8016414:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016416:	f7fe f817 	bl	8014448 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801641a:	bf00      	nop
 801641c:	3718      	adds	r7, #24
 801641e:	46bd      	mov	sp, r7
 8016420:	bd80      	pop	{r7, pc}
 8016422:	bf00      	nop
 8016424:	24005460 	.word	0x24005460
 8016428:	24005450 	.word	0x24005450
 801642c:	2400545c 	.word	0x2400545c

08016430 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016430:	b480      	push	{r7}
 8016432:	b085      	sub	sp, #20
 8016434:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016436:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801643a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801643c:	4b27      	ldr	r3, [pc, #156]	@ (80164dc <prvHeapInit+0xac>)
 801643e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	f003 0307 	and.w	r3, r3, #7
 8016446:	2b00      	cmp	r3, #0
 8016448:	d00c      	beq.n	8016464 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	3307      	adds	r3, #7
 801644e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	f023 0307 	bic.w	r3, r3, #7
 8016456:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016458:	68ba      	ldr	r2, [r7, #8]
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	1ad3      	subs	r3, r2, r3
 801645e:	4a1f      	ldr	r2, [pc, #124]	@ (80164dc <prvHeapInit+0xac>)
 8016460:	4413      	add	r3, r2
 8016462:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016468:	4a1d      	ldr	r2, [pc, #116]	@ (80164e0 <prvHeapInit+0xb0>)
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801646e:	4b1c      	ldr	r3, [pc, #112]	@ (80164e0 <prvHeapInit+0xb0>)
 8016470:	2200      	movs	r2, #0
 8016472:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	68ba      	ldr	r2, [r7, #8]
 8016478:	4413      	add	r3, r2
 801647a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801647c:	2208      	movs	r2, #8
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	1a9b      	subs	r3, r3, r2
 8016482:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	f023 0307 	bic.w	r3, r3, #7
 801648a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	4a15      	ldr	r2, [pc, #84]	@ (80164e4 <prvHeapInit+0xb4>)
 8016490:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016492:	4b14      	ldr	r3, [pc, #80]	@ (80164e4 <prvHeapInit+0xb4>)
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	2200      	movs	r2, #0
 8016498:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801649a:	4b12      	ldr	r3, [pc, #72]	@ (80164e4 <prvHeapInit+0xb4>)
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	2200      	movs	r2, #0
 80164a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80164a6:	683b      	ldr	r3, [r7, #0]
 80164a8:	68fa      	ldr	r2, [r7, #12]
 80164aa:	1ad2      	subs	r2, r2, r3
 80164ac:	683b      	ldr	r3, [r7, #0]
 80164ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80164b0:	4b0c      	ldr	r3, [pc, #48]	@ (80164e4 <prvHeapInit+0xb4>)
 80164b2:	681a      	ldr	r2, [r3, #0]
 80164b4:	683b      	ldr	r3, [r7, #0]
 80164b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80164b8:	683b      	ldr	r3, [r7, #0]
 80164ba:	685b      	ldr	r3, [r3, #4]
 80164bc:	4a0a      	ldr	r2, [pc, #40]	@ (80164e8 <prvHeapInit+0xb8>)
 80164be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80164c0:	683b      	ldr	r3, [r7, #0]
 80164c2:	685b      	ldr	r3, [r3, #4]
 80164c4:	4a09      	ldr	r2, [pc, #36]	@ (80164ec <prvHeapInit+0xbc>)
 80164c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80164c8:	4b09      	ldr	r3, [pc, #36]	@ (80164f0 <prvHeapInit+0xc0>)
 80164ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80164ce:	601a      	str	r2, [r3, #0]
}
 80164d0:	bf00      	nop
 80164d2:	3714      	adds	r7, #20
 80164d4:	46bd      	mov	sp, r7
 80164d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164da:	4770      	bx	lr
 80164dc:	24001844 	.word	0x24001844
 80164e0:	24005444 	.word	0x24005444
 80164e4:	2400544c 	.word	0x2400544c
 80164e8:	24005454 	.word	0x24005454
 80164ec:	24005450 	.word	0x24005450
 80164f0:	24005460 	.word	0x24005460

080164f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80164f4:	b480      	push	{r7}
 80164f6:	b085      	sub	sp, #20
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80164fc:	4b28      	ldr	r3, [pc, #160]	@ (80165a0 <prvInsertBlockIntoFreeList+0xac>)
 80164fe:	60fb      	str	r3, [r7, #12]
 8016500:	e002      	b.n	8016508 <prvInsertBlockIntoFreeList+0x14>
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	60fb      	str	r3, [r7, #12]
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	687a      	ldr	r2, [r7, #4]
 801650e:	429a      	cmp	r2, r3
 8016510:	d8f7      	bhi.n	8016502 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	685b      	ldr	r3, [r3, #4]
 801651a:	68ba      	ldr	r2, [r7, #8]
 801651c:	4413      	add	r3, r2
 801651e:	687a      	ldr	r2, [r7, #4]
 8016520:	429a      	cmp	r2, r3
 8016522:	d108      	bne.n	8016536 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	685a      	ldr	r2, [r3, #4]
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	685b      	ldr	r3, [r3, #4]
 801652c:	441a      	add	r2, r3
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	685b      	ldr	r3, [r3, #4]
 801653e:	68ba      	ldr	r2, [r7, #8]
 8016540:	441a      	add	r2, r3
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	429a      	cmp	r2, r3
 8016548:	d118      	bne.n	801657c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	681a      	ldr	r2, [r3, #0]
 801654e:	4b15      	ldr	r3, [pc, #84]	@ (80165a4 <prvInsertBlockIntoFreeList+0xb0>)
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	429a      	cmp	r2, r3
 8016554:	d00d      	beq.n	8016572 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	685a      	ldr	r2, [r3, #4]
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	685b      	ldr	r3, [r3, #4]
 8016560:	441a      	add	r2, r3
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	681a      	ldr	r2, [r3, #0]
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	601a      	str	r2, [r3, #0]
 8016570:	e008      	b.n	8016584 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016572:	4b0c      	ldr	r3, [pc, #48]	@ (80165a4 <prvInsertBlockIntoFreeList+0xb0>)
 8016574:	681a      	ldr	r2, [r3, #0]
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	601a      	str	r2, [r3, #0]
 801657a:	e003      	b.n	8016584 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	681a      	ldr	r2, [r3, #0]
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016584:	68fa      	ldr	r2, [r7, #12]
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	429a      	cmp	r2, r3
 801658a:	d002      	beq.n	8016592 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	687a      	ldr	r2, [r7, #4]
 8016590:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016592:	bf00      	nop
 8016594:	3714      	adds	r7, #20
 8016596:	46bd      	mov	sp, r7
 8016598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801659c:	4770      	bx	lr
 801659e:	bf00      	nop
 80165a0:	24005444 	.word	0x24005444
 80165a4:	2400544c 	.word	0x2400544c

080165a8 <_ZdlPvj>:
 80165a8:	f000 b800 	b.w	80165ac <_ZdlPv>

080165ac <_ZdlPv>:
 80165ac:	f000 b808 	b.w	80165c0 <free>

080165b0 <malloc>:
 80165b0:	4b02      	ldr	r3, [pc, #8]	@ (80165bc <malloc+0xc>)
 80165b2:	4601      	mov	r1, r0
 80165b4:	6818      	ldr	r0, [r3, #0]
 80165b6:	f000 b82d 	b.w	8016614 <_malloc_r>
 80165ba:	bf00      	nop
 80165bc:	24000020 	.word	0x24000020

080165c0 <free>:
 80165c0:	4b02      	ldr	r3, [pc, #8]	@ (80165cc <free+0xc>)
 80165c2:	4601      	mov	r1, r0
 80165c4:	6818      	ldr	r0, [r3, #0]
 80165c6:	f000 bc89 	b.w	8016edc <_free_r>
 80165ca:	bf00      	nop
 80165cc:	24000020 	.word	0x24000020

080165d0 <sbrk_aligned>:
 80165d0:	b570      	push	{r4, r5, r6, lr}
 80165d2:	4e0f      	ldr	r6, [pc, #60]	@ (8016610 <sbrk_aligned+0x40>)
 80165d4:	460c      	mov	r4, r1
 80165d6:	6831      	ldr	r1, [r6, #0]
 80165d8:	4605      	mov	r5, r0
 80165da:	b911      	cbnz	r1, 80165e2 <sbrk_aligned+0x12>
 80165dc:	f000 fc20 	bl	8016e20 <_sbrk_r>
 80165e0:	6030      	str	r0, [r6, #0]
 80165e2:	4621      	mov	r1, r4
 80165e4:	4628      	mov	r0, r5
 80165e6:	f000 fc1b 	bl	8016e20 <_sbrk_r>
 80165ea:	1c43      	adds	r3, r0, #1
 80165ec:	d103      	bne.n	80165f6 <sbrk_aligned+0x26>
 80165ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80165f2:	4620      	mov	r0, r4
 80165f4:	bd70      	pop	{r4, r5, r6, pc}
 80165f6:	1cc4      	adds	r4, r0, #3
 80165f8:	f024 0403 	bic.w	r4, r4, #3
 80165fc:	42a0      	cmp	r0, r4
 80165fe:	d0f8      	beq.n	80165f2 <sbrk_aligned+0x22>
 8016600:	1a21      	subs	r1, r4, r0
 8016602:	4628      	mov	r0, r5
 8016604:	f000 fc0c 	bl	8016e20 <_sbrk_r>
 8016608:	3001      	adds	r0, #1
 801660a:	d1f2      	bne.n	80165f2 <sbrk_aligned+0x22>
 801660c:	e7ef      	b.n	80165ee <sbrk_aligned+0x1e>
 801660e:	bf00      	nop
 8016610:	24005464 	.word	0x24005464

08016614 <_malloc_r>:
 8016614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016618:	1ccd      	adds	r5, r1, #3
 801661a:	f025 0503 	bic.w	r5, r5, #3
 801661e:	3508      	adds	r5, #8
 8016620:	2d0c      	cmp	r5, #12
 8016622:	bf38      	it	cc
 8016624:	250c      	movcc	r5, #12
 8016626:	2d00      	cmp	r5, #0
 8016628:	4606      	mov	r6, r0
 801662a:	db01      	blt.n	8016630 <_malloc_r+0x1c>
 801662c:	42a9      	cmp	r1, r5
 801662e:	d904      	bls.n	801663a <_malloc_r+0x26>
 8016630:	230c      	movs	r3, #12
 8016632:	6033      	str	r3, [r6, #0]
 8016634:	2000      	movs	r0, #0
 8016636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801663a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016710 <_malloc_r+0xfc>
 801663e:	f000 f869 	bl	8016714 <__malloc_lock>
 8016642:	f8d8 3000 	ldr.w	r3, [r8]
 8016646:	461c      	mov	r4, r3
 8016648:	bb44      	cbnz	r4, 801669c <_malloc_r+0x88>
 801664a:	4629      	mov	r1, r5
 801664c:	4630      	mov	r0, r6
 801664e:	f7ff ffbf 	bl	80165d0 <sbrk_aligned>
 8016652:	1c43      	adds	r3, r0, #1
 8016654:	4604      	mov	r4, r0
 8016656:	d158      	bne.n	801670a <_malloc_r+0xf6>
 8016658:	f8d8 4000 	ldr.w	r4, [r8]
 801665c:	4627      	mov	r7, r4
 801665e:	2f00      	cmp	r7, #0
 8016660:	d143      	bne.n	80166ea <_malloc_r+0xd6>
 8016662:	2c00      	cmp	r4, #0
 8016664:	d04b      	beq.n	80166fe <_malloc_r+0xea>
 8016666:	6823      	ldr	r3, [r4, #0]
 8016668:	4639      	mov	r1, r7
 801666a:	4630      	mov	r0, r6
 801666c:	eb04 0903 	add.w	r9, r4, r3
 8016670:	f000 fbd6 	bl	8016e20 <_sbrk_r>
 8016674:	4581      	cmp	r9, r0
 8016676:	d142      	bne.n	80166fe <_malloc_r+0xea>
 8016678:	6821      	ldr	r1, [r4, #0]
 801667a:	1a6d      	subs	r5, r5, r1
 801667c:	4629      	mov	r1, r5
 801667e:	4630      	mov	r0, r6
 8016680:	f7ff ffa6 	bl	80165d0 <sbrk_aligned>
 8016684:	3001      	adds	r0, #1
 8016686:	d03a      	beq.n	80166fe <_malloc_r+0xea>
 8016688:	6823      	ldr	r3, [r4, #0]
 801668a:	442b      	add	r3, r5
 801668c:	6023      	str	r3, [r4, #0]
 801668e:	f8d8 3000 	ldr.w	r3, [r8]
 8016692:	685a      	ldr	r2, [r3, #4]
 8016694:	bb62      	cbnz	r2, 80166f0 <_malloc_r+0xdc>
 8016696:	f8c8 7000 	str.w	r7, [r8]
 801669a:	e00f      	b.n	80166bc <_malloc_r+0xa8>
 801669c:	6822      	ldr	r2, [r4, #0]
 801669e:	1b52      	subs	r2, r2, r5
 80166a0:	d420      	bmi.n	80166e4 <_malloc_r+0xd0>
 80166a2:	2a0b      	cmp	r2, #11
 80166a4:	d917      	bls.n	80166d6 <_malloc_r+0xc2>
 80166a6:	1961      	adds	r1, r4, r5
 80166a8:	42a3      	cmp	r3, r4
 80166aa:	6025      	str	r5, [r4, #0]
 80166ac:	bf18      	it	ne
 80166ae:	6059      	strne	r1, [r3, #4]
 80166b0:	6863      	ldr	r3, [r4, #4]
 80166b2:	bf08      	it	eq
 80166b4:	f8c8 1000 	streq.w	r1, [r8]
 80166b8:	5162      	str	r2, [r4, r5]
 80166ba:	604b      	str	r3, [r1, #4]
 80166bc:	4630      	mov	r0, r6
 80166be:	f000 f82f 	bl	8016720 <__malloc_unlock>
 80166c2:	f104 000b 	add.w	r0, r4, #11
 80166c6:	1d23      	adds	r3, r4, #4
 80166c8:	f020 0007 	bic.w	r0, r0, #7
 80166cc:	1ac2      	subs	r2, r0, r3
 80166ce:	bf1c      	itt	ne
 80166d0:	1a1b      	subne	r3, r3, r0
 80166d2:	50a3      	strne	r3, [r4, r2]
 80166d4:	e7af      	b.n	8016636 <_malloc_r+0x22>
 80166d6:	6862      	ldr	r2, [r4, #4]
 80166d8:	42a3      	cmp	r3, r4
 80166da:	bf0c      	ite	eq
 80166dc:	f8c8 2000 	streq.w	r2, [r8]
 80166e0:	605a      	strne	r2, [r3, #4]
 80166e2:	e7eb      	b.n	80166bc <_malloc_r+0xa8>
 80166e4:	4623      	mov	r3, r4
 80166e6:	6864      	ldr	r4, [r4, #4]
 80166e8:	e7ae      	b.n	8016648 <_malloc_r+0x34>
 80166ea:	463c      	mov	r4, r7
 80166ec:	687f      	ldr	r7, [r7, #4]
 80166ee:	e7b6      	b.n	801665e <_malloc_r+0x4a>
 80166f0:	461a      	mov	r2, r3
 80166f2:	685b      	ldr	r3, [r3, #4]
 80166f4:	42a3      	cmp	r3, r4
 80166f6:	d1fb      	bne.n	80166f0 <_malloc_r+0xdc>
 80166f8:	2300      	movs	r3, #0
 80166fa:	6053      	str	r3, [r2, #4]
 80166fc:	e7de      	b.n	80166bc <_malloc_r+0xa8>
 80166fe:	230c      	movs	r3, #12
 8016700:	6033      	str	r3, [r6, #0]
 8016702:	4630      	mov	r0, r6
 8016704:	f000 f80c 	bl	8016720 <__malloc_unlock>
 8016708:	e794      	b.n	8016634 <_malloc_r+0x20>
 801670a:	6005      	str	r5, [r0, #0]
 801670c:	e7d6      	b.n	80166bc <_malloc_r+0xa8>
 801670e:	bf00      	nop
 8016710:	24005468 	.word	0x24005468

08016714 <__malloc_lock>:
 8016714:	4801      	ldr	r0, [pc, #4]	@ (801671c <__malloc_lock+0x8>)
 8016716:	f000 bbd0 	b.w	8016eba <__retarget_lock_acquire_recursive>
 801671a:	bf00      	nop
 801671c:	240055ac 	.word	0x240055ac

08016720 <__malloc_unlock>:
 8016720:	4801      	ldr	r0, [pc, #4]	@ (8016728 <__malloc_unlock+0x8>)
 8016722:	f000 bbcb 	b.w	8016ebc <__retarget_lock_release_recursive>
 8016726:	bf00      	nop
 8016728:	240055ac 	.word	0x240055ac

0801672c <std>:
 801672c:	2300      	movs	r3, #0
 801672e:	b510      	push	{r4, lr}
 8016730:	4604      	mov	r4, r0
 8016732:	e9c0 3300 	strd	r3, r3, [r0]
 8016736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801673a:	6083      	str	r3, [r0, #8]
 801673c:	8181      	strh	r1, [r0, #12]
 801673e:	6643      	str	r3, [r0, #100]	@ 0x64
 8016740:	81c2      	strh	r2, [r0, #14]
 8016742:	6183      	str	r3, [r0, #24]
 8016744:	4619      	mov	r1, r3
 8016746:	2208      	movs	r2, #8
 8016748:	305c      	adds	r0, #92	@ 0x5c
 801674a:	f000 facf 	bl	8016cec <memset>
 801674e:	4b0d      	ldr	r3, [pc, #52]	@ (8016784 <std+0x58>)
 8016750:	6263      	str	r3, [r4, #36]	@ 0x24
 8016752:	4b0d      	ldr	r3, [pc, #52]	@ (8016788 <std+0x5c>)
 8016754:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016756:	4b0d      	ldr	r3, [pc, #52]	@ (801678c <std+0x60>)
 8016758:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801675a:	4b0d      	ldr	r3, [pc, #52]	@ (8016790 <std+0x64>)
 801675c:	6323      	str	r3, [r4, #48]	@ 0x30
 801675e:	4b0d      	ldr	r3, [pc, #52]	@ (8016794 <std+0x68>)
 8016760:	6224      	str	r4, [r4, #32]
 8016762:	429c      	cmp	r4, r3
 8016764:	d006      	beq.n	8016774 <std+0x48>
 8016766:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801676a:	4294      	cmp	r4, r2
 801676c:	d002      	beq.n	8016774 <std+0x48>
 801676e:	33d0      	adds	r3, #208	@ 0xd0
 8016770:	429c      	cmp	r4, r3
 8016772:	d105      	bne.n	8016780 <std+0x54>
 8016774:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801677c:	f000 bb9c 	b.w	8016eb8 <__retarget_lock_init_recursive>
 8016780:	bd10      	pop	{r4, pc}
 8016782:	bf00      	nop
 8016784:	08016b3d 	.word	0x08016b3d
 8016788:	08016b5f 	.word	0x08016b5f
 801678c:	08016b97 	.word	0x08016b97
 8016790:	08016bbb 	.word	0x08016bbb
 8016794:	2400546c 	.word	0x2400546c

08016798 <stdio_exit_handler>:
 8016798:	4a02      	ldr	r2, [pc, #8]	@ (80167a4 <stdio_exit_handler+0xc>)
 801679a:	4903      	ldr	r1, [pc, #12]	@ (80167a8 <stdio_exit_handler+0x10>)
 801679c:	4803      	ldr	r0, [pc, #12]	@ (80167ac <stdio_exit_handler+0x14>)
 801679e:	f000 b869 	b.w	8016874 <_fwalk_sglue>
 80167a2:	bf00      	nop
 80167a4:	24000014 	.word	0x24000014
 80167a8:	080178c5 	.word	0x080178c5
 80167ac:	24000024 	.word	0x24000024

080167b0 <cleanup_stdio>:
 80167b0:	6841      	ldr	r1, [r0, #4]
 80167b2:	4b0c      	ldr	r3, [pc, #48]	@ (80167e4 <cleanup_stdio+0x34>)
 80167b4:	4299      	cmp	r1, r3
 80167b6:	b510      	push	{r4, lr}
 80167b8:	4604      	mov	r4, r0
 80167ba:	d001      	beq.n	80167c0 <cleanup_stdio+0x10>
 80167bc:	f001 f882 	bl	80178c4 <_fflush_r>
 80167c0:	68a1      	ldr	r1, [r4, #8]
 80167c2:	4b09      	ldr	r3, [pc, #36]	@ (80167e8 <cleanup_stdio+0x38>)
 80167c4:	4299      	cmp	r1, r3
 80167c6:	d002      	beq.n	80167ce <cleanup_stdio+0x1e>
 80167c8:	4620      	mov	r0, r4
 80167ca:	f001 f87b 	bl	80178c4 <_fflush_r>
 80167ce:	68e1      	ldr	r1, [r4, #12]
 80167d0:	4b06      	ldr	r3, [pc, #24]	@ (80167ec <cleanup_stdio+0x3c>)
 80167d2:	4299      	cmp	r1, r3
 80167d4:	d004      	beq.n	80167e0 <cleanup_stdio+0x30>
 80167d6:	4620      	mov	r0, r4
 80167d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167dc:	f001 b872 	b.w	80178c4 <_fflush_r>
 80167e0:	bd10      	pop	{r4, pc}
 80167e2:	bf00      	nop
 80167e4:	2400546c 	.word	0x2400546c
 80167e8:	240054d4 	.word	0x240054d4
 80167ec:	2400553c 	.word	0x2400553c

080167f0 <global_stdio_init.part.0>:
 80167f0:	b510      	push	{r4, lr}
 80167f2:	4b0b      	ldr	r3, [pc, #44]	@ (8016820 <global_stdio_init.part.0+0x30>)
 80167f4:	4c0b      	ldr	r4, [pc, #44]	@ (8016824 <global_stdio_init.part.0+0x34>)
 80167f6:	4a0c      	ldr	r2, [pc, #48]	@ (8016828 <global_stdio_init.part.0+0x38>)
 80167f8:	601a      	str	r2, [r3, #0]
 80167fa:	4620      	mov	r0, r4
 80167fc:	2200      	movs	r2, #0
 80167fe:	2104      	movs	r1, #4
 8016800:	f7ff ff94 	bl	801672c <std>
 8016804:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016808:	2201      	movs	r2, #1
 801680a:	2109      	movs	r1, #9
 801680c:	f7ff ff8e 	bl	801672c <std>
 8016810:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016814:	2202      	movs	r2, #2
 8016816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801681a:	2112      	movs	r1, #18
 801681c:	f7ff bf86 	b.w	801672c <std>
 8016820:	240055a4 	.word	0x240055a4
 8016824:	2400546c 	.word	0x2400546c
 8016828:	08016799 	.word	0x08016799

0801682c <__sfp_lock_acquire>:
 801682c:	4801      	ldr	r0, [pc, #4]	@ (8016834 <__sfp_lock_acquire+0x8>)
 801682e:	f000 bb44 	b.w	8016eba <__retarget_lock_acquire_recursive>
 8016832:	bf00      	nop
 8016834:	240055ad 	.word	0x240055ad

08016838 <__sfp_lock_release>:
 8016838:	4801      	ldr	r0, [pc, #4]	@ (8016840 <__sfp_lock_release+0x8>)
 801683a:	f000 bb3f 	b.w	8016ebc <__retarget_lock_release_recursive>
 801683e:	bf00      	nop
 8016840:	240055ad 	.word	0x240055ad

08016844 <__sinit>:
 8016844:	b510      	push	{r4, lr}
 8016846:	4604      	mov	r4, r0
 8016848:	f7ff fff0 	bl	801682c <__sfp_lock_acquire>
 801684c:	6a23      	ldr	r3, [r4, #32]
 801684e:	b11b      	cbz	r3, 8016858 <__sinit+0x14>
 8016850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016854:	f7ff bff0 	b.w	8016838 <__sfp_lock_release>
 8016858:	4b04      	ldr	r3, [pc, #16]	@ (801686c <__sinit+0x28>)
 801685a:	6223      	str	r3, [r4, #32]
 801685c:	4b04      	ldr	r3, [pc, #16]	@ (8016870 <__sinit+0x2c>)
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d1f5      	bne.n	8016850 <__sinit+0xc>
 8016864:	f7ff ffc4 	bl	80167f0 <global_stdio_init.part.0>
 8016868:	e7f2      	b.n	8016850 <__sinit+0xc>
 801686a:	bf00      	nop
 801686c:	080167b1 	.word	0x080167b1
 8016870:	240055a4 	.word	0x240055a4

08016874 <_fwalk_sglue>:
 8016874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016878:	4607      	mov	r7, r0
 801687a:	4688      	mov	r8, r1
 801687c:	4614      	mov	r4, r2
 801687e:	2600      	movs	r6, #0
 8016880:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016884:	f1b9 0901 	subs.w	r9, r9, #1
 8016888:	d505      	bpl.n	8016896 <_fwalk_sglue+0x22>
 801688a:	6824      	ldr	r4, [r4, #0]
 801688c:	2c00      	cmp	r4, #0
 801688e:	d1f7      	bne.n	8016880 <_fwalk_sglue+0xc>
 8016890:	4630      	mov	r0, r6
 8016892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016896:	89ab      	ldrh	r3, [r5, #12]
 8016898:	2b01      	cmp	r3, #1
 801689a:	d907      	bls.n	80168ac <_fwalk_sglue+0x38>
 801689c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80168a0:	3301      	adds	r3, #1
 80168a2:	d003      	beq.n	80168ac <_fwalk_sglue+0x38>
 80168a4:	4629      	mov	r1, r5
 80168a6:	4638      	mov	r0, r7
 80168a8:	47c0      	blx	r8
 80168aa:	4306      	orrs	r6, r0
 80168ac:	3568      	adds	r5, #104	@ 0x68
 80168ae:	e7e9      	b.n	8016884 <_fwalk_sglue+0x10>

080168b0 <iprintf>:
 80168b0:	b40f      	push	{r0, r1, r2, r3}
 80168b2:	b507      	push	{r0, r1, r2, lr}
 80168b4:	4906      	ldr	r1, [pc, #24]	@ (80168d0 <iprintf+0x20>)
 80168b6:	ab04      	add	r3, sp, #16
 80168b8:	6808      	ldr	r0, [r1, #0]
 80168ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80168be:	6881      	ldr	r1, [r0, #8]
 80168c0:	9301      	str	r3, [sp, #4]
 80168c2:	f000 fcd7 	bl	8017274 <_vfiprintf_r>
 80168c6:	b003      	add	sp, #12
 80168c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80168cc:	b004      	add	sp, #16
 80168ce:	4770      	bx	lr
 80168d0:	24000020 	.word	0x24000020

080168d4 <_puts_r>:
 80168d4:	6a03      	ldr	r3, [r0, #32]
 80168d6:	b570      	push	{r4, r5, r6, lr}
 80168d8:	6884      	ldr	r4, [r0, #8]
 80168da:	4605      	mov	r5, r0
 80168dc:	460e      	mov	r6, r1
 80168de:	b90b      	cbnz	r3, 80168e4 <_puts_r+0x10>
 80168e0:	f7ff ffb0 	bl	8016844 <__sinit>
 80168e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80168e6:	07db      	lsls	r3, r3, #31
 80168e8:	d405      	bmi.n	80168f6 <_puts_r+0x22>
 80168ea:	89a3      	ldrh	r3, [r4, #12]
 80168ec:	0598      	lsls	r0, r3, #22
 80168ee:	d402      	bmi.n	80168f6 <_puts_r+0x22>
 80168f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80168f2:	f000 fae2 	bl	8016eba <__retarget_lock_acquire_recursive>
 80168f6:	89a3      	ldrh	r3, [r4, #12]
 80168f8:	0719      	lsls	r1, r3, #28
 80168fa:	d502      	bpl.n	8016902 <_puts_r+0x2e>
 80168fc:	6923      	ldr	r3, [r4, #16]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d135      	bne.n	801696e <_puts_r+0x9a>
 8016902:	4621      	mov	r1, r4
 8016904:	4628      	mov	r0, r5
 8016906:	f000 f99b 	bl	8016c40 <__swsetup_r>
 801690a:	b380      	cbz	r0, 801696e <_puts_r+0x9a>
 801690c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8016910:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016912:	07da      	lsls	r2, r3, #31
 8016914:	d405      	bmi.n	8016922 <_puts_r+0x4e>
 8016916:	89a3      	ldrh	r3, [r4, #12]
 8016918:	059b      	lsls	r3, r3, #22
 801691a:	d402      	bmi.n	8016922 <_puts_r+0x4e>
 801691c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801691e:	f000 facd 	bl	8016ebc <__retarget_lock_release_recursive>
 8016922:	4628      	mov	r0, r5
 8016924:	bd70      	pop	{r4, r5, r6, pc}
 8016926:	2b00      	cmp	r3, #0
 8016928:	da04      	bge.n	8016934 <_puts_r+0x60>
 801692a:	69a2      	ldr	r2, [r4, #24]
 801692c:	429a      	cmp	r2, r3
 801692e:	dc17      	bgt.n	8016960 <_puts_r+0x8c>
 8016930:	290a      	cmp	r1, #10
 8016932:	d015      	beq.n	8016960 <_puts_r+0x8c>
 8016934:	6823      	ldr	r3, [r4, #0]
 8016936:	1c5a      	adds	r2, r3, #1
 8016938:	6022      	str	r2, [r4, #0]
 801693a:	7019      	strb	r1, [r3, #0]
 801693c:	68a3      	ldr	r3, [r4, #8]
 801693e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016942:	3b01      	subs	r3, #1
 8016944:	60a3      	str	r3, [r4, #8]
 8016946:	2900      	cmp	r1, #0
 8016948:	d1ed      	bne.n	8016926 <_puts_r+0x52>
 801694a:	2b00      	cmp	r3, #0
 801694c:	da11      	bge.n	8016972 <_puts_r+0x9e>
 801694e:	4622      	mov	r2, r4
 8016950:	210a      	movs	r1, #10
 8016952:	4628      	mov	r0, r5
 8016954:	f000 f935 	bl	8016bc2 <__swbuf_r>
 8016958:	3001      	adds	r0, #1
 801695a:	d0d7      	beq.n	801690c <_puts_r+0x38>
 801695c:	250a      	movs	r5, #10
 801695e:	e7d7      	b.n	8016910 <_puts_r+0x3c>
 8016960:	4622      	mov	r2, r4
 8016962:	4628      	mov	r0, r5
 8016964:	f000 f92d 	bl	8016bc2 <__swbuf_r>
 8016968:	3001      	adds	r0, #1
 801696a:	d1e7      	bne.n	801693c <_puts_r+0x68>
 801696c:	e7ce      	b.n	801690c <_puts_r+0x38>
 801696e:	3e01      	subs	r6, #1
 8016970:	e7e4      	b.n	801693c <_puts_r+0x68>
 8016972:	6823      	ldr	r3, [r4, #0]
 8016974:	1c5a      	adds	r2, r3, #1
 8016976:	6022      	str	r2, [r4, #0]
 8016978:	220a      	movs	r2, #10
 801697a:	701a      	strb	r2, [r3, #0]
 801697c:	e7ee      	b.n	801695c <_puts_r+0x88>
	...

08016980 <puts>:
 8016980:	4b02      	ldr	r3, [pc, #8]	@ (801698c <puts+0xc>)
 8016982:	4601      	mov	r1, r0
 8016984:	6818      	ldr	r0, [r3, #0]
 8016986:	f7ff bfa5 	b.w	80168d4 <_puts_r>
 801698a:	bf00      	nop
 801698c:	24000020 	.word	0x24000020

08016990 <setvbuf>:
 8016990:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016994:	461d      	mov	r5, r3
 8016996:	4b57      	ldr	r3, [pc, #348]	@ (8016af4 <setvbuf+0x164>)
 8016998:	681f      	ldr	r7, [r3, #0]
 801699a:	4604      	mov	r4, r0
 801699c:	460e      	mov	r6, r1
 801699e:	4690      	mov	r8, r2
 80169a0:	b127      	cbz	r7, 80169ac <setvbuf+0x1c>
 80169a2:	6a3b      	ldr	r3, [r7, #32]
 80169a4:	b913      	cbnz	r3, 80169ac <setvbuf+0x1c>
 80169a6:	4638      	mov	r0, r7
 80169a8:	f7ff ff4c 	bl	8016844 <__sinit>
 80169ac:	f1b8 0f02 	cmp.w	r8, #2
 80169b0:	d006      	beq.n	80169c0 <setvbuf+0x30>
 80169b2:	f1b8 0f01 	cmp.w	r8, #1
 80169b6:	f200 809a 	bhi.w	8016aee <setvbuf+0x15e>
 80169ba:	2d00      	cmp	r5, #0
 80169bc:	f2c0 8097 	blt.w	8016aee <setvbuf+0x15e>
 80169c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80169c2:	07d9      	lsls	r1, r3, #31
 80169c4:	d405      	bmi.n	80169d2 <setvbuf+0x42>
 80169c6:	89a3      	ldrh	r3, [r4, #12]
 80169c8:	059a      	lsls	r2, r3, #22
 80169ca:	d402      	bmi.n	80169d2 <setvbuf+0x42>
 80169cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80169ce:	f000 fa74 	bl	8016eba <__retarget_lock_acquire_recursive>
 80169d2:	4621      	mov	r1, r4
 80169d4:	4638      	mov	r0, r7
 80169d6:	f000 ff75 	bl	80178c4 <_fflush_r>
 80169da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80169dc:	b141      	cbz	r1, 80169f0 <setvbuf+0x60>
 80169de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80169e2:	4299      	cmp	r1, r3
 80169e4:	d002      	beq.n	80169ec <setvbuf+0x5c>
 80169e6:	4638      	mov	r0, r7
 80169e8:	f000 fa78 	bl	8016edc <_free_r>
 80169ec:	2300      	movs	r3, #0
 80169ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80169f0:	2300      	movs	r3, #0
 80169f2:	61a3      	str	r3, [r4, #24]
 80169f4:	6063      	str	r3, [r4, #4]
 80169f6:	89a3      	ldrh	r3, [r4, #12]
 80169f8:	061b      	lsls	r3, r3, #24
 80169fa:	d503      	bpl.n	8016a04 <setvbuf+0x74>
 80169fc:	6921      	ldr	r1, [r4, #16]
 80169fe:	4638      	mov	r0, r7
 8016a00:	f000 fa6c 	bl	8016edc <_free_r>
 8016a04:	89a3      	ldrh	r3, [r4, #12]
 8016a06:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8016a0a:	f023 0303 	bic.w	r3, r3, #3
 8016a0e:	f1b8 0f02 	cmp.w	r8, #2
 8016a12:	81a3      	strh	r3, [r4, #12]
 8016a14:	d061      	beq.n	8016ada <setvbuf+0x14a>
 8016a16:	ab01      	add	r3, sp, #4
 8016a18:	466a      	mov	r2, sp
 8016a1a:	4621      	mov	r1, r4
 8016a1c:	4638      	mov	r0, r7
 8016a1e:	f000 ff79 	bl	8017914 <__swhatbuf_r>
 8016a22:	89a3      	ldrh	r3, [r4, #12]
 8016a24:	4318      	orrs	r0, r3
 8016a26:	81a0      	strh	r0, [r4, #12]
 8016a28:	bb2d      	cbnz	r5, 8016a76 <setvbuf+0xe6>
 8016a2a:	9d00      	ldr	r5, [sp, #0]
 8016a2c:	4628      	mov	r0, r5
 8016a2e:	f7ff fdbf 	bl	80165b0 <malloc>
 8016a32:	4606      	mov	r6, r0
 8016a34:	2800      	cmp	r0, #0
 8016a36:	d152      	bne.n	8016ade <setvbuf+0x14e>
 8016a38:	f8dd 9000 	ldr.w	r9, [sp]
 8016a3c:	45a9      	cmp	r9, r5
 8016a3e:	d140      	bne.n	8016ac2 <setvbuf+0x132>
 8016a40:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8016a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a48:	f043 0202 	orr.w	r2, r3, #2
 8016a4c:	81a2      	strh	r2, [r4, #12]
 8016a4e:	2200      	movs	r2, #0
 8016a50:	60a2      	str	r2, [r4, #8]
 8016a52:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8016a56:	6022      	str	r2, [r4, #0]
 8016a58:	6122      	str	r2, [r4, #16]
 8016a5a:	2201      	movs	r2, #1
 8016a5c:	6162      	str	r2, [r4, #20]
 8016a5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016a60:	07d6      	lsls	r6, r2, #31
 8016a62:	d404      	bmi.n	8016a6e <setvbuf+0xde>
 8016a64:	0598      	lsls	r0, r3, #22
 8016a66:	d402      	bmi.n	8016a6e <setvbuf+0xde>
 8016a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016a6a:	f000 fa27 	bl	8016ebc <__retarget_lock_release_recursive>
 8016a6e:	4628      	mov	r0, r5
 8016a70:	b003      	add	sp, #12
 8016a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a76:	2e00      	cmp	r6, #0
 8016a78:	d0d8      	beq.n	8016a2c <setvbuf+0x9c>
 8016a7a:	6a3b      	ldr	r3, [r7, #32]
 8016a7c:	b913      	cbnz	r3, 8016a84 <setvbuf+0xf4>
 8016a7e:	4638      	mov	r0, r7
 8016a80:	f7ff fee0 	bl	8016844 <__sinit>
 8016a84:	f1b8 0f01 	cmp.w	r8, #1
 8016a88:	bf08      	it	eq
 8016a8a:	89a3      	ldrheq	r3, [r4, #12]
 8016a8c:	6026      	str	r6, [r4, #0]
 8016a8e:	bf04      	itt	eq
 8016a90:	f043 0301 	orreq.w	r3, r3, #1
 8016a94:	81a3      	strheq	r3, [r4, #12]
 8016a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a9a:	f013 0208 	ands.w	r2, r3, #8
 8016a9e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8016aa2:	d01e      	beq.n	8016ae2 <setvbuf+0x152>
 8016aa4:	07d9      	lsls	r1, r3, #31
 8016aa6:	bf41      	itttt	mi
 8016aa8:	2200      	movmi	r2, #0
 8016aaa:	426d      	negmi	r5, r5
 8016aac:	60a2      	strmi	r2, [r4, #8]
 8016aae:	61a5      	strmi	r5, [r4, #24]
 8016ab0:	bf58      	it	pl
 8016ab2:	60a5      	strpl	r5, [r4, #8]
 8016ab4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016ab6:	07d2      	lsls	r2, r2, #31
 8016ab8:	d401      	bmi.n	8016abe <setvbuf+0x12e>
 8016aba:	059b      	lsls	r3, r3, #22
 8016abc:	d513      	bpl.n	8016ae6 <setvbuf+0x156>
 8016abe:	2500      	movs	r5, #0
 8016ac0:	e7d5      	b.n	8016a6e <setvbuf+0xde>
 8016ac2:	4648      	mov	r0, r9
 8016ac4:	f7ff fd74 	bl	80165b0 <malloc>
 8016ac8:	4606      	mov	r6, r0
 8016aca:	2800      	cmp	r0, #0
 8016acc:	d0b8      	beq.n	8016a40 <setvbuf+0xb0>
 8016ace:	89a3      	ldrh	r3, [r4, #12]
 8016ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016ad4:	81a3      	strh	r3, [r4, #12]
 8016ad6:	464d      	mov	r5, r9
 8016ad8:	e7cf      	b.n	8016a7a <setvbuf+0xea>
 8016ada:	2500      	movs	r5, #0
 8016adc:	e7b2      	b.n	8016a44 <setvbuf+0xb4>
 8016ade:	46a9      	mov	r9, r5
 8016ae0:	e7f5      	b.n	8016ace <setvbuf+0x13e>
 8016ae2:	60a2      	str	r2, [r4, #8]
 8016ae4:	e7e6      	b.n	8016ab4 <setvbuf+0x124>
 8016ae6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016ae8:	f000 f9e8 	bl	8016ebc <__retarget_lock_release_recursive>
 8016aec:	e7e7      	b.n	8016abe <setvbuf+0x12e>
 8016aee:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8016af2:	e7bc      	b.n	8016a6e <setvbuf+0xde>
 8016af4:	24000020 	.word	0x24000020

08016af8 <siprintf>:
 8016af8:	b40e      	push	{r1, r2, r3}
 8016afa:	b510      	push	{r4, lr}
 8016afc:	b09d      	sub	sp, #116	@ 0x74
 8016afe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8016b00:	9002      	str	r0, [sp, #8]
 8016b02:	9006      	str	r0, [sp, #24]
 8016b04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016b08:	480a      	ldr	r0, [pc, #40]	@ (8016b34 <siprintf+0x3c>)
 8016b0a:	9107      	str	r1, [sp, #28]
 8016b0c:	9104      	str	r1, [sp, #16]
 8016b0e:	490a      	ldr	r1, [pc, #40]	@ (8016b38 <siprintf+0x40>)
 8016b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b14:	9105      	str	r1, [sp, #20]
 8016b16:	2400      	movs	r4, #0
 8016b18:	a902      	add	r1, sp, #8
 8016b1a:	6800      	ldr	r0, [r0, #0]
 8016b1c:	9301      	str	r3, [sp, #4]
 8016b1e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8016b20:	f000 fa82 	bl	8017028 <_svfiprintf_r>
 8016b24:	9b02      	ldr	r3, [sp, #8]
 8016b26:	701c      	strb	r4, [r3, #0]
 8016b28:	b01d      	add	sp, #116	@ 0x74
 8016b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b2e:	b003      	add	sp, #12
 8016b30:	4770      	bx	lr
 8016b32:	bf00      	nop
 8016b34:	24000020 	.word	0x24000020
 8016b38:	ffff0208 	.word	0xffff0208

08016b3c <__sread>:
 8016b3c:	b510      	push	{r4, lr}
 8016b3e:	460c      	mov	r4, r1
 8016b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b44:	f000 f95a 	bl	8016dfc <_read_r>
 8016b48:	2800      	cmp	r0, #0
 8016b4a:	bfab      	itete	ge
 8016b4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016b4e:	89a3      	ldrhlt	r3, [r4, #12]
 8016b50:	181b      	addge	r3, r3, r0
 8016b52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016b56:	bfac      	ite	ge
 8016b58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016b5a:	81a3      	strhlt	r3, [r4, #12]
 8016b5c:	bd10      	pop	{r4, pc}

08016b5e <__swrite>:
 8016b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b62:	461f      	mov	r7, r3
 8016b64:	898b      	ldrh	r3, [r1, #12]
 8016b66:	05db      	lsls	r3, r3, #23
 8016b68:	4605      	mov	r5, r0
 8016b6a:	460c      	mov	r4, r1
 8016b6c:	4616      	mov	r6, r2
 8016b6e:	d505      	bpl.n	8016b7c <__swrite+0x1e>
 8016b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b74:	2302      	movs	r3, #2
 8016b76:	2200      	movs	r2, #0
 8016b78:	f000 f92e 	bl	8016dd8 <_lseek_r>
 8016b7c:	89a3      	ldrh	r3, [r4, #12]
 8016b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016b86:	81a3      	strh	r3, [r4, #12]
 8016b88:	4632      	mov	r2, r6
 8016b8a:	463b      	mov	r3, r7
 8016b8c:	4628      	mov	r0, r5
 8016b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b92:	f000 b955 	b.w	8016e40 <_write_r>

08016b96 <__sseek>:
 8016b96:	b510      	push	{r4, lr}
 8016b98:	460c      	mov	r4, r1
 8016b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b9e:	f000 f91b 	bl	8016dd8 <_lseek_r>
 8016ba2:	1c43      	adds	r3, r0, #1
 8016ba4:	89a3      	ldrh	r3, [r4, #12]
 8016ba6:	bf15      	itete	ne
 8016ba8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016baa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016bae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016bb2:	81a3      	strheq	r3, [r4, #12]
 8016bb4:	bf18      	it	ne
 8016bb6:	81a3      	strhne	r3, [r4, #12]
 8016bb8:	bd10      	pop	{r4, pc}

08016bba <__sclose>:
 8016bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bbe:	f000 b89d 	b.w	8016cfc <_close_r>

08016bc2 <__swbuf_r>:
 8016bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bc4:	460e      	mov	r6, r1
 8016bc6:	4614      	mov	r4, r2
 8016bc8:	4605      	mov	r5, r0
 8016bca:	b118      	cbz	r0, 8016bd4 <__swbuf_r+0x12>
 8016bcc:	6a03      	ldr	r3, [r0, #32]
 8016bce:	b90b      	cbnz	r3, 8016bd4 <__swbuf_r+0x12>
 8016bd0:	f7ff fe38 	bl	8016844 <__sinit>
 8016bd4:	69a3      	ldr	r3, [r4, #24]
 8016bd6:	60a3      	str	r3, [r4, #8]
 8016bd8:	89a3      	ldrh	r3, [r4, #12]
 8016bda:	071a      	lsls	r2, r3, #28
 8016bdc:	d501      	bpl.n	8016be2 <__swbuf_r+0x20>
 8016bde:	6923      	ldr	r3, [r4, #16]
 8016be0:	b943      	cbnz	r3, 8016bf4 <__swbuf_r+0x32>
 8016be2:	4621      	mov	r1, r4
 8016be4:	4628      	mov	r0, r5
 8016be6:	f000 f82b 	bl	8016c40 <__swsetup_r>
 8016bea:	b118      	cbz	r0, 8016bf4 <__swbuf_r+0x32>
 8016bec:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016bf0:	4638      	mov	r0, r7
 8016bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bf4:	6823      	ldr	r3, [r4, #0]
 8016bf6:	6922      	ldr	r2, [r4, #16]
 8016bf8:	1a98      	subs	r0, r3, r2
 8016bfa:	6963      	ldr	r3, [r4, #20]
 8016bfc:	b2f6      	uxtb	r6, r6
 8016bfe:	4283      	cmp	r3, r0
 8016c00:	4637      	mov	r7, r6
 8016c02:	dc05      	bgt.n	8016c10 <__swbuf_r+0x4e>
 8016c04:	4621      	mov	r1, r4
 8016c06:	4628      	mov	r0, r5
 8016c08:	f000 fe5c 	bl	80178c4 <_fflush_r>
 8016c0c:	2800      	cmp	r0, #0
 8016c0e:	d1ed      	bne.n	8016bec <__swbuf_r+0x2a>
 8016c10:	68a3      	ldr	r3, [r4, #8]
 8016c12:	3b01      	subs	r3, #1
 8016c14:	60a3      	str	r3, [r4, #8]
 8016c16:	6823      	ldr	r3, [r4, #0]
 8016c18:	1c5a      	adds	r2, r3, #1
 8016c1a:	6022      	str	r2, [r4, #0]
 8016c1c:	701e      	strb	r6, [r3, #0]
 8016c1e:	6962      	ldr	r2, [r4, #20]
 8016c20:	1c43      	adds	r3, r0, #1
 8016c22:	429a      	cmp	r2, r3
 8016c24:	d004      	beq.n	8016c30 <__swbuf_r+0x6e>
 8016c26:	89a3      	ldrh	r3, [r4, #12]
 8016c28:	07db      	lsls	r3, r3, #31
 8016c2a:	d5e1      	bpl.n	8016bf0 <__swbuf_r+0x2e>
 8016c2c:	2e0a      	cmp	r6, #10
 8016c2e:	d1df      	bne.n	8016bf0 <__swbuf_r+0x2e>
 8016c30:	4621      	mov	r1, r4
 8016c32:	4628      	mov	r0, r5
 8016c34:	f000 fe46 	bl	80178c4 <_fflush_r>
 8016c38:	2800      	cmp	r0, #0
 8016c3a:	d0d9      	beq.n	8016bf0 <__swbuf_r+0x2e>
 8016c3c:	e7d6      	b.n	8016bec <__swbuf_r+0x2a>
	...

08016c40 <__swsetup_r>:
 8016c40:	b538      	push	{r3, r4, r5, lr}
 8016c42:	4b29      	ldr	r3, [pc, #164]	@ (8016ce8 <__swsetup_r+0xa8>)
 8016c44:	4605      	mov	r5, r0
 8016c46:	6818      	ldr	r0, [r3, #0]
 8016c48:	460c      	mov	r4, r1
 8016c4a:	b118      	cbz	r0, 8016c54 <__swsetup_r+0x14>
 8016c4c:	6a03      	ldr	r3, [r0, #32]
 8016c4e:	b90b      	cbnz	r3, 8016c54 <__swsetup_r+0x14>
 8016c50:	f7ff fdf8 	bl	8016844 <__sinit>
 8016c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c58:	0719      	lsls	r1, r3, #28
 8016c5a:	d422      	bmi.n	8016ca2 <__swsetup_r+0x62>
 8016c5c:	06da      	lsls	r2, r3, #27
 8016c5e:	d407      	bmi.n	8016c70 <__swsetup_r+0x30>
 8016c60:	2209      	movs	r2, #9
 8016c62:	602a      	str	r2, [r5, #0]
 8016c64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016c68:	81a3      	strh	r3, [r4, #12]
 8016c6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016c6e:	e033      	b.n	8016cd8 <__swsetup_r+0x98>
 8016c70:	0758      	lsls	r0, r3, #29
 8016c72:	d512      	bpl.n	8016c9a <__swsetup_r+0x5a>
 8016c74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016c76:	b141      	cbz	r1, 8016c8a <__swsetup_r+0x4a>
 8016c78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016c7c:	4299      	cmp	r1, r3
 8016c7e:	d002      	beq.n	8016c86 <__swsetup_r+0x46>
 8016c80:	4628      	mov	r0, r5
 8016c82:	f000 f92b 	bl	8016edc <_free_r>
 8016c86:	2300      	movs	r3, #0
 8016c88:	6363      	str	r3, [r4, #52]	@ 0x34
 8016c8a:	89a3      	ldrh	r3, [r4, #12]
 8016c8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016c90:	81a3      	strh	r3, [r4, #12]
 8016c92:	2300      	movs	r3, #0
 8016c94:	6063      	str	r3, [r4, #4]
 8016c96:	6923      	ldr	r3, [r4, #16]
 8016c98:	6023      	str	r3, [r4, #0]
 8016c9a:	89a3      	ldrh	r3, [r4, #12]
 8016c9c:	f043 0308 	orr.w	r3, r3, #8
 8016ca0:	81a3      	strh	r3, [r4, #12]
 8016ca2:	6923      	ldr	r3, [r4, #16]
 8016ca4:	b94b      	cbnz	r3, 8016cba <__swsetup_r+0x7a>
 8016ca6:	89a3      	ldrh	r3, [r4, #12]
 8016ca8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016cb0:	d003      	beq.n	8016cba <__swsetup_r+0x7a>
 8016cb2:	4621      	mov	r1, r4
 8016cb4:	4628      	mov	r0, r5
 8016cb6:	f000 fe53 	bl	8017960 <__smakebuf_r>
 8016cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016cbe:	f013 0201 	ands.w	r2, r3, #1
 8016cc2:	d00a      	beq.n	8016cda <__swsetup_r+0x9a>
 8016cc4:	2200      	movs	r2, #0
 8016cc6:	60a2      	str	r2, [r4, #8]
 8016cc8:	6962      	ldr	r2, [r4, #20]
 8016cca:	4252      	negs	r2, r2
 8016ccc:	61a2      	str	r2, [r4, #24]
 8016cce:	6922      	ldr	r2, [r4, #16]
 8016cd0:	b942      	cbnz	r2, 8016ce4 <__swsetup_r+0xa4>
 8016cd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016cd6:	d1c5      	bne.n	8016c64 <__swsetup_r+0x24>
 8016cd8:	bd38      	pop	{r3, r4, r5, pc}
 8016cda:	0799      	lsls	r1, r3, #30
 8016cdc:	bf58      	it	pl
 8016cde:	6962      	ldrpl	r2, [r4, #20]
 8016ce0:	60a2      	str	r2, [r4, #8]
 8016ce2:	e7f4      	b.n	8016cce <__swsetup_r+0x8e>
 8016ce4:	2000      	movs	r0, #0
 8016ce6:	e7f7      	b.n	8016cd8 <__swsetup_r+0x98>
 8016ce8:	24000020 	.word	0x24000020

08016cec <memset>:
 8016cec:	4402      	add	r2, r0
 8016cee:	4603      	mov	r3, r0
 8016cf0:	4293      	cmp	r3, r2
 8016cf2:	d100      	bne.n	8016cf6 <memset+0xa>
 8016cf4:	4770      	bx	lr
 8016cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8016cfa:	e7f9      	b.n	8016cf0 <memset+0x4>

08016cfc <_close_r>:
 8016cfc:	b538      	push	{r3, r4, r5, lr}
 8016cfe:	4d06      	ldr	r5, [pc, #24]	@ (8016d18 <_close_r+0x1c>)
 8016d00:	2300      	movs	r3, #0
 8016d02:	4604      	mov	r4, r0
 8016d04:	4608      	mov	r0, r1
 8016d06:	602b      	str	r3, [r5, #0]
 8016d08:	f7ea fb4e 	bl	80013a8 <_close>
 8016d0c:	1c43      	adds	r3, r0, #1
 8016d0e:	d102      	bne.n	8016d16 <_close_r+0x1a>
 8016d10:	682b      	ldr	r3, [r5, #0]
 8016d12:	b103      	cbz	r3, 8016d16 <_close_r+0x1a>
 8016d14:	6023      	str	r3, [r4, #0]
 8016d16:	bd38      	pop	{r3, r4, r5, pc}
 8016d18:	240055a8 	.word	0x240055a8

08016d1c <_reclaim_reent>:
 8016d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8016dd4 <_reclaim_reent+0xb8>)
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	4283      	cmp	r3, r0
 8016d22:	b570      	push	{r4, r5, r6, lr}
 8016d24:	4604      	mov	r4, r0
 8016d26:	d053      	beq.n	8016dd0 <_reclaim_reent+0xb4>
 8016d28:	69c3      	ldr	r3, [r0, #28]
 8016d2a:	b31b      	cbz	r3, 8016d74 <_reclaim_reent+0x58>
 8016d2c:	68db      	ldr	r3, [r3, #12]
 8016d2e:	b163      	cbz	r3, 8016d4a <_reclaim_reent+0x2e>
 8016d30:	2500      	movs	r5, #0
 8016d32:	69e3      	ldr	r3, [r4, #28]
 8016d34:	68db      	ldr	r3, [r3, #12]
 8016d36:	5959      	ldr	r1, [r3, r5]
 8016d38:	b9b1      	cbnz	r1, 8016d68 <_reclaim_reent+0x4c>
 8016d3a:	3504      	adds	r5, #4
 8016d3c:	2d80      	cmp	r5, #128	@ 0x80
 8016d3e:	d1f8      	bne.n	8016d32 <_reclaim_reent+0x16>
 8016d40:	69e3      	ldr	r3, [r4, #28]
 8016d42:	4620      	mov	r0, r4
 8016d44:	68d9      	ldr	r1, [r3, #12]
 8016d46:	f000 f8c9 	bl	8016edc <_free_r>
 8016d4a:	69e3      	ldr	r3, [r4, #28]
 8016d4c:	6819      	ldr	r1, [r3, #0]
 8016d4e:	b111      	cbz	r1, 8016d56 <_reclaim_reent+0x3a>
 8016d50:	4620      	mov	r0, r4
 8016d52:	f000 f8c3 	bl	8016edc <_free_r>
 8016d56:	69e3      	ldr	r3, [r4, #28]
 8016d58:	689d      	ldr	r5, [r3, #8]
 8016d5a:	b15d      	cbz	r5, 8016d74 <_reclaim_reent+0x58>
 8016d5c:	4629      	mov	r1, r5
 8016d5e:	4620      	mov	r0, r4
 8016d60:	682d      	ldr	r5, [r5, #0]
 8016d62:	f000 f8bb 	bl	8016edc <_free_r>
 8016d66:	e7f8      	b.n	8016d5a <_reclaim_reent+0x3e>
 8016d68:	680e      	ldr	r6, [r1, #0]
 8016d6a:	4620      	mov	r0, r4
 8016d6c:	f000 f8b6 	bl	8016edc <_free_r>
 8016d70:	4631      	mov	r1, r6
 8016d72:	e7e1      	b.n	8016d38 <_reclaim_reent+0x1c>
 8016d74:	6961      	ldr	r1, [r4, #20]
 8016d76:	b111      	cbz	r1, 8016d7e <_reclaim_reent+0x62>
 8016d78:	4620      	mov	r0, r4
 8016d7a:	f000 f8af 	bl	8016edc <_free_r>
 8016d7e:	69e1      	ldr	r1, [r4, #28]
 8016d80:	b111      	cbz	r1, 8016d88 <_reclaim_reent+0x6c>
 8016d82:	4620      	mov	r0, r4
 8016d84:	f000 f8aa 	bl	8016edc <_free_r>
 8016d88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016d8a:	b111      	cbz	r1, 8016d92 <_reclaim_reent+0x76>
 8016d8c:	4620      	mov	r0, r4
 8016d8e:	f000 f8a5 	bl	8016edc <_free_r>
 8016d92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016d94:	b111      	cbz	r1, 8016d9c <_reclaim_reent+0x80>
 8016d96:	4620      	mov	r0, r4
 8016d98:	f000 f8a0 	bl	8016edc <_free_r>
 8016d9c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8016d9e:	b111      	cbz	r1, 8016da6 <_reclaim_reent+0x8a>
 8016da0:	4620      	mov	r0, r4
 8016da2:	f000 f89b 	bl	8016edc <_free_r>
 8016da6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8016da8:	b111      	cbz	r1, 8016db0 <_reclaim_reent+0x94>
 8016daa:	4620      	mov	r0, r4
 8016dac:	f000 f896 	bl	8016edc <_free_r>
 8016db0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8016db2:	b111      	cbz	r1, 8016dba <_reclaim_reent+0x9e>
 8016db4:	4620      	mov	r0, r4
 8016db6:	f000 f891 	bl	8016edc <_free_r>
 8016dba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8016dbc:	b111      	cbz	r1, 8016dc4 <_reclaim_reent+0xa8>
 8016dbe:	4620      	mov	r0, r4
 8016dc0:	f000 f88c 	bl	8016edc <_free_r>
 8016dc4:	6a23      	ldr	r3, [r4, #32]
 8016dc6:	b11b      	cbz	r3, 8016dd0 <_reclaim_reent+0xb4>
 8016dc8:	4620      	mov	r0, r4
 8016dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016dce:	4718      	bx	r3
 8016dd0:	bd70      	pop	{r4, r5, r6, pc}
 8016dd2:	bf00      	nop
 8016dd4:	24000020 	.word	0x24000020

08016dd8 <_lseek_r>:
 8016dd8:	b538      	push	{r3, r4, r5, lr}
 8016dda:	4d07      	ldr	r5, [pc, #28]	@ (8016df8 <_lseek_r+0x20>)
 8016ddc:	4604      	mov	r4, r0
 8016dde:	4608      	mov	r0, r1
 8016de0:	4611      	mov	r1, r2
 8016de2:	2200      	movs	r2, #0
 8016de4:	602a      	str	r2, [r5, #0]
 8016de6:	461a      	mov	r2, r3
 8016de8:	f7ea faf5 	bl	80013d6 <_lseek>
 8016dec:	1c43      	adds	r3, r0, #1
 8016dee:	d102      	bne.n	8016df6 <_lseek_r+0x1e>
 8016df0:	682b      	ldr	r3, [r5, #0]
 8016df2:	b103      	cbz	r3, 8016df6 <_lseek_r+0x1e>
 8016df4:	6023      	str	r3, [r4, #0]
 8016df6:	bd38      	pop	{r3, r4, r5, pc}
 8016df8:	240055a8 	.word	0x240055a8

08016dfc <_read_r>:
 8016dfc:	b538      	push	{r3, r4, r5, lr}
 8016dfe:	4d07      	ldr	r5, [pc, #28]	@ (8016e1c <_read_r+0x20>)
 8016e00:	4604      	mov	r4, r0
 8016e02:	4608      	mov	r0, r1
 8016e04:	4611      	mov	r1, r2
 8016e06:	2200      	movs	r2, #0
 8016e08:	602a      	str	r2, [r5, #0]
 8016e0a:	461a      	mov	r2, r3
 8016e0c:	f7ea faf4 	bl	80013f8 <_read>
 8016e10:	1c43      	adds	r3, r0, #1
 8016e12:	d102      	bne.n	8016e1a <_read_r+0x1e>
 8016e14:	682b      	ldr	r3, [r5, #0]
 8016e16:	b103      	cbz	r3, 8016e1a <_read_r+0x1e>
 8016e18:	6023      	str	r3, [r4, #0]
 8016e1a:	bd38      	pop	{r3, r4, r5, pc}
 8016e1c:	240055a8 	.word	0x240055a8

08016e20 <_sbrk_r>:
 8016e20:	b538      	push	{r3, r4, r5, lr}
 8016e22:	4d06      	ldr	r5, [pc, #24]	@ (8016e3c <_sbrk_r+0x1c>)
 8016e24:	2300      	movs	r3, #0
 8016e26:	4604      	mov	r4, r0
 8016e28:	4608      	mov	r0, r1
 8016e2a:	602b      	str	r3, [r5, #0]
 8016e2c:	f7ea fd6a 	bl	8001904 <_sbrk>
 8016e30:	1c43      	adds	r3, r0, #1
 8016e32:	d102      	bne.n	8016e3a <_sbrk_r+0x1a>
 8016e34:	682b      	ldr	r3, [r5, #0]
 8016e36:	b103      	cbz	r3, 8016e3a <_sbrk_r+0x1a>
 8016e38:	6023      	str	r3, [r4, #0]
 8016e3a:	bd38      	pop	{r3, r4, r5, pc}
 8016e3c:	240055a8 	.word	0x240055a8

08016e40 <_write_r>:
 8016e40:	b538      	push	{r3, r4, r5, lr}
 8016e42:	4d07      	ldr	r5, [pc, #28]	@ (8016e60 <_write_r+0x20>)
 8016e44:	4604      	mov	r4, r0
 8016e46:	4608      	mov	r0, r1
 8016e48:	4611      	mov	r1, r2
 8016e4a:	2200      	movs	r2, #0
 8016e4c:	602a      	str	r2, [r5, #0]
 8016e4e:	461a      	mov	r2, r3
 8016e50:	f7ea fa7e 	bl	8001350 <_write>
 8016e54:	1c43      	adds	r3, r0, #1
 8016e56:	d102      	bne.n	8016e5e <_write_r+0x1e>
 8016e58:	682b      	ldr	r3, [r5, #0]
 8016e5a:	b103      	cbz	r3, 8016e5e <_write_r+0x1e>
 8016e5c:	6023      	str	r3, [r4, #0]
 8016e5e:	bd38      	pop	{r3, r4, r5, pc}
 8016e60:	240055a8 	.word	0x240055a8

08016e64 <__errno>:
 8016e64:	4b01      	ldr	r3, [pc, #4]	@ (8016e6c <__errno+0x8>)
 8016e66:	6818      	ldr	r0, [r3, #0]
 8016e68:	4770      	bx	lr
 8016e6a:	bf00      	nop
 8016e6c:	24000020 	.word	0x24000020

08016e70 <__libc_init_array>:
 8016e70:	b570      	push	{r4, r5, r6, lr}
 8016e72:	4d0d      	ldr	r5, [pc, #52]	@ (8016ea8 <__libc_init_array+0x38>)
 8016e74:	4c0d      	ldr	r4, [pc, #52]	@ (8016eac <__libc_init_array+0x3c>)
 8016e76:	1b64      	subs	r4, r4, r5
 8016e78:	10a4      	asrs	r4, r4, #2
 8016e7a:	2600      	movs	r6, #0
 8016e7c:	42a6      	cmp	r6, r4
 8016e7e:	d109      	bne.n	8016e94 <__libc_init_array+0x24>
 8016e80:	4d0b      	ldr	r5, [pc, #44]	@ (8016eb0 <__libc_init_array+0x40>)
 8016e82:	4c0c      	ldr	r4, [pc, #48]	@ (8016eb4 <__libc_init_array+0x44>)
 8016e84:	f000 fe1a 	bl	8017abc <_init>
 8016e88:	1b64      	subs	r4, r4, r5
 8016e8a:	10a4      	asrs	r4, r4, #2
 8016e8c:	2600      	movs	r6, #0
 8016e8e:	42a6      	cmp	r6, r4
 8016e90:	d105      	bne.n	8016e9e <__libc_init_array+0x2e>
 8016e92:	bd70      	pop	{r4, r5, r6, pc}
 8016e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e98:	4798      	blx	r3
 8016e9a:	3601      	adds	r6, #1
 8016e9c:	e7ee      	b.n	8016e7c <__libc_init_array+0xc>
 8016e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ea2:	4798      	blx	r3
 8016ea4:	3601      	adds	r6, #1
 8016ea6:	e7f2      	b.n	8016e8e <__libc_init_array+0x1e>
 8016ea8:	08017f84 	.word	0x08017f84
 8016eac:	08017f84 	.word	0x08017f84
 8016eb0:	08017f84 	.word	0x08017f84
 8016eb4:	08017f8c 	.word	0x08017f8c

08016eb8 <__retarget_lock_init_recursive>:
 8016eb8:	4770      	bx	lr

08016eba <__retarget_lock_acquire_recursive>:
 8016eba:	4770      	bx	lr

08016ebc <__retarget_lock_release_recursive>:
 8016ebc:	4770      	bx	lr

08016ebe <memcpy>:
 8016ebe:	440a      	add	r2, r1
 8016ec0:	4291      	cmp	r1, r2
 8016ec2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8016ec6:	d100      	bne.n	8016eca <memcpy+0xc>
 8016ec8:	4770      	bx	lr
 8016eca:	b510      	push	{r4, lr}
 8016ecc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ed0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016ed4:	4291      	cmp	r1, r2
 8016ed6:	d1f9      	bne.n	8016ecc <memcpy+0xe>
 8016ed8:	bd10      	pop	{r4, pc}
	...

08016edc <_free_r>:
 8016edc:	b538      	push	{r3, r4, r5, lr}
 8016ede:	4605      	mov	r5, r0
 8016ee0:	2900      	cmp	r1, #0
 8016ee2:	d041      	beq.n	8016f68 <_free_r+0x8c>
 8016ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ee8:	1f0c      	subs	r4, r1, #4
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	bfb8      	it	lt
 8016eee:	18e4      	addlt	r4, r4, r3
 8016ef0:	f7ff fc10 	bl	8016714 <__malloc_lock>
 8016ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8016f6c <_free_r+0x90>)
 8016ef6:	6813      	ldr	r3, [r2, #0]
 8016ef8:	b933      	cbnz	r3, 8016f08 <_free_r+0x2c>
 8016efa:	6063      	str	r3, [r4, #4]
 8016efc:	6014      	str	r4, [r2, #0]
 8016efe:	4628      	mov	r0, r5
 8016f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f04:	f7ff bc0c 	b.w	8016720 <__malloc_unlock>
 8016f08:	42a3      	cmp	r3, r4
 8016f0a:	d908      	bls.n	8016f1e <_free_r+0x42>
 8016f0c:	6820      	ldr	r0, [r4, #0]
 8016f0e:	1821      	adds	r1, r4, r0
 8016f10:	428b      	cmp	r3, r1
 8016f12:	bf01      	itttt	eq
 8016f14:	6819      	ldreq	r1, [r3, #0]
 8016f16:	685b      	ldreq	r3, [r3, #4]
 8016f18:	1809      	addeq	r1, r1, r0
 8016f1a:	6021      	streq	r1, [r4, #0]
 8016f1c:	e7ed      	b.n	8016efa <_free_r+0x1e>
 8016f1e:	461a      	mov	r2, r3
 8016f20:	685b      	ldr	r3, [r3, #4]
 8016f22:	b10b      	cbz	r3, 8016f28 <_free_r+0x4c>
 8016f24:	42a3      	cmp	r3, r4
 8016f26:	d9fa      	bls.n	8016f1e <_free_r+0x42>
 8016f28:	6811      	ldr	r1, [r2, #0]
 8016f2a:	1850      	adds	r0, r2, r1
 8016f2c:	42a0      	cmp	r0, r4
 8016f2e:	d10b      	bne.n	8016f48 <_free_r+0x6c>
 8016f30:	6820      	ldr	r0, [r4, #0]
 8016f32:	4401      	add	r1, r0
 8016f34:	1850      	adds	r0, r2, r1
 8016f36:	4283      	cmp	r3, r0
 8016f38:	6011      	str	r1, [r2, #0]
 8016f3a:	d1e0      	bne.n	8016efe <_free_r+0x22>
 8016f3c:	6818      	ldr	r0, [r3, #0]
 8016f3e:	685b      	ldr	r3, [r3, #4]
 8016f40:	6053      	str	r3, [r2, #4]
 8016f42:	4408      	add	r0, r1
 8016f44:	6010      	str	r0, [r2, #0]
 8016f46:	e7da      	b.n	8016efe <_free_r+0x22>
 8016f48:	d902      	bls.n	8016f50 <_free_r+0x74>
 8016f4a:	230c      	movs	r3, #12
 8016f4c:	602b      	str	r3, [r5, #0]
 8016f4e:	e7d6      	b.n	8016efe <_free_r+0x22>
 8016f50:	6820      	ldr	r0, [r4, #0]
 8016f52:	1821      	adds	r1, r4, r0
 8016f54:	428b      	cmp	r3, r1
 8016f56:	bf04      	itt	eq
 8016f58:	6819      	ldreq	r1, [r3, #0]
 8016f5a:	685b      	ldreq	r3, [r3, #4]
 8016f5c:	6063      	str	r3, [r4, #4]
 8016f5e:	bf04      	itt	eq
 8016f60:	1809      	addeq	r1, r1, r0
 8016f62:	6021      	streq	r1, [r4, #0]
 8016f64:	6054      	str	r4, [r2, #4]
 8016f66:	e7ca      	b.n	8016efe <_free_r+0x22>
 8016f68:	bd38      	pop	{r3, r4, r5, pc}
 8016f6a:	bf00      	nop
 8016f6c:	24005468 	.word	0x24005468

08016f70 <__ssputs_r>:
 8016f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f74:	688e      	ldr	r6, [r1, #8]
 8016f76:	461f      	mov	r7, r3
 8016f78:	42be      	cmp	r6, r7
 8016f7a:	680b      	ldr	r3, [r1, #0]
 8016f7c:	4682      	mov	sl, r0
 8016f7e:	460c      	mov	r4, r1
 8016f80:	4690      	mov	r8, r2
 8016f82:	d82d      	bhi.n	8016fe0 <__ssputs_r+0x70>
 8016f84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016f88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016f8c:	d026      	beq.n	8016fdc <__ssputs_r+0x6c>
 8016f8e:	6965      	ldr	r5, [r4, #20]
 8016f90:	6909      	ldr	r1, [r1, #16]
 8016f92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016f96:	eba3 0901 	sub.w	r9, r3, r1
 8016f9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016f9e:	1c7b      	adds	r3, r7, #1
 8016fa0:	444b      	add	r3, r9
 8016fa2:	106d      	asrs	r5, r5, #1
 8016fa4:	429d      	cmp	r5, r3
 8016fa6:	bf38      	it	cc
 8016fa8:	461d      	movcc	r5, r3
 8016faa:	0553      	lsls	r3, r2, #21
 8016fac:	d527      	bpl.n	8016ffe <__ssputs_r+0x8e>
 8016fae:	4629      	mov	r1, r5
 8016fb0:	f7ff fb30 	bl	8016614 <_malloc_r>
 8016fb4:	4606      	mov	r6, r0
 8016fb6:	b360      	cbz	r0, 8017012 <__ssputs_r+0xa2>
 8016fb8:	6921      	ldr	r1, [r4, #16]
 8016fba:	464a      	mov	r2, r9
 8016fbc:	f7ff ff7f 	bl	8016ebe <memcpy>
 8016fc0:	89a3      	ldrh	r3, [r4, #12]
 8016fc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016fca:	81a3      	strh	r3, [r4, #12]
 8016fcc:	6126      	str	r6, [r4, #16]
 8016fce:	6165      	str	r5, [r4, #20]
 8016fd0:	444e      	add	r6, r9
 8016fd2:	eba5 0509 	sub.w	r5, r5, r9
 8016fd6:	6026      	str	r6, [r4, #0]
 8016fd8:	60a5      	str	r5, [r4, #8]
 8016fda:	463e      	mov	r6, r7
 8016fdc:	42be      	cmp	r6, r7
 8016fde:	d900      	bls.n	8016fe2 <__ssputs_r+0x72>
 8016fe0:	463e      	mov	r6, r7
 8016fe2:	6820      	ldr	r0, [r4, #0]
 8016fe4:	4632      	mov	r2, r6
 8016fe6:	4641      	mov	r1, r8
 8016fe8:	f000 fcf6 	bl	80179d8 <memmove>
 8016fec:	68a3      	ldr	r3, [r4, #8]
 8016fee:	1b9b      	subs	r3, r3, r6
 8016ff0:	60a3      	str	r3, [r4, #8]
 8016ff2:	6823      	ldr	r3, [r4, #0]
 8016ff4:	4433      	add	r3, r6
 8016ff6:	6023      	str	r3, [r4, #0]
 8016ff8:	2000      	movs	r0, #0
 8016ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ffe:	462a      	mov	r2, r5
 8017000:	f000 fd26 	bl	8017a50 <_realloc_r>
 8017004:	4606      	mov	r6, r0
 8017006:	2800      	cmp	r0, #0
 8017008:	d1e0      	bne.n	8016fcc <__ssputs_r+0x5c>
 801700a:	6921      	ldr	r1, [r4, #16]
 801700c:	4650      	mov	r0, sl
 801700e:	f7ff ff65 	bl	8016edc <_free_r>
 8017012:	230c      	movs	r3, #12
 8017014:	f8ca 3000 	str.w	r3, [sl]
 8017018:	89a3      	ldrh	r3, [r4, #12]
 801701a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801701e:	81a3      	strh	r3, [r4, #12]
 8017020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017024:	e7e9      	b.n	8016ffa <__ssputs_r+0x8a>
	...

08017028 <_svfiprintf_r>:
 8017028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801702c:	4698      	mov	r8, r3
 801702e:	898b      	ldrh	r3, [r1, #12]
 8017030:	061b      	lsls	r3, r3, #24
 8017032:	b09d      	sub	sp, #116	@ 0x74
 8017034:	4607      	mov	r7, r0
 8017036:	460d      	mov	r5, r1
 8017038:	4614      	mov	r4, r2
 801703a:	d510      	bpl.n	801705e <_svfiprintf_r+0x36>
 801703c:	690b      	ldr	r3, [r1, #16]
 801703e:	b973      	cbnz	r3, 801705e <_svfiprintf_r+0x36>
 8017040:	2140      	movs	r1, #64	@ 0x40
 8017042:	f7ff fae7 	bl	8016614 <_malloc_r>
 8017046:	6028      	str	r0, [r5, #0]
 8017048:	6128      	str	r0, [r5, #16]
 801704a:	b930      	cbnz	r0, 801705a <_svfiprintf_r+0x32>
 801704c:	230c      	movs	r3, #12
 801704e:	603b      	str	r3, [r7, #0]
 8017050:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017054:	b01d      	add	sp, #116	@ 0x74
 8017056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801705a:	2340      	movs	r3, #64	@ 0x40
 801705c:	616b      	str	r3, [r5, #20]
 801705e:	2300      	movs	r3, #0
 8017060:	9309      	str	r3, [sp, #36]	@ 0x24
 8017062:	2320      	movs	r3, #32
 8017064:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017068:	f8cd 800c 	str.w	r8, [sp, #12]
 801706c:	2330      	movs	r3, #48	@ 0x30
 801706e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801720c <_svfiprintf_r+0x1e4>
 8017072:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017076:	f04f 0901 	mov.w	r9, #1
 801707a:	4623      	mov	r3, r4
 801707c:	469a      	mov	sl, r3
 801707e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017082:	b10a      	cbz	r2, 8017088 <_svfiprintf_r+0x60>
 8017084:	2a25      	cmp	r2, #37	@ 0x25
 8017086:	d1f9      	bne.n	801707c <_svfiprintf_r+0x54>
 8017088:	ebba 0b04 	subs.w	fp, sl, r4
 801708c:	d00b      	beq.n	80170a6 <_svfiprintf_r+0x7e>
 801708e:	465b      	mov	r3, fp
 8017090:	4622      	mov	r2, r4
 8017092:	4629      	mov	r1, r5
 8017094:	4638      	mov	r0, r7
 8017096:	f7ff ff6b 	bl	8016f70 <__ssputs_r>
 801709a:	3001      	adds	r0, #1
 801709c:	f000 80a7 	beq.w	80171ee <_svfiprintf_r+0x1c6>
 80170a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80170a2:	445a      	add	r2, fp
 80170a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80170a6:	f89a 3000 	ldrb.w	r3, [sl]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	f000 809f 	beq.w	80171ee <_svfiprintf_r+0x1c6>
 80170b0:	2300      	movs	r3, #0
 80170b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80170b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80170ba:	f10a 0a01 	add.w	sl, sl, #1
 80170be:	9304      	str	r3, [sp, #16]
 80170c0:	9307      	str	r3, [sp, #28]
 80170c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80170c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80170c8:	4654      	mov	r4, sl
 80170ca:	2205      	movs	r2, #5
 80170cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170d0:	484e      	ldr	r0, [pc, #312]	@ (801720c <_svfiprintf_r+0x1e4>)
 80170d2:	f7e9 f90d 	bl	80002f0 <memchr>
 80170d6:	9a04      	ldr	r2, [sp, #16]
 80170d8:	b9d8      	cbnz	r0, 8017112 <_svfiprintf_r+0xea>
 80170da:	06d0      	lsls	r0, r2, #27
 80170dc:	bf44      	itt	mi
 80170de:	2320      	movmi	r3, #32
 80170e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80170e4:	0711      	lsls	r1, r2, #28
 80170e6:	bf44      	itt	mi
 80170e8:	232b      	movmi	r3, #43	@ 0x2b
 80170ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80170ee:	f89a 3000 	ldrb.w	r3, [sl]
 80170f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80170f4:	d015      	beq.n	8017122 <_svfiprintf_r+0xfa>
 80170f6:	9a07      	ldr	r2, [sp, #28]
 80170f8:	4654      	mov	r4, sl
 80170fa:	2000      	movs	r0, #0
 80170fc:	f04f 0c0a 	mov.w	ip, #10
 8017100:	4621      	mov	r1, r4
 8017102:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017106:	3b30      	subs	r3, #48	@ 0x30
 8017108:	2b09      	cmp	r3, #9
 801710a:	d94b      	bls.n	80171a4 <_svfiprintf_r+0x17c>
 801710c:	b1b0      	cbz	r0, 801713c <_svfiprintf_r+0x114>
 801710e:	9207      	str	r2, [sp, #28]
 8017110:	e014      	b.n	801713c <_svfiprintf_r+0x114>
 8017112:	eba0 0308 	sub.w	r3, r0, r8
 8017116:	fa09 f303 	lsl.w	r3, r9, r3
 801711a:	4313      	orrs	r3, r2
 801711c:	9304      	str	r3, [sp, #16]
 801711e:	46a2      	mov	sl, r4
 8017120:	e7d2      	b.n	80170c8 <_svfiprintf_r+0xa0>
 8017122:	9b03      	ldr	r3, [sp, #12]
 8017124:	1d19      	adds	r1, r3, #4
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	9103      	str	r1, [sp, #12]
 801712a:	2b00      	cmp	r3, #0
 801712c:	bfbb      	ittet	lt
 801712e:	425b      	neglt	r3, r3
 8017130:	f042 0202 	orrlt.w	r2, r2, #2
 8017134:	9307      	strge	r3, [sp, #28]
 8017136:	9307      	strlt	r3, [sp, #28]
 8017138:	bfb8      	it	lt
 801713a:	9204      	strlt	r2, [sp, #16]
 801713c:	7823      	ldrb	r3, [r4, #0]
 801713e:	2b2e      	cmp	r3, #46	@ 0x2e
 8017140:	d10a      	bne.n	8017158 <_svfiprintf_r+0x130>
 8017142:	7863      	ldrb	r3, [r4, #1]
 8017144:	2b2a      	cmp	r3, #42	@ 0x2a
 8017146:	d132      	bne.n	80171ae <_svfiprintf_r+0x186>
 8017148:	9b03      	ldr	r3, [sp, #12]
 801714a:	1d1a      	adds	r2, r3, #4
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	9203      	str	r2, [sp, #12]
 8017150:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017154:	3402      	adds	r4, #2
 8017156:	9305      	str	r3, [sp, #20]
 8017158:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801721c <_svfiprintf_r+0x1f4>
 801715c:	7821      	ldrb	r1, [r4, #0]
 801715e:	2203      	movs	r2, #3
 8017160:	4650      	mov	r0, sl
 8017162:	f7e9 f8c5 	bl	80002f0 <memchr>
 8017166:	b138      	cbz	r0, 8017178 <_svfiprintf_r+0x150>
 8017168:	9b04      	ldr	r3, [sp, #16]
 801716a:	eba0 000a 	sub.w	r0, r0, sl
 801716e:	2240      	movs	r2, #64	@ 0x40
 8017170:	4082      	lsls	r2, r0
 8017172:	4313      	orrs	r3, r2
 8017174:	3401      	adds	r4, #1
 8017176:	9304      	str	r3, [sp, #16]
 8017178:	f814 1b01 	ldrb.w	r1, [r4], #1
 801717c:	4824      	ldr	r0, [pc, #144]	@ (8017210 <_svfiprintf_r+0x1e8>)
 801717e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017182:	2206      	movs	r2, #6
 8017184:	f7e9 f8b4 	bl	80002f0 <memchr>
 8017188:	2800      	cmp	r0, #0
 801718a:	d036      	beq.n	80171fa <_svfiprintf_r+0x1d2>
 801718c:	4b21      	ldr	r3, [pc, #132]	@ (8017214 <_svfiprintf_r+0x1ec>)
 801718e:	bb1b      	cbnz	r3, 80171d8 <_svfiprintf_r+0x1b0>
 8017190:	9b03      	ldr	r3, [sp, #12]
 8017192:	3307      	adds	r3, #7
 8017194:	f023 0307 	bic.w	r3, r3, #7
 8017198:	3308      	adds	r3, #8
 801719a:	9303      	str	r3, [sp, #12]
 801719c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801719e:	4433      	add	r3, r6
 80171a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80171a2:	e76a      	b.n	801707a <_svfiprintf_r+0x52>
 80171a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80171a8:	460c      	mov	r4, r1
 80171aa:	2001      	movs	r0, #1
 80171ac:	e7a8      	b.n	8017100 <_svfiprintf_r+0xd8>
 80171ae:	2300      	movs	r3, #0
 80171b0:	3401      	adds	r4, #1
 80171b2:	9305      	str	r3, [sp, #20]
 80171b4:	4619      	mov	r1, r3
 80171b6:	f04f 0c0a 	mov.w	ip, #10
 80171ba:	4620      	mov	r0, r4
 80171bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171c0:	3a30      	subs	r2, #48	@ 0x30
 80171c2:	2a09      	cmp	r2, #9
 80171c4:	d903      	bls.n	80171ce <_svfiprintf_r+0x1a6>
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d0c6      	beq.n	8017158 <_svfiprintf_r+0x130>
 80171ca:	9105      	str	r1, [sp, #20]
 80171cc:	e7c4      	b.n	8017158 <_svfiprintf_r+0x130>
 80171ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80171d2:	4604      	mov	r4, r0
 80171d4:	2301      	movs	r3, #1
 80171d6:	e7f0      	b.n	80171ba <_svfiprintf_r+0x192>
 80171d8:	ab03      	add	r3, sp, #12
 80171da:	9300      	str	r3, [sp, #0]
 80171dc:	462a      	mov	r2, r5
 80171de:	4b0e      	ldr	r3, [pc, #56]	@ (8017218 <_svfiprintf_r+0x1f0>)
 80171e0:	a904      	add	r1, sp, #16
 80171e2:	4638      	mov	r0, r7
 80171e4:	f3af 8000 	nop.w
 80171e8:	1c42      	adds	r2, r0, #1
 80171ea:	4606      	mov	r6, r0
 80171ec:	d1d6      	bne.n	801719c <_svfiprintf_r+0x174>
 80171ee:	89ab      	ldrh	r3, [r5, #12]
 80171f0:	065b      	lsls	r3, r3, #25
 80171f2:	f53f af2d 	bmi.w	8017050 <_svfiprintf_r+0x28>
 80171f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80171f8:	e72c      	b.n	8017054 <_svfiprintf_r+0x2c>
 80171fa:	ab03      	add	r3, sp, #12
 80171fc:	9300      	str	r3, [sp, #0]
 80171fe:	462a      	mov	r2, r5
 8017200:	4b05      	ldr	r3, [pc, #20]	@ (8017218 <_svfiprintf_r+0x1f0>)
 8017202:	a904      	add	r1, sp, #16
 8017204:	4638      	mov	r0, r7
 8017206:	f000 f9bb 	bl	8017580 <_printf_i>
 801720a:	e7ed      	b.n	80171e8 <_svfiprintf_r+0x1c0>
 801720c:	08017f48 	.word	0x08017f48
 8017210:	08017f52 	.word	0x08017f52
 8017214:	00000000 	.word	0x00000000
 8017218:	08016f71 	.word	0x08016f71
 801721c:	08017f4e 	.word	0x08017f4e

08017220 <__sfputc_r>:
 8017220:	6893      	ldr	r3, [r2, #8]
 8017222:	3b01      	subs	r3, #1
 8017224:	2b00      	cmp	r3, #0
 8017226:	b410      	push	{r4}
 8017228:	6093      	str	r3, [r2, #8]
 801722a:	da08      	bge.n	801723e <__sfputc_r+0x1e>
 801722c:	6994      	ldr	r4, [r2, #24]
 801722e:	42a3      	cmp	r3, r4
 8017230:	db01      	blt.n	8017236 <__sfputc_r+0x16>
 8017232:	290a      	cmp	r1, #10
 8017234:	d103      	bne.n	801723e <__sfputc_r+0x1e>
 8017236:	f85d 4b04 	ldr.w	r4, [sp], #4
 801723a:	f7ff bcc2 	b.w	8016bc2 <__swbuf_r>
 801723e:	6813      	ldr	r3, [r2, #0]
 8017240:	1c58      	adds	r0, r3, #1
 8017242:	6010      	str	r0, [r2, #0]
 8017244:	7019      	strb	r1, [r3, #0]
 8017246:	4608      	mov	r0, r1
 8017248:	f85d 4b04 	ldr.w	r4, [sp], #4
 801724c:	4770      	bx	lr

0801724e <__sfputs_r>:
 801724e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017250:	4606      	mov	r6, r0
 8017252:	460f      	mov	r7, r1
 8017254:	4614      	mov	r4, r2
 8017256:	18d5      	adds	r5, r2, r3
 8017258:	42ac      	cmp	r4, r5
 801725a:	d101      	bne.n	8017260 <__sfputs_r+0x12>
 801725c:	2000      	movs	r0, #0
 801725e:	e007      	b.n	8017270 <__sfputs_r+0x22>
 8017260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017264:	463a      	mov	r2, r7
 8017266:	4630      	mov	r0, r6
 8017268:	f7ff ffda 	bl	8017220 <__sfputc_r>
 801726c:	1c43      	adds	r3, r0, #1
 801726e:	d1f3      	bne.n	8017258 <__sfputs_r+0xa>
 8017270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017274 <_vfiprintf_r>:
 8017274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017278:	460d      	mov	r5, r1
 801727a:	b09d      	sub	sp, #116	@ 0x74
 801727c:	4614      	mov	r4, r2
 801727e:	4698      	mov	r8, r3
 8017280:	4606      	mov	r6, r0
 8017282:	b118      	cbz	r0, 801728c <_vfiprintf_r+0x18>
 8017284:	6a03      	ldr	r3, [r0, #32]
 8017286:	b90b      	cbnz	r3, 801728c <_vfiprintf_r+0x18>
 8017288:	f7ff fadc 	bl	8016844 <__sinit>
 801728c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801728e:	07d9      	lsls	r1, r3, #31
 8017290:	d405      	bmi.n	801729e <_vfiprintf_r+0x2a>
 8017292:	89ab      	ldrh	r3, [r5, #12]
 8017294:	059a      	lsls	r2, r3, #22
 8017296:	d402      	bmi.n	801729e <_vfiprintf_r+0x2a>
 8017298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801729a:	f7ff fe0e 	bl	8016eba <__retarget_lock_acquire_recursive>
 801729e:	89ab      	ldrh	r3, [r5, #12]
 80172a0:	071b      	lsls	r3, r3, #28
 80172a2:	d501      	bpl.n	80172a8 <_vfiprintf_r+0x34>
 80172a4:	692b      	ldr	r3, [r5, #16]
 80172a6:	b99b      	cbnz	r3, 80172d0 <_vfiprintf_r+0x5c>
 80172a8:	4629      	mov	r1, r5
 80172aa:	4630      	mov	r0, r6
 80172ac:	f7ff fcc8 	bl	8016c40 <__swsetup_r>
 80172b0:	b170      	cbz	r0, 80172d0 <_vfiprintf_r+0x5c>
 80172b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80172b4:	07dc      	lsls	r4, r3, #31
 80172b6:	d504      	bpl.n	80172c2 <_vfiprintf_r+0x4e>
 80172b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80172bc:	b01d      	add	sp, #116	@ 0x74
 80172be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172c2:	89ab      	ldrh	r3, [r5, #12]
 80172c4:	0598      	lsls	r0, r3, #22
 80172c6:	d4f7      	bmi.n	80172b8 <_vfiprintf_r+0x44>
 80172c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80172ca:	f7ff fdf7 	bl	8016ebc <__retarget_lock_release_recursive>
 80172ce:	e7f3      	b.n	80172b8 <_vfiprintf_r+0x44>
 80172d0:	2300      	movs	r3, #0
 80172d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80172d4:	2320      	movs	r3, #32
 80172d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80172da:	f8cd 800c 	str.w	r8, [sp, #12]
 80172de:	2330      	movs	r3, #48	@ 0x30
 80172e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017490 <_vfiprintf_r+0x21c>
 80172e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80172e8:	f04f 0901 	mov.w	r9, #1
 80172ec:	4623      	mov	r3, r4
 80172ee:	469a      	mov	sl, r3
 80172f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172f4:	b10a      	cbz	r2, 80172fa <_vfiprintf_r+0x86>
 80172f6:	2a25      	cmp	r2, #37	@ 0x25
 80172f8:	d1f9      	bne.n	80172ee <_vfiprintf_r+0x7a>
 80172fa:	ebba 0b04 	subs.w	fp, sl, r4
 80172fe:	d00b      	beq.n	8017318 <_vfiprintf_r+0xa4>
 8017300:	465b      	mov	r3, fp
 8017302:	4622      	mov	r2, r4
 8017304:	4629      	mov	r1, r5
 8017306:	4630      	mov	r0, r6
 8017308:	f7ff ffa1 	bl	801724e <__sfputs_r>
 801730c:	3001      	adds	r0, #1
 801730e:	f000 80a7 	beq.w	8017460 <_vfiprintf_r+0x1ec>
 8017312:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017314:	445a      	add	r2, fp
 8017316:	9209      	str	r2, [sp, #36]	@ 0x24
 8017318:	f89a 3000 	ldrb.w	r3, [sl]
 801731c:	2b00      	cmp	r3, #0
 801731e:	f000 809f 	beq.w	8017460 <_vfiprintf_r+0x1ec>
 8017322:	2300      	movs	r3, #0
 8017324:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801732c:	f10a 0a01 	add.w	sl, sl, #1
 8017330:	9304      	str	r3, [sp, #16]
 8017332:	9307      	str	r3, [sp, #28]
 8017334:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017338:	931a      	str	r3, [sp, #104]	@ 0x68
 801733a:	4654      	mov	r4, sl
 801733c:	2205      	movs	r2, #5
 801733e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017342:	4853      	ldr	r0, [pc, #332]	@ (8017490 <_vfiprintf_r+0x21c>)
 8017344:	f7e8 ffd4 	bl	80002f0 <memchr>
 8017348:	9a04      	ldr	r2, [sp, #16]
 801734a:	b9d8      	cbnz	r0, 8017384 <_vfiprintf_r+0x110>
 801734c:	06d1      	lsls	r1, r2, #27
 801734e:	bf44      	itt	mi
 8017350:	2320      	movmi	r3, #32
 8017352:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017356:	0713      	lsls	r3, r2, #28
 8017358:	bf44      	itt	mi
 801735a:	232b      	movmi	r3, #43	@ 0x2b
 801735c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017360:	f89a 3000 	ldrb.w	r3, [sl]
 8017364:	2b2a      	cmp	r3, #42	@ 0x2a
 8017366:	d015      	beq.n	8017394 <_vfiprintf_r+0x120>
 8017368:	9a07      	ldr	r2, [sp, #28]
 801736a:	4654      	mov	r4, sl
 801736c:	2000      	movs	r0, #0
 801736e:	f04f 0c0a 	mov.w	ip, #10
 8017372:	4621      	mov	r1, r4
 8017374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017378:	3b30      	subs	r3, #48	@ 0x30
 801737a:	2b09      	cmp	r3, #9
 801737c:	d94b      	bls.n	8017416 <_vfiprintf_r+0x1a2>
 801737e:	b1b0      	cbz	r0, 80173ae <_vfiprintf_r+0x13a>
 8017380:	9207      	str	r2, [sp, #28]
 8017382:	e014      	b.n	80173ae <_vfiprintf_r+0x13a>
 8017384:	eba0 0308 	sub.w	r3, r0, r8
 8017388:	fa09 f303 	lsl.w	r3, r9, r3
 801738c:	4313      	orrs	r3, r2
 801738e:	9304      	str	r3, [sp, #16]
 8017390:	46a2      	mov	sl, r4
 8017392:	e7d2      	b.n	801733a <_vfiprintf_r+0xc6>
 8017394:	9b03      	ldr	r3, [sp, #12]
 8017396:	1d19      	adds	r1, r3, #4
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	9103      	str	r1, [sp, #12]
 801739c:	2b00      	cmp	r3, #0
 801739e:	bfbb      	ittet	lt
 80173a0:	425b      	neglt	r3, r3
 80173a2:	f042 0202 	orrlt.w	r2, r2, #2
 80173a6:	9307      	strge	r3, [sp, #28]
 80173a8:	9307      	strlt	r3, [sp, #28]
 80173aa:	bfb8      	it	lt
 80173ac:	9204      	strlt	r2, [sp, #16]
 80173ae:	7823      	ldrb	r3, [r4, #0]
 80173b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80173b2:	d10a      	bne.n	80173ca <_vfiprintf_r+0x156>
 80173b4:	7863      	ldrb	r3, [r4, #1]
 80173b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80173b8:	d132      	bne.n	8017420 <_vfiprintf_r+0x1ac>
 80173ba:	9b03      	ldr	r3, [sp, #12]
 80173bc:	1d1a      	adds	r2, r3, #4
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	9203      	str	r2, [sp, #12]
 80173c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80173c6:	3402      	adds	r4, #2
 80173c8:	9305      	str	r3, [sp, #20]
 80173ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80174a0 <_vfiprintf_r+0x22c>
 80173ce:	7821      	ldrb	r1, [r4, #0]
 80173d0:	2203      	movs	r2, #3
 80173d2:	4650      	mov	r0, sl
 80173d4:	f7e8 ff8c 	bl	80002f0 <memchr>
 80173d8:	b138      	cbz	r0, 80173ea <_vfiprintf_r+0x176>
 80173da:	9b04      	ldr	r3, [sp, #16]
 80173dc:	eba0 000a 	sub.w	r0, r0, sl
 80173e0:	2240      	movs	r2, #64	@ 0x40
 80173e2:	4082      	lsls	r2, r0
 80173e4:	4313      	orrs	r3, r2
 80173e6:	3401      	adds	r4, #1
 80173e8:	9304      	str	r3, [sp, #16]
 80173ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173ee:	4829      	ldr	r0, [pc, #164]	@ (8017494 <_vfiprintf_r+0x220>)
 80173f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80173f4:	2206      	movs	r2, #6
 80173f6:	f7e8 ff7b 	bl	80002f0 <memchr>
 80173fa:	2800      	cmp	r0, #0
 80173fc:	d03f      	beq.n	801747e <_vfiprintf_r+0x20a>
 80173fe:	4b26      	ldr	r3, [pc, #152]	@ (8017498 <_vfiprintf_r+0x224>)
 8017400:	bb1b      	cbnz	r3, 801744a <_vfiprintf_r+0x1d6>
 8017402:	9b03      	ldr	r3, [sp, #12]
 8017404:	3307      	adds	r3, #7
 8017406:	f023 0307 	bic.w	r3, r3, #7
 801740a:	3308      	adds	r3, #8
 801740c:	9303      	str	r3, [sp, #12]
 801740e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017410:	443b      	add	r3, r7
 8017412:	9309      	str	r3, [sp, #36]	@ 0x24
 8017414:	e76a      	b.n	80172ec <_vfiprintf_r+0x78>
 8017416:	fb0c 3202 	mla	r2, ip, r2, r3
 801741a:	460c      	mov	r4, r1
 801741c:	2001      	movs	r0, #1
 801741e:	e7a8      	b.n	8017372 <_vfiprintf_r+0xfe>
 8017420:	2300      	movs	r3, #0
 8017422:	3401      	adds	r4, #1
 8017424:	9305      	str	r3, [sp, #20]
 8017426:	4619      	mov	r1, r3
 8017428:	f04f 0c0a 	mov.w	ip, #10
 801742c:	4620      	mov	r0, r4
 801742e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017432:	3a30      	subs	r2, #48	@ 0x30
 8017434:	2a09      	cmp	r2, #9
 8017436:	d903      	bls.n	8017440 <_vfiprintf_r+0x1cc>
 8017438:	2b00      	cmp	r3, #0
 801743a:	d0c6      	beq.n	80173ca <_vfiprintf_r+0x156>
 801743c:	9105      	str	r1, [sp, #20]
 801743e:	e7c4      	b.n	80173ca <_vfiprintf_r+0x156>
 8017440:	fb0c 2101 	mla	r1, ip, r1, r2
 8017444:	4604      	mov	r4, r0
 8017446:	2301      	movs	r3, #1
 8017448:	e7f0      	b.n	801742c <_vfiprintf_r+0x1b8>
 801744a:	ab03      	add	r3, sp, #12
 801744c:	9300      	str	r3, [sp, #0]
 801744e:	462a      	mov	r2, r5
 8017450:	4b12      	ldr	r3, [pc, #72]	@ (801749c <_vfiprintf_r+0x228>)
 8017452:	a904      	add	r1, sp, #16
 8017454:	4630      	mov	r0, r6
 8017456:	f3af 8000 	nop.w
 801745a:	4607      	mov	r7, r0
 801745c:	1c78      	adds	r0, r7, #1
 801745e:	d1d6      	bne.n	801740e <_vfiprintf_r+0x19a>
 8017460:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017462:	07d9      	lsls	r1, r3, #31
 8017464:	d405      	bmi.n	8017472 <_vfiprintf_r+0x1fe>
 8017466:	89ab      	ldrh	r3, [r5, #12]
 8017468:	059a      	lsls	r2, r3, #22
 801746a:	d402      	bmi.n	8017472 <_vfiprintf_r+0x1fe>
 801746c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801746e:	f7ff fd25 	bl	8016ebc <__retarget_lock_release_recursive>
 8017472:	89ab      	ldrh	r3, [r5, #12]
 8017474:	065b      	lsls	r3, r3, #25
 8017476:	f53f af1f 	bmi.w	80172b8 <_vfiprintf_r+0x44>
 801747a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801747c:	e71e      	b.n	80172bc <_vfiprintf_r+0x48>
 801747e:	ab03      	add	r3, sp, #12
 8017480:	9300      	str	r3, [sp, #0]
 8017482:	462a      	mov	r2, r5
 8017484:	4b05      	ldr	r3, [pc, #20]	@ (801749c <_vfiprintf_r+0x228>)
 8017486:	a904      	add	r1, sp, #16
 8017488:	4630      	mov	r0, r6
 801748a:	f000 f879 	bl	8017580 <_printf_i>
 801748e:	e7e4      	b.n	801745a <_vfiprintf_r+0x1e6>
 8017490:	08017f48 	.word	0x08017f48
 8017494:	08017f52 	.word	0x08017f52
 8017498:	00000000 	.word	0x00000000
 801749c:	0801724f 	.word	0x0801724f
 80174a0:	08017f4e 	.word	0x08017f4e

080174a4 <_printf_common>:
 80174a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174a8:	4616      	mov	r6, r2
 80174aa:	4698      	mov	r8, r3
 80174ac:	688a      	ldr	r2, [r1, #8]
 80174ae:	690b      	ldr	r3, [r1, #16]
 80174b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80174b4:	4293      	cmp	r3, r2
 80174b6:	bfb8      	it	lt
 80174b8:	4613      	movlt	r3, r2
 80174ba:	6033      	str	r3, [r6, #0]
 80174bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80174c0:	4607      	mov	r7, r0
 80174c2:	460c      	mov	r4, r1
 80174c4:	b10a      	cbz	r2, 80174ca <_printf_common+0x26>
 80174c6:	3301      	adds	r3, #1
 80174c8:	6033      	str	r3, [r6, #0]
 80174ca:	6823      	ldr	r3, [r4, #0]
 80174cc:	0699      	lsls	r1, r3, #26
 80174ce:	bf42      	ittt	mi
 80174d0:	6833      	ldrmi	r3, [r6, #0]
 80174d2:	3302      	addmi	r3, #2
 80174d4:	6033      	strmi	r3, [r6, #0]
 80174d6:	6825      	ldr	r5, [r4, #0]
 80174d8:	f015 0506 	ands.w	r5, r5, #6
 80174dc:	d106      	bne.n	80174ec <_printf_common+0x48>
 80174de:	f104 0a19 	add.w	sl, r4, #25
 80174e2:	68e3      	ldr	r3, [r4, #12]
 80174e4:	6832      	ldr	r2, [r6, #0]
 80174e6:	1a9b      	subs	r3, r3, r2
 80174e8:	42ab      	cmp	r3, r5
 80174ea:	dc26      	bgt.n	801753a <_printf_common+0x96>
 80174ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80174f0:	6822      	ldr	r2, [r4, #0]
 80174f2:	3b00      	subs	r3, #0
 80174f4:	bf18      	it	ne
 80174f6:	2301      	movne	r3, #1
 80174f8:	0692      	lsls	r2, r2, #26
 80174fa:	d42b      	bmi.n	8017554 <_printf_common+0xb0>
 80174fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017500:	4641      	mov	r1, r8
 8017502:	4638      	mov	r0, r7
 8017504:	47c8      	blx	r9
 8017506:	3001      	adds	r0, #1
 8017508:	d01e      	beq.n	8017548 <_printf_common+0xa4>
 801750a:	6823      	ldr	r3, [r4, #0]
 801750c:	6922      	ldr	r2, [r4, #16]
 801750e:	f003 0306 	and.w	r3, r3, #6
 8017512:	2b04      	cmp	r3, #4
 8017514:	bf02      	ittt	eq
 8017516:	68e5      	ldreq	r5, [r4, #12]
 8017518:	6833      	ldreq	r3, [r6, #0]
 801751a:	1aed      	subeq	r5, r5, r3
 801751c:	68a3      	ldr	r3, [r4, #8]
 801751e:	bf0c      	ite	eq
 8017520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017524:	2500      	movne	r5, #0
 8017526:	4293      	cmp	r3, r2
 8017528:	bfc4      	itt	gt
 801752a:	1a9b      	subgt	r3, r3, r2
 801752c:	18ed      	addgt	r5, r5, r3
 801752e:	2600      	movs	r6, #0
 8017530:	341a      	adds	r4, #26
 8017532:	42b5      	cmp	r5, r6
 8017534:	d11a      	bne.n	801756c <_printf_common+0xc8>
 8017536:	2000      	movs	r0, #0
 8017538:	e008      	b.n	801754c <_printf_common+0xa8>
 801753a:	2301      	movs	r3, #1
 801753c:	4652      	mov	r2, sl
 801753e:	4641      	mov	r1, r8
 8017540:	4638      	mov	r0, r7
 8017542:	47c8      	blx	r9
 8017544:	3001      	adds	r0, #1
 8017546:	d103      	bne.n	8017550 <_printf_common+0xac>
 8017548:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801754c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017550:	3501      	adds	r5, #1
 8017552:	e7c6      	b.n	80174e2 <_printf_common+0x3e>
 8017554:	18e1      	adds	r1, r4, r3
 8017556:	1c5a      	adds	r2, r3, #1
 8017558:	2030      	movs	r0, #48	@ 0x30
 801755a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801755e:	4422      	add	r2, r4
 8017560:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017564:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017568:	3302      	adds	r3, #2
 801756a:	e7c7      	b.n	80174fc <_printf_common+0x58>
 801756c:	2301      	movs	r3, #1
 801756e:	4622      	mov	r2, r4
 8017570:	4641      	mov	r1, r8
 8017572:	4638      	mov	r0, r7
 8017574:	47c8      	blx	r9
 8017576:	3001      	adds	r0, #1
 8017578:	d0e6      	beq.n	8017548 <_printf_common+0xa4>
 801757a:	3601      	adds	r6, #1
 801757c:	e7d9      	b.n	8017532 <_printf_common+0x8e>
	...

08017580 <_printf_i>:
 8017580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017584:	7e0f      	ldrb	r7, [r1, #24]
 8017586:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017588:	2f78      	cmp	r7, #120	@ 0x78
 801758a:	4691      	mov	r9, r2
 801758c:	4680      	mov	r8, r0
 801758e:	460c      	mov	r4, r1
 8017590:	469a      	mov	sl, r3
 8017592:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017596:	d807      	bhi.n	80175a8 <_printf_i+0x28>
 8017598:	2f62      	cmp	r7, #98	@ 0x62
 801759a:	d80a      	bhi.n	80175b2 <_printf_i+0x32>
 801759c:	2f00      	cmp	r7, #0
 801759e:	f000 80d1 	beq.w	8017744 <_printf_i+0x1c4>
 80175a2:	2f58      	cmp	r7, #88	@ 0x58
 80175a4:	f000 80b8 	beq.w	8017718 <_printf_i+0x198>
 80175a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80175ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80175b0:	e03a      	b.n	8017628 <_printf_i+0xa8>
 80175b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80175b6:	2b15      	cmp	r3, #21
 80175b8:	d8f6      	bhi.n	80175a8 <_printf_i+0x28>
 80175ba:	a101      	add	r1, pc, #4	@ (adr r1, 80175c0 <_printf_i+0x40>)
 80175bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80175c0:	08017619 	.word	0x08017619
 80175c4:	0801762d 	.word	0x0801762d
 80175c8:	080175a9 	.word	0x080175a9
 80175cc:	080175a9 	.word	0x080175a9
 80175d0:	080175a9 	.word	0x080175a9
 80175d4:	080175a9 	.word	0x080175a9
 80175d8:	0801762d 	.word	0x0801762d
 80175dc:	080175a9 	.word	0x080175a9
 80175e0:	080175a9 	.word	0x080175a9
 80175e4:	080175a9 	.word	0x080175a9
 80175e8:	080175a9 	.word	0x080175a9
 80175ec:	0801772b 	.word	0x0801772b
 80175f0:	08017657 	.word	0x08017657
 80175f4:	080176e5 	.word	0x080176e5
 80175f8:	080175a9 	.word	0x080175a9
 80175fc:	080175a9 	.word	0x080175a9
 8017600:	0801774d 	.word	0x0801774d
 8017604:	080175a9 	.word	0x080175a9
 8017608:	08017657 	.word	0x08017657
 801760c:	080175a9 	.word	0x080175a9
 8017610:	080175a9 	.word	0x080175a9
 8017614:	080176ed 	.word	0x080176ed
 8017618:	6833      	ldr	r3, [r6, #0]
 801761a:	1d1a      	adds	r2, r3, #4
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	6032      	str	r2, [r6, #0]
 8017620:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017624:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017628:	2301      	movs	r3, #1
 801762a:	e09c      	b.n	8017766 <_printf_i+0x1e6>
 801762c:	6833      	ldr	r3, [r6, #0]
 801762e:	6820      	ldr	r0, [r4, #0]
 8017630:	1d19      	adds	r1, r3, #4
 8017632:	6031      	str	r1, [r6, #0]
 8017634:	0606      	lsls	r6, r0, #24
 8017636:	d501      	bpl.n	801763c <_printf_i+0xbc>
 8017638:	681d      	ldr	r5, [r3, #0]
 801763a:	e003      	b.n	8017644 <_printf_i+0xc4>
 801763c:	0645      	lsls	r5, r0, #25
 801763e:	d5fb      	bpl.n	8017638 <_printf_i+0xb8>
 8017640:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017644:	2d00      	cmp	r5, #0
 8017646:	da03      	bge.n	8017650 <_printf_i+0xd0>
 8017648:	232d      	movs	r3, #45	@ 0x2d
 801764a:	426d      	negs	r5, r5
 801764c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017650:	4858      	ldr	r0, [pc, #352]	@ (80177b4 <_printf_i+0x234>)
 8017652:	230a      	movs	r3, #10
 8017654:	e011      	b.n	801767a <_printf_i+0xfa>
 8017656:	6821      	ldr	r1, [r4, #0]
 8017658:	6833      	ldr	r3, [r6, #0]
 801765a:	0608      	lsls	r0, r1, #24
 801765c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017660:	d402      	bmi.n	8017668 <_printf_i+0xe8>
 8017662:	0649      	lsls	r1, r1, #25
 8017664:	bf48      	it	mi
 8017666:	b2ad      	uxthmi	r5, r5
 8017668:	2f6f      	cmp	r7, #111	@ 0x6f
 801766a:	4852      	ldr	r0, [pc, #328]	@ (80177b4 <_printf_i+0x234>)
 801766c:	6033      	str	r3, [r6, #0]
 801766e:	bf14      	ite	ne
 8017670:	230a      	movne	r3, #10
 8017672:	2308      	moveq	r3, #8
 8017674:	2100      	movs	r1, #0
 8017676:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801767a:	6866      	ldr	r6, [r4, #4]
 801767c:	60a6      	str	r6, [r4, #8]
 801767e:	2e00      	cmp	r6, #0
 8017680:	db05      	blt.n	801768e <_printf_i+0x10e>
 8017682:	6821      	ldr	r1, [r4, #0]
 8017684:	432e      	orrs	r6, r5
 8017686:	f021 0104 	bic.w	r1, r1, #4
 801768a:	6021      	str	r1, [r4, #0]
 801768c:	d04b      	beq.n	8017726 <_printf_i+0x1a6>
 801768e:	4616      	mov	r6, r2
 8017690:	fbb5 f1f3 	udiv	r1, r5, r3
 8017694:	fb03 5711 	mls	r7, r3, r1, r5
 8017698:	5dc7      	ldrb	r7, [r0, r7]
 801769a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801769e:	462f      	mov	r7, r5
 80176a0:	42bb      	cmp	r3, r7
 80176a2:	460d      	mov	r5, r1
 80176a4:	d9f4      	bls.n	8017690 <_printf_i+0x110>
 80176a6:	2b08      	cmp	r3, #8
 80176a8:	d10b      	bne.n	80176c2 <_printf_i+0x142>
 80176aa:	6823      	ldr	r3, [r4, #0]
 80176ac:	07df      	lsls	r7, r3, #31
 80176ae:	d508      	bpl.n	80176c2 <_printf_i+0x142>
 80176b0:	6923      	ldr	r3, [r4, #16]
 80176b2:	6861      	ldr	r1, [r4, #4]
 80176b4:	4299      	cmp	r1, r3
 80176b6:	bfde      	ittt	le
 80176b8:	2330      	movle	r3, #48	@ 0x30
 80176ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80176be:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80176c2:	1b92      	subs	r2, r2, r6
 80176c4:	6122      	str	r2, [r4, #16]
 80176c6:	f8cd a000 	str.w	sl, [sp]
 80176ca:	464b      	mov	r3, r9
 80176cc:	aa03      	add	r2, sp, #12
 80176ce:	4621      	mov	r1, r4
 80176d0:	4640      	mov	r0, r8
 80176d2:	f7ff fee7 	bl	80174a4 <_printf_common>
 80176d6:	3001      	adds	r0, #1
 80176d8:	d14a      	bne.n	8017770 <_printf_i+0x1f0>
 80176da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80176de:	b004      	add	sp, #16
 80176e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176e4:	6823      	ldr	r3, [r4, #0]
 80176e6:	f043 0320 	orr.w	r3, r3, #32
 80176ea:	6023      	str	r3, [r4, #0]
 80176ec:	4832      	ldr	r0, [pc, #200]	@ (80177b8 <_printf_i+0x238>)
 80176ee:	2778      	movs	r7, #120	@ 0x78
 80176f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80176f4:	6823      	ldr	r3, [r4, #0]
 80176f6:	6831      	ldr	r1, [r6, #0]
 80176f8:	061f      	lsls	r7, r3, #24
 80176fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80176fe:	d402      	bmi.n	8017706 <_printf_i+0x186>
 8017700:	065f      	lsls	r7, r3, #25
 8017702:	bf48      	it	mi
 8017704:	b2ad      	uxthmi	r5, r5
 8017706:	6031      	str	r1, [r6, #0]
 8017708:	07d9      	lsls	r1, r3, #31
 801770a:	bf44      	itt	mi
 801770c:	f043 0320 	orrmi.w	r3, r3, #32
 8017710:	6023      	strmi	r3, [r4, #0]
 8017712:	b11d      	cbz	r5, 801771c <_printf_i+0x19c>
 8017714:	2310      	movs	r3, #16
 8017716:	e7ad      	b.n	8017674 <_printf_i+0xf4>
 8017718:	4826      	ldr	r0, [pc, #152]	@ (80177b4 <_printf_i+0x234>)
 801771a:	e7e9      	b.n	80176f0 <_printf_i+0x170>
 801771c:	6823      	ldr	r3, [r4, #0]
 801771e:	f023 0320 	bic.w	r3, r3, #32
 8017722:	6023      	str	r3, [r4, #0]
 8017724:	e7f6      	b.n	8017714 <_printf_i+0x194>
 8017726:	4616      	mov	r6, r2
 8017728:	e7bd      	b.n	80176a6 <_printf_i+0x126>
 801772a:	6833      	ldr	r3, [r6, #0]
 801772c:	6825      	ldr	r5, [r4, #0]
 801772e:	6961      	ldr	r1, [r4, #20]
 8017730:	1d18      	adds	r0, r3, #4
 8017732:	6030      	str	r0, [r6, #0]
 8017734:	062e      	lsls	r6, r5, #24
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	d501      	bpl.n	801773e <_printf_i+0x1be>
 801773a:	6019      	str	r1, [r3, #0]
 801773c:	e002      	b.n	8017744 <_printf_i+0x1c4>
 801773e:	0668      	lsls	r0, r5, #25
 8017740:	d5fb      	bpl.n	801773a <_printf_i+0x1ba>
 8017742:	8019      	strh	r1, [r3, #0]
 8017744:	2300      	movs	r3, #0
 8017746:	6123      	str	r3, [r4, #16]
 8017748:	4616      	mov	r6, r2
 801774a:	e7bc      	b.n	80176c6 <_printf_i+0x146>
 801774c:	6833      	ldr	r3, [r6, #0]
 801774e:	1d1a      	adds	r2, r3, #4
 8017750:	6032      	str	r2, [r6, #0]
 8017752:	681e      	ldr	r6, [r3, #0]
 8017754:	6862      	ldr	r2, [r4, #4]
 8017756:	2100      	movs	r1, #0
 8017758:	4630      	mov	r0, r6
 801775a:	f7e8 fdc9 	bl	80002f0 <memchr>
 801775e:	b108      	cbz	r0, 8017764 <_printf_i+0x1e4>
 8017760:	1b80      	subs	r0, r0, r6
 8017762:	6060      	str	r0, [r4, #4]
 8017764:	6863      	ldr	r3, [r4, #4]
 8017766:	6123      	str	r3, [r4, #16]
 8017768:	2300      	movs	r3, #0
 801776a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801776e:	e7aa      	b.n	80176c6 <_printf_i+0x146>
 8017770:	6923      	ldr	r3, [r4, #16]
 8017772:	4632      	mov	r2, r6
 8017774:	4649      	mov	r1, r9
 8017776:	4640      	mov	r0, r8
 8017778:	47d0      	blx	sl
 801777a:	3001      	adds	r0, #1
 801777c:	d0ad      	beq.n	80176da <_printf_i+0x15a>
 801777e:	6823      	ldr	r3, [r4, #0]
 8017780:	079b      	lsls	r3, r3, #30
 8017782:	d413      	bmi.n	80177ac <_printf_i+0x22c>
 8017784:	68e0      	ldr	r0, [r4, #12]
 8017786:	9b03      	ldr	r3, [sp, #12]
 8017788:	4298      	cmp	r0, r3
 801778a:	bfb8      	it	lt
 801778c:	4618      	movlt	r0, r3
 801778e:	e7a6      	b.n	80176de <_printf_i+0x15e>
 8017790:	2301      	movs	r3, #1
 8017792:	4632      	mov	r2, r6
 8017794:	4649      	mov	r1, r9
 8017796:	4640      	mov	r0, r8
 8017798:	47d0      	blx	sl
 801779a:	3001      	adds	r0, #1
 801779c:	d09d      	beq.n	80176da <_printf_i+0x15a>
 801779e:	3501      	adds	r5, #1
 80177a0:	68e3      	ldr	r3, [r4, #12]
 80177a2:	9903      	ldr	r1, [sp, #12]
 80177a4:	1a5b      	subs	r3, r3, r1
 80177a6:	42ab      	cmp	r3, r5
 80177a8:	dcf2      	bgt.n	8017790 <_printf_i+0x210>
 80177aa:	e7eb      	b.n	8017784 <_printf_i+0x204>
 80177ac:	2500      	movs	r5, #0
 80177ae:	f104 0619 	add.w	r6, r4, #25
 80177b2:	e7f5      	b.n	80177a0 <_printf_i+0x220>
 80177b4:	08017f59 	.word	0x08017f59
 80177b8:	08017f6a 	.word	0x08017f6a

080177bc <__sflush_r>:
 80177bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80177c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177c4:	0716      	lsls	r6, r2, #28
 80177c6:	4605      	mov	r5, r0
 80177c8:	460c      	mov	r4, r1
 80177ca:	d454      	bmi.n	8017876 <__sflush_r+0xba>
 80177cc:	684b      	ldr	r3, [r1, #4]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	dc02      	bgt.n	80177d8 <__sflush_r+0x1c>
 80177d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	dd48      	ble.n	801786a <__sflush_r+0xae>
 80177d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80177da:	2e00      	cmp	r6, #0
 80177dc:	d045      	beq.n	801786a <__sflush_r+0xae>
 80177de:	2300      	movs	r3, #0
 80177e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80177e4:	682f      	ldr	r7, [r5, #0]
 80177e6:	6a21      	ldr	r1, [r4, #32]
 80177e8:	602b      	str	r3, [r5, #0]
 80177ea:	d030      	beq.n	801784e <__sflush_r+0x92>
 80177ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80177ee:	89a3      	ldrh	r3, [r4, #12]
 80177f0:	0759      	lsls	r1, r3, #29
 80177f2:	d505      	bpl.n	8017800 <__sflush_r+0x44>
 80177f4:	6863      	ldr	r3, [r4, #4]
 80177f6:	1ad2      	subs	r2, r2, r3
 80177f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80177fa:	b10b      	cbz	r3, 8017800 <__sflush_r+0x44>
 80177fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80177fe:	1ad2      	subs	r2, r2, r3
 8017800:	2300      	movs	r3, #0
 8017802:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017804:	6a21      	ldr	r1, [r4, #32]
 8017806:	4628      	mov	r0, r5
 8017808:	47b0      	blx	r6
 801780a:	1c43      	adds	r3, r0, #1
 801780c:	89a3      	ldrh	r3, [r4, #12]
 801780e:	d106      	bne.n	801781e <__sflush_r+0x62>
 8017810:	6829      	ldr	r1, [r5, #0]
 8017812:	291d      	cmp	r1, #29
 8017814:	d82b      	bhi.n	801786e <__sflush_r+0xb2>
 8017816:	4a2a      	ldr	r2, [pc, #168]	@ (80178c0 <__sflush_r+0x104>)
 8017818:	40ca      	lsrs	r2, r1
 801781a:	07d6      	lsls	r6, r2, #31
 801781c:	d527      	bpl.n	801786e <__sflush_r+0xb2>
 801781e:	2200      	movs	r2, #0
 8017820:	6062      	str	r2, [r4, #4]
 8017822:	04d9      	lsls	r1, r3, #19
 8017824:	6922      	ldr	r2, [r4, #16]
 8017826:	6022      	str	r2, [r4, #0]
 8017828:	d504      	bpl.n	8017834 <__sflush_r+0x78>
 801782a:	1c42      	adds	r2, r0, #1
 801782c:	d101      	bne.n	8017832 <__sflush_r+0x76>
 801782e:	682b      	ldr	r3, [r5, #0]
 8017830:	b903      	cbnz	r3, 8017834 <__sflush_r+0x78>
 8017832:	6560      	str	r0, [r4, #84]	@ 0x54
 8017834:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017836:	602f      	str	r7, [r5, #0]
 8017838:	b1b9      	cbz	r1, 801786a <__sflush_r+0xae>
 801783a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801783e:	4299      	cmp	r1, r3
 8017840:	d002      	beq.n	8017848 <__sflush_r+0x8c>
 8017842:	4628      	mov	r0, r5
 8017844:	f7ff fb4a 	bl	8016edc <_free_r>
 8017848:	2300      	movs	r3, #0
 801784a:	6363      	str	r3, [r4, #52]	@ 0x34
 801784c:	e00d      	b.n	801786a <__sflush_r+0xae>
 801784e:	2301      	movs	r3, #1
 8017850:	4628      	mov	r0, r5
 8017852:	47b0      	blx	r6
 8017854:	4602      	mov	r2, r0
 8017856:	1c50      	adds	r0, r2, #1
 8017858:	d1c9      	bne.n	80177ee <__sflush_r+0x32>
 801785a:	682b      	ldr	r3, [r5, #0]
 801785c:	2b00      	cmp	r3, #0
 801785e:	d0c6      	beq.n	80177ee <__sflush_r+0x32>
 8017860:	2b1d      	cmp	r3, #29
 8017862:	d001      	beq.n	8017868 <__sflush_r+0xac>
 8017864:	2b16      	cmp	r3, #22
 8017866:	d11e      	bne.n	80178a6 <__sflush_r+0xea>
 8017868:	602f      	str	r7, [r5, #0]
 801786a:	2000      	movs	r0, #0
 801786c:	e022      	b.n	80178b4 <__sflush_r+0xf8>
 801786e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017872:	b21b      	sxth	r3, r3
 8017874:	e01b      	b.n	80178ae <__sflush_r+0xf2>
 8017876:	690f      	ldr	r7, [r1, #16]
 8017878:	2f00      	cmp	r7, #0
 801787a:	d0f6      	beq.n	801786a <__sflush_r+0xae>
 801787c:	0793      	lsls	r3, r2, #30
 801787e:	680e      	ldr	r6, [r1, #0]
 8017880:	bf08      	it	eq
 8017882:	694b      	ldreq	r3, [r1, #20]
 8017884:	600f      	str	r7, [r1, #0]
 8017886:	bf18      	it	ne
 8017888:	2300      	movne	r3, #0
 801788a:	eba6 0807 	sub.w	r8, r6, r7
 801788e:	608b      	str	r3, [r1, #8]
 8017890:	f1b8 0f00 	cmp.w	r8, #0
 8017894:	dde9      	ble.n	801786a <__sflush_r+0xae>
 8017896:	6a21      	ldr	r1, [r4, #32]
 8017898:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801789a:	4643      	mov	r3, r8
 801789c:	463a      	mov	r2, r7
 801789e:	4628      	mov	r0, r5
 80178a0:	47b0      	blx	r6
 80178a2:	2800      	cmp	r0, #0
 80178a4:	dc08      	bgt.n	80178b8 <__sflush_r+0xfc>
 80178a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80178ae:	81a3      	strh	r3, [r4, #12]
 80178b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80178b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178b8:	4407      	add	r7, r0
 80178ba:	eba8 0800 	sub.w	r8, r8, r0
 80178be:	e7e7      	b.n	8017890 <__sflush_r+0xd4>
 80178c0:	20400001 	.word	0x20400001

080178c4 <_fflush_r>:
 80178c4:	b538      	push	{r3, r4, r5, lr}
 80178c6:	690b      	ldr	r3, [r1, #16]
 80178c8:	4605      	mov	r5, r0
 80178ca:	460c      	mov	r4, r1
 80178cc:	b913      	cbnz	r3, 80178d4 <_fflush_r+0x10>
 80178ce:	2500      	movs	r5, #0
 80178d0:	4628      	mov	r0, r5
 80178d2:	bd38      	pop	{r3, r4, r5, pc}
 80178d4:	b118      	cbz	r0, 80178de <_fflush_r+0x1a>
 80178d6:	6a03      	ldr	r3, [r0, #32]
 80178d8:	b90b      	cbnz	r3, 80178de <_fflush_r+0x1a>
 80178da:	f7fe ffb3 	bl	8016844 <__sinit>
 80178de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d0f3      	beq.n	80178ce <_fflush_r+0xa>
 80178e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80178e8:	07d0      	lsls	r0, r2, #31
 80178ea:	d404      	bmi.n	80178f6 <_fflush_r+0x32>
 80178ec:	0599      	lsls	r1, r3, #22
 80178ee:	d402      	bmi.n	80178f6 <_fflush_r+0x32>
 80178f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80178f2:	f7ff fae2 	bl	8016eba <__retarget_lock_acquire_recursive>
 80178f6:	4628      	mov	r0, r5
 80178f8:	4621      	mov	r1, r4
 80178fa:	f7ff ff5f 	bl	80177bc <__sflush_r>
 80178fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017900:	07da      	lsls	r2, r3, #31
 8017902:	4605      	mov	r5, r0
 8017904:	d4e4      	bmi.n	80178d0 <_fflush_r+0xc>
 8017906:	89a3      	ldrh	r3, [r4, #12]
 8017908:	059b      	lsls	r3, r3, #22
 801790a:	d4e1      	bmi.n	80178d0 <_fflush_r+0xc>
 801790c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801790e:	f7ff fad5 	bl	8016ebc <__retarget_lock_release_recursive>
 8017912:	e7dd      	b.n	80178d0 <_fflush_r+0xc>

08017914 <__swhatbuf_r>:
 8017914:	b570      	push	{r4, r5, r6, lr}
 8017916:	460c      	mov	r4, r1
 8017918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801791c:	2900      	cmp	r1, #0
 801791e:	b096      	sub	sp, #88	@ 0x58
 8017920:	4615      	mov	r5, r2
 8017922:	461e      	mov	r6, r3
 8017924:	da0d      	bge.n	8017942 <__swhatbuf_r+0x2e>
 8017926:	89a3      	ldrh	r3, [r4, #12]
 8017928:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801792c:	f04f 0100 	mov.w	r1, #0
 8017930:	bf14      	ite	ne
 8017932:	2340      	movne	r3, #64	@ 0x40
 8017934:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017938:	2000      	movs	r0, #0
 801793a:	6031      	str	r1, [r6, #0]
 801793c:	602b      	str	r3, [r5, #0]
 801793e:	b016      	add	sp, #88	@ 0x58
 8017940:	bd70      	pop	{r4, r5, r6, pc}
 8017942:	466a      	mov	r2, sp
 8017944:	f000 f862 	bl	8017a0c <_fstat_r>
 8017948:	2800      	cmp	r0, #0
 801794a:	dbec      	blt.n	8017926 <__swhatbuf_r+0x12>
 801794c:	9901      	ldr	r1, [sp, #4]
 801794e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017952:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017956:	4259      	negs	r1, r3
 8017958:	4159      	adcs	r1, r3
 801795a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801795e:	e7eb      	b.n	8017938 <__swhatbuf_r+0x24>

08017960 <__smakebuf_r>:
 8017960:	898b      	ldrh	r3, [r1, #12]
 8017962:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017964:	079d      	lsls	r5, r3, #30
 8017966:	4606      	mov	r6, r0
 8017968:	460c      	mov	r4, r1
 801796a:	d507      	bpl.n	801797c <__smakebuf_r+0x1c>
 801796c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017970:	6023      	str	r3, [r4, #0]
 8017972:	6123      	str	r3, [r4, #16]
 8017974:	2301      	movs	r3, #1
 8017976:	6163      	str	r3, [r4, #20]
 8017978:	b003      	add	sp, #12
 801797a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801797c:	ab01      	add	r3, sp, #4
 801797e:	466a      	mov	r2, sp
 8017980:	f7ff ffc8 	bl	8017914 <__swhatbuf_r>
 8017984:	9f00      	ldr	r7, [sp, #0]
 8017986:	4605      	mov	r5, r0
 8017988:	4639      	mov	r1, r7
 801798a:	4630      	mov	r0, r6
 801798c:	f7fe fe42 	bl	8016614 <_malloc_r>
 8017990:	b948      	cbnz	r0, 80179a6 <__smakebuf_r+0x46>
 8017992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017996:	059a      	lsls	r2, r3, #22
 8017998:	d4ee      	bmi.n	8017978 <__smakebuf_r+0x18>
 801799a:	f023 0303 	bic.w	r3, r3, #3
 801799e:	f043 0302 	orr.w	r3, r3, #2
 80179a2:	81a3      	strh	r3, [r4, #12]
 80179a4:	e7e2      	b.n	801796c <__smakebuf_r+0xc>
 80179a6:	89a3      	ldrh	r3, [r4, #12]
 80179a8:	6020      	str	r0, [r4, #0]
 80179aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80179ae:	81a3      	strh	r3, [r4, #12]
 80179b0:	9b01      	ldr	r3, [sp, #4]
 80179b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80179b6:	b15b      	cbz	r3, 80179d0 <__smakebuf_r+0x70>
 80179b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80179bc:	4630      	mov	r0, r6
 80179be:	f000 f837 	bl	8017a30 <_isatty_r>
 80179c2:	b128      	cbz	r0, 80179d0 <__smakebuf_r+0x70>
 80179c4:	89a3      	ldrh	r3, [r4, #12]
 80179c6:	f023 0303 	bic.w	r3, r3, #3
 80179ca:	f043 0301 	orr.w	r3, r3, #1
 80179ce:	81a3      	strh	r3, [r4, #12]
 80179d0:	89a3      	ldrh	r3, [r4, #12]
 80179d2:	431d      	orrs	r5, r3
 80179d4:	81a5      	strh	r5, [r4, #12]
 80179d6:	e7cf      	b.n	8017978 <__smakebuf_r+0x18>

080179d8 <memmove>:
 80179d8:	4288      	cmp	r0, r1
 80179da:	b510      	push	{r4, lr}
 80179dc:	eb01 0402 	add.w	r4, r1, r2
 80179e0:	d902      	bls.n	80179e8 <memmove+0x10>
 80179e2:	4284      	cmp	r4, r0
 80179e4:	4623      	mov	r3, r4
 80179e6:	d807      	bhi.n	80179f8 <memmove+0x20>
 80179e8:	1e43      	subs	r3, r0, #1
 80179ea:	42a1      	cmp	r1, r4
 80179ec:	d008      	beq.n	8017a00 <memmove+0x28>
 80179ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80179f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80179f6:	e7f8      	b.n	80179ea <memmove+0x12>
 80179f8:	4402      	add	r2, r0
 80179fa:	4601      	mov	r1, r0
 80179fc:	428a      	cmp	r2, r1
 80179fe:	d100      	bne.n	8017a02 <memmove+0x2a>
 8017a00:	bd10      	pop	{r4, pc}
 8017a02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017a06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017a0a:	e7f7      	b.n	80179fc <memmove+0x24>

08017a0c <_fstat_r>:
 8017a0c:	b538      	push	{r3, r4, r5, lr}
 8017a0e:	4d07      	ldr	r5, [pc, #28]	@ (8017a2c <_fstat_r+0x20>)
 8017a10:	2300      	movs	r3, #0
 8017a12:	4604      	mov	r4, r0
 8017a14:	4608      	mov	r0, r1
 8017a16:	4611      	mov	r1, r2
 8017a18:	602b      	str	r3, [r5, #0]
 8017a1a:	f7e9 fd15 	bl	8001448 <_fstat>
 8017a1e:	1c43      	adds	r3, r0, #1
 8017a20:	d102      	bne.n	8017a28 <_fstat_r+0x1c>
 8017a22:	682b      	ldr	r3, [r5, #0]
 8017a24:	b103      	cbz	r3, 8017a28 <_fstat_r+0x1c>
 8017a26:	6023      	str	r3, [r4, #0]
 8017a28:	bd38      	pop	{r3, r4, r5, pc}
 8017a2a:	bf00      	nop
 8017a2c:	240055a8 	.word	0x240055a8

08017a30 <_isatty_r>:
 8017a30:	b538      	push	{r3, r4, r5, lr}
 8017a32:	4d06      	ldr	r5, [pc, #24]	@ (8017a4c <_isatty_r+0x1c>)
 8017a34:	2300      	movs	r3, #0
 8017a36:	4604      	mov	r4, r0
 8017a38:	4608      	mov	r0, r1
 8017a3a:	602b      	str	r3, [r5, #0]
 8017a3c:	f7e9 fc72 	bl	8001324 <_isatty>
 8017a40:	1c43      	adds	r3, r0, #1
 8017a42:	d102      	bne.n	8017a4a <_isatty_r+0x1a>
 8017a44:	682b      	ldr	r3, [r5, #0]
 8017a46:	b103      	cbz	r3, 8017a4a <_isatty_r+0x1a>
 8017a48:	6023      	str	r3, [r4, #0]
 8017a4a:	bd38      	pop	{r3, r4, r5, pc}
 8017a4c:	240055a8 	.word	0x240055a8

08017a50 <_realloc_r>:
 8017a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a54:	4607      	mov	r7, r0
 8017a56:	4614      	mov	r4, r2
 8017a58:	460d      	mov	r5, r1
 8017a5a:	b921      	cbnz	r1, 8017a66 <_realloc_r+0x16>
 8017a5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a60:	4611      	mov	r1, r2
 8017a62:	f7fe bdd7 	b.w	8016614 <_malloc_r>
 8017a66:	b92a      	cbnz	r2, 8017a74 <_realloc_r+0x24>
 8017a68:	f7ff fa38 	bl	8016edc <_free_r>
 8017a6c:	4625      	mov	r5, r4
 8017a6e:	4628      	mov	r0, r5
 8017a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a74:	f000 f81a 	bl	8017aac <_malloc_usable_size_r>
 8017a78:	4284      	cmp	r4, r0
 8017a7a:	4606      	mov	r6, r0
 8017a7c:	d802      	bhi.n	8017a84 <_realloc_r+0x34>
 8017a7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017a82:	d8f4      	bhi.n	8017a6e <_realloc_r+0x1e>
 8017a84:	4621      	mov	r1, r4
 8017a86:	4638      	mov	r0, r7
 8017a88:	f7fe fdc4 	bl	8016614 <_malloc_r>
 8017a8c:	4680      	mov	r8, r0
 8017a8e:	b908      	cbnz	r0, 8017a94 <_realloc_r+0x44>
 8017a90:	4645      	mov	r5, r8
 8017a92:	e7ec      	b.n	8017a6e <_realloc_r+0x1e>
 8017a94:	42b4      	cmp	r4, r6
 8017a96:	4622      	mov	r2, r4
 8017a98:	4629      	mov	r1, r5
 8017a9a:	bf28      	it	cs
 8017a9c:	4632      	movcs	r2, r6
 8017a9e:	f7ff fa0e 	bl	8016ebe <memcpy>
 8017aa2:	4629      	mov	r1, r5
 8017aa4:	4638      	mov	r0, r7
 8017aa6:	f7ff fa19 	bl	8016edc <_free_r>
 8017aaa:	e7f1      	b.n	8017a90 <_realloc_r+0x40>

08017aac <_malloc_usable_size_r>:
 8017aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017ab0:	1f18      	subs	r0, r3, #4
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	bfbc      	itt	lt
 8017ab6:	580b      	ldrlt	r3, [r1, r0]
 8017ab8:	18c0      	addlt	r0, r0, r3
 8017aba:	4770      	bx	lr

08017abc <_init>:
 8017abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017abe:	bf00      	nop
 8017ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ac2:	bc08      	pop	{r3}
 8017ac4:	469e      	mov	lr, r3
 8017ac6:	4770      	bx	lr

08017ac8 <_fini>:
 8017ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017aca:	bf00      	nop
 8017acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ace:	bc08      	pop	{r3}
 8017ad0:	469e      	mov	lr, r3
 8017ad2:	4770      	bx	lr
