
huiyang_motor_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000182f8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006fc  08018598  08018598  00019598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018c94  08018c94  00019c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08018c9c  08018c9c  00019c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  08018ca4  08018ca4  00019ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  08018cac  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005568  24000070  08018d1c  0001a070  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  240055d8  08018d1c  0001a5d8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001a070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003903e  00000000  00000000  0001a09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006c3f  00000000  00000000  000530dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000023c8  00000000  00000000  00059d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001bb6  00000000  00000000  0005c0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000ddc4  00000000  00000000  0005dc9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030f25  00000000  00000000  0006ba62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017efe1  00000000  00000000  0009c987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021b968  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a3a0  00000000  00000000  0021b9ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000056  00000000  00000000  00225d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018580 	.word	0x08018580

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	08018580 	.word	0x08018580

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <_ZL10MPU_Configv>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void MPU_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80006ce:	f003 fd77 	bl	80041c0 <HAL_MPU_Disable>

  /* Configure the MPU attributes for the QSPI 256MB without instruction access */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 80006d2:	2301      	movs	r3, #1
 80006d4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 80006da:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 80006de:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_256MB;
 80006e0:	231b      	movs	r3, #27
 80006e2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80006e4:	2300      	movs	r3, #0
 80006e6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_NOT_BUFFERABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_NOT_CACHEABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_DISABLE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80006fc:	2300      	movs	r3, #0
 80006fe:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000700:	463b      	mov	r3, r7
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fd94 	bl	8004230 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes for the QSPI 8MB (QSPI Flash Size) to Cacheable WT */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000708:	2301      	movs	r3, #1
 800070a:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER1;
 800070c:	2301      	movs	r3, #1
 800070e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 8000710:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8000714:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_8MB;
 8000716:	2316      	movs	r3, #22
 8000718:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
 800071a:	2305      	movs	r3, #5
 800071c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 800071e:	2301      	movs	r3, #1
 8000720:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 8000722:	2301      	movs	r3, #1
 8000724:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 800072e:	2301      	movs	r3, #1
 8000730:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000732:	2300      	movs	r3, #0
 8000734:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000736:	463b      	mov	r3, r7
 8000738:	4618      	mov	r0, r3
 800073a:	f003 fd79 	bl	8004230 <HAL_MPU_ConfigRegion>

  /* Setup AXI SRAM in Cacheable WB */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 800073e:	2301      	movs	r3, #1
 8000740:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress      = D1_AXISRAM_BASE;
 8000742:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000746:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_512KB;
 8000748:	2312      	movs	r3, #18
 800074a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800074c:	2303      	movs	r3, #3
 800074e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 8000750:	2301      	movs	r3, #1
 8000752:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 8000754:	2301      	movs	r3, #1
 8000756:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_SHAREABLE;
 8000758:	2301      	movs	r3, #1
 800075a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER2;
 800075c:	2302      	movs	r3, #2
 800075e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 8000760:	2301      	movs	r3, #1
 8000762:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000764:	2300      	movs	r3, #0
 8000766:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	733b      	strb	r3, [r7, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800076c:	463b      	mov	r3, r7
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fd5e 	bl	8004230 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000774:	2004      	movs	r0, #4
 8000776:	f003 fd3b 	bl	80041f0 <HAL_MPU_Enable>
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <_ZL16CPU_CACHE_Enablev>:

static void CPU_CACHE_Enable(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800078a:	4b3e      	ldr	r3, [pc, #248]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000792:	2b00      	cmp	r3, #0
 8000794:	bf14      	ite	ne
 8000796:	2301      	movne	r3, #1
 8000798:	2300      	moveq	r3, #0
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d11b      	bne.n	80007d8 <_ZL16CPU_CACHE_Enablev+0x54>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007a0:	f3bf 8f4f 	dsb	sy
}
 80007a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007a6:	f3bf 8f6f 	isb	sy
}
 80007aa:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007ac:	4b35      	ldr	r3, [pc, #212]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007b4:	f3bf 8f4f 	dsb	sy
}
 80007b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007ba:	f3bf 8f6f 	isb	sy
}
 80007be:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007c0:	4b30      	ldr	r3, [pc, #192]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	4a2f      	ldr	r2, [pc, #188]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007cc:	f3bf 8f4f 	dsb	sy
}
 80007d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007d2:	f3bf 8f6f 	isb	sy
}
 80007d6:	e000      	b.n	80007da <_ZL16CPU_CACHE_Enablev+0x56>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007d8:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007da:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	bf14      	ite	ne
 80007e6:	2301      	movne	r3, #1
 80007e8:	2300      	moveq	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d142      	bne.n	8000876 <_ZL16CPU_CACHE_Enablev+0xf2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80007f0:	4b24      	ldr	r3, [pc, #144]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007f8:	f3bf 8f4f 	dsb	sy
}
 80007fc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 8000800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000804:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	0b5b      	lsrs	r3, r3, #13
 800080a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800080e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	08db      	lsrs	r3, r3, #3
 8000814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000818:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	015a      	lsls	r2, r3, #5
 800081e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000822:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000828:	4916      	ldr	r1, [pc, #88]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 800082a:	4313      	orrs	r3, r2
 800082c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	1e5a      	subs	r2, r3, #1
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	bf14      	ite	ne
 800083a:	2301      	movne	r3, #1
 800083c:	2300      	moveq	r3, #0
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1ea      	bne.n	800081a <_ZL16CPU_CACHE_Enablev+0x96>
    } while(sets-- != 0U);
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	1e5a      	subs	r2, r3, #1
 8000848:	60ba      	str	r2, [r7, #8]
 800084a:	2b00      	cmp	r3, #0
 800084c:	bf14      	ite	ne
 800084e:	2301      	movne	r3, #1
 8000850:	2300      	moveq	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1db      	bne.n	8000810 <_ZL16CPU_CACHE_Enablev+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000858:	f3bf 8f4f 	dsb	sy
}
 800085c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4a08      	ldr	r2, [pc, #32]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 8000864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000868:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800086a:	f3bf 8f4f 	dsb	sy
}
 800086e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000870:	f3bf 8f6f 	isb	sy
}
 8000874:	e000      	b.n	8000878 <_ZL16CPU_CACHE_Enablev+0xf4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000876:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <_ZL16find_latest_filev>:
char timeStr[256];              /* 时间字符串缓冲区 */
char filename[32];              /* 文件名缓冲区 */
uint32_t file_counter = 0;      /* 文件计数器 */

// 查找最新的文件编号
static void find_latest_file(void) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b09e      	sub	sp, #120	@ 0x78
 800088c:	af00      	add	r7, sp, #0
    DIR dir;
    FILINFO fno;
    printf("Starting directory scan...\r\n");
 800088e:	4856      	ldr	r0, [pc, #344]	@ (80009e8 <_ZL16find_latest_filev+0x160>)
 8000890:	f016 f8f0 	bl	8016a74 <puts>
    
    f_res = f_opendir(&dir, "/");
 8000894:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000898:	4954      	ldr	r1, [pc, #336]	@ (80009ec <_ZL16find_latest_filev+0x164>)
 800089a:	4618      	mov	r0, r3
 800089c:	f011 f8ef 	bl	8011a7e <f_opendir>
 80008a0:	4603      	mov	r3, r0
 80008a2:	461a      	mov	r2, r3
 80008a4:	4b52      	ldr	r3, [pc, #328]	@ (80009f0 <_ZL16find_latest_filev+0x168>)
 80008a6:	701a      	strb	r2, [r3, #0]
    if (f_res != FR_OK) {
 80008a8:	4b51      	ldr	r3, [pc, #324]	@ (80009f0 <_ZL16find_latest_filev+0x168>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d006      	beq.n	80008be <_ZL16find_latest_filev+0x36>
        printf("Failed to open root directory, error: %d\r\n", f_res);
 80008b0:	4b4f      	ldr	r3, [pc, #316]	@ (80009f0 <_ZL16find_latest_filev+0x168>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	484f      	ldr	r0, [pc, #316]	@ (80009f4 <_ZL16find_latest_filev+0x16c>)
 80008b8:	f016 f874 	bl	80169a4 <iprintf>
 80008bc:	e090      	b.n	80009e0 <_ZL16find_latest_filev+0x158>
        return;
    }
    
    while (1) {
        f_res = f_readdir(&dir, &fno);
 80008be:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80008c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008c6:	4611      	mov	r1, r2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f011 f97c 	bl	8011bc6 <f_readdir>
 80008ce:	4603      	mov	r3, r0
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b47      	ldr	r3, [pc, #284]	@ (80009f0 <_ZL16find_latest_filev+0x168>)
 80008d4:	701a      	strb	r2, [r3, #0]
        if (f_res != FR_OK) {
 80008d6:	4b46      	ldr	r3, [pc, #280]	@ (80009f0 <_ZL16find_latest_filev+0x168>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d006      	beq.n	80008ec <_ZL16find_latest_filev+0x64>
            printf("Error reading directory, error: %d\r\n", f_res);
 80008de:	4b44      	ldr	r3, [pc, #272]	@ (80009f0 <_ZL16find_latest_filev+0x168>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	4619      	mov	r1, r3
 80008e4:	4844      	ldr	r0, [pc, #272]	@ (80009f8 <_ZL16find_latest_filev+0x170>)
 80008e6:	f016 f85d 	bl	80169a4 <iprintf>
            break;
 80008ea:	e06e      	b.n	80009ca <_ZL16find_latest_filev+0x142>
        }
        if (fno.fname[0] == 0) break; // 没有更多文件
 80008ec:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d069      	beq.n	80009c8 <_ZL16find_latest_filev+0x140>
#ifdef ENABLE_FILE_LOG
        printf("Found file: %s, Attrib: 0x%02X\r\n", fno.fname, fno.fattrib);
 80008f4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80008f8:	461a      	mov	r2, r3
 80008fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008fe:	3309      	adds	r3, #9
 8000900:	4619      	mov	r1, r3
 8000902:	483e      	ldr	r0, [pc, #248]	@ (80009fc <_ZL16find_latest_filev+0x174>)
 8000904:	f016 f84e 	bl	80169a4 <iprintf>
#endif
        if (!(fno.fattrib & AM_DIR)) { // 如果不是目录
 8000908:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800090c:	f003 0310 	and.w	r3, r3, #16
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1d4      	bne.n	80008be <_ZL16find_latest_filev+0x36>
            // 创建临时缓冲区用于存储小写文件名
            char lower_fname[32];
            strncpy(lower_fname, fno.fname, sizeof(lower_fname)-1);
 8000914:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000918:	f103 0109 	add.w	r1, r3, #9
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	221f      	movs	r2, #31
 8000920:	4618      	mov	r0, r3
 8000922:	f016 faa5 	bl	8016e70 <strncpy>
            lower_fname[sizeof(lower_fname)-1] = '\0';
 8000926:	2300      	movs	r3, #0
 8000928:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            
            // 转换为小写
            for(int i = 0; lower_fname[i]; i++) {
 800092c:	2300      	movs	r3, #0
 800092e:	677b      	str	r3, [r7, #116]	@ 0x74
 8000930:	e010      	b.n	8000954 <_ZL16find_latest_filev+0xcc>
                lower_fname[i] = tolower(lower_fname[i]);
 8000932:	1d3a      	adds	r2, r7, #4
 8000934:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000936:	4413      	add	r3, r2
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f015 ff66 	bl	801680c <tolower>
 8000940:	4603      	mov	r3, r0
 8000942:	b2d9      	uxtb	r1, r3
 8000944:	1d3a      	adds	r2, r7, #4
 8000946:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000948:	4413      	add	r3, r2
 800094a:	460a      	mov	r2, r1
 800094c:	701a      	strb	r2, [r3, #0]
            for(int i = 0; lower_fname[i]; i++) {
 800094e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000950:	3301      	adds	r3, #1
 8000952:	677b      	str	r3, [r7, #116]	@ 0x74
 8000954:	1d3a      	adds	r2, r7, #4
 8000956:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000958:	4413      	add	r3, r2
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d1e8      	bne.n	8000932 <_ZL16find_latest_filev+0xaa>
            }
            
            if (strncmp(lower_fname, "data", 4) == 0) {
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2204      	movs	r2, #4
 8000964:	4926      	ldr	r1, [pc, #152]	@ (8000a00 <_ZL16find_latest_filev+0x178>)
 8000966:	4618      	mov	r0, r3
 8000968:	f016 fa70 	bl	8016e4c <strncmp>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1a5      	bne.n	80008be <_ZL16find_latest_filev+0x36>
                char* csv_ext = strstr(lower_fname, ".csv");
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	4923      	ldr	r1, [pc, #140]	@ (8000a04 <_ZL16find_latest_filev+0x17c>)
 8000976:	4618      	mov	r0, r3
 8000978:	f016 fa8d 	bl	8016e96 <strstr>
 800097c:	6738      	str	r0, [r7, #112]	@ 0x70
                if (csv_ext != NULL) {
 800097e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000980:	2b00      	cmp	r3, #0
 8000982:	d09c      	beq.n	80008be <_ZL16find_latest_filev+0x36>
                    int num = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
                    if (sscanf(lower_fname, "data%d.csv", &num) == 1) {
 8000988:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	491e      	ldr	r1, [pc, #120]	@ (8000a08 <_ZL16find_latest_filev+0x180>)
 8000990:	4618      	mov	r0, r3
 8000992:	f016 f94d 	bl	8016c30 <siscanf>
 8000996:	4603      	mov	r3, r0
 8000998:	2b01      	cmp	r3, #1
 800099a:	bf0c      	ite	eq
 800099c:	2301      	moveq	r3, #1
 800099e:	2300      	movne	r3, #0
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d08b      	beq.n	80008be <_ZL16find_latest_filev+0x36>
                        printf("Found data file number: %d\r\n", num);
 80009a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a8:	4619      	mov	r1, r3
 80009aa:	4818      	ldr	r0, [pc, #96]	@ (8000a0c <_ZL16find_latest_filev+0x184>)
 80009ac:	f015 fffa 	bl	80169a4 <iprintf>
                        if (num >= file_counter) {
 80009b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b2:	461a      	mov	r2, r3
 80009b4:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <_ZL16find_latest_filev+0x188>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d380      	bcc.n	80008be <_ZL16find_latest_filev+0x36>
                            file_counter = num + 1;
 80009bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009be:	3301      	adds	r3, #1
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <_ZL16find_latest_filev+0x188>)
 80009c4:	601a      	str	r2, [r3, #0]
                        }
                    }
                }
            }
        }
    }
 80009c6:	e77a      	b.n	80008be <_ZL16find_latest_filev+0x36>
        if (fno.fname[0] == 0) break; // 没有更多文件
 80009c8:	bf00      	nop
    
    printf("Directory scan complete. Latest file counter: %lu\r\n", file_counter);
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <_ZL16find_latest_filev+0x188>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4619      	mov	r1, r3
 80009d0:	4810      	ldr	r0, [pc, #64]	@ (8000a14 <_ZL16find_latest_filev+0x18c>)
 80009d2:	f015 ffe7 	bl	80169a4 <iprintf>
    f_closedir(&dir);
 80009d6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009da:	4618      	mov	r0, r3
 80009dc:	f011 f8c8 	bl	8011b70 <f_closedir>
}
 80009e0:	3778      	adds	r7, #120	@ 0x78
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	080185ac 	.word	0x080185ac
 80009ec:	080185c8 	.word	0x080185c8
 80009f0:	240006ec 	.word	0x240006ec
 80009f4:	080185cc 	.word	0x080185cc
 80009f8:	080185f8 	.word	0x080185f8
 80009fc:	08018620 	.word	0x08018620
 8000a00:	08018644 	.word	0x08018644
 8000a04:	0801864c 	.word	0x0801864c
 8000a08:	08018654 	.word	0x08018654
 8000a0c:	08018660 	.word	0x08018660
 8000a10:	24000814 	.word	0x24000814
 8000a14:	08018680 	.word	0x08018680

08000a18 <_ZL15create_new_filev>:

static void create_new_file(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
    // 生成新文件名
    sprintf(filename, "data%lu.csv", file_counter++);
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <_ZL15create_new_filev+0x58>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	4913      	ldr	r1, [pc, #76]	@ (8000a70 <_ZL15create_new_filev+0x58>)
 8000a24:	600a      	str	r2, [r1, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	4912      	ldr	r1, [pc, #72]	@ (8000a74 <_ZL15create_new_filev+0x5c>)
 8000a2a:	4813      	ldr	r0, [pc, #76]	@ (8000a78 <_ZL15create_new_filev+0x60>)
 8000a2c:	f016 f8de 	bl	8016bec <siprintf>
    
    // 创建新文件
    f_res = f_open(&file, filename, FA_CREATE_ALWAYS | FA_WRITE);
 8000a30:	220a      	movs	r2, #10
 8000a32:	4911      	ldr	r1, [pc, #68]	@ (8000a78 <_ZL15create_new_filev+0x60>)
 8000a34:	4811      	ldr	r0, [pc, #68]	@ (8000a7c <_ZL15create_new_filev+0x64>)
 8000a36:	f010 fc05 	bl	8011244 <f_open>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <_ZL15create_new_filev+0x68>)
 8000a40:	701a      	strb	r2, [r3, #0]
    if(f_res == FR_OK) {
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <_ZL15create_new_filev+0x68>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d108      	bne.n	8000a5c <_ZL15create_new_filev+0x44>
        // 写入CSV文件头
        f_printf(&file, "Time(ms),Motor_Freq,Encoder_Value\r\n");
 8000a4a:	490e      	ldr	r1, [pc, #56]	@ (8000a84 <_ZL15create_new_filev+0x6c>)
 8000a4c:	480b      	ldr	r0, [pc, #44]	@ (8000a7c <_ZL15create_new_filev+0x64>)
 8000a4e:	f011 f975 	bl	8011d3c <f_printf>
        printf("Created new file: %s\r\n", filename);
 8000a52:	4909      	ldr	r1, [pc, #36]	@ (8000a78 <_ZL15create_new_filev+0x60>)
 8000a54:	480c      	ldr	r0, [pc, #48]	@ (8000a88 <_ZL15create_new_filev+0x70>)
 8000a56:	f015 ffa5 	bl	80169a4 <iprintf>
    } else {
        printf("Failed to create file: %s, error: %d\r\n", filename, f_res);
    }
}
 8000a5a:	e006      	b.n	8000a6a <_ZL15create_new_filev+0x52>
        printf("Failed to create file: %s, error: %d\r\n", filename, f_res);
 8000a5c:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <_ZL15create_new_filev+0x68>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4905      	ldr	r1, [pc, #20]	@ (8000a78 <_ZL15create_new_filev+0x60>)
 8000a64:	4809      	ldr	r0, [pc, #36]	@ (8000a8c <_ZL15create_new_filev+0x74>)
 8000a66:	f015 ff9d 	bl	80169a4 <iprintf>
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	24000814 	.word	0x24000814
 8000a74:	080186b4 	.word	0x080186b4
 8000a78:	240007f4 	.word	0x240007f4
 8000a7c:	240004bc 	.word	0x240004bc
 8000a80:	240006ec 	.word	0x240006ec
 8000a84:	080186c0 	.word	0x080186c0
 8000a88:	080186e4 	.word	0x080186e4
 8000a8c:	080186fc 	.word	0x080186fc

08000a90 <_Z9init_filev>:

void init_file(){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  // mount SD card
  f_res = f_mount(&fs, "0:", 1);
 8000a94:	2201      	movs	r2, #1
 8000a96:	490c      	ldr	r1, [pc, #48]	@ (8000ac8 <_Z9init_filev+0x38>)
 8000a98:	480c      	ldr	r0, [pc, #48]	@ (8000acc <_Z9init_filev+0x3c>)
 8000a9a:	f010 fb6f 	bl	801117c <f_mount>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <_Z9init_filev+0x40>)
 8000aa4:	701a      	strb	r2, [r3, #0]
  if(f_res != FR_OK){
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <_Z9init_filev+0x40>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d006      	beq.n	8000abc <_Z9init_filev+0x2c>
    printf("f_mount error: %d\r\n", f_res);
 8000aae:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <_Z9init_filev+0x40>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4807      	ldr	r0, [pc, #28]	@ (8000ad4 <_Z9init_filev+0x44>)
 8000ab6:	f015 ff75 	bl	80169a4 <iprintf>
    return;
 8000aba:	e004      	b.n	8000ac6 <_Z9init_filev+0x36>
  }
  printf("sd mount ok\r\n");
 8000abc:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <_Z9init_filev+0x48>)
 8000abe:	f015 ffd9 	bl	8016a74 <puts>
  
  // 查找现有文件中的最大编号
  find_latest_file();
 8000ac2:	f7ff fee1 	bl	8000888 <_ZL16find_latest_filev>
}
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	08018724 	.word	0x08018724
 8000acc:	24000288 	.word	0x24000288
 8000ad0:	240006ec 	.word	0x240006ec
 8000ad4:	08018728 	.word	0x08018728
 8000ad8:	0801873c 	.word	0x0801873c

08000adc <_ZNK21ModbusAbsoluteEncoder13isInitializedEv>:
    explicit ModbusAbsoluteEncoder(TIM_HandleTypeDef *htim = nullptr, uint8_t unit_id = 1);
    virtual ~ModbusAbsoluteEncoder() = default;
    // Initialization
    void init();

    bool isInitialized() const{return encoder_initialized;};
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <_Z19angleUpdateCallbackm>:
Encoder485 encoder485(&htim3, 1, &huart2);
EventGroupHandle_t encoderEventGroup = NULL; // 事件组用于编码器任务同步
#define ENCODER_TICK_EVENT_BIT (1 << 0)
uint32_t motor_freq = 0;
uint32_t oid_encoder = 0;
void angleUpdateCallback(uint32_t position){
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  oid_encoder = position;
 8000b00:	4a04      	ldr	r2, [pc, #16]	@ (8000b14 <_Z19angleUpdateCallbackm+0x1c>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6013      	str	r3, [r2, #0]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	240009e0 	.word	0x240009e0

08000b18 <_ZL8init_keyv>:
} KEY_State_TypeDef;

static KEY_State_TypeDef keyState = {0};

static void init_key(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <_ZL8init_keyv+0x54>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <_ZL8init_keyv+0x54>)
 8000b26:	f043 0304 	orr.w	r3, r3, #4
 8000b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <_ZL8init_keyv+0x54>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b34:	f003 0304 	and.w	r3, r3, #4
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b54:	2302      	movs	r3, #2
 8000b56:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4804      	ldr	r0, [pc, #16]	@ (8000b70 <_ZL8init_keyv+0x58>)
 8000b5e:	f004 f90f 	bl	8004d80 <HAL_GPIO_Init>
}
 8000b62:	bf00      	nop
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	58020800 	.word	0x58020800

08000b74 <_ZL8scan_keyv>:

// 按键消抖检测
static void scan_key(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
    keyState.current = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000b78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b7c:	482c      	ldr	r0, [pc, #176]	@ (8000c30 <_ZL8scan_keyv+0xbc>)
 8000b7e:	f004 faaf 	bl	80050e0 <HAL_GPIO_ReadPin>
 8000b82:	4603      	mov	r3, r0
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b2b      	ldr	r3, [pc, #172]	@ (8000c34 <_ZL8scan_keyv+0xc0>)
 8000b88:	701a      	strb	r2, [r3, #0]
    
    if(keyState.current != keyState.last)
 8000b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c34 <_ZL8scan_keyv+0xc0>)
 8000b8c:	781a      	ldrb	r2, [r3, #0]
 8000b8e:	4b29      	ldr	r3, [pc, #164]	@ (8000c34 <_ZL8scan_keyv+0xc0>)
 8000b90:	785b      	ldrb	r3, [r3, #1]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <_ZL8scan_keyv+0x2c>
    {
        keyState.debounceTime = osKernelGetTickCount();
 8000b96:	f011 fc41 	bl	801241c <osKernelGetTickCount>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	4a25      	ldr	r2, [pc, #148]	@ (8000c34 <_ZL8scan_keyv+0xc0>)
 8000b9e:	6053      	str	r3, [r2, #4]
    }
    
    if(osKernelGetTickCount() - keyState.debounceTime >= 20)  // 20ms消抖
 8000ba0:	f011 fc3c 	bl	801241c <osKernelGetTickCount>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	4b23      	ldr	r3, [pc, #140]	@ (8000c34 <_ZL8scan_keyv+0xc0>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	2b13      	cmp	r3, #19
 8000bae:	bf8c      	ite	hi
 8000bb0:	2301      	movhi	r3, #1
 8000bb2:	2300      	movls	r3, #0
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d033      	beq.n	8000c22 <_ZL8scan_keyv+0xae>
    {
        if(keyState.current != keyState.debounceState)
 8000bba:	4b1e      	ldr	r3, [pc, #120]	@ (8000c34 <_ZL8scan_keyv+0xc0>)
 8000bbc:	781a      	ldrb	r2, [r3, #0]
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <_ZL8scan_keyv+0xc0>)
 8000bc0:	789b      	ldrb	r3, [r3, #2]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d02d      	beq.n	8000c22 <_ZL8scan_keyv+0xae>
        {
            if(keyState.current == GPIO_PIN_SET)  // 按键按下（高电平有效）
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <_ZL8scan_keyv+0xc0>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d125      	bne.n	8000c1a <_ZL8scan_keyv+0xa6>
            {
                keyState.pressed = 1;
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <_ZL8scan_keyv+0xc0>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	721a      	strb	r2, [r3, #8]
                #ifdef USE_SD_LOG
                g_isRecording = !g_isRecording;  // 切换记录状态
 8000bd4:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <_ZL8scan_keyv+0xc4>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	f083 0301 	eor.w	r3, r3, #1
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <_ZL8scan_keyv+0xc4>)
 8000be2:	701a      	strb	r2, [r3, #0]
                if(g_isRecording) {
 8000be4:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <_ZL8scan_keyv+0xc4>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <_ZL8scan_keyv+0x80>
                    // 创建新文件
                    create_new_file();
 8000bee:	f7ff ff13 	bl	8000a18 <_ZL15create_new_filev>
 8000bf2:	e006      	b.n	8000c02 <_ZL8scan_keyv+0x8e>
                } else {
                    // 关闭当前文件
                    f_close(&file);
 8000bf4:	4811      	ldr	r0, [pc, #68]	@ (8000c3c <_ZL8scan_keyv+0xc8>)
 8000bf6:	f010 ff13 	bl	8011a20 <f_close>
                    printf("File closed: %s\r\n", filename);
 8000bfa:	4911      	ldr	r1, [pc, #68]	@ (8000c40 <_ZL8scan_keyv+0xcc>)
 8000bfc:	4811      	ldr	r0, [pc, #68]	@ (8000c44 <_ZL8scan_keyv+0xd0>)
 8000bfe:	f015 fed1 	bl	80169a4 <iprintf>
                }
                printf("Data Recording: %s\r\n", g_isRecording ? "Started" : "Stopped");
 8000c02:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <_ZL8scan_keyv+0xc4>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <_ZL8scan_keyv+0x9c>
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <_ZL8scan_keyv+0xd4>)
 8000c0e:	e000      	b.n	8000c12 <_ZL8scan_keyv+0x9e>
 8000c10:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <_ZL8scan_keyv+0xd8>)
 8000c12:	4619      	mov	r1, r3
 8000c14:	480e      	ldr	r0, [pc, #56]	@ (8000c50 <_ZL8scan_keyv+0xdc>)
 8000c16:	f015 fec5 	bl	80169a4 <iprintf>
                #endif
            }
            keyState.debounceState = keyState.current;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <_ZL8scan_keyv+0xc0>)
 8000c1c:	781a      	ldrb	r2, [r3, #0]
 8000c1e:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <_ZL8scan_keyv+0xc0>)
 8000c20:	709a      	strb	r2, [r3, #2]
        }
    }
    
    keyState.last = keyState.current;
 8000c22:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <_ZL8scan_keyv+0xc0>)
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	4b03      	ldr	r3, [pc, #12]	@ (8000c34 <_ZL8scan_keyv+0xc0>)
 8000c28:	705a      	strb	r2, [r3, #1]
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	58020800 	.word	0x58020800
 8000c34:	240009e4 	.word	0x240009e4
 8000c38:	24000284 	.word	0x24000284
 8000c3c:	240004bc 	.word	0x240004bc
 8000c40:	240007f4 	.word	0x240007f4
 8000c44:	0801874c 	.word	0x0801874c
 8000c48:	08018760 	.word	0x08018760
 8000c4c:	08018768 	.word	0x08018768
 8000c50:	08018770 	.word	0x08018770

08000c54 <_Z16StartDefaultTaskPv>:

void StartDefaultTask(void *argument)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af02      	add	r7, sp, #8
 8000c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

#ifdef USE_SD_LOG
  MX_FATFS_Init();
 8000c5c:	f00e f9fe 	bl	800f05c <MX_FATFS_Init>
  init_file();
 8000c60:	f7ff ff16 	bl	8000a90 <_Z9init_filev>
#endif

#ifdef USE_MOBUSRTU_ENCODER
  encoder485.setAngleUpdateCallback(angleUpdateCallback);
 8000c64:	4939      	ldr	r1, [pc, #228]	@ (8000d4c <_Z16StartDefaultTaskPv+0xf8>)
 8000c66:	483a      	ldr	r0, [pc, #232]	@ (8000d50 <_Z16StartDefaultTaskPv+0xfc>)
 8000c68:	f002 ff14 	bl	8003a94 <_ZN21ModbusAbsoluteEncoder22setAngleUpdateCallbackEPFvmE>
  // 初始化编码器
  while(!encoder485.isInitialized()){
 8000c6c:	e012      	b.n	8000c94 <_Z16StartDefaultTaskPv+0x40>
    encoder485.init();
 8000c6e:	4838      	ldr	r0, [pc, #224]	@ (8000d50 <_Z16StartDefaultTaskPv+0xfc>)
 8000c70:	f000 fffe 	bl	8001c70 <_ZN10Encoder4854initEv>
    if(!encoder485.isInitialized()){
 8000c74:	4836      	ldr	r0, [pc, #216]	@ (8000d50 <_Z16StartDefaultTaskPv+0xfc>)
 8000c76:	f7ff ff31 	bl	8000adc <_ZNK21ModbusAbsoluteEncoder13isInitializedEv>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f083 0301 	eor.w	r3, r3, #1
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d006      	beq.n	8000c94 <_Z16StartDefaultTaskPv+0x40>
      printf("Encoder initialization failed, retrying in 10s...");
 8000c86:	4833      	ldr	r0, [pc, #204]	@ (8000d54 <_Z16StartDefaultTaskPv+0x100>)
 8000c88:	f015 fe8c 	bl	80169a4 <iprintf>
      osDelay(10000);
 8000c8c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000c90:	f011 fc76 	bl	8012580 <osDelay>
  while(!encoder485.isInitialized()){
 8000c94:	482e      	ldr	r0, [pc, #184]	@ (8000d50 <_Z16StartDefaultTaskPv+0xfc>)
 8000c96:	f7ff ff21 	bl	8000adc <_ZNK21ModbusAbsoluteEncoder13isInitializedEv>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	f083 0301 	eor.w	r3, r3, #1
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1e3      	bne.n	8000c6e <_Z16StartDefaultTaskPv+0x1a>
    }
  }
  // 创建事件组（若尚未创建）
  if(encoderEventGroup == NULL){
 8000ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d58 <_Z16StartDefaultTaskPv+0x104>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d104      	bne.n	8000cb8 <_Z16StartDefaultTaskPv+0x64>
      encoderEventGroup = xEventGroupCreate();
 8000cae:	f011 ff2b 	bl	8012b08 <xEventGroupCreate>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4a28      	ldr	r2, [pc, #160]	@ (8000d58 <_Z16StartDefaultTaskPv+0x104>)
 8000cb6:	6013      	str	r3, [r2, #0]
  }
  // 400-->53Hz;250-->53Hz;60-->30Hz;10-->5Hz;
  encoder485.startAsyncReading(100);
 8000cb8:	2164      	movs	r1, #100	@ 0x64
 8000cba:	4825      	ldr	r0, [pc, #148]	@ (8000d50 <_Z16StartDefaultTaskPv+0xfc>)
 8000cbc:	f002 fd82 	bl	80037c4 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm>
  printf("Encoder task ready, waiting for TIM3 notifications...\r\n");
 8000cc0:	4826      	ldr	r0, [pc, #152]	@ (8000d5c <_Z16StartDefaultTaskPv+0x108>)
 8000cc2:	f015 fed7 	bl	8016a74 <puts>
#endif

  printf("Default task started...\r\n");
 8000cc6:	4826      	ldr	r0, [pc, #152]	@ (8000d60 <_Z16StartDefaultTaskPv+0x10c>)
 8000cc8:	f015 fed4 	bl	8016a74 <puts>

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f011 fc57 	bl	8012580 <osDelay>
#ifdef USE_MOBUSRTU_ENCODER
    xEventGroupWaitBits(encoderEventGroup, ENCODER_TICK_EVENT_BIT, pdTRUE, pdFALSE, portMAX_DELAY);
 8000cd2:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <_Z16StartDefaultTaskPv+0x104>)
 8000cd4:	6818      	ldr	r0, [r3, #0]
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2300      	movs	r3, #0
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	f011 ff2b 	bl	8012b3c <xEventGroupWaitBits>
    encoder485.asyncUpdateCallback();
 8000ce6:	481a      	ldr	r0, [pc, #104]	@ (8000d50 <_Z16StartDefaultTaskPv+0xfc>)
 8000ce8:	f002 fe52 	bl	8003990 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv>
    // printf("oid_encoder: %lu\n", oid_encoder);
#endif
    
#ifdef USE_SD_LOG
     if(g_isRecording) {  // 只在记录状态为true时写入数据
 8000cec:	4b1d      	ldr	r3, [pc, #116]	@ (8000d64 <_Z16StartDefaultTaskPv+0x110>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0ea      	beq.n	8000ccc <_Z16StartDefaultTaskPv+0x78>
       uint32_t totalMs = osKernelGetTickCount();
 8000cf6:	f011 fb91 	bl	801241c <osKernelGetTickCount>
 8000cfa:	60f8      	str	r0, [r7, #12]
      //  uint32_t sec = totalSec % 60;
      //  uint32_t totalMin = totalSec / 60;
      //  uint32_t min = totalMin % 60;
      //  uint32_t hour = totalMin / 60;
      //  sprintf(timeStr, "%02lu:%02lu:%02lu:%03lu,%lu,%lu\r\n", hour, min, sec, ms, motor_freq, oid_encoder);
       sprintf(timeStr, "%lu,%lu,%lu\r\n", totalMs, motor_freq, oid_encoder);
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <_Z16StartDefaultTaskPv+0x114>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <_Z16StartDefaultTaskPv+0x118>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	4613      	mov	r3, r2
 8000d08:	68fa      	ldr	r2, [r7, #12]
 8000d0a:	4919      	ldr	r1, [pc, #100]	@ (8000d70 <_Z16StartDefaultTaskPv+0x11c>)
 8000d0c:	4819      	ldr	r0, [pc, #100]	@ (8000d74 <_Z16StartDefaultTaskPv+0x120>)
 8000d0e:	f015 ff6d 	bl	8016bec <siprintf>
       if(f_write(&file, timeStr, strlen(timeStr), &fnum) == FR_OK) {
 8000d12:	4818      	ldr	r0, [pc, #96]	@ (8000d74 <_Z16StartDefaultTaskPv+0x120>)
 8000d14:	f7ff fae4 	bl	80002e0 <strlen>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <_Z16StartDefaultTaskPv+0x124>)
 8000d1c:	4915      	ldr	r1, [pc, #84]	@ (8000d74 <_Z16StartDefaultTaskPv+0x120>)
 8000d1e:	4817      	ldr	r0, [pc, #92]	@ (8000d7c <_Z16StartDefaultTaskPv+0x128>)
 8000d20:	f010 fc51 	bl	80115c6 <f_write>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	bf0c      	ite	eq
 8000d2a:	2301      	moveq	r3, #1
 8000d2c:	2300      	movne	r3, #0
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d007      	beq.n	8000d44 <_Z16StartDefaultTaskPv+0xf0>
         f_sync(&file);
 8000d34:	4811      	ldr	r0, [pc, #68]	@ (8000d7c <_Z16StartDefaultTaskPv+0x128>)
 8000d36:	f010 fdea 	bl	801190e <f_sync>
         printf("write: %s", timeStr);
 8000d3a:	490e      	ldr	r1, [pc, #56]	@ (8000d74 <_Z16StartDefaultTaskPv+0x120>)
 8000d3c:	4810      	ldr	r0, [pc, #64]	@ (8000d80 <_Z16StartDefaultTaskPv+0x12c>)
 8000d3e:	f015 fe31 	bl	80169a4 <iprintf>
 8000d42:	e7c3      	b.n	8000ccc <_Z16StartDefaultTaskPv+0x78>
       }
       else {
         printf("write failed\r\n");
 8000d44:	480f      	ldr	r0, [pc, #60]	@ (8000d84 <_Z16StartDefaultTaskPv+0x130>)
 8000d46:	f015 fe95 	bl	8016a74 <puts>
#ifdef ENABLE_STACK_WATERMARK
   // 获取并打印任务栈最小剩余空间
   UBaseType_t stackHighWaterMark = uxTaskGetStackHighWaterMark(NULL);
   printf("StartDefaultTask Stack Bytes Left: %lu\r\n", stackHighWaterMark * sizeof(StackType_t));
#endif
  }
 8000d4a:	e7bf      	b.n	8000ccc <_Z16StartDefaultTaskPv+0x78>
 8000d4c:	08000af9 	.word	0x08000af9
 8000d50:	24000818 	.word	0x24000818
 8000d54:	08018788 	.word	0x08018788
 8000d58:	240009d8 	.word	0x240009d8
 8000d5c:	080187bc 	.word	0x080187bc
 8000d60:	080187f4 	.word	0x080187f4
 8000d64:	24000284 	.word	0x24000284
 8000d68:	240009dc 	.word	0x240009dc
 8000d6c:	240009e0 	.word	0x240009e0
 8000d70:	08018810 	.word	0x08018810
 8000d74:	240006f4 	.word	0x240006f4
 8000d78:	240006f0 	.word	0x240006f0
 8000d7c:	240004bc 	.word	0x240004bc
 8000d80:	08018820 	.word	0x08018820
 8000d84:	0801882c 	.word	0x0801882c

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	#ifdef W25Qxx
	  SCB->VTOR = QSPI_BASE;
		#endif
	MPU_Config();
 8000d8c:	f7ff fc96 	bl	80006bc <_ZL10MPU_Configv>
	CPU_CACHE_Enable();
 8000d90:	f7ff fcf8 	bl	8000784 <_ZL16CPU_CACHE_Enablev>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d94:	f003 f8a8 	bl	8003ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d98:	f000 f834 	bl	8000e04 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d9c:	f000 f8bc 	bl	8000f18 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da0:	f000 fa36 	bl	8001210 <_ZL12MX_GPIO_Initv>
  MX_SDMMC1_SD_Init();
 8000da4:	f000 f8f0 	bl	8000f88 <_ZL17MX_SDMMC1_SD_Initv>
  MX_USART2_UART_Init();
 8000da8:	f000 f972 	bl	8001090 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 8000dac:	f000 f9d0 	bl	8001150 <_ZL19MX_USART3_UART_Initv>
  MX_TIM3_Init();
 8000db0:	f000 f908 	bl	8000fc4 <_ZL12MX_TIM3_Initv>
  // MX_FATFS_Init();
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 8000db4:	480c      	ldr	r0, [pc, #48]	@ (8000de8 <main+0x60>)
 8000db6:	f000 fb4f 	bl	8001458 <RetargetInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000dba:	f011 fac3 	bl	8012344 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000dec <main+0x64>)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	480b      	ldr	r0, [pc, #44]	@ (8000df0 <main+0x68>)
 8000dc4:	f011 fb3f 	bl	8012446 <osThreadNew>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <main+0x6c>)
 8000dcc:	6013      	str	r3, [r2, #0]
  /* creation of keyTask */
  keyTaskHandle = osThreadNew(StartKeyTask, NULL, &keyTask_attributes);
 8000dce:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <main+0x70>)
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	480a      	ldr	r0, [pc, #40]	@ (8000dfc <main+0x74>)
 8000dd4:	f011 fb37 	bl	8012446 <osThreadNew>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	4a09      	ldr	r2, [pc, #36]	@ (8000e00 <main+0x78>)
 8000ddc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000dde:	f011 faf7 	bl	80123d0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000de2:	bf00      	nop
 8000de4:	e7fd      	b.n	8000de2 <main+0x5a>
 8000de6:	bf00      	nop
 8000de8:	240001e8 	.word	0x240001e8
 8000dec:	0801891c 	.word	0x0801891c
 8000df0:	08000c55 	.word	0x08000c55
 8000df4:	2400027c 	.word	0x2400027c
 8000df8:	08018940 	.word	0x08018940
 8000dfc:	080012fd 	.word	0x080012fd
 8000e00:	24000280 	.word	0x24000280

08000e04 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b09c      	sub	sp, #112	@ 0x70
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0e:	224c      	movs	r2, #76	@ 0x4c
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f016 f812 	bl	8016e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2220      	movs	r2, #32
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f016 f80c 	bl	8016e3c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e24:	2002      	movs	r0, #2
 8000e26:	f004 f9a7 	bl	8005178 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	4b38      	ldr	r3, [pc, #224]	@ (8000f10 <_Z18SystemClock_Configv+0x10c>)
 8000e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e32:	4a37      	ldr	r2, [pc, #220]	@ (8000f10 <_Z18SystemClock_Configv+0x10c>)
 8000e34:	f023 0301 	bic.w	r3, r3, #1
 8000e38:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e3a:	4b35      	ldr	r3, [pc, #212]	@ (8000f10 <_Z18SystemClock_Configv+0x10c>)
 8000e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	4b33      	ldr	r3, [pc, #204]	@ (8000f14 <_Z18SystemClock_Configv+0x110>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e4c:	4a31      	ldr	r2, [pc, #196]	@ (8000f14 <_Z18SystemClock_Configv+0x110>)
 8000e4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b2f      	ldr	r3, [pc, #188]	@ (8000f14 <_Z18SystemClock_Configv+0x110>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e60:	bf00      	nop
 8000e62:	4b2c      	ldr	r3, [pc, #176]	@ (8000f14 <_Z18SystemClock_Configv+0x110>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e6e:	bf14      	ite	ne
 8000e70:	2301      	movne	r3, #1
 8000e72:	2300      	moveq	r3, #0
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f3      	bne.n	8000e62 <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e84:	2302      	movs	r3, #2
 8000e86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000e8c:	2305      	movs	r3, #5
 8000e8e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000e90:	2360      	movs	r3, #96	@ 0x60
 8000e92:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e94:	2302      	movs	r3, #2
 8000e96:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8000e98:	230a      	movs	r3, #10
 8000e9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000ea0:	2308      	movs	r3, #8
 8000ea2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f004 f99b 	bl	80051ec <HAL_RCC_OscConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	bf14      	ite	ne
 8000ebc:	2301      	movne	r3, #1
 8000ebe:	2300      	moveq	r3, #0
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 8000ec6:	f000 fa59 	bl	800137c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eca:	233f      	movs	r3, #63	@ 0x3f
 8000ecc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ed6:	2308      	movs	r3, #8
 8000ed8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2102      	movs	r1, #2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f004 fdd6 	bl	8005aa0 <HAL_RCC_ClockConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	bf14      	ite	ne
 8000efa:	2301      	movne	r3, #1
 8000efc:	2300      	moveq	r3, #0
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000f04:	f000 fa3a 	bl	800137c <Error_Handler>
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3770      	adds	r7, #112	@ 0x70
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	58000400 	.word	0x58000400
 8000f14:	58024800 	.word	0x58024800

08000f18 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b0b0      	sub	sp, #192	@ 0xc0
 8000f1c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f1e:	463b      	mov	r3, r7
 8000f20:	22c0      	movs	r2, #192	@ 0xc0
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f015 ff89 	bl	8016e3c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USART2
 8000f2a:	4a16      	ldr	r2, [pc, #88]	@ (8000f84 <_Z24PeriphCommonClock_Configv+0x6c>)
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000f38:	230c      	movs	r3, #12
 8000f3a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f40:	2302      	movs	r3, #2
 8000f42:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8000f44:	2303      	movs	r3, #3
 8000f46:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f48:	23c0      	movs	r3, #192	@ 0xc0
 8000f4a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000f4c:	2320      	movs	r3, #32
 8000f4e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000f54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f58:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4618      	mov	r0, r3
 8000f62:	f005 f96b 	bl	800623c <HAL_RCCEx_PeriphCLKConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	bf14      	ite	ne
 8000f6c:	2301      	movne	r3, #1
 8000f6e:	2300      	moveq	r3, #0
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <_Z24PeriphCommonClock_Configv+0x62>
  {
    Error_Handler();
 8000f76:	f000 fa01 	bl	800137c <Error_Handler>
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	37c0      	adds	r7, #192	@ 0xc0
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	00010002 	.word	0x00010002

08000f88 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc0 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8000f90:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f92:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000fa0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fa4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fa6:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000fac:	4b03      	ldr	r3, [pc, #12]	@ (8000fbc <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	2400008c 	.word	0x2400008c
 8000fc0:	52007000 	.word	0x52007000

08000fc4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	@ 0x28
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
 8000fe4:	615a      	str	r2, [r3, #20]
 8000fe6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fe8:	4b27      	ldr	r3, [pc, #156]	@ (8001088 <_ZL12MX_TIM3_Initv+0xc4>)
 8000fea:	4a28      	ldr	r2, [pc, #160]	@ (800108c <_ZL12MX_TIM3_Initv+0xc8>)
 8000fec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2399;
 8000fee:	4b26      	ldr	r3, [pc, #152]	@ (8001088 <_ZL12MX_TIM3_Initv+0xc4>)
 8000ff0:	f640 125f 	movw	r2, #2399	@ 0x95f
 8000ff4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff6:	4b24      	ldr	r3, [pc, #144]	@ (8001088 <_ZL12MX_TIM3_Initv+0xc4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000ffc:	4b22      	ldr	r3, [pc, #136]	@ (8001088 <_ZL12MX_TIM3_Initv+0xc4>)
 8000ffe:	2263      	movs	r2, #99	@ 0x63
 8001000:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001002:	4b21      	ldr	r3, [pc, #132]	@ (8001088 <_ZL12MX_TIM3_Initv+0xc4>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001008:	4b1f      	ldr	r3, [pc, #124]	@ (8001088 <_ZL12MX_TIM3_Initv+0xc4>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800100e:	481e      	ldr	r0, [pc, #120]	@ (8001088 <_ZL12MX_TIM3_Initv+0xc4>)
 8001010:	f009 fb50 	bl	800a6b4 <HAL_TIM_OC_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	bf14      	ite	ne
 800101a:	2301      	movne	r3, #1
 800101c:	2300      	moveq	r3, #0
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <_ZL12MX_TIM3_Initv+0x64>
  {
    Error_Handler();
 8001024:	f000 f9aa 	bl	800137c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	4814      	ldr	r0, [pc, #80]	@ (8001088 <_ZL12MX_TIM3_Initv+0xc4>)
 8001038:	f00a f8c4 	bl	800b1c4 <HAL_TIMEx_MasterConfigSynchronization>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	bf14      	ite	ne
 8001042:	2301      	movne	r3, #1
 8001044:	2300      	moveq	r3, #0
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <_ZL12MX_TIM3_Initv+0x8c>
  {
    Error_Handler();
 800104c:	f000 f996 	bl	800137c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001050:	2300      	movs	r3, #0
 8001052:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001060:	463b      	mov	r3, r7
 8001062:	2200      	movs	r2, #0
 8001064:	4619      	mov	r1, r3
 8001066:	4808      	ldr	r0, [pc, #32]	@ (8001088 <_ZL12MX_TIM3_Initv+0xc4>)
 8001068:	f009 fc9a 	bl	800a9a0 <HAL_TIM_OC_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	bf14      	ite	ne
 8001072:	2301      	movne	r3, #1
 8001074:	2300      	moveq	r3, #0
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <_ZL12MX_TIM3_Initv+0xbc>
  {
    Error_Handler();
 800107c:	f000 f97e 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	3728      	adds	r7, #40	@ 0x28
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	24000108 	.word	0x24000108
 800108c:	40000400 	.word	0x40000400

08001090 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001094:	4b2c      	ldr	r3, [pc, #176]	@ (8001148 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001096:	4a2d      	ldr	r2, [pc, #180]	@ (800114c <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001098:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800109a:	4b2b      	ldr	r3, [pc, #172]	@ (8001148 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800109c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010a2:	4b29      	ldr	r3, [pc, #164]	@ (8001148 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a8:	4b27      	ldr	r3, [pc, #156]	@ (8001148 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ae:	4b26      	ldr	r3, [pc, #152]	@ (8001148 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b4:	4b24      	ldr	r3, [pc, #144]	@ (8001148 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010b6:	220c      	movs	r2, #12
 80010b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ba:	4b23      	ldr	r3, [pc, #140]	@ (8001148 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c0:	4b21      	ldr	r3, [pc, #132]	@ (8001148 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010c6:	4b20      	ldr	r3, [pc, #128]	@ (8001148 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001148 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001148 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d8:	481b      	ldr	r0, [pc, #108]	@ (8001148 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010da:	f00a f91f 	bl	800b31c <HAL_UART_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	bf14      	ite	ne
 80010e4:	2301      	movne	r3, #1
 80010e6:	2300      	moveq	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 80010ee:	f000 f945 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f2:	2100      	movs	r1, #0
 80010f4:	4814      	ldr	r0, [pc, #80]	@ (8001148 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010f6:	f00d f91c 	bl	800e332 <HAL_UARTEx_SetTxFifoThreshold>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	bf14      	ite	ne
 8001100:	2301      	movne	r3, #1
 8001102:	2300      	moveq	r3, #0
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800110a:	f000 f937 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800110e:	2100      	movs	r1, #0
 8001110:	480d      	ldr	r0, [pc, #52]	@ (8001148 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001112:	f00d f94c 	bl	800e3ae <HAL_UARTEx_SetRxFifoThreshold>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	bf14      	ite	ne
 800111c:	2301      	movne	r3, #1
 800111e:	2300      	moveq	r3, #0
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8001126:	f000 f929 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800112a:	4807      	ldr	r0, [pc, #28]	@ (8001148 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800112c:	f00d f8c8 	bl	800e2c0 <HAL_UARTEx_DisableFifoMode>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	bf14      	ite	ne
 8001136:	2301      	movne	r3, #1
 8001138:	2300      	moveq	r3, #0
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001140:	f000 f91c 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	24000154 	.word	0x24000154
 800114c:	40004400 	.word	0x40004400

08001150 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001154:	4b2c      	ldr	r3, [pc, #176]	@ (8001208 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001156:	4a2d      	ldr	r2, [pc, #180]	@ (800120c <_ZL19MX_USART3_UART_Initv+0xbc>)
 8001158:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800115a:	4b2b      	ldr	r3, [pc, #172]	@ (8001208 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800115c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001160:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001162:	4b29      	ldr	r3, [pc, #164]	@ (8001208 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001168:	4b27      	ldr	r3, [pc, #156]	@ (8001208 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800116e:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001174:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001176:	220c      	movs	r2, #12
 8001178:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001180:	4b21      	ldr	r3, [pc, #132]	@ (8001208 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001186:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800118c:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001192:	4b1d      	ldr	r3, [pc, #116]	@ (8001208 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001194:	2200      	movs	r2, #0
 8001196:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001198:	481b      	ldr	r0, [pc, #108]	@ (8001208 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800119a:	f00a f8bf 	bl	800b31c <HAL_UART_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	bf14      	ite	ne
 80011a4:	2301      	movne	r3, #1
 80011a6:	2300      	moveq	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 80011ae:	f000 f8e5 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b2:	2100      	movs	r1, #0
 80011b4:	4814      	ldr	r0, [pc, #80]	@ (8001208 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80011b6:	f00d f8bc 	bl	800e332 <HAL_UARTEx_SetTxFifoThreshold>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bf14      	ite	ne
 80011c0:	2301      	movne	r3, #1
 80011c2:	2300      	moveq	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 80011ca:	f000 f8d7 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ce:	2100      	movs	r1, #0
 80011d0:	480d      	ldr	r0, [pc, #52]	@ (8001208 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80011d2:	f00d f8ec 	bl	800e3ae <HAL_UARTEx_SetRxFifoThreshold>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	bf14      	ite	ne
 80011dc:	2301      	movne	r3, #1
 80011de:	2300      	moveq	r3, #0
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 80011e6:	f000 f8c9 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011ea:	4807      	ldr	r0, [pc, #28]	@ (8001208 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80011ec:	f00d f868 	bl	800e2c0 <HAL_UARTEx_DisableFifoMode>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	bf14      	ite	ne
 80011f6:	2301      	movne	r3, #1
 80011f8:	2300      	moveq	r3, #0
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8001200:	f000 f8bc 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	240001e8 	.word	0x240001e8
 800120c:	40004800 	.word	0x40004800

08001210 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	@ 0x28
 8001214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001226:	4b32      	ldr	r3, [pc, #200]	@ (80012f0 <_ZL12MX_GPIO_Initv+0xe0>)
 8001228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122c:	4a30      	ldr	r2, [pc, #192]	@ (80012f0 <_ZL12MX_GPIO_Initv+0xe0>)
 800122e:	f043 0310 	orr.w	r3, r3, #16
 8001232:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001236:	4b2e      	ldr	r3, [pc, #184]	@ (80012f0 <_ZL12MX_GPIO_Initv+0xe0>)
 8001238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123c:	f003 0310 	and.w	r3, r3, #16
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001244:	4b2a      	ldr	r3, [pc, #168]	@ (80012f0 <_ZL12MX_GPIO_Initv+0xe0>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800124a:	4a29      	ldr	r2, [pc, #164]	@ (80012f0 <_ZL12MX_GPIO_Initv+0xe0>)
 800124c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001250:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001254:	4b26      	ldr	r3, [pc, #152]	@ (80012f0 <_ZL12MX_GPIO_Initv+0xe0>)
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800125a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001262:	4b23      	ldr	r3, [pc, #140]	@ (80012f0 <_ZL12MX_GPIO_Initv+0xe0>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001268:	4a21      	ldr	r2, [pc, #132]	@ (80012f0 <_ZL12MX_GPIO_Initv+0xe0>)
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001272:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <_ZL12MX_GPIO_Initv+0xe0>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001280:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <_ZL12MX_GPIO_Initv+0xe0>)
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001286:	4a1a      	ldr	r2, [pc, #104]	@ (80012f0 <_ZL12MX_GPIO_Initv+0xe0>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001290:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <_ZL12MX_GPIO_Initv+0xe0>)
 8001292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	2108      	movs	r1, #8
 80012a2:	4814      	ldr	r0, [pc, #80]	@ (80012f4 <_ZL12MX_GPIO_Initv+0xe4>)
 80012a4:	f003 ff34 	bl	8005110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3_Pin */
  GPIO_InitStruct.Pin = PE3_Pin;
 80012a8:	2308      	movs	r3, #8
 80012aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PE3_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	480d      	ldr	r0, [pc, #52]	@ (80012f4 <_ZL12MX_GPIO_Initv+0xe4>)
 80012c0:	f003 fd5e 	bl	8004d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012c4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 80012d6:	2306      	movs	r3, #6
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <_ZL12MX_GPIO_Initv+0xe8>)
 80012e2:	f003 fd4d 	bl	8004d80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012e6:	bf00      	nop
 80012e8:	3728      	adds	r7, #40	@ 0x28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	58024400 	.word	0x58024400
 80012f4:	58021000 	.word	0x58021000
 80012f8:	58020000 	.word	0x58020000

080012fc <_Z12StartKeyTaskPv>:
  */
/* USER CODE END Header_StartDefaultTask */

/* Function implementing the keyTask thread */
void StartKeyTask(void *argument)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Initialization */
  init_key();
 8001304:	f7ff fc08 	bl	8000b18 <_ZL8init_keyv>
  
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);  // 缩短延时以保证LED闪烁的准确性
 8001308:	200a      	movs	r0, #10
 800130a:	f011 f939 	bl	8012580 <osDelay>
    uint32_t currentTime = osKernelGetTickCount();
 800130e:	f011 f885 	bl	801241c <osKernelGetTickCount>
 8001312:	60f8      	str	r0, [r7, #12]

    scan_key();
 8001314:	f7ff fc2e 	bl	8000b74 <_ZL8scan_keyv>
#ifdef USE_HEARTBEAT_LED
    static uint32_t led_flash_time = 0;
    static uint8_t led_flash_count = 0;
    
    // 根据记录状态设置不同的闪烁间隔
    uint32_t flash_interval = g_isRecording ? 167 : 500;  // 开启记录时3Hz(167ms翻转)，否则1Hz(500ms翻转)
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <_Z12StartKeyTaskPv+0x50>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <_Z12StartKeyTaskPv+0x2a>
 8001322:	23a7      	movs	r3, #167	@ 0xa7
 8001324:	e001      	b.n	800132a <_Z12StartKeyTaskPv+0x2e>
 8001326:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800132a:	60bb      	str	r3, [r7, #8]
    
    if(currentTime - led_flash_time >= flash_interval)
 800132c:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <_Z12StartKeyTaskPv+0x54>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	429a      	cmp	r2, r3
 8001338:	d8e6      	bhi.n	8001308 <_Z12StartKeyTaskPv+0xc>
    {
        HAL_GPIO_TogglePin(PE3_GPIO_Port, PE3_Pin);
 800133a:	2108      	movs	r1, #8
 800133c:	4805      	ldr	r0, [pc, #20]	@ (8001354 <_Z12StartKeyTaskPv+0x58>)
 800133e:	f003 ff00 	bl	8005142 <HAL_GPIO_TogglePin>
        led_flash_time = currentTime;
 8001342:	4a03      	ldr	r2, [pc, #12]	@ (8001350 <_Z12StartKeyTaskPv+0x54>)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6013      	str	r3, [r2, #0]
   // 获取并打印任务栈最小剩余空间
   UBaseType_t stackHighWaterMark = uxTaskGetStackHighWaterMark(NULL);
   printf("StartKeyTask Stack Bytes Left: %lu\r\n", stackHighWaterMark * sizeof(StackType_t));
#endif

  }
 8001348:	e7de      	b.n	8001308 <_Z12StartKeyTaskPv+0xc>
 800134a:	bf00      	nop
 800134c:	24000284 	.word	0x24000284
 8001350:	240009f0 	.word	0x240009f0
 8001354:	58021000 	.word	0x58021000

08001358 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a04      	ldr	r2, [pc, #16]	@ (8001378 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d101      	bne.n	800136e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800136a:	f002 fdf9 	bl	8003f60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40001000 	.word	0x40001000

0800137c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <Error_Handler+0x4>

08001384 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
Encoder485 encoder485(&htim3, 1, &huart2);
 8001388:	4b03      	ldr	r3, [pc, #12]	@ (8001398 <_Z41__static_initialization_and_destruction_0v+0x14>)
 800138a:	2201      	movs	r2, #1
 800138c:	4903      	ldr	r1, [pc, #12]	@ (800139c <_Z41__static_initialization_and_destruction_0v+0x18>)
 800138e:	4804      	ldr	r0, [pc, #16]	@ (80013a0 <_Z41__static_initialization_and_destruction_0v+0x1c>)
 8001390:	f000 fc52 	bl	8001c38 <_ZN10Encoder485C1EP17TIM_HandleTypeDefhP20__UART_HandleTypeDef>
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	24000154 	.word	0x24000154
 800139c:	24000108 	.word	0x24000108
 80013a0:	24000818 	.word	0x24000818

080013a4 <_ZN21ModbusAbsoluteEncoderD1Ev>:
    virtual ~ModbusAbsoluteEncoder() = default;
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <_ZN21ModbusAbsoluteEncoderD1Ev+0x1c>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	08018a2c 	.word	0x08018a2c

080013c4 <_ZN21ModbusAbsoluteEncoderD0Ev>:
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ffe9 	bl	80013a4 <_ZN21ModbusAbsoluteEncoderD1Ev>
 80013d2:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f015 f956 	bl	8016688 <_ZdlPvj>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <_ZN10Encoder485D1Ev>:

#include "ModbusAbsoluteEncoder.h"
#include "main.h"
#include <stdint.h>

class Encoder485 : public ModbusAbsoluteEncoder {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	4a05      	ldr	r2, [pc, #20]	@ (8001408 <_ZN10Encoder485D1Ev+0x20>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ffd3 	bl	80013a4 <_ZN21ModbusAbsoluteEncoderD1Ev>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	0801897c 	.word	0x0801897c

0800140c <_ZN10Encoder485D0Ev>:
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ffe7 	bl	80013e8 <_ZN10Encoder485D1Ev>
 800141a:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f015 f932 	bl	8016688 <_ZdlPvj>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <_Z41__static_initialization_and_destruction_1v>:
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
Encoder485 encoder485(&htim3, 1, &huart2);
 8001434:	4802      	ldr	r0, [pc, #8]	@ (8001440 <_Z41__static_initialization_and_destruction_1v+0x10>)
 8001436:	f7ff ffd7 	bl	80013e8 <_ZN10Encoder485D1Ev>
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	24000818 	.word	0x24000818

08001444 <_GLOBAL__sub_I_hsd1>:
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
 8001448:	f7ff ff9c 	bl	8001384 <_Z41__static_initialization_and_destruction_0v>
 800144c:	bd80      	pop	{r7, pc}

0800144e <_GLOBAL__sub_D_hsd1>:
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
 8001452:	f7ff ffed 	bl	8001430 <_Z41__static_initialization_and_destruction_1v>
 8001456:	bd80      	pop	{r7, pc}

08001458 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001460:	4a07      	ldr	r2, [pc, #28]	@ (8001480 <RetargetInit+0x28>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001466:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <RetargetInit+0x2c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6898      	ldr	r0, [r3, #8]
 800146c:	2300      	movs	r3, #0
 800146e:	2202      	movs	r2, #2
 8001470:	2100      	movs	r1, #0
 8001472:	f015 fb07 	bl	8016a84 <setvbuf>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	240009f4 	.word	0x240009f4
 8001484:	24000020 	.word	0x24000020

08001488 <_isatty>:

int _isatty(int fd) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	db04      	blt.n	80014a0 <_isatty+0x18>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b02      	cmp	r3, #2
 800149a:	dc01      	bgt.n	80014a0 <_isatty+0x18>
    return 1;
 800149c:	2301      	movs	r3, #1
 800149e:	e005      	b.n	80014ac <_isatty+0x24>

  errno = EBADF;
 80014a0:	f015 fdc4 	bl	801702c <__errno>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2209      	movs	r2, #9
 80014a8:	601a      	str	r2, [r3, #0]
  return 0;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_write>:

int _write(int fd, char* ptr, int len) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
 HAL_StatusTypeDef hstatus;

 if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d002      	beq.n	80014cc <_write+0x18>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d111      	bne.n	80014f0 <_write+0x3c>
   hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80014cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <_write+0x54>)
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	f009 ff6f 	bl	800b3bc <HAL_UART_Transmit>
 80014de:	4603      	mov	r3, r0
 80014e0:	75fb      	strb	r3, [r7, #23]
   if (hstatus == HAL_OK)
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <_write+0x38>
     return len;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	e008      	b.n	80014fe <_write+0x4a>
   else
     return EIO;
 80014ec:	2305      	movs	r3, #5
 80014ee:	e006      	b.n	80014fe <_write+0x4a>
 }
 errno = EBADF;
 80014f0:	f015 fd9c 	bl	801702c <__errno>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2209      	movs	r2, #9
 80014f8:	601a      	str	r2, [r3, #0]
 return -1;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	240009f4 	.word	0x240009f4

0800150c <_close>:
//         ITM_SendChar(*ptr++);
//     }
//     return len;
// }

int _close(int fd) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db04      	blt.n	8001524 <_close+0x18>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b02      	cmp	r3, #2
 800151e:	dc01      	bgt.n	8001524 <_close+0x18>
    return 0;
 8001520:	2300      	movs	r3, #0
 8001522:	e006      	b.n	8001532 <_close+0x26>

  errno = EBADF;
 8001524:	f015 fd82 	bl	801702c <__errno>
 8001528:	4603      	mov	r3, r0
 800152a:	2209      	movs	r2, #9
 800152c:	601a      	str	r2, [r3, #0]
  return -1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001546:	f015 fd71 	bl	801702c <__errno>
 800154a:	4603      	mov	r3, r0
 800154c:	2209      	movs	r2, #9
 800154e:	601a      	str	r2, [r3, #0]
  return -1;
 8001550:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_read>:

int _read(int fd, char* ptr, int len) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d110      	bne.n	8001590 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800156e:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <_read+0x4c>)
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001576:	2201      	movs	r2, #1
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	f009 ffad 	bl	800b4d8 <HAL_UART_Receive>
 800157e:	4603      	mov	r3, r0
 8001580:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <_read+0x30>
      return 1;
 8001588:	2301      	movs	r3, #1
 800158a:	e008      	b.n	800159e <_read+0x42>
    else
      return EIO;
 800158c:	2305      	movs	r3, #5
 800158e:	e006      	b.n	800159e <_read+0x42>
  }
  errno = EBADF;
 8001590:	f015 fd4c 	bl	801702c <__errno>
 8001594:	4603      	mov	r3, r0
 8001596:	2209      	movs	r2, #9
 8001598:	601a      	str	r2, [r3, #0]
  return -1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	240009f4 	.word	0x240009f4

080015ac <_fstat>:

int _fstat(int fd, struct stat* st) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db08      	blt.n	80015ce <_fstat+0x22>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	dc05      	bgt.n	80015ce <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015c8:	605a      	str	r2, [r3, #4]
    return 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e005      	b.n	80015da <_fstat+0x2e>
  }

  errno = EBADF;
 80015ce:	f015 fd2d 	bl	801702c <__errno>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2209      	movs	r2, #9
 80015d6:	601a      	str	r2, [r3, #0]
  return 0;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <HAL_MspInit+0x38>)
 80015ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015f0:	4a0a      	ldr	r2, [pc, #40]	@ (800161c <HAL_MspInit+0x38>)
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015fa:	4b08      	ldr	r3, [pc, #32]	@ (800161c <HAL_MspInit+0x38>)
 80015fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001608:	2200      	movs	r2, #0
 800160a:	210f      	movs	r1, #15
 800160c:	f06f 0001 	mvn.w	r0, #1
 8001610:	f002 fdae 	bl	8004170 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	58024400 	.word	0x58024400

08001620 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	@ 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a2e      	ldr	r2, [pc, #184]	@ (80016f8 <HAL_SD_MspInit+0xd8>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d155      	bne.n	80016ee <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001642:	4b2e      	ldr	r3, [pc, #184]	@ (80016fc <HAL_SD_MspInit+0xdc>)
 8001644:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001648:	4a2c      	ldr	r2, [pc, #176]	@ (80016fc <HAL_SD_MspInit+0xdc>)
 800164a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800164e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001652:	4b2a      	ldr	r3, [pc, #168]	@ (80016fc <HAL_SD_MspInit+0xdc>)
 8001654:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001660:	4b26      	ldr	r3, [pc, #152]	@ (80016fc <HAL_SD_MspInit+0xdc>)
 8001662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001666:	4a25      	ldr	r2, [pc, #148]	@ (80016fc <HAL_SD_MspInit+0xdc>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001670:	4b22      	ldr	r3, [pc, #136]	@ (80016fc <HAL_SD_MspInit+0xdc>)
 8001672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800167e:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <HAL_SD_MspInit+0xdc>)
 8001680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001684:	4a1d      	ldr	r2, [pc, #116]	@ (80016fc <HAL_SD_MspInit+0xdc>)
 8001686:	f043 0308 	orr.w	r3, r3, #8
 800168a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800168e:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <HAL_SD_MspInit+0xdc>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800169c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80016a0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80016ae:	230c      	movs	r3, #12
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	4811      	ldr	r0, [pc, #68]	@ (8001700 <HAL_SD_MspInit+0xe0>)
 80016ba:	f003 fb61 	bl	8004d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016be:	2304      	movs	r3, #4
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80016ce:	230c      	movs	r3, #12
 80016d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	480a      	ldr	r0, [pc, #40]	@ (8001704 <HAL_SD_MspInit+0xe4>)
 80016da:	f003 fb51 	bl	8004d80 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2105      	movs	r1, #5
 80016e2:	2031      	movs	r0, #49	@ 0x31
 80016e4:	f002 fd44 	bl	8004170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80016e8:	2031      	movs	r0, #49	@ 0x31
 80016ea:	f002 fd5b 	bl	80041a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80016ee:	bf00      	nop
 80016f0:	3728      	adds	r7, #40	@ 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	52007000 	.word	0x52007000
 80016fc:	58024400 	.word	0x58024400
 8001700:	58020800 	.word	0x58020800
 8001704:	58020c00 	.word	0x58020c00

08001708 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0e      	ldr	r2, [pc, #56]	@ (8001750 <HAL_TIM_OC_MspInit+0x48>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d116      	bne.n	8001748 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800171a:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <HAL_TIM_OC_MspInit+0x4c>)
 800171c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001720:	4a0c      	ldr	r2, [pc, #48]	@ (8001754 <HAL_TIM_OC_MspInit+0x4c>)
 8001722:	f043 0302 	orr.w	r3, r3, #2
 8001726:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800172a:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <HAL_TIM_OC_MspInit+0x4c>)
 800172c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2105      	movs	r1, #5
 800173c:	201d      	movs	r0, #29
 800173e:	f002 fd17 	bl	8004170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001742:	201d      	movs	r0, #29
 8001744:	f002 fd2e 	bl	80041a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001748:	bf00      	nop
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40000400 	.word	0x40000400
 8001754:	58024400 	.word	0x58024400

08001758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	@ 0x30
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a3c      	ldr	r2, [pc, #240]	@ (8001868 <HAL_UART_MspInit+0x110>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d136      	bne.n	80017e8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800177a:	4b3c      	ldr	r3, [pc, #240]	@ (800186c <HAL_UART_MspInit+0x114>)
 800177c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001780:	4a3a      	ldr	r2, [pc, #232]	@ (800186c <HAL_UART_MspInit+0x114>)
 8001782:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001786:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800178a:	4b38      	ldr	r3, [pc, #224]	@ (800186c <HAL_UART_MspInit+0x114>)
 800178c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001794:	61bb      	str	r3, [r7, #24]
 8001796:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001798:	4b34      	ldr	r3, [pc, #208]	@ (800186c <HAL_UART_MspInit+0x114>)
 800179a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179e:	4a33      	ldr	r2, [pc, #204]	@ (800186c <HAL_UART_MspInit+0x114>)
 80017a0:	f043 0308 	orr.w	r3, r3, #8
 80017a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017a8:	4b30      	ldr	r3, [pc, #192]	@ (800186c <HAL_UART_MspInit+0x114>)
 80017aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80017b6:	2360      	movs	r3, #96	@ 0x60
 80017b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c6:	2307      	movs	r3, #7
 80017c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ca:	f107 031c 	add.w	r3, r7, #28
 80017ce:	4619      	mov	r1, r3
 80017d0:	4827      	ldr	r0, [pc, #156]	@ (8001870 <HAL_UART_MspInit+0x118>)
 80017d2:	f003 fad5 	bl	8004d80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2105      	movs	r1, #5
 80017da:	2026      	movs	r0, #38	@ 0x26
 80017dc:	f002 fcc8 	bl	8004170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017e0:	2026      	movs	r0, #38	@ 0x26
 80017e2:	f002 fcdf 	bl	80041a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017e6:	e03b      	b.n	8001860 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART3)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a21      	ldr	r2, [pc, #132]	@ (8001874 <HAL_UART_MspInit+0x11c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d136      	bne.n	8001860 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017f2:	4b1e      	ldr	r3, [pc, #120]	@ (800186c <HAL_UART_MspInit+0x114>)
 80017f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017f8:	4a1c      	ldr	r2, [pc, #112]	@ (800186c <HAL_UART_MspInit+0x114>)
 80017fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001802:	4b1a      	ldr	r3, [pc, #104]	@ (800186c <HAL_UART_MspInit+0x114>)
 8001804:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001808:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001810:	4b16      	ldr	r3, [pc, #88]	@ (800186c <HAL_UART_MspInit+0x114>)
 8001812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001816:	4a15      	ldr	r2, [pc, #84]	@ (800186c <HAL_UART_MspInit+0x114>)
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <HAL_UART_MspInit+0x114>)
 8001822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800182e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001840:	2307      	movs	r3, #7
 8001842:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	4619      	mov	r1, r3
 800184a:	4809      	ldr	r0, [pc, #36]	@ (8001870 <HAL_UART_MspInit+0x118>)
 800184c:	f003 fa98 	bl	8004d80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001850:	2200      	movs	r2, #0
 8001852:	2105      	movs	r1, #5
 8001854:	2027      	movs	r0, #39	@ 0x27
 8001856:	f002 fc8b 	bl	8004170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800185a:	2027      	movs	r0, #39	@ 0x27
 800185c:	f002 fca2 	bl	80041a4 <HAL_NVIC_EnableIRQ>
}
 8001860:	bf00      	nop
 8001862:	3730      	adds	r7, #48	@ 0x30
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40004400 	.word	0x40004400
 800186c:	58024400 	.word	0x58024400
 8001870:	58020c00 	.word	0x58020c00
 8001874:	40004800 	.word	0x40004800

08001878 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b090      	sub	sp, #64	@ 0x40
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b0f      	cmp	r3, #15
 8001884:	d827      	bhi.n	80018d6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001886:	2200      	movs	r2, #0
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	2036      	movs	r0, #54	@ 0x36
 800188c:	f002 fc70 	bl	8004170 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001890:	2036      	movs	r0, #54	@ 0x36
 8001892:	f002 fc87 	bl	80041a4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001896:	4a29      	ldr	r2, [pc, #164]	@ (800193c <HAL_InitTick+0xc4>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800189c:	4b28      	ldr	r3, [pc, #160]	@ (8001940 <HAL_InitTick+0xc8>)
 800189e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018a2:	4a27      	ldr	r2, [pc, #156]	@ (8001940 <HAL_InitTick+0xc8>)
 80018a4:	f043 0310 	orr.w	r3, r3, #16
 80018a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018ac:	4b24      	ldr	r3, [pc, #144]	@ (8001940 <HAL_InitTick+0xc8>)
 80018ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018b2:	f003 0310 	and.w	r3, r3, #16
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018ba:	f107 0210 	add.w	r2, r7, #16
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f004 fc77 	bl	80061b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d106      	bne.n	80018e2 <HAL_InitTick+0x6a>
 80018d4:	e001      	b.n	80018da <HAL_InitTick+0x62>
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e02b      	b.n	8001932 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018da:	f004 fc41 	bl	8006160 <HAL_RCC_GetPCLK1Freq>
 80018de:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80018e0:	e004      	b.n	80018ec <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018e2:	f004 fc3d 	bl	8006160 <HAL_RCC_GetPCLK1Freq>
 80018e6:	4603      	mov	r3, r0
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018ee:	4a15      	ldr	r2, [pc, #84]	@ (8001944 <HAL_InitTick+0xcc>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	0c9b      	lsrs	r3, r3, #18
 80018f6:	3b01      	subs	r3, #1
 80018f8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018fa:	4b13      	ldr	r3, [pc, #76]	@ (8001948 <HAL_InitTick+0xd0>)
 80018fc:	4a13      	ldr	r2, [pc, #76]	@ (800194c <HAL_InitTick+0xd4>)
 80018fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001900:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <HAL_InitTick+0xd0>)
 8001902:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001906:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001908:	4a0f      	ldr	r2, [pc, #60]	@ (8001948 <HAL_InitTick+0xd0>)
 800190a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800190c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800190e:	4b0e      	ldr	r3, [pc, #56]	@ (8001948 <HAL_InitTick+0xd0>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <HAL_InitTick+0xd0>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800191a:	480b      	ldr	r0, [pc, #44]	@ (8001948 <HAL_InitTick+0xd0>)
 800191c:	f008 fdf0 	bl	800a500 <HAL_TIM_Base_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d104      	bne.n	8001930 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001926:	4808      	ldr	r0, [pc, #32]	@ (8001948 <HAL_InitTick+0xd0>)
 8001928:	f008 fe4c 	bl	800a5c4 <HAL_TIM_Base_Start_IT>
 800192c:	4603      	mov	r3, r0
 800192e:	e000      	b.n	8001932 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
}
 8001932:	4618      	mov	r0, r3
 8001934:	3740      	adds	r7, #64	@ 0x40
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	24000008 	.word	0x24000008
 8001940:	58024400 	.word	0x58024400
 8001944:	431bde83 	.word	0x431bde83
 8001948:	240009f8 	.word	0x240009f8
 800194c:	40001000 	.word	0x40001000

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <NMI_Handler+0x4>

08001958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <HardFault_Handler+0x4>

08001960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <MemManage_Handler+0x4>

08001968 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <BusFault_Handler+0x4>

08001970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <UsageFault_Handler+0x4>

08001978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800198e:	481c      	ldr	r0, [pc, #112]	@ (8001a00 <TIM3_IRQHandler+0x78>)
 8001990:	f008 fee7 	bl	800a762 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
#ifdef USE_MOBUSRTU_ENCODER
  // 使用任务通知替代直接调用编码器更新函数
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001994:	2300      	movs	r3, #0
 8001996:	603b      	str	r3, [r7, #0]

  // 发送任务通知给编码器任务
  if (encoderEventGroup != NULL) {
 8001998:	4b1a      	ldr	r3, [pc, #104]	@ (8001a04 <TIM3_IRQHandler+0x7c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d006      	beq.n	80019ae <TIM3_IRQHandler+0x26>
    xEventGroupSetBitsFromISR(encoderEventGroup, ENCODER_TICK_EVENT_BIT, &xHigherPriorityTaskWoken);
 80019a0:	4b18      	ldr	r3, [pc, #96]	@ (8001a04 <TIM3_IRQHandler+0x7c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	463a      	mov	r2, r7
 80019a6:	2101      	movs	r1, #1
 80019a8:	4618      	mov	r0, r3
 80019aa:	f011 fa55 	bl	8012e58 <xEventGroupSetBitsFromISR>
  }

  // 中断频率统计
  tim3_irq_count++;
 80019ae:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <TIM3_IRQHandler+0x80>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	3301      	adds	r3, #1
 80019b4:	4a14      	ldr	r2, [pc, #80]	@ (8001a08 <TIM3_IRQHandler+0x80>)
 80019b6:	6013      	str	r3, [r2, #0]
  uint32_t current_tick = HAL_GetTick();
 80019b8:	f002 fae6 	bl	8003f88 <HAL_GetTick>
 80019bc:	6078      	str	r0, [r7, #4]

  // 每1000毫秒（1秒）统计一次频率
  if (current_tick - tim3_last_tick >= 1000) {
 80019be:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <TIM3_IRQHandler+0x84>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019ca:	d309      	bcc.n	80019e0 <TIM3_IRQHandler+0x58>
    tim3_frequency = tim3_irq_count;
 80019cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <TIM3_IRQHandler+0x80>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001a10 <TIM3_IRQHandler+0x88>)
 80019d2:	6013      	str	r3, [r2, #0]

    // 重置计数器和时间戳
    tim3_irq_count = 0;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <TIM3_IRQHandler+0x80>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
    tim3_last_tick = current_tick;
 80019da:	4a0c      	ldr	r2, [pc, #48]	@ (8001a0c <TIM3_IRQHandler+0x84>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6013      	str	r3, [r2, #0]
  }

  // 如果需要进行任务切换，则执行
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <TIM3_IRQHandler+0x6e>
 80019e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <TIM3_IRQHandler+0x8c>)
 80019e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	f3bf 8f4f 	dsb	sy
 80019f2:	f3bf 8f6f 	isb	sy
#endif
  /* USER CODE END TIM3_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	24000108 	.word	0x24000108
 8001a04:	240009d8 	.word	0x240009d8
 8001a08:	24000a44 	.word	0x24000a44
 8001a0c:	24000a48 	.word	0x24000a48
 8001a10:	24000a4c 	.word	0x24000a4c
 8001a14:	e000ed04 	.word	0xe000ed04

08001a18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a1c:	4802      	ldr	r0, [pc, #8]	@ (8001a28 <USART2_IRQHandler+0x10>)
 8001a1e:	f009 ffd1 	bl	800b9c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	24000154 	.word	0x24000154

08001a2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a30:	4802      	ldr	r0, [pc, #8]	@ (8001a3c <USART3_IRQHandler+0x10>)
 8001a32:	f009 ffc7 	bl	800b9c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	240001e8 	.word	0x240001e8

08001a40 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001a44:	4802      	ldr	r0, [pc, #8]	@ (8001a50 <SDMMC1_IRQHandler+0x10>)
 8001a46:	f007 fb67 	bl	8009118 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	2400008c 	.word	0x2400008c

08001a54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a58:	4802      	ldr	r0, [pc, #8]	@ (8001a64 <TIM6_DAC_IRQHandler+0x10>)
 8001a5a:	f008 fe82 	bl	800a762 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	240009f8 	.word	0x240009f8

08001a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a70:	4a14      	ldr	r2, [pc, #80]	@ (8001ac4 <_sbrk+0x5c>)
 8001a72:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <_sbrk+0x60>)
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a7c:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <_sbrk+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a84:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <_sbrk+0x64>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	@ (8001ad0 <_sbrk+0x68>)
 8001a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8a:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d207      	bcs.n	8001aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a98:	f015 fac8 	bl	801702c <__errno>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aa6:	e009      	b.n	8001abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aae:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4a05      	ldr	r2, [pc, #20]	@ (8001acc <_sbrk+0x64>)
 8001ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aba:	68fb      	ldr	r3, [r7, #12]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	24080000 	.word	0x24080000
 8001ac8:	00003000 	.word	0x00003000
 8001acc:	24000a50 	.word	0x24000a50
 8001ad0:	240055d8 	.word	0x240055d8

08001ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ad8:	4b37      	ldr	r3, [pc, #220]	@ (8001bb8 <SystemInit+0xe4>)
 8001ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ade:	4a36      	ldr	r2, [pc, #216]	@ (8001bb8 <SystemInit+0xe4>)
 8001ae0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ae4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ae8:	4b34      	ldr	r3, [pc, #208]	@ (8001bbc <SystemInit+0xe8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 030f 	and.w	r3, r3, #15
 8001af0:	2b06      	cmp	r3, #6
 8001af2:	d807      	bhi.n	8001b04 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001af4:	4b31      	ldr	r3, [pc, #196]	@ (8001bbc <SystemInit+0xe8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f023 030f 	bic.w	r3, r3, #15
 8001afc:	4a2f      	ldr	r2, [pc, #188]	@ (8001bbc <SystemInit+0xe8>)
 8001afe:	f043 0307 	orr.w	r3, r3, #7
 8001b02:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b04:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc0 <SystemInit+0xec>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a2d      	ldr	r2, [pc, #180]	@ (8001bc0 <SystemInit+0xec>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b10:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc0 <SystemInit+0xec>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b16:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc0 <SystemInit+0xec>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4929      	ldr	r1, [pc, #164]	@ (8001bc0 <SystemInit+0xec>)
 8001b1c:	4b29      	ldr	r3, [pc, #164]	@ (8001bc4 <SystemInit+0xf0>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b22:	4b26      	ldr	r3, [pc, #152]	@ (8001bbc <SystemInit+0xe8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d007      	beq.n	8001b3e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b2e:	4b23      	ldr	r3, [pc, #140]	@ (8001bbc <SystemInit+0xe8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 030f 	bic.w	r3, r3, #15
 8001b36:	4a21      	ldr	r2, [pc, #132]	@ (8001bbc <SystemInit+0xe8>)
 8001b38:	f043 0307 	orr.w	r3, r3, #7
 8001b3c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b3e:	4b20      	ldr	r3, [pc, #128]	@ (8001bc0 <SystemInit+0xec>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b44:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc0 <SystemInit+0xec>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc0 <SystemInit+0xec>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b50:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <SystemInit+0xec>)
 8001b52:	4a1d      	ldr	r2, [pc, #116]	@ (8001bc8 <SystemInit+0xf4>)
 8001b54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b56:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc0 <SystemInit+0xec>)
 8001b58:	4a1c      	ldr	r2, [pc, #112]	@ (8001bcc <SystemInit+0xf8>)
 8001b5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b5c:	4b18      	ldr	r3, [pc, #96]	@ (8001bc0 <SystemInit+0xec>)
 8001b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001bd0 <SystemInit+0xfc>)
 8001b60:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b62:	4b17      	ldr	r3, [pc, #92]	@ (8001bc0 <SystemInit+0xec>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b68:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <SystemInit+0xec>)
 8001b6a:	4a19      	ldr	r2, [pc, #100]	@ (8001bd0 <SystemInit+0xfc>)
 8001b6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b6e:	4b14      	ldr	r3, [pc, #80]	@ (8001bc0 <SystemInit+0xec>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b74:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <SystemInit+0xec>)
 8001b76:	4a16      	ldr	r2, [pc, #88]	@ (8001bd0 <SystemInit+0xfc>)
 8001b78:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <SystemInit+0xec>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b80:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <SystemInit+0xec>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc0 <SystemInit+0xec>)
 8001b86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <SystemInit+0xec>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001b92:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <SystemInit+0x100>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <SystemInit+0x104>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b9e:	d202      	bcs.n	8001ba6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <SystemInit+0x108>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8001be0 <SystemInit+0x10c>)
 8001ba8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001bac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00
 8001bbc:	52002000 	.word	0x52002000
 8001bc0:	58024400 	.word	0x58024400
 8001bc4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001bc8:	02020200 	.word	0x02020200
 8001bcc:	01ff0000 	.word	0x01ff0000
 8001bd0:	01010280 	.word	0x01010280
 8001bd4:	5c001000 	.word	0x5c001000
 8001bd8:	ffff0000 	.word	0xffff0000
 8001bdc:	51008108 	.word	0x51008108
 8001be0:	52004000 	.word	0x52004000

08001be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001be4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001be8:	f7ff ff74 	bl	8001ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bec:	480c      	ldr	r0, [pc, #48]	@ (8001c20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bee:	490d      	ldr	r1, [pc, #52]	@ (8001c24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf4:	e002      	b.n	8001bfc <LoopCopyDataInit>

08001bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfa:	3304      	adds	r3, #4

08001bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c00:	d3f9      	bcc.n	8001bf6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c02:	4a0a      	ldr	r2, [pc, #40]	@ (8001c2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c04:	4c0a      	ldr	r4, [pc, #40]	@ (8001c30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c08:	e001      	b.n	8001c0e <LoopFillZerobss>

08001c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c0c:	3204      	adds	r2, #4

08001c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c10:	d3fb      	bcc.n	8001c0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c12:	f015 fa11 	bl	8017038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c16:	f7ff f8b7 	bl	8000d88 <main>
  bx  lr
 8001c1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c1c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c24:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001c28:	08018cac 	.word	0x08018cac
  ldr r2, =_sbss
 8001c2c:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001c30:	240055d8 	.word	0x240055d8

08001c34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c34:	e7fe      	b.n	8001c34 <ADC3_IRQHandler>
	...

08001c38 <_ZN10Encoder485C1EP17TIM_HandleTypeDefhP20__UART_HandleTypeDef>:

#include "Encoder485.h"
#include <cmath>


Encoder485::Encoder485(TIM_HandleTypeDef *htim, uint8_t unit_id, UART_HandleTypeDef *huart)
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	4613      	mov	r3, r2
 8001c46:	71fb      	strb	r3, [r7, #7]
  : ModbusAbsoluteEncoder(htim, unit_id),
    huart(huart)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	79fa      	ldrb	r2, [r7, #7]
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f001 fcde 	bl	8003610 <_ZN21ModbusAbsoluteEncoderC1EP17TIM_HandleTypeDefh>
 8001c54:	4a05      	ldr	r2, [pc, #20]	@ (8001c6c <_ZN10Encoder485C1EP17TIM_HandleTypeDefhP20__UART_HandleTypeDef+0x34>)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
{
}
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	0801897c 	.word	0x0801897c

08001c70 <_ZN10Encoder4854initEv>:

void Encoder485::init(){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
    /* Modbus Master initialization */
  ModbusH.uModbusType = MB_MASTER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ModbusH.port = huart; 
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f8d3 21bc 	ldr.w	r2, [r3, #444]	@ 0x1bc
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	629a      	str	r2, [r3, #40]	@ 0x28
  ModbusH.u8id = 0; //master ID
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  ModbusH.u16timeOut = 1000;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c98:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
  ModbusH.EN_Port = NULL; // No RS485
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	631a      	str	r2, [r3, #48]	@ 0x30
  ModbusH.u16regs = ModbusDATA;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f503 72b6 	add.w	r2, r3, #364	@ 0x16c
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  ModbusH.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2208      	movs	r2, #8
 8001cb2:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
  ModbusH.xTypeHW = USART_HW;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
  
  ModbusAbsoluteEncoder::init();
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f001 fcff 	bl	80036c4 <_ZN21ModbusAbsoluteEncoder4initEv>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_ZN10Encoder48514constructQueryEP8modbus_t>:

bool Encoder485::constructQuery(modbus_t* modbusQuary) {
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
    modbusQuary->u8id = unit_id;                      // 从站地址03
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 217c 	ldrb.w	r2, [r3, #380]	@ 0x17c
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	701a      	strb	r2, [r3, #0]
    modbusQuary->u8fct = MB_FC_READ_REGISTERS;  // 功能码03：读取保持寄存器
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	705a      	strb	r2, [r3, #1]
    modbusQuary->u16RegAdd = 0x0000;            // 寄存器起始地址0x00
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	2200      	movs	r2, #0
 8001cec:	805a      	strh	r2, [r3, #2]
    modbusQuary->u16CoilsNo = 2;                // 读取2个寄存器（0x00和0x01）
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	809a      	strh	r2, [r3, #4]
    modbusQuary->u16reg = ModbusDATA;           // 数据存储缓冲区
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f503 72b6 	add.w	r2, r3, #364	@ 0x16c
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	609a      	str	r2, [r3, #8]
    return true;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <RingAdd>:
#endif

/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001d1e:	4619      	mov	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	78fa      	ldrb	r2, [r7, #3]
 8001d24:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	425a      	negs	r2, r3
 8001d30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d38:	bf58      	it	pl
 8001d3a:	4253      	negpl	r3, r2
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001d4a:	2b80      	cmp	r3, #128	@ 0x80
 8001d4c:	d113      	bne.n	8001d76 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	425a      	negs	r2, r3
 8001d60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d68:	bf58      	it	pl
 8001d6a:	4253      	negpl	r3, r2
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8001d74:	e00b      	b.n	8001d8e <RingAdd+0x82>
		xRingBuffer->overflow = false;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
		xRingBuffer->u8available++;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001d84:	3301      	adds	r3, #1
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001daa:	461a      	mov	r2, r3
 8001dac:	6839      	ldr	r1, [r7, #0]
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f805 	bl	8001dbe <RingGetNBytes>
 8001db4:	4603      	mov	r3, r0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <RingGetNBytes+0x1e>
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <RingGetNBytes+0x22>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	e03e      	b.n	8001e5e <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	2b80      	cmp	r3, #128	@ 0x80
 8001de4:	d901      	bls.n	8001dea <RingGetNBytes+0x2c>
 8001de6:	2300      	movs	r3, #0
 8001de8:	e039      	b.n	8001e5e <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	75fb      	strb	r3, [r7, #23]
 8001dee:	e01b      	b.n	8001e28 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001df6:	4619      	mov	r1, r3
 8001df8:	7dfb      	ldrb	r3, [r7, #23]
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	5c52      	ldrb	r2, [r2, r1]
 8001e02:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	425a      	negs	r2, r3
 8001e0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e16:	bf58      	it	pl
 8001e18:	4253      	negpl	r3, r2
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	3301      	adds	r3, #1
 8001e26:	75fb      	strb	r3, [r7, #23]
 8001e28:	7dfa      	ldrb	r2, [r7, #23]
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d205      	bcs.n	8001e3c <RingGetNBytes+0x7e>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001e36:	7dfa      	ldrb	r2, [r7, #23]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d3d9      	bcc.n	8001df0 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	xRingBuffer->overflow = false;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
	RingClear(xRingBuffer);
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f805 	bl	8001e66 <RingClear>

	return uCounter;
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
xRingBuffer->u8end = 0;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
xRingBuffer->u8available = 0;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
xRingBuffer->overflow = false;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af02      	add	r7, sp, #8
 8001ea2:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8001ea4:	4b45      	ldr	r3, [pc, #276]	@ (8001fbc <ModbusInit+0x120>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	f200 8083 	bhi.w	8001fb4 <ModbusInit+0x118>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	33c0      	adds	r3, #192	@ 0xc0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff ffd7 	bl	8001e66 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d109      	bne.n	8001ed4 <ModbusInit+0x38>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8001ec0:	4a3f      	ldr	r2, [pc, #252]	@ (8001fc0 <ModbusInit+0x124>)
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	483f      	ldr	r0, [pc, #252]	@ (8001fc4 <ModbusInit+0x128>)
 8001ec6:	f010 fabe 	bl	8012446 <osThreadNew>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001ed2:	e035      	b.n	8001f40 <ModbusInit+0xa4>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d130      	bne.n	8001f3e <ModbusInit+0xa2>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8001edc:	4a3a      	ldr	r2, [pc, #232]	@ (8001fc8 <ModbusInit+0x12c>)
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	483a      	ldr	r0, [pc, #232]	@ (8001fcc <ModbusInit+0x130>)
 8001ee2:	f010 fab0 	bl	8012446 <osThreadNew>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8001ef4:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8001efc:	4a34      	ldr	r2, [pc, #208]	@ (8001fd0 <ModbusInit+0x134>)
 8001efe:	9200      	str	r2, [sp, #0]
 8001f00:	2200      	movs	r2, #0
 8001f02:	4834      	ldr	r0, [pc, #208]	@ (8001fd4 <ModbusInit+0x138>)
 8001f04:	f013 fbf0 	bl	80156e8 <xTimerCreate>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <ModbusInit+0x82>
		  {
			  while(1); //error creating timer, check heap and stack size
 8001f1a:	bf00      	nop
 8001f1c:	e7fd      	b.n	8001f1a <ModbusInit+0x7e>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8001f1e:	4a2e      	ldr	r2, [pc, #184]	@ (8001fd8 <ModbusInit+0x13c>)
 8001f20:	2110      	movs	r1, #16
 8001f22:	2002      	movs	r0, #2
 8001f24:	f010 fc8a 	bl	801283c <osMessageQueueNew>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

		  if(modH->QueueTelegramHandle == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d102      	bne.n	8001f40 <ModbusInit+0xa4>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 8001f3a:	bf00      	nop
 8001f3c:	e7fd      	b.n	8001f3a <ModbusInit+0x9e>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8001f3e:	e7fe      	b.n	8001f3e <ModbusInit+0xa2>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <ModbusInit+0xb2>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8001f4a:	bf00      	nop
 8001f4c:	e7fd      	b.n	8001f4a <ModbusInit+0xae>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8001f54:	4a21      	ldr	r2, [pc, #132]	@ (8001fdc <ModbusInit+0x140>)
 8001f56:	9200      	str	r2, [sp, #0]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2105      	movs	r1, #5
 8001f5c:	4820      	ldr	r0, [pc, #128]	@ (8001fe0 <ModbusInit+0x144>)
 8001f5e:	f013 fbc3 	bl	80156e8 <xTimerCreate>
 8001f62:	4602      	mov	r2, r0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <ModbusInit+0xdc>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <ModbusInit+0xd8>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8001f78:	4a1a      	ldr	r2, [pc, #104]	@ (8001fe4 <ModbusInit+0x148>)
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f010 fb1a 	bl	80125b6 <osSemaphoreNew>
 8001f82:	4602      	mov	r2, r0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	  if(modH->ModBusSphrHandle == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <ModbusInit+0xfc>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <ModbusInit+0xf8>
	  }

	  mHandlers[numberHandlers] = modH;
 8001f98:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <ModbusInit+0x120>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4a12      	ldr	r2, [pc, #72]	@ (8001fe8 <ModbusInit+0x14c>)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8001fa6:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <ModbusInit+0x120>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	3301      	adds	r3, #1
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4b03      	ldr	r3, [pc, #12]	@ (8001fbc <ModbusInit+0x120>)
 8001fb0:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8001fb2:	e000      	b.n	8001fb6 <ModbusInit+0x11a>
	  while(1); //error no more Modbus handlers supported
 8001fb4:	e7fe      	b.n	8001fb4 <ModbusInit+0x118>
}
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	24000a5c 	.word	0x24000a5c
 8001fc0:	080189c4 	.word	0x080189c4
 8001fc4:	080021e1 	.word	0x080021e1
 8001fc8:	080189e8 	.word	0x080189e8
 8001fcc:	08002775 	.word	0x08002775
 8001fd0:	08002185 	.word	0x08002185
 8001fd4:	08018880 	.word	0x08018880
 8001fd8:	080189ac 	.word	0x080189ac
 8001fdc:	08002101 	.word	0x08002101
 8001fe0:	08018890 	.word	0x08018890
 8001fe4:	08018a0c 	.word	0x08018a0c
 8001fe8:	24000a54 	.word	0x24000a54

08001fec <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d010      	beq.n	8002020 <ModbusStart+0x34>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8002004:	2b03      	cmp	r3, #3
 8002006:	d00b      	beq.n	8002020 <ModbusStart+0x34>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 800200e:	2b02      	cmp	r3, #2
 8002010:	d006      	beq.n	8002020 <ModbusStart+0x34>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8002018:	2b04      	cmp	r3, #4
 800201a:	d001      	beq.n	8002020 <ModbusStart+0x34>
	{

		while(1); //ERROR select the type of hardware
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <ModbusStart+0x30>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8002026:	2b04      	cmp	r3, #4
 8002028:	d101      	bne.n	800202e <ModbusStart+0x42>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 800202a:	bf00      	nop
 800202c:	e7fd      	b.n	800202a <ModbusStart+0x3e>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8002034:	2b01      	cmp	r3, #1
 8002036:	d004      	beq.n	8002042 <ModbusStart+0x56>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 800203e:	2b04      	cmp	r3, #4
 8002040:	d140      	bne.n	80020c4 <ModbusStart+0xd8>
	{

	      if (modH->EN_Port != NULL )
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d007      	beq.n	800205a <ModbusStart+0x6e>
          {
              // return RS485 transceiver to receive mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68d8      	ldr	r0, [r3, #12]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	8a1b      	ldrh	r3, [r3, #16]
 8002052:	2200      	movs	r2, #0
 8002054:	4619      	mov	r1, r3
 8002056:	f003 f85b 	bl	8005110 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b03      	cmp	r3, #3
 8002060:	d106      	bne.n	8002070 <ModbusStart+0x84>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <ModbusStart+0x84>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <ModbusStart+0x80>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8002070:	bf00      	nop
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4618      	mov	r0, r3
 8002078:	f00a f926 	bl	800c2c8 <HAL_UART_GetState>
 800207c:	4603      	mov	r3, r0
 800207e:	2b20      	cmp	r3, #32
 8002080:	d1f7      	bne.n	8002072 <ModbusStart+0x86>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6858      	ldr	r0, [r3, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	33a6      	adds	r3, #166	@ 0xa6
 800208a:	2201      	movs	r2, #1
 800208c:	4619      	mov	r1, r3
 800208e:	f009 fb7f 	bl	800b790 <HAL_UART_Receive_IT>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <ModbusStart+0xb0>
          {
                while(1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <ModbusStart+0xac>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7a1b      	ldrb	r3, [r3, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <ModbusStart+0xc4>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d101      	bne.n	80020b0 <ModbusStart+0xc4>
          {
        	  while(1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <ModbusStart+0xc0>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	7a1b      	ldrb	r3, [r3, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d105      	bne.n	80020c4 <ModbusStart+0xd8>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d101      	bne.n	80020c4 <ModbusStart+0xd8>
          {
             	  while(1)
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <ModbusStart+0xd4>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 2093 	ldrb.w	r2, [r3, #147]	@ 0x93
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f8b3 209e 	ldrh.w	r2, [r3, #158]	@ 0x9e
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af02      	add	r7, sp, #8
 8002106:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	e02a      	b.n	8002164 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800210e:	4a1b      	ldr	r2, [pc, #108]	@ (800217c <vTimerCallbackT35+0x7c>)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002116:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	429a      	cmp	r2, r3
 800211e:	d11e      	bne.n	800215e <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 8002120:	4a16      	ldr	r2, [pc, #88]	@ (800217c <vTimerCallbackT35+0x7c>)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b04      	cmp	r3, #4
 800212c:	d10c      	bne.n	8002148 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800212e:	4a13      	ldr	r2, [pc, #76]	@ (800217c <vTimerCallbackT35+0x7c>)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002136:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 800213a:	2300      	movs	r3, #0
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2300      	movs	r3, #0
 8002140:	2200      	movs	r2, #0
 8002142:	2103      	movs	r1, #3
 8002144:	f013 fb2e 	bl	80157a4 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8002148:	4a0c      	ldr	r2, [pc, #48]	@ (800217c <vTimerCallbackT35+0x7c>)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002150:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8002154:	2300      	movs	r3, #0
 8002156:	2203      	movs	r2, #3
 8002158:	2100      	movs	r1, #0
 800215a:	f013 f87f 	bl	801525c <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3301      	adds	r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <vTimerCallbackT35+0x80>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4293      	cmp	r3, r2
 800216e:	dbce      	blt.n	800210e <vTimerCallbackT35+0xe>
		}

	}
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	24000a54 	.word	0x24000a54
 8002180:	24000a5c 	.word	0x24000a5c

08002184 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	e016      	b.n	80021c0 <vTimerCallbackTimeout+0x3c>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 8002192:	4a11      	ldr	r2, [pc, #68]	@ (80021d8 <vTimerCallbackTimeout+0x54>)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d10a      	bne.n	80021ba <vTimerCallbackTimeout+0x36>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 80021a4:	4a0c      	ldr	r2, [pc, #48]	@ (80021d8 <vTimerCallbackTimeout+0x54>)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ac:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 80021b0:	2300      	movs	r3, #0
 80021b2:	2203      	movs	r2, #3
 80021b4:	2111      	movs	r1, #17
 80021b6:	f013 f851 	bl	801525c <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	3301      	adds	r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <vTimerCallbackTimeout+0x58>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4293      	cmp	r3, r2
 80021ca:	dbe2      	blt.n	8002192 <vTimerCallbackTimeout+0xe>
		}

	}

}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	24000a54 	.word	0x24000a54
 80021dc:	24000a5c 	.word	0x24000a5c

080021e0 <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d004      	beq.n	8002206 <StartTaskModbusSlave+0x26>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8002202:	2b04      	cmp	r3, #4
 8002204:	d116      	bne.n	8002234 <StartTaskModbusSlave+0x54>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 8002206:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800220a:	2001      	movs	r0, #1
 800220c:	f012 ffda 	bl	80151c4 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 fc8f 	bl	8002b34 <getRxBuffer>
 8002216:	4603      	mov	r3, r0
 8002218:	2b0c      	cmp	r3, #12
 800221a:	d10b      	bne.n	8002234 <StartTaskModbusSlave+0x54>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	220c      	movs	r2, #12
 8002220:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002228:	3301      	adds	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		  continue;
 8002232:	e0c2      	b.n	80023ba <StartTaskModbusSlave+0x1da>
	  }

   }

   if (modH->u8BufferSize < 7)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800223a:	2b06      	cmp	r3, #6
 800223c:	d80b      	bhi.n	8002256 <StartTaskModbusSlave+0x76>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	220f      	movs	r2, #15
 8002242:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800224a:	3301      	adds	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0

	  continue;
 8002254:	e0b1      	b.n	80023ba <StartTaskModbusSlave+0x1da>
    }

    //check broadcast mode
    modH->u8AddressMode = ADDRESS_NORMAL;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    if (modH->u8Buffer[ID] == ADDRESS_BROADCAST)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	7cdb      	ldrb	r3, [r3, #19]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d103      	bne.n	800226e <StartTaskModbusSlave+0x8e>
    {
        modH->u8AddressMode = ADDRESS_BROADCAST;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    }

   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id && modH->u8AddressMode != ADDRESS_BROADCAST)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	7cda      	ldrb	r2, [r3, #19]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	7a1b      	ldrb	r3, [r3, #8]
 8002276:	429a      	cmp	r2, r3
 8002278:	d005      	beq.n	8002286 <StartTaskModbusSlave+0xa6>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8002280:	2b00      	cmp	r3, #0
 8002282:	f040 8099 	bne.w	80023b8 <StartTaskModbusSlave+0x1d8>
    	}
#endif
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 fc9c 	bl	8002bc4 <validateRequest>
 800228c:	4603      	mov	r3, r0
 800228e:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 8002290:	7afb      	ldrb	r3, [r7, #11]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00e      	beq.n	80022b4 <StartTaskModbusSlave+0xd4>
	{
	    if (u8exception != ERR_TIME_OUT)
 8002296:	7afb      	ldrb	r3, [r7, #11]
 8002298:	2b11      	cmp	r3, #17
 800229a:	d007      	beq.n	80022ac <StartTaskModbusSlave+0xcc>
		{
		    buildException( u8exception, modH);
 800229c:	7afb      	ldrb	r3, [r7, #11]
 800229e:	68f9      	ldr	r1, [r7, #12]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 fe32 	bl	8002f0a <buildException>
			sendTxBuffer(modH);
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fe4e 	bl	8002f48 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	7afa      	ldrb	r2, [r7, #11]
 80022b0:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 80022b2:	e082      	b.n	80023ba <StartTaskModbusSlave+0x1da>
	 }

	 modH->i8lastError = 0;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022c4:	4618      	mov	r0, r3
 80022c6:	f011 fb55 	bl	8013974 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	7d1b      	ldrb	r3, [r3, #20]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	2b0f      	cmp	r3, #15
 80022d2:	d863      	bhi.n	800239c <StartTaskModbusSlave+0x1bc>
 80022d4:	a201      	add	r2, pc, #4	@ (adr r2, 80022dc <StartTaskModbusSlave+0xfc>)
 80022d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022da:	bf00      	nop
 80022dc:	0800231d 	.word	0x0800231d
 80022e0:	0800231d 	.word	0x0800231d
 80022e4:	08002339 	.word	0x08002339
 80022e8:	08002339 	.word	0x08002339
 80022ec:	08002355 	.word	0x08002355
 80022f0:	08002367 	.word	0x08002367
 80022f4:	0800239d 	.word	0x0800239d
 80022f8:	0800239d 	.word	0x0800239d
 80022fc:	0800239d 	.word	0x0800239d
 8002300:	0800239d 	.word	0x0800239d
 8002304:	0800239d 	.word	0x0800239d
 8002308:	0800239d 	.word	0x0800239d
 800230c:	0800239d 	.word	0x0800239d
 8002310:	0800239d 	.word	0x0800239d
 8002314:	08002379 	.word	0x08002379
 8002318:	0800238b 	.word	0x0800238b
	 {
		case MB_FC_READ_COILS:
		case MB_FC_READ_DISCRETE_INPUT:
			if (modH->u8AddressMode == ADDRESS_BROADCAST)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d03c      	beq.n	80023a0 <StartTaskModbusSlave+0x1c0>
			{
				/* broadcast mode should ignore read function */
				break;
			}
			modH->i8state = process_FC1(modH);
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 feb2 	bl	8003090 <process_FC1>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002336:	e036      	b.n	80023a6 <StartTaskModbusSlave+0x1c6>
		case MB_FC_READ_INPUT_REGISTER:
		case MB_FC_READ_REGISTERS :
			if (modH->u8AddressMode == ADDRESS_BROADCAST)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d030      	beq.n	80023a4 <StartTaskModbusSlave+0x1c4>
			{
				/* broadcast mode should ignore read function */
				break;
			}
			modH->i8state = process_FC3(modH);
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 ff59 	bl	80031fa <process_FC3>
 8002348:	4603      	mov	r3, r0
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002352:	e028      	b.n	80023a6 <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_COIL:
			modH->i8state = process_FC5(modH);
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 ffbb 	bl	80032d0 <process_FC5>
 800235a:	4603      	mov	r3, r0
 800235c:	461a      	mov	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002364:	e01f      	b.n	80023a6 <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_REGISTER :
			modH->i8state = process_FC6(modH);
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f001 f80b 	bl	8003382 <process_FC6>
 800236c:	4603      	mov	r3, r0
 800236e:	461a      	mov	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002376:	e016      	b.n	80023a6 <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_MULTIPLE_COILS:
			modH->i8state = process_FC15(modH);
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f001 f834 	bl	80033e6 <process_FC15>
 800237e:	4603      	mov	r3, r0
 8002380:	461a      	mov	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002388:	e00d      	b.n	80023a6 <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_MULTIPLE_REGISTERS :
			modH->i8state = process_FC16(modH);
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f001 f8b9 	bl	8003502 <process_FC16>
 8002390:	4603      	mov	r3, r0
 8002392:	461a      	mov	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 800239a:	e004      	b.n	80023a6 <StartTaskModbusSlave+0x1c6>
		default:
			break;
 800239c:	bf00      	nop
 800239e:	e002      	b.n	80023a6 <StartTaskModbusSlave+0x1c6>
				break;
 80023a0:	bf00      	nop
 80023a2:	e000      	b.n	80023a6 <StartTaskModbusSlave+0x1c6>
				break;
 80023a4:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 80023ac:	2300      	movs	r3, #0
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	f010 ffcd 	bl	8013350 <xQueueGenericSend>

	 continue;
 80023b6:	e000      	b.n	80023ba <StartTaskModbusSlave+0x1da>
    	continue; // continue this is not for us
 80023b8:	bf00      	nop
  {
 80023ba:	e717      	b.n	80021ec <StartTaskModbusSlave+0xc>

080023bc <ModbusQuery>:
}



void ModbusQuery(modbusHandler_t * modH, modbus_t telegram )
{
 80023bc:	b084      	sub	sp, #16
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	f107 001c 	add.w	r0, r7, #28
 80023ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX tail Queue of Modbus
	if (modH->uModbusType == MB_MASTER)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d12b      	bne.n	800242e <ModbusQuery+0x72>
	{
	telegram.u32CurrentTask = (uint32_t *) osThreadGetId();
 80023d6:	f010 f8c8 	bl	801256a <osThreadGetId>
 80023da:	4603      	mov	r3, r0
 80023dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	// 检查是否在中断中运行
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
	if (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) {
 80023e2:	4b17      	ldr	r3, [pc, #92]	@ (8002440 <ModbusQuery+0x84>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d015      	beq.n	800241a <ModbusQuery+0x5e>
		// 在中断中，使用FromISR版本
		xQueueSendToBackFromISR(modH->QueueTelegramHandle, &telegram, &xHigherPriorityTaskWoken);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 80023f4:	f107 020c 	add.w	r2, r7, #12
 80023f8:	f107 011c 	add.w	r1, r7, #28
 80023fc:	2300      	movs	r3, #0
 80023fe:	f011 f8a9 	bl	8013554 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d013      	beq.n	8002430 <ModbusQuery+0x74>
 8002408:	4b0e      	ldr	r3, [pc, #56]	@ (8002444 <ModbusQuery+0x88>)
 800240a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	f3bf 8f4f 	dsb	sy
 8002414:	f3bf 8f6f 	isb	sy
	}
	else{
//		LED_Toggle("red");
		while(1);// error a slave cannot send queries as a master
	}
}
 8002418:	e00a      	b.n	8002430 <ModbusQuery+0x74>
		xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 8002420:	f107 011c 	add.w	r1, r7, #28
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	f010 ff92 	bl	8013350 <xQueueGenericSend>
}
 800242c:	e000      	b.n	8002430 <ModbusQuery+0x74>
		while(1);// error a slave cannot send queries as a master
 800242e:	e7fe      	b.n	800242e <ModbusQuery+0x72>
}
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800243a:	b004      	add	sp, #16
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000ed00 	.word	0xe000ed00
 8002444:	e000ed04 	.word	0xe000ed04

08002448 <ModbusQueryV2>:

uint32_t ModbusQueryV2(modbusHandler_t * modH, modbus_t telegram )
{
 8002448:	b084      	sub	sp, #16
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	f107 0014 	add.w	r0, r7, #20
 8002456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX tail Queue of Modbus
	if (modH->uModbusType == MB_MASTER)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b04      	cmp	r3, #4
 8002460:	d113      	bne.n	800248a <ModbusQueryV2+0x42>
	{
	telegram.u32CurrentTask = (uint32_t *) osThreadGetId();
 8002462:	f010 f882 	bl	801256a <osThreadGetId>
 8002466:	4603      	mov	r3, r0
 8002468:	623b      	str	r3, [r7, #32]
	xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 8002470:	f107 0114 	add.w	r1, r7, #20
 8002474:	2300      	movs	r3, #0
 8002476:	2200      	movs	r2, #0
 8002478:	f010 ff6a 	bl	8013350 <xQueueGenericSend>

	return ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800247c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002480:	2001      	movs	r0, #1
 8002482:	f012 fe9f 	bl	80151c4 <ulTaskNotifyTake>
 8002486:	4603      	mov	r3, r0
 8002488:	e000      	b.n	800248c <ModbusQueryV2+0x44>

	}
	else{
//		LED_Toggle("red");
		while(1);// error a slave cannot send queries as a master
 800248a:	e7fe      	b.n	800248a <ModbusQueryV2+0x42>
	}
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002496:	b004      	add	sp, #16
 8002498:	4770      	bx	lr
	...

0800249c <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 800249c:	b084      	sub	sp, #16
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	f107 001c 	add.w	r0, r7, #28
 80024aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80024b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024bc:	4618      	mov	r0, r3
 80024be:	f011 fa59 	bl	8013974 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	7a1b      	ldrb	r3, [r3, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <SendQuery+0x32>
 80024ca:	230a      	movs	r3, #10
 80024cc:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f993 30a7 	ldrsb.w	r3, [r3, #167]	@ 0xa7
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <SendQuery+0x40>
 80024d8:	230b      	movs	r3, #11
 80024da:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 80024dc:	7f3b      	ldrb	r3, [r7, #28]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <SendQuery+0x4c>
 80024e2:	7f3b      	ldrb	r3, [r7, #28]
 80024e4:	2bf7      	cmp	r3, #247	@ 0xf7
 80024e6:	d901      	bls.n	80024ec <SendQuery+0x50>
 80024e8:	2312      	movs	r3, #18
 80024ea:	73bb      	strb	r3, [r7, #14]


	if(error)
 80024ec:	7bbb      	ldrb	r3, [r7, #14]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00d      	beq.n	800250e <SendQuery+0x72>
	{
		 modH->i8lastError = error;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7bba      	ldrb	r2, [r7, #14]
 80024f6:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 80024fe:	2300      	movs	r3, #0
 8002500:	2200      	movs	r2, #0
 8002502:	2100      	movs	r1, #0
 8002504:	f010 ff24 	bl	8013350 <xQueueGenericSend>
		 return error;
 8002508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800250c:	e12a      	b.n	8002764 <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 800250e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 8002516:	7f3a      	ldrb	r2, [r7, #28]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 800251c:	7f7a      	ldrb	r2, [r7, #29]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8002522:	8bfb      	ldrh	r3, [r7, #30]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	b29b      	uxth	r3, r3
 8002528:	b2da      	uxtb	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 800252e:	8bfb      	ldrh	r3, [r7, #30]
 8002530:	b2da      	uxtb	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 8002536:	7f7b      	ldrb	r3, [r7, #29]
 8002538:	3b01      	subs	r3, #1
 800253a:	2b0f      	cmp	r3, #15
 800253c:	f200 80ff 	bhi.w	800273e <SendQuery+0x2a2>
 8002540:	a201      	add	r2, pc, #4	@ (adr r2, 8002548 <SendQuery+0xac>)
 8002542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002546:	bf00      	nop
 8002548:	08002589 	.word	0x08002589
 800254c:	08002589 	.word	0x08002589
 8002550:	08002589 	.word	0x08002589
 8002554:	08002589 	.word	0x08002589
 8002558:	080025a7 	.word	0x080025a7
 800255c:	080025c9 	.word	0x080025c9
 8002560:	0800273f 	.word	0x0800273f
 8002564:	0800273f 	.word	0x0800273f
 8002568:	0800273f 	.word	0x0800273f
 800256c:	0800273f 	.word	0x0800273f
 8002570:	0800273f 	.word	0x0800273f
 8002574:	0800273f 	.word	0x0800273f
 8002578:	0800273f 	.word	0x0800273f
 800257c:	0800273f 	.word	0x0800273f
 8002580:	080025eb 	.word	0x080025eb
 8002584:	080026a9 	.word	0x080026a9
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8002588:	8c3b      	ldrh	r3, [r7, #32]
 800258a:	0a1b      	lsrs	r3, r3, #8
 800258c:	b29b      	uxth	r3, r3
 800258e:	b2da      	uxtb	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8002594:	8c3b      	ldrh	r3, [r7, #32]
 8002596:	b2da      	uxtb	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2206      	movs	r2, #6
 80025a0:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 80025a4:	e0cb      	b.n	800273e <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 80025a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <SendQuery+0x116>
 80025ae:	22ff      	movs	r2, #255	@ 0xff
 80025b0:	e000      	b.n	80025b4 <SendQuery+0x118>
 80025b2:	2200      	movs	r2, #0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2206      	movs	r2, #6
 80025c2:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 80025c6:	e0ba      	b.n	800273e <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 80025c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2206      	movs	r2, #6
 80025e4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 80025e8:	e0a9      	b.n	800273e <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 80025ea:	8c3b      	ldrh	r3, [r7, #32]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 80025f2:	7a7b      	ldrb	r3, [r7, #9]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 80025f8:	8c3b      	ldrh	r3, [r7, #32]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	b29b      	uxth	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <SendQuery+0x174>
	    {
	        u8bytesno++;
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	3301      	adds	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 800260a:	7a7b      	ldrb	r3, [r7, #9]
 800260c:	3301      	adds	r3, #1
 800260e:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8002610:	8c3b      	ldrh	r3, [r7, #32]
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	b29b      	uxth	r3, r3
 8002616:	b2da      	uxtb	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800261c:	8c3b      	ldrh	r3, [r7, #32]
 800261e:	b2da      	uxtb	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2207      	movs	r2, #7
 800262e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 8002632:	2300      	movs	r3, #0
 8002634:	81bb      	strh	r3, [r7, #12]
 8002636:	e031      	b.n	800269c <SendQuery+0x200>
	    {
	        if(i%2)
 8002638:	89bb      	ldrh	r3, [r7, #12]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00f      	beq.n	8002664 <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 8002644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002646:	89bb      	ldrh	r3, [r7, #12]
 8002648:	085b      	lsrs	r3, r3, #1
 800264a:	b29b      	uxth	r3, r3
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4413      	add	r3, r2
 8002650:	881a      	ldrh	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002658:	4619      	mov	r1, r3
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	440b      	add	r3, r1
 8002660:	74da      	strb	r2, [r3, #19]
 8002662:	e010      	b.n	8002686 <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 8002664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002666:	89bb      	ldrh	r3, [r7, #12]
 8002668:	085b      	lsrs	r3, r3, #1
 800266a:	b29b      	uxth	r3, r3
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	b29a      	uxth	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800267c:	4619      	mov	r1, r3
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	440b      	add	r3, r1
 8002684:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800268c:	3301      	adds	r3, #1
 800268e:	b2da      	uxtb	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8002696:	89bb      	ldrh	r3, [r7, #12]
 8002698:	3301      	adds	r3, #1
 800269a:	81bb      	strh	r3, [r7, #12]
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	89ba      	ldrh	r2, [r7, #12]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d3c8      	bcc.n	8002638 <SendQuery+0x19c>
	    }
	    break;
 80026a6:	e04a      	b.n	800273e <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80026a8:	8c3b      	ldrh	r3, [r7, #32]
 80026aa:	0a1b      	lsrs	r3, r3, #8
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80026b4:	8c3b      	ldrh	r3, [r7, #32]
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 80026bc:	8c3b      	ldrh	r3, [r7, #32]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2207      	movs	r2, #7
 80026cc:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 80026d0:	2300      	movs	r3, #0
 80026d2:	817b      	strh	r3, [r7, #10]
 80026d4:	e02e      	b.n	8002734 <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 80026d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d8:	897b      	ldrh	r3, [r7, #10]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80026ea:	4619      	mov	r1, r3
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	440b      	add	r3, r1
 80026f2:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80026fa:	3301      	adds	r3, #1
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 8002704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002706:	897b      	ldrh	r3, [r7, #10]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	881a      	ldrh	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002714:	4619      	mov	r1, r3
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	440b      	add	r3, r1
 800271c:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002724:	3301      	adds	r3, #1
 8002726:	b2da      	uxtb	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800272e:	897b      	ldrh	r3, [r7, #10]
 8002730:	3301      	adds	r3, #1
 8002732:	817b      	strh	r3, [r7, #10]
 8002734:	8c3b      	ldrh	r3, [r7, #32]
 8002736:	897a      	ldrh	r2, [r7, #10]
 8002738:	429a      	cmp	r2, r3
 800273a:	d3cc      	bcc.n	80026d6 <SendQuery+0x23a>
	    }
	    break;
 800273c:	bf00      	nop
	}


	sendTxBuffer(modH);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fc02 	bl	8002f48 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 800274a:	2300      	movs	r3, #0
 800274c:	2200      	movs	r2, #0
 800274e:	2100      	movs	r1, #0
 8002750:	f010 fdfe 	bl	8013350 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
	modH->i8lastError = 0;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	749a      	strb	r2, [r3, #18]
	return 0;
 8002762:	2300      	movs	r3, #0


}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800276e:	b004      	add	sp, #16
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop

08002774 <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08c      	sub	sp, #48	@ 0x30
 8002778:	af02      	add	r7, sp, #8
 800277a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002786:	f107 010c 	add.w	r1, r7, #12
 800278a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800278e:	4618      	mov	r0, r3
 8002790:	f011 f80e 	bl	80137b0 <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     /*Wait period of silence between modbus frame */
	 if(modH->port->Init.BaudRate <= 19200)
 8002794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 800279e:	d80b      	bhi.n	80027b8 <StartTaskModbusMaster+0x44>
	 	osDelay((int)(35000/modH->port->Init.BaudRate) + 2);
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f648 02b8 	movw	r2, #35000	@ 0x88b8
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	3302      	adds	r3, #2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f00f fee5 	bl	8012580 <osDelay>
 80027b6:	e002      	b.n	80027be <StartTaskModbusMaster+0x4a>
	 else
	 	osDelay(3);
 80027b8:	2003      	movs	r0, #3
 80027ba:	f00f fee1 	bl	8012580 <osDelay>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	f107 030c 	add.w	r3, r7, #12
 80027c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80027ca:	f7ff fe67 	bl	800249c <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80027ce:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027d2:	2001      	movs	r0, #1
 80027d4:	f012 fcf6 	bl	80151c4 <ulTaskNotifyTake>
 80027d8:	6238      	str	r0, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	2200      	movs	r2, #0
 80027de:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d017      	beq.n	8002816 <StartTaskModbusMaster+0xa2>
      {
    	  modH->i8state = COM_IDLE;
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	2211      	movs	r2, #17
 80027f2:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80027fa:	3301      	adds	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8002804:	69b8      	ldr	r0, [r7, #24]
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002808:	7c9b      	ldrb	r3, [r3, #18]
 800280a:	4619      	mov	r1, r3
 800280c:	2300      	movs	r3, #0
 800280e:	2203      	movs	r2, #3
 8002810:	f012 fd24 	bl	801525c <xTaskGenericNotify>
    	  continue;
 8002814:	e096      	b.n	8002944 <StartTaskModbusMaster+0x1d0>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 8002816:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002818:	f000 f98c 	bl	8002b34 <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 800281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281e:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002822:	2b05      	cmp	r3, #5
 8002824:	d817      	bhi.n	8002856 <StartTaskModbusMaster+0xe2>

		  modH->i8state = COM_IDLE;
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	2200      	movs	r2, #0
 800282a:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	220f      	movs	r2, #15
 8002832:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800283a:	3301      	adds	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8002844:	69b8      	ldr	r0, [r7, #24]
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	7c9b      	ldrb	r3, [r3, #18]
 800284a:	4619      	mov	r1, r3
 800284c:	2300      	movs	r3, #0
 800284e:	2203      	movs	r2, #3
 8002850:	f012 fd04 	bl	801525c <xTaskGenericNotify>
		  continue;
 8002854:	e076      	b.n	8002944 <StartTaskModbusMaster+0x1d0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8002856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002858:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 800285c:	2300      	movs	r3, #0
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	2300      	movs	r3, #0
 8002862:	2200      	movs	r2, #0
 8002864:	2103      	movs	r1, #3
 8002866:	f012 ff9d 	bl	80157a4 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 800286a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800286c:	f000 f8f2 	bl	8002a54 <validateAnswer>
 8002870:	4603      	mov	r3, r0
 8002872:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 8002874:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00f      	beq.n	800289c <StartTaskModbusMaster+0x128>
	  {
		 modH->i8state = COM_IDLE;
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	2200      	movs	r2, #0
 8002880:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
         modH->i8lastError = u8exception;
 8002884:	7ffa      	ldrb	r2, [r7, #31]
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800288a:	69b8      	ldr	r0, [r7, #24]
 800288c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288e:	7c9b      	ldrb	r3, [r3, #18]
 8002890:	4619      	mov	r1, r3
 8002892:	2300      	movs	r3, #0
 8002894:	2203      	movs	r2, #3
 8002896:	f012 fce1 	bl	801525c <xTaskGenericNotify>
	     continue;
 800289a:	e053      	b.n	8002944 <StartTaskModbusMaster+0x1d0>
	  }

	  modH->i8lastError = u8exception;
 800289c:	7ffa      	ldrb	r2, [r7, #31]
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80028a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028ac:	4618      	mov	r0, r3
 80028ae:	f011 f861 	bl	8013974 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	7d1b      	ldrb	r3, [r3, #20]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	2b0f      	cmp	r3, #15
 80028ba:	d82b      	bhi.n	8002914 <StartTaskModbusMaster+0x1a0>
 80028bc:	a201      	add	r2, pc, #4	@ (adr r2, 80028c4 <StartTaskModbusMaster+0x150>)
 80028be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c2:	bf00      	nop
 80028c4:	08002905 	.word	0x08002905
 80028c8:	08002905 	.word	0x08002905
 80028cc:	0800290d 	.word	0x0800290d
 80028d0:	0800290d 	.word	0x0800290d
 80028d4:	08002915 	.word	0x08002915
 80028d8:	08002915 	.word	0x08002915
 80028dc:	08002915 	.word	0x08002915
 80028e0:	08002915 	.word	0x08002915
 80028e4:	08002915 	.word	0x08002915
 80028e8:	08002915 	.word	0x08002915
 80028ec:	08002915 	.word	0x08002915
 80028f0:	08002915 	.word	0x08002915
 80028f4:	08002915 	.word	0x08002915
 80028f8:	08002915 	.word	0x08002915
 80028fc:	08002915 	.word	0x08002915
 8002900:	08002915 	.word	0x08002915
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 8002904:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002906:	f000 f81f 	bl	8002948 <get_FC1>
	      break;
 800290a:	e004      	b.n	8002916 <StartTaskModbusMaster+0x1a2>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 800290c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800290e:	f000 f872 	bl	80029f6 <get_FC3>
	      break;
 8002912:	e000      	b.n	8002916 <StartTaskModbusMaster+0x1a2>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8002914:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	2200      	movs	r2, #0
 800291a:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7

	  if (modH->i8lastError ==0) // no error, we use OP_OK_QUERY, since we need to use a different value than 0 to detect the timeout
 800291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002920:	7c9b      	ldrb	r3, [r3, #18]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10d      	bne.n	8002942 <StartTaskModbusMaster+0x1ce>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 800292c:	2300      	movs	r3, #0
 800292e:	2200      	movs	r2, #0
 8002930:	2100      	movs	r1, #0
 8002932:	f010 fd0d 	bl	8013350 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, OP_OK_QUERY, eSetValueWithOverwrite);
 8002936:	69b8      	ldr	r0, [r7, #24]
 8002938:	2300      	movs	r3, #0
 800293a:	2203      	movs	r2, #3
 800293c:	2114      	movs	r1, #20
 800293e:	f012 fc8d 	bl	801525c <xTaskGenericNotify>
	  }


	  continue;
 8002942:	bf00      	nop
  {
 8002944:	e71c      	b.n	8002780 <StartTaskModbusMaster+0xc>
 8002946:	bf00      	nop

08002948 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8002950:	2303      	movs	r3, #3
 8002952:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8002954:	2300      	movs	r3, #0
 8002956:	73fb      	strb	r3, [r7, #15]
 8002958:	e043      	b.n	80029e2 <get_FC1+0x9a>

        if(i%2)
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d01c      	beq.n	80029a0 <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 8002966:	7bfa      	ldrb	r2, [r7, #15]
 8002968:	7bbb      	ldrb	r3, [r7, #14]
 800296a:	4413      	add	r3, r2
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	4413      	add	r3, r2
 8002970:	7cd8      	ldrb	r0, [r3, #19]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	b2db      	uxtb	r3, r3
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4413      	add	r3, r2
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	b2d9      	uxtb	r1, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	085b      	lsrs	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	18d4      	adds	r4, r2, r3
 8002996:	f000 fa5f 	bl	8002e58 <word>
 800299a:	4603      	mov	r3, r0
 800299c:	8023      	strh	r3, [r4, #0]
 800299e:	e01d      	b.n	80029dc <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	085b      	lsrs	r3, r3, #1
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	0a1b      	lsrs	r3, r3, #8
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	b2d8      	uxtb	r0, r3
 80029b8:	7bfa      	ldrb	r2, [r7, #15]
 80029ba:	7bbb      	ldrb	r3, [r7, #14]
 80029bc:	4413      	add	r3, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	7cd9      	ldrb	r1, [r3, #19]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	085b      	lsrs	r3, r3, #1
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	18d4      	adds	r4, r2, r3
 80029d4:	f000 fa40 	bl	8002e58 <word>
 80029d8:	4603      	mov	r3, r0
 80029da:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	3301      	adds	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	7d5b      	ldrb	r3, [r3, #21]
 80029e6:	7bfa      	ldrb	r2, [r7, #15]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d3b6      	bcc.n	800295a <get_FC1+0x12>
        }

     }
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd90      	pop	{r4, r7, pc}

080029f6 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 80029f6:	b590      	push	{r4, r7, lr}
 80029f8:	b085      	sub	sp, #20
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 80029fe:	2303      	movs	r3, #3
 8002a00:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8002a02:	2300      	movs	r3, #0
 8002a04:	73bb      	strb	r3, [r7, #14]
 8002a06:	e018      	b.n	8002a3a <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	7cd8      	ldrb	r0, [r3, #19]
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	3301      	adds	r3, #1
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	4413      	add	r3, r2
 8002a18:	7cd9      	ldrb	r1, [r3, #19]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002a20:	7bbb      	ldrb	r3, [r7, #14]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	18d4      	adds	r4, r2, r3
 8002a26:	f000 fa17 	bl	8002e58 <word>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	3302      	adds	r3, #2
 8002a32:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8002a34:	7bbb      	ldrb	r3, [r7, #14]
 8002a36:	3301      	adds	r3, #1
 8002a38:	73bb      	strb	r3, [r7, #14]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	7d5b      	ldrb	r3, [r3, #21]
 8002a3e:	085b      	lsrs	r3, r3, #1
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	7bba      	ldrb	r2, [r7, #14]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d3df      	bcc.n	8002a08 <get_FC3+0x12>
    }
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd90      	pop	{r4, r7, pc}
	...

08002a54 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002a62:	3b02      	subs	r3, #2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	4413      	add	r3, r2
 8002a68:	7cdb      	ldrb	r3, [r3, #19]
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8002a6a:	b21b      	sxth	r3, r3
 8002a6c:	021b      	lsls	r3, r3, #8
 8002a6e:	b21a      	sxth	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002a76:	3b01      	subs	r3, #1
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	440b      	add	r3, r1
 8002a7c:	7cdb      	ldrb	r3, [r3, #19]
 8002a7e:	b21b      	sxth	r3, r3
 8002a80:	4313      	orrs	r3, r2
 8002a82:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 8002a84:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f103 0213 	add.w	r2, r3, #19
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002a92:	3b02      	subs	r3, #2
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	4619      	mov	r1, r3
 8002a98:	4610      	mov	r0, r2
 8002a9a:	f000 f9f0 	bl	8002e7e <calcCRC>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	89bb      	ldrh	r3, [r7, #12]
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d009      	beq.n	8002abc <validateAnswer+0x68>
    {
    	modH->u16errCnt ++;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002aae:	3301      	adds	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return ERR_BAD_CRC;
 8002ab8:	230d      	movs	r3, #13
 8002aba:	e034      	b.n	8002b26 <validateAnswer+0xd2>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	7d1b      	ldrb	r3, [r3, #20]
 8002ac0:	b25b      	sxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	da09      	bge.n	8002ada <validateAnswer+0x86>
    {
    	modH->u16errCnt ++;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002acc:	3301      	adds	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return ERR_EXCEPTION;
 8002ad6:	230e      	movs	r3, #14
 8002ad8:	e025      	b.n	8002b26 <validateAnswer+0xd2>
    }

    // check fct code
    bool isSupported = false;
 8002ada:	2300      	movs	r3, #0
 8002adc:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	73bb      	strb	r3, [r7, #14]
 8002ae2:	e00c      	b.n	8002afe <validateAnswer+0xaa>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8002ae4:	7bbb      	ldrb	r3, [r7, #14]
 8002ae6:	4a12      	ldr	r2, [pc, #72]	@ (8002b30 <validateAnswer+0xdc>)
 8002ae8:	5cd2      	ldrb	r2, [r2, r3]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	7d1b      	ldrb	r3, [r3, #20]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d102      	bne.n	8002af8 <validateAnswer+0xa4>
        {
            isSupported = 1;
 8002af2:	2301      	movs	r3, #1
 8002af4:	73fb      	strb	r3, [r7, #15]
            break;
 8002af6:	e005      	b.n	8002b04 <validateAnswer+0xb0>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8002af8:	7bbb      	ldrb	r3, [r7, #14]
 8002afa:	3301      	adds	r3, #1
 8002afc:	73bb      	strb	r3, [r7, #14]
 8002afe:	7bbb      	ldrb	r3, [r7, #14]
 8002b00:	2b07      	cmp	r3, #7
 8002b02:	d9ef      	bls.n	8002ae4 <validateAnswer+0x90>
        }
    }
    if (!isSupported)
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	f083 0301 	eor.w	r3, r3, #1
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d009      	beq.n	8002b24 <validateAnswer+0xd0>
    {
    	modH->u16errCnt ++;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002b16:	3301      	adds	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return EXC_FUNC_CODE;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <validateAnswer+0xd2>
    }

    return 0; // OK, no exception code thrown
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	08018a1c 	.word	0x08018a1c

08002b34 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d104      	bne.n	8002b50 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f008 fe6c 	bl	800b828 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <getRxBuffer+0x36>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	33c0      	adds	r3, #192	@ 0xc0
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff f981 	bl	8001e66 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 8002b64:	230c      	movs	r3, #12
 8002b66:	81fb      	strh	r3, [r7, #14]
 8002b68:	e019      	b.n	8002b9e <getRxBuffer+0x6a>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3313      	adds	r3, #19
 8002b74:	4619      	mov	r1, r3
 8002b76:	4610      	mov	r0, r2
 8002b78:	f7ff f90f 	bl	8001d9a <RingGetAllBytes>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	461a      	mov	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
		modH->u16InCnt++;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
		i16result = modH->u8BufferSize;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002b9c:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d107      	bne.n	8002bb8 <getRxBuffer+0x84>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6858      	ldr	r0, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	33a6      	adds	r3, #166	@ 0xa6
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f008 fdec 	bl	800b790 <HAL_UART_Receive_IT>
	}

    return i16result;
 8002bb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002bd2:	3b02      	subs	r3, #2
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	7cdb      	ldrb	r3, [r3, #19]
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8002bda:	b21b      	sxth	r3, r3
 8002bdc:	021b      	lsls	r3, r3, #8
 8002bde:	b21a      	sxth	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002be6:	3b01      	subs	r3, #1
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	440b      	add	r3, r1
 8002bec:	7cdb      	ldrb	r3, [r3, #19]
 8002bee:	b21b      	sxth	r3, r3
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8002bf4:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f103 0213 	add.w	r2, r3, #19
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002c02:	3b02      	subs	r3, #2
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	4619      	mov	r1, r3
 8002c08:	4610      	mov	r0, r2
 8002c0a:	f000 f938 	bl	8002e7e <calcCRC>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	461a      	mov	r2, r3
 8002c12:	893b      	ldrh	r3, [r7, #8]
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d009      	beq.n	8002c2c <validateRequest+0x68>
	    {
	       		modH->u16errCnt ++;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002c1e:	3301      	adds	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	       		return ERR_BAD_CRC;
 8002c28:	230d      	movs	r3, #13
 8002c2a:	e10e      	b.n	8002e4a <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8002c30:	2300      	movs	r3, #0
 8002c32:	73bb      	strb	r3, [r7, #14]
 8002c34:	e00c      	b.n	8002c50 <validateRequest+0x8c>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8002c36:	7bbb      	ldrb	r3, [r7, #14]
 8002c38:	4a86      	ldr	r2, [pc, #536]	@ (8002e54 <validateRequest+0x290>)
 8002c3a:	5cd2      	ldrb	r2, [r2, r3]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7d1b      	ldrb	r3, [r3, #20]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d102      	bne.n	8002c4a <validateRequest+0x86>
	        {
	            isSupported = 1;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
	            break;
 8002c48:	e005      	b.n	8002c56 <validateRequest+0x92>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8002c4a:	7bbb      	ldrb	r3, [r7, #14]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	73bb      	strb	r3, [r7, #14]
 8002c50:	7bbb      	ldrb	r3, [r7, #14]
 8002c52:	2b07      	cmp	r3, #7
 8002c54:	d9ef      	bls.n	8002c36 <validateRequest+0x72>
	        }
	    }
	    if (!isSupported)
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	f083 0301 	eor.w	r3, r3, #1
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d009      	beq.n	8002c76 <validateRequest+0xb2>
	    {
	    	modH->u16errCnt ++;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002c68:	3301      	adds	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	        return EXC_FUNC_CODE;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e0e9      	b.n	8002e4a <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	7d1b      	ldrb	r3, [r3, #20]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	2b0f      	cmp	r3, #15
 8002c86:	f200 80df 	bhi.w	8002e48 <validateRequest+0x284>
 8002c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c90 <validateRequest+0xcc>)
 8002c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c90:	08002cd1 	.word	0x08002cd1
 8002c94:	08002cd1 	.word	0x08002cd1
 8002c98:	08002de9 	.word	0x08002de9
 8002c9c:	08002de9 	.word	0x08002de9
 8002ca0:	08002d7d 	.word	0x08002d7d
 8002ca4:	08002dc5 	.word	0x08002dc5
 8002ca8:	08002e49 	.word	0x08002e49
 8002cac:	08002e49 	.word	0x08002e49
 8002cb0:	08002e49 	.word	0x08002e49
 8002cb4:	08002e49 	.word	0x08002e49
 8002cb8:	08002e49 	.word	0x08002e49
 8002cbc:	08002e49 	.word	0x08002e49
 8002cc0:	08002e49 	.word	0x08002e49
 8002cc4:	08002e49 	.word	0x08002e49
 8002cc8:	08002cd1 	.word	0x08002cd1
 8002ccc:	08002de9 	.word	0x08002de9
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	7d5a      	ldrb	r2, [r3, #21]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7d9b      	ldrb	r3, [r3, #22]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	f000 f8bc 	bl	8002e58 <word>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	091b      	lsrs	r3, r3, #4
 8002ce4:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7dda      	ldrb	r2, [r3, #23]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	7e1b      	ldrb	r3, [r3, #24]
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	f000 f8b1 	bl	8002e58 <word>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	7dda      	ldrb	r2, [r3, #23]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	7e1b      	ldrb	r3, [r3, #24]
 8002d04:	4619      	mov	r1, r3
 8002d06:	4610      	mov	r0, r2
 8002d08:	f000 f8a6 	bl	8002e58 <word>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <validateRequest+0x15a>
 8002d18:	897b      	ldrh	r3, [r7, #10]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 8002d1e:	89ba      	ldrh	r2, [r7, #12]
 8002d20:	897b      	ldrh	r3, [r7, #10]
 8002d22:	4413      	add	r3, r2
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	@ 0xa4
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	dd01      	ble.n	8002d32 <validateRequest+0x16e>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e08b      	b.n	8002e4a <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	7dda      	ldrb	r2, [r3, #23]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	7e1b      	ldrb	r3, [r3, #24]
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	f000 f88b 	bl	8002e58 <word>
 8002d42:	4603      	mov	r3, r0
 8002d44:	08db      	lsrs	r3, r3, #3
 8002d46:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	7dda      	ldrb	r2, [r3, #23]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	7e1b      	ldrb	r3, [r3, #24]
 8002d50:	4619      	mov	r1, r3
 8002d52:	4610      	mov	r0, r2
 8002d54:	f000 f880 	bl	8002e58 <word>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <validateRequest+0x1a6>
 8002d64:	897b      	ldrh	r3, [r7, #10]
 8002d66:	3301      	adds	r3, #1
 8002d68:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 8002d6a:	897b      	ldrh	r3, [r7, #10]
 8002d6c:	3305      	adds	r3, #5
 8002d6e:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8002d70:	897b      	ldrh	r3, [r7, #10]
 8002d72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d76:	d960      	bls.n	8002e3a <validateRequest+0x276>
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e066      	b.n	8002e4a <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	7d5a      	ldrb	r2, [r3, #21]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	7d9b      	ldrb	r3, [r3, #22]
 8002d84:	4619      	mov	r1, r3
 8002d86:	4610      	mov	r0, r2
 8002d88:	f000 f866 	bl	8002e58 <word>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	7d5a      	ldrb	r2, [r3, #21]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	7d9b      	ldrb	r3, [r3, #22]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	f000 f85b 	bl	8002e58 <word>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <validateRequest+0x1f0>
 8002dae:	89bb      	ldrh	r3, [r7, #12]
 8002db0:	3301      	adds	r3, #1
 8002db2:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs >= modH->u16regsize) return EXC_ADDR_RANGE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8002dba:	89ba      	ldrh	r2, [r7, #12]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d33e      	bcc.n	8002e3e <validateRequest+0x27a>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e042      	b.n	8002e4a <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	7d5a      	ldrb	r2, [r3, #21]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	7d9b      	ldrb	r3, [r3, #22]
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	f000 f842 	bl	8002e58 <word>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs >= modH-> u16regsize) return EXC_ADDR_RANGE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8002dde:	89ba      	ldrh	r2, [r7, #12]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d32e      	bcc.n	8002e42 <validateRequest+0x27e>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e030      	b.n	8002e4a <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	7d5a      	ldrb	r2, [r3, #21]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	7d9b      	ldrb	r3, [r3, #22]
 8002df0:	4619      	mov	r1, r3
 8002df2:	4610      	mov	r0, r2
 8002df4:	f000 f830 	bl	8002e58 <word>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	7dda      	ldrb	r2, [r3, #23]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	7e1b      	ldrb	r3, [r3, #24]
 8002e04:	4619      	mov	r1, r3
 8002e06:	4610      	mov	r0, r2
 8002e08:	f000 f826 	bl	8002e58 <word>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8002e10:	89ba      	ldrh	r2, [r7, #12]
 8002e12:	897b      	ldrh	r3, [r7, #10]
 8002e14:	4413      	add	r3, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	@ 0xa4
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	dd01      	ble.n	8002e24 <validateRequest+0x260>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e012      	b.n	8002e4a <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8002e24:	897b      	ldrh	r3, [r7, #10]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3305      	adds	r3, #5
 8002e2c:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8002e2e:	897b      	ldrh	r3, [r7, #10]
 8002e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e34:	d907      	bls.n	8002e46 <validateRequest+0x282>
 8002e36:	2303      	movs	r3, #3
 8002e38:	e007      	b.n	8002e4a <validateRequest+0x286>
	        break;
 8002e3a:	bf00      	nop
 8002e3c:	e004      	b.n	8002e48 <validateRequest+0x284>
	        break;
 8002e3e:	bf00      	nop
 8002e40:	e002      	b.n	8002e48 <validateRequest+0x284>
	        break;
 8002e42:	bf00      	nop
 8002e44:	e000      	b.n	8002e48 <validateRequest+0x284>
	        break;
 8002e46:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8002e48:	2300      	movs	r3, #0

}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	08018a1c 	.word	0x08018a1c

08002e58 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	460a      	mov	r2, r1
 8002e62:	71fb      	strb	r3, [r7, #7]
 8002e64:	4613      	mov	r3, r2
 8002e66:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8002e68:	79bb      	ldrb	r3, [r7, #6]
 8002e6a:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8002e70:	89bb      	ldrh	r3, [r7, #12]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b087      	sub	sp, #28
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	460b      	mov	r3, r1
 8002e88:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8002e8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e8e:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8002e90:	2300      	movs	r3, #0
 8002e92:	74fb      	strb	r3, [r7, #19]
 8002e94:	e022      	b.n	8002edc <calcCRC+0x5e>
    {
        temp = temp ^ Buffer[i];
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	4053      	eors	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	74bb      	strb	r3, [r7, #18]
 8002eaa:	e011      	b.n	8002ed0 <calcCRC+0x52>
        {
            flag = temp & 0x0001;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	085b      	lsrs	r3, r3, #1
 8002eb8:	617b      	str	r3, [r7, #20]
            if (flag)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d004      	beq.n	8002eca <calcCRC+0x4c>
                temp ^= 0xA001;
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	f24a 0301 	movw	r3, #40961	@ 0xa001
 8002ec6:	4053      	eors	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8002eca:	7cbb      	ldrb	r3, [r7, #18]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	74bb      	strb	r3, [r7, #18]
 8002ed0:	7cbb      	ldrb	r3, [r7, #18]
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d9ea      	bls.n	8002eac <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8002ed6:	7cfb      	ldrb	r3, [r7, #19]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	74fb      	strb	r3, [r7, #19]
 8002edc:	7cfa      	ldrb	r2, [r7, #19]
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d3d8      	bcc.n	8002e96 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	0a1b      	lsrs	r3, r3, #8
 8002ee8:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	021b      	lsls	r3, r3, #8
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	b29b      	uxth	r3, r3

}
 8002efe:	4618      	mov	r0, r3
 8002f00:	371c      	adds	r7, #28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b085      	sub	sp, #20
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	4603      	mov	r3, r0
 8002f12:	6039      	str	r1, [r7, #0]
 8002f14:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	7d1b      	ldrb	r3, [r3, #20]
 8002f1a:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	7a1a      	ldrb	r2, [r3, #8]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
 8002f26:	3b80      	subs	r3, #128	@ 0x80
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	79fa      	ldrb	r2, [r7, #7]
 8002f32:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2203      	movs	r2, #3
 8002f38:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
}
 8002f3c:	bf00      	nop
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8002f48:	b590      	push	{r4, r7, lr}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	6078      	str	r0, [r7, #4]
    // when in slaveType and u8AddressMode == ADDRESS_BROADCAST, do not send anything
    if (modH->uModbusType == MB_SLAVE && modH->u8AddressMode == ADDRESS_BROADCAST)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d111      	bne.n	8002f7c <sendTxBuffer+0x34>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10c      	bne.n	8002f7c <sendTxBuffer+0x34>
    {
        modH->u8BufferSize = 0;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
        // increase message counter
        modH->u16OutCnt++;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8002f70:	3301      	adds	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
        return;
 8002f7a:	e086      	b.n	800308a <sendTxBuffer+0x142>
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f103 0213 	add.w	r2, r3, #19
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	f7ff ff77 	bl	8002e7e <calcCRC>
 8002f90:	4603      	mov	r3, r0
 8002f92:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8002f94:	89fb      	ldrh	r3, [r7, #14]
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	440b      	add	r3, r1
 8002fa8:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	89fb      	ldrh	r3, [r7, #14]
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	440b      	add	r3, r1
 8002fca:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00c      	beq.n	8002ffe <sendTxBuffer+0xb6>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f009 f8c5 	bl	800c178 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68d8      	ldr	r0, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	8a1b      	ldrh	r3, [r3, #16]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f002 f889 	bl	8005110 <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6858      	ldr	r0, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f103 0113 	add.w	r1, r3, #19
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800300e:	461a      	mov	r2, r3
 8003010:	f008 fb2a 	bl	800b668 <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8003014:	21fa      	movs	r1, #250	@ 0xfa
 8003016:	2001      	movs	r0, #1
 8003018:	f012 f8d4 	bl	80151c4 <ulTaskNotifyTake>
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx) || defined(STM32F7) || defined(STM32WB) || defined(STM32G070xx) || defined(STM32F0) || defined(STM32G431xx) || defined(STM32H5)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 800301c:	bf00      	nop
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f7      	beq.n	800301e <sendTxBuffer+0xd6>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00c      	beq.n	8003050 <sendTxBuffer+0x108>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68d8      	ldr	r0, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8a1b      	ldrh	r3, [r3, #16]
 800303e:	2200      	movs	r2, #0
 8003040:	4619      	mov	r1, r3
 8003042:	f002 f865 	bl	8005110 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4618      	mov	r0, r3
 800304c:	f009 f8e8 	bl	800c220 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b04      	cmp	r3, #4
 8003056:	d10c      	bne.n	8003072 <sendTxBuffer+0x12a>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 40b8 	ldr.w	r4, [r3, #184]	@ 0xb8
 800305e:	f011 faff 	bl	8014660 <xTaskGetTickCount>
 8003062:	4602      	mov	r2, r0
 8003064:	2300      	movs	r3, #0
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	2300      	movs	r3, #0
 800306a:	2102      	movs	r1, #2
 800306c:	4620      	mov	r0, r4
 800306e:	f012 fb99 	bl	80157a4 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
     // increase message counter
     modH->u16OutCnt++;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8003080:	3301      	adds	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e


}
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	bd90      	pop	{r4, r7, pc}

08003090 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	7d5a      	ldrb	r2, [r3, #21]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	7d9b      	ldrb	r3, [r3, #22]
 80030a0:	4619      	mov	r1, r3
 80030a2:	4610      	mov	r0, r2
 80030a4:	f7ff fed8 	bl	8002e58 <word>
 80030a8:	4603      	mov	r3, r0
 80030aa:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	7dda      	ldrb	r2, [r3, #23]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	7e1b      	ldrb	r3, [r3, #24]
 80030b4:	4619      	mov	r1, r3
 80030b6:	4610      	mov	r0, r2
 80030b8:	f7ff fece 	bl	8002e58 <word>
 80030bc:	4603      	mov	r3, r0
 80030be:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 80030c0:	8a3b      	ldrh	r3, [r7, #16]
 80030c2:	08db      	lsrs	r3, r3, #3
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 80030c8:	8a3b      	ldrh	r3, [r7, #16]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <process_FC1+0x4a>
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
 80030d6:	3301      	adds	r3, #1
 80030d8:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	7dfa      	ldrb	r2, [r7, #23]
 80030de:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2203      	movs	r2, #3
 80030e4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80030ee:	461a      	mov	r2, r3
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
 80030f2:	4413      	add	r3, r2
 80030f4:	3b01      	subs	r3, #1
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	2200      	movs	r2, #0
 80030fc:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8003102:	2300      	movs	r3, #0
 8003104:	82bb      	strh	r3, [r7, #20]
 8003106:	e058      	b.n	80031ba <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8003108:	8a7a      	ldrh	r2, [r7, #18]
 800310a:	8abb      	ldrh	r3, [r7, #20]
 800310c:	4413      	add	r3, r2
 800310e:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 8003110:	89bb      	ldrh	r3, [r7, #12]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8003116:	89bb      	ldrh	r3, [r7, #12]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	727b      	strb	r3, [r7, #9]

        bitWrite(
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003126:	897b      	ldrh	r3, [r7, #10]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4413      	add	r3, r2
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	7a7b      	ldrb	r3, [r7, #9]
 8003132:	fa42 f303 	asr.w	r3, r2, r3
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d014      	beq.n	8003168 <process_FC1+0xd8>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003144:	461a      	mov	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	7cda      	ldrb	r2, [r3, #19]
 800314c:	7dbb      	ldrb	r3, [r7, #22]
 800314e:	2101      	movs	r1, #1
 8003150:	fa01 f303 	lsl.w	r3, r1, r3
 8003154:	b2db      	uxtb	r3, r3
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	f891 1093 	ldrb.w	r1, [r1, #147]	@ 0x93
 800315c:	4313      	orrs	r3, r2
 800315e:	b2da      	uxtb	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	440b      	add	r3, r1
 8003164:	74da      	strb	r2, [r3, #19]
 8003166:	e015      	b.n	8003194 <process_FC1+0x104>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800316e:	461a      	mov	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4413      	add	r3, r2
 8003174:	7cda      	ldrb	r2, [r3, #19]
 8003176:	7dbb      	ldrb	r3, [r7, #22]
 8003178:	2101      	movs	r1, #1
 800317a:	fa01 f303 	lsl.w	r3, r1, r3
 800317e:	b2db      	uxtb	r3, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	f891 1093 	ldrb.w	r1, [r1, #147]	@ 0x93
 800318a:	4013      	ands	r3, r2
 800318c:	b2da      	uxtb	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	440b      	add	r3, r1
 8003192:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8003194:	7dbb      	ldrb	r3, [r7, #22]
 8003196:	3301      	adds	r3, #1
 8003198:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800319a:	7dbb      	ldrb	r3, [r7, #22]
 800319c:	2b07      	cmp	r3, #7
 800319e:	d909      	bls.n	80031b4 <process_FC1+0x124>
        {
            u8bitsno = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80031aa:	3301      	adds	r3, #1
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80031b4:	8abb      	ldrh	r3, [r7, #20]
 80031b6:	3301      	adds	r3, #1
 80031b8:	82bb      	strh	r3, [r7, #20]
 80031ba:	8aba      	ldrh	r2, [r7, #20]
 80031bc:	8a3b      	ldrh	r3, [r7, #16]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d3a2      	bcc.n	8003108 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 80031c2:	8a3b      	ldrh	r3, [r7, #16]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <process_FC1+0x14e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80031d4:	3301      	adds	r3, #1
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80031e4:	3302      	adds	r3, #2
 80031e6:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff fead 	bl	8002f48 <sendTxBuffer>
    return u8CopyBufferSize;
 80031ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	7d5a      	ldrb	r2, [r3, #21]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	7d9b      	ldrb	r3, [r3, #22]
 800320a:	4619      	mov	r1, r3
 800320c:	4610      	mov	r0, r2
 800320e:	f7ff fe23 	bl	8002e58 <word>
 8003212:	4603      	mov	r3, r0
 8003214:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	7dda      	ldrb	r2, [r3, #23]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	7e1b      	ldrb	r3, [r3, #24]
 800321e:	4619      	mov	r1, r3
 8003220:	4610      	mov	r0, r2
 8003222:	f7ff fe19 	bl	8002e58 <word>
 8003226:	4603      	mov	r3, r0
 8003228:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 800322a:	7afb      	ldrb	r3, [r7, #11]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	b2da      	uxtb	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2203      	movs	r2, #3
 8003238:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800323c:	89bb      	ldrh	r3, [r7, #12]
 800323e:	81fb      	strh	r3, [r7, #14]
 8003240:	e032      	b.n	80032a8 <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003248:	89fb      	ldrh	r3, [r7, #14]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4413      	add	r3, r2
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	0a1b      	lsrs	r3, r3, #8
 8003252:	b29a      	uxth	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800325a:	4619      	mov	r1, r3
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	440b      	add	r3, r1
 8003262:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800326a:	3301      	adds	r3, #1
 800326c:	b2da      	uxtb	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800327a:	89fb      	ldrh	r3, [r7, #14]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4413      	add	r3, r2
 8003280:	881a      	ldrh	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003288:	4619      	mov	r1, r3
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	440b      	add	r3, r1
 8003290:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003298:	3301      	adds	r3, #1
 800329a:	b2da      	uxtb	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 80032a2:	89fb      	ldrh	r3, [r7, #14]
 80032a4:	3301      	adds	r3, #1
 80032a6:	81fb      	strh	r3, [r7, #14]
 80032a8:	89fa      	ldrh	r2, [r7, #14]
 80032aa:	89b9      	ldrh	r1, [r7, #12]
 80032ac:	7afb      	ldrb	r3, [r7, #11]
 80032ae:	440b      	add	r3, r1
 80032b0:	429a      	cmp	r2, r3
 80032b2:	dbc6      	blt.n	8003242 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80032ba:	3302      	adds	r3, #2
 80032bc:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff fe42 	bl	8002f48 <sendTxBuffer>

    return u8CopyBufferSize;
 80032c4:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	7d5a      	ldrb	r2, [r3, #21]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	7d9b      	ldrb	r3, [r3, #22]
 80032e0:	4619      	mov	r1, r3
 80032e2:	4610      	mov	r0, r2
 80032e4:	f7ff fdb8 	bl	8002e58 <word>
 80032e8:	4603      	mov	r3, r0
 80032ea:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 80032ec:	89fb      	ldrh	r3, [r7, #14]
 80032ee:	091b      	lsrs	r3, r3, #4
 80032f0:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 80032f2:	89fb      	ldrh	r3, [r7, #14]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	7ddb      	ldrb	r3, [r3, #23]
 8003300:	2bff      	cmp	r3, #255	@ 0xff
 8003302:	d115      	bne.n	8003330 <process_FC5+0x60>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800330a:	89bb      	ldrh	r3, [r7, #12]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4413      	add	r3, r2
 8003310:	8819      	ldrh	r1, [r3, #0]
 8003312:	7afb      	ldrb	r3, [r7, #11]
 8003314:	2201      	movs	r2, #1
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	b29a      	uxth	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 8003322:	89bb      	ldrh	r3, [r7, #12]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4403      	add	r3, r0
 8003328:	430a      	orrs	r2, r1
 800332a:	b292      	uxth	r2, r2
 800332c:	801a      	strh	r2, [r3, #0]
 800332e:	e016      	b.n	800335e <process_FC5+0x8e>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003336:	89bb      	ldrh	r3, [r7, #12]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4413      	add	r3, r2
 800333c:	8819      	ldrh	r1, [r3, #0]
 800333e:	7afb      	ldrb	r3, [r7, #11]
 8003340:	2201      	movs	r2, #1
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	b29b      	uxth	r3, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	b29a      	uxth	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 8003352:	89bb      	ldrh	r3, [r7, #12]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4403      	add	r3, r0
 8003358:	400a      	ands	r2, r1
 800335a:	b292      	uxth	r2, r2
 800335c:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2206      	movs	r2, #6
 8003362:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800336c:	3302      	adds	r3, #2
 800336e:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff fde9 	bl	8002f48 <sendTxBuffer>

    return u8CopyBufferSize;
 8003376:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	7d5a      	ldrb	r2, [r3, #21]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	7d9b      	ldrb	r3, [r3, #22]
 8003392:	4619      	mov	r1, r3
 8003394:	4610      	mov	r0, r2
 8003396:	f7ff fd5f 	bl	8002e58 <word>
 800339a:	4603      	mov	r3, r0
 800339c:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	7dda      	ldrb	r2, [r3, #23]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	7e1b      	ldrb	r3, [r3, #24]
 80033a6:	4619      	mov	r1, r3
 80033a8:	4610      	mov	r0, r2
 80033aa:	f7ff fd55 	bl	8002e58 <word>
 80033ae:	4603      	mov	r3, r0
 80033b0:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80033b8:	89fb      	ldrh	r3, [r7, #14]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	4413      	add	r3, r2
 80033be:	89ba      	ldrh	r2, [r7, #12]
 80033c0:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2206      	movs	r2, #6
 80033c6:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80033d0:	3302      	adds	r3, #2
 80033d2:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff fdb7 	bl	8002f48 <sendTxBuffer>

    return u8CopyBufferSize;
 80033da:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b086      	sub	sp, #24
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	7d5a      	ldrb	r2, [r3, #21]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	7d9b      	ldrb	r3, [r3, #22]
 80033f6:	4619      	mov	r1, r3
 80033f8:	4610      	mov	r0, r2
 80033fa:	f7ff fd2d 	bl	8002e58 <word>
 80033fe:	4603      	mov	r3, r0
 8003400:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	7dda      	ldrb	r2, [r3, #23]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	7e1b      	ldrb	r3, [r3, #24]
 800340a:	4619      	mov	r1, r3
 800340c:	4610      	mov	r0, r2
 800340e:	f7ff fd23 	bl	8002e58 <word>
 8003412:	4603      	mov	r3, r0
 8003414:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800341a:	2307      	movs	r3, #7
 800341c:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800341e:	2300      	movs	r3, #0
 8003420:	82bb      	strh	r3, [r7, #20]
 8003422:	e058      	b.n	80034d6 <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 8003424:	8a7a      	ldrh	r2, [r7, #18]
 8003426:	8abb      	ldrh	r3, [r7, #20]
 8003428:	4413      	add	r3, r2
 800342a:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 800342c:	89bb      	ldrh	r3, [r7, #12]
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8003432:	89bb      	ldrh	r3, [r7, #12]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 800343c:	7dfb      	ldrb	r3, [r7, #23]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	4413      	add	r3, r2
 8003442:	7cdb      	ldrb	r3, [r3, #19]
 8003444:	461a      	mov	r2, r3
 8003446:	7dbb      	ldrb	r3, [r7, #22]
 8003448:	fa42 f303 	asr.w	r3, r2, r3
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	bf14      	ite	ne
 8003454:	2301      	movne	r3, #1
 8003456:	2300      	moveq	r3, #0
 8003458:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 800345a:	7a3b      	ldrb	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d015      	beq.n	800348c <process_FC15+0xa6>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003466:	897b      	ldrh	r3, [r7, #10]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	4413      	add	r3, r2
 800346c:	8819      	ldrh	r1, [r3, #0]
 800346e:	7a7b      	ldrb	r3, [r7, #9]
 8003470:	2201      	movs	r2, #1
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	b29a      	uxth	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 800347e:	897b      	ldrh	r3, [r7, #10]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	4403      	add	r3, r0
 8003484:	430a      	orrs	r2, r1
 8003486:	b292      	uxth	r2, r2
 8003488:	801a      	strh	r2, [r3, #0]
 800348a:	e016      	b.n	80034ba <process_FC15+0xd4>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003492:	897b      	ldrh	r3, [r7, #10]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4413      	add	r3, r2
 8003498:	8819      	ldrh	r1, [r3, #0]
 800349a:	7a7b      	ldrb	r3, [r7, #9]
 800349c:	2201      	movs	r2, #1
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 80034ae:	897b      	ldrh	r3, [r7, #10]
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	4403      	add	r3, r0
 80034b4:	400a      	ands	r2, r1
 80034b6:	b292      	uxth	r2, r2
 80034b8:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 80034ba:	7dbb      	ldrb	r3, [r7, #22]
 80034bc:	3301      	adds	r3, #1
 80034be:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 80034c0:	7dbb      	ldrb	r3, [r7, #22]
 80034c2:	2b07      	cmp	r3, #7
 80034c4:	d904      	bls.n	80034d0 <process_FC15+0xea>
        {
            u8bitsno = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
 80034cc:	3301      	adds	r3, #1
 80034ce:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80034d0:	8abb      	ldrh	r3, [r7, #20]
 80034d2:	3301      	adds	r3, #1
 80034d4:	82bb      	strh	r3, [r7, #20]
 80034d6:	8aba      	ldrh	r2, [r7, #20]
 80034d8:	8a3b      	ldrh	r3, [r7, #16]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d3a2      	bcc.n	8003424 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2206      	movs	r2, #6
 80034e2:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80034ec:	3302      	adds	r3, #2
 80034ee:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7ff fd29 	bl	8002f48 <sendTxBuffer>
    return u8CopyBufferSize;
 80034f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b086      	sub	sp, #24
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	7d5b      	ldrb	r3, [r3, #21]
 800350e:	b21b      	sxth	r3, r3
 8003510:	021b      	lsls	r3, r3, #8
 8003512:	b21a      	sxth	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	7d9b      	ldrb	r3, [r3, #22]
 8003518:	b21b      	sxth	r3, r3
 800351a:	4313      	orrs	r3, r2
 800351c:	b21b      	sxth	r3, r3
 800351e:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	7ddb      	ldrb	r3, [r3, #23]
 8003524:	b21b      	sxth	r3, r3
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	b21a      	sxth	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	7e1b      	ldrb	r3, [r3, #24]
 800352e:	b21b      	sxth	r3, r3
 8003530:	4313      	orrs	r3, r2
 8003532:	b21b      	sxth	r3, r3
 8003534:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 800353c:	8a7b      	ldrh	r3, [r7, #18]
 800353e:	b2da      	uxtb	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2206      	movs	r2, #6
 8003548:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 800354c:	2300      	movs	r3, #0
 800354e:	82fb      	strh	r3, [r7, #22]
 8003550:	e01d      	b.n	800358e <process_FC16+0x8c>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8003552:	8afb      	ldrh	r3, [r7, #22]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	3307      	adds	r3, #7
        temp = word(
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800355e:	8afb      	ldrh	r3, [r7, #22]
 8003560:	3304      	adds	r3, #4
 8003562:	005b      	lsls	r3, r3, #1
        temp = word(
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	4413      	add	r3, r2
 8003568:	7cdb      	ldrb	r3, [r3, #19]
 800356a:	4619      	mov	r1, r3
 800356c:	f7ff fc74 	bl	8002e58 <word>
 8003570:	4603      	mov	r3, r0
 8003572:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800357a:	8ab9      	ldrh	r1, [r7, #20]
 800357c:	8afb      	ldrh	r3, [r7, #22]
 800357e:	440b      	add	r3, r1
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	4413      	add	r3, r2
 8003584:	89fa      	ldrh	r2, [r7, #14]
 8003586:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 8003588:	8afb      	ldrh	r3, [r7, #22]
 800358a:	3301      	adds	r3, #1
 800358c:	82fb      	strh	r3, [r7, #22]
 800358e:	8afa      	ldrh	r2, [r7, #22]
 8003590:	8a7b      	ldrh	r3, [r7, #18]
 8003592:	429a      	cmp	r2, r3
 8003594:	d3dd      	bcc.n	8003552 <process_FC16+0x50>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800359c:	3302      	adds	r3, #2
 800359e:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff fcd1 	bl	8002f48 <sendTxBuffer>

    return u8CopyBufferSize;
 80035a6:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <_ZN6SensorC1Ev>:
 * The Sensor base class provides an implementation of getVelocity(), and takes care of counting full
 * revolutions in a precise way, but if you wish you can additionally override these methods to provide more
 * optimal implementations for your hardware.
 * 
 */
class Sensor{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	4a12      	ldr	r2, [pc, #72]	@ (8003608 <_ZN6SensorC1Ev+0x54>)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a11      	ldr	r2, [pc, #68]	@ (800360c <_ZN6SensorC1Ev+0x58>)
 80035c6:	605a      	str	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	60da      	str	r2, [r3, #12]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	611a      	str	r2, [r3, #16]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	615a      	str	r2, [r3, #20]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	619a      	str	r2, [r3, #24]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	61da      	str	r2, [r3, #28]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	621a      	str	r2, [r3, #32]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	08018a64 	.word	0x08018a64
 800360c:	38d1b717 	.word	0x38d1b717

08003610 <_ZN21ModbusAbsoluteEncoderC1EP17TIM_HandleTypeDefh>:
#include <cstdio>
#include "retarget.h"
// Define static constant
const float ModbusAbsoluteEncoder::RADIANS_PER_COUNT = 2.0f * M_PI / ModbusAbsoluteEncoder::ENCODER_RESOLUTION;

ModbusAbsoluteEncoder::ModbusAbsoluteEncoder(TIM_HandleTypeDef *htim, uint8_t unit_id)
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	4613      	mov	r3, r2
 800361c:	71fb      	strb	r3, [r7, #7]
    last_position(0),
    full_rotations(0),
    zero_position(0),
    frequency_start_time(0),
    last_receive_count(0),
    encoder_initialized(false)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff ffc7 	bl	80035b4 <_ZN6SensorC1Ev>
 8003626:	4a26      	ldr	r2, [pc, #152]	@ (80036c0 <_ZN21ModbusAbsoluteEncoderC1EP17TIM_HandleTypeDefh+0xb0>)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	601a      	str	r2, [r3, #0]
  : unit_id(unit_id),
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	79fa      	ldrb	r2, [r7, #7]
 8003630:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
    encoder_initialized(false)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    comm_ok(false),
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
    modbus_state(IDLE),
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
    cached_angle(0.0f),
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    async_enabled(false),
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
    last_update_time(0),
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    encoder_receive_count(0),
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
    query_start_time(0),
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
    first_read(true),
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
    htim(htim),
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
    last_position(0),
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
    full_rotations(0),
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
    zero_position(0),
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
    frequency_start_time(0),
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
    last_receive_count(0),
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
    encoder_initialized(false)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
{
}
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	08018a2c 	.word	0x08018a2c

080036c4 <_ZN21ModbusAbsoluteEncoder4initEv>:

void ModbusAbsoluteEncoder::init() {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
    // Initialise timer stats
    //Initialize Modbus library
    ModbusInit(&ModbusH);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3324      	adds	r3, #36	@ 0x24
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fe fbe3 	bl	8001e9c <ModbusInit>
    //Start capturing traffic on serial Port
    ModbusStart(&ModbusH);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3324      	adds	r3, #36	@ 0x24
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fe fc86 	bl	8001fec <ModbusStart>
    frequency_start_time = HAL_GetTick();
 80036e0:	f000 fc52 	bl	8003f88 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
    last_receive_count = 0;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
    encoder_initialized = true;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <_ZN21ModbusAbsoluteEncoder15sendModbusQueryEv>:

bool ModbusAbsoluteEncoder::sendModbusQuery() {
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af02      	add	r7, sp, #8
 800370a:	6078      	str	r0, [r7, #4]
    modbus_t telegram;
    constructQuery(&telegram);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	332c      	adds	r3, #44	@ 0x2c
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f107 0208 	add.w	r2, r7, #8
 8003718:	4611      	mov	r1, r2
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	4798      	blx	r3
    // 发送Modbus查询（非阻塞）
    ModbusDATA[0] = ~ModbusDATA[0];
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 8003724:	43db      	mvns	r3, r3
 8003726:	b29a      	uxth	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f8a3 216c 	strh.w	r2, [r3, #364]	@ 0x16c
    ModbusQuery(&ModbusH, telegram);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	f107 0308 	add.w	r3, r7, #8
 800373c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800373e:	f7fe fe3d 	bl	80023bc <ModbusQuery>

    modbus_state = QUERY_SENT;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
    query_start_time = HAL_GetTick();
 800374a:	f000 fc1d 	bl	8003f88 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
    return true;
 8003756:	2301      	movs	r3, #1
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv>:

bool ModbusAbsoluteEncoder::checkModbusResponse() {
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
    // 检查Modbus响应是否准备好
    // 这里需要根据具体的Modbus库实现来检查
    // 假设ModbusQueryV2是阻塞版本，我们需要非阻塞检查
    
    // 简化实现：检查Modbus状态
    uint32_t u32NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // block until query finishes or timeouts
 8003768:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800376c:	2001      	movs	r0, #1
 800376e:	f011 fd29 	bl	80151c4 <ulTaskNotifyTake>
 8003772:	60f8      	str	r0, [r7, #12]
    if(u32NotificationValue != OP_OK_QUERY)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b14      	cmp	r3, #20
 8003778:	d001      	beq.n	800377e <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv+0x1e>
    {
        return false;
 800377a:	2300      	movs	r3, #0
 800377c:	e01e      	b.n	80037bc <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv+0x5c>
    } else {
        // 成功接收到响应
        encoder_receive_count++;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
        uint32_t current_position = ((uint32_t)ModbusDATA[0] << 16) | ModbusDATA[1];
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 8003792:	041b      	lsls	r3, r3, #16
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	f8b2 216e 	ldrh.w	r2, [r2, #366]	@ 0x16e
 800379a:	4313      	orrs	r3, r2
 800379c:	60bb      	str	r3, [r7, #8]
        updateAngleFromPosition(current_position);
 800379e:	68b9      	ldr	r1, [r7, #8]
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f945 	bl	8003a30 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm>
        comm_ok = true;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
        last_update_time = HAL_GetTick();
 80037ae:	f000 fbeb 	bl	8003f88 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
        // 通讯完成，检查结果
        return true;
 80037ba:	2301      	movs	r3, #1
    }
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm>:

void ModbusAbsoluteEncoder::startAsyncReading(uint32_t update_frequency_hz) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
    if(!htim) {
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d104      	bne.n	80037e2 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x1e>
        async_enabled = false;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
        return;
 80037e0:	e058      	b.n	8003894 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0xd0>
    }

    // Configure TIM ARR based on requested frequency (assuming clock already set as in Encoder485)
    uint32_t arr_value = (100000 / update_frequency_hz) - 1;
 80037e2:	4a2e      	ldr	r2, [pc, #184]	@ (800389c <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0xd8>)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ea:	3b01      	subs	r3, #1
 80037ec:	60fb      	str	r3, [r7, #12]
    if(arr_value > 65535) arr_value = 65535;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037f4:	d302      	bcc.n	80037fc <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x38>
 80037f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037fa:	60fb      	str	r3, [r7, #12]
    if(arr_value < 10) arr_value = 10;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b09      	cmp	r3, #9
 8003800:	d801      	bhi.n	8003806 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x42>
 8003802:	230a      	movs	r3, #10
 8003804:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_DISABLE(htim);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6a1a      	ldr	r2, [r3, #32]
 8003810:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003814:	4013      	ands	r3, r2
 8003816:	2b00      	cmp	r3, #0
 8003818:	bf0c      	ite	eq
 800381a:	2301      	moveq	r3, #1
 800381c:	2300      	movne	r3, #0
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01a      	beq.n	800385a <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x96>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6a1a      	ldr	r2, [r3, #32]
 800382e:	f240 4344 	movw	r3, #1092	@ 0x444
 8003832:	4013      	ands	r3, r2
 8003834:	2b00      	cmp	r3, #0
 8003836:	bf0c      	ite	eq
 8003838:	2301      	moveq	r3, #1
 800383a:	2300      	movne	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00b      	beq.n	800385a <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x96>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0201 	bic.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]
    htim->Instance->ARR = arr_value;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_TIM_SET_COUNTER(htim, 0);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2200      	movs	r2, #0
 8003870:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start_IT(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8003878:	4618      	mov	r0, r3
 800387a:	f006 fea3 	bl	800a5c4 <HAL_TIM_Base_Start_IT>

    async_enabled = true;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
    modbus_state = IDLE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185

    // Initial query so first value is available quickly
    sendModbusQuery();
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff ff38 	bl	8003704 <_ZN21ModbusAbsoluteEncoder15sendModbusQueryEv>
}
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	000186a0 	.word	0x000186a0

080038a0 <_ZN21ModbusAbsoluteEncoder8getAngleEv>:
        HAL_TIM_Base_Stop_IT(htim);
    }
}


float ModbusAbsoluteEncoder::getAngle() {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08a      	sub	sp, #40	@ 0x28
 80038a4:	af02      	add	r7, sp, #8
 80038a6:	6078      	str	r0, [r7, #4]
    if(async_enabled) {
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 318c 	ldrb.w	r3, [r3, #396]	@ 0x18c
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <_ZN21ModbusAbsoluteEncoder8getAngleEv+0x1c>
        return cached_angle;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 80038ba:	e059      	b.n	8003970 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xd0>
    }
    // 构建Modbus查询结构体
    modbus_t telegram;
    constructQuery(&telegram);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	332c      	adds	r3, #44	@ 0x2c
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f107 0208 	add.w	r2, r7, #8
 80038c8:	4611      	mov	r1, r2
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4798      	blx	r3
    // 发送Modbus查询（非阻塞）
    ModbusDATA[0] = ~ModbusDATA[0];
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 80038d4:	43db      	mvns	r3, r3
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8a3 216c 	strh.w	r2, [r3, #364]	@ 0x16c
    
    uint32_t result = ModbusQueryV2(&ModbusH, telegram);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	f107 0308 	add.w	r3, r7, #8
 80038ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038ee:	f7fe fdab 	bl	8002448 <ModbusQueryV2>
 80038f2:	61f8      	str	r0, [r7, #28]
    
    if (result != OP_OK_QUERY) {
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	2b14      	cmp	r3, #20
 80038f8:	d02a      	beq.n	8003950 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xb0>
        if (first_read) {
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <_ZN21ModbusAbsoluteEncoder8getAngleEv+0x6a>
            return 0.0f;
 8003904:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8003988 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xe8>
 8003908:	e032      	b.n	8003970 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xd0>
        } else {
            return (float)(last_position % ENCODER_RESOLUTION) * RADIANS_PER_COUNT + 
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8003910:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003914:	ee07 3a90 	vmov	s15, r3
 8003918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800391c:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800398c <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xec>
 8003920:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003924:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
                    (float)full_rotations * 2.0f * M_PI;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800392e:	ee07 3a90 	vmov	s15, r3
 8003932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003936:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800393a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800393e:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 8003980 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xe0>
 8003942:	ee27 7b05 	vmul.f64	d7, d7, d5
            return (float)(last_position % ENCODER_RESOLUTION) * RADIANS_PER_COUNT + 
 8003946:	ee36 7b07 	vadd.f64	d7, d6, d7
                    (float)full_rotations * 2.0f * M_PI;
 800394a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800394e:	e00f      	b.n	8003970 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xd0>
        }
    }
    
    uint32_t current_position = ((uint32_t)ModbusDATA[0] << 16) | ModbusDATA[1];
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 8003956:	041b      	lsls	r3, r3, #16
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	f8b2 216e 	ldrh.w	r2, [r2, #366]	@ 0x16e
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
    updateAngleFromPosition(current_position);
 8003962:	69b9      	ldr	r1, [r7, #24]
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f863 	bl	8003a30 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm>
    
    return cached_angle;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
}
 8003970:	eeb0 0a67 	vmov.f32	s0, s15
 8003974:	3720      	adds	r7, #32
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	f3af 8000 	nop.w
 8003980:	54442d18 	.word	0x54442d18
 8003984:	400921fb 	.word	0x400921fb
 8003988:	00000000 	.word	0x00000000
 800398c:	3a490fdb 	.word	0x3a490fdb

08003990 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv>:

void ModbusAbsoluteEncoder::asyncUpdateCallback() {
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
    if(!async_enabled) return;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 318c 	ldrb.w	r3, [r3, #396]	@ 0x18c
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f083 0301 	eor.w	r3, r3, #1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d122      	bne.n	80039f0 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x60>

    switch(modbus_state) {
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x2a>
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d004      	beq.n	80039c2 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x32>
 80039b8:	e01b      	b.n	80039f2 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
        case IDLE:
            sendModbusQuery();
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff fea2 	bl	8003704 <_ZN21ModbusAbsoluteEncoder15sendModbusQueryEv>
//             printf("Sending query...");
            break;
 80039c0:	e017      	b.n	80039f2 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
        case QUERY_SENT:
            if(checkModbusResponse()) {
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fecc 	bl	8003760 <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d004      	beq.n	80039d8 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x48>
                modbus_state = IDLE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
                // timeout
                comm_ok = false;
                modbus_state = IDLE;
                printf("Timeout, retrying...");
            }
            break;
 80039d6:	e00c      	b.n	80039f2 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
                comm_ok = false;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
                modbus_state = IDLE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
                printf("Timeout, retrying...");
 80039e8:	4803      	ldr	r0, [pc, #12]	@ (80039f8 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x68>)
 80039ea:	f012 ffdb 	bl	80169a4 <iprintf>
            break;
 80039ee:	e000      	b.n	80039f2 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
    if(!async_enabled) return;
 80039f0:	bf00      	nop
    }
}
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	0801889c 	.word	0x0801889c

080039fc <_ZN21ModbusAbsoluteEncoder14getSensorAngleEv>:

float ModbusAbsoluteEncoder::getSensorAngle() {
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
    return (float)(last_position % ENCODER_RESOLUTION) * RADIANS_PER_COUNT;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8003a0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a0e:	ee07 3a90 	vmov	s15, r3
 8003a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a16:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003a2c <_ZN21ModbusAbsoluteEncoder14getSensorAngleEv+0x30>
 8003a1a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	3a490fdb 	.word	0x3a490fdb

08003a30 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm>:

uint32_t ModbusAbsoluteEncoder::reg2u32(uint16_t reg) {
    return (uint32_t)reg + ENCODER_ZERO_POSITION;
}

void ModbusAbsoluteEncoder::updateAngleFromPosition(uint32_t current_position) {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
    if(first_read) {
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d007      	beq.n	8003a54 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm+0x24>
        zero_position = current_position;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
        first_read = false;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
    }

    last_position = current_position;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
    cached_angle = current_position * RADIANS_PER_COUNT;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a66:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003a90 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm+0x60>
 8003a6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
    if(angleUpdateCallback) {
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d004      	beq.n	8003a88 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm+0x58>
        angleUpdateCallback(current_position);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8003a84:	6838      	ldr	r0, [r7, #0]
 8003a86:	4798      	blx	r3
    }
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	3a490fdb 	.word	0x3a490fdb

08003a94 <_ZN21ModbusAbsoluteEncoder22setAngleUpdateCallbackEPFvmE>:

void ModbusAbsoluteEncoder::setAngleUpdateCallback(void (*callback)(uint32_t position)) {
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
    angleUpdateCallback = callback;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	ed87 0a01 	vstr	s0, [r7, #4]
 8003abc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ac0:	eef0 7ae7 	vabs.f32	s15, s15
 8003ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
	...

08003ad4 <_ZN6Sensor6updateEv>:
#include "main.h"
#include <cmath>
#include "cmsis_os.h"
#define _2PI 6.28318530718f

void Sensor::update() {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
    float val = getSensorAngle();
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	331c      	adds	r3, #28
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4798      	blx	r3
 8003ae8:	ed87 0a03 	vstr	s0, [r7, #12]
    if (val<0) // sensor angles are strictly non-negative. Negative values are used to signal errors.
 8003aec:	edd7 7a03 	vldr	s15, [r7, #12]
 8003af0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af8:	d434      	bmi.n	8003b64 <_ZN6Sensor6updateEv+0x90>
        return; // TODO signal error, e.g. via a flag and counter
    angle_prev_ts = HAL_GetTick();
 8003afa:	f000 fa45 	bl	8003f88 <HAL_GetTick>
 8003afe:	4603      	mov	r3, r0
 8003b00:	461a      	mov	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	611a      	str	r2, [r3, #16]
    float d_angle = val - angle_prev;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b0c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b14:	edc7 7a02 	vstr	s15, [r7, #8]
    // if overflow happened track it as full rotation
    if(abs(d_angle) > (0.8f*_2PI) ) full_rotations += ( d_angle > 0 ) ? -1 : 1; 
 8003b18:	ed97 0a02 	vldr	s0, [r7, #8]
 8003b1c:	f7ff ffc9 	bl	8003ab2 <_ZSt3absf>
 8003b20:	eef0 7a40 	vmov.f32	s15, s0
 8003b24:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003b6c <_ZN6Sensor6updateEv+0x98>
 8003b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b30:	bfcc      	ite	gt
 8003b32:	2301      	movgt	r3, #1
 8003b34:	2300      	movle	r3, #0
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00f      	beq.n	8003b5c <_ZN6Sensor6updateEv+0x88>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4c:	dd02      	ble.n	8003b54 <_ZN6Sensor6updateEv+0x80>
 8003b4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b52:	e000      	b.n	8003b56 <_ZN6Sensor6updateEv+0x82>
 8003b54:	2201      	movs	r2, #1
 8003b56:	441a      	add	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	61da      	str	r2, [r3, #28]
    angle_prev = val;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	60da      	str	r2, [r3, #12]
 8003b62:	e000      	b.n	8003b66 <_ZN6Sensor6updateEv+0x92>
        return; // TODO signal error, e.g. via a flag and counter
 8003b64:	bf00      	nop
}
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40a0d97c 	.word	0x40a0d97c

08003b70 <_ZN6Sensor11getVelocityEv>:


 /** get current angular velocity (rad/s) */
float Sensor::getVelocity() {
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
    // calculate sample time
    float Ts = (angle_prev_ts - vel_angle_prev_ts)*1e-6f;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b8a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8003c48 <_ZN6Sensor11getVelocityEv+0xd8>
 8003b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b92:	edc7 7a03 	vstr	s15, [r7, #12]
    if (Ts < 0.0f) {    // handle micros() overflow - we need to reset vel_angle_prev_ts
 8003b96:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba2:	d50e      	bpl.n	8003bc2 <_ZN6Sensor11getVelocityEv+0x52>
        vel_angle_prev = angle_prev;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	615a      	str	r2, [r3, #20]
        vel_full_rotations = full_rotations;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69da      	ldr	r2, [r3, #28]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	621a      	str	r2, [r3, #32]
        vel_angle_prev_ts = angle_prev_ts;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	619a      	str	r2, [r3, #24]
        return velocity;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	e038      	b.n	8003c34 <_ZN6Sensor11getVelocityEv+0xc4>
    }
    if (Ts < min_elapsed_time) return velocity; // don't update velocity if deltaT is too small
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bc8:	ed97 7a03 	vldr	s14, [r7, #12]
 8003bcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd4:	d502      	bpl.n	8003bdc <_ZN6Sensor11getVelocityEv+0x6c>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	e02b      	b.n	8003c34 <_ZN6Sensor11getVelocityEv+0xc4>

    velocity = ( (float)(full_rotations - vel_full_rotations)*_2PI + (angle_prev - vel_angle_prev) ) / Ts;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69da      	ldr	r2, [r3, #28]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	ee07 3a90 	vmov	s15, r3
 8003bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bee:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003c4c <_ZN6Sensor11getVelocityEv+0xdc>
 8003bf2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	edd3 6a03 	vldr	s13, [r3, #12]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c02:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c06:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003c0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	edc3 7a02 	vstr	s15, [r3, #8]
    vel_angle_prev = angle_prev;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	615a      	str	r2, [r3, #20]
    vel_full_rotations = full_rotations;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69da      	ldr	r2, [r3, #28]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	621a      	str	r2, [r3, #32]
    vel_angle_prev_ts = angle_prev_ts;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	619a      	str	r2, [r3, #24]
    return velocity;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
}
 8003c34:	ee07 3a90 	vmov	s15, r3
 8003c38:	eeb0 0a67 	vmov.f32	s0, s15
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	358637bd 	.word	0x358637bd
 8003c4c:	40c90fdb 	.word	0x40c90fdb

08003c50 <_ZN6Sensor4initEv>:



void Sensor::init() {
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
    // initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
    getSensorAngle(); // call once
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	331c      	adds	r3, #28
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4798      	blx	r3
    osDelay(1);
 8003c64:	2001      	movs	r0, #1
 8003c66:	f00e fc8b 	bl	8012580 <osDelay>
    vel_angle_prev = getSensorAngle(); // call again
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	331c      	adds	r3, #28
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	4798      	blx	r3
 8003c76:	eef0 7a40 	vmov.f32	s15, s0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	edc3 7a05 	vstr	s15, [r3, #20]
    vel_angle_prev_ts = HAL_GetTick();
 8003c80:	f000 f982 	bl	8003f88 <HAL_GetTick>
 8003c84:	4603      	mov	r3, r0
 8003c86:	461a      	mov	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	619a      	str	r2, [r3, #24]
    osDelay(1);
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	f00e fc77 	bl	8012580 <osDelay>
    getSensorAngle(); // call once
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	331c      	adds	r3, #28
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	4798      	blx	r3
    osDelay(1);
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f00e fc6e 	bl	8012580 <osDelay>
    angle_prev = getSensorAngle(); // call again
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	331c      	adds	r3, #28
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	4798      	blx	r3
 8003cb0:	eef0 7a40 	vmov.f32	s15, s0
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	edc3 7a03 	vstr	s15, [r3, #12]
    angle_prev_ts = HAL_GetTick();
 8003cba:	f000 f965 	bl	8003f88 <HAL_GetTick>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	611a      	str	r2, [r3, #16]
}
 8003cc6:	bf00      	nop
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <_ZN6Sensor18getMechanicalAngleEv>:


float Sensor::getMechanicalAngle() {
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
    return angle_prev;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	ee07 3a90 	vmov	s15, r3
}
 8003cde:	eeb0 0a67 	vmov.f32	s0, s15
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <_ZN6Sensor8getAngleEv>:



float Sensor::getAngle(){
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
    return (float)full_rotations * _2PI + angle_prev;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	ee07 3a90 	vmov	s15, r3
 8003cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d00:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003d20 <_ZN6Sensor8getAngleEv+0x34>
 8003d04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003d12:	eeb0 0a67 	vmov.f32	s0, s15
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	40c90fdb 	.word	0x40c90fdb
 8003d24:	00000000 	.word	0x00000000

08003d28 <_ZN6Sensor15getPreciseAngleEv>:



double Sensor::getPreciseAngle() {
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
    return (double)full_rotations * (double)_2PI + (double)angle_prev;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	ee07 3a90 	vmov	s15, r3
 8003d38:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003d3c:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8003d60 <_ZN6Sensor15getPreciseAngleEv+0x38>
 8003d40:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d4e:	ee36 7b07 	vadd.f64	d7, d6, d7
}
 8003d52:	eeb0 0b47 	vmov.f64	d0, d7
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	60000000 	.word	0x60000000
 8003d64:	401921fb 	.word	0x401921fb

08003d68 <_ZN6Sensor16getFullRotationsEv>:



int32_t Sensor::getFullRotations() {
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
    return full_rotations;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69db      	ldr	r3, [r3, #28]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <_ZN6Sensor11needsSearchEv>:



int Sensor::needsSearch() {
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
    return 0; // default false
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003da0:	2300      	movs	r3, #0
 8003da2:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	e019      	b.n	8003dde <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 8003daa:	4a17      	ldr	r2, [pc, #92]	@ (8003e08 <HAL_UART_TxCpltCallback+0x70>)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d10e      	bne.n	8003dd8 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8003dba:	4a13      	ldr	r2, [pc, #76]	@ (8003e08 <HAL_UART_TxCpltCallback+0x70>)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc2:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8003dc6:	f107 0308 	add.w	r3, r7, #8
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	f011 fb05 	bl	80153e0 <xTaskGenericNotifyFromISR>
	   		break;
 8003dd6:	e008      	b.n	8003dea <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	4b0b      	ldr	r3, [pc, #44]	@ (8003e0c <HAL_UART_TxCpltCallback+0x74>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4293      	cmp	r3, r2
 8003de8:	dbdf      	blt.n	8003daa <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d007      	beq.n	8003e00 <HAL_UART_TxCpltCallback+0x68>
 8003df0:	4b07      	ldr	r3, [pc, #28]	@ (8003e10 <HAL_UART_TxCpltCallback+0x78>)
 8003df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8003e00:	bf00      	nop
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	24000a54 	.word	0x24000a54
 8003e0c:	24000a5c 	.word	0x24000a5c
 8003e10:	e000ed04 	.word	0xe000ed04

08003e14 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8003e14:	b590      	push	{r4, r7, lr}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	e042      	b.n	8003eac <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8003e26:	4a2d      	ldr	r2, [pc, #180]	@ (8003edc <HAL_UART_RxCpltCallback+0xc8>)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d137      	bne.n	8003ea6 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 8003e36:	4a29      	ldr	r2, [pc, #164]	@ (8003edc <HAL_UART_RxCpltCallback+0xc8>)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3e:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d139      	bne.n	8003eba <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8003e46:	4a25      	ldr	r2, [pc, #148]	@ (8003edc <HAL_UART_RxCpltCallback+0xc8>)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4e:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8003e52:	4922      	ldr	r1, [pc, #136]	@ (8003edc <HAL_UART_RxCpltCallback+0xc8>)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e5a:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4610      	mov	r0, r2
 8003e62:	f7fd ff53 	bl	8001d0c <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8003e66:	4a1d      	ldr	r2, [pc, #116]	@ (8003edc <HAL_UART_RxCpltCallback+0xc8>)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6e:	6858      	ldr	r0, [r3, #4]
 8003e70:	4a1a      	ldr	r2, [pc, #104]	@ (8003edc <HAL_UART_RxCpltCallback+0xc8>)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e78:	33a6      	adds	r3, #166	@ 0xa6
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	f007 fc87 	bl	800b790 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8003e82:	4a16      	ldr	r2, [pc, #88]	@ (8003edc <HAL_UART_RxCpltCallback+0xc8>)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8a:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 8003e8e:	f010 fbf7 	bl	8014680 <xTaskGetTickCountFromISR>
 8003e92:	4602      	mov	r2, r0
 8003e94:	f107 0308 	add.w	r3, r7, #8
 8003e98:	2100      	movs	r1, #0
 8003e9a:	9100      	str	r1, [sp, #0]
 8003e9c:	2107      	movs	r1, #7
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f011 fc80 	bl	80157a4 <xTimerGenericCommand>
    		}
    		break;
 8003ea4:	e009      	b.n	8003eba <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee0 <HAL_UART_RxCpltCallback+0xcc>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	dbb6      	blt.n	8003e26 <HAL_UART_RxCpltCallback+0x12>
 8003eb8:	e000      	b.n	8003ebc <HAL_UART_RxCpltCallback+0xa8>
    		break;
 8003eba:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d007      	beq.n	8003ed2 <HAL_UART_RxCpltCallback+0xbe>
 8003ec2:	4b08      	ldr	r3, [pc, #32]	@ (8003ee4 <HAL_UART_RxCpltCallback+0xd0>)
 8003ec4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 8003ed2:	bf00      	nop
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd90      	pop	{r4, r7, pc}
 8003eda:	bf00      	nop
 8003edc:	24000a54 	.word	0x24000a54
 8003ee0:	24000a5c 	.word	0x24000a5c
 8003ee4:	e000ed04 	.word	0xe000ed04

08003ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003eee:	2003      	movs	r0, #3
 8003ef0:	f000 f933 	bl	800415a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ef4:	f001 ff8a 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	4b15      	ldr	r3, [pc, #84]	@ (8003f50 <HAL_Init+0x68>)
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	0a1b      	lsrs	r3, r3, #8
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	4913      	ldr	r1, [pc, #76]	@ (8003f54 <HAL_Init+0x6c>)
 8003f06:	5ccb      	ldrb	r3, [r1, r3]
 8003f08:	f003 031f 	and.w	r3, r3, #31
 8003f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f12:	4b0f      	ldr	r3, [pc, #60]	@ (8003f50 <HAL_Init+0x68>)
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8003f54 <HAL_Init+0x6c>)
 8003f1c:	5cd3      	ldrb	r3, [r2, r3]
 8003f1e:	f003 031f 	and.w	r3, r3, #31
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
 8003f28:	4a0b      	ldr	r2, [pc, #44]	@ (8003f58 <HAL_Init+0x70>)
 8003f2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8003f5c <HAL_Init+0x74>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f32:	200f      	movs	r0, #15
 8003f34:	f7fd fca0 	bl	8001878 <HAL_InitTick>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e002      	b.n	8003f48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f42:	f7fd fb4f 	bl	80015e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	58024400 	.word	0x58024400
 8003f54:	08018964 	.word	0x08018964
 8003f58:	24000004 	.word	0x24000004
 8003f5c:	24000000 	.word	0x24000000

08003f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f64:	4b06      	ldr	r3, [pc, #24]	@ (8003f80 <HAL_IncTick+0x20>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <HAL_IncTick+0x24>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4413      	add	r3, r2
 8003f70:	4a04      	ldr	r2, [pc, #16]	@ (8003f84 <HAL_IncTick+0x24>)
 8003f72:	6013      	str	r3, [r2, #0]
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	2400000c 	.word	0x2400000c
 8003f84:	24000a60 	.word	0x24000a60

08003f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f8c:	4b03      	ldr	r3, [pc, #12]	@ (8003f9c <HAL_GetTick+0x14>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	24000a60 	.word	0x24000a60

08003fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fa8:	f7ff ffee 	bl	8003f88 <HAL_GetTick>
 8003fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fb8:	d005      	beq.n	8003fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fba:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe4 <HAL_Delay+0x44>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fc6:	bf00      	nop
 8003fc8:	f7ff ffde 	bl	8003f88 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d8f7      	bhi.n	8003fc8 <HAL_Delay+0x28>
  {
  }
}
 8003fd8:	bf00      	nop
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	2400000c 	.word	0x2400000c

08003fe8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003fec:	4b03      	ldr	r3, [pc, #12]	@ (8003ffc <HAL_GetREVID+0x14>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	0c1b      	lsrs	r3, r3, #16
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	5c001000 	.word	0x5c001000

08004000 <__NVIC_SetPriorityGrouping>:
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004010:	4b0b      	ldr	r3, [pc, #44]	@ (8004040 <__NVIC_SetPriorityGrouping+0x40>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800401c:	4013      	ands	r3, r2
 800401e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004028:	4b06      	ldr	r3, [pc, #24]	@ (8004044 <__NVIC_SetPriorityGrouping+0x44>)
 800402a:	4313      	orrs	r3, r2
 800402c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800402e:	4a04      	ldr	r2, [pc, #16]	@ (8004040 <__NVIC_SetPriorityGrouping+0x40>)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	60d3      	str	r3, [r2, #12]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	e000ed00 	.word	0xe000ed00
 8004044:	05fa0000 	.word	0x05fa0000

08004048 <__NVIC_GetPriorityGrouping>:
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800404c:	4b04      	ldr	r3, [pc, #16]	@ (8004060 <__NVIC_GetPriorityGrouping+0x18>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	0a1b      	lsrs	r3, r3, #8
 8004052:	f003 0307 	and.w	r3, r3, #7
}
 8004056:	4618      	mov	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	e000ed00 	.word	0xe000ed00

08004064 <__NVIC_EnableIRQ>:
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	4603      	mov	r3, r0
 800406c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800406e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004072:	2b00      	cmp	r3, #0
 8004074:	db0b      	blt.n	800408e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	f003 021f 	and.w	r2, r3, #31
 800407c:	4907      	ldr	r1, [pc, #28]	@ (800409c <__NVIC_EnableIRQ+0x38>)
 800407e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	2001      	movs	r0, #1
 8004086:	fa00 f202 	lsl.w	r2, r0, r2
 800408a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	e000e100 	.word	0xe000e100

080040a0 <__NVIC_SetPriority>:
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	6039      	str	r1, [r7, #0]
 80040aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	db0a      	blt.n	80040ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	490c      	ldr	r1, [pc, #48]	@ (80040ec <__NVIC_SetPriority+0x4c>)
 80040ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040be:	0112      	lsls	r2, r2, #4
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	440b      	add	r3, r1
 80040c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80040c8:	e00a      	b.n	80040e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	4908      	ldr	r1, [pc, #32]	@ (80040f0 <__NVIC_SetPriority+0x50>)
 80040d0:	88fb      	ldrh	r3, [r7, #6]
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	3b04      	subs	r3, #4
 80040d8:	0112      	lsls	r2, r2, #4
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	440b      	add	r3, r1
 80040de:	761a      	strb	r2, [r3, #24]
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	e000e100 	.word	0xe000e100
 80040f0:	e000ed00 	.word	0xe000ed00

080040f4 <NVIC_EncodePriority>:
{
 80040f4:	b480      	push	{r7}
 80040f6:	b089      	sub	sp, #36	@ 0x24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f1c3 0307 	rsb	r3, r3, #7
 800410e:	2b04      	cmp	r3, #4
 8004110:	bf28      	it	cs
 8004112:	2304      	movcs	r3, #4
 8004114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	3304      	adds	r3, #4
 800411a:	2b06      	cmp	r3, #6
 800411c:	d902      	bls.n	8004124 <NVIC_EncodePriority+0x30>
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	3b03      	subs	r3, #3
 8004122:	e000      	b.n	8004126 <NVIC_EncodePriority+0x32>
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004128:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	43da      	mvns	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	401a      	ands	r2, r3
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800413c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	fa01 f303 	lsl.w	r3, r1, r3
 8004146:	43d9      	mvns	r1, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800414c:	4313      	orrs	r3, r2
}
 800414e:	4618      	mov	r0, r3
 8004150:	3724      	adds	r7, #36	@ 0x24
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff ff4c 	bl	8004000 <__NVIC_SetPriorityGrouping>
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800417e:	f7ff ff63 	bl	8004048 <__NVIC_GetPriorityGrouping>
 8004182:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	6978      	ldr	r0, [r7, #20]
 800418a:	f7ff ffb3 	bl	80040f4 <NVIC_EncodePriority>
 800418e:	4602      	mov	r2, r0
 8004190:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004194:	4611      	mov	r1, r2
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff ff82 	bl	80040a0 <__NVIC_SetPriority>
}
 800419c:	bf00      	nop
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff ff56 	bl	8004064 <__NVIC_EnableIRQ>
}
 80041b8:	bf00      	nop
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80041c4:	f3bf 8f5f 	dmb	sy
}
 80041c8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80041ca:	4b07      	ldr	r3, [pc, #28]	@ (80041e8 <HAL_MPU_Disable+0x28>)
 80041cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ce:	4a06      	ldr	r2, [pc, #24]	@ (80041e8 <HAL_MPU_Disable+0x28>)
 80041d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041d4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80041d6:	4b05      	ldr	r3, [pc, #20]	@ (80041ec <HAL_MPU_Disable+0x2c>)
 80041d8:	2200      	movs	r2, #0
 80041da:	605a      	str	r2, [r3, #4]
}
 80041dc:	bf00      	nop
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	e000ed00 	.word	0xe000ed00
 80041ec:	e000ed90 	.word	0xe000ed90

080041f0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80041f8:	4a0b      	ldr	r2, [pc, #44]	@ (8004228 <HAL_MPU_Enable+0x38>)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004202:	4b0a      	ldr	r3, [pc, #40]	@ (800422c <HAL_MPU_Enable+0x3c>)
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	4a09      	ldr	r2, [pc, #36]	@ (800422c <HAL_MPU_Enable+0x3c>)
 8004208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800420c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800420e:	f3bf 8f4f 	dsb	sy
}
 8004212:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004214:	f3bf 8f6f 	isb	sy
}
 8004218:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	e000ed90 	.word	0xe000ed90
 800422c:	e000ed00 	.word	0xe000ed00

08004230 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	785a      	ldrb	r2, [r3, #1]
 800423c:	4b1d      	ldr	r3, [pc, #116]	@ (80042b4 <HAL_MPU_ConfigRegion+0x84>)
 800423e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d029      	beq.n	800429c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004248:	4a1a      	ldr	r2, [pc, #104]	@ (80042b4 <HAL_MPU_ConfigRegion+0x84>)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	7b1b      	ldrb	r3, [r3, #12]
 8004254:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	7adb      	ldrb	r3, [r3, #11]
 800425a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800425c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	7a9b      	ldrb	r3, [r3, #10]
 8004262:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004264:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	7b5b      	ldrb	r3, [r3, #13]
 800426a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800426c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	7b9b      	ldrb	r3, [r3, #14]
 8004272:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004274:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	7bdb      	ldrb	r3, [r3, #15]
 800427a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800427c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	7a5b      	ldrb	r3, [r3, #9]
 8004282:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004284:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	7a1b      	ldrb	r3, [r3, #8]
 800428a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800428c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	7812      	ldrb	r2, [r2, #0]
 8004292:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004294:	4a07      	ldr	r2, [pc, #28]	@ (80042b4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004296:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004298:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800429a:	e005      	b.n	80042a8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800429c:	4b05      	ldr	r3, [pc, #20]	@ (80042b4 <HAL_MPU_ConfigRegion+0x84>)
 800429e:	2200      	movs	r2, #0
 80042a0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80042a2:	4b04      	ldr	r3, [pc, #16]	@ (80042b4 <HAL_MPU_ConfigRegion+0x84>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	611a      	str	r2, [r3, #16]
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	e000ed90 	.word	0xe000ed90

080042b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80042c0:	f7ff fe62 	bl	8003f88 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e2dc      	b.n	800488a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d008      	beq.n	80042ee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2280      	movs	r2, #128	@ 0x80
 80042e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e2cd      	b.n	800488a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a76      	ldr	r2, [pc, #472]	@ (80044cc <HAL_DMA_Abort+0x214>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d04a      	beq.n	800438e <HAL_DMA_Abort+0xd6>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a74      	ldr	r2, [pc, #464]	@ (80044d0 <HAL_DMA_Abort+0x218>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d045      	beq.n	800438e <HAL_DMA_Abort+0xd6>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a73      	ldr	r2, [pc, #460]	@ (80044d4 <HAL_DMA_Abort+0x21c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d040      	beq.n	800438e <HAL_DMA_Abort+0xd6>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a71      	ldr	r2, [pc, #452]	@ (80044d8 <HAL_DMA_Abort+0x220>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d03b      	beq.n	800438e <HAL_DMA_Abort+0xd6>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a70      	ldr	r2, [pc, #448]	@ (80044dc <HAL_DMA_Abort+0x224>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d036      	beq.n	800438e <HAL_DMA_Abort+0xd6>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a6e      	ldr	r2, [pc, #440]	@ (80044e0 <HAL_DMA_Abort+0x228>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d031      	beq.n	800438e <HAL_DMA_Abort+0xd6>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a6d      	ldr	r2, [pc, #436]	@ (80044e4 <HAL_DMA_Abort+0x22c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d02c      	beq.n	800438e <HAL_DMA_Abort+0xd6>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a6b      	ldr	r2, [pc, #428]	@ (80044e8 <HAL_DMA_Abort+0x230>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d027      	beq.n	800438e <HAL_DMA_Abort+0xd6>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a6a      	ldr	r2, [pc, #424]	@ (80044ec <HAL_DMA_Abort+0x234>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d022      	beq.n	800438e <HAL_DMA_Abort+0xd6>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a68      	ldr	r2, [pc, #416]	@ (80044f0 <HAL_DMA_Abort+0x238>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d01d      	beq.n	800438e <HAL_DMA_Abort+0xd6>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a67      	ldr	r2, [pc, #412]	@ (80044f4 <HAL_DMA_Abort+0x23c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d018      	beq.n	800438e <HAL_DMA_Abort+0xd6>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a65      	ldr	r2, [pc, #404]	@ (80044f8 <HAL_DMA_Abort+0x240>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d013      	beq.n	800438e <HAL_DMA_Abort+0xd6>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a64      	ldr	r2, [pc, #400]	@ (80044fc <HAL_DMA_Abort+0x244>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00e      	beq.n	800438e <HAL_DMA_Abort+0xd6>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a62      	ldr	r2, [pc, #392]	@ (8004500 <HAL_DMA_Abort+0x248>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d009      	beq.n	800438e <HAL_DMA_Abort+0xd6>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a61      	ldr	r2, [pc, #388]	@ (8004504 <HAL_DMA_Abort+0x24c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d004      	beq.n	800438e <HAL_DMA_Abort+0xd6>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a5f      	ldr	r2, [pc, #380]	@ (8004508 <HAL_DMA_Abort+0x250>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d101      	bne.n	8004392 <HAL_DMA_Abort+0xda>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <HAL_DMA_Abort+0xdc>
 8004392:	2300      	movs	r3, #0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d013      	beq.n	80043c0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 021e 	bic.w	r2, r2, #30
 80043a6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695a      	ldr	r2, [r3, #20]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043b6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	e00a      	b.n	80043d6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 020e 	bic.w	r2, r2, #14
 80043ce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a3c      	ldr	r2, [pc, #240]	@ (80044cc <HAL_DMA_Abort+0x214>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d072      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a3a      	ldr	r2, [pc, #232]	@ (80044d0 <HAL_DMA_Abort+0x218>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d06d      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a39      	ldr	r2, [pc, #228]	@ (80044d4 <HAL_DMA_Abort+0x21c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d068      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a37      	ldr	r2, [pc, #220]	@ (80044d8 <HAL_DMA_Abort+0x220>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d063      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a36      	ldr	r2, [pc, #216]	@ (80044dc <HAL_DMA_Abort+0x224>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d05e      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a34      	ldr	r2, [pc, #208]	@ (80044e0 <HAL_DMA_Abort+0x228>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d059      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a33      	ldr	r2, [pc, #204]	@ (80044e4 <HAL_DMA_Abort+0x22c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d054      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a31      	ldr	r2, [pc, #196]	@ (80044e8 <HAL_DMA_Abort+0x230>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d04f      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a30      	ldr	r2, [pc, #192]	@ (80044ec <HAL_DMA_Abort+0x234>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d04a      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a2e      	ldr	r2, [pc, #184]	@ (80044f0 <HAL_DMA_Abort+0x238>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d045      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a2d      	ldr	r2, [pc, #180]	@ (80044f4 <HAL_DMA_Abort+0x23c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d040      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a2b      	ldr	r2, [pc, #172]	@ (80044f8 <HAL_DMA_Abort+0x240>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d03b      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a2a      	ldr	r2, [pc, #168]	@ (80044fc <HAL_DMA_Abort+0x244>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d036      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a28      	ldr	r2, [pc, #160]	@ (8004500 <HAL_DMA_Abort+0x248>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d031      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a27      	ldr	r2, [pc, #156]	@ (8004504 <HAL_DMA_Abort+0x24c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d02c      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a25      	ldr	r2, [pc, #148]	@ (8004508 <HAL_DMA_Abort+0x250>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d027      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a24      	ldr	r2, [pc, #144]	@ (800450c <HAL_DMA_Abort+0x254>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d022      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a22      	ldr	r2, [pc, #136]	@ (8004510 <HAL_DMA_Abort+0x258>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d01d      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a21      	ldr	r2, [pc, #132]	@ (8004514 <HAL_DMA_Abort+0x25c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d018      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a1f      	ldr	r2, [pc, #124]	@ (8004518 <HAL_DMA_Abort+0x260>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d013      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a1e      	ldr	r2, [pc, #120]	@ (800451c <HAL_DMA_Abort+0x264>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00e      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004520 <HAL_DMA_Abort+0x268>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d009      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004524 <HAL_DMA_Abort+0x26c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d004      	beq.n	80044c6 <HAL_DMA_Abort+0x20e>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a19      	ldr	r2, [pc, #100]	@ (8004528 <HAL_DMA_Abort+0x270>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d132      	bne.n	800452c <HAL_DMA_Abort+0x274>
 80044c6:	2301      	movs	r3, #1
 80044c8:	e031      	b.n	800452e <HAL_DMA_Abort+0x276>
 80044ca:	bf00      	nop
 80044cc:	40020010 	.word	0x40020010
 80044d0:	40020028 	.word	0x40020028
 80044d4:	40020040 	.word	0x40020040
 80044d8:	40020058 	.word	0x40020058
 80044dc:	40020070 	.word	0x40020070
 80044e0:	40020088 	.word	0x40020088
 80044e4:	400200a0 	.word	0x400200a0
 80044e8:	400200b8 	.word	0x400200b8
 80044ec:	40020410 	.word	0x40020410
 80044f0:	40020428 	.word	0x40020428
 80044f4:	40020440 	.word	0x40020440
 80044f8:	40020458 	.word	0x40020458
 80044fc:	40020470 	.word	0x40020470
 8004500:	40020488 	.word	0x40020488
 8004504:	400204a0 	.word	0x400204a0
 8004508:	400204b8 	.word	0x400204b8
 800450c:	58025408 	.word	0x58025408
 8004510:	5802541c 	.word	0x5802541c
 8004514:	58025430 	.word	0x58025430
 8004518:	58025444 	.word	0x58025444
 800451c:	58025458 	.word	0x58025458
 8004520:	5802546c 	.word	0x5802546c
 8004524:	58025480 	.word	0x58025480
 8004528:	58025494 	.word	0x58025494
 800452c:	2300      	movs	r3, #0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d007      	beq.n	8004542 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800453c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004540:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a6d      	ldr	r2, [pc, #436]	@ (80046fc <HAL_DMA_Abort+0x444>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d04a      	beq.n	80045e2 <HAL_DMA_Abort+0x32a>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a6b      	ldr	r2, [pc, #428]	@ (8004700 <HAL_DMA_Abort+0x448>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d045      	beq.n	80045e2 <HAL_DMA_Abort+0x32a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a6a      	ldr	r2, [pc, #424]	@ (8004704 <HAL_DMA_Abort+0x44c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d040      	beq.n	80045e2 <HAL_DMA_Abort+0x32a>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a68      	ldr	r2, [pc, #416]	@ (8004708 <HAL_DMA_Abort+0x450>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d03b      	beq.n	80045e2 <HAL_DMA_Abort+0x32a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a67      	ldr	r2, [pc, #412]	@ (800470c <HAL_DMA_Abort+0x454>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d036      	beq.n	80045e2 <HAL_DMA_Abort+0x32a>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a65      	ldr	r2, [pc, #404]	@ (8004710 <HAL_DMA_Abort+0x458>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d031      	beq.n	80045e2 <HAL_DMA_Abort+0x32a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a64      	ldr	r2, [pc, #400]	@ (8004714 <HAL_DMA_Abort+0x45c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d02c      	beq.n	80045e2 <HAL_DMA_Abort+0x32a>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a62      	ldr	r2, [pc, #392]	@ (8004718 <HAL_DMA_Abort+0x460>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d027      	beq.n	80045e2 <HAL_DMA_Abort+0x32a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a61      	ldr	r2, [pc, #388]	@ (800471c <HAL_DMA_Abort+0x464>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d022      	beq.n	80045e2 <HAL_DMA_Abort+0x32a>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a5f      	ldr	r2, [pc, #380]	@ (8004720 <HAL_DMA_Abort+0x468>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d01d      	beq.n	80045e2 <HAL_DMA_Abort+0x32a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a5e      	ldr	r2, [pc, #376]	@ (8004724 <HAL_DMA_Abort+0x46c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d018      	beq.n	80045e2 <HAL_DMA_Abort+0x32a>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a5c      	ldr	r2, [pc, #368]	@ (8004728 <HAL_DMA_Abort+0x470>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d013      	beq.n	80045e2 <HAL_DMA_Abort+0x32a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a5b      	ldr	r2, [pc, #364]	@ (800472c <HAL_DMA_Abort+0x474>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d00e      	beq.n	80045e2 <HAL_DMA_Abort+0x32a>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a59      	ldr	r2, [pc, #356]	@ (8004730 <HAL_DMA_Abort+0x478>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d009      	beq.n	80045e2 <HAL_DMA_Abort+0x32a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a58      	ldr	r2, [pc, #352]	@ (8004734 <HAL_DMA_Abort+0x47c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d004      	beq.n	80045e2 <HAL_DMA_Abort+0x32a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a56      	ldr	r2, [pc, #344]	@ (8004738 <HAL_DMA_Abort+0x480>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d108      	bne.n	80045f4 <HAL_DMA_Abort+0x33c>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0201 	bic.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	e007      	b.n	8004604 <HAL_DMA_Abort+0x34c>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0201 	bic.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004604:	e013      	b.n	800462e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004606:	f7ff fcbf 	bl	8003f88 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b05      	cmp	r3, #5
 8004612:	d90c      	bls.n	800462e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2220      	movs	r2, #32
 8004618:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2203      	movs	r2, #3
 800461e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e12d      	b.n	800488a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1e5      	bne.n	8004606 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a2f      	ldr	r2, [pc, #188]	@ (80046fc <HAL_DMA_Abort+0x444>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d04a      	beq.n	80046da <HAL_DMA_Abort+0x422>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a2d      	ldr	r2, [pc, #180]	@ (8004700 <HAL_DMA_Abort+0x448>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d045      	beq.n	80046da <HAL_DMA_Abort+0x422>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a2c      	ldr	r2, [pc, #176]	@ (8004704 <HAL_DMA_Abort+0x44c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d040      	beq.n	80046da <HAL_DMA_Abort+0x422>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a2a      	ldr	r2, [pc, #168]	@ (8004708 <HAL_DMA_Abort+0x450>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d03b      	beq.n	80046da <HAL_DMA_Abort+0x422>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a29      	ldr	r2, [pc, #164]	@ (800470c <HAL_DMA_Abort+0x454>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d036      	beq.n	80046da <HAL_DMA_Abort+0x422>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a27      	ldr	r2, [pc, #156]	@ (8004710 <HAL_DMA_Abort+0x458>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d031      	beq.n	80046da <HAL_DMA_Abort+0x422>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a26      	ldr	r2, [pc, #152]	@ (8004714 <HAL_DMA_Abort+0x45c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d02c      	beq.n	80046da <HAL_DMA_Abort+0x422>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a24      	ldr	r2, [pc, #144]	@ (8004718 <HAL_DMA_Abort+0x460>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d027      	beq.n	80046da <HAL_DMA_Abort+0x422>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a23      	ldr	r2, [pc, #140]	@ (800471c <HAL_DMA_Abort+0x464>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d022      	beq.n	80046da <HAL_DMA_Abort+0x422>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a21      	ldr	r2, [pc, #132]	@ (8004720 <HAL_DMA_Abort+0x468>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d01d      	beq.n	80046da <HAL_DMA_Abort+0x422>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a20      	ldr	r2, [pc, #128]	@ (8004724 <HAL_DMA_Abort+0x46c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d018      	beq.n	80046da <HAL_DMA_Abort+0x422>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004728 <HAL_DMA_Abort+0x470>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d013      	beq.n	80046da <HAL_DMA_Abort+0x422>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1d      	ldr	r2, [pc, #116]	@ (800472c <HAL_DMA_Abort+0x474>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00e      	beq.n	80046da <HAL_DMA_Abort+0x422>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004730 <HAL_DMA_Abort+0x478>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d009      	beq.n	80046da <HAL_DMA_Abort+0x422>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004734 <HAL_DMA_Abort+0x47c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d004      	beq.n	80046da <HAL_DMA_Abort+0x422>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a18      	ldr	r2, [pc, #96]	@ (8004738 <HAL_DMA_Abort+0x480>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d101      	bne.n	80046de <HAL_DMA_Abort+0x426>
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <HAL_DMA_Abort+0x428>
 80046de:	2300      	movs	r3, #0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d02b      	beq.n	800473c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ee:	f003 031f 	and.w	r3, r3, #31
 80046f2:	223f      	movs	r2, #63	@ 0x3f
 80046f4:	409a      	lsls	r2, r3
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	609a      	str	r2, [r3, #8]
 80046fa:	e02a      	b.n	8004752 <HAL_DMA_Abort+0x49a>
 80046fc:	40020010 	.word	0x40020010
 8004700:	40020028 	.word	0x40020028
 8004704:	40020040 	.word	0x40020040
 8004708:	40020058 	.word	0x40020058
 800470c:	40020070 	.word	0x40020070
 8004710:	40020088 	.word	0x40020088
 8004714:	400200a0 	.word	0x400200a0
 8004718:	400200b8 	.word	0x400200b8
 800471c:	40020410 	.word	0x40020410
 8004720:	40020428 	.word	0x40020428
 8004724:	40020440 	.word	0x40020440
 8004728:	40020458 	.word	0x40020458
 800472c:	40020470 	.word	0x40020470
 8004730:	40020488 	.word	0x40020488
 8004734:	400204a0 	.word	0x400204a0
 8004738:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004740:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	2201      	movs	r2, #1
 800474c:	409a      	lsls	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a4f      	ldr	r2, [pc, #316]	@ (8004894 <HAL_DMA_Abort+0x5dc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d072      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a4d      	ldr	r2, [pc, #308]	@ (8004898 <HAL_DMA_Abort+0x5e0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d06d      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a4c      	ldr	r2, [pc, #304]	@ (800489c <HAL_DMA_Abort+0x5e4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d068      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a4a      	ldr	r2, [pc, #296]	@ (80048a0 <HAL_DMA_Abort+0x5e8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d063      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a49      	ldr	r2, [pc, #292]	@ (80048a4 <HAL_DMA_Abort+0x5ec>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d05e      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a47      	ldr	r2, [pc, #284]	@ (80048a8 <HAL_DMA_Abort+0x5f0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d059      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a46      	ldr	r2, [pc, #280]	@ (80048ac <HAL_DMA_Abort+0x5f4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d054      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a44      	ldr	r2, [pc, #272]	@ (80048b0 <HAL_DMA_Abort+0x5f8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d04f      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a43      	ldr	r2, [pc, #268]	@ (80048b4 <HAL_DMA_Abort+0x5fc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d04a      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a41      	ldr	r2, [pc, #260]	@ (80048b8 <HAL_DMA_Abort+0x600>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d045      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a40      	ldr	r2, [pc, #256]	@ (80048bc <HAL_DMA_Abort+0x604>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d040      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a3e      	ldr	r2, [pc, #248]	@ (80048c0 <HAL_DMA_Abort+0x608>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d03b      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a3d      	ldr	r2, [pc, #244]	@ (80048c4 <HAL_DMA_Abort+0x60c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d036      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a3b      	ldr	r2, [pc, #236]	@ (80048c8 <HAL_DMA_Abort+0x610>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d031      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a3a      	ldr	r2, [pc, #232]	@ (80048cc <HAL_DMA_Abort+0x614>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d02c      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a38      	ldr	r2, [pc, #224]	@ (80048d0 <HAL_DMA_Abort+0x618>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d027      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a37      	ldr	r2, [pc, #220]	@ (80048d4 <HAL_DMA_Abort+0x61c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d022      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a35      	ldr	r2, [pc, #212]	@ (80048d8 <HAL_DMA_Abort+0x620>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d01d      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a34      	ldr	r2, [pc, #208]	@ (80048dc <HAL_DMA_Abort+0x624>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d018      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a32      	ldr	r2, [pc, #200]	@ (80048e0 <HAL_DMA_Abort+0x628>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d013      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a31      	ldr	r2, [pc, #196]	@ (80048e4 <HAL_DMA_Abort+0x62c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00e      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a2f      	ldr	r2, [pc, #188]	@ (80048e8 <HAL_DMA_Abort+0x630>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d009      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a2e      	ldr	r2, [pc, #184]	@ (80048ec <HAL_DMA_Abort+0x634>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d004      	beq.n	8004842 <HAL_DMA_Abort+0x58a>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a2c      	ldr	r2, [pc, #176]	@ (80048f0 <HAL_DMA_Abort+0x638>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d101      	bne.n	8004846 <HAL_DMA_Abort+0x58e>
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <HAL_DMA_Abort+0x590>
 8004846:	2300      	movs	r3, #0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d015      	beq.n	8004878 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004854:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00c      	beq.n	8004878 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004868:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800486c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004876:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40020010 	.word	0x40020010
 8004898:	40020028 	.word	0x40020028
 800489c:	40020040 	.word	0x40020040
 80048a0:	40020058 	.word	0x40020058
 80048a4:	40020070 	.word	0x40020070
 80048a8:	40020088 	.word	0x40020088
 80048ac:	400200a0 	.word	0x400200a0
 80048b0:	400200b8 	.word	0x400200b8
 80048b4:	40020410 	.word	0x40020410
 80048b8:	40020428 	.word	0x40020428
 80048bc:	40020440 	.word	0x40020440
 80048c0:	40020458 	.word	0x40020458
 80048c4:	40020470 	.word	0x40020470
 80048c8:	40020488 	.word	0x40020488
 80048cc:	400204a0 	.word	0x400204a0
 80048d0:	400204b8 	.word	0x400204b8
 80048d4:	58025408 	.word	0x58025408
 80048d8:	5802541c 	.word	0x5802541c
 80048dc:	58025430 	.word	0x58025430
 80048e0:	58025444 	.word	0x58025444
 80048e4:	58025458 	.word	0x58025458
 80048e8:	5802546c 	.word	0x5802546c
 80048ec:	58025480 	.word	0x58025480
 80048f0:	58025494 	.word	0x58025494

080048f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e237      	b.n	8004d76 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d004      	beq.n	800491c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2280      	movs	r2, #128	@ 0x80
 8004916:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e22c      	b.n	8004d76 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a5c      	ldr	r2, [pc, #368]	@ (8004a94 <HAL_DMA_Abort_IT+0x1a0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d04a      	beq.n	80049bc <HAL_DMA_Abort_IT+0xc8>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a5b      	ldr	r2, [pc, #364]	@ (8004a98 <HAL_DMA_Abort_IT+0x1a4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d045      	beq.n	80049bc <HAL_DMA_Abort_IT+0xc8>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a59      	ldr	r2, [pc, #356]	@ (8004a9c <HAL_DMA_Abort_IT+0x1a8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d040      	beq.n	80049bc <HAL_DMA_Abort_IT+0xc8>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a58      	ldr	r2, [pc, #352]	@ (8004aa0 <HAL_DMA_Abort_IT+0x1ac>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d03b      	beq.n	80049bc <HAL_DMA_Abort_IT+0xc8>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a56      	ldr	r2, [pc, #344]	@ (8004aa4 <HAL_DMA_Abort_IT+0x1b0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d036      	beq.n	80049bc <HAL_DMA_Abort_IT+0xc8>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a55      	ldr	r2, [pc, #340]	@ (8004aa8 <HAL_DMA_Abort_IT+0x1b4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d031      	beq.n	80049bc <HAL_DMA_Abort_IT+0xc8>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a53      	ldr	r2, [pc, #332]	@ (8004aac <HAL_DMA_Abort_IT+0x1b8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d02c      	beq.n	80049bc <HAL_DMA_Abort_IT+0xc8>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a52      	ldr	r2, [pc, #328]	@ (8004ab0 <HAL_DMA_Abort_IT+0x1bc>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d027      	beq.n	80049bc <HAL_DMA_Abort_IT+0xc8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a50      	ldr	r2, [pc, #320]	@ (8004ab4 <HAL_DMA_Abort_IT+0x1c0>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d022      	beq.n	80049bc <HAL_DMA_Abort_IT+0xc8>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a4f      	ldr	r2, [pc, #316]	@ (8004ab8 <HAL_DMA_Abort_IT+0x1c4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d01d      	beq.n	80049bc <HAL_DMA_Abort_IT+0xc8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a4d      	ldr	r2, [pc, #308]	@ (8004abc <HAL_DMA_Abort_IT+0x1c8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d018      	beq.n	80049bc <HAL_DMA_Abort_IT+0xc8>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a4c      	ldr	r2, [pc, #304]	@ (8004ac0 <HAL_DMA_Abort_IT+0x1cc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d013      	beq.n	80049bc <HAL_DMA_Abort_IT+0xc8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a4a      	ldr	r2, [pc, #296]	@ (8004ac4 <HAL_DMA_Abort_IT+0x1d0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00e      	beq.n	80049bc <HAL_DMA_Abort_IT+0xc8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a49      	ldr	r2, [pc, #292]	@ (8004ac8 <HAL_DMA_Abort_IT+0x1d4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d009      	beq.n	80049bc <HAL_DMA_Abort_IT+0xc8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a47      	ldr	r2, [pc, #284]	@ (8004acc <HAL_DMA_Abort_IT+0x1d8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d004      	beq.n	80049bc <HAL_DMA_Abort_IT+0xc8>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a46      	ldr	r2, [pc, #280]	@ (8004ad0 <HAL_DMA_Abort_IT+0x1dc>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d101      	bne.n	80049c0 <HAL_DMA_Abort_IT+0xcc>
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <HAL_DMA_Abort_IT+0xce>
 80049c0:	2300      	movs	r3, #0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 8086 	beq.w	8004ad4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2204      	movs	r2, #4
 80049cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a2f      	ldr	r2, [pc, #188]	@ (8004a94 <HAL_DMA_Abort_IT+0x1a0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d04a      	beq.n	8004a70 <HAL_DMA_Abort_IT+0x17c>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a2e      	ldr	r2, [pc, #184]	@ (8004a98 <HAL_DMA_Abort_IT+0x1a4>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d045      	beq.n	8004a70 <HAL_DMA_Abort_IT+0x17c>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a2c      	ldr	r2, [pc, #176]	@ (8004a9c <HAL_DMA_Abort_IT+0x1a8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d040      	beq.n	8004a70 <HAL_DMA_Abort_IT+0x17c>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a2b      	ldr	r2, [pc, #172]	@ (8004aa0 <HAL_DMA_Abort_IT+0x1ac>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d03b      	beq.n	8004a70 <HAL_DMA_Abort_IT+0x17c>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a29      	ldr	r2, [pc, #164]	@ (8004aa4 <HAL_DMA_Abort_IT+0x1b0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d036      	beq.n	8004a70 <HAL_DMA_Abort_IT+0x17c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a28      	ldr	r2, [pc, #160]	@ (8004aa8 <HAL_DMA_Abort_IT+0x1b4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d031      	beq.n	8004a70 <HAL_DMA_Abort_IT+0x17c>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a26      	ldr	r2, [pc, #152]	@ (8004aac <HAL_DMA_Abort_IT+0x1b8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d02c      	beq.n	8004a70 <HAL_DMA_Abort_IT+0x17c>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a25      	ldr	r2, [pc, #148]	@ (8004ab0 <HAL_DMA_Abort_IT+0x1bc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d027      	beq.n	8004a70 <HAL_DMA_Abort_IT+0x17c>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a23      	ldr	r2, [pc, #140]	@ (8004ab4 <HAL_DMA_Abort_IT+0x1c0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d022      	beq.n	8004a70 <HAL_DMA_Abort_IT+0x17c>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a22      	ldr	r2, [pc, #136]	@ (8004ab8 <HAL_DMA_Abort_IT+0x1c4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d01d      	beq.n	8004a70 <HAL_DMA_Abort_IT+0x17c>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a20      	ldr	r2, [pc, #128]	@ (8004abc <HAL_DMA_Abort_IT+0x1c8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d018      	beq.n	8004a70 <HAL_DMA_Abort_IT+0x17c>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1f      	ldr	r2, [pc, #124]	@ (8004ac0 <HAL_DMA_Abort_IT+0x1cc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d013      	beq.n	8004a70 <HAL_DMA_Abort_IT+0x17c>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ac4 <HAL_DMA_Abort_IT+0x1d0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00e      	beq.n	8004a70 <HAL_DMA_Abort_IT+0x17c>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac8 <HAL_DMA_Abort_IT+0x1d4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d009      	beq.n	8004a70 <HAL_DMA_Abort_IT+0x17c>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a1a      	ldr	r2, [pc, #104]	@ (8004acc <HAL_DMA_Abort_IT+0x1d8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d004      	beq.n	8004a70 <HAL_DMA_Abort_IT+0x17c>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a19      	ldr	r2, [pc, #100]	@ (8004ad0 <HAL_DMA_Abort_IT+0x1dc>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d108      	bne.n	8004a82 <HAL_DMA_Abort_IT+0x18e>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0201 	bic.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	e178      	b.n	8004d74 <HAL_DMA_Abort_IT+0x480>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0201 	bic.w	r2, r2, #1
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	e16f      	b.n	8004d74 <HAL_DMA_Abort_IT+0x480>
 8004a94:	40020010 	.word	0x40020010
 8004a98:	40020028 	.word	0x40020028
 8004a9c:	40020040 	.word	0x40020040
 8004aa0:	40020058 	.word	0x40020058
 8004aa4:	40020070 	.word	0x40020070
 8004aa8:	40020088 	.word	0x40020088
 8004aac:	400200a0 	.word	0x400200a0
 8004ab0:	400200b8 	.word	0x400200b8
 8004ab4:	40020410 	.word	0x40020410
 8004ab8:	40020428 	.word	0x40020428
 8004abc:	40020440 	.word	0x40020440
 8004ac0:	40020458 	.word	0x40020458
 8004ac4:	40020470 	.word	0x40020470
 8004ac8:	40020488 	.word	0x40020488
 8004acc:	400204a0 	.word	0x400204a0
 8004ad0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 020e 	bic.w	r2, r2, #14
 8004ae2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a6c      	ldr	r2, [pc, #432]	@ (8004c9c <HAL_DMA_Abort_IT+0x3a8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d04a      	beq.n	8004b84 <HAL_DMA_Abort_IT+0x290>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a6b      	ldr	r2, [pc, #428]	@ (8004ca0 <HAL_DMA_Abort_IT+0x3ac>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d045      	beq.n	8004b84 <HAL_DMA_Abort_IT+0x290>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a69      	ldr	r2, [pc, #420]	@ (8004ca4 <HAL_DMA_Abort_IT+0x3b0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d040      	beq.n	8004b84 <HAL_DMA_Abort_IT+0x290>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a68      	ldr	r2, [pc, #416]	@ (8004ca8 <HAL_DMA_Abort_IT+0x3b4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d03b      	beq.n	8004b84 <HAL_DMA_Abort_IT+0x290>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a66      	ldr	r2, [pc, #408]	@ (8004cac <HAL_DMA_Abort_IT+0x3b8>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d036      	beq.n	8004b84 <HAL_DMA_Abort_IT+0x290>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a65      	ldr	r2, [pc, #404]	@ (8004cb0 <HAL_DMA_Abort_IT+0x3bc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d031      	beq.n	8004b84 <HAL_DMA_Abort_IT+0x290>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a63      	ldr	r2, [pc, #396]	@ (8004cb4 <HAL_DMA_Abort_IT+0x3c0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d02c      	beq.n	8004b84 <HAL_DMA_Abort_IT+0x290>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a62      	ldr	r2, [pc, #392]	@ (8004cb8 <HAL_DMA_Abort_IT+0x3c4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d027      	beq.n	8004b84 <HAL_DMA_Abort_IT+0x290>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a60      	ldr	r2, [pc, #384]	@ (8004cbc <HAL_DMA_Abort_IT+0x3c8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d022      	beq.n	8004b84 <HAL_DMA_Abort_IT+0x290>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a5f      	ldr	r2, [pc, #380]	@ (8004cc0 <HAL_DMA_Abort_IT+0x3cc>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d01d      	beq.n	8004b84 <HAL_DMA_Abort_IT+0x290>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a5d      	ldr	r2, [pc, #372]	@ (8004cc4 <HAL_DMA_Abort_IT+0x3d0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d018      	beq.n	8004b84 <HAL_DMA_Abort_IT+0x290>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a5c      	ldr	r2, [pc, #368]	@ (8004cc8 <HAL_DMA_Abort_IT+0x3d4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d013      	beq.n	8004b84 <HAL_DMA_Abort_IT+0x290>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a5a      	ldr	r2, [pc, #360]	@ (8004ccc <HAL_DMA_Abort_IT+0x3d8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00e      	beq.n	8004b84 <HAL_DMA_Abort_IT+0x290>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a59      	ldr	r2, [pc, #356]	@ (8004cd0 <HAL_DMA_Abort_IT+0x3dc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d009      	beq.n	8004b84 <HAL_DMA_Abort_IT+0x290>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a57      	ldr	r2, [pc, #348]	@ (8004cd4 <HAL_DMA_Abort_IT+0x3e0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d004      	beq.n	8004b84 <HAL_DMA_Abort_IT+0x290>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a56      	ldr	r2, [pc, #344]	@ (8004cd8 <HAL_DMA_Abort_IT+0x3e4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d108      	bne.n	8004b96 <HAL_DMA_Abort_IT+0x2a2>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0201 	bic.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	e007      	b.n	8004ba6 <HAL_DMA_Abort_IT+0x2b2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0201 	bic.w	r2, r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a3c      	ldr	r2, [pc, #240]	@ (8004c9c <HAL_DMA_Abort_IT+0x3a8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d072      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a3a      	ldr	r2, [pc, #232]	@ (8004ca0 <HAL_DMA_Abort_IT+0x3ac>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d06d      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a39      	ldr	r2, [pc, #228]	@ (8004ca4 <HAL_DMA_Abort_IT+0x3b0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d068      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a37      	ldr	r2, [pc, #220]	@ (8004ca8 <HAL_DMA_Abort_IT+0x3b4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d063      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a36      	ldr	r2, [pc, #216]	@ (8004cac <HAL_DMA_Abort_IT+0x3b8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d05e      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a34      	ldr	r2, [pc, #208]	@ (8004cb0 <HAL_DMA_Abort_IT+0x3bc>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d059      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a33      	ldr	r2, [pc, #204]	@ (8004cb4 <HAL_DMA_Abort_IT+0x3c0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d054      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a31      	ldr	r2, [pc, #196]	@ (8004cb8 <HAL_DMA_Abort_IT+0x3c4>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d04f      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a30      	ldr	r2, [pc, #192]	@ (8004cbc <HAL_DMA_Abort_IT+0x3c8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d04a      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a2e      	ldr	r2, [pc, #184]	@ (8004cc0 <HAL_DMA_Abort_IT+0x3cc>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d045      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a2d      	ldr	r2, [pc, #180]	@ (8004cc4 <HAL_DMA_Abort_IT+0x3d0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d040      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a2b      	ldr	r2, [pc, #172]	@ (8004cc8 <HAL_DMA_Abort_IT+0x3d4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d03b      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a2a      	ldr	r2, [pc, #168]	@ (8004ccc <HAL_DMA_Abort_IT+0x3d8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d036      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a28      	ldr	r2, [pc, #160]	@ (8004cd0 <HAL_DMA_Abort_IT+0x3dc>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d031      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a27      	ldr	r2, [pc, #156]	@ (8004cd4 <HAL_DMA_Abort_IT+0x3e0>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d02c      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a25      	ldr	r2, [pc, #148]	@ (8004cd8 <HAL_DMA_Abort_IT+0x3e4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d027      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a24      	ldr	r2, [pc, #144]	@ (8004cdc <HAL_DMA_Abort_IT+0x3e8>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d022      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a22      	ldr	r2, [pc, #136]	@ (8004ce0 <HAL_DMA_Abort_IT+0x3ec>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d01d      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a21      	ldr	r2, [pc, #132]	@ (8004ce4 <HAL_DMA_Abort_IT+0x3f0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d018      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1f      	ldr	r2, [pc, #124]	@ (8004ce8 <HAL_DMA_Abort_IT+0x3f4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d013      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1e      	ldr	r2, [pc, #120]	@ (8004cec <HAL_DMA_Abort_IT+0x3f8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00e      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a1c      	ldr	r2, [pc, #112]	@ (8004cf0 <HAL_DMA_Abort_IT+0x3fc>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d009      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1b      	ldr	r2, [pc, #108]	@ (8004cf4 <HAL_DMA_Abort_IT+0x400>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x3a2>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a19      	ldr	r2, [pc, #100]	@ (8004cf8 <HAL_DMA_Abort_IT+0x404>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d132      	bne.n	8004cfc <HAL_DMA_Abort_IT+0x408>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e031      	b.n	8004cfe <HAL_DMA_Abort_IT+0x40a>
 8004c9a:	bf00      	nop
 8004c9c:	40020010 	.word	0x40020010
 8004ca0:	40020028 	.word	0x40020028
 8004ca4:	40020040 	.word	0x40020040
 8004ca8:	40020058 	.word	0x40020058
 8004cac:	40020070 	.word	0x40020070
 8004cb0:	40020088 	.word	0x40020088
 8004cb4:	400200a0 	.word	0x400200a0
 8004cb8:	400200b8 	.word	0x400200b8
 8004cbc:	40020410 	.word	0x40020410
 8004cc0:	40020428 	.word	0x40020428
 8004cc4:	40020440 	.word	0x40020440
 8004cc8:	40020458 	.word	0x40020458
 8004ccc:	40020470 	.word	0x40020470
 8004cd0:	40020488 	.word	0x40020488
 8004cd4:	400204a0 	.word	0x400204a0
 8004cd8:	400204b8 	.word	0x400204b8
 8004cdc:	58025408 	.word	0x58025408
 8004ce0:	5802541c 	.word	0x5802541c
 8004ce4:	58025430 	.word	0x58025430
 8004ce8:	58025444 	.word	0x58025444
 8004cec:	58025458 	.word	0x58025458
 8004cf0:	5802546c 	.word	0x5802546c
 8004cf4:	58025480 	.word	0x58025480
 8004cf8:	58025494 	.word	0x58025494
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d028      	beq.n	8004d54 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d10:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d16:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d1c:	f003 031f 	and.w	r3, r3, #31
 8004d20:	2201      	movs	r2, #1
 8004d22:	409a      	lsls	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004d30:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00c      	beq.n	8004d54 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d48:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004d52:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop

08004d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b089      	sub	sp, #36	@ 0x24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004d8e:	4b89      	ldr	r3, [pc, #548]	@ (8004fb4 <HAL_GPIO_Init+0x234>)
 8004d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d92:	e194      	b.n	80050be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	2101      	movs	r1, #1
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004da0:	4013      	ands	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 8186 	beq.w	80050b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f003 0303 	and.w	r3, r3, #3
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d005      	beq.n	8004dc4 <HAL_GPIO_Init+0x44>
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d130      	bne.n	8004e26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	2203      	movs	r2, #3
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	43db      	mvns	r3, r3
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	4013      	ands	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	091b      	lsrs	r3, r3, #4
 8004e10:	f003 0201 	and.w	r2, r3, #1
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d017      	beq.n	8004e62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	43db      	mvns	r3, r3
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	4013      	ands	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d123      	bne.n	8004eb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	08da      	lsrs	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3208      	adds	r2, #8
 8004e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	220f      	movs	r2, #15
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	08da      	lsrs	r2, r3, #3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3208      	adds	r2, #8
 8004eb0:	69b9      	ldr	r1, [r7, #24]
 8004eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f003 0203 	and.w	r2, r3, #3
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 80e0 	beq.w	80050b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8004fb8 <HAL_GPIO_Init+0x238>)
 8004efa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004efe:	4a2e      	ldr	r2, [pc, #184]	@ (8004fb8 <HAL_GPIO_Init+0x238>)
 8004f00:	f043 0302 	orr.w	r3, r3, #2
 8004f04:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004f08:	4b2b      	ldr	r3, [pc, #172]	@ (8004fb8 <HAL_GPIO_Init+0x238>)
 8004f0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f16:	4a29      	ldr	r2, [pc, #164]	@ (8004fbc <HAL_GPIO_Init+0x23c>)
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	089b      	lsrs	r3, r3, #2
 8004f1c:	3302      	adds	r3, #2
 8004f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	220f      	movs	r2, #15
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	43db      	mvns	r3, r3
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	4013      	ands	r3, r2
 8004f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a20      	ldr	r2, [pc, #128]	@ (8004fc0 <HAL_GPIO_Init+0x240>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d052      	beq.n	8004fe8 <HAL_GPIO_Init+0x268>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a1f      	ldr	r2, [pc, #124]	@ (8004fc4 <HAL_GPIO_Init+0x244>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d031      	beq.n	8004fae <HAL_GPIO_Init+0x22e>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fc8 <HAL_GPIO_Init+0x248>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d02b      	beq.n	8004faa <HAL_GPIO_Init+0x22a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a1d      	ldr	r2, [pc, #116]	@ (8004fcc <HAL_GPIO_Init+0x24c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d025      	beq.n	8004fa6 <HAL_GPIO_Init+0x226>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a1c      	ldr	r2, [pc, #112]	@ (8004fd0 <HAL_GPIO_Init+0x250>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d01f      	beq.n	8004fa2 <HAL_GPIO_Init+0x222>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd4 <HAL_GPIO_Init+0x254>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d019      	beq.n	8004f9e <HAL_GPIO_Init+0x21e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8004fd8 <HAL_GPIO_Init+0x258>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d013      	beq.n	8004f9a <HAL_GPIO_Init+0x21a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a19      	ldr	r2, [pc, #100]	@ (8004fdc <HAL_GPIO_Init+0x25c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00d      	beq.n	8004f96 <HAL_GPIO_Init+0x216>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a18      	ldr	r2, [pc, #96]	@ (8004fe0 <HAL_GPIO_Init+0x260>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d007      	beq.n	8004f92 <HAL_GPIO_Init+0x212>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a17      	ldr	r2, [pc, #92]	@ (8004fe4 <HAL_GPIO_Init+0x264>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d101      	bne.n	8004f8e <HAL_GPIO_Init+0x20e>
 8004f8a:	2309      	movs	r3, #9
 8004f8c:	e02d      	b.n	8004fea <HAL_GPIO_Init+0x26a>
 8004f8e:	230a      	movs	r3, #10
 8004f90:	e02b      	b.n	8004fea <HAL_GPIO_Init+0x26a>
 8004f92:	2308      	movs	r3, #8
 8004f94:	e029      	b.n	8004fea <HAL_GPIO_Init+0x26a>
 8004f96:	2307      	movs	r3, #7
 8004f98:	e027      	b.n	8004fea <HAL_GPIO_Init+0x26a>
 8004f9a:	2306      	movs	r3, #6
 8004f9c:	e025      	b.n	8004fea <HAL_GPIO_Init+0x26a>
 8004f9e:	2305      	movs	r3, #5
 8004fa0:	e023      	b.n	8004fea <HAL_GPIO_Init+0x26a>
 8004fa2:	2304      	movs	r3, #4
 8004fa4:	e021      	b.n	8004fea <HAL_GPIO_Init+0x26a>
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e01f      	b.n	8004fea <HAL_GPIO_Init+0x26a>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e01d      	b.n	8004fea <HAL_GPIO_Init+0x26a>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e01b      	b.n	8004fea <HAL_GPIO_Init+0x26a>
 8004fb2:	bf00      	nop
 8004fb4:	58000080 	.word	0x58000080
 8004fb8:	58024400 	.word	0x58024400
 8004fbc:	58000400 	.word	0x58000400
 8004fc0:	58020000 	.word	0x58020000
 8004fc4:	58020400 	.word	0x58020400
 8004fc8:	58020800 	.word	0x58020800
 8004fcc:	58020c00 	.word	0x58020c00
 8004fd0:	58021000 	.word	0x58021000
 8004fd4:	58021400 	.word	0x58021400
 8004fd8:	58021800 	.word	0x58021800
 8004fdc:	58021c00 	.word	0x58021c00
 8004fe0:	58022000 	.word	0x58022000
 8004fe4:	58022400 	.word	0x58022400
 8004fe8:	2300      	movs	r3, #0
 8004fea:	69fa      	ldr	r2, [r7, #28]
 8004fec:	f002 0203 	and.w	r2, r2, #3
 8004ff0:	0092      	lsls	r2, r2, #2
 8004ff2:	4093      	lsls	r3, r2
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ffa:	4938      	ldr	r1, [pc, #224]	@ (80050dc <HAL_GPIO_Init+0x35c>)
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	089b      	lsrs	r3, r3, #2
 8005000:	3302      	adds	r3, #2
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005008:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	43db      	mvns	r3, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4013      	ands	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800502e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005036:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	43db      	mvns	r3, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4013      	ands	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800505c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	43db      	mvns	r3, r3
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	4013      	ands	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	4313      	orrs	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	43db      	mvns	r3, r3
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	4013      	ands	r3, r2
 800509c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	3301      	adds	r3, #1
 80050bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	fa22 f303 	lsr.w	r3, r2, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f47f ae63 	bne.w	8004d94 <HAL_GPIO_Init+0x14>
  }
}
 80050ce:	bf00      	nop
 80050d0:	bf00      	nop
 80050d2:	3724      	adds	r7, #36	@ 0x24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	58000400 	.word	0x58000400

080050e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	460b      	mov	r3, r1
 80050ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	887b      	ldrh	r3, [r7, #2]
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050f8:	2301      	movs	r3, #1
 80050fa:	73fb      	strb	r3, [r7, #15]
 80050fc:	e001      	b.n	8005102 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050fe:	2300      	movs	r3, #0
 8005100:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005102:	7bfb      	ldrb	r3, [r7, #15]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	807b      	strh	r3, [r7, #2]
 800511c:	4613      	mov	r3, r2
 800511e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005120:	787b      	ldrb	r3, [r7, #1]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005126:	887a      	ldrh	r2, [r7, #2]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800512c:	e003      	b.n	8005136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800512e:	887b      	ldrh	r3, [r7, #2]
 8005130:	041a      	lsls	r2, r3, #16
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	619a      	str	r2, [r3, #24]
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005142:	b480      	push	{r7}
 8005144:	b085      	sub	sp, #20
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	460b      	mov	r3, r1
 800514c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005154:	887a      	ldrh	r2, [r7, #2]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4013      	ands	r3, r2
 800515a:	041a      	lsls	r2, r3, #16
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	43d9      	mvns	r1, r3
 8005160:	887b      	ldrh	r3, [r7, #2]
 8005162:	400b      	ands	r3, r1
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	619a      	str	r2, [r3, #24]
}
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
	...

08005178 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005180:	4b19      	ldr	r3, [pc, #100]	@ (80051e8 <HAL_PWREx_ConfigSupply+0x70>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b04      	cmp	r3, #4
 800518a:	d00a      	beq.n	80051a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800518c:	4b16      	ldr	r3, [pc, #88]	@ (80051e8 <HAL_PWREx_ConfigSupply+0x70>)
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	429a      	cmp	r2, r3
 8005198:	d001      	beq.n	800519e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e01f      	b.n	80051de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800519e:	2300      	movs	r3, #0
 80051a0:	e01d      	b.n	80051de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80051a2:	4b11      	ldr	r3, [pc, #68]	@ (80051e8 <HAL_PWREx_ConfigSupply+0x70>)
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f023 0207 	bic.w	r2, r3, #7
 80051aa:	490f      	ldr	r1, [pc, #60]	@ (80051e8 <HAL_PWREx_ConfigSupply+0x70>)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80051b2:	f7fe fee9 	bl	8003f88 <HAL_GetTick>
 80051b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80051b8:	e009      	b.n	80051ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80051ba:	f7fe fee5 	bl	8003f88 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051c8:	d901      	bls.n	80051ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e007      	b.n	80051de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80051ce:	4b06      	ldr	r3, [pc, #24]	@ (80051e8 <HAL_PWREx_ConfigSupply+0x70>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051da:	d1ee      	bne.n	80051ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	58024800 	.word	0x58024800

080051ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08c      	sub	sp, #48	@ 0x30
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d102      	bne.n	8005200 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	f000 bc48 	b.w	8005a90 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 8088 	beq.w	800531e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800520e:	4b99      	ldr	r3, [pc, #612]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005216:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005218:	4b96      	ldr	r3, [pc, #600]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 800521a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800521e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005220:	2b10      	cmp	r3, #16
 8005222:	d007      	beq.n	8005234 <HAL_RCC_OscConfig+0x48>
 8005224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005226:	2b18      	cmp	r3, #24
 8005228:	d111      	bne.n	800524e <HAL_RCC_OscConfig+0x62>
 800522a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522c:	f003 0303 	and.w	r3, r3, #3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d10c      	bne.n	800524e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005234:	4b8f      	ldr	r3, [pc, #572]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d06d      	beq.n	800531c <HAL_RCC_OscConfig+0x130>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d169      	bne.n	800531c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	f000 bc21 	b.w	8005a90 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005256:	d106      	bne.n	8005266 <HAL_RCC_OscConfig+0x7a>
 8005258:	4b86      	ldr	r3, [pc, #536]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a85      	ldr	r2, [pc, #532]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 800525e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	e02e      	b.n	80052c4 <HAL_RCC_OscConfig+0xd8>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10c      	bne.n	8005288 <HAL_RCC_OscConfig+0x9c>
 800526e:	4b81      	ldr	r3, [pc, #516]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a80      	ldr	r2, [pc, #512]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 8005274:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	4b7e      	ldr	r3, [pc, #504]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a7d      	ldr	r2, [pc, #500]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 8005280:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	e01d      	b.n	80052c4 <HAL_RCC_OscConfig+0xd8>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005290:	d10c      	bne.n	80052ac <HAL_RCC_OscConfig+0xc0>
 8005292:	4b78      	ldr	r3, [pc, #480]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a77      	ldr	r2, [pc, #476]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 8005298:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	4b75      	ldr	r3, [pc, #468]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a74      	ldr	r2, [pc, #464]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 80052a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	e00b      	b.n	80052c4 <HAL_RCC_OscConfig+0xd8>
 80052ac:	4b71      	ldr	r3, [pc, #452]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a70      	ldr	r2, [pc, #448]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 80052b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	4b6e      	ldr	r3, [pc, #440]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a6d      	ldr	r2, [pc, #436]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 80052be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d013      	beq.n	80052f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052cc:	f7fe fe5c 	bl	8003f88 <HAL_GetTick>
 80052d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d4:	f7fe fe58 	bl	8003f88 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b64      	cmp	r3, #100	@ 0x64
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e3d4      	b.n	8005a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052e6:	4b63      	ldr	r3, [pc, #396]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0f0      	beq.n	80052d4 <HAL_RCC_OscConfig+0xe8>
 80052f2:	e014      	b.n	800531e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f4:	f7fe fe48 	bl	8003f88 <HAL_GetTick>
 80052f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052fc:	f7fe fe44 	bl	8003f88 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b64      	cmp	r3, #100	@ 0x64
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e3c0      	b.n	8005a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800530e:	4b59      	ldr	r3, [pc, #356]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1f0      	bne.n	80052fc <HAL_RCC_OscConfig+0x110>
 800531a:	e000      	b.n	800531e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800531c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 80ca 	beq.w	80054c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800532c:	4b51      	ldr	r3, [pc, #324]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005334:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005336:	4b4f      	ldr	r3, [pc, #316]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 8005338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800533a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d007      	beq.n	8005352 <HAL_RCC_OscConfig+0x166>
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	2b18      	cmp	r3, #24
 8005346:	d156      	bne.n	80053f6 <HAL_RCC_OscConfig+0x20a>
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d151      	bne.n	80053f6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005352:	4b48      	ldr	r3, [pc, #288]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_RCC_OscConfig+0x17e>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e392      	b.n	8005a90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800536a:	4b42      	ldr	r3, [pc, #264]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f023 0219 	bic.w	r2, r3, #25
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	493f      	ldr	r1, [pc, #252]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 8005378:	4313      	orrs	r3, r2
 800537a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537c:	f7fe fe04 	bl	8003f88 <HAL_GetTick>
 8005380:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005384:	f7fe fe00 	bl	8003f88 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e37c      	b.n	8005a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005396:	4b37      	ldr	r3, [pc, #220]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0304 	and.w	r3, r3, #4
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0f0      	beq.n	8005384 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a2:	f7fe fe21 	bl	8003fe8 <HAL_GetREVID>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d817      	bhi.n	80053e0 <HAL_RCC_OscConfig+0x1f4>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	2b40      	cmp	r3, #64	@ 0x40
 80053b6:	d108      	bne.n	80053ca <HAL_RCC_OscConfig+0x1de>
 80053b8:	4b2e      	ldr	r3, [pc, #184]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80053c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 80053c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053c6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053c8:	e07a      	b.n	80054c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ca:	4b2a      	ldr	r3, [pc, #168]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	031b      	lsls	r3, r3, #12
 80053d8:	4926      	ldr	r1, [pc, #152]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053de:	e06f      	b.n	80054c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e0:	4b24      	ldr	r3, [pc, #144]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	061b      	lsls	r3, r3, #24
 80053ee:	4921      	ldr	r1, [pc, #132]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053f4:	e064      	b.n	80054c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d047      	beq.n	800548e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80053fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f023 0219 	bic.w	r2, r3, #25
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	491a      	ldr	r1, [pc, #104]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 800540c:	4313      	orrs	r3, r2
 800540e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005410:	f7fe fdba 	bl	8003f88 <HAL_GetTick>
 8005414:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005418:	f7fe fdb6 	bl	8003f88 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e332      	b.n	8005a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800542a:	4b12      	ldr	r3, [pc, #72]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005436:	f7fe fdd7 	bl	8003fe8 <HAL_GetREVID>
 800543a:	4603      	mov	r3, r0
 800543c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005440:	4293      	cmp	r3, r2
 8005442:	d819      	bhi.n	8005478 <HAL_RCC_OscConfig+0x28c>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	2b40      	cmp	r3, #64	@ 0x40
 800544a:	d108      	bne.n	800545e <HAL_RCC_OscConfig+0x272>
 800544c:	4b09      	ldr	r3, [pc, #36]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005454:	4a07      	ldr	r2, [pc, #28]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 8005456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800545a:	6053      	str	r3, [r2, #4]
 800545c:	e030      	b.n	80054c0 <HAL_RCC_OscConfig+0x2d4>
 800545e:	4b05      	ldr	r3, [pc, #20]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	031b      	lsls	r3, r3, #12
 800546c:	4901      	ldr	r1, [pc, #4]	@ (8005474 <HAL_RCC_OscConfig+0x288>)
 800546e:	4313      	orrs	r3, r2
 8005470:	604b      	str	r3, [r1, #4]
 8005472:	e025      	b.n	80054c0 <HAL_RCC_OscConfig+0x2d4>
 8005474:	58024400 	.word	0x58024400
 8005478:	4b9a      	ldr	r3, [pc, #616]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	061b      	lsls	r3, r3, #24
 8005486:	4997      	ldr	r1, [pc, #604]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 8005488:	4313      	orrs	r3, r2
 800548a:	604b      	str	r3, [r1, #4]
 800548c:	e018      	b.n	80054c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800548e:	4b95      	ldr	r3, [pc, #596]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a94      	ldr	r2, [pc, #592]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 8005494:	f023 0301 	bic.w	r3, r3, #1
 8005498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549a:	f7fe fd75 	bl	8003f88 <HAL_GetTick>
 800549e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054a2:	f7fe fd71 	bl	8003f88 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e2ed      	b.n	8005a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054b4:	4b8b      	ldr	r3, [pc, #556]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1f0      	bne.n	80054a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0310 	and.w	r3, r3, #16
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 80a9 	beq.w	8005620 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054ce:	4b85      	ldr	r3, [pc, #532]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054d8:	4b82      	ldr	r3, [pc, #520]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 80054da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d007      	beq.n	80054f4 <HAL_RCC_OscConfig+0x308>
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	2b18      	cmp	r3, #24
 80054e8:	d13a      	bne.n	8005560 <HAL_RCC_OscConfig+0x374>
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f003 0303 	and.w	r3, r3, #3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d135      	bne.n	8005560 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054f4:	4b7b      	ldr	r3, [pc, #492]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d005      	beq.n	800550c <HAL_RCC_OscConfig+0x320>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	2b80      	cmp	r3, #128	@ 0x80
 8005506:	d001      	beq.n	800550c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e2c1      	b.n	8005a90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800550c:	f7fe fd6c 	bl	8003fe8 <HAL_GetREVID>
 8005510:	4603      	mov	r3, r0
 8005512:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005516:	4293      	cmp	r3, r2
 8005518:	d817      	bhi.n	800554a <HAL_RCC_OscConfig+0x35e>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	2b20      	cmp	r3, #32
 8005520:	d108      	bne.n	8005534 <HAL_RCC_OscConfig+0x348>
 8005522:	4b70      	ldr	r3, [pc, #448]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800552a:	4a6e      	ldr	r2, [pc, #440]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 800552c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005530:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005532:	e075      	b.n	8005620 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005534:	4b6b      	ldr	r3, [pc, #428]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	069b      	lsls	r3, r3, #26
 8005542:	4968      	ldr	r1, [pc, #416]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 8005544:	4313      	orrs	r3, r2
 8005546:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005548:	e06a      	b.n	8005620 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800554a:	4b66      	ldr	r3, [pc, #408]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	061b      	lsls	r3, r3, #24
 8005558:	4962      	ldr	r1, [pc, #392]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 800555a:	4313      	orrs	r3, r2
 800555c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800555e:	e05f      	b.n	8005620 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d042      	beq.n	80055ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005568:	4b5e      	ldr	r3, [pc, #376]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a5d      	ldr	r2, [pc, #372]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 800556e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005574:	f7fe fd08 	bl	8003f88 <HAL_GetTick>
 8005578:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800557c:	f7fe fd04 	bl	8003f88 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e280      	b.n	8005a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800558e:	4b55      	ldr	r3, [pc, #340]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0f0      	beq.n	800557c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800559a:	f7fe fd25 	bl	8003fe8 <HAL_GetREVID>
 800559e:	4603      	mov	r3, r0
 80055a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d817      	bhi.n	80055d8 <HAL_RCC_OscConfig+0x3ec>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	d108      	bne.n	80055c2 <HAL_RCC_OscConfig+0x3d6>
 80055b0:	4b4c      	ldr	r3, [pc, #304]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80055b8:	4a4a      	ldr	r2, [pc, #296]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 80055ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055be:	6053      	str	r3, [r2, #4]
 80055c0:	e02e      	b.n	8005620 <HAL_RCC_OscConfig+0x434>
 80055c2:	4b48      	ldr	r3, [pc, #288]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	069b      	lsls	r3, r3, #26
 80055d0:	4944      	ldr	r1, [pc, #272]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	604b      	str	r3, [r1, #4]
 80055d6:	e023      	b.n	8005620 <HAL_RCC_OscConfig+0x434>
 80055d8:	4b42      	ldr	r3, [pc, #264]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	061b      	lsls	r3, r3, #24
 80055e6:	493f      	ldr	r1, [pc, #252]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60cb      	str	r3, [r1, #12]
 80055ec:	e018      	b.n	8005620 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80055ee:	4b3d      	ldr	r3, [pc, #244]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a3c      	ldr	r2, [pc, #240]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 80055f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fa:	f7fe fcc5 	bl	8003f88 <HAL_GetTick>
 80055fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005602:	f7fe fcc1 	bl	8003f88 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e23d      	b.n	8005a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005614:	4b33      	ldr	r3, [pc, #204]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1f0      	bne.n	8005602 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b00      	cmp	r3, #0
 800562a:	d036      	beq.n	800569a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d019      	beq.n	8005668 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005634:	4b2b      	ldr	r3, [pc, #172]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 8005636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005638:	4a2a      	ldr	r2, [pc, #168]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 800563a:	f043 0301 	orr.w	r3, r3, #1
 800563e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005640:	f7fe fca2 	bl	8003f88 <HAL_GetTick>
 8005644:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005648:	f7fe fc9e 	bl	8003f88 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e21a      	b.n	8005a90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800565a:	4b22      	ldr	r3, [pc, #136]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 800565c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0f0      	beq.n	8005648 <HAL_RCC_OscConfig+0x45c>
 8005666:	e018      	b.n	800569a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005668:	4b1e      	ldr	r3, [pc, #120]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 800566a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800566c:	4a1d      	ldr	r2, [pc, #116]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 800566e:	f023 0301 	bic.w	r3, r3, #1
 8005672:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005674:	f7fe fc88 	bl	8003f88 <HAL_GetTick>
 8005678:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800567c:	f7fe fc84 	bl	8003f88 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e200      	b.n	8005a90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800568e:	4b15      	ldr	r3, [pc, #84]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 8005690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f0      	bne.n	800567c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d039      	beq.n	800571a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d01c      	beq.n	80056e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056ae:	4b0d      	ldr	r3, [pc, #52]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a0c      	ldr	r2, [pc, #48]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 80056b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80056b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056ba:	f7fe fc65 	bl	8003f88 <HAL_GetTick>
 80056be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056c2:	f7fe fc61 	bl	8003f88 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e1dd      	b.n	8005a90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056d4:	4b03      	ldr	r3, [pc, #12]	@ (80056e4 <HAL_RCC_OscConfig+0x4f8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0f0      	beq.n	80056c2 <HAL_RCC_OscConfig+0x4d6>
 80056e0:	e01b      	b.n	800571a <HAL_RCC_OscConfig+0x52e>
 80056e2:	bf00      	nop
 80056e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056e8:	4b9b      	ldr	r3, [pc, #620]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a9a      	ldr	r2, [pc, #616]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 80056ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056f4:	f7fe fc48 	bl	8003f88 <HAL_GetTick>
 80056f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056fc:	f7fe fc44 	bl	8003f88 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e1c0      	b.n	8005a90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800570e:	4b92      	ldr	r3, [pc, #584]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f0      	bne.n	80056fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 8081 	beq.w	800582a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005728:	4b8c      	ldr	r3, [pc, #560]	@ (800595c <HAL_RCC_OscConfig+0x770>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a8b      	ldr	r2, [pc, #556]	@ (800595c <HAL_RCC_OscConfig+0x770>)
 800572e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005732:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005734:	f7fe fc28 	bl	8003f88 <HAL_GetTick>
 8005738:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800573c:	f7fe fc24 	bl	8003f88 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b64      	cmp	r3, #100	@ 0x64
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e1a0      	b.n	8005a90 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800574e:	4b83      	ldr	r3, [pc, #524]	@ (800595c <HAL_RCC_OscConfig+0x770>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0f0      	beq.n	800573c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d106      	bne.n	8005770 <HAL_RCC_OscConfig+0x584>
 8005762:	4b7d      	ldr	r3, [pc, #500]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 8005764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005766:	4a7c      	ldr	r2, [pc, #496]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 8005768:	f043 0301 	orr.w	r3, r3, #1
 800576c:	6713      	str	r3, [r2, #112]	@ 0x70
 800576e:	e02d      	b.n	80057cc <HAL_RCC_OscConfig+0x5e0>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10c      	bne.n	8005792 <HAL_RCC_OscConfig+0x5a6>
 8005778:	4b77      	ldr	r3, [pc, #476]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 800577a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800577c:	4a76      	ldr	r2, [pc, #472]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 800577e:	f023 0301 	bic.w	r3, r3, #1
 8005782:	6713      	str	r3, [r2, #112]	@ 0x70
 8005784:	4b74      	ldr	r3, [pc, #464]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 8005786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005788:	4a73      	ldr	r2, [pc, #460]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 800578a:	f023 0304 	bic.w	r3, r3, #4
 800578e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005790:	e01c      	b.n	80057cc <HAL_RCC_OscConfig+0x5e0>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2b05      	cmp	r3, #5
 8005798:	d10c      	bne.n	80057b4 <HAL_RCC_OscConfig+0x5c8>
 800579a:	4b6f      	ldr	r3, [pc, #444]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 800579c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800579e:	4a6e      	ldr	r2, [pc, #440]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 80057a0:	f043 0304 	orr.w	r3, r3, #4
 80057a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80057a6:	4b6c      	ldr	r3, [pc, #432]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 80057a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057aa:	4a6b      	ldr	r2, [pc, #428]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 80057ac:	f043 0301 	orr.w	r3, r3, #1
 80057b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80057b2:	e00b      	b.n	80057cc <HAL_RCC_OscConfig+0x5e0>
 80057b4:	4b68      	ldr	r3, [pc, #416]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 80057b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b8:	4a67      	ldr	r2, [pc, #412]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 80057ba:	f023 0301 	bic.w	r3, r3, #1
 80057be:	6713      	str	r3, [r2, #112]	@ 0x70
 80057c0:	4b65      	ldr	r3, [pc, #404]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 80057c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c4:	4a64      	ldr	r2, [pc, #400]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 80057c6:	f023 0304 	bic.w	r3, r3, #4
 80057ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d015      	beq.n	8005800 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d4:	f7fe fbd8 	bl	8003f88 <HAL_GetTick>
 80057d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057da:	e00a      	b.n	80057f2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057dc:	f7fe fbd4 	bl	8003f88 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e14e      	b.n	8005a90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057f2:	4b59      	ldr	r3, [pc, #356]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 80057f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0ee      	beq.n	80057dc <HAL_RCC_OscConfig+0x5f0>
 80057fe:	e014      	b.n	800582a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005800:	f7fe fbc2 	bl	8003f88 <HAL_GetTick>
 8005804:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005806:	e00a      	b.n	800581e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005808:	f7fe fbbe 	bl	8003f88 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005816:	4293      	cmp	r3, r2
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e138      	b.n	8005a90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800581e:	4b4e      	ldr	r3, [pc, #312]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 8005820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1ee      	bne.n	8005808 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 812d 	beq.w	8005a8e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005834:	4b48      	ldr	r3, [pc, #288]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800583c:	2b18      	cmp	r3, #24
 800583e:	f000 80bd 	beq.w	80059bc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005846:	2b02      	cmp	r3, #2
 8005848:	f040 809e 	bne.w	8005988 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800584c:	4b42      	ldr	r3, [pc, #264]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a41      	ldr	r2, [pc, #260]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 8005852:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005858:	f7fe fb96 	bl	8003f88 <HAL_GetTick>
 800585c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005860:	f7fe fb92 	bl	8003f88 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e10e      	b.n	8005a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005872:	4b39      	ldr	r3, [pc, #228]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f0      	bne.n	8005860 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800587e:	4b36      	ldr	r3, [pc, #216]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 8005880:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005882:	4b37      	ldr	r3, [pc, #220]	@ (8005960 <HAL_RCC_OscConfig+0x774>)
 8005884:	4013      	ands	r3, r2
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800588e:	0112      	lsls	r2, r2, #4
 8005890:	430a      	orrs	r2, r1
 8005892:	4931      	ldr	r1, [pc, #196]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 8005894:	4313      	orrs	r3, r2
 8005896:	628b      	str	r3, [r1, #40]	@ 0x28
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589c:	3b01      	subs	r3, #1
 800589e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a6:	3b01      	subs	r3, #1
 80058a8:	025b      	lsls	r3, r3, #9
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	431a      	orrs	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b2:	3b01      	subs	r3, #1
 80058b4:	041b      	lsls	r3, r3, #16
 80058b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c0:	3b01      	subs	r3, #1
 80058c2:	061b      	lsls	r3, r3, #24
 80058c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80058c8:	4923      	ldr	r1, [pc, #140]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80058ce:	4b22      	ldr	r3, [pc, #136]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 80058d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d2:	4a21      	ldr	r2, [pc, #132]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 80058d4:	f023 0301 	bic.w	r3, r3, #1
 80058d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058da:	4b1f      	ldr	r3, [pc, #124]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 80058dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058de:	4b21      	ldr	r3, [pc, #132]	@ (8005964 <HAL_RCC_OscConfig+0x778>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80058e6:	00d2      	lsls	r2, r2, #3
 80058e8:	491b      	ldr	r1, [pc, #108]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80058ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 80058f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f2:	f023 020c 	bic.w	r2, r3, #12
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fa:	4917      	ldr	r1, [pc, #92]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005900:	4b15      	ldr	r3, [pc, #84]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 8005902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005904:	f023 0202 	bic.w	r2, r3, #2
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590c:	4912      	ldr	r1, [pc, #72]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 800590e:	4313      	orrs	r3, r2
 8005910:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005912:	4b11      	ldr	r3, [pc, #68]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 8005914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005916:	4a10      	ldr	r2, [pc, #64]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 8005918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800591c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800591e:	4b0e      	ldr	r3, [pc, #56]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 8005920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005922:	4a0d      	ldr	r2, [pc, #52]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 8005924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005928:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800592a:	4b0b      	ldr	r3, [pc, #44]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 800592c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592e:	4a0a      	ldr	r2, [pc, #40]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 8005930:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005934:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005936:	4b08      	ldr	r3, [pc, #32]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 8005938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593a:	4a07      	ldr	r2, [pc, #28]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 800593c:	f043 0301 	orr.w	r3, r3, #1
 8005940:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005942:	4b05      	ldr	r3, [pc, #20]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a04      	ldr	r2, [pc, #16]	@ (8005958 <HAL_RCC_OscConfig+0x76c>)
 8005948:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800594c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594e:	f7fe fb1b 	bl	8003f88 <HAL_GetTick>
 8005952:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005954:	e011      	b.n	800597a <HAL_RCC_OscConfig+0x78e>
 8005956:	bf00      	nop
 8005958:	58024400 	.word	0x58024400
 800595c:	58024800 	.word	0x58024800
 8005960:	fffffc0c 	.word	0xfffffc0c
 8005964:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005968:	f7fe fb0e 	bl	8003f88 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e08a      	b.n	8005a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800597a:	4b47      	ldr	r3, [pc, #284]	@ (8005a98 <HAL_RCC_OscConfig+0x8ac>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0f0      	beq.n	8005968 <HAL_RCC_OscConfig+0x77c>
 8005986:	e082      	b.n	8005a8e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005988:	4b43      	ldr	r3, [pc, #268]	@ (8005a98 <HAL_RCC_OscConfig+0x8ac>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a42      	ldr	r2, [pc, #264]	@ (8005a98 <HAL_RCC_OscConfig+0x8ac>)
 800598e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005994:	f7fe faf8 	bl	8003f88 <HAL_GetTick>
 8005998:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800599c:	f7fe faf4 	bl	8003f88 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e070      	b.n	8005a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059ae:	4b3a      	ldr	r3, [pc, #232]	@ (8005a98 <HAL_RCC_OscConfig+0x8ac>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1f0      	bne.n	800599c <HAL_RCC_OscConfig+0x7b0>
 80059ba:	e068      	b.n	8005a8e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80059bc:	4b36      	ldr	r3, [pc, #216]	@ (8005a98 <HAL_RCC_OscConfig+0x8ac>)
 80059be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80059c2:	4b35      	ldr	r3, [pc, #212]	@ (8005a98 <HAL_RCC_OscConfig+0x8ac>)
 80059c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d031      	beq.n	8005a34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f003 0203 	and.w	r2, r3, #3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059da:	429a      	cmp	r2, r3
 80059dc:	d12a      	bne.n	8005a34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	091b      	lsrs	r3, r3, #4
 80059e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d122      	bne.n	8005a34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d11a      	bne.n	8005a34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	0a5b      	lsrs	r3, r3, #9
 8005a02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a0a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d111      	bne.n	8005a34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	0c1b      	lsrs	r3, r3, #16
 8005a14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d108      	bne.n	8005a34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	0e1b      	lsrs	r3, r3, #24
 8005a26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d001      	beq.n	8005a38 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e02b      	b.n	8005a90 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005a38:	4b17      	ldr	r3, [pc, #92]	@ (8005a98 <HAL_RCC_OscConfig+0x8ac>)
 8005a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a3c:	08db      	lsrs	r3, r3, #3
 8005a3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a42:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d01f      	beq.n	8005a8e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005a4e:	4b12      	ldr	r3, [pc, #72]	@ (8005a98 <HAL_RCC_OscConfig+0x8ac>)
 8005a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a52:	4a11      	ldr	r2, [pc, #68]	@ (8005a98 <HAL_RCC_OscConfig+0x8ac>)
 8005a54:	f023 0301 	bic.w	r3, r3, #1
 8005a58:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a5a:	f7fe fa95 	bl	8003f88 <HAL_GetTick>
 8005a5e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005a60:	bf00      	nop
 8005a62:	f7fe fa91 	bl	8003f88 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d0f9      	beq.n	8005a62 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a98 <HAL_RCC_OscConfig+0x8ac>)
 8005a70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a72:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <HAL_RCC_OscConfig+0x8b0>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a7a:	00d2      	lsls	r2, r2, #3
 8005a7c:	4906      	ldr	r1, [pc, #24]	@ (8005a98 <HAL_RCC_OscConfig+0x8ac>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005a82:	4b05      	ldr	r3, [pc, #20]	@ (8005a98 <HAL_RCC_OscConfig+0x8ac>)
 8005a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a86:	4a04      	ldr	r2, [pc, #16]	@ (8005a98 <HAL_RCC_OscConfig+0x8ac>)
 8005a88:	f043 0301 	orr.w	r3, r3, #1
 8005a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3730      	adds	r7, #48	@ 0x30
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	58024400 	.word	0x58024400
 8005a9c:	ffff0007 	.word	0xffff0007

08005aa0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e19c      	b.n	8005dee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ab4:	4b8a      	ldr	r3, [pc, #552]	@ (8005ce0 <HAL_RCC_ClockConfig+0x240>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d910      	bls.n	8005ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ac2:	4b87      	ldr	r3, [pc, #540]	@ (8005ce0 <HAL_RCC_ClockConfig+0x240>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f023 020f 	bic.w	r2, r3, #15
 8005aca:	4985      	ldr	r1, [pc, #532]	@ (8005ce0 <HAL_RCC_ClockConfig+0x240>)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ad2:	4b83      	ldr	r3, [pc, #524]	@ (8005ce0 <HAL_RCC_ClockConfig+0x240>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 030f 	and.w	r3, r3, #15
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d001      	beq.n	8005ae4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e184      	b.n	8005dee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d010      	beq.n	8005b12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691a      	ldr	r2, [r3, #16]
 8005af4:	4b7b      	ldr	r3, [pc, #492]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d908      	bls.n	8005b12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b00:	4b78      	ldr	r3, [pc, #480]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	4975      	ldr	r1, [pc, #468]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d010      	beq.n	8005b40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	695a      	ldr	r2, [r3, #20]
 8005b22:	4b70      	ldr	r3, [pc, #448]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d908      	bls.n	8005b40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b2e:	4b6d      	ldr	r3, [pc, #436]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	496a      	ldr	r1, [pc, #424]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0310 	and.w	r3, r3, #16
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d010      	beq.n	8005b6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	699a      	ldr	r2, [r3, #24]
 8005b50:	4b64      	ldr	r3, [pc, #400]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d908      	bls.n	8005b6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b5c:	4b61      	ldr	r3, [pc, #388]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	495e      	ldr	r1, [pc, #376]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0320 	and.w	r3, r3, #32
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d010      	beq.n	8005b9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69da      	ldr	r2, [r3, #28]
 8005b7e:	4b59      	ldr	r3, [pc, #356]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d908      	bls.n	8005b9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b8a:	4b56      	ldr	r3, [pc, #344]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	4953      	ldr	r1, [pc, #332]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d010      	beq.n	8005bca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68da      	ldr	r2, [r3, #12]
 8005bac:	4b4d      	ldr	r3, [pc, #308]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	f003 030f 	and.w	r3, r3, #15
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d908      	bls.n	8005bca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bb8:	4b4a      	ldr	r3, [pc, #296]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	f023 020f 	bic.w	r2, r3, #15
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	4947      	ldr	r1, [pc, #284]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d055      	beq.n	8005c82 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005bd6:	4b43      	ldr	r3, [pc, #268]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	4940      	ldr	r1, [pc, #256]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d107      	bne.n	8005c00 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bf0:	4b3c      	ldr	r3, [pc, #240]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d121      	bne.n	8005c40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e0f6      	b.n	8005dee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d107      	bne.n	8005c18 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c08:	4b36      	ldr	r3, [pc, #216]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d115      	bne.n	8005c40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e0ea      	b.n	8005dee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d107      	bne.n	8005c30 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c20:	4b30      	ldr	r3, [pc, #192]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d109      	bne.n	8005c40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e0de      	b.n	8005dee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c30:	4b2c      	ldr	r3, [pc, #176]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e0d6      	b.n	8005dee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c40:	4b28      	ldr	r3, [pc, #160]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f023 0207 	bic.w	r2, r3, #7
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	4925      	ldr	r1, [pc, #148]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c52:	f7fe f999 	bl	8003f88 <HAL_GetTick>
 8005c56:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c58:	e00a      	b.n	8005c70 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c5a:	f7fe f995 	bl	8003f88 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e0be      	b.n	8005dee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c70:	4b1c      	ldr	r3, [pc, #112]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d1eb      	bne.n	8005c5a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d010      	beq.n	8005cb0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	4b14      	ldr	r3, [pc, #80]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d208      	bcs.n	8005cb0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c9e:	4b11      	ldr	r3, [pc, #68]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f023 020f 	bic.w	r2, r3, #15
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	490e      	ldr	r1, [pc, #56]	@ (8005ce4 <HAL_RCC_ClockConfig+0x244>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce0 <HAL_RCC_ClockConfig+0x240>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 030f 	and.w	r3, r3, #15
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d214      	bcs.n	8005ce8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cbe:	4b08      	ldr	r3, [pc, #32]	@ (8005ce0 <HAL_RCC_ClockConfig+0x240>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f023 020f 	bic.w	r2, r3, #15
 8005cc6:	4906      	ldr	r1, [pc, #24]	@ (8005ce0 <HAL_RCC_ClockConfig+0x240>)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cce:	4b04      	ldr	r3, [pc, #16]	@ (8005ce0 <HAL_RCC_ClockConfig+0x240>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d005      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e086      	b.n	8005dee <HAL_RCC_ClockConfig+0x34e>
 8005ce0:	52002000 	.word	0x52002000
 8005ce4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d010      	beq.n	8005d16 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691a      	ldr	r2, [r3, #16]
 8005cf8:	4b3f      	ldr	r3, [pc, #252]	@ (8005df8 <HAL_RCC_ClockConfig+0x358>)
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d208      	bcs.n	8005d16 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d04:	4b3c      	ldr	r3, [pc, #240]	@ (8005df8 <HAL_RCC_ClockConfig+0x358>)
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	4939      	ldr	r1, [pc, #228]	@ (8005df8 <HAL_RCC_ClockConfig+0x358>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d010      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695a      	ldr	r2, [r3, #20]
 8005d26:	4b34      	ldr	r3, [pc, #208]	@ (8005df8 <HAL_RCC_ClockConfig+0x358>)
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d208      	bcs.n	8005d44 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d32:	4b31      	ldr	r3, [pc, #196]	@ (8005df8 <HAL_RCC_ClockConfig+0x358>)
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	492e      	ldr	r1, [pc, #184]	@ (8005df8 <HAL_RCC_ClockConfig+0x358>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0310 	and.w	r3, r3, #16
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d010      	beq.n	8005d72 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699a      	ldr	r2, [r3, #24]
 8005d54:	4b28      	ldr	r3, [pc, #160]	@ (8005df8 <HAL_RCC_ClockConfig+0x358>)
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d208      	bcs.n	8005d72 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d60:	4b25      	ldr	r3, [pc, #148]	@ (8005df8 <HAL_RCC_ClockConfig+0x358>)
 8005d62:	69db      	ldr	r3, [r3, #28]
 8005d64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	4922      	ldr	r1, [pc, #136]	@ (8005df8 <HAL_RCC_ClockConfig+0x358>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0320 	and.w	r3, r3, #32
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d010      	beq.n	8005da0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69da      	ldr	r2, [r3, #28]
 8005d82:	4b1d      	ldr	r3, [pc, #116]	@ (8005df8 <HAL_RCC_ClockConfig+0x358>)
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d208      	bcs.n	8005da0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8005df8 <HAL_RCC_ClockConfig+0x358>)
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	4917      	ldr	r1, [pc, #92]	@ (8005df8 <HAL_RCC_ClockConfig+0x358>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005da0:	f000 f834 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8005da4:	4602      	mov	r2, r0
 8005da6:	4b14      	ldr	r3, [pc, #80]	@ (8005df8 <HAL_RCC_ClockConfig+0x358>)
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	0a1b      	lsrs	r3, r3, #8
 8005dac:	f003 030f 	and.w	r3, r3, #15
 8005db0:	4912      	ldr	r1, [pc, #72]	@ (8005dfc <HAL_RCC_ClockConfig+0x35c>)
 8005db2:	5ccb      	ldrb	r3, [r1, r3]
 8005db4:	f003 031f 	and.w	r3, r3, #31
 8005db8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dbc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8005df8 <HAL_RCC_ClockConfig+0x358>)
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	4a0d      	ldr	r2, [pc, #52]	@ (8005dfc <HAL_RCC_ClockConfig+0x35c>)
 8005dc8:	5cd3      	ldrb	r3, [r2, r3]
 8005dca:	f003 031f 	and.w	r3, r3, #31
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8005e00 <HAL_RCC_ClockConfig+0x360>)
 8005dd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8005e04 <HAL_RCC_ClockConfig+0x364>)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005dde:	4b0a      	ldr	r3, [pc, #40]	@ (8005e08 <HAL_RCC_ClockConfig+0x368>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fb fd48 	bl	8001878 <HAL_InitTick>
 8005de8:	4603      	mov	r3, r0
 8005dea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	58024400 	.word	0x58024400
 8005dfc:	08018964 	.word	0x08018964
 8005e00:	24000004 	.word	0x24000004
 8005e04:	24000000 	.word	0x24000000
 8005e08:	24000008 	.word	0x24000008

08005e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b089      	sub	sp, #36	@ 0x24
 8005e10:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e12:	4bb3      	ldr	r3, [pc, #716]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e1a:	2b18      	cmp	r3, #24
 8005e1c:	f200 8155 	bhi.w	80060ca <HAL_RCC_GetSysClockFreq+0x2be>
 8005e20:	a201      	add	r2, pc, #4	@ (adr r2, 8005e28 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e26:	bf00      	nop
 8005e28:	08005e8d 	.word	0x08005e8d
 8005e2c:	080060cb 	.word	0x080060cb
 8005e30:	080060cb 	.word	0x080060cb
 8005e34:	080060cb 	.word	0x080060cb
 8005e38:	080060cb 	.word	0x080060cb
 8005e3c:	080060cb 	.word	0x080060cb
 8005e40:	080060cb 	.word	0x080060cb
 8005e44:	080060cb 	.word	0x080060cb
 8005e48:	08005eb3 	.word	0x08005eb3
 8005e4c:	080060cb 	.word	0x080060cb
 8005e50:	080060cb 	.word	0x080060cb
 8005e54:	080060cb 	.word	0x080060cb
 8005e58:	080060cb 	.word	0x080060cb
 8005e5c:	080060cb 	.word	0x080060cb
 8005e60:	080060cb 	.word	0x080060cb
 8005e64:	080060cb 	.word	0x080060cb
 8005e68:	08005eb9 	.word	0x08005eb9
 8005e6c:	080060cb 	.word	0x080060cb
 8005e70:	080060cb 	.word	0x080060cb
 8005e74:	080060cb 	.word	0x080060cb
 8005e78:	080060cb 	.word	0x080060cb
 8005e7c:	080060cb 	.word	0x080060cb
 8005e80:	080060cb 	.word	0x080060cb
 8005e84:	080060cb 	.word	0x080060cb
 8005e88:	08005ebf 	.word	0x08005ebf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e8c:	4b94      	ldr	r3, [pc, #592]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0320 	and.w	r3, r3, #32
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d009      	beq.n	8005eac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e98:	4b91      	ldr	r3, [pc, #580]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	08db      	lsrs	r3, r3, #3
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	4a90      	ldr	r2, [pc, #576]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005eaa:	e111      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005eac:	4b8d      	ldr	r3, [pc, #564]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005eae:	61bb      	str	r3, [r7, #24]
      break;
 8005eb0:	e10e      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005eb2:	4b8d      	ldr	r3, [pc, #564]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005eb4:	61bb      	str	r3, [r7, #24]
      break;
 8005eb6:	e10b      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005eb8:	4b8c      	ldr	r3, [pc, #560]	@ (80060ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005eba:	61bb      	str	r3, [r7, #24]
      break;
 8005ebc:	e108      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ebe:	4b88      	ldr	r3, [pc, #544]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005ec8:	4b85      	ldr	r3, [pc, #532]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ecc:	091b      	lsrs	r3, r3, #4
 8005ece:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ed2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005ed4:	4b82      	ldr	r3, [pc, #520]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005ede:	4b80      	ldr	r3, [pc, #512]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee2:	08db      	lsrs	r3, r3, #3
 8005ee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	fb02 f303 	mul.w	r3, r2, r3
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 80e1 	beq.w	80060c4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	f000 8083 	beq.w	8006010 <HAL_RCC_GetSysClockFreq+0x204>
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	f200 80a1 	bhi.w	8006054 <HAL_RCC_GetSysClockFreq+0x248>
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <HAL_RCC_GetSysClockFreq+0x114>
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d056      	beq.n	8005fcc <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f1e:	e099      	b.n	8006054 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f20:	4b6f      	ldr	r3, [pc, #444]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d02d      	beq.n	8005f88 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f2c:	4b6c      	ldr	r3, [pc, #432]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	08db      	lsrs	r3, r3, #3
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	4a6b      	ldr	r2, [pc, #428]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f38:	fa22 f303 	lsr.w	r3, r2, r3
 8005f3c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	ee07 3a90 	vmov	s15, r3
 8005f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	ee07 3a90 	vmov	s15, r3
 8005f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f56:	4b62      	ldr	r3, [pc, #392]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f6a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80060f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f82:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005f86:	e087      	b.n	8006098 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	ee07 3a90 	vmov	s15, r3
 8005f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f92:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80060f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f9a:	4b51      	ldr	r3, [pc, #324]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80060f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005fca:	e065      	b.n	8006098 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80060f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fde:	4b40      	ldr	r3, [pc, #256]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe6:	ee07 3a90 	vmov	s15, r3
 8005fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ff2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80060f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800600a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800600e:	e043      	b.n	8006098 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	ee07 3a90 	vmov	s15, r3
 8006016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80060fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800601e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006022:	4b2f      	ldr	r3, [pc, #188]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006032:	ed97 6a02 	vldr	s12, [r7, #8]
 8006036:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80060f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800603a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800603e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800604e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006052:	e021      	b.n	8006098 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80060f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006066:	4b1e      	ldr	r3, [pc, #120]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006076:	ed97 6a02 	vldr	s12, [r7, #8]
 800607a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80060f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800607e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800608a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800608e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006092:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006096:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006098:	4b11      	ldr	r3, [pc, #68]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800609a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609c:	0a5b      	lsrs	r3, r3, #9
 800609e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060a2:	3301      	adds	r3, #1
 80060a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	ee07 3a90 	vmov	s15, r3
 80060ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80060b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060bc:	ee17 3a90 	vmov	r3, s15
 80060c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80060c2:	e005      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61bb      	str	r3, [r7, #24]
      break;
 80060c8:	e002      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80060ca:	4b07      	ldr	r3, [pc, #28]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060cc:	61bb      	str	r3, [r7, #24]
      break;
 80060ce:	bf00      	nop
  }

  return sysclockfreq;
 80060d0:	69bb      	ldr	r3, [r7, #24]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3724      	adds	r7, #36	@ 0x24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	58024400 	.word	0x58024400
 80060e4:	03d09000 	.word	0x03d09000
 80060e8:	003d0900 	.word	0x003d0900
 80060ec:	017d7840 	.word	0x017d7840
 80060f0:	46000000 	.word	0x46000000
 80060f4:	4c742400 	.word	0x4c742400
 80060f8:	4a742400 	.word	0x4a742400
 80060fc:	4bbebc20 	.word	0x4bbebc20

08006100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006106:	f7ff fe81 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 800610a:	4602      	mov	r2, r0
 800610c:	4b10      	ldr	r3, [pc, #64]	@ (8006150 <HAL_RCC_GetHCLKFreq+0x50>)
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	0a1b      	lsrs	r3, r3, #8
 8006112:	f003 030f 	and.w	r3, r3, #15
 8006116:	490f      	ldr	r1, [pc, #60]	@ (8006154 <HAL_RCC_GetHCLKFreq+0x54>)
 8006118:	5ccb      	ldrb	r3, [r1, r3]
 800611a:	f003 031f 	and.w	r3, r3, #31
 800611e:	fa22 f303 	lsr.w	r3, r2, r3
 8006122:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006124:	4b0a      	ldr	r3, [pc, #40]	@ (8006150 <HAL_RCC_GetHCLKFreq+0x50>)
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	f003 030f 	and.w	r3, r3, #15
 800612c:	4a09      	ldr	r2, [pc, #36]	@ (8006154 <HAL_RCC_GetHCLKFreq+0x54>)
 800612e:	5cd3      	ldrb	r3, [r2, r3]
 8006130:	f003 031f 	and.w	r3, r3, #31
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	fa22 f303 	lsr.w	r3, r2, r3
 800613a:	4a07      	ldr	r2, [pc, #28]	@ (8006158 <HAL_RCC_GetHCLKFreq+0x58>)
 800613c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800613e:	4a07      	ldr	r2, [pc, #28]	@ (800615c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006144:	4b04      	ldr	r3, [pc, #16]	@ (8006158 <HAL_RCC_GetHCLKFreq+0x58>)
 8006146:	681b      	ldr	r3, [r3, #0]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	58024400 	.word	0x58024400
 8006154:	08018964 	.word	0x08018964
 8006158:	24000004 	.word	0x24000004
 800615c:	24000000 	.word	0x24000000

08006160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006164:	f7ff ffcc 	bl	8006100 <HAL_RCC_GetHCLKFreq>
 8006168:	4602      	mov	r2, r0
 800616a:	4b06      	ldr	r3, [pc, #24]	@ (8006184 <HAL_RCC_GetPCLK1Freq+0x24>)
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	091b      	lsrs	r3, r3, #4
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	4904      	ldr	r1, [pc, #16]	@ (8006188 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006176:	5ccb      	ldrb	r3, [r1, r3]
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006180:	4618      	mov	r0, r3
 8006182:	bd80      	pop	{r7, pc}
 8006184:	58024400 	.word	0x58024400
 8006188:	08018964 	.word	0x08018964

0800618c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006190:	f7ff ffb6 	bl	8006100 <HAL_RCC_GetHCLKFreq>
 8006194:	4602      	mov	r2, r0
 8006196:	4b06      	ldr	r3, [pc, #24]	@ (80061b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	0a1b      	lsrs	r3, r3, #8
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	4904      	ldr	r1, [pc, #16]	@ (80061b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061a2:	5ccb      	ldrb	r3, [r1, r3]
 80061a4:	f003 031f 	and.w	r3, r3, #31
 80061a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	58024400 	.word	0x58024400
 80061b4:	08018964 	.word	0x08018964

080061b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	223f      	movs	r2, #63	@ 0x3f
 80061c6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80061c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006234 <HAL_RCC_GetClockConfig+0x7c>)
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	f003 0207 	and.w	r2, r3, #7
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80061d4:	4b17      	ldr	r3, [pc, #92]	@ (8006234 <HAL_RCC_GetClockConfig+0x7c>)
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80061e0:	4b14      	ldr	r3, [pc, #80]	@ (8006234 <HAL_RCC_GetClockConfig+0x7c>)
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	f003 020f 	and.w	r2, r3, #15
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80061ec:	4b11      	ldr	r3, [pc, #68]	@ (8006234 <HAL_RCC_GetClockConfig+0x7c>)
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80061f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006234 <HAL_RCC_GetClockConfig+0x7c>)
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006204:	4b0b      	ldr	r3, [pc, #44]	@ (8006234 <HAL_RCC_GetClockConfig+0x7c>)
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006210:	4b08      	ldr	r3, [pc, #32]	@ (8006234 <HAL_RCC_GetClockConfig+0x7c>)
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800621c:	4b06      	ldr	r3, [pc, #24]	@ (8006238 <HAL_RCC_GetClockConfig+0x80>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 020f 	and.w	r2, r3, #15
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	601a      	str	r2, [r3, #0]
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr
 8006234:	58024400 	.word	0x58024400
 8006238:	52002000 	.word	0x52002000

0800623c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800623c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006240:	b0ca      	sub	sp, #296	@ 0x128
 8006242:	af00      	add	r7, sp, #0
 8006244:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006248:	2300      	movs	r3, #0
 800624a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800624e:	2300      	movs	r3, #0
 8006250:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006260:	2500      	movs	r5, #0
 8006262:	ea54 0305 	orrs.w	r3, r4, r5
 8006266:	d049      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800626c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800626e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006272:	d02f      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006274:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006278:	d828      	bhi.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800627a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800627e:	d01a      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006280:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006284:	d822      	bhi.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800628a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800628e:	d007      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006290:	e01c      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006292:	4bb8      	ldr	r3, [pc, #736]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006296:	4ab7      	ldr	r2, [pc, #732]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800629c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800629e:	e01a      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a4:	3308      	adds	r3, #8
 80062a6:	2102      	movs	r1, #2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f002 fb61 	bl	8008970 <RCCEx_PLL2_Config>
 80062ae:	4603      	mov	r3, r0
 80062b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80062b4:	e00f      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ba:	3328      	adds	r3, #40	@ 0x28
 80062bc:	2102      	movs	r1, #2
 80062be:	4618      	mov	r0, r3
 80062c0:	f002 fc08 	bl	8008ad4 <RCCEx_PLL3_Config>
 80062c4:	4603      	mov	r3, r0
 80062c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80062ca:	e004      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062d2:	e000      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80062d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10a      	bne.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80062de:	4ba5      	ldr	r3, [pc, #660]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80062e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062ec:	4aa1      	ldr	r2, [pc, #644]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062ee:	430b      	orrs	r3, r1
 80062f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80062f2:	e003      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006308:	f04f 0900 	mov.w	r9, #0
 800630c:	ea58 0309 	orrs.w	r3, r8, r9
 8006310:	d047      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006318:	2b04      	cmp	r3, #4
 800631a:	d82a      	bhi.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800631c:	a201      	add	r2, pc, #4	@ (adr r2, 8006324 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800631e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006322:	bf00      	nop
 8006324:	08006339 	.word	0x08006339
 8006328:	08006347 	.word	0x08006347
 800632c:	0800635d 	.word	0x0800635d
 8006330:	0800637b 	.word	0x0800637b
 8006334:	0800637b 	.word	0x0800637b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006338:	4b8e      	ldr	r3, [pc, #568]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800633a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633c:	4a8d      	ldr	r2, [pc, #564]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800633e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006342:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006344:	e01a      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634a:	3308      	adds	r3, #8
 800634c:	2100      	movs	r1, #0
 800634e:	4618      	mov	r0, r3
 8006350:	f002 fb0e 	bl	8008970 <RCCEx_PLL2_Config>
 8006354:	4603      	mov	r3, r0
 8006356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800635a:	e00f      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800635c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006360:	3328      	adds	r3, #40	@ 0x28
 8006362:	2100      	movs	r1, #0
 8006364:	4618      	mov	r0, r3
 8006366:	f002 fbb5 	bl	8008ad4 <RCCEx_PLL3_Config>
 800636a:	4603      	mov	r3, r0
 800636c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006370:	e004      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006378:	e000      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800637a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800637c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006384:	4b7b      	ldr	r3, [pc, #492]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006388:	f023 0107 	bic.w	r1, r3, #7
 800638c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006392:	4a78      	ldr	r2, [pc, #480]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006394:	430b      	orrs	r3, r1
 8006396:	6513      	str	r3, [r2, #80]	@ 0x50
 8006398:	e003      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800639a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800639e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80063a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063aa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80063ae:	f04f 0b00 	mov.w	fp, #0
 80063b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80063b6:	d04c      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80063b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063c2:	d030      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80063c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063c8:	d829      	bhi.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80063ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80063cc:	d02d      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80063ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80063d0:	d825      	bhi.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80063d2:	2b80      	cmp	r3, #128	@ 0x80
 80063d4:	d018      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80063d6:	2b80      	cmp	r3, #128	@ 0x80
 80063d8:	d821      	bhi.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80063de:	2b40      	cmp	r3, #64	@ 0x40
 80063e0:	d007      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80063e2:	e01c      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063e4:	4b63      	ldr	r3, [pc, #396]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e8:	4a62      	ldr	r2, [pc, #392]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80063f0:	e01c      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f6:	3308      	adds	r3, #8
 80063f8:	2100      	movs	r1, #0
 80063fa:	4618      	mov	r0, r3
 80063fc:	f002 fab8 	bl	8008970 <RCCEx_PLL2_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006406:	e011      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800640c:	3328      	adds	r3, #40	@ 0x28
 800640e:	2100      	movs	r1, #0
 8006410:	4618      	mov	r0, r3
 8006412:	f002 fb5f 	bl	8008ad4 <RCCEx_PLL3_Config>
 8006416:	4603      	mov	r3, r0
 8006418:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800641c:	e006      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006424:	e002      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006426:	bf00      	nop
 8006428:	e000      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800642a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800642c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10a      	bne.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006434:	4b4f      	ldr	r3, [pc, #316]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006438:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800643c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006442:	4a4c      	ldr	r2, [pc, #304]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006444:	430b      	orrs	r3, r1
 8006446:	6513      	str	r3, [r2, #80]	@ 0x50
 8006448:	e003      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800644e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800645e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006462:	2300      	movs	r3, #0
 8006464:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006468:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800646c:	460b      	mov	r3, r1
 800646e:	4313      	orrs	r3, r2
 8006470:	d053      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006476:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800647a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800647e:	d035      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006480:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006484:	d82e      	bhi.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006486:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800648a:	d031      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800648c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006490:	d828      	bhi.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006492:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006496:	d01a      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006498:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800649c:	d822      	bhi.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80064a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064a6:	d007      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80064a8:	e01c      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064aa:	4b32      	ldr	r3, [pc, #200]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ae:	4a31      	ldr	r2, [pc, #196]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064b6:	e01c      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064bc:	3308      	adds	r3, #8
 80064be:	2100      	movs	r1, #0
 80064c0:	4618      	mov	r0, r3
 80064c2:	f002 fa55 	bl	8008970 <RCCEx_PLL2_Config>
 80064c6:	4603      	mov	r3, r0
 80064c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80064cc:	e011      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d2:	3328      	adds	r3, #40	@ 0x28
 80064d4:	2100      	movs	r1, #0
 80064d6:	4618      	mov	r0, r3
 80064d8:	f002 fafc 	bl	8008ad4 <RCCEx_PLL3_Config>
 80064dc:	4603      	mov	r3, r0
 80064de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064e2:	e006      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064ea:	e002      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80064ec:	bf00      	nop
 80064ee:	e000      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80064f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10b      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80064fa:	4b1e      	ldr	r3, [pc, #120]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064fe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006506:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800650a:	4a1a      	ldr	r2, [pc, #104]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800650c:	430b      	orrs	r3, r1
 800650e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006510:	e003      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006516:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800651a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006526:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800652a:	2300      	movs	r3, #0
 800652c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006530:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006534:	460b      	mov	r3, r1
 8006536:	4313      	orrs	r3, r2
 8006538:	d056      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800653a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006542:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006546:	d038      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006548:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800654c:	d831      	bhi.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800654e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006552:	d034      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006554:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006558:	d82b      	bhi.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800655a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800655e:	d01d      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006560:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006564:	d825      	bhi.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006566:	2b00      	cmp	r3, #0
 8006568:	d006      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800656a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800656e:	d00a      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006570:	e01f      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006572:	bf00      	nop
 8006574:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006578:	4ba2      	ldr	r3, [pc, #648]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800657a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657c:	4aa1      	ldr	r2, [pc, #644]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800657e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006582:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006584:	e01c      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800658a:	3308      	adds	r3, #8
 800658c:	2100      	movs	r1, #0
 800658e:	4618      	mov	r0, r3
 8006590:	f002 f9ee 	bl	8008970 <RCCEx_PLL2_Config>
 8006594:	4603      	mov	r3, r0
 8006596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800659a:	e011      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800659c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a0:	3328      	adds	r3, #40	@ 0x28
 80065a2:	2100      	movs	r1, #0
 80065a4:	4618      	mov	r0, r3
 80065a6:	f002 fa95 	bl	8008ad4 <RCCEx_PLL3_Config>
 80065aa:	4603      	mov	r3, r0
 80065ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065b0:	e006      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065b8:	e002      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80065ba:	bf00      	nop
 80065bc:	e000      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80065be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10b      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80065c8:	4b8e      	ldr	r3, [pc, #568]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065cc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80065d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80065d8:	4a8a      	ldr	r2, [pc, #552]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065da:	430b      	orrs	r3, r1
 80065dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80065de:	e003      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80065e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80065f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80065f8:	2300      	movs	r3, #0
 80065fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80065fe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006602:	460b      	mov	r3, r1
 8006604:	4313      	orrs	r3, r2
 8006606:	d03a      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800660c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800660e:	2b30      	cmp	r3, #48	@ 0x30
 8006610:	d01f      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006612:	2b30      	cmp	r3, #48	@ 0x30
 8006614:	d819      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006616:	2b20      	cmp	r3, #32
 8006618:	d00c      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800661a:	2b20      	cmp	r3, #32
 800661c:	d815      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800661e:	2b00      	cmp	r3, #0
 8006620:	d019      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006622:	2b10      	cmp	r3, #16
 8006624:	d111      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006626:	4b77      	ldr	r3, [pc, #476]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800662a:	4a76      	ldr	r2, [pc, #472]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800662c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006630:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006632:	e011      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006638:	3308      	adds	r3, #8
 800663a:	2102      	movs	r1, #2
 800663c:	4618      	mov	r0, r3
 800663e:	f002 f997 	bl	8008970 <RCCEx_PLL2_Config>
 8006642:	4603      	mov	r3, r0
 8006644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006648:	e006      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006650:	e002      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006652:	bf00      	nop
 8006654:	e000      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10a      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006660:	4b68      	ldr	r3, [pc, #416]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006664:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800666c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800666e:	4a65      	ldr	r2, [pc, #404]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006670:	430b      	orrs	r3, r1
 8006672:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006674:	e003      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800667a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800667e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800668a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800668e:	2300      	movs	r3, #0
 8006690:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006694:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006698:	460b      	mov	r3, r1
 800669a:	4313      	orrs	r3, r2
 800669c:	d051      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800669e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066a8:	d035      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80066aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066ae:	d82e      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80066b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066b4:	d031      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80066b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066ba:	d828      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80066bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066c0:	d01a      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80066c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066c6:	d822      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d003      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80066cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066d0:	d007      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80066d2:	e01c      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066d4:	4b4b      	ldr	r3, [pc, #300]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d8:	4a4a      	ldr	r2, [pc, #296]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80066e0:	e01c      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e6:	3308      	adds	r3, #8
 80066e8:	2100      	movs	r1, #0
 80066ea:	4618      	mov	r0, r3
 80066ec:	f002 f940 	bl	8008970 <RCCEx_PLL2_Config>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80066f6:	e011      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fc:	3328      	adds	r3, #40	@ 0x28
 80066fe:	2100      	movs	r1, #0
 8006700:	4618      	mov	r0, r3
 8006702:	f002 f9e7 	bl	8008ad4 <RCCEx_PLL3_Config>
 8006706:	4603      	mov	r3, r0
 8006708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800670c:	e006      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006714:	e002      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006716:	bf00      	nop
 8006718:	e000      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800671a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800671c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10a      	bne.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006724:	4b37      	ldr	r3, [pc, #220]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006728:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800672c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006732:	4a34      	ldr	r2, [pc, #208]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006734:	430b      	orrs	r3, r1
 8006736:	6513      	str	r3, [r2, #80]	@ 0x50
 8006738:	e003      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800673e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800674e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006752:	2300      	movs	r3, #0
 8006754:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006758:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800675c:	460b      	mov	r3, r1
 800675e:	4313      	orrs	r3, r2
 8006760:	d056      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006768:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800676c:	d033      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800676e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006772:	d82c      	bhi.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006774:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006778:	d02f      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800677a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800677e:	d826      	bhi.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006780:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006784:	d02b      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006786:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800678a:	d820      	bhi.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 800678c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006790:	d012      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006792:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006796:	d81a      	bhi.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006798:	2b00      	cmp	r3, #0
 800679a:	d022      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800679c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067a0:	d115      	bne.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a6:	3308      	adds	r3, #8
 80067a8:	2101      	movs	r1, #1
 80067aa:	4618      	mov	r0, r3
 80067ac:	f002 f8e0 	bl	8008970 <RCCEx_PLL2_Config>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80067b6:	e015      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067bc:	3328      	adds	r3, #40	@ 0x28
 80067be:	2101      	movs	r1, #1
 80067c0:	4618      	mov	r0, r3
 80067c2:	f002 f987 	bl	8008ad4 <RCCEx_PLL3_Config>
 80067c6:	4603      	mov	r3, r0
 80067c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80067cc:	e00a      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067d4:	e006      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80067d6:	bf00      	nop
 80067d8:	e004      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80067da:	bf00      	nop
 80067dc:	e002      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80067de:	bf00      	nop
 80067e0:	e000      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80067e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10d      	bne.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80067ec:	4b05      	ldr	r3, [pc, #20]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067f0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80067f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067fa:	4a02      	ldr	r2, [pc, #8]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067fc:	430b      	orrs	r3, r1
 80067fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8006800:	e006      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006802:	bf00      	nop
 8006804:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006808:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800680c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006818:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800681c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006820:	2300      	movs	r3, #0
 8006822:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006826:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800682a:	460b      	mov	r3, r1
 800682c:	4313      	orrs	r3, r2
 800682e:	d055      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006834:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006838:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800683c:	d033      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800683e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006842:	d82c      	bhi.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006848:	d02f      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800684a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800684e:	d826      	bhi.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006850:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006854:	d02b      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006856:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800685a:	d820      	bhi.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800685c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006860:	d012      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006862:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006866:	d81a      	bhi.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006868:	2b00      	cmp	r3, #0
 800686a:	d022      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800686c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006870:	d115      	bne.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006876:	3308      	adds	r3, #8
 8006878:	2101      	movs	r1, #1
 800687a:	4618      	mov	r0, r3
 800687c:	f002 f878 	bl	8008970 <RCCEx_PLL2_Config>
 8006880:	4603      	mov	r3, r0
 8006882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006886:	e015      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688c:	3328      	adds	r3, #40	@ 0x28
 800688e:	2101      	movs	r1, #1
 8006890:	4618      	mov	r0, r3
 8006892:	f002 f91f 	bl	8008ad4 <RCCEx_PLL3_Config>
 8006896:	4603      	mov	r3, r0
 8006898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800689c:	e00a      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068a4:	e006      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80068a6:	bf00      	nop
 80068a8:	e004      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80068aa:	bf00      	nop
 80068ac:	e002      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80068ae:	bf00      	nop
 80068b0:	e000      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80068b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10b      	bne.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80068bc:	4ba3      	ldr	r3, [pc, #652]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80068c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80068cc:	4a9f      	ldr	r2, [pc, #636]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068ce:	430b      	orrs	r3, r1
 80068d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80068d2:	e003      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80068dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80068e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068ec:	2300      	movs	r3, #0
 80068ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80068f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80068f6:	460b      	mov	r3, r1
 80068f8:	4313      	orrs	r3, r2
 80068fa:	d037      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80068fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006902:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006906:	d00e      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006908:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800690c:	d816      	bhi.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800690e:	2b00      	cmp	r3, #0
 8006910:	d018      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006912:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006916:	d111      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006918:	4b8c      	ldr	r3, [pc, #560]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800691a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691c:	4a8b      	ldr	r2, [pc, #556]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800691e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006924:	e00f      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692a:	3308      	adds	r3, #8
 800692c:	2101      	movs	r1, #1
 800692e:	4618      	mov	r0, r3
 8006930:	f002 f81e 	bl	8008970 <RCCEx_PLL2_Config>
 8006934:	4603      	mov	r3, r0
 8006936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800693a:	e004      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006942:	e000      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10a      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800694e:	4b7f      	ldr	r3, [pc, #508]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006952:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800695c:	4a7b      	ldr	r2, [pc, #492]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800695e:	430b      	orrs	r3, r1
 8006960:	6513      	str	r3, [r2, #80]	@ 0x50
 8006962:	e003      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006968:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800696c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006974:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006978:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800697c:	2300      	movs	r3, #0
 800697e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006982:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006986:	460b      	mov	r3, r1
 8006988:	4313      	orrs	r3, r2
 800698a:	d039      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800698c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006992:	2b03      	cmp	r3, #3
 8006994:	d81c      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006996:	a201      	add	r2, pc, #4	@ (adr r2, 800699c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699c:	080069d9 	.word	0x080069d9
 80069a0:	080069ad 	.word	0x080069ad
 80069a4:	080069bb 	.word	0x080069bb
 80069a8:	080069d9 	.word	0x080069d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069ac:	4b67      	ldr	r3, [pc, #412]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b0:	4a66      	ldr	r2, [pc, #408]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80069b8:	e00f      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069be:	3308      	adds	r3, #8
 80069c0:	2102      	movs	r1, #2
 80069c2:	4618      	mov	r0, r3
 80069c4:	f001 ffd4 	bl	8008970 <RCCEx_PLL2_Config>
 80069c8:	4603      	mov	r3, r0
 80069ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80069ce:	e004      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069d6:	e000      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80069d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10a      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80069e2:	4b5a      	ldr	r3, [pc, #360]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069e6:	f023 0103 	bic.w	r1, r3, #3
 80069ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069f0:	4a56      	ldr	r2, [pc, #344]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069f2:	430b      	orrs	r3, r1
 80069f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80069f6:	e003      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a08:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006a0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a10:	2300      	movs	r3, #0
 8006a12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	f000 809f 	beq.w	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a22:	4b4b      	ldr	r3, [pc, #300]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a4a      	ldr	r2, [pc, #296]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a2e:	f7fd faab 	bl	8003f88 <HAL_GetTick>
 8006a32:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a36:	e00b      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a38:	f7fd faa6 	bl	8003f88 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b64      	cmp	r3, #100	@ 0x64
 8006a46:	d903      	bls.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a4e:	e005      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a50:	4b3f      	ldr	r3, [pc, #252]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d0ed      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d179      	bne.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006a64:	4b39      	ldr	r3, [pc, #228]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a70:	4053      	eors	r3, r2
 8006a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d015      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a7a:	4b34      	ldr	r3, [pc, #208]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a82:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a86:	4b31      	ldr	r3, [pc, #196]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a8a:	4a30      	ldr	r2, [pc, #192]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a90:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a92:	4b2e      	ldr	r3, [pc, #184]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a96:	4a2d      	ldr	r2, [pc, #180]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a9c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006a9e:	4a2b      	ldr	r2, [pc, #172]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006aa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006aa4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ab2:	d118      	bne.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab4:	f7fd fa68 	bl	8003f88 <HAL_GetTick>
 8006ab8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006abc:	e00d      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006abe:	f7fd fa63 	bl	8003f88 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006ac8:	1ad2      	subs	r2, r2, r3
 8006aca:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d903      	bls.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006ad8:	e005      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ada:	4b1c      	ldr	r3, [pc, #112]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d0eb      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d129      	bne.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006afa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006afe:	d10e      	bne.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006b00:	4b12      	ldr	r3, [pc, #72]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006b10:	091a      	lsrs	r2, r3, #4
 8006b12:	4b10      	ldr	r3, [pc, #64]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006b14:	4013      	ands	r3, r2
 8006b16:	4a0d      	ldr	r2, [pc, #52]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	6113      	str	r3, [r2, #16]
 8006b1c:	e005      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	4a0a      	ldr	r2, [pc, #40]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006b28:	6113      	str	r3, [r2, #16]
 8006b2a:	4b08      	ldr	r3, [pc, #32]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b2c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b3a:	4a04      	ldr	r2, [pc, #16]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b3c:	430b      	orrs	r3, r1
 8006b3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b40:	e00e      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006b4a:	e009      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006b4c:	58024400 	.word	0x58024400
 8006b50:	58024800 	.word	0x58024800
 8006b54:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b68:	f002 0301 	and.w	r3, r2, #1
 8006b6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b70:	2300      	movs	r3, #0
 8006b72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b76:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	f000 8089 	beq.w	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b88:	2b28      	cmp	r3, #40	@ 0x28
 8006b8a:	d86b      	bhi.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b94 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b92:	bf00      	nop
 8006b94:	08006c6d 	.word	0x08006c6d
 8006b98:	08006c65 	.word	0x08006c65
 8006b9c:	08006c65 	.word	0x08006c65
 8006ba0:	08006c65 	.word	0x08006c65
 8006ba4:	08006c65 	.word	0x08006c65
 8006ba8:	08006c65 	.word	0x08006c65
 8006bac:	08006c65 	.word	0x08006c65
 8006bb0:	08006c65 	.word	0x08006c65
 8006bb4:	08006c39 	.word	0x08006c39
 8006bb8:	08006c65 	.word	0x08006c65
 8006bbc:	08006c65 	.word	0x08006c65
 8006bc0:	08006c65 	.word	0x08006c65
 8006bc4:	08006c65 	.word	0x08006c65
 8006bc8:	08006c65 	.word	0x08006c65
 8006bcc:	08006c65 	.word	0x08006c65
 8006bd0:	08006c65 	.word	0x08006c65
 8006bd4:	08006c4f 	.word	0x08006c4f
 8006bd8:	08006c65 	.word	0x08006c65
 8006bdc:	08006c65 	.word	0x08006c65
 8006be0:	08006c65 	.word	0x08006c65
 8006be4:	08006c65 	.word	0x08006c65
 8006be8:	08006c65 	.word	0x08006c65
 8006bec:	08006c65 	.word	0x08006c65
 8006bf0:	08006c65 	.word	0x08006c65
 8006bf4:	08006c6d 	.word	0x08006c6d
 8006bf8:	08006c65 	.word	0x08006c65
 8006bfc:	08006c65 	.word	0x08006c65
 8006c00:	08006c65 	.word	0x08006c65
 8006c04:	08006c65 	.word	0x08006c65
 8006c08:	08006c65 	.word	0x08006c65
 8006c0c:	08006c65 	.word	0x08006c65
 8006c10:	08006c65 	.word	0x08006c65
 8006c14:	08006c6d 	.word	0x08006c6d
 8006c18:	08006c65 	.word	0x08006c65
 8006c1c:	08006c65 	.word	0x08006c65
 8006c20:	08006c65 	.word	0x08006c65
 8006c24:	08006c65 	.word	0x08006c65
 8006c28:	08006c65 	.word	0x08006c65
 8006c2c:	08006c65 	.word	0x08006c65
 8006c30:	08006c65 	.word	0x08006c65
 8006c34:	08006c6d 	.word	0x08006c6d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3c:	3308      	adds	r3, #8
 8006c3e:	2101      	movs	r1, #1
 8006c40:	4618      	mov	r0, r3
 8006c42:	f001 fe95 	bl	8008970 <RCCEx_PLL2_Config>
 8006c46:	4603      	mov	r3, r0
 8006c48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006c4c:	e00f      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c52:	3328      	adds	r3, #40	@ 0x28
 8006c54:	2101      	movs	r1, #1
 8006c56:	4618      	mov	r0, r3
 8006c58:	f001 ff3c 	bl	8008ad4 <RCCEx_PLL3_Config>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006c62:	e004      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c6a:	e000      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10a      	bne.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006c76:	4bbf      	ldr	r3, [pc, #764]	@ (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c7a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c84:	4abb      	ldr	r2, [pc, #748]	@ (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c86:	430b      	orrs	r3, r1
 8006c88:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c8a:	e003      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9c:	f002 0302 	and.w	r3, r2, #2
 8006ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006caa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	d041      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006cba:	2b05      	cmp	r3, #5
 8006cbc:	d824      	bhi.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc4:	08006d11 	.word	0x08006d11
 8006cc8:	08006cdd 	.word	0x08006cdd
 8006ccc:	08006cf3 	.word	0x08006cf3
 8006cd0:	08006d11 	.word	0x08006d11
 8006cd4:	08006d11 	.word	0x08006d11
 8006cd8:	08006d11 	.word	0x08006d11
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce0:	3308      	adds	r3, #8
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f001 fe43 	bl	8008970 <RCCEx_PLL2_Config>
 8006cea:	4603      	mov	r3, r0
 8006cec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006cf0:	e00f      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf6:	3328      	adds	r3, #40	@ 0x28
 8006cf8:	2101      	movs	r1, #1
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f001 feea 	bl	8008ad4 <RCCEx_PLL3_Config>
 8006d00:	4603      	mov	r3, r0
 8006d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006d06:	e004      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d0e:	e000      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10a      	bne.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006d1a:	4b96      	ldr	r3, [pc, #600]	@ (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d1e:	f023 0107 	bic.w	r1, r3, #7
 8006d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d28:	4a92      	ldr	r2, [pc, #584]	@ (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d2a:	430b      	orrs	r3, r1
 8006d2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d2e:	e003      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d40:	f002 0304 	and.w	r3, r2, #4
 8006d44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d4e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4313      	orrs	r3, r2
 8006d56:	d044      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d60:	2b05      	cmp	r3, #5
 8006d62:	d825      	bhi.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006d64:	a201      	add	r2, pc, #4	@ (adr r2, 8006d6c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6a:	bf00      	nop
 8006d6c:	08006db9 	.word	0x08006db9
 8006d70:	08006d85 	.word	0x08006d85
 8006d74:	08006d9b 	.word	0x08006d9b
 8006d78:	08006db9 	.word	0x08006db9
 8006d7c:	08006db9 	.word	0x08006db9
 8006d80:	08006db9 	.word	0x08006db9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d88:	3308      	adds	r3, #8
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f001 fdef 	bl	8008970 <RCCEx_PLL2_Config>
 8006d92:	4603      	mov	r3, r0
 8006d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006d98:	e00f      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d9e:	3328      	adds	r3, #40	@ 0x28
 8006da0:	2101      	movs	r1, #1
 8006da2:	4618      	mov	r0, r3
 8006da4:	f001 fe96 	bl	8008ad4 <RCCEx_PLL3_Config>
 8006da8:	4603      	mov	r3, r0
 8006daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006dae:	e004      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006db6:	e000      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10b      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006dc2:	4b6c      	ldr	r3, [pc, #432]	@ (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc6:	f023 0107 	bic.w	r1, r3, #7
 8006dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dd2:	4a68      	ldr	r2, [pc, #416]	@ (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006dd4:	430b      	orrs	r3, r1
 8006dd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dd8:	e003      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	f002 0320 	and.w	r3, r2, #32
 8006dee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006df2:	2300      	movs	r3, #0
 8006df4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006df8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	d055      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e0e:	d033      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e14:	d82c      	bhi.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e1a:	d02f      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e20:	d826      	bhi.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006e22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e26:	d02b      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006e28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e2c:	d820      	bhi.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e32:	d012      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006e34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e38:	d81a      	bhi.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d022      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006e3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e42:	d115      	bne.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e48:	3308      	adds	r3, #8
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f001 fd8f 	bl	8008970 <RCCEx_PLL2_Config>
 8006e52:	4603      	mov	r3, r0
 8006e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006e58:	e015      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e5e:	3328      	adds	r3, #40	@ 0x28
 8006e60:	2102      	movs	r1, #2
 8006e62:	4618      	mov	r0, r3
 8006e64:	f001 fe36 	bl	8008ad4 <RCCEx_PLL3_Config>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006e6e:	e00a      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e76:	e006      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006e78:	bf00      	nop
 8006e7a:	e004      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006e7c:	bf00      	nop
 8006e7e:	e002      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006e80:	bf00      	nop
 8006e82:	e000      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10b      	bne.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e8e:	4b39      	ldr	r3, [pc, #228]	@ (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e92:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e9e:	4a35      	ldr	r2, [pc, #212]	@ (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ea0:	430b      	orrs	r3, r1
 8006ea2:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ea4:	e003      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006eba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006ec4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	d058      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ed6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006eda:	d033      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006edc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006ee0:	d82c      	bhi.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ee6:	d02f      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eec:	d826      	bhi.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006eee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ef2:	d02b      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006ef4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ef8:	d820      	bhi.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006efa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006efe:	d012      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006f00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f04:	d81a      	bhi.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d022      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f0e:	d115      	bne.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f14:	3308      	adds	r3, #8
 8006f16:	2100      	movs	r1, #0
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f001 fd29 	bl	8008970 <RCCEx_PLL2_Config>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006f24:	e015      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2a:	3328      	adds	r3, #40	@ 0x28
 8006f2c:	2102      	movs	r1, #2
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f001 fdd0 	bl	8008ad4 <RCCEx_PLL3_Config>
 8006f34:	4603      	mov	r3, r0
 8006f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006f3a:	e00a      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f42:	e006      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006f44:	bf00      	nop
 8006f46:	e004      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006f48:	bf00      	nop
 8006f4a:	e002      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006f4c:	bf00      	nop
 8006f4e:	e000      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10e      	bne.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f5a:	4b06      	ldr	r3, [pc, #24]	@ (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f5e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f6a:	4a02      	ldr	r2, [pc, #8]	@ (8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f70:	e006      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006f72:	bf00      	nop
 8006f74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f88:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006f8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f90:	2300      	movs	r3, #0
 8006f92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f96:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	d055      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006fa8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006fac:	d033      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006fae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006fb2:	d82c      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fb8:	d02f      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006fba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fbe:	d826      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006fc0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006fc4:	d02b      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006fc6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006fca:	d820      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006fcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fd0:	d012      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006fd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fd6:	d81a      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d022      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fe0:	d115      	bne.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	2100      	movs	r1, #0
 8006fea:	4618      	mov	r0, r3
 8006fec:	f001 fcc0 	bl	8008970 <RCCEx_PLL2_Config>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ff6:	e015      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffc:	3328      	adds	r3, #40	@ 0x28
 8006ffe:	2102      	movs	r1, #2
 8007000:	4618      	mov	r0, r3
 8007002:	f001 fd67 	bl	8008ad4 <RCCEx_PLL3_Config>
 8007006:	4603      	mov	r3, r0
 8007008:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800700c:	e00a      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007014:	e006      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007016:	bf00      	nop
 8007018:	e004      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800701a:	bf00      	nop
 800701c:	e002      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800701e:	bf00      	nop
 8007020:	e000      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007022:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007024:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10b      	bne.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800702c:	4ba1      	ldr	r3, [pc, #644]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800702e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007030:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007038:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800703c:	4a9d      	ldr	r2, [pc, #628]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800703e:	430b      	orrs	r3, r1
 8007040:	6593      	str	r3, [r2, #88]	@ 0x58
 8007042:	e003      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007048:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800704c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007054:	f002 0308 	and.w	r3, r2, #8
 8007058:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800705c:	2300      	movs	r3, #0
 800705e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007062:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007066:	460b      	mov	r3, r1
 8007068:	4313      	orrs	r3, r2
 800706a:	d01e      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800706c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007078:	d10c      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800707a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707e:	3328      	adds	r3, #40	@ 0x28
 8007080:	2102      	movs	r1, #2
 8007082:	4618      	mov	r0, r3
 8007084:	f001 fd26 	bl	8008ad4 <RCCEx_PLL3_Config>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007094:	4b87      	ldr	r3, [pc, #540]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007098:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800709c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070a4:	4a83      	ldr	r2, [pc, #524]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070a6:	430b      	orrs	r3, r1
 80070a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	f002 0310 	and.w	r3, r2, #16
 80070b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070ba:	2300      	movs	r3, #0
 80070bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80070c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80070c4:	460b      	mov	r3, r1
 80070c6:	4313      	orrs	r3, r2
 80070c8:	d01e      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80070ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070d6:	d10c      	bne.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80070d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070dc:	3328      	adds	r3, #40	@ 0x28
 80070de:	2102      	movs	r1, #2
 80070e0:	4618      	mov	r0, r3
 80070e2:	f001 fcf7 	bl	8008ad4 <RCCEx_PLL3_Config>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d002      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80070f2:	4b70      	ldr	r3, [pc, #448]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80070fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007102:	4a6c      	ldr	r2, [pc, #432]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007104:	430b      	orrs	r3, r1
 8007106:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800710c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007110:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007114:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007118:	2300      	movs	r3, #0
 800711a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800711e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007122:	460b      	mov	r3, r1
 8007124:	4313      	orrs	r3, r2
 8007126:	d03e      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800712c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007130:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007134:	d022      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007136:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800713a:	d81b      	bhi.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007144:	d00b      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007146:	e015      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800714c:	3308      	adds	r3, #8
 800714e:	2100      	movs	r1, #0
 8007150:	4618      	mov	r0, r3
 8007152:	f001 fc0d 	bl	8008970 <RCCEx_PLL2_Config>
 8007156:	4603      	mov	r3, r0
 8007158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800715c:	e00f      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800715e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007162:	3328      	adds	r3, #40	@ 0x28
 8007164:	2102      	movs	r1, #2
 8007166:	4618      	mov	r0, r3
 8007168:	f001 fcb4 	bl	8008ad4 <RCCEx_PLL3_Config>
 800716c:	4603      	mov	r3, r0
 800716e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007172:	e004      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800717a:	e000      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800717c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800717e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10b      	bne.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007186:	4b4b      	ldr	r3, [pc, #300]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800718a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800718e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007192:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007196:	4a47      	ldr	r2, [pc, #284]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007198:	430b      	orrs	r3, r1
 800719a:	6593      	str	r3, [r2, #88]	@ 0x58
 800719c:	e003      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80071a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80071b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80071b4:	2300      	movs	r3, #0
 80071b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80071b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80071bc:	460b      	mov	r3, r1
 80071be:	4313      	orrs	r3, r2
 80071c0:	d03b      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80071c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071ce:	d01f      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80071d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071d4:	d818      	bhi.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80071d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071da:	d003      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80071dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071e0:	d007      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80071e2:	e011      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e4:	4b33      	ldr	r3, [pc, #204]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e8:	4a32      	ldr	r2, [pc, #200]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80071f0:	e00f      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f6:	3328      	adds	r3, #40	@ 0x28
 80071f8:	2101      	movs	r1, #1
 80071fa:	4618      	mov	r0, r3
 80071fc:	f001 fc6a 	bl	8008ad4 <RCCEx_PLL3_Config>
 8007200:	4603      	mov	r3, r0
 8007202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007206:	e004      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800720e:	e000      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10b      	bne.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800721a:	4b26      	ldr	r3, [pc, #152]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800721c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800721e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800722a:	4a22      	ldr	r2, [pc, #136]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800722c:	430b      	orrs	r3, r1
 800722e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007230:	e003      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007236:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800723a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007246:	673b      	str	r3, [r7, #112]	@ 0x70
 8007248:	2300      	movs	r3, #0
 800724a:	677b      	str	r3, [r7, #116]	@ 0x74
 800724c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007250:	460b      	mov	r3, r1
 8007252:	4313      	orrs	r3, r2
 8007254:	d034      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800725a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800725c:	2b00      	cmp	r3, #0
 800725e:	d003      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007264:	d007      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007266:	e011      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007268:	4b12      	ldr	r3, [pc, #72]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800726a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726c:	4a11      	ldr	r2, [pc, #68]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800726e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007274:	e00e      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800727a:	3308      	adds	r3, #8
 800727c:	2102      	movs	r1, #2
 800727e:	4618      	mov	r0, r3
 8007280:	f001 fb76 	bl	8008970 <RCCEx_PLL2_Config>
 8007284:	4603      	mov	r3, r0
 8007286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800728a:	e003      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007292:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007294:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10d      	bne.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800729c:	4b05      	ldr	r3, [pc, #20]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800729e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072aa:	4a02      	ldr	r2, [pc, #8]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072ac:	430b      	orrs	r3, r1
 80072ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072b0:	e006      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80072b2:	bf00      	nop
 80072b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80072cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072ce:	2300      	movs	r3, #0
 80072d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80072d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80072d6:	460b      	mov	r3, r1
 80072d8:	4313      	orrs	r3, r2
 80072da:	d00c      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80072dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e0:	3328      	adds	r3, #40	@ 0x28
 80072e2:	2102      	movs	r1, #2
 80072e4:	4618      	mov	r0, r3
 80072e6:	f001 fbf5 	bl	8008ad4 <RCCEx_PLL3_Config>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80072f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007302:	663b      	str	r3, [r7, #96]	@ 0x60
 8007304:	2300      	movs	r3, #0
 8007306:	667b      	str	r3, [r7, #100]	@ 0x64
 8007308:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800730c:	460b      	mov	r3, r1
 800730e:	4313      	orrs	r3, r2
 8007310:	d038      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800731a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800731e:	d018      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007320:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007324:	d811      	bhi.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007326:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800732a:	d014      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800732c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007330:	d80b      	bhi.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007332:	2b00      	cmp	r3, #0
 8007334:	d011      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800733a:	d106      	bne.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800733c:	4bc3      	ldr	r3, [pc, #780]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800733e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007340:	4ac2      	ldr	r2, [pc, #776]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007346:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007348:	e008      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007350:	e004      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007352:	bf00      	nop
 8007354:	e002      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007356:	bf00      	nop
 8007358:	e000      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800735a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800735c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10b      	bne.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007364:	4bb9      	ldr	r3, [pc, #740]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007368:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800736c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007370:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007374:	4ab5      	ldr	r2, [pc, #724]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007376:	430b      	orrs	r3, r1
 8007378:	6553      	str	r3, [r2, #84]	@ 0x54
 800737a:	e003      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800737c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007380:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007390:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007392:	2300      	movs	r3, #0
 8007394:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007396:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800739a:	460b      	mov	r3, r1
 800739c:	4313      	orrs	r3, r2
 800739e:	d009      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80073a0:	4baa      	ldr	r3, [pc, #680]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80073a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ae:	4aa7      	ldr	r2, [pc, #668]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073b0:	430b      	orrs	r3, r1
 80073b2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80073b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073bc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80073c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80073c2:	2300      	movs	r3, #0
 80073c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80073c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80073ca:	460b      	mov	r3, r1
 80073cc:	4313      	orrs	r3, r2
 80073ce:	d00a      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80073d0:	4b9e      	ldr	r3, [pc, #632]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80073d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80073e0:	4a9a      	ldr	r2, [pc, #616]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073e2:	430b      	orrs	r3, r1
 80073e4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80073e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80073f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073f4:	2300      	movs	r3, #0
 80073f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073f8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80073fc:	460b      	mov	r3, r1
 80073fe:	4313      	orrs	r3, r2
 8007400:	d009      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007402:	4b92      	ldr	r3, [pc, #584]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007406:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800740a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800740e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007410:	4a8e      	ldr	r2, [pc, #568]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007412:	430b      	orrs	r3, r1
 8007414:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007422:	643b      	str	r3, [r7, #64]	@ 0x40
 8007424:	2300      	movs	r3, #0
 8007426:	647b      	str	r3, [r7, #68]	@ 0x44
 8007428:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800742c:	460b      	mov	r3, r1
 800742e:	4313      	orrs	r3, r2
 8007430:	d00e      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007432:	4b86      	ldr	r3, [pc, #536]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	4a85      	ldr	r2, [pc, #532]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007438:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800743c:	6113      	str	r3, [r2, #16]
 800743e:	4b83      	ldr	r3, [pc, #524]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007440:	6919      	ldr	r1, [r3, #16]
 8007442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007446:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800744a:	4a80      	ldr	r2, [pc, #512]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800744c:	430b      	orrs	r3, r1
 800744e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007458:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800745c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800745e:	2300      	movs	r3, #0
 8007460:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007462:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007466:	460b      	mov	r3, r1
 8007468:	4313      	orrs	r3, r2
 800746a:	d009      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800746c:	4b77      	ldr	r3, [pc, #476]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800746e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007470:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800747a:	4a74      	ldr	r2, [pc, #464]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800747c:	430b      	orrs	r3, r1
 800747e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007488:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800748c:	633b      	str	r3, [r7, #48]	@ 0x30
 800748e:	2300      	movs	r3, #0
 8007490:	637b      	str	r3, [r7, #52]	@ 0x34
 8007492:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007496:	460b      	mov	r3, r1
 8007498:	4313      	orrs	r3, r2
 800749a:	d00a      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800749c:	4b6b      	ldr	r3, [pc, #428]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800749e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074a0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80074a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074ac:	4a67      	ldr	r2, [pc, #412]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074ae:	430b      	orrs	r3, r1
 80074b0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80074b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ba:	2100      	movs	r1, #0
 80074bc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074c4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80074c8:	460b      	mov	r3, r1
 80074ca:	4313      	orrs	r3, r2
 80074cc:	d011      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d2:	3308      	adds	r3, #8
 80074d4:	2100      	movs	r1, #0
 80074d6:	4618      	mov	r0, r3
 80074d8:	f001 fa4a 	bl	8008970 <RCCEx_PLL2_Config>
 80074dc:	4603      	mov	r3, r0
 80074de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80074e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80074f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fa:	2100      	movs	r1, #0
 80074fc:	6239      	str	r1, [r7, #32]
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	627b      	str	r3, [r7, #36]	@ 0x24
 8007504:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007508:	460b      	mov	r3, r1
 800750a:	4313      	orrs	r3, r2
 800750c:	d011      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800750e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007512:	3308      	adds	r3, #8
 8007514:	2101      	movs	r1, #1
 8007516:	4618      	mov	r0, r3
 8007518:	f001 fa2a 	bl	8008970 <RCCEx_PLL2_Config>
 800751c:	4603      	mov	r3, r0
 800751e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800752e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753a:	2100      	movs	r1, #0
 800753c:	61b9      	str	r1, [r7, #24]
 800753e:	f003 0304 	and.w	r3, r3, #4
 8007542:	61fb      	str	r3, [r7, #28]
 8007544:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007548:	460b      	mov	r3, r1
 800754a:	4313      	orrs	r3, r2
 800754c:	d011      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800754e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007552:	3308      	adds	r3, #8
 8007554:	2102      	movs	r1, #2
 8007556:	4618      	mov	r0, r3
 8007558:	f001 fa0a 	bl	8008970 <RCCEx_PLL2_Config>
 800755c:	4603      	mov	r3, r0
 800755e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800756a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800756e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757a:	2100      	movs	r1, #0
 800757c:	6139      	str	r1, [r7, #16]
 800757e:	f003 0308 	and.w	r3, r3, #8
 8007582:	617b      	str	r3, [r7, #20]
 8007584:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007588:	460b      	mov	r3, r1
 800758a:	4313      	orrs	r3, r2
 800758c:	d011      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800758e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007592:	3328      	adds	r3, #40	@ 0x28
 8007594:	2100      	movs	r1, #0
 8007596:	4618      	mov	r0, r3
 8007598:	f001 fa9c 	bl	8008ad4 <RCCEx_PLL3_Config>
 800759c:	4603      	mov	r3, r0
 800759e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80075a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d003      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80075b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	2100      	movs	r1, #0
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	f003 0310 	and.w	r3, r3, #16
 80075c2:	60fb      	str	r3, [r7, #12]
 80075c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80075c8:	460b      	mov	r3, r1
 80075ca:	4313      	orrs	r3, r2
 80075cc:	d011      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d2:	3328      	adds	r3, #40	@ 0x28
 80075d4:	2101      	movs	r1, #1
 80075d6:	4618      	mov	r0, r3
 80075d8:	f001 fa7c 	bl	8008ad4 <RCCEx_PLL3_Config>
 80075dc:	4603      	mov	r3, r0
 80075de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80075e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d003      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80075f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	2100      	movs	r1, #0
 80075fc:	6039      	str	r1, [r7, #0]
 80075fe:	f003 0320 	and.w	r3, r3, #32
 8007602:	607b      	str	r3, [r7, #4]
 8007604:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007608:	460b      	mov	r3, r1
 800760a:	4313      	orrs	r3, r2
 800760c:	d011      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800760e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007612:	3328      	adds	r3, #40	@ 0x28
 8007614:	2102      	movs	r1, #2
 8007616:	4618      	mov	r0, r3
 8007618:	f001 fa5c 	bl	8008ad4 <RCCEx_PLL3_Config>
 800761c:	4603      	mov	r3, r0
 800761e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800762a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800762e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007632:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	e000      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
}
 8007640:	4618      	mov	r0, r3
 8007642:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007646:	46bd      	mov	sp, r7
 8007648:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800764c:	58024400 	.word	0x58024400

08007650 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b090      	sub	sp, #64	@ 0x40
 8007654:	af00      	add	r7, sp, #0
 8007656:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800765a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800765e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007662:	430b      	orrs	r3, r1
 8007664:	f040 8094 	bne.w	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007668:	4b9e      	ldr	r3, [pc, #632]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800766a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800766c:	f003 0307 	and.w	r3, r3, #7
 8007670:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007674:	2b04      	cmp	r3, #4
 8007676:	f200 8087 	bhi.w	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800767a:	a201      	add	r2, pc, #4	@ (adr r2, 8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800767c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007680:	08007695 	.word	0x08007695
 8007684:	080076bd 	.word	0x080076bd
 8007688:	080076e5 	.word	0x080076e5
 800768c:	08007781 	.word	0x08007781
 8007690:	0800770d 	.word	0x0800770d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007694:	4b93      	ldr	r3, [pc, #588]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800769c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076a0:	d108      	bne.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076a6:	4618      	mov	r0, r3
 80076a8:	f001 f810 	bl	80086cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076b0:	f000 bd45 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076b4:	2300      	movs	r3, #0
 80076b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076b8:	f000 bd41 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076bc:	4b89      	ldr	r3, [pc, #548]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076c8:	d108      	bne.n	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076ca:	f107 0318 	add.w	r3, r7, #24
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 fd54 	bl	800817c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076d8:	f000 bd31 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076dc:	2300      	movs	r3, #0
 80076de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076e0:	f000 bd2d 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076e4:	4b7f      	ldr	r3, [pc, #508]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076f0:	d108      	bne.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076f2:	f107 030c 	add.w	r3, r7, #12
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 fe94 	bl	8008424 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007700:	f000 bd1d 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007704:	2300      	movs	r3, #0
 8007706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007708:	f000 bd19 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800770c:	4b75      	ldr	r3, [pc, #468]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800770e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007710:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007714:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007716:	4b73      	ldr	r3, [pc, #460]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0304 	and.w	r3, r3, #4
 800771e:	2b04      	cmp	r3, #4
 8007720:	d10c      	bne.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007724:	2b00      	cmp	r3, #0
 8007726:	d109      	bne.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007728:	4b6e      	ldr	r3, [pc, #440]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	08db      	lsrs	r3, r3, #3
 800772e:	f003 0303 	and.w	r3, r3, #3
 8007732:	4a6d      	ldr	r2, [pc, #436]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007734:	fa22 f303 	lsr.w	r3, r2, r3
 8007738:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800773a:	e01f      	b.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800773c:	4b69      	ldr	r3, [pc, #420]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007744:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007748:	d106      	bne.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800774a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800774c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007750:	d102      	bne.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007752:	4b66      	ldr	r3, [pc, #408]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007754:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007756:	e011      	b.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007758:	4b62      	ldr	r3, [pc, #392]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007760:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007764:	d106      	bne.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800776c:	d102      	bne.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800776e:	4b60      	ldr	r3, [pc, #384]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007770:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007772:	e003      	b.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007774:	2300      	movs	r3, #0
 8007776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007778:	f000 bce1 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800777c:	f000 bcdf 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007780:	4b5c      	ldr	r3, [pc, #368]	@ (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007784:	f000 bcdb 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007788:	2300      	movs	r3, #0
 800778a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800778c:	f000 bcd7 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007794:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007798:	430b      	orrs	r3, r1
 800779a:	f040 80ad 	bne.w	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800779e:	4b51      	ldr	r3, [pc, #324]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077a2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80077a6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80077a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ae:	d056      	beq.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80077b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077b6:	f200 8090 	bhi.w	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80077ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077bc:	2bc0      	cmp	r3, #192	@ 0xc0
 80077be:	f000 8088 	beq.w	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80077c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80077c6:	f200 8088 	bhi.w	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80077ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077cc:	2b80      	cmp	r3, #128	@ 0x80
 80077ce:	d032      	beq.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80077d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d2:	2b80      	cmp	r3, #128	@ 0x80
 80077d4:	f200 8081 	bhi.w	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80077d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80077de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e0:	2b40      	cmp	r3, #64	@ 0x40
 80077e2:	d014      	beq.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80077e4:	e079      	b.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80077e6:	4b3f      	ldr	r3, [pc, #252]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077f2:	d108      	bne.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077f8:	4618      	mov	r0, r3
 80077fa:	f000 ff67 	bl	80086cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80077fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007802:	f000 bc9c 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007806:	2300      	movs	r3, #0
 8007808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800780a:	f000 bc98 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800780e:	4b35      	ldr	r3, [pc, #212]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007816:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800781a:	d108      	bne.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800781c:	f107 0318 	add.w	r3, r7, #24
 8007820:	4618      	mov	r0, r3
 8007822:	f000 fcab 	bl	800817c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800782a:	f000 bc88 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800782e:	2300      	movs	r3, #0
 8007830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007832:	f000 bc84 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007836:	4b2b      	ldr	r3, [pc, #172]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800783e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007842:	d108      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007844:	f107 030c 	add.w	r3, r7, #12
 8007848:	4618      	mov	r0, r3
 800784a:	f000 fdeb 	bl	8008424 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007852:	f000 bc74 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007856:	2300      	movs	r3, #0
 8007858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800785a:	f000 bc70 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800785e:	4b21      	ldr	r3, [pc, #132]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007862:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007866:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007868:	4b1e      	ldr	r3, [pc, #120]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	2b04      	cmp	r3, #4
 8007872:	d10c      	bne.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007876:	2b00      	cmp	r3, #0
 8007878:	d109      	bne.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800787a:	4b1a      	ldr	r3, [pc, #104]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	08db      	lsrs	r3, r3, #3
 8007880:	f003 0303 	and.w	r3, r3, #3
 8007884:	4a18      	ldr	r2, [pc, #96]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007886:	fa22 f303 	lsr.w	r3, r2, r3
 800788a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800788c:	e01f      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800788e:	4b15      	ldr	r3, [pc, #84]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007896:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800789a:	d106      	bne.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800789c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800789e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078a2:	d102      	bne.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078a4:	4b11      	ldr	r3, [pc, #68]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80078a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078a8:	e011      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078aa:	4b0e      	ldr	r3, [pc, #56]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078b6:	d106      	bne.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80078b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078be:	d102      	bne.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80078c0:	4b0b      	ldr	r3, [pc, #44]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80078c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078c4:	e003      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80078c6:	2300      	movs	r3, #0
 80078c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80078ca:	f000 bc38 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80078ce:	f000 bc36 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80078d2:	4b08      	ldr	r3, [pc, #32]	@ (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80078d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078d6:	f000 bc32 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80078da:	2300      	movs	r3, #0
 80078dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078de:	f000 bc2e 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80078e2:	bf00      	nop
 80078e4:	58024400 	.word	0x58024400
 80078e8:	03d09000 	.word	0x03d09000
 80078ec:	003d0900 	.word	0x003d0900
 80078f0:	017d7840 	.word	0x017d7840
 80078f4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80078f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078fc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007900:	430b      	orrs	r3, r1
 8007902:	f040 809c 	bne.w	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007906:	4b9e      	ldr	r3, [pc, #632]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800790a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800790e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007912:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007916:	d054      	beq.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800791e:	f200 808b 	bhi.w	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007924:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007928:	f000 8083 	beq.w	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800792c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007932:	f200 8081 	bhi.w	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007938:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800793c:	d02f      	beq.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800793e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007940:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007944:	d878      	bhi.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007948:	2b00      	cmp	r3, #0
 800794a:	d004      	beq.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800794c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007952:	d012      	beq.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007954:	e070      	b.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007956:	4b8a      	ldr	r3, [pc, #552]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800795e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007962:	d107      	bne.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007964:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007968:	4618      	mov	r0, r3
 800796a:	f000 feaf 	bl	80086cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800796e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007972:	e3e4      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007974:	2300      	movs	r3, #0
 8007976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007978:	e3e1      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800797a:	4b81      	ldr	r3, [pc, #516]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007982:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007986:	d107      	bne.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007988:	f107 0318 	add.w	r3, r7, #24
 800798c:	4618      	mov	r0, r3
 800798e:	f000 fbf5 	bl	800817c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007996:	e3d2      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007998:	2300      	movs	r3, #0
 800799a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800799c:	e3cf      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800799e:	4b78      	ldr	r3, [pc, #480]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079aa:	d107      	bne.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079ac:	f107 030c 	add.w	r3, r7, #12
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 fd37 	bl	8008424 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079ba:	e3c0      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079bc:	2300      	movs	r3, #0
 80079be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079c0:	e3bd      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079c2:	4b6f      	ldr	r3, [pc, #444]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80079ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079cc:	4b6c      	ldr	r3, [pc, #432]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0304 	and.w	r3, r3, #4
 80079d4:	2b04      	cmp	r3, #4
 80079d6:	d10c      	bne.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80079d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d109      	bne.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079de:	4b68      	ldr	r3, [pc, #416]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	08db      	lsrs	r3, r3, #3
 80079e4:	f003 0303 	and.w	r3, r3, #3
 80079e8:	4a66      	ldr	r2, [pc, #408]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80079ea:	fa22 f303 	lsr.w	r3, r2, r3
 80079ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079f0:	e01e      	b.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079f2:	4b63      	ldr	r3, [pc, #396]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079fe:	d106      	bne.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a06:	d102      	bne.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a08:	4b5f      	ldr	r3, [pc, #380]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a0c:	e010      	b.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a0e:	4b5c      	ldr	r3, [pc, #368]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a1a:	d106      	bne.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a22:	d102      	bne.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a24:	4b59      	ldr	r3, [pc, #356]	@ (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a28:	e002      	b.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007a2e:	e386      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a30:	e385      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a32:	4b57      	ldr	r3, [pc, #348]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a36:	e382      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a3c:	e37f      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a42:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007a46:	430b      	orrs	r3, r1
 8007a48:	f040 80a7 	bne.w	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007a4c:	4b4c      	ldr	r3, [pc, #304]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a50:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007a54:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a5c:	d055      	beq.n	8007b0a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a64:	f200 8096 	bhi.w	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007a6e:	f000 8084 	beq.w	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a74:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007a78:	f200 808c 	bhi.w	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a82:	d030      	beq.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a8a:	f200 8083 	bhi.w	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d004      	beq.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a9a:	d012      	beq.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007a9c:	e07a      	b.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a9e:	4b38      	ldr	r3, [pc, #224]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007aa6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007aaa:	d107      	bne.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007aac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f000 fe0b 	bl	80086cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007aba:	e340      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007abc:	2300      	movs	r3, #0
 8007abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ac0:	e33d      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ac2:	4b2f      	ldr	r3, [pc, #188]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007aca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ace:	d107      	bne.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ad0:	f107 0318 	add.w	r3, r7, #24
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 fb51 	bl	800817c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ade:	e32e      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ae4:	e32b      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ae6:	4b26      	ldr	r3, [pc, #152]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007aee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007af2:	d107      	bne.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007af4:	f107 030c 	add.w	r3, r7, #12
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 fc93 	bl	8008424 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b02:	e31c      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b04:	2300      	movs	r3, #0
 8007b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b08:	e319      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007b12:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b14:	4b1a      	ldr	r3, [pc, #104]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0304 	and.w	r3, r3, #4
 8007b1c:	2b04      	cmp	r3, #4
 8007b1e:	d10c      	bne.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d109      	bne.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b26:	4b16      	ldr	r3, [pc, #88]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	08db      	lsrs	r3, r3, #3
 8007b2c:	f003 0303 	and.w	r3, r3, #3
 8007b30:	4a14      	ldr	r2, [pc, #80]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007b32:	fa22 f303 	lsr.w	r3, r2, r3
 8007b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b38:	e01e      	b.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b3a:	4b11      	ldr	r3, [pc, #68]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b46:	d106      	bne.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b4e:	d102      	bne.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b50:	4b0d      	ldr	r3, [pc, #52]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b54:	e010      	b.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b56:	4b0a      	ldr	r3, [pc, #40]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b62:	d106      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b6a:	d102      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b6c:	4b07      	ldr	r3, [pc, #28]	@ (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b70:	e002      	b.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b72:	2300      	movs	r3, #0
 8007b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007b76:	e2e2      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b78:	e2e1      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b7a:	4b05      	ldr	r3, [pc, #20]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b7e:	e2de      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b80:	58024400 	.word	0x58024400
 8007b84:	03d09000 	.word	0x03d09000
 8007b88:	003d0900 	.word	0x003d0900
 8007b8c:	017d7840 	.word	0x017d7840
 8007b90:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007b94:	2300      	movs	r3, #0
 8007b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b98:	e2d1      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007b9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b9e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007ba2:	430b      	orrs	r3, r1
 8007ba4:	f040 809c 	bne.w	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007ba8:	4b93      	ldr	r3, [pc, #588]	@ (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007bb0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bb8:	d054      	beq.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bc0:	f200 808b 	bhi.w	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007bca:	f000 8083 	beq.w	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007bd4:	f200 8081 	bhi.w	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bde:	d02f      	beq.n	8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007be6:	d878      	bhi.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d004      	beq.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bf4:	d012      	beq.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007bf6:	e070      	b.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007bf8:	4b7f      	ldr	r3, [pc, #508]	@ (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c04:	d107      	bne.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 fd5e 	bl	80086cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c14:	e293      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c16:	2300      	movs	r3, #0
 8007c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c1a:	e290      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c1c:	4b76      	ldr	r3, [pc, #472]	@ (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c28:	d107      	bne.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c2a:	f107 0318 	add.w	r3, r7, #24
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 faa4 	bl	800817c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c38:	e281      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c3e:	e27e      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c40:	4b6d      	ldr	r3, [pc, #436]	@ (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c4c:	d107      	bne.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c4e:	f107 030c 	add.w	r3, r7, #12
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 fbe6 	bl	8008424 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c5c:	e26f      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c62:	e26c      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c64:	4b64      	ldr	r3, [pc, #400]	@ (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c6c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c6e:	4b62      	ldr	r3, [pc, #392]	@ (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0304 	and.w	r3, r3, #4
 8007c76:	2b04      	cmp	r3, #4
 8007c78:	d10c      	bne.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d109      	bne.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c80:	4b5d      	ldr	r3, [pc, #372]	@ (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	08db      	lsrs	r3, r3, #3
 8007c86:	f003 0303 	and.w	r3, r3, #3
 8007c8a:	4a5c      	ldr	r2, [pc, #368]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c92:	e01e      	b.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c94:	4b58      	ldr	r3, [pc, #352]	@ (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ca0:	d106      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ca4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ca8:	d102      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007caa:	4b55      	ldr	r3, [pc, #340]	@ (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cae:	e010      	b.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007cb0:	4b51      	ldr	r3, [pc, #324]	@ (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cbc:	d106      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cc4:	d102      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007cc6:	4b4f      	ldr	r3, [pc, #316]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cca:	e002      	b.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007cd0:	e235      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007cd2:	e234      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007cd4:	4b4c      	ldr	r3, [pc, #304]	@ (8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cd8:	e231      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cde:	e22e      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ce4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007ce8:	430b      	orrs	r3, r1
 8007cea:	f040 808f 	bne.w	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007cee:	4b42      	ldr	r3, [pc, #264]	@ (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cf2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007cfe:	d06b      	beq.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d06:	d874      	bhi.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d0e:	d056      	beq.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d16:	d86c      	bhi.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d1e:	d03b      	beq.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d26:	d864      	bhi.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d2e:	d021      	beq.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d36:	d85c      	bhi.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d004      	beq.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d44:	d004      	beq.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007d46:	e054      	b.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007d48:	f7fe fa0a 	bl	8006160 <HAL_RCC_GetPCLK1Freq>
 8007d4c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d4e:	e1f6      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d50:	4b29      	ldr	r3, [pc, #164]	@ (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d5c:	d107      	bne.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d5e:	f107 0318 	add.w	r3, r7, #24
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 fa0a 	bl	800817c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d6c:	e1e7      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d72:	e1e4      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d74:	4b20      	ldr	r3, [pc, #128]	@ (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d80:	d107      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d82:	f107 030c 	add.w	r3, r7, #12
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 fb4c 	bl	8008424 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d90:	e1d5      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d96:	e1d2      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d98:	4b17      	ldr	r3, [pc, #92]	@ (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 0304 	and.w	r3, r3, #4
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d109      	bne.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007da4:	4b14      	ldr	r3, [pc, #80]	@ (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	08db      	lsrs	r3, r3, #3
 8007daa:	f003 0303 	and.w	r3, r3, #3
 8007dae:	4a13      	ldr	r2, [pc, #76]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007db0:	fa22 f303 	lsr.w	r3, r2, r3
 8007db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007db6:	e1c2      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007db8:	2300      	movs	r3, #0
 8007dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dbc:	e1bf      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dca:	d102      	bne.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dd0:	e1b5      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dd6:	e1b2      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007dd8:	4b07      	ldr	r3, [pc, #28]	@ (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007de0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007de4:	d102      	bne.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007de6:	4b07      	ldr	r3, [pc, #28]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dea:	e1a8      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007df0:	e1a5      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007df2:	2300      	movs	r3, #0
 8007df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007df6:	e1a2      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007df8:	58024400 	.word	0x58024400
 8007dfc:	03d09000 	.word	0x03d09000
 8007e00:	003d0900 	.word	0x003d0900
 8007e04:	017d7840 	.word	0x017d7840
 8007e08:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007e0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e10:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007e14:	430b      	orrs	r3, r1
 8007e16:	d173      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007e18:	4b9c      	ldr	r3, [pc, #624]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e20:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e28:	d02f      	beq.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e30:	d863      	bhi.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d004      	beq.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e3e:	d012      	beq.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007e40:	e05b      	b.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e42:	4b92      	ldr	r3, [pc, #584]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e4e:	d107      	bne.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e50:	f107 0318 	add.w	r3, r7, #24
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 f991 	bl	800817c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e5e:	e16e      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e60:	2300      	movs	r3, #0
 8007e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e64:	e16b      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e66:	4b89      	ldr	r3, [pc, #548]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e72:	d107      	bne.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e74:	f107 030c 	add.w	r3, r7, #12
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fad3 	bl	8008424 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e82:	e15c      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e84:	2300      	movs	r3, #0
 8007e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e88:	e159      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e8a:	4b80      	ldr	r3, [pc, #512]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e92:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e94:	4b7d      	ldr	r3, [pc, #500]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 0304 	and.w	r3, r3, #4
 8007e9c:	2b04      	cmp	r3, #4
 8007e9e:	d10c      	bne.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d109      	bne.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ea6:	4b79      	ldr	r3, [pc, #484]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	08db      	lsrs	r3, r3, #3
 8007eac:	f003 0303 	and.w	r3, r3, #3
 8007eb0:	4a77      	ldr	r2, [pc, #476]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007eb8:	e01e      	b.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007eba:	4b74      	ldr	r3, [pc, #464]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ec6:	d106      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ece:	d102      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ed0:	4b70      	ldr	r3, [pc, #448]	@ (8008094 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ed4:	e010      	b.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ed6:	4b6d      	ldr	r3, [pc, #436]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ede:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ee2:	d106      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ee6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eea:	d102      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007eec:	4b6a      	ldr	r3, [pc, #424]	@ (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ef0:	e002      	b.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007ef6:	e122      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ef8:	e121      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007efa:	2300      	movs	r3, #0
 8007efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007efe:	e11e      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f04:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007f08:	430b      	orrs	r3, r1
 8007f0a:	d133      	bne.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007f0c:	4b5f      	ldr	r3, [pc, #380]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f14:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d004      	beq.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f22:	d012      	beq.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007f24:	e023      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f26:	4b59      	ldr	r3, [pc, #356]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f32:	d107      	bne.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 fbc7 	bl	80086cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f42:	e0fc      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f44:	2300      	movs	r3, #0
 8007f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f48:	e0f9      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f4a:	4b50      	ldr	r3, [pc, #320]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f56:	d107      	bne.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f58:	f107 0318 	add.w	r3, r7, #24
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 f90d 	bl	800817c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f66:	e0ea      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f6c:	e0e7      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f72:	e0e4      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f78:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007f7c:	430b      	orrs	r3, r1
 8007f7e:	f040 808d 	bne.w	800809c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007f82:	4b42      	ldr	r3, [pc, #264]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f86:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007f8a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f92:	d06b      	beq.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f9a:	d874      	bhi.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fa2:	d056      	beq.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007faa:	d86c      	bhi.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fb2:	d03b      	beq.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fba:	d864      	bhi.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fc2:	d021      	beq.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fca:	d85c      	bhi.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d004      	beq.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fd8:	d004      	beq.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007fda:	e054      	b.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007fdc:	f000 f8b8 	bl	8008150 <HAL_RCCEx_GetD3PCLK1Freq>
 8007fe0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007fe2:	e0ac      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fe4:	4b29      	ldr	r3, [pc, #164]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ff0:	d107      	bne.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ff2:	f107 0318 	add.w	r3, r7, #24
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 f8c0 	bl	800817c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008000:	e09d      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008002:	2300      	movs	r3, #0
 8008004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008006:	e09a      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008008:	4b20      	ldr	r3, [pc, #128]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008010:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008014:	d107      	bne.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008016:	f107 030c 	add.w	r3, r7, #12
 800801a:	4618      	mov	r0, r3
 800801c:	f000 fa02 	bl	8008424 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008024:	e08b      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008026:	2300      	movs	r3, #0
 8008028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800802a:	e088      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800802c:	4b17      	ldr	r3, [pc, #92]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b04      	cmp	r3, #4
 8008036:	d109      	bne.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008038:	4b14      	ldr	r3, [pc, #80]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	08db      	lsrs	r3, r3, #3
 800803e:	f003 0303 	and.w	r3, r3, #3
 8008042:	4a13      	ldr	r2, [pc, #76]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008044:	fa22 f303 	lsr.w	r3, r2, r3
 8008048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800804a:	e078      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800804c:	2300      	movs	r3, #0
 800804e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008050:	e075      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008052:	4b0e      	ldr	r3, [pc, #56]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800805a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800805e:	d102      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008060:	4b0c      	ldr	r3, [pc, #48]	@ (8008094 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008064:	e06b      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800806a:	e068      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800806c:	4b07      	ldr	r3, [pc, #28]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008074:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008078:	d102      	bne.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800807a:	4b07      	ldr	r3, [pc, #28]	@ (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800807c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800807e:	e05e      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008080:	2300      	movs	r3, #0
 8008082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008084:	e05b      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008086:	2300      	movs	r3, #0
 8008088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800808a:	e058      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800808c:	58024400 	.word	0x58024400
 8008090:	03d09000 	.word	0x03d09000
 8008094:	003d0900 	.word	0x003d0900
 8008098:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800809c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080a0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80080a4:	430b      	orrs	r3, r1
 80080a6:	d148      	bne.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80080a8:	4b27      	ldr	r3, [pc, #156]	@ (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80080aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80080b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80080b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080b8:	d02a      	beq.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80080ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080c0:	d838      	bhi.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80080c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d004      	beq.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80080c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080ce:	d00d      	beq.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80080d0:	e030      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80080d2:	4b1d      	ldr	r3, [pc, #116]	@ (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080de:	d102      	bne.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80080e0:	4b1a      	ldr	r3, [pc, #104]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80080e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080e4:	e02b      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080e6:	2300      	movs	r3, #0
 80080e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080ea:	e028      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080ec:	4b16      	ldr	r3, [pc, #88]	@ (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080f8:	d107      	bne.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 fae4 	bl	80086cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008108:	e019      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800810a:	2300      	movs	r3, #0
 800810c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800810e:	e016      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008110:	4b0d      	ldr	r3, [pc, #52]	@ (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008118:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800811c:	d107      	bne.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800811e:	f107 0318 	add.w	r3, r7, #24
 8008122:	4618      	mov	r0, r3
 8008124:	f000 f82a 	bl	800817c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800812c:	e007      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800812e:	2300      	movs	r3, #0
 8008130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008132:	e004      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008134:	2300      	movs	r3, #0
 8008136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008138:	e001      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800813a:	2300      	movs	r3, #0
 800813c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800813e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008140:	4618      	mov	r0, r3
 8008142:	3740      	adds	r7, #64	@ 0x40
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	58024400 	.word	0x58024400
 800814c:	017d7840 	.word	0x017d7840

08008150 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008154:	f7fd ffd4 	bl	8006100 <HAL_RCC_GetHCLKFreq>
 8008158:	4602      	mov	r2, r0
 800815a:	4b06      	ldr	r3, [pc, #24]	@ (8008174 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	091b      	lsrs	r3, r3, #4
 8008160:	f003 0307 	and.w	r3, r3, #7
 8008164:	4904      	ldr	r1, [pc, #16]	@ (8008178 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008166:	5ccb      	ldrb	r3, [r1, r3]
 8008168:	f003 031f 	and.w	r3, r3, #31
 800816c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008170:	4618      	mov	r0, r3
 8008172:	bd80      	pop	{r7, pc}
 8008174:	58024400 	.word	0x58024400
 8008178:	08018964 	.word	0x08018964

0800817c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800817c:	b480      	push	{r7}
 800817e:	b089      	sub	sp, #36	@ 0x24
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008184:	4ba1      	ldr	r3, [pc, #644]	@ (800840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008188:	f003 0303 	and.w	r3, r3, #3
 800818c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800818e:	4b9f      	ldr	r3, [pc, #636]	@ (800840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008192:	0b1b      	lsrs	r3, r3, #12
 8008194:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008198:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800819a:	4b9c      	ldr	r3, [pc, #624]	@ (800840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800819c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819e:	091b      	lsrs	r3, r3, #4
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80081a6:	4b99      	ldr	r3, [pc, #612]	@ (800840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081aa:	08db      	lsrs	r3, r3, #3
 80081ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	fb02 f303 	mul.w	r3, r2, r3
 80081b6:	ee07 3a90 	vmov	s15, r3
 80081ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 8111 	beq.w	80083ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	f000 8083 	beq.w	80082d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	f200 80a1 	bhi.w	800831c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d003      	beq.n	80081e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d056      	beq.n	8008294 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80081e6:	e099      	b.n	800831c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081e8:	4b88      	ldr	r3, [pc, #544]	@ (800840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0320 	and.w	r3, r3, #32
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d02d      	beq.n	8008250 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081f4:	4b85      	ldr	r3, [pc, #532]	@ (800840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	08db      	lsrs	r3, r3, #3
 80081fa:	f003 0303 	and.w	r3, r3, #3
 80081fe:	4a84      	ldr	r2, [pc, #528]	@ (8008410 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008200:	fa22 f303 	lsr.w	r3, r2, r3
 8008204:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	ee07 3a90 	vmov	s15, r3
 800820c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	ee07 3a90 	vmov	s15, r3
 8008216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800821a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800821e:	4b7b      	ldr	r3, [pc, #492]	@ (800840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008226:	ee07 3a90 	vmov	s15, r3
 800822a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800822e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008232:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800823a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800823e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800824a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800824e:	e087      	b.n	8008360 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	ee07 3a90 	vmov	s15, r3
 8008256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800825a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008418 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800825e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008262:	4b6a      	ldr	r3, [pc, #424]	@ (800840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008272:	ed97 6a03 	vldr	s12, [r7, #12]
 8008276:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800827a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800827e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800828a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800828e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008292:	e065      	b.n	8008360 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	ee07 3a90 	vmov	s15, r3
 800829a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800829e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800841c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082a6:	4b59      	ldr	r3, [pc, #356]	@ (800840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ae:	ee07 3a90 	vmov	s15, r3
 80082b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082d6:	e043      	b.n	8008360 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	ee07 3a90 	vmov	s15, r3
 80082de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008420 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80082e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ea:	4b48      	ldr	r3, [pc, #288]	@ (800840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f2:	ee07 3a90 	vmov	s15, r3
 80082f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80082fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800830a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800830e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800831a:	e021      	b.n	8008360 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	ee07 3a90 	vmov	s15, r3
 8008322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008326:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800841c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800832a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800832e:	4b37      	ldr	r3, [pc, #220]	@ (800840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008336:	ee07 3a90 	vmov	s15, r3
 800833a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800833e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008342:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800834a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800834e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800835a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800835e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008360:	4b2a      	ldr	r3, [pc, #168]	@ (800840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008364:	0a5b      	lsrs	r3, r3, #9
 8008366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800836a:	ee07 3a90 	vmov	s15, r3
 800836e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008372:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008376:	ee37 7a87 	vadd.f32	s14, s15, s14
 800837a:	edd7 6a07 	vldr	s13, [r7, #28]
 800837e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008386:	ee17 2a90 	vmov	r2, s15
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800838e:	4b1f      	ldr	r3, [pc, #124]	@ (800840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008392:	0c1b      	lsrs	r3, r3, #16
 8008394:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008398:	ee07 3a90 	vmov	s15, r3
 800839c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80083ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083b4:	ee17 2a90 	vmov	r2, s15
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80083bc:	4b13      	ldr	r3, [pc, #76]	@ (800840c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c0:	0e1b      	lsrs	r3, r3, #24
 80083c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083c6:	ee07 3a90 	vmov	s15, r3
 80083ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80083da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083e2:	ee17 2a90 	vmov	r2, s15
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80083ea:	e008      	b.n	80083fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	609a      	str	r2, [r3, #8]
}
 80083fe:	bf00      	nop
 8008400:	3724      	adds	r7, #36	@ 0x24
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	58024400 	.word	0x58024400
 8008410:	03d09000 	.word	0x03d09000
 8008414:	46000000 	.word	0x46000000
 8008418:	4c742400 	.word	0x4c742400
 800841c:	4a742400 	.word	0x4a742400
 8008420:	4bbebc20 	.word	0x4bbebc20

08008424 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008424:	b480      	push	{r7}
 8008426:	b089      	sub	sp, #36	@ 0x24
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800842c:	4ba1      	ldr	r3, [pc, #644]	@ (80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800842e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008430:	f003 0303 	and.w	r3, r3, #3
 8008434:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008436:	4b9f      	ldr	r3, [pc, #636]	@ (80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843a:	0d1b      	lsrs	r3, r3, #20
 800843c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008440:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008442:	4b9c      	ldr	r3, [pc, #624]	@ (80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008446:	0a1b      	lsrs	r3, r3, #8
 8008448:	f003 0301 	and.w	r3, r3, #1
 800844c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800844e:	4b99      	ldr	r3, [pc, #612]	@ (80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008452:	08db      	lsrs	r3, r3, #3
 8008454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	fb02 f303 	mul.w	r3, r2, r3
 800845e:	ee07 3a90 	vmov	s15, r3
 8008462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008466:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 8111 	beq.w	8008694 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	2b02      	cmp	r3, #2
 8008476:	f000 8083 	beq.w	8008580 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	2b02      	cmp	r3, #2
 800847e:	f200 80a1 	bhi.w	80085c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d003      	beq.n	8008490 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	2b01      	cmp	r3, #1
 800848c:	d056      	beq.n	800853c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800848e:	e099      	b.n	80085c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008490:	4b88      	ldr	r3, [pc, #544]	@ (80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0320 	and.w	r3, r3, #32
 8008498:	2b00      	cmp	r3, #0
 800849a:	d02d      	beq.n	80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800849c:	4b85      	ldr	r3, [pc, #532]	@ (80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	08db      	lsrs	r3, r3, #3
 80084a2:	f003 0303 	and.w	r3, r3, #3
 80084a6:	4a84      	ldr	r2, [pc, #528]	@ (80086b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80084a8:	fa22 f303 	lsr.w	r3, r2, r3
 80084ac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	ee07 3a90 	vmov	s15, r3
 80084b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	ee07 3a90 	vmov	s15, r3
 80084be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084c6:	4b7b      	ldr	r3, [pc, #492]	@ (80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ce:	ee07 3a90 	vmov	s15, r3
 80084d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80084da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80084f6:	e087      	b.n	8008608 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	ee07 3a90 	vmov	s15, r3
 80084fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008502:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80086c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800850a:	4b6a      	ldr	r3, [pc, #424]	@ (80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800850c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800850e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008512:	ee07 3a90 	vmov	s15, r3
 8008516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800851a:	ed97 6a03 	vldr	s12, [r7, #12]
 800851e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800852a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800852e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800853a:	e065      	b.n	8008608 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	ee07 3a90 	vmov	s15, r3
 8008542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008546:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80086c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800854a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800854e:	4b59      	ldr	r3, [pc, #356]	@ (80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008556:	ee07 3a90 	vmov	s15, r3
 800855a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800855e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008562:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800856a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800856e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800857a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800857e:	e043      	b.n	8008608 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	ee07 3a90 	vmov	s15, r3
 8008586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800858a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80086c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800858e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008592:	4b48      	ldr	r3, [pc, #288]	@ (80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800859a:	ee07 3a90 	vmov	s15, r3
 800859e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80085a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085c2:	e021      	b.n	8008608 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	ee07 3a90 	vmov	s15, r3
 80085ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80086c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80085d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085d6:	4b37      	ldr	r3, [pc, #220]	@ (80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085de:	ee07 3a90 	vmov	s15, r3
 80085e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008606:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008608:	4b2a      	ldr	r3, [pc, #168]	@ (80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800860a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800860c:	0a5b      	lsrs	r3, r3, #9
 800860e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008612:	ee07 3a90 	vmov	s15, r3
 8008616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800861a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800861e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008622:	edd7 6a07 	vldr	s13, [r7, #28]
 8008626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800862a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800862e:	ee17 2a90 	vmov	r2, s15
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008636:	4b1f      	ldr	r3, [pc, #124]	@ (80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863a:	0c1b      	lsrs	r3, r3, #16
 800863c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008640:	ee07 3a90 	vmov	s15, r3
 8008644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008648:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800864c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008650:	edd7 6a07 	vldr	s13, [r7, #28]
 8008654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800865c:	ee17 2a90 	vmov	r2, s15
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008664:	4b13      	ldr	r3, [pc, #76]	@ (80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008668:	0e1b      	lsrs	r3, r3, #24
 800866a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800866e:	ee07 3a90 	vmov	s15, r3
 8008672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008676:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800867a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800867e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800868a:	ee17 2a90 	vmov	r2, s15
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008692:	e008      	b.n	80086a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	609a      	str	r2, [r3, #8]
}
 80086a6:	bf00      	nop
 80086a8:	3724      	adds	r7, #36	@ 0x24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	58024400 	.word	0x58024400
 80086b8:	03d09000 	.word	0x03d09000
 80086bc:	46000000 	.word	0x46000000
 80086c0:	4c742400 	.word	0x4c742400
 80086c4:	4a742400 	.word	0x4a742400
 80086c8:	4bbebc20 	.word	0x4bbebc20

080086cc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b089      	sub	sp, #36	@ 0x24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086d4:	4ba0      	ldr	r3, [pc, #640]	@ (8008958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086d8:	f003 0303 	and.w	r3, r3, #3
 80086dc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80086de:	4b9e      	ldr	r3, [pc, #632]	@ (8008958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e2:	091b      	lsrs	r3, r3, #4
 80086e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80086e8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80086ea:	4b9b      	ldr	r3, [pc, #620]	@ (8008958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80086f4:	4b98      	ldr	r3, [pc, #608]	@ (8008958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086f8:	08db      	lsrs	r3, r3, #3
 80086fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086fe:	693a      	ldr	r2, [r7, #16]
 8008700:	fb02 f303 	mul.w	r3, r2, r3
 8008704:	ee07 3a90 	vmov	s15, r3
 8008708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800870c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	2b00      	cmp	r3, #0
 8008714:	f000 8111 	beq.w	800893a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	2b02      	cmp	r3, #2
 800871c:	f000 8083 	beq.w	8008826 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	2b02      	cmp	r3, #2
 8008724:	f200 80a1 	bhi.w	800886a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d056      	beq.n	80087e2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008734:	e099      	b.n	800886a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008736:	4b88      	ldr	r3, [pc, #544]	@ (8008958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 0320 	and.w	r3, r3, #32
 800873e:	2b00      	cmp	r3, #0
 8008740:	d02d      	beq.n	800879e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008742:	4b85      	ldr	r3, [pc, #532]	@ (8008958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	08db      	lsrs	r3, r3, #3
 8008748:	f003 0303 	and.w	r3, r3, #3
 800874c:	4a83      	ldr	r2, [pc, #524]	@ (800895c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800874e:	fa22 f303 	lsr.w	r3, r2, r3
 8008752:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	ee07 3a90 	vmov	s15, r3
 800875a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	ee07 3a90 	vmov	s15, r3
 8008764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800876c:	4b7a      	ldr	r3, [pc, #488]	@ (8008958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800876e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008774:	ee07 3a90 	vmov	s15, r3
 8008778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800877c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008780:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008784:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008788:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800878c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008790:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008798:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800879c:	e087      	b.n	80088ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	ee07 3a90 	vmov	s15, r3
 80087a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008964 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80087ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087b0:	4b69      	ldr	r3, [pc, #420]	@ (8008958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087b8:	ee07 3a90 	vmov	s15, r3
 80087bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80087c4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087e0:	e065      	b.n	80088ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	ee07 3a90 	vmov	s15, r3
 80087e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ec:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008968 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80087f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087f4:	4b58      	ldr	r3, [pc, #352]	@ (8008958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087fc:	ee07 3a90 	vmov	s15, r3
 8008800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008804:	ed97 6a03 	vldr	s12, [r7, #12]
 8008808:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800880c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008810:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008814:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008818:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800881c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008820:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008824:	e043      	b.n	80088ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	ee07 3a90 	vmov	s15, r3
 800882c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008830:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800896c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008834:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008838:	4b47      	ldr	r3, [pc, #284]	@ (8008958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800883a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800883c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008840:	ee07 3a90 	vmov	s15, r3
 8008844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008848:	ed97 6a03 	vldr	s12, [r7, #12]
 800884c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008850:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008854:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008858:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800885c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008864:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008868:	e021      	b.n	80088ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	ee07 3a90 	vmov	s15, r3
 8008870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008874:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008964 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800887c:	4b36      	ldr	r3, [pc, #216]	@ (8008958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800887e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008884:	ee07 3a90 	vmov	s15, r3
 8008888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800888c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008890:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008894:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008898:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800889c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088ac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80088ae:	4b2a      	ldr	r3, [pc, #168]	@ (8008958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088b2:	0a5b      	lsrs	r3, r3, #9
 80088b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088b8:	ee07 3a90 	vmov	s15, r3
 80088bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80088cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088d4:	ee17 2a90 	vmov	r2, s15
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80088dc:	4b1e      	ldr	r3, [pc, #120]	@ (8008958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088e0:	0c1b      	lsrs	r3, r3, #16
 80088e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80088fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008902:	ee17 2a90 	vmov	r2, s15
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800890a:	4b13      	ldr	r3, [pc, #76]	@ (8008958 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800890c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800890e:	0e1b      	lsrs	r3, r3, #24
 8008910:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008914:	ee07 3a90 	vmov	s15, r3
 8008918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800891c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008920:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008924:	edd7 6a07 	vldr	s13, [r7, #28]
 8008928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800892c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008930:	ee17 2a90 	vmov	r2, s15
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008938:	e008      	b.n	800894c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	609a      	str	r2, [r3, #8]
}
 800894c:	bf00      	nop
 800894e:	3724      	adds	r7, #36	@ 0x24
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	58024400 	.word	0x58024400
 800895c:	03d09000 	.word	0x03d09000
 8008960:	46000000 	.word	0x46000000
 8008964:	4c742400 	.word	0x4c742400
 8008968:	4a742400 	.word	0x4a742400
 800896c:	4bbebc20 	.word	0x4bbebc20

08008970 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800897e:	4b53      	ldr	r3, [pc, #332]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008982:	f003 0303 	and.w	r3, r3, #3
 8008986:	2b03      	cmp	r3, #3
 8008988:	d101      	bne.n	800898e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e099      	b.n	8008ac2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800898e:	4b4f      	ldr	r3, [pc, #316]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a4e      	ldr	r2, [pc, #312]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008994:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008998:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800899a:	f7fb faf5 	bl	8003f88 <HAL_GetTick>
 800899e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089a0:	e008      	b.n	80089b4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80089a2:	f7fb faf1 	bl	8003f88 <HAL_GetTick>
 80089a6:	4602      	mov	r2, r0
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d901      	bls.n	80089b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80089b0:	2303      	movs	r3, #3
 80089b2:	e086      	b.n	8008ac2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089b4:	4b45      	ldr	r3, [pc, #276]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1f0      	bne.n	80089a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80089c0:	4b42      	ldr	r3, [pc, #264]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 80089c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	031b      	lsls	r3, r3, #12
 80089ce:	493f      	ldr	r1, [pc, #252]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 80089d0:	4313      	orrs	r3, r2
 80089d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	3b01      	subs	r3, #1
 80089da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	3b01      	subs	r3, #1
 80089e4:	025b      	lsls	r3, r3, #9
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	431a      	orrs	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	3b01      	subs	r3, #1
 80089f0:	041b      	lsls	r3, r3, #16
 80089f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80089f6:	431a      	orrs	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	3b01      	subs	r3, #1
 80089fe:	061b      	lsls	r3, r3, #24
 8008a00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a04:	4931      	ldr	r1, [pc, #196]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008a06:	4313      	orrs	r3, r2
 8008a08:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008a0a:	4b30      	ldr	r3, [pc, #192]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	492d      	ldr	r1, [pc, #180]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a20:	f023 0220 	bic.w	r2, r3, #32
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	4928      	ldr	r1, [pc, #160]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008a2e:	4b27      	ldr	r3, [pc, #156]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a32:	4a26      	ldr	r2, [pc, #152]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008a34:	f023 0310 	bic.w	r3, r3, #16
 8008a38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008a3a:	4b24      	ldr	r3, [pc, #144]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008a3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a3e:	4b24      	ldr	r3, [pc, #144]	@ (8008ad0 <RCCEx_PLL2_Config+0x160>)
 8008a40:	4013      	ands	r3, r2
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	69d2      	ldr	r2, [r2, #28]
 8008a46:	00d2      	lsls	r2, r2, #3
 8008a48:	4920      	ldr	r1, [pc, #128]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a52:	4a1e      	ldr	r2, [pc, #120]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008a54:	f043 0310 	orr.w	r3, r3, #16
 8008a58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d106      	bne.n	8008a6e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008a60:	4b1a      	ldr	r3, [pc, #104]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a64:	4a19      	ldr	r2, [pc, #100]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008a66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a6c:	e00f      	b.n	8008a8e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d106      	bne.n	8008a82 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008a74:	4b15      	ldr	r3, [pc, #84]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a78:	4a14      	ldr	r2, [pc, #80]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008a7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a80:	e005      	b.n	8008a8e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008a82:	4b12      	ldr	r3, [pc, #72]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a86:	4a11      	ldr	r2, [pc, #68]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008a88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a0e      	ldr	r2, [pc, #56]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008a94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008a98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a9a:	f7fb fa75 	bl	8003f88 <HAL_GetTick>
 8008a9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008aa0:	e008      	b.n	8008ab4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008aa2:	f7fb fa71 	bl	8003f88 <HAL_GetTick>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d901      	bls.n	8008ab4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e006      	b.n	8008ac2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ab4:	4b05      	ldr	r3, [pc, #20]	@ (8008acc <RCCEx_PLL2_Config+0x15c>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d0f0      	beq.n	8008aa2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	58024400 	.word	0x58024400
 8008ad0:	ffff0007 	.word	0xffff0007

08008ad4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ae2:	4b53      	ldr	r3, [pc, #332]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae6:	f003 0303 	and.w	r3, r3, #3
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d101      	bne.n	8008af2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e099      	b.n	8008c26 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008af2:	4b4f      	ldr	r3, [pc, #316]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a4e      	ldr	r2, [pc, #312]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008af8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008afc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008afe:	f7fb fa43 	bl	8003f88 <HAL_GetTick>
 8008b02:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b04:	e008      	b.n	8008b18 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b06:	f7fb fa3f 	bl	8003f88 <HAL_GetTick>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d901      	bls.n	8008b18 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	e086      	b.n	8008c26 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b18:	4b45      	ldr	r3, [pc, #276]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1f0      	bne.n	8008b06 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008b24:	4b42      	ldr	r3, [pc, #264]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b28:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	051b      	lsls	r3, r3, #20
 8008b32:	493f      	ldr	r1, [pc, #252]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	628b      	str	r3, [r1, #40]	@ 0x28
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	025b      	lsls	r3, r3, #9
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	431a      	orrs	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	3b01      	subs	r3, #1
 8008b54:	041b      	lsls	r3, r3, #16
 8008b56:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008b5a:	431a      	orrs	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	3b01      	subs	r3, #1
 8008b62:	061b      	lsls	r3, r3, #24
 8008b64:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008b68:	4931      	ldr	r1, [pc, #196]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008b6e:	4b30      	ldr	r3, [pc, #192]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b72:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	492d      	ldr	r1, [pc, #180]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008b80:	4b2b      	ldr	r3, [pc, #172]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b84:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	4928      	ldr	r1, [pc, #160]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008b92:	4b27      	ldr	r3, [pc, #156]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b96:	4a26      	ldr	r2, [pc, #152]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008b98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008b9e:	4b24      	ldr	r3, [pc, #144]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008ba0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ba2:	4b24      	ldr	r3, [pc, #144]	@ (8008c34 <RCCEx_PLL3_Config+0x160>)
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	69d2      	ldr	r2, [r2, #28]
 8008baa:	00d2      	lsls	r2, r2, #3
 8008bac:	4920      	ldr	r1, [pc, #128]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d106      	bne.n	8008bd2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc8:	4a19      	ldr	r2, [pc, #100]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008bca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008bce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008bd0:	e00f      	b.n	8008bf2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d106      	bne.n	8008be6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008bd8:	4b15      	ldr	r3, [pc, #84]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bdc:	4a14      	ldr	r2, [pc, #80]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008bde:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008be2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008be4:	e005      	b.n	8008bf2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008be6:	4b12      	ldr	r3, [pc, #72]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bea:	4a11      	ldr	r2, [pc, #68]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008bec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a0e      	ldr	r2, [pc, #56]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bfe:	f7fb f9c3 	bl	8003f88 <HAL_GetTick>
 8008c02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c04:	e008      	b.n	8008c18 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c06:	f7fb f9bf 	bl	8003f88 <HAL_GetTick>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d901      	bls.n	8008c18 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e006      	b.n	8008c26 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c18:	4b05      	ldr	r3, [pc, #20]	@ (8008c30 <RCCEx_PLL3_Config+0x15c>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d0f0      	beq.n	8008c06 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	58024400 	.word	0x58024400
 8008c34:	ffff0007 	.word	0xffff0007

08008c38 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08a      	sub	sp, #40	@ 0x28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e075      	b.n	8008d36 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d105      	bne.n	8008c62 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7f8 fcdf 	bl	8001620 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2204      	movs	r2, #4
 8008c66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f868 	bl	8008d40 <HAL_SD_InitCard>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e05d      	b.n	8008d36 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008c7a:	f107 0308 	add.w	r3, r7, #8
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fdaf 	bl	80097e4 <HAL_SD_GetCardStatus>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e052      	b.n	8008d36 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008c90:	7e3b      	ldrb	r3, [r7, #24]
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008c96:	7e7b      	ldrb	r3, [r7, #25]
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d10a      	bne.n	8008cba <HAL_SD_Init+0x82>
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d102      	bne.n	8008cb0 <HAL_SD_Init+0x78>
 8008caa:	6a3b      	ldr	r3, [r7, #32]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d004      	beq.n	8008cba <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008cb6:	659a      	str	r2, [r3, #88]	@ 0x58
 8008cb8:	e00b      	b.n	8008cd2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d104      	bne.n	8008ccc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008cc8:	659a      	str	r2, [r3, #88]	@ 0x58
 8008cca:	e002      	b.n	8008cd2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fe6d 	bl	80099b8 <HAL_SD_ConfigWideBusOperation>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e026      	b.n	8008d36 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008ce8:	f7fb f94e 	bl	8003f88 <HAL_GetTick>
 8008cec:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008cee:	e011      	b.n	8008d14 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008cf0:	f7fb f94a 	bl	8003f88 <HAL_GetTick>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008cfe:	d109      	bne.n	8008d14 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008d06:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008d10:	2303      	movs	r3, #3
 8008d12:	e010      	b.n	8008d36 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 ff61 	bl	8009bdc <HAL_SD_GetCardState>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b04      	cmp	r3, #4
 8008d1e:	d1e7      	bne.n	8008cf0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3728      	adds	r7, #40	@ 0x28
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008d40:	b590      	push	{r4, r7, lr}
 8008d42:	b08d      	sub	sp, #52	@ 0x34
 8008d44:	af02      	add	r7, sp, #8
 8008d46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008d50:	2300      	movs	r3, #0
 8008d52:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008d54:	2300      	movs	r3, #0
 8008d56:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008d58:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008d5c:	f04f 0100 	mov.w	r1, #0
 8008d60:	f7fe fc76 	bl	8007650 <HAL_RCCEx_GetPeriphCLKFreq>
 8008d64:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8008d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d109      	bne.n	8008d80 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008d7a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e070      	b.n	8008e62 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d82:	0a1b      	lsrs	r3, r3, #8
 8008d84:	4a39      	ldr	r2, [pc, #228]	@ (8008e6c <HAL_SD_InitCard+0x12c>)
 8008d86:	fba2 2303 	umull	r2, r3, r2, r3
 8008d8a:	091b      	lsrs	r3, r3, #4
 8008d8c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681c      	ldr	r4, [r3, #0]
 8008d92:	466a      	mov	r2, sp
 8008d94:	f107 0318 	add.w	r3, r7, #24
 8008d98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008d9c:	e882 0003 	stmia.w	r2, {r0, r1}
 8008da0:	f107 030c 	add.w	r3, r7, #12
 8008da4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008da6:	4620      	mov	r0, r4
 8008da8:	f005 fb8e 	bl	800e4c8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f005 fbd1 	bl	800e558 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d005      	beq.n	8008dc8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	005b      	lsls	r3, r3, #1
 8008dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d007      	beq.n	8008dde <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008dce:	4a28      	ldr	r2, [pc, #160]	@ (8008e70 <HAL_SD_InitCard+0x130>)
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fb f8e1 	bl	8003fa0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 ffea 	bl	8009db8 <SD_PowerON>
 8008de4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008de6:	6a3b      	ldr	r3, [r7, #32]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00b      	beq.n	8008e04 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008df8:	6a3b      	ldr	r3, [r7, #32]
 8008dfa:	431a      	orrs	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e02e      	b.n	8008e62 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 ff09 	bl	8009c1c <SD_InitCard>
 8008e0a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00b      	beq.n	8008e2a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e1e:	6a3b      	ldr	r3, [r7, #32]
 8008e20:	431a      	orrs	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e01b      	b.n	8008e62 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008e32:	4618      	mov	r0, r3
 8008e34:	f005 fc26 	bl	800e684 <SDMMC_CmdBlockLength>
 8008e38:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e3a:	6a3b      	ldr	r3, [r7, #32]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00f      	beq.n	8008e60 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a0b      	ldr	r2, [pc, #44]	@ (8008e74 <HAL_SD_InitCard+0x134>)
 8008e46:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e000      	b.n	8008e62 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	372c      	adds	r7, #44	@ 0x2c
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd90      	pop	{r4, r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	014f8b59 	.word	0x014f8b59
 8008e70:	00012110 	.word	0x00012110
 8008e74:	1fe00fff 	.word	0x1fe00fff

08008e78 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08c      	sub	sp, #48	@ 0x30
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
 8008e84:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d107      	bne.n	8008ea0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e94:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e08d      	b.n	8008fbc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	f040 8086 	bne.w	8008fba <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008eb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	441a      	add	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d907      	bls.n	8008ed2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ec6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e074      	b.n	8008fbc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2203      	movs	r2, #3
 8008ed6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	025a      	lsls	r2, r3, #9
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d002      	beq.n	8008efe <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8008ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008efa:	025b      	lsls	r3, r3, #9
 8008efc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008efe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f02:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	025b      	lsls	r3, r3, #9
 8008f08:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008f0a:	2390      	movs	r3, #144	@ 0x90
 8008f0c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f0e:	2302      	movs	r3, #2
 8008f10:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008f16:	2300      	movs	r3, #0
 8008f18:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f107 0210 	add.w	r2, r7, #16
 8008f22:	4611      	mov	r1, r2
 8008f24:	4618      	mov	r0, r3
 8008f26:	f005 fb81 	bl	800e62c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68da      	ldr	r2, [r3, #12]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f38:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2201      	movs	r2, #1
 8008f48:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d90a      	bls.n	8008f66 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2282      	movs	r2, #130	@ 0x82
 8008f54:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f005 fbd7 	bl	800e710 <SDMMC_CmdReadMultiBlock>
 8008f62:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008f64:	e009      	b.n	8008f7a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2281      	movs	r2, #129	@ 0x81
 8008f6a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f72:	4618      	mov	r0, r3
 8008f74:	f005 fba9 	bl	800e6ca <SDMMC_CmdReadSingleBlock>
 8008f78:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d012      	beq.n	8008fa6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a0f      	ldr	r2, [pc, #60]	@ (8008fc4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8008f86:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f8e:	431a      	orrs	r2, r3
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e00a      	b.n	8008fbc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8008fb4:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	e000      	b.n	8008fbc <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008fba:	2302      	movs	r3, #2
  }
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3730      	adds	r7, #48	@ 0x30
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	1fe00fff 	.word	0x1fe00fff

08008fc8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08c      	sub	sp, #48	@ 0x30
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
 8008fd4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d107      	bne.n	8008ff0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fe4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e08d      	b.n	800910c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	f040 8086 	bne.w	800910a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009004:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	441a      	add	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800900e:	429a      	cmp	r2, r3
 8009010:	d907      	bls.n	8009022 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009016:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e074      	b.n	800910c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2203      	movs	r2, #3
 8009026:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2200      	movs	r2, #0
 8009030:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	025a      	lsls	r2, r3, #9
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009044:	2b01      	cmp	r3, #1
 8009046:	d002      	beq.n	800904e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8009048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800904a:	025b      	lsls	r3, r3, #9
 800904c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800904e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009052:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	025b      	lsls	r3, r3, #9
 8009058:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800905a:	2390      	movs	r3, #144	@ 0x90
 800905c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800905e:	2300      	movs	r3, #0
 8009060:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009062:	2300      	movs	r3, #0
 8009064:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009066:	2300      	movs	r3, #0
 8009068:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f107 0210 	add.w	r2, r7, #16
 8009072:	4611      	mov	r1, r2
 8009074:	4618      	mov	r0, r3
 8009076:	f005 fad9 	bl	800e62c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68da      	ldr	r2, [r3, #12]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009088:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2201      	movs	r2, #1
 8009098:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d90a      	bls.n	80090b6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	22a0      	movs	r2, #160	@ 0xa0
 80090a4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090ac:	4618      	mov	r0, r3
 80090ae:	f005 fb75 	bl	800e79c <SDMMC_CmdWriteMultiBlock>
 80090b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80090b4:	e009      	b.n	80090ca <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2290      	movs	r2, #144	@ 0x90
 80090ba:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090c2:	4618      	mov	r0, r3
 80090c4:	f005 fb47 	bl	800e756 <SDMMC_CmdWriteSingleBlock>
 80090c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80090ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d012      	beq.n	80090f6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a0f      	ldr	r2, [pc, #60]	@ (8009114 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80090d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090de:	431a      	orrs	r2, r3
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e00a      	b.n	800910c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8009104:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	e000      	b.n	800910c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800910a:	2302      	movs	r3, #2
  }
}
 800910c:	4618      	mov	r0, r3
 800910e:	3730      	adds	r7, #48	@ 0x30
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	1fe00fff 	.word	0x1fe00fff

08009118 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009124:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800912c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d008      	beq.n	8009146 <HAL_SD_IRQHandler+0x2e>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f003 0308 	and.w	r3, r3, #8
 800913a:	2b00      	cmp	r3, #0
 800913c:	d003      	beq.n	8009146 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f001 f926 	bl	800a390 <SD_Read_IT>
 8009144:	e19a      	b.n	800947c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800914c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 80ac 	beq.w	80092ae <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800915e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	4b59      	ldr	r3, [pc, #356]	@ (80092d0 <HAL_SD_IRQHandler+0x1b8>)
 800916c:	400b      	ands	r3, r1
 800916e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800917e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68da      	ldr	r2, [r3, #12]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800918e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f003 0308 	and.w	r3, r3, #8
 8009196:	2b00      	cmp	r3, #0
 8009198:	d038      	beq.n	800920c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f003 0302 	and.w	r3, r3, #2
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d104      	bne.n	80091ae <HAL_SD_IRQHandler+0x96>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f003 0320 	and.w	r3, r3, #32
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d011      	beq.n	80091d2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4618      	mov	r0, r3
 80091b4:	f005 fb16 	bl	800e7e4 <SDMMC_CmdStopTransfer>
 80091b8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d008      	beq.n	80091d2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	431a      	orrs	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f95b 	bl	8009488 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a3f      	ldr	r2, [pc, #252]	@ (80092d4 <HAL_SD_IRQHandler+0x1bc>)
 80091d8:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d104      	bne.n	80091fc <HAL_SD_IRQHandler+0xe4>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f003 0302 	and.w	r3, r3, #2
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d003      	beq.n	8009204 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f005 ffc9 	bl	800f194 <HAL_SD_RxCpltCallback>
 8009202:	e13b      	b.n	800947c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f005 ffbb 	bl	800f180 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800920a:	e137      	b.n	800947c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 8132 	beq.w	800947c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2200      	movs	r2, #0
 800921e:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2200      	movs	r2, #0
 8009226:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2200      	movs	r2, #0
 800922e:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f003 0302 	and.w	r3, r3, #2
 8009236:	2b00      	cmp	r3, #0
 8009238:	d104      	bne.n	8009244 <HAL_SD_IRQHandler+0x12c>
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f003 0320 	and.w	r3, r3, #32
 8009240:	2b00      	cmp	r3, #0
 8009242:	d011      	beq.n	8009268 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4618      	mov	r0, r3
 800924a:	f005 facb 	bl	800e7e4 <SDMMC_CmdStopTransfer>
 800924e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d008      	beq.n	8009268 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	431a      	orrs	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f910 	bl	8009488 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f003 0310 	and.w	r3, r3, #16
 800927c:	2b00      	cmp	r3, #0
 800927e:	d104      	bne.n	800928a <HAL_SD_IRQHandler+0x172>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f003 0320 	and.w	r3, r3, #32
 8009286:	2b00      	cmp	r3, #0
 8009288:	d002      	beq.n	8009290 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f005 ff78 	bl	800f180 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f003 0301 	and.w	r3, r3, #1
 8009296:	2b00      	cmp	r3, #0
 8009298:	d105      	bne.n	80092a6 <HAL_SD_IRQHandler+0x18e>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f003 0302 	and.w	r3, r3, #2
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 80eb 	beq.w	800947c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f005 ff74 	bl	800f194 <HAL_SD_RxCpltCallback>
}
 80092ac:	e0e6      	b.n	800947c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00d      	beq.n	80092d8 <HAL_SD_IRQHandler+0x1c0>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f003 0308 	and.w	r3, r3, #8
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d008      	beq.n	80092d8 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f001 f8a8 	bl	800a41c <SD_Write_IT>
 80092cc:	e0d6      	b.n	800947c <HAL_SD_IRQHandler+0x364>
 80092ce:	bf00      	nop
 80092d0:	ffff3ec5 	.word	0xffff3ec5
 80092d4:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092de:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 809d 	beq.w	8009422 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ee:	f003 0302 	and.w	r3, r3, #2
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d005      	beq.n	8009302 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092fa:	f043 0202 	orr.w	r2, r3, #2
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009308:	f003 0308 	and.w	r3, r3, #8
 800930c:	2b00      	cmp	r3, #0
 800930e:	d005      	beq.n	800931c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009314:	f043 0208 	orr.w	r2, r3, #8
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009322:	f003 0320 	and.w	r3, r3, #32
 8009326:	2b00      	cmp	r3, #0
 8009328:	d005      	beq.n	8009336 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800932e:	f043 0220 	orr.w	r2, r3, #32
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800933c:	f003 0310 	and.w	r3, r3, #16
 8009340:	2b00      	cmp	r3, #0
 8009342:	d005      	beq.n	8009350 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009348:	f043 0210 	orr.w	r2, r3, #16
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a4b      	ldr	r2, [pc, #300]	@ (8009484 <HAL_SD_IRQHandler+0x36c>)
 8009356:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009366:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68da      	ldr	r2, [r3, #12]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009376:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009386:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68da      	ldr	r2, [r3, #12]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009396:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4618      	mov	r0, r3
 800939e:	f005 fa21 	bl	800e7e4 <SDMMC_CmdStopTransfer>
 80093a2:	4602      	mov	r2, r0
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093a8:	431a      	orrs	r2, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68da      	ldr	r2, [r3, #12]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80093bc:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80093c6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f003 0308 	and.w	r3, r3, #8
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00a      	beq.n	80093e8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2201      	movs	r2, #1
 80093d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 f851 	bl	8009488 <HAL_SD_ErrorCallback>
}
 80093e6:	e049      	b.n	800947c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d044      	beq.n	800947c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d040      	beq.n	800947c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8009408:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2200      	movs	r2, #0
 8009410:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f834 	bl	8009488 <HAL_SD_ErrorCallback>
}
 8009420:	e02c      	b.n	800947c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d025      	beq.n	800947c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009438:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009440:	f003 0304 	and.w	r3, r3, #4
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10c      	bne.n	8009462 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f003 0320 	and.w	r3, r3, #32
 800944e:	2b00      	cmp	r3, #0
 8009450:	d003      	beq.n	800945a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f001 f84a 	bl	800a4ec <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8009458:	e010      	b.n	800947c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f001 f832 	bl	800a4c4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8009460:	e00c      	b.n	800947c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f003 0320 	and.w	r3, r3, #32
 8009468:	2b00      	cmp	r3, #0
 800946a:	d003      	beq.n	8009474 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f001 f833 	bl	800a4d8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8009472:	e003      	b.n	800947c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f001 f81b 	bl	800a4b0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800947a:	e7ff      	b.n	800947c <HAL_SD_IRQHandler+0x364>
 800947c:	bf00      	nop
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	18000f3a 	.word	0x18000f3a

08009488 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094aa:	0f9b      	lsrs	r3, r3, #30
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094b6:	0e9b      	lsrs	r3, r3, #26
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	f003 030f 	and.w	r3, r3, #15
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094c8:	0e1b      	lsrs	r3, r3, #24
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	f003 0303 	and.w	r3, r3, #3
 80094d0:	b2da      	uxtb	r2, r3
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094da:	0c1b      	lsrs	r3, r3, #16
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094e6:	0a1b      	lsrs	r3, r3, #8
 80094e8:	b2da      	uxtb	r2, r3
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094fc:	0d1b      	lsrs	r3, r3, #20
 80094fe:	b29a      	uxth	r2, r3
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009508:	0c1b      	lsrs	r3, r3, #16
 800950a:	b2db      	uxtb	r3, r3
 800950c:	f003 030f 	and.w	r3, r3, #15
 8009510:	b2da      	uxtb	r2, r3
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800951a:	0bdb      	lsrs	r3, r3, #15
 800951c:	b2db      	uxtb	r3, r3
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	b2da      	uxtb	r2, r3
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800952c:	0b9b      	lsrs	r3, r3, #14
 800952e:	b2db      	uxtb	r3, r3
 8009530:	f003 0301 	and.w	r3, r3, #1
 8009534:	b2da      	uxtb	r2, r3
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800953e:	0b5b      	lsrs	r3, r3, #13
 8009540:	b2db      	uxtb	r3, r3
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	b2da      	uxtb	r2, r3
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009550:	0b1b      	lsrs	r3, r3, #12
 8009552:	b2db      	uxtb	r3, r3
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	b2da      	uxtb	r2, r3
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	2200      	movs	r2, #0
 8009562:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009568:	2b00      	cmp	r3, #0
 800956a:	d163      	bne.n	8009634 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009570:	009a      	lsls	r2, r3, #2
 8009572:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009576:	4013      	ands	r3, r2
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800957c:	0f92      	lsrs	r2, r2, #30
 800957e:	431a      	orrs	r2, r3
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009588:	0edb      	lsrs	r3, r3, #27
 800958a:	b2db      	uxtb	r3, r3
 800958c:	f003 0307 	and.w	r3, r3, #7
 8009590:	b2da      	uxtb	r2, r3
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800959a:	0e1b      	lsrs	r3, r3, #24
 800959c:	b2db      	uxtb	r3, r3
 800959e:	f003 0307 	and.w	r3, r3, #7
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095ac:	0d5b      	lsrs	r3, r3, #21
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	f003 0307 	and.w	r3, r3, #7
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095be:	0c9b      	lsrs	r3, r3, #18
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	f003 0307 	and.w	r3, r3, #7
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095d0:	0bdb      	lsrs	r3, r3, #15
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	f003 0307 	and.w	r3, r3, #7
 80095d8:	b2da      	uxtb	r2, r3
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	1c5a      	adds	r2, r3, #1
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	7e1b      	ldrb	r3, [r3, #24]
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	f003 0307 	and.w	r3, r3, #7
 80095f2:	3302      	adds	r3, #2
 80095f4:	2201      	movs	r2, #1
 80095f6:	fa02 f303 	lsl.w	r3, r2, r3
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80095fe:	fb03 f202 	mul.w	r2, r3, r2
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	7a1b      	ldrb	r3, [r3, #8]
 800960a:	b2db      	uxtb	r3, r3
 800960c:	f003 030f 	and.w	r3, r3, #15
 8009610:	2201      	movs	r2, #1
 8009612:	409a      	lsls	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009620:	0a52      	lsrs	r2, r2, #9
 8009622:	fb03 f202 	mul.w	r2, r3, r2
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009630:	655a      	str	r2, [r3, #84]	@ 0x54
 8009632:	e031      	b.n	8009698 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009638:	2b01      	cmp	r3, #1
 800963a:	d11d      	bne.n	8009678 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009640:	041b      	lsls	r3, r3, #16
 8009642:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800964a:	0c1b      	lsrs	r3, r3, #16
 800964c:	431a      	orrs	r2, r3
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	3301      	adds	r3, #1
 8009658:	029a      	lsls	r2, r3, #10
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800966c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	655a      	str	r2, [r3, #84]	@ 0x54
 8009676:	e00f      	b.n	8009698 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a58      	ldr	r2, [pc, #352]	@ (80097e0 <HAL_SD_GetCardCSD+0x344>)
 800967e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009684:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e09d      	b.n	80097d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800969c:	0b9b      	lsrs	r3, r3, #14
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	f003 0301 	and.w	r3, r3, #1
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096ae:	09db      	lsrs	r3, r3, #7
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096b6:	b2da      	uxtb	r2, r3
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096d0:	0fdb      	lsrs	r3, r3, #31
 80096d2:	b2da      	uxtb	r2, r3
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096dc:	0f5b      	lsrs	r3, r3, #29
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	f003 0303 	and.w	r3, r3, #3
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096ee:	0e9b      	lsrs	r3, r3, #26
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	f003 0307 	and.w	r3, r3, #7
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009700:	0d9b      	lsrs	r3, r3, #22
 8009702:	b2db      	uxtb	r3, r3
 8009704:	f003 030f 	and.w	r3, r3, #15
 8009708:	b2da      	uxtb	r2, r3
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009712:	0d5b      	lsrs	r3, r3, #21
 8009714:	b2db      	uxtb	r3, r3
 8009716:	f003 0301 	and.w	r3, r3, #1
 800971a:	b2da      	uxtb	r2, r3
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	2200      	movs	r2, #0
 8009726:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800972e:	0c1b      	lsrs	r3, r3, #16
 8009730:	b2db      	uxtb	r3, r3
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	b2da      	uxtb	r2, r3
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009742:	0bdb      	lsrs	r3, r3, #15
 8009744:	b2db      	uxtb	r3, r3
 8009746:	f003 0301 	and.w	r3, r3, #1
 800974a:	b2da      	uxtb	r2, r3
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009756:	0b9b      	lsrs	r3, r3, #14
 8009758:	b2db      	uxtb	r3, r3
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	b2da      	uxtb	r2, r3
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800976a:	0b5b      	lsrs	r3, r3, #13
 800976c:	b2db      	uxtb	r3, r3
 800976e:	f003 0301 	and.w	r3, r3, #1
 8009772:	b2da      	uxtb	r2, r3
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800977e:	0b1b      	lsrs	r3, r3, #12
 8009780:	b2db      	uxtb	r3, r3
 8009782:	f003 0301 	and.w	r3, r3, #1
 8009786:	b2da      	uxtb	r2, r3
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009792:	0a9b      	lsrs	r3, r3, #10
 8009794:	b2db      	uxtb	r3, r3
 8009796:	f003 0303 	and.w	r3, r3, #3
 800979a:	b2da      	uxtb	r2, r3
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80097a6:	0a1b      	lsrs	r3, r3, #8
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	f003 0303 	and.w	r3, r3, #3
 80097ae:	b2da      	uxtb	r2, r3
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80097ba:	085b      	lsrs	r3, r3, #1
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097c2:	b2da      	uxtb	r2, r3
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr
 80097e0:	1fe00fff 	.word	0x1fe00fff

080097e4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b094      	sub	sp, #80	@ 0x50
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80097ee:	2300      	movs	r3, #0
 80097f0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	2b03      	cmp	r3, #3
 80097fe:	d101      	bne.n	8009804 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	e0a7      	b.n	8009954 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009804:	f107 0308 	add.w	r3, r7, #8
 8009808:	4619      	mov	r1, r3
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fb62 	bl	8009ed4 <SD_SendSDStatus>
 8009810:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009812:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009814:	2b00      	cmp	r3, #0
 8009816:	d011      	beq.n	800983c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a4f      	ldr	r2, [pc, #316]	@ (800995c <HAL_SD_GetCardStatus+0x178>)
 800981e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009826:	431a      	orrs	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800983a:	e070      	b.n	800991e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	099b      	lsrs	r3, r3, #6
 8009840:	b2db      	uxtb	r3, r3
 8009842:	f003 0303 	and.w	r3, r3, #3
 8009846:	b2da      	uxtb	r2, r3
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	095b      	lsrs	r3, r3, #5
 8009850:	b2db      	uxtb	r3, r3
 8009852:	f003 0301 	and.w	r3, r3, #1
 8009856:	b2da      	uxtb	r2, r3
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	0a1b      	lsrs	r3, r3, #8
 8009860:	b29b      	uxth	r3, r3
 8009862:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009866:	b29a      	uxth	r2, r3
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	0e1b      	lsrs	r3, r3, #24
 800986c:	b29b      	uxth	r3, r3
 800986e:	4313      	orrs	r3, r2
 8009870:	b29a      	uxth	r2, r3
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	061a      	lsls	r2, r3, #24
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	021b      	lsls	r3, r3, #8
 800987e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009882:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	0a1b      	lsrs	r3, r3, #8
 8009888:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800988c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	0e1b      	lsrs	r3, r3, #24
 8009892:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	b2da      	uxtb	r2, r3
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	0a1b      	lsrs	r3, r3, #8
 80098a4:	b2da      	uxtb	r2, r3
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	0d1b      	lsrs	r3, r3, #20
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	f003 030f 	and.w	r3, r3, #15
 80098b4:	b2da      	uxtb	r2, r3
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	0c1b      	lsrs	r3, r3, #16
 80098be:	b29b      	uxth	r3, r3
 80098c0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	4313      	orrs	r3, r2
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	0a9b      	lsrs	r3, r3, #10
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	0a1b      	lsrs	r3, r3, #8
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	f003 0303 	and.w	r3, r3, #3
 80098f0:	b2da      	uxtb	r2, r3
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	091b      	lsrs	r3, r3, #4
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	f003 030f 	and.w	r3, r3, #15
 8009900:	b2da      	uxtb	r2, r3
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	b2db      	uxtb	r3, r3
 800990a:	f003 030f 	and.w	r3, r3, #15
 800990e:	b2da      	uxtb	r2, r3
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	0e1b      	lsrs	r3, r3, #24
 8009918:	b2da      	uxtb	r2, r3
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009926:	4618      	mov	r0, r3
 8009928:	f004 feac 	bl	800e684 <SDMMC_CmdBlockLength>
 800992c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800992e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00d      	beq.n	8009950 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a08      	ldr	r2, [pc, #32]	@ (800995c <HAL_SD_GetCardStatus+0x178>)
 800993a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009940:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8009950:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8009954:	4618      	mov	r0, r3
 8009956:	3750      	adds	r7, #80	@ 0x50
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	1fe00fff 	.word	0x1fe00fff

08009960 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80099b8:	b590      	push	{r4, r7, lr}
 80099ba:	b08d      	sub	sp, #52	@ 0x34
 80099bc:	af02      	add	r7, sp, #8
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2203      	movs	r2, #3
 80099cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d4:	2b03      	cmp	r3, #3
 80099d6:	d02e      	beq.n	8009a36 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099de:	d106      	bne.n	80099ee <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099e4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80099ec:	e029      	b.n	8009a42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099f4:	d10a      	bne.n	8009a0c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 fb64 	bl	800a0c4 <SD_WideBus_Enable>
 80099fc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a02:	6a3b      	ldr	r3, [r7, #32]
 8009a04:	431a      	orrs	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	635a      	str	r2, [r3, #52]	@ 0x34
 8009a0a:	e01a      	b.n	8009a42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10a      	bne.n	8009a28 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 fba1 	bl	800a15a <SD_WideBus_Disable>
 8009a18:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a1e:	6a3b      	ldr	r3, [r7, #32]
 8009a20:	431a      	orrs	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	635a      	str	r2, [r3, #52]	@ 0x34
 8009a26:	e00c      	b.n	8009a42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a2c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	635a      	str	r2, [r3, #52]	@ 0x34
 8009a34:	e005      	b.n	8009a42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a3a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d007      	beq.n	8009a5a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a5f      	ldr	r2, [pc, #380]	@ (8009bcc <HAL_SD_ConfigWideBusOperation+0x214>)
 8009a50:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009a58:	e096      	b.n	8009b88 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009a5a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009a5e:	f04f 0100 	mov.w	r1, #0
 8009a62:	f7fd fdf5 	bl	8007650 <HAL_RCCEx_GetPeriphCLKFreq>
 8009a66:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f000 8083 	beq.w	8009b76 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	695a      	ldr	r2, [r3, #20]
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	4950      	ldr	r1, [pc, #320]	@ (8009bd0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009a8e:	fba1 1303 	umull	r1, r3, r1, r3
 8009a92:	0e1b      	lsrs	r3, r3, #24
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d303      	bcc.n	8009aa0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	695b      	ldr	r3, [r3, #20]
 8009a9c:	61bb      	str	r3, [r7, #24]
 8009a9e:	e05a      	b.n	8009b56 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009aa8:	d103      	bne.n	8009ab2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	695b      	ldr	r3, [r3, #20]
 8009aae:	61bb      	str	r3, [r7, #24]
 8009ab0:	e051      	b.n	8009b56 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009aba:	d126      	bne.n	8009b0a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	695b      	ldr	r3, [r3, #20]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10e      	bne.n	8009ae2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	4a43      	ldr	r2, [pc, #268]	@ (8009bd4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d906      	bls.n	8009ada <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	4a40      	ldr	r2, [pc, #256]	@ (8009bd0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad4:	0e5b      	lsrs	r3, r3, #25
 8009ad6:	61bb      	str	r3, [r7, #24]
 8009ad8:	e03d      	b.n	8009b56 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	695b      	ldr	r3, [r3, #20]
 8009ade:	61bb      	str	r3, [r7, #24]
 8009ae0:	e039      	b.n	8009b56 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	695b      	ldr	r3, [r3, #20]
 8009ae6:	005b      	lsls	r3, r3, #1
 8009ae8:	69fa      	ldr	r2, [r7, #28]
 8009aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aee:	4a39      	ldr	r2, [pc, #228]	@ (8009bd4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d906      	bls.n	8009b02 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	4a36      	ldr	r2, [pc, #216]	@ (8009bd0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009af8:	fba2 2303 	umull	r2, r3, r2, r3
 8009afc:	0e5b      	lsrs	r3, r3, #25
 8009afe:	61bb      	str	r3, [r7, #24]
 8009b00:	e029      	b.n	8009b56 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	61bb      	str	r3, [r7, #24]
 8009b08:	e025      	b.n	8009b56 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10e      	bne.n	8009b30 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	4a30      	ldr	r2, [pc, #192]	@ (8009bd8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d906      	bls.n	8009b28 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	4a2c      	ldr	r2, [pc, #176]	@ (8009bd0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b22:	0e1b      	lsrs	r3, r3, #24
 8009b24:	61bb      	str	r3, [r7, #24]
 8009b26:	e016      	b.n	8009b56 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	695b      	ldr	r3, [r3, #20]
 8009b2c:	61bb      	str	r3, [r7, #24]
 8009b2e:	e012      	b.n	8009b56 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	005b      	lsls	r3, r3, #1
 8009b36:	69fa      	ldr	r2, [r7, #28]
 8009b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b3c:	4a26      	ldr	r2, [pc, #152]	@ (8009bd8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d906      	bls.n	8009b50 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	4a22      	ldr	r2, [pc, #136]	@ (8009bd0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009b46:	fba2 2303 	umull	r2, r3, r2, r3
 8009b4a:	0e1b      	lsrs	r3, r3, #24
 8009b4c:	61bb      	str	r3, [r7, #24]
 8009b4e:	e002      	b.n	8009b56 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	695b      	ldr	r3, [r3, #20]
 8009b54:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681c      	ldr	r4, [r3, #0]
 8009b5a:	466a      	mov	r2, sp
 8009b5c:	f107 0314 	add.w	r3, r7, #20
 8009b60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009b64:	e882 0003 	stmia.w	r2, {r0, r1}
 8009b68:	f107 0308 	add.w	r3, r7, #8
 8009b6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b6e:	4620      	mov	r0, r4
 8009b70:	f004 fcaa 	bl	800e4c8 <SDMMC_Init>
 8009b74:	e008      	b.n	8009b88 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b7a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009b90:	4618      	mov	r0, r3
 8009b92:	f004 fd77 	bl	800e684 <SDMMC_CmdBlockLength>
 8009b96:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b98:	6a3b      	ldr	r3, [r7, #32]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00c      	beq.n	8009bb8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8009bcc <HAL_SD_ConfigWideBusOperation+0x214>)
 8009ba4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009baa:	6a3b      	ldr	r3, [r7, #32]
 8009bac:	431a      	orrs	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8009bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	372c      	adds	r7, #44	@ 0x2c
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd90      	pop	{r4, r7, pc}
 8009bcc:	1fe00fff 	.word	0x1fe00fff
 8009bd0:	55e63b89 	.word	0x55e63b89
 8009bd4:	02faf080 	.word	0x02faf080
 8009bd8:	017d7840 	.word	0x017d7840

08009bdc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009be4:	2300      	movs	r3, #0
 8009be6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009be8:	f107 030c 	add.w	r3, r7, #12
 8009bec:	4619      	mov	r1, r3
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fa40 	bl	800a074 <SD_SendStatus>
 8009bf4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d005      	beq.n	8009c08 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	431a      	orrs	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	0a5b      	lsrs	r3, r3, #9
 8009c0c:	f003 030f 	and.w	r3, r3, #15
 8009c10:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009c12:	693b      	ldr	r3, [r7, #16]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3718      	adds	r7, #24
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b090      	sub	sp, #64	@ 0x40
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009c24:	2300      	movs	r3, #0
 8009c26:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009c28:	f7fa f9ae 	bl	8003f88 <HAL_GetTick>
 8009c2c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f004 fca1 	bl	800e57a <SDMMC_GetPowerState>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d102      	bne.n	8009c44 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c3e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009c42:	e0b5      	b.n	8009db0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c48:	2b03      	cmp	r3, #3
 8009c4a:	d02e      	beq.n	8009caa <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4618      	mov	r0, r3
 8009c52:	f004 feec 	bl	800ea2e <SDMMC_CmdSendCID>
 8009c56:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <SD_InitCard+0x46>
    {
      return errorstate;
 8009c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c60:	e0a6      	b.n	8009db0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2100      	movs	r1, #0
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f004 fccc 	bl	800e606 <SDMMC_GetResponse>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2104      	movs	r1, #4
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f004 fcc3 	bl	800e606 <SDMMC_GetResponse>
 8009c80:	4602      	mov	r2, r0
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2108      	movs	r1, #8
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f004 fcba 	bl	800e606 <SDMMC_GetResponse>
 8009c92:	4602      	mov	r2, r0
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	210c      	movs	r1, #12
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f004 fcb1 	bl	800e606 <SDMMC_GetResponse>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	d01d      	beq.n	8009cee <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009cb2:	e019      	b.n	8009ce8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f107 020a 	add.w	r2, r7, #10
 8009cbc:	4611      	mov	r1, r2
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f004 fef4 	bl	800eaac <SDMMC_CmdSetRelAdd>
 8009cc4:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d001      	beq.n	8009cd0 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cce:	e06f      	b.n	8009db0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009cd0:	f7fa f95a 	bl	8003f88 <HAL_GetTick>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	f241 3287 	movw	r2, #4999	@ 0x1387
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d902      	bls.n	8009ce8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009ce2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009ce6:	e063      	b.n	8009db0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009ce8:	897b      	ldrh	r3, [r7, #10]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d0e2      	beq.n	8009cb4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf2:	2b03      	cmp	r3, #3
 8009cf4:	d036      	beq.n	8009d64 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009cf6:	897b      	ldrh	r3, [r7, #10]
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d06:	041b      	lsls	r3, r3, #16
 8009d08:	4619      	mov	r1, r3
 8009d0a:	4610      	mov	r0, r2
 8009d0c:	f004 feae 	bl	800ea6c <SDMMC_CmdSendCSD>
 8009d10:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d001      	beq.n	8009d1c <SD_InitCard+0x100>
    {
      return errorstate;
 8009d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1a:	e049      	b.n	8009db0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2100      	movs	r1, #0
 8009d22:	4618      	mov	r0, r3
 8009d24:	f004 fc6f 	bl	800e606 <SDMMC_GetResponse>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2104      	movs	r1, #4
 8009d34:	4618      	mov	r0, r3
 8009d36:	f004 fc66 	bl	800e606 <SDMMC_GetResponse>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2108      	movs	r1, #8
 8009d46:	4618      	mov	r0, r3
 8009d48:	f004 fc5d 	bl	800e606 <SDMMC_GetResponse>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	210c      	movs	r1, #12
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f004 fc54 	bl	800e606 <SDMMC_GetResponse>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2104      	movs	r1, #4
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f004 fc4b 	bl	800e606 <SDMMC_GetResponse>
 8009d70:	4603      	mov	r3, r0
 8009d72:	0d1a      	lsrs	r2, r3, #20
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009d78:	f107 030c 	add.w	r3, r7, #12
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7ff fb8c 	bl	800949c <HAL_SD_GetCardCSD>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d002      	beq.n	8009d90 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d8a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009d8e:	e00f      	b.n	8009db0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d98:	041b      	lsls	r3, r3, #16
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	f004 fd5d 	bl	800e85c <SDMMC_CmdSelDesel>
 8009da2:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d001      	beq.n	8009dae <SD_InitCard+0x192>
  {
    return errorstate;
 8009daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dac:	e000      	b.n	8009db0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3740      	adds	r7, #64	@ 0x40
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f004 fd66 	bl	800e8a2 <SDMMC_CmdGoIdleState>
 8009dd6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d001      	beq.n	8009de2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	e072      	b.n	8009ec8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f004 fd79 	bl	800e8de <SDMMC_CmdOperCond>
 8009dec:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009df4:	d10d      	bne.n	8009e12 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f004 fd4e 	bl	800e8a2 <SDMMC_CmdGoIdleState>
 8009e06:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d004      	beq.n	8009e18 <SD_PowerON+0x60>
    {
      return errorstate;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	e05a      	b.n	8009ec8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2201      	movs	r2, #1
 8009e16:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d137      	bne.n	8009e90 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2100      	movs	r1, #0
 8009e26:	4618      	mov	r0, r3
 8009e28:	f004 fd79 	bl	800e91e <SDMMC_CmdAppCommand>
 8009e2c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d02d      	beq.n	8009e90 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009e38:	e046      	b.n	8009ec8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2100      	movs	r1, #0
 8009e40:	4618      	mov	r0, r3
 8009e42:	f004 fd6c 	bl	800e91e <SDMMC_CmdAppCommand>
 8009e46:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <SD_PowerON+0x9a>
    {
      return errorstate;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	e03a      	b.n	8009ec8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	491e      	ldr	r1, [pc, #120]	@ (8009ed0 <SD_PowerON+0x118>)
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f004 fd83 	bl	800e964 <SDMMC_CmdAppOperCommand>
 8009e5e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d002      	beq.n	8009e6c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e66:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009e6a:	e02d      	b.n	8009ec8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2100      	movs	r1, #0
 8009e72:	4618      	mov	r0, r3
 8009e74:	f004 fbc7 	bl	800e606 <SDMMC_GetResponse>
 8009e78:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	0fdb      	lsrs	r3, r3, #31
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d101      	bne.n	8009e86 <SD_PowerON+0xce>
 8009e82:	2301      	movs	r3, #1
 8009e84:	e000      	b.n	8009e88 <SD_PowerON+0xd0>
 8009e86:	2300      	movs	r3, #0
 8009e88:	613b      	str	r3, [r7, #16]

    count++;
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d802      	bhi.n	8009ea0 <SD_PowerON+0xe8>
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d0cc      	beq.n	8009e3a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d902      	bls.n	8009eb0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009eaa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009eae:	e00b      	b.n	8009ec8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d002      	beq.n	8009ec6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3718      	adds	r7, #24
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	c1100000 	.word	0xc1100000

08009ed4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b08c      	sub	sp, #48	@ 0x30
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009ede:	f7fa f853 	bl	8003f88 <HAL_GetTick>
 8009ee2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2100      	movs	r1, #0
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f004 fb89 	bl	800e606 <SDMMC_GetResponse>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009efa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009efe:	d102      	bne.n	8009f06 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009f00:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009f04:	e0b0      	b.n	800a068 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2140      	movs	r1, #64	@ 0x40
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f004 fbb9 	bl	800e684 <SDMMC_CmdBlockLength>
 8009f12:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d005      	beq.n	8009f26 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	e0a0      	b.n	800a068 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f2e:	041b      	lsls	r3, r3, #16
 8009f30:	4619      	mov	r1, r3
 8009f32:	4610      	mov	r0, r2
 8009f34:	f004 fcf3 	bl	800e91e <SDMMC_CmdAppCommand>
 8009f38:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f3a:	6a3b      	ldr	r3, [r7, #32]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d005      	beq.n	8009f4c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	e08d      	b.n	800a068 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009f50:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009f52:	2340      	movs	r3, #64	@ 0x40
 8009f54:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009f56:	2360      	movs	r3, #96	@ 0x60
 8009f58:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009f62:	2301      	movs	r3, #1
 8009f64:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f107 0208 	add.w	r2, r7, #8
 8009f6e:	4611      	mov	r1, r2
 8009f70:	4618      	mov	r0, r3
 8009f72:	f004 fb5b 	bl	800e62c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f004 fddb 	bl	800eb36 <SDMMC_CmdStatusRegister>
 8009f80:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f82:	6a3b      	ldr	r3, [r7, #32]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d02b      	beq.n	8009fe0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009f90:	6a3b      	ldr	r3, [r7, #32]
 8009f92:	e069      	b.n	800a068 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d013      	beq.n	8009fca <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fa6:	e00d      	b.n	8009fc4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4618      	mov	r0, r3
 8009fae:	f004 fab5 	bl	800e51c <SDMMC_ReadFIFO>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb6:	601a      	str	r2, [r3, #0]
        pData++;
 8009fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fba:	3304      	adds	r3, #4
 8009fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8009fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc6:	2b07      	cmp	r3, #7
 8009fc8:	d9ee      	bls.n	8009fa8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009fca:	f7f9 ffdd 	bl	8003f88 <HAL_GetTick>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd2:	1ad3      	subs	r3, r2, r3
 8009fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fd8:	d102      	bne.n	8009fe0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009fda:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009fde:	e043      	b.n	800a068 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fe6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d0d2      	beq.n	8009f94 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ff4:	f003 0308 	and.w	r3, r3, #8
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009ffc:	2308      	movs	r3, #8
 8009ffe:	e033      	b.n	800a068 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a006:	f003 0302 	and.w	r3, r3, #2
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d001      	beq.n	800a012 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a00e:	2302      	movs	r3, #2
 800a010:	e02a      	b.n	800a068 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a018:	f003 0320 	and.w	r3, r3, #32
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d017      	beq.n	800a050 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a020:	2320      	movs	r3, #32
 800a022:	e021      	b.n	800a068 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4618      	mov	r0, r3
 800a02a:	f004 fa77 	bl	800e51c <SDMMC_ReadFIFO>
 800a02e:	4602      	mov	r2, r0
 800a030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a032:	601a      	str	r2, [r3, #0]
    pData++;
 800a034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a036:	3304      	adds	r3, #4
 800a038:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a03a:	f7f9 ffa5 	bl	8003f88 <HAL_GetTick>
 800a03e:	4602      	mov	r2, r0
 800a040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a042:	1ad3      	subs	r3, r2, r3
 800a044:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a048:	d102      	bne.n	800a050 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a04a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a04e:	e00b      	b.n	800a068 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a056:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1e2      	bne.n	800a024 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a03      	ldr	r2, [pc, #12]	@ (800a070 <SD_SendSDStatus+0x19c>)
 800a064:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3730      	adds	r7, #48	@ 0x30
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	18000f3a 	.word	0x18000f3a

0800a074 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d102      	bne.n	800a08a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a084:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a088:	e018      	b.n	800a0bc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a092:	041b      	lsls	r3, r3, #16
 800a094:	4619      	mov	r1, r3
 800a096:	4610      	mov	r0, r2
 800a098:	f004 fd2a 	bl	800eaf0 <SDMMC_CmdSendStatus>
 800a09c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d001      	beq.n	800a0a8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	e009      	b.n	800a0bc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f004 faa9 	bl	800e606 <SDMMC_GetResponse>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b086      	sub	sp, #24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	60fb      	str	r3, [r7, #12]
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2100      	movs	r1, #0
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f004 fa93 	bl	800e606 <SDMMC_GetResponse>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a0ea:	d102      	bne.n	800a0f2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a0ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a0f0:	e02f      	b.n	800a152 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a0f2:	f107 030c 	add.w	r3, r7, #12
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f879 	bl	800a1f0 <SD_FindSCR>
 800a0fe:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d001      	beq.n	800a10a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	e023      	b.n	800a152 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d01c      	beq.n	800a14e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a11c:	041b      	lsls	r3, r3, #16
 800a11e:	4619      	mov	r1, r3
 800a120:	4610      	mov	r0, r2
 800a122:	f004 fbfc 	bl	800e91e <SDMMC_CmdAppCommand>
 800a126:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d001      	beq.n	800a132 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	e00f      	b.n	800a152 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2102      	movs	r1, #2
 800a138:	4618      	mov	r0, r3
 800a13a:	f004 fc33 	bl	800e9a4 <SDMMC_CmdBusWidth>
 800a13e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d001      	beq.n	800a14a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	e003      	b.n	800a152 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a14a:	2300      	movs	r3, #0
 800a14c:	e001      	b.n	800a152 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a14e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a152:	4618      	mov	r0, r3
 800a154:	3718      	adds	r7, #24
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b086      	sub	sp, #24
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a162:	2300      	movs	r3, #0
 800a164:	60fb      	str	r3, [r7, #12]
 800a166:	2300      	movs	r3, #0
 800a168:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2100      	movs	r1, #0
 800a170:	4618      	mov	r0, r3
 800a172:	f004 fa48 	bl	800e606 <SDMMC_GetResponse>
 800a176:	4603      	mov	r3, r0
 800a178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a17c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a180:	d102      	bne.n	800a188 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a182:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a186:	e02f      	b.n	800a1e8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a188:	f107 030c 	add.w	r3, r7, #12
 800a18c:	4619      	mov	r1, r3
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f82e 	bl	800a1f0 <SD_FindSCR>
 800a194:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	e023      	b.n	800a1e8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d01c      	beq.n	800a1e4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1b2:	041b      	lsls	r3, r3, #16
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	4610      	mov	r0, r2
 800a1b8:	f004 fbb1 	bl	800e91e <SDMMC_CmdAppCommand>
 800a1bc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	e00f      	b.n	800a1e8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f004 fbe8 	bl	800e9a4 <SDMMC_CmdBusWidth>
 800a1d4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d001      	beq.n	800a1e0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	e003      	b.n	800a1e8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	e001      	b.n	800a1e8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a1e4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3718      	adds	r7, #24
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b08e      	sub	sp, #56	@ 0x38
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a1fa:	f7f9 fec5 	bl	8003f88 <HAL_GetTick>
 800a1fe:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800a200:	2300      	movs	r3, #0
 800a202:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a204:	2300      	movs	r3, #0
 800a206:	60bb      	str	r3, [r7, #8]
 800a208:	2300      	movs	r3, #0
 800a20a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2108      	movs	r1, #8
 800a216:	4618      	mov	r0, r3
 800a218:	f004 fa34 	bl	800e684 <SDMMC_CmdBlockLength>
 800a21c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a220:	2b00      	cmp	r3, #0
 800a222:	d001      	beq.n	800a228 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a226:	e0ad      	b.n	800a384 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a230:	041b      	lsls	r3, r3, #16
 800a232:	4619      	mov	r1, r3
 800a234:	4610      	mov	r0, r2
 800a236:	f004 fb72 	bl	800e91e <SDMMC_CmdAppCommand>
 800a23a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d001      	beq.n	800a246 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a244:	e09e      	b.n	800a384 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a246:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a24a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a24c:	2308      	movs	r3, #8
 800a24e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a250:	2330      	movs	r3, #48	@ 0x30
 800a252:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a254:	2302      	movs	r3, #2
 800a256:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a258:	2300      	movs	r3, #0
 800a25a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a25c:	2301      	movs	r3, #1
 800a25e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f107 0210 	add.w	r2, r7, #16
 800a268:	4611      	mov	r1, r2
 800a26a:	4618      	mov	r0, r3
 800a26c:	f004 f9de 	bl	800e62c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4618      	mov	r0, r3
 800a276:	f004 fbb8 	bl	800e9ea <SDMMC_CmdSendSCR>
 800a27a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d027      	beq.n	800a2d2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a284:	e07e      	b.n	800a384 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a28c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d113      	bne.n	800a2bc <SD_FindSCR+0xcc>
 800a294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a296:	2b00      	cmp	r3, #0
 800a298:	d110      	bne.n	800a2bc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f004 f93c 	bl	800e51c <SDMMC_ReadFIFO>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f004 f935 	bl	800e51c <SDMMC_ReadFIFO>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	60fb      	str	r3, [r7, #12]
      index++;
 800a2b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a2bc:	f7f9 fe64 	bl	8003f88 <HAL_GetTick>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a2ca:	d102      	bne.n	800a2d2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a2cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a2d0:	e058      	b.n	800a384 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2d8:	f240 532a 	movw	r3, #1322	@ 0x52a
 800a2dc:	4013      	ands	r3, r2
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d0d1      	beq.n	800a286 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2e8:	f003 0308 	and.w	r3, r3, #8
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d005      	beq.n	800a2fc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2208      	movs	r2, #8
 800a2f6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a2f8:	2308      	movs	r3, #8
 800a2fa:	e043      	b.n	800a384 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a302:	f003 0302 	and.w	r3, r3, #2
 800a306:	2b00      	cmp	r3, #0
 800a308:	d005      	beq.n	800a316 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2202      	movs	r2, #2
 800a310:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a312:	2302      	movs	r3, #2
 800a314:	e036      	b.n	800a384 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a31c:	f003 0320 	and.w	r3, r3, #32
 800a320:	2b00      	cmp	r3, #0
 800a322:	d005      	beq.n	800a330 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2220      	movs	r2, #32
 800a32a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a32c:	2320      	movs	r3, #32
 800a32e:	e029      	b.n	800a384 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a15      	ldr	r2, [pc, #84]	@ (800a38c <SD_FindSCR+0x19c>)
 800a336:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	061a      	lsls	r2, r3, #24
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	021b      	lsls	r3, r3, #8
 800a340:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a344:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	0a1b      	lsrs	r3, r3, #8
 800a34a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a34e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	0e1b      	lsrs	r3, r3, #24
 800a354:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a358:	601a      	str	r2, [r3, #0]
    scr++;
 800a35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a35c:	3304      	adds	r3, #4
 800a35e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	061a      	lsls	r2, r3, #24
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	021b      	lsls	r3, r3, #8
 800a368:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a36c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	0a1b      	lsrs	r3, r3, #8
 800a372:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a376:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	0e1b      	lsrs	r3, r3, #24
 800a37c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a37e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a380:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	3738      	adds	r7, #56	@ 0x38
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	18000f3a 	.word	0x18000f3a

0800a390 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a39c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3a2:	2b1f      	cmp	r3, #31
 800a3a4:	d936      	bls.n	800a414 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	617b      	str	r3, [r7, #20]
 800a3aa:	e027      	b.n	800a3fc <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f004 f8b3 	bl	800e51c <SDMMC_ReadFIFO>
 800a3b6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	0a1b      	lsrs	r3, r3, #8
 800a3ca:	b2da      	uxtb	r2, r3
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	0c1b      	lsrs	r3, r3, #16
 800a3da:	b2da      	uxtb	r2, r3
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	0e1b      	lsrs	r3, r3, #24
 800a3ea:	b2da      	uxtb	r2, r3
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	617b      	str	r3, [r7, #20]
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	2b07      	cmp	r3, #7
 800a400:	d9d4      	bls.n	800a3ac <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	693a      	ldr	r2, [r7, #16]
 800a406:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a40c:	f1a3 0220 	sub.w	r2, r3, #32
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800a414:	bf00      	nop
 800a416:	3718      	adds	r7, #24
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	69db      	ldr	r3, [r3, #28]
 800a428:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	2b1f      	cmp	r3, #31
 800a430:	d93a      	bls.n	800a4a8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800a432:	2300      	movs	r3, #0
 800a434:	617b      	str	r3, [r7, #20]
 800a436:	e02b      	b.n	800a490 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	3301      	adds	r3, #1
 800a442:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	021a      	lsls	r2, r3, #8
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	3301      	adds	r3, #1
 800a454:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	041a      	lsls	r2, r3, #16
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	4313      	orrs	r3, r2
 800a460:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	3301      	adds	r3, #1
 800a466:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	061a      	lsls	r2, r3, #24
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	4313      	orrs	r3, r2
 800a472:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	3301      	adds	r3, #1
 800a478:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f107 020c 	add.w	r2, r7, #12
 800a482:	4611      	mov	r1, r2
 800a484:	4618      	mov	r0, r3
 800a486:	f004 f856 	bl	800e536 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	3301      	adds	r3, #1
 800a48e:	617b      	str	r3, [r7, #20]
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	2b07      	cmp	r3, #7
 800a494:	d9d0      	bls.n	800a438 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	693a      	ldr	r2, [r7, #16]
 800a49a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6a1b      	ldr	r3, [r3, #32]
 800a4a0:	f1a3 0220 	sub.w	r2, r3, #32
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	621a      	str	r2, [r3, #32]
  }
}
 800a4a8:	bf00      	nop
 800a4aa:	3718      	adds	r7, #24
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	e049      	b.n	800a5a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d106      	bne.n	800a52c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f841 	bl	800a5ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2202      	movs	r2, #2
 800a530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	3304      	adds	r3, #4
 800a53c:	4619      	mov	r1, r3
 800a53e:	4610      	mov	r0, r2
 800a540:	f000 fad0 	bl	800aae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	b083      	sub	sp, #12
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a5b6:	bf00      	nop
 800a5b8:	370c      	adds	r7, #12
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
	...

0800a5c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d001      	beq.n	800a5dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e054      	b.n	800a686 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2202      	movs	r2, #2
 800a5e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68da      	ldr	r2, [r3, #12]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f042 0201 	orr.w	r2, r2, #1
 800a5f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a26      	ldr	r2, [pc, #152]	@ (800a694 <HAL_TIM_Base_Start_IT+0xd0>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d022      	beq.n	800a644 <HAL_TIM_Base_Start_IT+0x80>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a606:	d01d      	beq.n	800a644 <HAL_TIM_Base_Start_IT+0x80>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a22      	ldr	r2, [pc, #136]	@ (800a698 <HAL_TIM_Base_Start_IT+0xd4>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d018      	beq.n	800a644 <HAL_TIM_Base_Start_IT+0x80>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a21      	ldr	r2, [pc, #132]	@ (800a69c <HAL_TIM_Base_Start_IT+0xd8>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d013      	beq.n	800a644 <HAL_TIM_Base_Start_IT+0x80>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a1f      	ldr	r2, [pc, #124]	@ (800a6a0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d00e      	beq.n	800a644 <HAL_TIM_Base_Start_IT+0x80>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a1e      	ldr	r2, [pc, #120]	@ (800a6a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d009      	beq.n	800a644 <HAL_TIM_Base_Start_IT+0x80>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a1c      	ldr	r2, [pc, #112]	@ (800a6a8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d004      	beq.n	800a644 <HAL_TIM_Base_Start_IT+0x80>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a1b      	ldr	r2, [pc, #108]	@ (800a6ac <HAL_TIM_Base_Start_IT+0xe8>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d115      	bne.n	800a670 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	689a      	ldr	r2, [r3, #8]
 800a64a:	4b19      	ldr	r3, [pc, #100]	@ (800a6b0 <HAL_TIM_Base_Start_IT+0xec>)
 800a64c:	4013      	ands	r3, r2
 800a64e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2b06      	cmp	r3, #6
 800a654:	d015      	beq.n	800a682 <HAL_TIM_Base_Start_IT+0xbe>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a65c:	d011      	beq.n	800a682 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f042 0201 	orr.w	r2, r2, #1
 800a66c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a66e:	e008      	b.n	800a682 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f042 0201 	orr.w	r2, r2, #1
 800a67e:	601a      	str	r2, [r3, #0]
 800a680:	e000      	b.n	800a684 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a682:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	40010000 	.word	0x40010000
 800a698:	40000400 	.word	0x40000400
 800a69c:	40000800 	.word	0x40000800
 800a6a0:	40000c00 	.word	0x40000c00
 800a6a4:	40010400 	.word	0x40010400
 800a6a8:	40001800 	.word	0x40001800
 800a6ac:	40014000 	.word	0x40014000
 800a6b0:	00010007 	.word	0x00010007

0800a6b4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e049      	b.n	800a75a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d106      	bne.n	800a6e0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f7f7 f814 	bl	8001708 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2202      	movs	r2, #2
 800a6e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	3304      	adds	r3, #4
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	4610      	mov	r0, r2
 800a6f4:	f000 f9f6 	bl	800aae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3708      	adds	r7, #8
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b082      	sub	sp, #8
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	691b      	ldr	r3, [r3, #16]
 800a770:	f003 0302 	and.w	r3, r3, #2
 800a774:	2b02      	cmp	r3, #2
 800a776:	d122      	bne.n	800a7be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	68db      	ldr	r3, [r3, #12]
 800a77e:	f003 0302 	and.w	r3, r3, #2
 800a782:	2b02      	cmp	r3, #2
 800a784:	d11b      	bne.n	800a7be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f06f 0202 	mvn.w	r2, #2
 800a78e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	f003 0303 	and.w	r3, r3, #3
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d003      	beq.n	800a7ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 f97f 	bl	800aaa8 <HAL_TIM_IC_CaptureCallback>
 800a7aa:	e005      	b.n	800a7b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f971 	bl	800aa94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 f982 	bl	800aabc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	691b      	ldr	r3, [r3, #16]
 800a7c4:	f003 0304 	and.w	r3, r3, #4
 800a7c8:	2b04      	cmp	r3, #4
 800a7ca:	d122      	bne.n	800a812 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	f003 0304 	and.w	r3, r3, #4
 800a7d6:	2b04      	cmp	r3, #4
 800a7d8:	d11b      	bne.n	800a812 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f06f 0204 	mvn.w	r2, #4
 800a7e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2202      	movs	r2, #2
 800a7e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	699b      	ldr	r3, [r3, #24]
 800a7f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d003      	beq.n	800a800 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 f955 	bl	800aaa8 <HAL_TIM_IC_CaptureCallback>
 800a7fe:	e005      	b.n	800a80c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f947 	bl	800aa94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 f958 	bl	800aabc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	691b      	ldr	r3, [r3, #16]
 800a818:	f003 0308 	and.w	r3, r3, #8
 800a81c:	2b08      	cmp	r3, #8
 800a81e:	d122      	bne.n	800a866 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	f003 0308 	and.w	r3, r3, #8
 800a82a:	2b08      	cmp	r3, #8
 800a82c:	d11b      	bne.n	800a866 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f06f 0208 	mvn.w	r2, #8
 800a836:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2204      	movs	r2, #4
 800a83c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	69db      	ldr	r3, [r3, #28]
 800a844:	f003 0303 	and.w	r3, r3, #3
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d003      	beq.n	800a854 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 f92b 	bl	800aaa8 <HAL_TIM_IC_CaptureCallback>
 800a852:	e005      	b.n	800a860 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f91d 	bl	800aa94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f92e 	bl	800aabc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	f003 0310 	and.w	r3, r3, #16
 800a870:	2b10      	cmp	r3, #16
 800a872:	d122      	bne.n	800a8ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	f003 0310 	and.w	r3, r3, #16
 800a87e:	2b10      	cmp	r3, #16
 800a880:	d11b      	bne.n	800a8ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f06f 0210 	mvn.w	r2, #16
 800a88a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2208      	movs	r2, #8
 800a890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	69db      	ldr	r3, [r3, #28]
 800a898:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d003      	beq.n	800a8a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 f901 	bl	800aaa8 <HAL_TIM_IC_CaptureCallback>
 800a8a6:	e005      	b.n	800a8b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f8f3 	bl	800aa94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f904 	bl	800aabc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	f003 0301 	and.w	r3, r3, #1
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d10e      	bne.n	800a8e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	f003 0301 	and.w	r3, r3, #1
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d107      	bne.n	800a8e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f06f 0201 	mvn.w	r2, #1
 800a8de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f7f6 fd39 	bl	8001358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8f0:	2b80      	cmp	r3, #128	@ 0x80
 800a8f2:	d10e      	bne.n	800a912 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8fe:	2b80      	cmp	r3, #128	@ 0x80
 800a900:	d107      	bne.n	800a912 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a90a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fcf1 	bl	800b2f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	691b      	ldr	r3, [r3, #16]
 800a918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a91c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a920:	d10e      	bne.n	800a940 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a92c:	2b80      	cmp	r3, #128	@ 0x80
 800a92e:	d107      	bne.n	800a940 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 fce4 	bl	800b308 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a94a:	2b40      	cmp	r3, #64	@ 0x40
 800a94c:	d10e      	bne.n	800a96c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a958:	2b40      	cmp	r3, #64	@ 0x40
 800a95a:	d107      	bne.n	800a96c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f8b2 	bl	800aad0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	f003 0320 	and.w	r3, r3, #32
 800a976:	2b20      	cmp	r3, #32
 800a978:	d10e      	bne.n	800a998 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	f003 0320 	and.w	r3, r3, #32
 800a984:	2b20      	cmp	r3, #32
 800a986:	d107      	bne.n	800a998 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f06f 0220 	mvn.w	r2, #32
 800a990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 fca4 	bl	800b2e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a998:	bf00      	nop
 800a99a:	3708      	adds	r7, #8
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b086      	sub	sp, #24
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d101      	bne.n	800a9be <HAL_TIM_OC_ConfigChannel+0x1e>
 800a9ba:	2302      	movs	r3, #2
 800a9bc:	e066      	b.n	800aa8c <HAL_TIM_OC_ConfigChannel+0xec>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2b14      	cmp	r3, #20
 800a9ca:	d857      	bhi.n	800aa7c <HAL_TIM_OC_ConfigChannel+0xdc>
 800a9cc:	a201      	add	r2, pc, #4	@ (adr r2, 800a9d4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d2:	bf00      	nop
 800a9d4:	0800aa29 	.word	0x0800aa29
 800a9d8:	0800aa7d 	.word	0x0800aa7d
 800a9dc:	0800aa7d 	.word	0x0800aa7d
 800a9e0:	0800aa7d 	.word	0x0800aa7d
 800a9e4:	0800aa37 	.word	0x0800aa37
 800a9e8:	0800aa7d 	.word	0x0800aa7d
 800a9ec:	0800aa7d 	.word	0x0800aa7d
 800a9f0:	0800aa7d 	.word	0x0800aa7d
 800a9f4:	0800aa45 	.word	0x0800aa45
 800a9f8:	0800aa7d 	.word	0x0800aa7d
 800a9fc:	0800aa7d 	.word	0x0800aa7d
 800aa00:	0800aa7d 	.word	0x0800aa7d
 800aa04:	0800aa53 	.word	0x0800aa53
 800aa08:	0800aa7d 	.word	0x0800aa7d
 800aa0c:	0800aa7d 	.word	0x0800aa7d
 800aa10:	0800aa7d 	.word	0x0800aa7d
 800aa14:	0800aa61 	.word	0x0800aa61
 800aa18:	0800aa7d 	.word	0x0800aa7d
 800aa1c:	0800aa7d 	.word	0x0800aa7d
 800aa20:	0800aa7d 	.word	0x0800aa7d
 800aa24:	0800aa6f 	.word	0x0800aa6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68b9      	ldr	r1, [r7, #8]
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f000 f8f2 	bl	800ac18 <TIM_OC1_SetConfig>
      break;
 800aa34:	e025      	b.n	800aa82 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	68b9      	ldr	r1, [r7, #8]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f000 f97b 	bl	800ad38 <TIM_OC2_SetConfig>
      break;
 800aa42:	e01e      	b.n	800aa82 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68b9      	ldr	r1, [r7, #8]
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f000 f9fe 	bl	800ae4c <TIM_OC3_SetConfig>
      break;
 800aa50:	e017      	b.n	800aa82 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68b9      	ldr	r1, [r7, #8]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f000 fa7f 	bl	800af5c <TIM_OC4_SetConfig>
      break;
 800aa5e:	e010      	b.n	800aa82 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68b9      	ldr	r1, [r7, #8]
 800aa66:	4618      	mov	r0, r3
 800aa68:	f000 fae2 	bl	800b030 <TIM_OC5_SetConfig>
      break;
 800aa6c:	e009      	b.n	800aa82 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68b9      	ldr	r1, [r7, #8]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f000 fb3f 	bl	800b0f8 <TIM_OC6_SetConfig>
      break;
 800aa7a:	e002      	b.n	800aa82 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	75fb      	strb	r3, [r7, #23]
      break;
 800aa80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2200      	movs	r2, #0
 800aa86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aa8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3718      	adds	r7, #24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aab0:	bf00      	nop
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aac4:	bf00      	nop
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a40      	ldr	r2, [pc, #256]	@ (800abf8 <TIM_Base_SetConfig+0x114>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d013      	beq.n	800ab24 <TIM_Base_SetConfig+0x40>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab02:	d00f      	beq.n	800ab24 <TIM_Base_SetConfig+0x40>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4a3d      	ldr	r2, [pc, #244]	@ (800abfc <TIM_Base_SetConfig+0x118>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d00b      	beq.n	800ab24 <TIM_Base_SetConfig+0x40>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4a3c      	ldr	r2, [pc, #240]	@ (800ac00 <TIM_Base_SetConfig+0x11c>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d007      	beq.n	800ab24 <TIM_Base_SetConfig+0x40>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4a3b      	ldr	r2, [pc, #236]	@ (800ac04 <TIM_Base_SetConfig+0x120>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d003      	beq.n	800ab24 <TIM_Base_SetConfig+0x40>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a3a      	ldr	r2, [pc, #232]	@ (800ac08 <TIM_Base_SetConfig+0x124>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d108      	bne.n	800ab36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	4a2f      	ldr	r2, [pc, #188]	@ (800abf8 <TIM_Base_SetConfig+0x114>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d01f      	beq.n	800ab7e <TIM_Base_SetConfig+0x9a>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab44:	d01b      	beq.n	800ab7e <TIM_Base_SetConfig+0x9a>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	4a2c      	ldr	r2, [pc, #176]	@ (800abfc <TIM_Base_SetConfig+0x118>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d017      	beq.n	800ab7e <TIM_Base_SetConfig+0x9a>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a2b      	ldr	r2, [pc, #172]	@ (800ac00 <TIM_Base_SetConfig+0x11c>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d013      	beq.n	800ab7e <TIM_Base_SetConfig+0x9a>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4a2a      	ldr	r2, [pc, #168]	@ (800ac04 <TIM_Base_SetConfig+0x120>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d00f      	beq.n	800ab7e <TIM_Base_SetConfig+0x9a>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4a29      	ldr	r2, [pc, #164]	@ (800ac08 <TIM_Base_SetConfig+0x124>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d00b      	beq.n	800ab7e <TIM_Base_SetConfig+0x9a>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4a28      	ldr	r2, [pc, #160]	@ (800ac0c <TIM_Base_SetConfig+0x128>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d007      	beq.n	800ab7e <TIM_Base_SetConfig+0x9a>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a27      	ldr	r2, [pc, #156]	@ (800ac10 <TIM_Base_SetConfig+0x12c>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d003      	beq.n	800ab7e <TIM_Base_SetConfig+0x9a>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a26      	ldr	r2, [pc, #152]	@ (800ac14 <TIM_Base_SetConfig+0x130>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d108      	bne.n	800ab90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	695b      	ldr	r3, [r3, #20]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	689a      	ldr	r2, [r3, #8]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a10      	ldr	r2, [pc, #64]	@ (800abf8 <TIM_Base_SetConfig+0x114>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d00f      	beq.n	800abdc <TIM_Base_SetConfig+0xf8>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4a12      	ldr	r2, [pc, #72]	@ (800ac08 <TIM_Base_SetConfig+0x124>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d00b      	beq.n	800abdc <TIM_Base_SetConfig+0xf8>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a11      	ldr	r2, [pc, #68]	@ (800ac0c <TIM_Base_SetConfig+0x128>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d007      	beq.n	800abdc <TIM_Base_SetConfig+0xf8>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	4a10      	ldr	r2, [pc, #64]	@ (800ac10 <TIM_Base_SetConfig+0x12c>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d003      	beq.n	800abdc <TIM_Base_SetConfig+0xf8>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4a0f      	ldr	r2, [pc, #60]	@ (800ac14 <TIM_Base_SetConfig+0x130>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d103      	bne.n	800abe4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	691a      	ldr	r2, [r3, #16]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	615a      	str	r2, [r3, #20]
}
 800abea:	bf00      	nop
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	40010000 	.word	0x40010000
 800abfc:	40000400 	.word	0x40000400
 800ac00:	40000800 	.word	0x40000800
 800ac04:	40000c00 	.word	0x40000c00
 800ac08:	40010400 	.word	0x40010400
 800ac0c:	40014000 	.word	0x40014000
 800ac10:	40014400 	.word	0x40014400
 800ac14:	40014800 	.word	0x40014800

0800ac18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b087      	sub	sp, #28
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6a1b      	ldr	r3, [r3, #32]
 800ac26:	f023 0201 	bic.w	r2, r3, #1
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a1b      	ldr	r3, [r3, #32]
 800ac32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	699b      	ldr	r3, [r3, #24]
 800ac3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac40:	68fa      	ldr	r2, [r7, #12]
 800ac42:	4b37      	ldr	r3, [pc, #220]	@ (800ad20 <TIM_OC1_SetConfig+0x108>)
 800ac44:	4013      	ands	r3, r2
 800ac46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f023 0303 	bic.w	r3, r3, #3
 800ac4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	f023 0302 	bic.w	r3, r3, #2
 800ac60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	697a      	ldr	r2, [r7, #20]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a2d      	ldr	r2, [pc, #180]	@ (800ad24 <TIM_OC1_SetConfig+0x10c>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d00f      	beq.n	800ac94 <TIM_OC1_SetConfig+0x7c>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a2c      	ldr	r2, [pc, #176]	@ (800ad28 <TIM_OC1_SetConfig+0x110>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d00b      	beq.n	800ac94 <TIM_OC1_SetConfig+0x7c>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a2b      	ldr	r2, [pc, #172]	@ (800ad2c <TIM_OC1_SetConfig+0x114>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d007      	beq.n	800ac94 <TIM_OC1_SetConfig+0x7c>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4a2a      	ldr	r2, [pc, #168]	@ (800ad30 <TIM_OC1_SetConfig+0x118>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d003      	beq.n	800ac94 <TIM_OC1_SetConfig+0x7c>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a29      	ldr	r2, [pc, #164]	@ (800ad34 <TIM_OC1_SetConfig+0x11c>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d10c      	bne.n	800acae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	f023 0308 	bic.w	r3, r3, #8
 800ac9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	697a      	ldr	r2, [r7, #20]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	f023 0304 	bic.w	r3, r3, #4
 800acac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4a1c      	ldr	r2, [pc, #112]	@ (800ad24 <TIM_OC1_SetConfig+0x10c>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d00f      	beq.n	800acd6 <TIM_OC1_SetConfig+0xbe>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4a1b      	ldr	r2, [pc, #108]	@ (800ad28 <TIM_OC1_SetConfig+0x110>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d00b      	beq.n	800acd6 <TIM_OC1_SetConfig+0xbe>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4a1a      	ldr	r2, [pc, #104]	@ (800ad2c <TIM_OC1_SetConfig+0x114>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d007      	beq.n	800acd6 <TIM_OC1_SetConfig+0xbe>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4a19      	ldr	r2, [pc, #100]	@ (800ad30 <TIM_OC1_SetConfig+0x118>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d003      	beq.n	800acd6 <TIM_OC1_SetConfig+0xbe>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a18      	ldr	r2, [pc, #96]	@ (800ad34 <TIM_OC1_SetConfig+0x11c>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d111      	bne.n	800acfa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ace4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	695b      	ldr	r3, [r3, #20]
 800acea:	693a      	ldr	r2, [r7, #16]
 800acec:	4313      	orrs	r3, r2
 800acee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	699b      	ldr	r3, [r3, #24]
 800acf4:	693a      	ldr	r2, [r7, #16]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	693a      	ldr	r2, [r7, #16]
 800acfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	685a      	ldr	r2, [r3, #4]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	697a      	ldr	r2, [r7, #20]
 800ad12:	621a      	str	r2, [r3, #32]
}
 800ad14:	bf00      	nop
 800ad16:	371c      	adds	r7, #28
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	fffeff8f 	.word	0xfffeff8f
 800ad24:	40010000 	.word	0x40010000
 800ad28:	40010400 	.word	0x40010400
 800ad2c:	40014000 	.word	0x40014000
 800ad30:	40014400 	.word	0x40014400
 800ad34:	40014800 	.word	0x40014800

0800ad38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b087      	sub	sp, #28
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6a1b      	ldr	r3, [r3, #32]
 800ad46:	f023 0210 	bic.w	r2, r3, #16
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a1b      	ldr	r3, [r3, #32]
 800ad52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	699b      	ldr	r3, [r3, #24]
 800ad5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	4b34      	ldr	r3, [pc, #208]	@ (800ae34 <TIM_OC2_SetConfig+0xfc>)
 800ad64:	4013      	ands	r3, r2
 800ad66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	021b      	lsls	r3, r3, #8
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	f023 0320 	bic.w	r3, r3, #32
 800ad82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	011b      	lsls	r3, r3, #4
 800ad8a:	697a      	ldr	r2, [r7, #20]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a29      	ldr	r2, [pc, #164]	@ (800ae38 <TIM_OC2_SetConfig+0x100>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d003      	beq.n	800ada0 <TIM_OC2_SetConfig+0x68>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a28      	ldr	r2, [pc, #160]	@ (800ae3c <TIM_OC2_SetConfig+0x104>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d10d      	bne.n	800adbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ada6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	68db      	ldr	r3, [r3, #12]
 800adac:	011b      	lsls	r3, r3, #4
 800adae:	697a      	ldr	r2, [r7, #20]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800adba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a1e      	ldr	r2, [pc, #120]	@ (800ae38 <TIM_OC2_SetConfig+0x100>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d00f      	beq.n	800ade4 <TIM_OC2_SetConfig+0xac>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a1d      	ldr	r2, [pc, #116]	@ (800ae3c <TIM_OC2_SetConfig+0x104>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d00b      	beq.n	800ade4 <TIM_OC2_SetConfig+0xac>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a1c      	ldr	r2, [pc, #112]	@ (800ae40 <TIM_OC2_SetConfig+0x108>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d007      	beq.n	800ade4 <TIM_OC2_SetConfig+0xac>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a1b      	ldr	r2, [pc, #108]	@ (800ae44 <TIM_OC2_SetConfig+0x10c>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d003      	beq.n	800ade4 <TIM_OC2_SetConfig+0xac>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a1a      	ldr	r2, [pc, #104]	@ (800ae48 <TIM_OC2_SetConfig+0x110>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d113      	bne.n	800ae0c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800adea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800adf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	695b      	ldr	r3, [r3, #20]
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	693a      	ldr	r2, [r7, #16]
 800adfc:	4313      	orrs	r3, r2
 800adfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	699b      	ldr	r3, [r3, #24]
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	685a      	ldr	r2, [r3, #4]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	697a      	ldr	r2, [r7, #20]
 800ae24:	621a      	str	r2, [r3, #32]
}
 800ae26:	bf00      	nop
 800ae28:	371c      	adds	r7, #28
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	feff8fff 	.word	0xfeff8fff
 800ae38:	40010000 	.word	0x40010000
 800ae3c:	40010400 	.word	0x40010400
 800ae40:	40014000 	.word	0x40014000
 800ae44:	40014400 	.word	0x40014400
 800ae48:	40014800 	.word	0x40014800

0800ae4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b087      	sub	sp, #28
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6a1b      	ldr	r3, [r3, #32]
 800ae5a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a1b      	ldr	r3, [r3, #32]
 800ae66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	69db      	ldr	r3, [r3, #28]
 800ae72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ae74:	68fa      	ldr	r2, [r7, #12]
 800ae76:	4b33      	ldr	r3, [pc, #204]	@ (800af44 <TIM_OC3_SetConfig+0xf8>)
 800ae78:	4013      	ands	r3, r2
 800ae7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f023 0303 	bic.w	r3, r3, #3
 800ae82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ae94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	689b      	ldr	r3, [r3, #8]
 800ae9a:	021b      	lsls	r3, r3, #8
 800ae9c:	697a      	ldr	r2, [r7, #20]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	4a28      	ldr	r2, [pc, #160]	@ (800af48 <TIM_OC3_SetConfig+0xfc>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d003      	beq.n	800aeb2 <TIM_OC3_SetConfig+0x66>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4a27      	ldr	r2, [pc, #156]	@ (800af4c <TIM_OC3_SetConfig+0x100>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d10d      	bne.n	800aece <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aeb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	021b      	lsls	r3, r3, #8
 800aec0:	697a      	ldr	r2, [r7, #20]
 800aec2:	4313      	orrs	r3, r2
 800aec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aecc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4a1d      	ldr	r2, [pc, #116]	@ (800af48 <TIM_OC3_SetConfig+0xfc>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d00f      	beq.n	800aef6 <TIM_OC3_SetConfig+0xaa>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4a1c      	ldr	r2, [pc, #112]	@ (800af4c <TIM_OC3_SetConfig+0x100>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d00b      	beq.n	800aef6 <TIM_OC3_SetConfig+0xaa>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4a1b      	ldr	r2, [pc, #108]	@ (800af50 <TIM_OC3_SetConfig+0x104>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d007      	beq.n	800aef6 <TIM_OC3_SetConfig+0xaa>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4a1a      	ldr	r2, [pc, #104]	@ (800af54 <TIM_OC3_SetConfig+0x108>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d003      	beq.n	800aef6 <TIM_OC3_SetConfig+0xaa>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a19      	ldr	r2, [pc, #100]	@ (800af58 <TIM_OC3_SetConfig+0x10c>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d113      	bne.n	800af1e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aefc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800af04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	695b      	ldr	r3, [r3, #20]
 800af0a:	011b      	lsls	r3, r3, #4
 800af0c:	693a      	ldr	r2, [r7, #16]
 800af0e:	4313      	orrs	r3, r2
 800af10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	699b      	ldr	r3, [r3, #24]
 800af16:	011b      	lsls	r3, r3, #4
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	693a      	ldr	r2, [r7, #16]
 800af22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	685a      	ldr	r2, [r3, #4]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	697a      	ldr	r2, [r7, #20]
 800af36:	621a      	str	r2, [r3, #32]
}
 800af38:	bf00      	nop
 800af3a:	371c      	adds	r7, #28
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr
 800af44:	fffeff8f 	.word	0xfffeff8f
 800af48:	40010000 	.word	0x40010000
 800af4c:	40010400 	.word	0x40010400
 800af50:	40014000 	.word	0x40014000
 800af54:	40014400 	.word	0x40014400
 800af58:	40014800 	.word	0x40014800

0800af5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b087      	sub	sp, #28
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a1b      	ldr	r3, [r3, #32]
 800af6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a1b      	ldr	r3, [r3, #32]
 800af76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	69db      	ldr	r3, [r3, #28]
 800af82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	4b24      	ldr	r3, [pc, #144]	@ (800b018 <TIM_OC4_SetConfig+0xbc>)
 800af88:	4013      	ands	r3, r2
 800af8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	021b      	lsls	r3, r3, #8
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	4313      	orrs	r3, r2
 800af9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800afa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	031b      	lsls	r3, r3, #12
 800afae:	693a      	ldr	r2, [r7, #16]
 800afb0:	4313      	orrs	r3, r2
 800afb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	4a19      	ldr	r2, [pc, #100]	@ (800b01c <TIM_OC4_SetConfig+0xc0>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d00f      	beq.n	800afdc <TIM_OC4_SetConfig+0x80>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	4a18      	ldr	r2, [pc, #96]	@ (800b020 <TIM_OC4_SetConfig+0xc4>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d00b      	beq.n	800afdc <TIM_OC4_SetConfig+0x80>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	4a17      	ldr	r2, [pc, #92]	@ (800b024 <TIM_OC4_SetConfig+0xc8>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d007      	beq.n	800afdc <TIM_OC4_SetConfig+0x80>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	4a16      	ldr	r2, [pc, #88]	@ (800b028 <TIM_OC4_SetConfig+0xcc>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d003      	beq.n	800afdc <TIM_OC4_SetConfig+0x80>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4a15      	ldr	r2, [pc, #84]	@ (800b02c <TIM_OC4_SetConfig+0xd0>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d109      	bne.n	800aff0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800afe2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	695b      	ldr	r3, [r3, #20]
 800afe8:	019b      	lsls	r3, r3, #6
 800afea:	697a      	ldr	r2, [r7, #20]
 800afec:	4313      	orrs	r3, r2
 800afee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	697a      	ldr	r2, [r7, #20]
 800aff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	685a      	ldr	r2, [r3, #4]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	693a      	ldr	r2, [r7, #16]
 800b008:	621a      	str	r2, [r3, #32]
}
 800b00a:	bf00      	nop
 800b00c:	371c      	adds	r7, #28
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	feff8fff 	.word	0xfeff8fff
 800b01c:	40010000 	.word	0x40010000
 800b020:	40010400 	.word	0x40010400
 800b024:	40014000 	.word	0x40014000
 800b028:	40014400 	.word	0x40014400
 800b02c:	40014800 	.word	0x40014800

0800b030 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b030:	b480      	push	{r7}
 800b032:	b087      	sub	sp, #28
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6a1b      	ldr	r3, [r3, #32]
 800b03e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a1b      	ldr	r3, [r3, #32]
 800b04a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b058:	68fa      	ldr	r2, [r7, #12]
 800b05a:	4b21      	ldr	r3, [pc, #132]	@ (800b0e0 <TIM_OC5_SetConfig+0xb0>)
 800b05c:	4013      	ands	r3, r2
 800b05e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68fa      	ldr	r2, [r7, #12]
 800b066:	4313      	orrs	r3, r2
 800b068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b070:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	041b      	lsls	r3, r3, #16
 800b078:	693a      	ldr	r2, [r7, #16]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4a18      	ldr	r2, [pc, #96]	@ (800b0e4 <TIM_OC5_SetConfig+0xb4>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d00f      	beq.n	800b0a6 <TIM_OC5_SetConfig+0x76>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a17      	ldr	r2, [pc, #92]	@ (800b0e8 <TIM_OC5_SetConfig+0xb8>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d00b      	beq.n	800b0a6 <TIM_OC5_SetConfig+0x76>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a16      	ldr	r2, [pc, #88]	@ (800b0ec <TIM_OC5_SetConfig+0xbc>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d007      	beq.n	800b0a6 <TIM_OC5_SetConfig+0x76>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a15      	ldr	r2, [pc, #84]	@ (800b0f0 <TIM_OC5_SetConfig+0xc0>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d003      	beq.n	800b0a6 <TIM_OC5_SetConfig+0x76>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a14      	ldr	r2, [pc, #80]	@ (800b0f4 <TIM_OC5_SetConfig+0xc4>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d109      	bne.n	800b0ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b0ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	695b      	ldr	r3, [r3, #20]
 800b0b2:	021b      	lsls	r3, r3, #8
 800b0b4:	697a      	ldr	r2, [r7, #20]
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	697a      	ldr	r2, [r7, #20]
 800b0be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	68fa      	ldr	r2, [r7, #12]
 800b0c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	685a      	ldr	r2, [r3, #4]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	693a      	ldr	r2, [r7, #16]
 800b0d2:	621a      	str	r2, [r3, #32]
}
 800b0d4:	bf00      	nop
 800b0d6:	371c      	adds	r7, #28
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	fffeff8f 	.word	0xfffeff8f
 800b0e4:	40010000 	.word	0x40010000
 800b0e8:	40010400 	.word	0x40010400
 800b0ec:	40014000 	.word	0x40014000
 800b0f0:	40014400 	.word	0x40014400
 800b0f4:	40014800 	.word	0x40014800

0800b0f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b087      	sub	sp, #28
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a1b      	ldr	r3, [r3, #32]
 800b106:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a1b      	ldr	r3, [r3, #32]
 800b112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	4b22      	ldr	r3, [pc, #136]	@ (800b1ac <TIM_OC6_SetConfig+0xb4>)
 800b124:	4013      	ands	r3, r2
 800b126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	021b      	lsls	r3, r3, #8
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	4313      	orrs	r3, r2
 800b132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b13a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	051b      	lsls	r3, r3, #20
 800b142:	693a      	ldr	r2, [r7, #16]
 800b144:	4313      	orrs	r3, r2
 800b146:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	4a19      	ldr	r2, [pc, #100]	@ (800b1b0 <TIM_OC6_SetConfig+0xb8>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d00f      	beq.n	800b170 <TIM_OC6_SetConfig+0x78>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4a18      	ldr	r2, [pc, #96]	@ (800b1b4 <TIM_OC6_SetConfig+0xbc>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d00b      	beq.n	800b170 <TIM_OC6_SetConfig+0x78>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4a17      	ldr	r2, [pc, #92]	@ (800b1b8 <TIM_OC6_SetConfig+0xc0>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d007      	beq.n	800b170 <TIM_OC6_SetConfig+0x78>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	4a16      	ldr	r2, [pc, #88]	@ (800b1bc <TIM_OC6_SetConfig+0xc4>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d003      	beq.n	800b170 <TIM_OC6_SetConfig+0x78>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4a15      	ldr	r2, [pc, #84]	@ (800b1c0 <TIM_OC6_SetConfig+0xc8>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d109      	bne.n	800b184 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b176:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	695b      	ldr	r3, [r3, #20]
 800b17c:	029b      	lsls	r3, r3, #10
 800b17e:	697a      	ldr	r2, [r7, #20]
 800b180:	4313      	orrs	r3, r2
 800b182:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	697a      	ldr	r2, [r7, #20]
 800b188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	685a      	ldr	r2, [r3, #4]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	693a      	ldr	r2, [r7, #16]
 800b19c:	621a      	str	r2, [r3, #32]
}
 800b19e:	bf00      	nop
 800b1a0:	371c      	adds	r7, #28
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr
 800b1aa:	bf00      	nop
 800b1ac:	feff8fff 	.word	0xfeff8fff
 800b1b0:	40010000 	.word	0x40010000
 800b1b4:	40010400 	.word	0x40010400
 800b1b8:	40014000 	.word	0x40014000
 800b1bc:	40014400 	.word	0x40014400
 800b1c0:	40014800 	.word	0x40014800

0800b1c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d101      	bne.n	800b1dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1d8:	2302      	movs	r3, #2
 800b1da:	e06d      	b.n	800b2b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2202      	movs	r2, #2
 800b1e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a30      	ldr	r2, [pc, #192]	@ (800b2c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d004      	beq.n	800b210 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a2f      	ldr	r2, [pc, #188]	@ (800b2c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d108      	bne.n	800b222 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b216:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	4313      	orrs	r3, r2
 800b220:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b228:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	4313      	orrs	r3, r2
 800b232:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a20      	ldr	r2, [pc, #128]	@ (800b2c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d022      	beq.n	800b28c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b24e:	d01d      	beq.n	800b28c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a1d      	ldr	r2, [pc, #116]	@ (800b2cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d018      	beq.n	800b28c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a1c      	ldr	r2, [pc, #112]	@ (800b2d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d013      	beq.n	800b28c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a1a      	ldr	r2, [pc, #104]	@ (800b2d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d00e      	beq.n	800b28c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a15      	ldr	r2, [pc, #84]	@ (800b2c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d009      	beq.n	800b28c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a16      	ldr	r2, [pc, #88]	@ (800b2d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d004      	beq.n	800b28c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a15      	ldr	r2, [pc, #84]	@ (800b2dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d10c      	bne.n	800b2a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b292:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	68ba      	ldr	r2, [r7, #8]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b2b6:	2300      	movs	r3, #0
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3714      	adds	r7, #20
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr
 800b2c4:	40010000 	.word	0x40010000
 800b2c8:	40010400 	.word	0x40010400
 800b2cc:	40000400 	.word	0x40000400
 800b2d0:	40000800 	.word	0x40000800
 800b2d4:	40000c00 	.word	0x40000c00
 800b2d8:	40001800 	.word	0x40001800
 800b2dc:	40014000 	.word	0x40014000

0800b2e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2e8:	bf00      	nop
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b2fc:	bf00      	nop
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr

0800b308 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b308:	b480      	push	{r7}
 800b30a:	b083      	sub	sp, #12
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b310:	bf00      	nop
 800b312:	370c      	adds	r7, #12
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d101      	bne.n	800b32e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b32a:	2301      	movs	r3, #1
 800b32c:	e042      	b.n	800b3b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b334:	2b00      	cmp	r3, #0
 800b336:	d106      	bne.n	800b346 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f7f6 fa09 	bl	8001758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2224      	movs	r2, #36	@ 0x24
 800b34a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f022 0201 	bic.w	r2, r2, #1
 800b35c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 ffc8 	bl	800c2f4 <UART_SetConfig>
 800b364:	4603      	mov	r3, r0
 800b366:	2b01      	cmp	r3, #1
 800b368:	d101      	bne.n	800b36e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b36a:	2301      	movs	r3, #1
 800b36c:	e022      	b.n	800b3b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b372:	2b00      	cmp	r3, #0
 800b374:	d002      	beq.n	800b37c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f001 fd24 	bl	800cdc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	685a      	ldr	r2, [r3, #4]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b38a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	689a      	ldr	r2, [r3, #8]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b39a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f042 0201 	orr.w	r2, r2, #1
 800b3aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f001 fdab 	bl	800cf08 <UART_CheckIdleState>
 800b3b2:	4603      	mov	r3, r0
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3708      	adds	r7, #8
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b08a      	sub	sp, #40	@ 0x28
 800b3c0:	af02      	add	r7, sp, #8
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	603b      	str	r3, [r7, #0]
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3d2:	2b20      	cmp	r3, #32
 800b3d4:	d17b      	bne.n	800b4ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d002      	beq.n	800b3e2 <HAL_UART_Transmit+0x26>
 800b3dc:	88fb      	ldrh	r3, [r7, #6]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d101      	bne.n	800b3e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e074      	b.n	800b4d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2221      	movs	r2, #33	@ 0x21
 800b3f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b3f6:	f7f8 fdc7 	bl	8003f88 <HAL_GetTick>
 800b3fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	88fa      	ldrh	r2, [r7, #6]
 800b400:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	88fa      	ldrh	r2, [r7, #6]
 800b408:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b414:	d108      	bne.n	800b428 <HAL_UART_Transmit+0x6c>
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	691b      	ldr	r3, [r3, #16]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d104      	bne.n	800b428 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b41e:	2300      	movs	r3, #0
 800b420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	61bb      	str	r3, [r7, #24]
 800b426:	e003      	b.n	800b430 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b42c:	2300      	movs	r3, #0
 800b42e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b430:	e030      	b.n	800b494 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	9300      	str	r3, [sp, #0]
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	2200      	movs	r2, #0
 800b43a:	2180      	movs	r1, #128	@ 0x80
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	f001 fe0d 	bl	800d05c <UART_WaitOnFlagUntilTimeout>
 800b442:	4603      	mov	r3, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d005      	beq.n	800b454 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2220      	movs	r2, #32
 800b44c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b450:	2303      	movs	r3, #3
 800b452:	e03d      	b.n	800b4d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10b      	bne.n	800b472 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	881b      	ldrh	r3, [r3, #0]
 800b45e:	461a      	mov	r2, r3
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b468:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	3302      	adds	r3, #2
 800b46e:	61bb      	str	r3, [r7, #24]
 800b470:	e007      	b.n	800b482 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	781a      	ldrb	r2, [r3, #0]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	3301      	adds	r3, #1
 800b480:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b488:	b29b      	uxth	r3, r3
 800b48a:	3b01      	subs	r3, #1
 800b48c:	b29a      	uxth	r2, r3
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d1c8      	bne.n	800b432 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	9300      	str	r3, [sp, #0]
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	2140      	movs	r1, #64	@ 0x40
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f001 fdd6 	bl	800d05c <UART_WaitOnFlagUntilTimeout>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d005      	beq.n	800b4c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2220      	movs	r2, #32
 800b4ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b4be:	2303      	movs	r3, #3
 800b4c0:	e006      	b.n	800b4d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2220      	movs	r2, #32
 800b4c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	e000      	b.n	800b4d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b4ce:	2302      	movs	r3, #2
  }
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3720      	adds	r7, #32
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b08a      	sub	sp, #40	@ 0x28
 800b4dc:	af02      	add	r7, sp, #8
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	603b      	str	r3, [r7, #0]
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4ee:	2b20      	cmp	r3, #32
 800b4f0:	f040 80b5 	bne.w	800b65e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d002      	beq.n	800b500 <HAL_UART_Receive+0x28>
 800b4fa:	88fb      	ldrh	r3, [r7, #6]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d101      	bne.n	800b504 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800b500:	2301      	movs	r3, #1
 800b502:	e0ad      	b.n	800b660 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2200      	movs	r2, #0
 800b508:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2222      	movs	r2, #34	@ 0x22
 800b510:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2200      	movs	r2, #0
 800b518:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b51a:	f7f8 fd35 	bl	8003f88 <HAL_GetTick>
 800b51e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	88fa      	ldrh	r2, [r7, #6]
 800b524:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	88fa      	ldrh	r2, [r7, #6]
 800b52c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b538:	d10e      	bne.n	800b558 <HAL_UART_Receive+0x80>
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	691b      	ldr	r3, [r3, #16]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d105      	bne.n	800b54e <HAL_UART_Receive+0x76>
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b548:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b54c:	e02d      	b.n	800b5aa <HAL_UART_Receive+0xd2>
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	22ff      	movs	r2, #255	@ 0xff
 800b552:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b556:	e028      	b.n	800b5aa <HAL_UART_Receive+0xd2>
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10d      	bne.n	800b57c <HAL_UART_Receive+0xa4>
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	691b      	ldr	r3, [r3, #16]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d104      	bne.n	800b572 <HAL_UART_Receive+0x9a>
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	22ff      	movs	r2, #255	@ 0xff
 800b56c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b570:	e01b      	b.n	800b5aa <HAL_UART_Receive+0xd2>
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	227f      	movs	r2, #127	@ 0x7f
 800b576:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b57a:	e016      	b.n	800b5aa <HAL_UART_Receive+0xd2>
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b584:	d10d      	bne.n	800b5a2 <HAL_UART_Receive+0xca>
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	691b      	ldr	r3, [r3, #16]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d104      	bne.n	800b598 <HAL_UART_Receive+0xc0>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	227f      	movs	r2, #127	@ 0x7f
 800b592:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b596:	e008      	b.n	800b5aa <HAL_UART_Receive+0xd2>
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	223f      	movs	r2, #63	@ 0x3f
 800b59c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b5a0:	e003      	b.n	800b5aa <HAL_UART_Receive+0xd2>
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b5b0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5ba:	d108      	bne.n	800b5ce <HAL_UART_Receive+0xf6>
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	691b      	ldr	r3, [r3, #16]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d104      	bne.n	800b5ce <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	61bb      	str	r3, [r7, #24]
 800b5cc:	e003      	b.n	800b5d6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b5d6:	e036      	b.n	800b646 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	2120      	movs	r1, #32
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f001 fd3a 	bl	800d05c <UART_WaitOnFlagUntilTimeout>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d005      	beq.n	800b5fa <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2220      	movs	r2, #32
 800b5f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800b5f6:	2303      	movs	r3, #3
 800b5f8:	e032      	b.n	800b660 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d10c      	bne.n	800b61a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b606:	b29a      	uxth	r2, r3
 800b608:	8a7b      	ldrh	r3, [r7, #18]
 800b60a:	4013      	ands	r3, r2
 800b60c:	b29a      	uxth	r2, r3
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b612:	69bb      	ldr	r3, [r7, #24]
 800b614:	3302      	adds	r3, #2
 800b616:	61bb      	str	r3, [r7, #24]
 800b618:	e00c      	b.n	800b634 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b620:	b2da      	uxtb	r2, r3
 800b622:	8a7b      	ldrh	r3, [r7, #18]
 800b624:	b2db      	uxtb	r3, r3
 800b626:	4013      	ands	r3, r2
 800b628:	b2da      	uxtb	r2, r3
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	3301      	adds	r3, #1
 800b632:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	3b01      	subs	r3, #1
 800b63e:	b29a      	uxth	r2, r3
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d1c2      	bne.n	800b5d8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2220      	movs	r2, #32
 800b656:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800b65a:	2300      	movs	r3, #0
 800b65c:	e000      	b.n	800b660 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800b65e:	2302      	movs	r3, #2
  }
}
 800b660:	4618      	mov	r0, r3
 800b662:	3720      	adds	r7, #32
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b668:	b480      	push	{r7}
 800b66a:	b091      	sub	sp, #68	@ 0x44
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	4613      	mov	r3, r2
 800b674:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b67c:	2b20      	cmp	r3, #32
 800b67e:	d178      	bne.n	800b772 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d002      	beq.n	800b68c <HAL_UART_Transmit_IT+0x24>
 800b686:	88fb      	ldrh	r3, [r7, #6]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d101      	bne.n	800b690 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800b68c:	2301      	movs	r3, #1
 800b68e:	e071      	b.n	800b774 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	88fa      	ldrh	r2, [r7, #6]
 800b69a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	88fa      	ldrh	r2, [r7, #6]
 800b6a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2221      	movs	r2, #33	@ 0x21
 800b6b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6c4:	d12a      	bne.n	800b71c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6ce:	d107      	bne.n	800b6e0 <HAL_UART_Transmit_IT+0x78>
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	691b      	ldr	r3, [r3, #16]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d103      	bne.n	800b6e0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	4a29      	ldr	r2, [pc, #164]	@ (800b780 <HAL_UART_Transmit_IT+0x118>)
 800b6dc:	679a      	str	r2, [r3, #120]	@ 0x78
 800b6de:	e002      	b.n	800b6e6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	4a28      	ldr	r2, [pc, #160]	@ (800b784 <HAL_UART_Transmit_IT+0x11c>)
 800b6e4:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	3308      	adds	r3, #8
 800b6ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6f0:	e853 3f00 	ldrex	r3, [r3]
 800b6f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b6fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3308      	adds	r3, #8
 800b704:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b706:	637a      	str	r2, [r7, #52]	@ 0x34
 800b708:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b70a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b70c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b70e:	e841 2300 	strex	r3, r2, [r1]
 800b712:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1e5      	bne.n	800b6e6 <HAL_UART_Transmit_IT+0x7e>
 800b71a:	e028      	b.n	800b76e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	689b      	ldr	r3, [r3, #8]
 800b720:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b724:	d107      	bne.n	800b736 <HAL_UART_Transmit_IT+0xce>
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d103      	bne.n	800b736 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	4a15      	ldr	r2, [pc, #84]	@ (800b788 <HAL_UART_Transmit_IT+0x120>)
 800b732:	679a      	str	r2, [r3, #120]	@ 0x78
 800b734:	e002      	b.n	800b73c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	4a14      	ldr	r2, [pc, #80]	@ (800b78c <HAL_UART_Transmit_IT+0x124>)
 800b73a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	e853 3f00 	ldrex	r3, [r3]
 800b748:	613b      	str	r3, [r7, #16]
   return(result);
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b750:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	461a      	mov	r2, r3
 800b758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b75a:	623b      	str	r3, [r7, #32]
 800b75c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b75e:	69f9      	ldr	r1, [r7, #28]
 800b760:	6a3a      	ldr	r2, [r7, #32]
 800b762:	e841 2300 	strex	r3, r2, [r1]
 800b766:	61bb      	str	r3, [r7, #24]
   return(result);
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d1e6      	bne.n	800b73c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800b76e:	2300      	movs	r3, #0
 800b770:	e000      	b.n	800b774 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800b772:	2302      	movs	r3, #2
  }
}
 800b774:	4618      	mov	r0, r3
 800b776:	3744      	adds	r7, #68	@ 0x44
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr
 800b780:	0800d70d 	.word	0x0800d70d
 800b784:	0800d62d 	.word	0x0800d62d
 800b788:	0800d56b 	.word	0x0800d56b
 800b78c:	0800d4b3 	.word	0x0800d4b3

0800b790 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b08a      	sub	sp, #40	@ 0x28
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	4613      	mov	r3, r2
 800b79c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7a4:	2b20      	cmp	r3, #32
 800b7a6:	d137      	bne.n	800b818 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d002      	beq.n	800b7b4 <HAL_UART_Receive_IT+0x24>
 800b7ae:	88fb      	ldrh	r3, [r7, #6]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d101      	bne.n	800b7b8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	e030      	b.n	800b81a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a18      	ldr	r2, [pc, #96]	@ (800b824 <HAL_UART_Receive_IT+0x94>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d01f      	beq.n	800b808 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d018      	beq.n	800b808 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	e853 3f00 	ldrex	r3, [r3]
 800b7e2:	613b      	str	r3, [r7, #16]
   return(result);
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b7ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f4:	623b      	str	r3, [r7, #32]
 800b7f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f8:	69f9      	ldr	r1, [r7, #28]
 800b7fa:	6a3a      	ldr	r2, [r7, #32]
 800b7fc:	e841 2300 	strex	r3, r2, [r1]
 800b800:	61bb      	str	r3, [r7, #24]
   return(result);
 800b802:	69bb      	ldr	r3, [r7, #24]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1e6      	bne.n	800b7d6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b808:	88fb      	ldrh	r3, [r7, #6]
 800b80a:	461a      	mov	r2, r3
 800b80c:	68b9      	ldr	r1, [r7, #8]
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f001 fc8c 	bl	800d12c <UART_Start_Receive_IT>
 800b814:	4603      	mov	r3, r0
 800b816:	e000      	b.n	800b81a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b818:	2302      	movs	r3, #2
  }
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3728      	adds	r7, #40	@ 0x28
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	58000c00 	.word	0x58000c00

0800b828 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b09a      	sub	sp, #104	@ 0x68
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b838:	e853 3f00 	ldrex	r3, [r3]
 800b83c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b83e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b840:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b844:	667b      	str	r3, [r7, #100]	@ 0x64
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	461a      	mov	r2, r3
 800b84c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b84e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b850:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b852:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b854:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b856:	e841 2300 	strex	r3, r2, [r1]
 800b85a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b85c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d1e6      	bne.n	800b830 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	3308      	adds	r3, #8
 800b868:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b86c:	e853 3f00 	ldrex	r3, [r3]
 800b870:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b874:	4b51      	ldr	r3, [pc, #324]	@ (800b9bc <HAL_UART_AbortReceive_IT+0x194>)
 800b876:	4013      	ands	r3, r2
 800b878:	663b      	str	r3, [r7, #96]	@ 0x60
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	3308      	adds	r3, #8
 800b880:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b882:	643a      	str	r2, [r7, #64]	@ 0x40
 800b884:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b886:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b888:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b88a:	e841 2300 	strex	r3, r2, [r1]
 800b88e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1e5      	bne.n	800b862 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d118      	bne.n	800b8d0 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a4:	6a3b      	ldr	r3, [r7, #32]
 800b8a6:	e853 3f00 	ldrex	r3, [r3]
 800b8aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	f023 0310 	bic.w	r3, r3, #16
 800b8b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b8bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b8be:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8c4:	e841 2300 	strex	r3, r2, [r1]
 800b8c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1e6      	bne.n	800b89e <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8da:	2b40      	cmp	r3, #64	@ 0x40
 800b8dc:	d154      	bne.n	800b988 <HAL_UART_AbortReceive_IT+0x160>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	3308      	adds	r3, #8
 800b8e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	e853 3f00 	ldrex	r3, [r3]
 800b8ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	3308      	adds	r3, #8
 800b8fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b8fe:	61ba      	str	r2, [r7, #24]
 800b900:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b902:	6979      	ldr	r1, [r7, #20]
 800b904:	69ba      	ldr	r2, [r7, #24]
 800b906:	e841 2300 	strex	r3, r2, [r1]
 800b90a:	613b      	str	r3, [r7, #16]
   return(result);
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d1e5      	bne.n	800b8de <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d017      	beq.n	800b94c <HAL_UART_AbortReceive_IT+0x124>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b922:	4a27      	ldr	r2, [pc, #156]	@ (800b9c0 <HAL_UART_AbortReceive_IT+0x198>)
 800b924:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7f8 ffe1 	bl	80048f4 <HAL_DMA_Abort_IT>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	d03c      	beq.n	800b9b2 <HAL_UART_AbortReceive_IT+0x18a>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b93e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b946:	4610      	mov	r0, r2
 800b948:	4798      	blx	r3
 800b94a:	e032      	b.n	800b9b2 <HAL_UART_AbortReceive_IT+0x18a>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	220f      	movs	r2, #15
 800b960:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	699a      	ldr	r2, [r3, #24]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f042 0208 	orr.w	r2, r2, #8
 800b970:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2220      	movs	r2, #32
 800b976:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 fbe3 	bl	800c14c <HAL_UART_AbortReceiveCpltCallback>
 800b986:	e014      	b.n	800b9b2 <HAL_UART_AbortReceive_IT+0x18a>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	220f      	movs	r2, #15
 800b99c:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2220      	movs	r2, #32
 800b9a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fbcd 	bl	800c14c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3768      	adds	r7, #104	@ 0x68
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	effffffe 	.word	0xeffffffe
 800b9c0:	0800d469 	.word	0x0800d469

0800b9c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b0ba      	sub	sp, #232	@ 0xe8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	69db      	ldr	r3, [r3, #28]
 800b9d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b9ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b9ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b9f2:	4013      	ands	r3, r2
 800b9f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b9f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d11b      	bne.n	800ba38 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ba00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba04:	f003 0320 	and.w	r3, r3, #32
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d015      	beq.n	800ba38 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ba0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba10:	f003 0320 	and.w	r3, r3, #32
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d105      	bne.n	800ba24 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ba18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d009      	beq.n	800ba38 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	f000 8377 	beq.w	800c11c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	4798      	blx	r3
      }
      return;
 800ba36:	e371      	b.n	800c11c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ba38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f000 8123 	beq.w	800bc88 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ba42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ba46:	4b8d      	ldr	r3, [pc, #564]	@ (800bc7c <HAL_UART_IRQHandler+0x2b8>)
 800ba48:	4013      	ands	r3, r2
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d106      	bne.n	800ba5c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ba4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ba52:	4b8b      	ldr	r3, [pc, #556]	@ (800bc80 <HAL_UART_IRQHandler+0x2bc>)
 800ba54:	4013      	ands	r3, r2
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f000 8116 	beq.w	800bc88 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ba5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba60:	f003 0301 	and.w	r3, r3, #1
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d011      	beq.n	800ba8c <HAL_UART_IRQHandler+0xc8>
 800ba68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d00b      	beq.n	800ba8c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2201      	movs	r2, #1
 800ba7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba82:	f043 0201 	orr.w	r2, r3, #1
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba90:	f003 0302 	and.w	r3, r3, #2
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d011      	beq.n	800babc <HAL_UART_IRQHandler+0xf8>
 800ba98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba9c:	f003 0301 	and.w	r3, r3, #1
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d00b      	beq.n	800babc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	2202      	movs	r2, #2
 800baaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bab2:	f043 0204 	orr.w	r2, r3, #4
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800babc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bac0:	f003 0304 	and.w	r3, r3, #4
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d011      	beq.n	800baec <HAL_UART_IRQHandler+0x128>
 800bac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bacc:	f003 0301 	and.w	r3, r3, #1
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d00b      	beq.n	800baec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2204      	movs	r2, #4
 800bada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bae2:	f043 0202 	orr.w	r2, r3, #2
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800baec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baf0:	f003 0308 	and.w	r3, r3, #8
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d017      	beq.n	800bb28 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800baf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bafc:	f003 0320 	and.w	r3, r3, #32
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d105      	bne.n	800bb10 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bb04:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bb08:	4b5c      	ldr	r3, [pc, #368]	@ (800bc7c <HAL_UART_IRQHandler+0x2b8>)
 800bb0a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d00b      	beq.n	800bb28 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2208      	movs	r2, #8
 800bb16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb1e:	f043 0208 	orr.w	r2, r3, #8
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bb28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d012      	beq.n	800bb5a <HAL_UART_IRQHandler+0x196>
 800bb34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d00c      	beq.n	800bb5a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bb48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb50:	f043 0220 	orr.w	r2, r3, #32
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f000 82dd 	beq.w	800c120 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb6a:	f003 0320 	and.w	r3, r3, #32
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d013      	beq.n	800bb9a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb76:	f003 0320 	and.w	r3, r3, #32
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d105      	bne.n	800bb8a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d007      	beq.n	800bb9a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d003      	beq.n	800bb9a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bba0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbae:	2b40      	cmp	r3, #64	@ 0x40
 800bbb0:	d005      	beq.n	800bbbe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bbb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bbb6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d054      	beq.n	800bc68 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f001 fbd6 	bl	800d370 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbce:	2b40      	cmp	r3, #64	@ 0x40
 800bbd0:	d146      	bne.n	800bc60 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	3308      	adds	r3, #8
 800bbd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bbe0:	e853 3f00 	ldrex	r3, [r3]
 800bbe4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bbe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bbec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	3308      	adds	r3, #8
 800bbfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bbfe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bc02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bc0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bc0e:	e841 2300 	strex	r3, r2, [r1]
 800bc12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bc16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d1d9      	bne.n	800bbd2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d017      	beq.n	800bc58 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc2e:	4a15      	ldr	r2, [pc, #84]	@ (800bc84 <HAL_UART_IRQHandler+0x2c0>)
 800bc30:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7f8 fe5b 	bl	80048f4 <HAL_DMA_Abort_IT>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d019      	beq.n	800bc78 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800bc52:	4610      	mov	r0, r2
 800bc54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc56:	e00f      	b.n	800bc78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 fa6d 	bl	800c138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc5e:	e00b      	b.n	800bc78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 fa69 	bl	800c138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc66:	e007      	b.n	800bc78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 fa65 	bl	800c138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800bc76:	e253      	b.n	800c120 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc78:	bf00      	nop
    return;
 800bc7a:	e251      	b.n	800c120 <HAL_UART_IRQHandler+0x75c>
 800bc7c:	10000001 	.word	0x10000001
 800bc80:	04000120 	.word	0x04000120
 800bc84:	0800d43d 	.word	0x0800d43d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	f040 81e7 	bne.w	800c060 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bc92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc96:	f003 0310 	and.w	r3, r3, #16
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f000 81e0 	beq.w	800c060 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bca4:	f003 0310 	and.w	r3, r3, #16
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	f000 81d9 	beq.w	800c060 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2210      	movs	r2, #16
 800bcb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	689b      	ldr	r3, [r3, #8]
 800bcbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcc0:	2b40      	cmp	r3, #64	@ 0x40
 800bcc2:	f040 8151 	bne.w	800bf68 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a96      	ldr	r2, [pc, #600]	@ (800bf28 <HAL_UART_IRQHandler+0x564>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d068      	beq.n	800bda6 <HAL_UART_IRQHandler+0x3e2>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a93      	ldr	r2, [pc, #588]	@ (800bf2c <HAL_UART_IRQHandler+0x568>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d061      	beq.n	800bda6 <HAL_UART_IRQHandler+0x3e2>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a91      	ldr	r2, [pc, #580]	@ (800bf30 <HAL_UART_IRQHandler+0x56c>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d05a      	beq.n	800bda6 <HAL_UART_IRQHandler+0x3e2>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a8e      	ldr	r2, [pc, #568]	@ (800bf34 <HAL_UART_IRQHandler+0x570>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d053      	beq.n	800bda6 <HAL_UART_IRQHandler+0x3e2>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a8c      	ldr	r2, [pc, #560]	@ (800bf38 <HAL_UART_IRQHandler+0x574>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d04c      	beq.n	800bda6 <HAL_UART_IRQHandler+0x3e2>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a89      	ldr	r2, [pc, #548]	@ (800bf3c <HAL_UART_IRQHandler+0x578>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d045      	beq.n	800bda6 <HAL_UART_IRQHandler+0x3e2>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4a87      	ldr	r2, [pc, #540]	@ (800bf40 <HAL_UART_IRQHandler+0x57c>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d03e      	beq.n	800bda6 <HAL_UART_IRQHandler+0x3e2>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a84      	ldr	r2, [pc, #528]	@ (800bf44 <HAL_UART_IRQHandler+0x580>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d037      	beq.n	800bda6 <HAL_UART_IRQHandler+0x3e2>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a82      	ldr	r2, [pc, #520]	@ (800bf48 <HAL_UART_IRQHandler+0x584>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d030      	beq.n	800bda6 <HAL_UART_IRQHandler+0x3e2>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a7f      	ldr	r2, [pc, #508]	@ (800bf4c <HAL_UART_IRQHandler+0x588>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d029      	beq.n	800bda6 <HAL_UART_IRQHandler+0x3e2>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a7d      	ldr	r2, [pc, #500]	@ (800bf50 <HAL_UART_IRQHandler+0x58c>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d022      	beq.n	800bda6 <HAL_UART_IRQHandler+0x3e2>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a7a      	ldr	r2, [pc, #488]	@ (800bf54 <HAL_UART_IRQHandler+0x590>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d01b      	beq.n	800bda6 <HAL_UART_IRQHandler+0x3e2>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a78      	ldr	r2, [pc, #480]	@ (800bf58 <HAL_UART_IRQHandler+0x594>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d014      	beq.n	800bda6 <HAL_UART_IRQHandler+0x3e2>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a75      	ldr	r2, [pc, #468]	@ (800bf5c <HAL_UART_IRQHandler+0x598>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d00d      	beq.n	800bda6 <HAL_UART_IRQHandler+0x3e2>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	4a73      	ldr	r2, [pc, #460]	@ (800bf60 <HAL_UART_IRQHandler+0x59c>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d006      	beq.n	800bda6 <HAL_UART_IRQHandler+0x3e2>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a70      	ldr	r2, [pc, #448]	@ (800bf64 <HAL_UART_IRQHandler+0x5a0>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d106      	bne.n	800bdb4 <HAL_UART_IRQHandler+0x3f0>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	e005      	b.n	800bdc0 <HAL_UART_IRQHandler+0x3fc>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bdc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f000 81ab 	beq.w	800c124 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bdd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	f080 81a3 	bcs.w	800c124 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bde4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdee:	69db      	ldr	r3, [r3, #28]
 800bdf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bdf4:	f000 8087 	beq.w	800bf06 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800be04:	e853 3f00 	ldrex	r3, [r3]
 800be08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800be0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800be10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800be14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	461a      	mov	r2, r3
 800be1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800be22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800be26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800be2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800be32:	e841 2300 	strex	r3, r2, [r1]
 800be36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800be3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1da      	bne.n	800bdf8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	3308      	adds	r3, #8
 800be48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800be4c:	e853 3f00 	ldrex	r3, [r3]
 800be50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800be52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800be54:	f023 0301 	bic.w	r3, r3, #1
 800be58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	3308      	adds	r3, #8
 800be62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800be66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800be6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800be6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800be72:	e841 2300 	strex	r3, r2, [r1]
 800be76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800be78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1e1      	bne.n	800be42 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	3308      	adds	r3, #8
 800be84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be88:	e853 3f00 	ldrex	r3, [r3]
 800be8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800be8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	3308      	adds	r3, #8
 800be9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bea2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bea4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bea8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800beaa:	e841 2300 	strex	r3, r2, [r1]
 800beae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800beb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d1e3      	bne.n	800be7e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2220      	movs	r2, #32
 800beba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800becc:	e853 3f00 	ldrex	r3, [r3]
 800bed0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bed4:	f023 0310 	bic.w	r3, r3, #16
 800bed8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	461a      	mov	r2, r3
 800bee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bee6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bee8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800beec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800beee:	e841 2300 	strex	r3, r2, [r1]
 800bef2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1e4      	bne.n	800bec4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf00:	4618      	mov	r0, r3
 800bf02:	f7f8 f9d9 	bl	80042b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2202      	movs	r2, #2
 800bf0a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	1ad3      	subs	r3, r2, r3
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	4619      	mov	r1, r3
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 f91d 	bl	800c160 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bf26:	e0fd      	b.n	800c124 <HAL_UART_IRQHandler+0x760>
 800bf28:	40020010 	.word	0x40020010
 800bf2c:	40020028 	.word	0x40020028
 800bf30:	40020040 	.word	0x40020040
 800bf34:	40020058 	.word	0x40020058
 800bf38:	40020070 	.word	0x40020070
 800bf3c:	40020088 	.word	0x40020088
 800bf40:	400200a0 	.word	0x400200a0
 800bf44:	400200b8 	.word	0x400200b8
 800bf48:	40020410 	.word	0x40020410
 800bf4c:	40020428 	.word	0x40020428
 800bf50:	40020440 	.word	0x40020440
 800bf54:	40020458 	.word	0x40020458
 800bf58:	40020470 	.word	0x40020470
 800bf5c:	40020488 	.word	0x40020488
 800bf60:	400204a0 	.word	0x400204a0
 800bf64:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	1ad3      	subs	r3, r2, r3
 800bf78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	f000 80cf 	beq.w	800c128 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bf8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	f000 80ca 	beq.w	800c128 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf9c:	e853 3f00 	ldrex	r3, [r3]
 800bfa0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bfa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bfa8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bfb6:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfb8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bfbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfbe:	e841 2300 	strex	r3, r2, [r1]
 800bfc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bfc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d1e4      	bne.n	800bf94 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	3308      	adds	r3, #8
 800bfd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd4:	e853 3f00 	ldrex	r3, [r3]
 800bfd8:	623b      	str	r3, [r7, #32]
   return(result);
 800bfda:	6a3a      	ldr	r2, [r7, #32]
 800bfdc:	4b55      	ldr	r3, [pc, #340]	@ (800c134 <HAL_UART_IRQHandler+0x770>)
 800bfde:	4013      	ands	r3, r2
 800bfe0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	3308      	adds	r3, #8
 800bfea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bfee:	633a      	str	r2, [r7, #48]	@ 0x30
 800bff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bff4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bff6:	e841 2300 	strex	r3, r2, [r1]
 800bffa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1e3      	bne.n	800bfca <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2220      	movs	r2, #32
 800c006:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	e853 3f00 	ldrex	r3, [r3]
 800c022:	60fb      	str	r3, [r7, #12]
   return(result);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f023 0310 	bic.w	r3, r3, #16
 800c02a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	461a      	mov	r2, r3
 800c034:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c038:	61fb      	str	r3, [r7, #28]
 800c03a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03c:	69b9      	ldr	r1, [r7, #24]
 800c03e:	69fa      	ldr	r2, [r7, #28]
 800c040:	e841 2300 	strex	r3, r2, [r1]
 800c044:	617b      	str	r3, [r7, #20]
   return(result);
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d1e4      	bne.n	800c016 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2202      	movs	r2, #2
 800c050:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c052:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c056:	4619      	mov	r1, r3
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 f881 	bl	800c160 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c05e:	e063      	b.n	800c128 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c064:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00e      	beq.n	800c08a <HAL_UART_IRQHandler+0x6c6>
 800c06c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c070:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c074:	2b00      	cmp	r3, #0
 800c076:	d008      	beq.n	800c08a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c080:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f002 f8fe 	bl	800e284 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c088:	e051      	b.n	800c12e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c08a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c08e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c092:	2b00      	cmp	r3, #0
 800c094:	d014      	beq.n	800c0c0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c09a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d105      	bne.n	800c0ae <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c0a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d008      	beq.n	800c0c0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d03a      	beq.n	800c12c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	4798      	blx	r3
    }
    return;
 800c0be:	e035      	b.n	800c12c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c0c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d009      	beq.n	800c0e0 <HAL_UART_IRQHandler+0x71c>
 800c0cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d003      	beq.n	800c0e0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f001 fb8c 	bl	800d7f6 <UART_EndTransmit_IT>
    return;
 800c0de:	e026      	b.n	800c12e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c0e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d009      	beq.n	800c100 <HAL_UART_IRQHandler+0x73c>
 800c0ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d003      	beq.n	800c100 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f002 f8d7 	bl	800e2ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c0fe:	e016      	b.n	800c12e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c104:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d010      	beq.n	800c12e <HAL_UART_IRQHandler+0x76a>
 800c10c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c110:	2b00      	cmp	r3, #0
 800c112:	da0c      	bge.n	800c12e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f002 f8bf 	bl	800e298 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c11a:	e008      	b.n	800c12e <HAL_UART_IRQHandler+0x76a>
      return;
 800c11c:	bf00      	nop
 800c11e:	e006      	b.n	800c12e <HAL_UART_IRQHandler+0x76a>
    return;
 800c120:	bf00      	nop
 800c122:	e004      	b.n	800c12e <HAL_UART_IRQHandler+0x76a>
      return;
 800c124:	bf00      	nop
 800c126:	e002      	b.n	800c12e <HAL_UART_IRQHandler+0x76a>
      return;
 800c128:	bf00      	nop
 800c12a:	e000      	b.n	800c12e <HAL_UART_IRQHandler+0x76a>
    return;
 800c12c:	bf00      	nop
  }
}
 800c12e:	37e8      	adds	r7, #232	@ 0xe8
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}
 800c134:	effffffe 	.word	0xeffffffe

0800c138 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c140:	bf00      	nop
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c154:	bf00      	nop
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c160:	b480      	push	{r7}
 800c162:	b083      	sub	sp, #12
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	460b      	mov	r3, r1
 800c16a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c16c:	bf00      	nop
 800c16e:	370c      	adds	r7, #12
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800c178:	b480      	push	{r7}
 800c17a:	b08f      	sub	sp, #60	@ 0x3c
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c186:	2b01      	cmp	r3, #1
 800c188:	d101      	bne.n	800c18e <HAL_HalfDuplex_EnableTransmitter+0x16>
 800c18a:	2302      	movs	r3, #2
 800c18c:	e042      	b.n	800c214 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2201      	movs	r2, #1
 800c192:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2224      	movs	r2, #36	@ 0x24
 800c19a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1a4:	6a3b      	ldr	r3, [r7, #32]
 800c1a6:	e853 3f00 	ldrex	r3, [r3]
 800c1aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	f023 030c 	bic.w	r3, r3, #12
 800c1b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c1be:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c1c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1c4:	e841 2300 	strex	r3, r2, [r1]
 800c1c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d1e6      	bne.n	800c19e <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	e853 3f00 	ldrex	r3, [r3]
 800c1dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	f043 0308 	orr.w	r3, r3, #8
 800c1e4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ee:	61bb      	str	r3, [r7, #24]
 800c1f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f2:	6979      	ldr	r1, [r7, #20]
 800c1f4:	69ba      	ldr	r2, [r7, #24]
 800c1f6:	e841 2300 	strex	r3, r2, [r1]
 800c1fa:	613b      	str	r3, [r7, #16]
   return(result);
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d1e6      	bne.n	800c1d0 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2220      	movs	r2, #32
 800c206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c212:	2300      	movs	r3, #0
}
 800c214:	4618      	mov	r0, r3
 800c216:	373c      	adds	r7, #60	@ 0x3c
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800c220:	b480      	push	{r7}
 800c222:	b08f      	sub	sp, #60	@ 0x3c
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c22e:	2b01      	cmp	r3, #1
 800c230:	d101      	bne.n	800c236 <HAL_HalfDuplex_EnableReceiver+0x16>
 800c232:	2302      	movs	r3, #2
 800c234:	e042      	b.n	800c2bc <HAL_HalfDuplex_EnableReceiver+0x9c>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2201      	movs	r2, #1
 800c23a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2224      	movs	r2, #36	@ 0x24
 800c242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c24c:	6a3b      	ldr	r3, [r7, #32]
 800c24e:	e853 3f00 	ldrex	r3, [r3]
 800c252:	61fb      	str	r3, [r7, #28]
   return(result);
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	f023 030c 	bic.w	r3, r3, #12
 800c25a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	461a      	mov	r2, r3
 800c262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c266:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c268:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c26a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c26c:	e841 2300 	strex	r3, r2, [r1]
 800c270:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1e6      	bne.n	800c246 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	e853 3f00 	ldrex	r3, [r3]
 800c284:	60bb      	str	r3, [r7, #8]
   return(result);
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	f043 0304 	orr.w	r3, r3, #4
 800c28c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	461a      	mov	r2, r3
 800c294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c296:	61bb      	str	r3, [r7, #24]
 800c298:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c29a:	6979      	ldr	r1, [r7, #20]
 800c29c:	69ba      	ldr	r2, [r7, #24]
 800c29e:	e841 2300 	strex	r3, r2, [r1]
 800c2a2:	613b      	str	r3, [r7, #16]
   return(result);
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d1e6      	bne.n	800c278 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2220      	movs	r2, #32
 800c2ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	373c      	adds	r7, #60	@ 0x3c
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2d6:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c2de:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	4313      	orrs	r3, r2
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3714      	adds	r7, #20
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr
	...

0800c2f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c2f8:	b092      	sub	sp, #72	@ 0x48
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c2fe:	2300      	movs	r3, #0
 800c300:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	689a      	ldr	r2, [r3, #8]
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	691b      	ldr	r3, [r3, #16]
 800c30c:	431a      	orrs	r2, r3
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	695b      	ldr	r3, [r3, #20]
 800c312:	431a      	orrs	r2, r3
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	69db      	ldr	r3, [r3, #28]
 800c318:	4313      	orrs	r3, r2
 800c31a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	4bbe      	ldr	r3, [pc, #760]	@ (800c61c <UART_SetConfig+0x328>)
 800c324:	4013      	ands	r3, r2
 800c326:	697a      	ldr	r2, [r7, #20]
 800c328:	6812      	ldr	r2, [r2, #0]
 800c32a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c32c:	430b      	orrs	r3, r1
 800c32e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	68da      	ldr	r2, [r3, #12]
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	430a      	orrs	r2, r1
 800c344:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	699b      	ldr	r3, [r3, #24]
 800c34a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4ab3      	ldr	r2, [pc, #716]	@ (800c620 <UART_SetConfig+0x32c>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d004      	beq.n	800c360 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	6a1b      	ldr	r3, [r3, #32]
 800c35a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c35c:	4313      	orrs	r3, r2
 800c35e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	689a      	ldr	r2, [r3, #8]
 800c366:	4baf      	ldr	r3, [pc, #700]	@ (800c624 <UART_SetConfig+0x330>)
 800c368:	4013      	ands	r3, r2
 800c36a:	697a      	ldr	r2, [r7, #20]
 800c36c:	6812      	ldr	r2, [r2, #0]
 800c36e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c370:	430b      	orrs	r3, r1
 800c372:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c37a:	f023 010f 	bic.w	r1, r3, #15
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	430a      	orrs	r2, r1
 800c388:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4aa6      	ldr	r2, [pc, #664]	@ (800c628 <UART_SetConfig+0x334>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d177      	bne.n	800c484 <UART_SetConfig+0x190>
 800c394:	4ba5      	ldr	r3, [pc, #660]	@ (800c62c <UART_SetConfig+0x338>)
 800c396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c398:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c39c:	2b28      	cmp	r3, #40	@ 0x28
 800c39e:	d86d      	bhi.n	800c47c <UART_SetConfig+0x188>
 800c3a0:	a201      	add	r2, pc, #4	@ (adr r2, 800c3a8 <UART_SetConfig+0xb4>)
 800c3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a6:	bf00      	nop
 800c3a8:	0800c44d 	.word	0x0800c44d
 800c3ac:	0800c47d 	.word	0x0800c47d
 800c3b0:	0800c47d 	.word	0x0800c47d
 800c3b4:	0800c47d 	.word	0x0800c47d
 800c3b8:	0800c47d 	.word	0x0800c47d
 800c3bc:	0800c47d 	.word	0x0800c47d
 800c3c0:	0800c47d 	.word	0x0800c47d
 800c3c4:	0800c47d 	.word	0x0800c47d
 800c3c8:	0800c455 	.word	0x0800c455
 800c3cc:	0800c47d 	.word	0x0800c47d
 800c3d0:	0800c47d 	.word	0x0800c47d
 800c3d4:	0800c47d 	.word	0x0800c47d
 800c3d8:	0800c47d 	.word	0x0800c47d
 800c3dc:	0800c47d 	.word	0x0800c47d
 800c3e0:	0800c47d 	.word	0x0800c47d
 800c3e4:	0800c47d 	.word	0x0800c47d
 800c3e8:	0800c45d 	.word	0x0800c45d
 800c3ec:	0800c47d 	.word	0x0800c47d
 800c3f0:	0800c47d 	.word	0x0800c47d
 800c3f4:	0800c47d 	.word	0x0800c47d
 800c3f8:	0800c47d 	.word	0x0800c47d
 800c3fc:	0800c47d 	.word	0x0800c47d
 800c400:	0800c47d 	.word	0x0800c47d
 800c404:	0800c47d 	.word	0x0800c47d
 800c408:	0800c465 	.word	0x0800c465
 800c40c:	0800c47d 	.word	0x0800c47d
 800c410:	0800c47d 	.word	0x0800c47d
 800c414:	0800c47d 	.word	0x0800c47d
 800c418:	0800c47d 	.word	0x0800c47d
 800c41c:	0800c47d 	.word	0x0800c47d
 800c420:	0800c47d 	.word	0x0800c47d
 800c424:	0800c47d 	.word	0x0800c47d
 800c428:	0800c46d 	.word	0x0800c46d
 800c42c:	0800c47d 	.word	0x0800c47d
 800c430:	0800c47d 	.word	0x0800c47d
 800c434:	0800c47d 	.word	0x0800c47d
 800c438:	0800c47d 	.word	0x0800c47d
 800c43c:	0800c47d 	.word	0x0800c47d
 800c440:	0800c47d 	.word	0x0800c47d
 800c444:	0800c47d 	.word	0x0800c47d
 800c448:	0800c475 	.word	0x0800c475
 800c44c:	2301      	movs	r3, #1
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c452:	e222      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c454:	2304      	movs	r3, #4
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c45a:	e21e      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c45c:	2308      	movs	r3, #8
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c462:	e21a      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c464:	2310      	movs	r3, #16
 800c466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c46a:	e216      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c46c:	2320      	movs	r3, #32
 800c46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c472:	e212      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c474:	2340      	movs	r3, #64	@ 0x40
 800c476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c47a:	e20e      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c47c:	2380      	movs	r3, #128	@ 0x80
 800c47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c482:	e20a      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a69      	ldr	r2, [pc, #420]	@ (800c630 <UART_SetConfig+0x33c>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d130      	bne.n	800c4f0 <UART_SetConfig+0x1fc>
 800c48e:	4b67      	ldr	r3, [pc, #412]	@ (800c62c <UART_SetConfig+0x338>)
 800c490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c492:	f003 0307 	and.w	r3, r3, #7
 800c496:	2b05      	cmp	r3, #5
 800c498:	d826      	bhi.n	800c4e8 <UART_SetConfig+0x1f4>
 800c49a:	a201      	add	r2, pc, #4	@ (adr r2, 800c4a0 <UART_SetConfig+0x1ac>)
 800c49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a0:	0800c4b9 	.word	0x0800c4b9
 800c4a4:	0800c4c1 	.word	0x0800c4c1
 800c4a8:	0800c4c9 	.word	0x0800c4c9
 800c4ac:	0800c4d1 	.word	0x0800c4d1
 800c4b0:	0800c4d9 	.word	0x0800c4d9
 800c4b4:	0800c4e1 	.word	0x0800c4e1
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4be:	e1ec      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c4c0:	2304      	movs	r3, #4
 800c4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4c6:	e1e8      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c4c8:	2308      	movs	r3, #8
 800c4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ce:	e1e4      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c4d0:	2310      	movs	r3, #16
 800c4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4d6:	e1e0      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c4d8:	2320      	movs	r3, #32
 800c4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4de:	e1dc      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c4e0:	2340      	movs	r3, #64	@ 0x40
 800c4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4e6:	e1d8      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c4e8:	2380      	movs	r3, #128	@ 0x80
 800c4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ee:	e1d4      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a4f      	ldr	r2, [pc, #316]	@ (800c634 <UART_SetConfig+0x340>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d130      	bne.n	800c55c <UART_SetConfig+0x268>
 800c4fa:	4b4c      	ldr	r3, [pc, #304]	@ (800c62c <UART_SetConfig+0x338>)
 800c4fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4fe:	f003 0307 	and.w	r3, r3, #7
 800c502:	2b05      	cmp	r3, #5
 800c504:	d826      	bhi.n	800c554 <UART_SetConfig+0x260>
 800c506:	a201      	add	r2, pc, #4	@ (adr r2, 800c50c <UART_SetConfig+0x218>)
 800c508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c50c:	0800c525 	.word	0x0800c525
 800c510:	0800c52d 	.word	0x0800c52d
 800c514:	0800c535 	.word	0x0800c535
 800c518:	0800c53d 	.word	0x0800c53d
 800c51c:	0800c545 	.word	0x0800c545
 800c520:	0800c54d 	.word	0x0800c54d
 800c524:	2300      	movs	r3, #0
 800c526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c52a:	e1b6      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c52c:	2304      	movs	r3, #4
 800c52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c532:	e1b2      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c534:	2308      	movs	r3, #8
 800c536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c53a:	e1ae      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c53c:	2310      	movs	r3, #16
 800c53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c542:	e1aa      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c544:	2320      	movs	r3, #32
 800c546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c54a:	e1a6      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c54c:	2340      	movs	r3, #64	@ 0x40
 800c54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c552:	e1a2      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c554:	2380      	movs	r3, #128	@ 0x80
 800c556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c55a:	e19e      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a35      	ldr	r2, [pc, #212]	@ (800c638 <UART_SetConfig+0x344>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d130      	bne.n	800c5c8 <UART_SetConfig+0x2d4>
 800c566:	4b31      	ldr	r3, [pc, #196]	@ (800c62c <UART_SetConfig+0x338>)
 800c568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c56a:	f003 0307 	and.w	r3, r3, #7
 800c56e:	2b05      	cmp	r3, #5
 800c570:	d826      	bhi.n	800c5c0 <UART_SetConfig+0x2cc>
 800c572:	a201      	add	r2, pc, #4	@ (adr r2, 800c578 <UART_SetConfig+0x284>)
 800c574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c578:	0800c591 	.word	0x0800c591
 800c57c:	0800c599 	.word	0x0800c599
 800c580:	0800c5a1 	.word	0x0800c5a1
 800c584:	0800c5a9 	.word	0x0800c5a9
 800c588:	0800c5b1 	.word	0x0800c5b1
 800c58c:	0800c5b9 	.word	0x0800c5b9
 800c590:	2300      	movs	r3, #0
 800c592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c596:	e180      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c598:	2304      	movs	r3, #4
 800c59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c59e:	e17c      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c5a0:	2308      	movs	r3, #8
 800c5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5a6:	e178      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c5a8:	2310      	movs	r3, #16
 800c5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ae:	e174      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c5b0:	2320      	movs	r3, #32
 800c5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5b6:	e170      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c5b8:	2340      	movs	r3, #64	@ 0x40
 800c5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5be:	e16c      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c5c0:	2380      	movs	r3, #128	@ 0x80
 800c5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5c6:	e168      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4a1b      	ldr	r2, [pc, #108]	@ (800c63c <UART_SetConfig+0x348>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d142      	bne.n	800c658 <UART_SetConfig+0x364>
 800c5d2:	4b16      	ldr	r3, [pc, #88]	@ (800c62c <UART_SetConfig+0x338>)
 800c5d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5d6:	f003 0307 	and.w	r3, r3, #7
 800c5da:	2b05      	cmp	r3, #5
 800c5dc:	d838      	bhi.n	800c650 <UART_SetConfig+0x35c>
 800c5de:	a201      	add	r2, pc, #4	@ (adr r2, 800c5e4 <UART_SetConfig+0x2f0>)
 800c5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e4:	0800c5fd 	.word	0x0800c5fd
 800c5e8:	0800c605 	.word	0x0800c605
 800c5ec:	0800c60d 	.word	0x0800c60d
 800c5f0:	0800c615 	.word	0x0800c615
 800c5f4:	0800c641 	.word	0x0800c641
 800c5f8:	0800c649 	.word	0x0800c649
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c602:	e14a      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c604:	2304      	movs	r3, #4
 800c606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c60a:	e146      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c60c:	2308      	movs	r3, #8
 800c60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c612:	e142      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c614:	2310      	movs	r3, #16
 800c616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c61a:	e13e      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c61c:	cfff69f3 	.word	0xcfff69f3
 800c620:	58000c00 	.word	0x58000c00
 800c624:	11fff4ff 	.word	0x11fff4ff
 800c628:	40011000 	.word	0x40011000
 800c62c:	58024400 	.word	0x58024400
 800c630:	40004400 	.word	0x40004400
 800c634:	40004800 	.word	0x40004800
 800c638:	40004c00 	.word	0x40004c00
 800c63c:	40005000 	.word	0x40005000
 800c640:	2320      	movs	r3, #32
 800c642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c646:	e128      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c648:	2340      	movs	r3, #64	@ 0x40
 800c64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c64e:	e124      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c650:	2380      	movs	r3, #128	@ 0x80
 800c652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c656:	e120      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4acb      	ldr	r2, [pc, #812]	@ (800c98c <UART_SetConfig+0x698>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d176      	bne.n	800c750 <UART_SetConfig+0x45c>
 800c662:	4bcb      	ldr	r3, [pc, #812]	@ (800c990 <UART_SetConfig+0x69c>)
 800c664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c666:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c66a:	2b28      	cmp	r3, #40	@ 0x28
 800c66c:	d86c      	bhi.n	800c748 <UART_SetConfig+0x454>
 800c66e:	a201      	add	r2, pc, #4	@ (adr r2, 800c674 <UART_SetConfig+0x380>)
 800c670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c674:	0800c719 	.word	0x0800c719
 800c678:	0800c749 	.word	0x0800c749
 800c67c:	0800c749 	.word	0x0800c749
 800c680:	0800c749 	.word	0x0800c749
 800c684:	0800c749 	.word	0x0800c749
 800c688:	0800c749 	.word	0x0800c749
 800c68c:	0800c749 	.word	0x0800c749
 800c690:	0800c749 	.word	0x0800c749
 800c694:	0800c721 	.word	0x0800c721
 800c698:	0800c749 	.word	0x0800c749
 800c69c:	0800c749 	.word	0x0800c749
 800c6a0:	0800c749 	.word	0x0800c749
 800c6a4:	0800c749 	.word	0x0800c749
 800c6a8:	0800c749 	.word	0x0800c749
 800c6ac:	0800c749 	.word	0x0800c749
 800c6b0:	0800c749 	.word	0x0800c749
 800c6b4:	0800c729 	.word	0x0800c729
 800c6b8:	0800c749 	.word	0x0800c749
 800c6bc:	0800c749 	.word	0x0800c749
 800c6c0:	0800c749 	.word	0x0800c749
 800c6c4:	0800c749 	.word	0x0800c749
 800c6c8:	0800c749 	.word	0x0800c749
 800c6cc:	0800c749 	.word	0x0800c749
 800c6d0:	0800c749 	.word	0x0800c749
 800c6d4:	0800c731 	.word	0x0800c731
 800c6d8:	0800c749 	.word	0x0800c749
 800c6dc:	0800c749 	.word	0x0800c749
 800c6e0:	0800c749 	.word	0x0800c749
 800c6e4:	0800c749 	.word	0x0800c749
 800c6e8:	0800c749 	.word	0x0800c749
 800c6ec:	0800c749 	.word	0x0800c749
 800c6f0:	0800c749 	.word	0x0800c749
 800c6f4:	0800c739 	.word	0x0800c739
 800c6f8:	0800c749 	.word	0x0800c749
 800c6fc:	0800c749 	.word	0x0800c749
 800c700:	0800c749 	.word	0x0800c749
 800c704:	0800c749 	.word	0x0800c749
 800c708:	0800c749 	.word	0x0800c749
 800c70c:	0800c749 	.word	0x0800c749
 800c710:	0800c749 	.word	0x0800c749
 800c714:	0800c741 	.word	0x0800c741
 800c718:	2301      	movs	r3, #1
 800c71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c71e:	e0bc      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c720:	2304      	movs	r3, #4
 800c722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c726:	e0b8      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c728:	2308      	movs	r3, #8
 800c72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c72e:	e0b4      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c730:	2310      	movs	r3, #16
 800c732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c736:	e0b0      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c738:	2320      	movs	r3, #32
 800c73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c73e:	e0ac      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c740:	2340      	movs	r3, #64	@ 0x40
 800c742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c746:	e0a8      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c748:	2380      	movs	r3, #128	@ 0x80
 800c74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c74e:	e0a4      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a8f      	ldr	r2, [pc, #572]	@ (800c994 <UART_SetConfig+0x6a0>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d130      	bne.n	800c7bc <UART_SetConfig+0x4c8>
 800c75a:	4b8d      	ldr	r3, [pc, #564]	@ (800c990 <UART_SetConfig+0x69c>)
 800c75c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c75e:	f003 0307 	and.w	r3, r3, #7
 800c762:	2b05      	cmp	r3, #5
 800c764:	d826      	bhi.n	800c7b4 <UART_SetConfig+0x4c0>
 800c766:	a201      	add	r2, pc, #4	@ (adr r2, 800c76c <UART_SetConfig+0x478>)
 800c768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c76c:	0800c785 	.word	0x0800c785
 800c770:	0800c78d 	.word	0x0800c78d
 800c774:	0800c795 	.word	0x0800c795
 800c778:	0800c79d 	.word	0x0800c79d
 800c77c:	0800c7a5 	.word	0x0800c7a5
 800c780:	0800c7ad 	.word	0x0800c7ad
 800c784:	2300      	movs	r3, #0
 800c786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c78a:	e086      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c78c:	2304      	movs	r3, #4
 800c78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c792:	e082      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c794:	2308      	movs	r3, #8
 800c796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c79a:	e07e      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c79c:	2310      	movs	r3, #16
 800c79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7a2:	e07a      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c7a4:	2320      	movs	r3, #32
 800c7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7aa:	e076      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c7ac:	2340      	movs	r3, #64	@ 0x40
 800c7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7b2:	e072      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c7b4:	2380      	movs	r3, #128	@ 0x80
 800c7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7ba:	e06e      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a75      	ldr	r2, [pc, #468]	@ (800c998 <UART_SetConfig+0x6a4>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d130      	bne.n	800c828 <UART_SetConfig+0x534>
 800c7c6:	4b72      	ldr	r3, [pc, #456]	@ (800c990 <UART_SetConfig+0x69c>)
 800c7c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7ca:	f003 0307 	and.w	r3, r3, #7
 800c7ce:	2b05      	cmp	r3, #5
 800c7d0:	d826      	bhi.n	800c820 <UART_SetConfig+0x52c>
 800c7d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c7d8 <UART_SetConfig+0x4e4>)
 800c7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d8:	0800c7f1 	.word	0x0800c7f1
 800c7dc:	0800c7f9 	.word	0x0800c7f9
 800c7e0:	0800c801 	.word	0x0800c801
 800c7e4:	0800c809 	.word	0x0800c809
 800c7e8:	0800c811 	.word	0x0800c811
 800c7ec:	0800c819 	.word	0x0800c819
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7f6:	e050      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c7f8:	2304      	movs	r3, #4
 800c7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7fe:	e04c      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c800:	2308      	movs	r3, #8
 800c802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c806:	e048      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c808:	2310      	movs	r3, #16
 800c80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c80e:	e044      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c810:	2320      	movs	r3, #32
 800c812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c816:	e040      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c818:	2340      	movs	r3, #64	@ 0x40
 800c81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c81e:	e03c      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c820:	2380      	movs	r3, #128	@ 0x80
 800c822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c826:	e038      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a5b      	ldr	r2, [pc, #364]	@ (800c99c <UART_SetConfig+0x6a8>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d130      	bne.n	800c894 <UART_SetConfig+0x5a0>
 800c832:	4b57      	ldr	r3, [pc, #348]	@ (800c990 <UART_SetConfig+0x69c>)
 800c834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c836:	f003 0307 	and.w	r3, r3, #7
 800c83a:	2b05      	cmp	r3, #5
 800c83c:	d826      	bhi.n	800c88c <UART_SetConfig+0x598>
 800c83e:	a201      	add	r2, pc, #4	@ (adr r2, 800c844 <UART_SetConfig+0x550>)
 800c840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c844:	0800c85d 	.word	0x0800c85d
 800c848:	0800c865 	.word	0x0800c865
 800c84c:	0800c86d 	.word	0x0800c86d
 800c850:	0800c875 	.word	0x0800c875
 800c854:	0800c87d 	.word	0x0800c87d
 800c858:	0800c885 	.word	0x0800c885
 800c85c:	2302      	movs	r3, #2
 800c85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c862:	e01a      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c864:	2304      	movs	r3, #4
 800c866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c86a:	e016      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c86c:	2308      	movs	r3, #8
 800c86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c872:	e012      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c874:	2310      	movs	r3, #16
 800c876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c87a:	e00e      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c87c:	2320      	movs	r3, #32
 800c87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c882:	e00a      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c884:	2340      	movs	r3, #64	@ 0x40
 800c886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c88a:	e006      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c88c:	2380      	movs	r3, #128	@ 0x80
 800c88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c892:	e002      	b.n	800c89a <UART_SetConfig+0x5a6>
 800c894:	2380      	movs	r3, #128	@ 0x80
 800c896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4a3f      	ldr	r2, [pc, #252]	@ (800c99c <UART_SetConfig+0x6a8>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	f040 80f8 	bne.w	800ca96 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c8a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c8aa:	2b20      	cmp	r3, #32
 800c8ac:	dc46      	bgt.n	800c93c <UART_SetConfig+0x648>
 800c8ae:	2b02      	cmp	r3, #2
 800c8b0:	f2c0 8082 	blt.w	800c9b8 <UART_SetConfig+0x6c4>
 800c8b4:	3b02      	subs	r3, #2
 800c8b6:	2b1e      	cmp	r3, #30
 800c8b8:	d87e      	bhi.n	800c9b8 <UART_SetConfig+0x6c4>
 800c8ba:	a201      	add	r2, pc, #4	@ (adr r2, 800c8c0 <UART_SetConfig+0x5cc>)
 800c8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c0:	0800c943 	.word	0x0800c943
 800c8c4:	0800c9b9 	.word	0x0800c9b9
 800c8c8:	0800c94b 	.word	0x0800c94b
 800c8cc:	0800c9b9 	.word	0x0800c9b9
 800c8d0:	0800c9b9 	.word	0x0800c9b9
 800c8d4:	0800c9b9 	.word	0x0800c9b9
 800c8d8:	0800c95b 	.word	0x0800c95b
 800c8dc:	0800c9b9 	.word	0x0800c9b9
 800c8e0:	0800c9b9 	.word	0x0800c9b9
 800c8e4:	0800c9b9 	.word	0x0800c9b9
 800c8e8:	0800c9b9 	.word	0x0800c9b9
 800c8ec:	0800c9b9 	.word	0x0800c9b9
 800c8f0:	0800c9b9 	.word	0x0800c9b9
 800c8f4:	0800c9b9 	.word	0x0800c9b9
 800c8f8:	0800c96b 	.word	0x0800c96b
 800c8fc:	0800c9b9 	.word	0x0800c9b9
 800c900:	0800c9b9 	.word	0x0800c9b9
 800c904:	0800c9b9 	.word	0x0800c9b9
 800c908:	0800c9b9 	.word	0x0800c9b9
 800c90c:	0800c9b9 	.word	0x0800c9b9
 800c910:	0800c9b9 	.word	0x0800c9b9
 800c914:	0800c9b9 	.word	0x0800c9b9
 800c918:	0800c9b9 	.word	0x0800c9b9
 800c91c:	0800c9b9 	.word	0x0800c9b9
 800c920:	0800c9b9 	.word	0x0800c9b9
 800c924:	0800c9b9 	.word	0x0800c9b9
 800c928:	0800c9b9 	.word	0x0800c9b9
 800c92c:	0800c9b9 	.word	0x0800c9b9
 800c930:	0800c9b9 	.word	0x0800c9b9
 800c934:	0800c9b9 	.word	0x0800c9b9
 800c938:	0800c9ab 	.word	0x0800c9ab
 800c93c:	2b40      	cmp	r3, #64	@ 0x40
 800c93e:	d037      	beq.n	800c9b0 <UART_SetConfig+0x6bc>
 800c940:	e03a      	b.n	800c9b8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c942:	f7fb fc05 	bl	8008150 <HAL_RCCEx_GetD3PCLK1Freq>
 800c946:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c948:	e03c      	b.n	800c9c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c94a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c94e:	4618      	mov	r0, r3
 800c950:	f7fb fc14 	bl	800817c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c958:	e034      	b.n	800c9c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c95a:	f107 0318 	add.w	r3, r7, #24
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fb fd60 	bl	8008424 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c968:	e02c      	b.n	800c9c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c96a:	4b09      	ldr	r3, [pc, #36]	@ (800c990 <UART_SetConfig+0x69c>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f003 0320 	and.w	r3, r3, #32
 800c972:	2b00      	cmp	r3, #0
 800c974:	d016      	beq.n	800c9a4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c976:	4b06      	ldr	r3, [pc, #24]	@ (800c990 <UART_SetConfig+0x69c>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	08db      	lsrs	r3, r3, #3
 800c97c:	f003 0303 	and.w	r3, r3, #3
 800c980:	4a07      	ldr	r2, [pc, #28]	@ (800c9a0 <UART_SetConfig+0x6ac>)
 800c982:	fa22 f303 	lsr.w	r3, r2, r3
 800c986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c988:	e01c      	b.n	800c9c4 <UART_SetConfig+0x6d0>
 800c98a:	bf00      	nop
 800c98c:	40011400 	.word	0x40011400
 800c990:	58024400 	.word	0x58024400
 800c994:	40007800 	.word	0x40007800
 800c998:	40007c00 	.word	0x40007c00
 800c99c:	58000c00 	.word	0x58000c00
 800c9a0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c9a4:	4b9d      	ldr	r3, [pc, #628]	@ (800cc1c <UART_SetConfig+0x928>)
 800c9a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9a8:	e00c      	b.n	800c9c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9aa:	4b9d      	ldr	r3, [pc, #628]	@ (800cc20 <UART_SetConfig+0x92c>)
 800c9ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9ae:	e009      	b.n	800c9c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c9b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9b6:	e005      	b.n	800c9c4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c9c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c9c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	f000 81de 	beq.w	800cd88 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9d0:	4a94      	ldr	r2, [pc, #592]	@ (800cc24 <UART_SetConfig+0x930>)
 800c9d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9da:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9de:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	685a      	ldr	r2, [r3, #4]
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	005b      	lsls	r3, r3, #1
 800c9e8:	4413      	add	r3, r2
 800c9ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d305      	bcc.n	800c9fc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d903      	bls.n	800ca04 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ca02:	e1c1      	b.n	800cd88 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca06:	2200      	movs	r2, #0
 800ca08:	60bb      	str	r3, [r7, #8]
 800ca0a:	60fa      	str	r2, [r7, #12]
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca10:	4a84      	ldr	r2, [pc, #528]	@ (800cc24 <UART_SetConfig+0x930>)
 800ca12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	2200      	movs	r2, #0
 800ca1a:	603b      	str	r3, [r7, #0]
 800ca1c:	607a      	str	r2, [r7, #4]
 800ca1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca26:	f7f3 fcb3 	bl	8000390 <__aeabi_uldivmod>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	4610      	mov	r0, r2
 800ca30:	4619      	mov	r1, r3
 800ca32:	f04f 0200 	mov.w	r2, #0
 800ca36:	f04f 0300 	mov.w	r3, #0
 800ca3a:	020b      	lsls	r3, r1, #8
 800ca3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca40:	0202      	lsls	r2, r0, #8
 800ca42:	6979      	ldr	r1, [r7, #20]
 800ca44:	6849      	ldr	r1, [r1, #4]
 800ca46:	0849      	lsrs	r1, r1, #1
 800ca48:	2000      	movs	r0, #0
 800ca4a:	460c      	mov	r4, r1
 800ca4c:	4605      	mov	r5, r0
 800ca4e:	eb12 0804 	adds.w	r8, r2, r4
 800ca52:	eb43 0905 	adc.w	r9, r3, r5
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	685b      	ldr	r3, [r3, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	469a      	mov	sl, r3
 800ca5e:	4693      	mov	fp, r2
 800ca60:	4652      	mov	r2, sl
 800ca62:	465b      	mov	r3, fp
 800ca64:	4640      	mov	r0, r8
 800ca66:	4649      	mov	r1, r9
 800ca68:	f7f3 fc92 	bl	8000390 <__aeabi_uldivmod>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	460b      	mov	r3, r1
 800ca70:	4613      	mov	r3, r2
 800ca72:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca7a:	d308      	bcc.n	800ca8e <UART_SetConfig+0x79a>
 800ca7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ca82:	d204      	bcs.n	800ca8e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca8a:	60da      	str	r2, [r3, #12]
 800ca8c:	e17c      	b.n	800cd88 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ca94:	e178      	b.n	800cd88 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	69db      	ldr	r3, [r3, #28]
 800ca9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ca9e:	f040 80c5 	bne.w	800cc2c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800caa2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800caa6:	2b20      	cmp	r3, #32
 800caa8:	dc48      	bgt.n	800cb3c <UART_SetConfig+0x848>
 800caaa:	2b00      	cmp	r3, #0
 800caac:	db7b      	blt.n	800cba6 <UART_SetConfig+0x8b2>
 800caae:	2b20      	cmp	r3, #32
 800cab0:	d879      	bhi.n	800cba6 <UART_SetConfig+0x8b2>
 800cab2:	a201      	add	r2, pc, #4	@ (adr r2, 800cab8 <UART_SetConfig+0x7c4>)
 800cab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cab8:	0800cb43 	.word	0x0800cb43
 800cabc:	0800cb4b 	.word	0x0800cb4b
 800cac0:	0800cba7 	.word	0x0800cba7
 800cac4:	0800cba7 	.word	0x0800cba7
 800cac8:	0800cb53 	.word	0x0800cb53
 800cacc:	0800cba7 	.word	0x0800cba7
 800cad0:	0800cba7 	.word	0x0800cba7
 800cad4:	0800cba7 	.word	0x0800cba7
 800cad8:	0800cb63 	.word	0x0800cb63
 800cadc:	0800cba7 	.word	0x0800cba7
 800cae0:	0800cba7 	.word	0x0800cba7
 800cae4:	0800cba7 	.word	0x0800cba7
 800cae8:	0800cba7 	.word	0x0800cba7
 800caec:	0800cba7 	.word	0x0800cba7
 800caf0:	0800cba7 	.word	0x0800cba7
 800caf4:	0800cba7 	.word	0x0800cba7
 800caf8:	0800cb73 	.word	0x0800cb73
 800cafc:	0800cba7 	.word	0x0800cba7
 800cb00:	0800cba7 	.word	0x0800cba7
 800cb04:	0800cba7 	.word	0x0800cba7
 800cb08:	0800cba7 	.word	0x0800cba7
 800cb0c:	0800cba7 	.word	0x0800cba7
 800cb10:	0800cba7 	.word	0x0800cba7
 800cb14:	0800cba7 	.word	0x0800cba7
 800cb18:	0800cba7 	.word	0x0800cba7
 800cb1c:	0800cba7 	.word	0x0800cba7
 800cb20:	0800cba7 	.word	0x0800cba7
 800cb24:	0800cba7 	.word	0x0800cba7
 800cb28:	0800cba7 	.word	0x0800cba7
 800cb2c:	0800cba7 	.word	0x0800cba7
 800cb30:	0800cba7 	.word	0x0800cba7
 800cb34:	0800cba7 	.word	0x0800cba7
 800cb38:	0800cb99 	.word	0x0800cb99
 800cb3c:	2b40      	cmp	r3, #64	@ 0x40
 800cb3e:	d02e      	beq.n	800cb9e <UART_SetConfig+0x8aa>
 800cb40:	e031      	b.n	800cba6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb42:	f7f9 fb0d 	bl	8006160 <HAL_RCC_GetPCLK1Freq>
 800cb46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cb48:	e033      	b.n	800cbb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb4a:	f7f9 fb1f 	bl	800618c <HAL_RCC_GetPCLK2Freq>
 800cb4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cb50:	e02f      	b.n	800cbb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7fb fb10 	bl	800817c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb60:	e027      	b.n	800cbb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb62:	f107 0318 	add.w	r3, r7, #24
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7fb fc5c 	bl	8008424 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb70:	e01f      	b.n	800cbb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb72:	4b2d      	ldr	r3, [pc, #180]	@ (800cc28 <UART_SetConfig+0x934>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f003 0320 	and.w	r3, r3, #32
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d009      	beq.n	800cb92 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb7e:	4b2a      	ldr	r3, [pc, #168]	@ (800cc28 <UART_SetConfig+0x934>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	08db      	lsrs	r3, r3, #3
 800cb84:	f003 0303 	and.w	r3, r3, #3
 800cb88:	4a24      	ldr	r2, [pc, #144]	@ (800cc1c <UART_SetConfig+0x928>)
 800cb8a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb90:	e00f      	b.n	800cbb2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cb92:	4b22      	ldr	r3, [pc, #136]	@ (800cc1c <UART_SetConfig+0x928>)
 800cb94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb96:	e00c      	b.n	800cbb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb98:	4b21      	ldr	r3, [pc, #132]	@ (800cc20 <UART_SetConfig+0x92c>)
 800cb9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb9c:	e009      	b.n	800cbb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cba4:	e005      	b.n	800cbb2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cba6:	2300      	movs	r3, #0
 800cba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cbb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cbb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	f000 80e7 	beq.w	800cd88 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbbe:	4a19      	ldr	r2, [pc, #100]	@ (800cc24 <UART_SetConfig+0x930>)
 800cbc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbc8:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbcc:	005a      	lsls	r2, r3, #1
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	085b      	lsrs	r3, r3, #1
 800cbd4:	441a      	add	r2, r3
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbde:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe2:	2b0f      	cmp	r3, #15
 800cbe4:	d916      	bls.n	800cc14 <UART_SetConfig+0x920>
 800cbe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbec:	d212      	bcs.n	800cc14 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cbee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	f023 030f 	bic.w	r3, r3, #15
 800cbf6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cbf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbfa:	085b      	lsrs	r3, r3, #1
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	f003 0307 	and.w	r3, r3, #7
 800cc02:	b29a      	uxth	r2, r3
 800cc04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cc06:	4313      	orrs	r3, r2
 800cc08:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800cc10:	60da      	str	r2, [r3, #12]
 800cc12:	e0b9      	b.n	800cd88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cc14:	2301      	movs	r3, #1
 800cc16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cc1a:	e0b5      	b.n	800cd88 <UART_SetConfig+0xa94>
 800cc1c:	03d09000 	.word	0x03d09000
 800cc20:	003d0900 	.word	0x003d0900
 800cc24:	08018a88 	.word	0x08018a88
 800cc28:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800cc2c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cc30:	2b20      	cmp	r3, #32
 800cc32:	dc49      	bgt.n	800ccc8 <UART_SetConfig+0x9d4>
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	db7c      	blt.n	800cd32 <UART_SetConfig+0xa3e>
 800cc38:	2b20      	cmp	r3, #32
 800cc3a:	d87a      	bhi.n	800cd32 <UART_SetConfig+0xa3e>
 800cc3c:	a201      	add	r2, pc, #4	@ (adr r2, 800cc44 <UART_SetConfig+0x950>)
 800cc3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc42:	bf00      	nop
 800cc44:	0800cccf 	.word	0x0800cccf
 800cc48:	0800ccd7 	.word	0x0800ccd7
 800cc4c:	0800cd33 	.word	0x0800cd33
 800cc50:	0800cd33 	.word	0x0800cd33
 800cc54:	0800ccdf 	.word	0x0800ccdf
 800cc58:	0800cd33 	.word	0x0800cd33
 800cc5c:	0800cd33 	.word	0x0800cd33
 800cc60:	0800cd33 	.word	0x0800cd33
 800cc64:	0800ccef 	.word	0x0800ccef
 800cc68:	0800cd33 	.word	0x0800cd33
 800cc6c:	0800cd33 	.word	0x0800cd33
 800cc70:	0800cd33 	.word	0x0800cd33
 800cc74:	0800cd33 	.word	0x0800cd33
 800cc78:	0800cd33 	.word	0x0800cd33
 800cc7c:	0800cd33 	.word	0x0800cd33
 800cc80:	0800cd33 	.word	0x0800cd33
 800cc84:	0800ccff 	.word	0x0800ccff
 800cc88:	0800cd33 	.word	0x0800cd33
 800cc8c:	0800cd33 	.word	0x0800cd33
 800cc90:	0800cd33 	.word	0x0800cd33
 800cc94:	0800cd33 	.word	0x0800cd33
 800cc98:	0800cd33 	.word	0x0800cd33
 800cc9c:	0800cd33 	.word	0x0800cd33
 800cca0:	0800cd33 	.word	0x0800cd33
 800cca4:	0800cd33 	.word	0x0800cd33
 800cca8:	0800cd33 	.word	0x0800cd33
 800ccac:	0800cd33 	.word	0x0800cd33
 800ccb0:	0800cd33 	.word	0x0800cd33
 800ccb4:	0800cd33 	.word	0x0800cd33
 800ccb8:	0800cd33 	.word	0x0800cd33
 800ccbc:	0800cd33 	.word	0x0800cd33
 800ccc0:	0800cd33 	.word	0x0800cd33
 800ccc4:	0800cd25 	.word	0x0800cd25
 800ccc8:	2b40      	cmp	r3, #64	@ 0x40
 800ccca:	d02e      	beq.n	800cd2a <UART_SetConfig+0xa36>
 800cccc:	e031      	b.n	800cd32 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ccce:	f7f9 fa47 	bl	8006160 <HAL_RCC_GetPCLK1Freq>
 800ccd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ccd4:	e033      	b.n	800cd3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ccd6:	f7f9 fa59 	bl	800618c <HAL_RCC_GetPCLK2Freq>
 800ccda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ccdc:	e02f      	b.n	800cd3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7fb fa4a 	bl	800817c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccec:	e027      	b.n	800cd3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccee:	f107 0318 	add.w	r3, r7, #24
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7fb fb96 	bl	8008424 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccfc:	e01f      	b.n	800cd3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccfe:	4b2d      	ldr	r3, [pc, #180]	@ (800cdb4 <UART_SetConfig+0xac0>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f003 0320 	and.w	r3, r3, #32
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d009      	beq.n	800cd1e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd0a:	4b2a      	ldr	r3, [pc, #168]	@ (800cdb4 <UART_SetConfig+0xac0>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	08db      	lsrs	r3, r3, #3
 800cd10:	f003 0303 	and.w	r3, r3, #3
 800cd14:	4a28      	ldr	r2, [pc, #160]	@ (800cdb8 <UART_SetConfig+0xac4>)
 800cd16:	fa22 f303 	lsr.w	r3, r2, r3
 800cd1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd1c:	e00f      	b.n	800cd3e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800cd1e:	4b26      	ldr	r3, [pc, #152]	@ (800cdb8 <UART_SetConfig+0xac4>)
 800cd20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd22:	e00c      	b.n	800cd3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd24:	4b25      	ldr	r3, [pc, #148]	@ (800cdbc <UART_SetConfig+0xac8>)
 800cd26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd28:	e009      	b.n	800cd3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd30:	e005      	b.n	800cd3e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cd32:	2300      	movs	r3, #0
 800cd34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cd36:	2301      	movs	r3, #1
 800cd38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cd3c:	bf00      	nop
    }

    if (pclk != 0U)
 800cd3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d021      	beq.n	800cd88 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd48:	4a1d      	ldr	r2, [pc, #116]	@ (800cdc0 <UART_SetConfig+0xacc>)
 800cd4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd4e:	461a      	mov	r2, r3
 800cd50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd52:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	085b      	lsrs	r3, r3, #1
 800cd5c:	441a      	add	r2, r3
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd66:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd6a:	2b0f      	cmp	r3, #15
 800cd6c:	d909      	bls.n	800cd82 <UART_SetConfig+0xa8e>
 800cd6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd74:	d205      	bcs.n	800cd82 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cd76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd78:	b29a      	uxth	r2, r3
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	60da      	str	r2, [r3, #12]
 800cd80:	e002      	b.n	800cd88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cd82:	2301      	movs	r3, #1
 800cd84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	2201      	movs	r2, #1
 800cd94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	2200      	movs	r2, #0
 800cda2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cda4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3748      	adds	r7, #72	@ 0x48
 800cdac:	46bd      	mov	sp, r7
 800cdae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cdb2:	bf00      	nop
 800cdb4:	58024400 	.word	0x58024400
 800cdb8:	03d09000 	.word	0x03d09000
 800cdbc:	003d0900 	.word	0x003d0900
 800cdc0:	08018a88 	.word	0x08018a88

0800cdc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdd0:	f003 0301 	and.w	r3, r3, #1
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d00a      	beq.n	800cdee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	430a      	orrs	r2, r1
 800cdec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdf2:	f003 0302 	and.w	r3, r3, #2
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d00a      	beq.n	800ce10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	430a      	orrs	r2, r1
 800ce0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce14:	f003 0304 	and.w	r3, r3, #4
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d00a      	beq.n	800ce32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	430a      	orrs	r2, r1
 800ce30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce36:	f003 0308 	and.w	r3, r3, #8
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00a      	beq.n	800ce54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	430a      	orrs	r2, r1
 800ce52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce58:	f003 0310 	and.w	r3, r3, #16
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d00a      	beq.n	800ce76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	689b      	ldr	r3, [r3, #8]
 800ce66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	430a      	orrs	r2, r1
 800ce74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce7a:	f003 0320 	and.w	r3, r3, #32
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00a      	beq.n	800ce98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	689b      	ldr	r3, [r3, #8]
 800ce88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	430a      	orrs	r2, r1
 800ce96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d01a      	beq.n	800ceda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	430a      	orrs	r2, r1
 800ceb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cec2:	d10a      	bne.n	800ceda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	430a      	orrs	r2, r1
 800ced8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d00a      	beq.n	800cefc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	430a      	orrs	r2, r1
 800cefa:	605a      	str	r2, [r3, #4]
  }
}
 800cefc:	bf00      	nop
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b098      	sub	sp, #96	@ 0x60
 800cf0c:	af02      	add	r7, sp, #8
 800cf0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf18:	f7f7 f836 	bl	8003f88 <HAL_GetTick>
 800cf1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f003 0308 	and.w	r3, r3, #8
 800cf28:	2b08      	cmp	r3, #8
 800cf2a:	d12f      	bne.n	800cf8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cf30:	9300      	str	r3, [sp, #0]
 800cf32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf34:	2200      	movs	r2, #0
 800cf36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 f88e 	bl	800d05c <UART_WaitOnFlagUntilTimeout>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d022      	beq.n	800cf8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf4e:	e853 3f00 	ldrex	r3, [r3]
 800cf52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cf54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf5a:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	461a      	mov	r2, r3
 800cf62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf64:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cf6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf6c:	e841 2300 	strex	r3, r2, [r1]
 800cf70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cf72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d1e6      	bne.n	800cf46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2220      	movs	r2, #32
 800cf7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2200      	movs	r2, #0
 800cf84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf88:	2303      	movs	r3, #3
 800cf8a:	e063      	b.n	800d054 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f003 0304 	and.w	r3, r3, #4
 800cf96:	2b04      	cmp	r3, #4
 800cf98:	d149      	bne.n	800d02e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cf9e:	9300      	str	r3, [sp, #0]
 800cfa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f000 f857 	bl	800d05c <UART_WaitOnFlagUntilTimeout>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d03c      	beq.n	800d02e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfbc:	e853 3f00 	ldrex	r3, [r3]
 800cfc0:	623b      	str	r3, [r7, #32]
   return(result);
 800cfc2:	6a3b      	ldr	r3, [r7, #32]
 800cfc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cfc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfd2:	633b      	str	r3, [r7, #48]	@ 0x30
 800cfd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cfd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfda:	e841 2300 	strex	r3, r2, [r1]
 800cfde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cfe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d1e6      	bne.n	800cfb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	3308      	adds	r3, #8
 800cfec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	e853 3f00 	ldrex	r3, [r3]
 800cff4:	60fb      	str	r3, [r7, #12]
   return(result);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f023 0301 	bic.w	r3, r3, #1
 800cffc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	3308      	adds	r3, #8
 800d004:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d006:	61fa      	str	r2, [r7, #28]
 800d008:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d00a:	69b9      	ldr	r1, [r7, #24]
 800d00c:	69fa      	ldr	r2, [r7, #28]
 800d00e:	e841 2300 	strex	r3, r2, [r1]
 800d012:	617b      	str	r3, [r7, #20]
   return(result);
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d1e5      	bne.n	800cfe6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2220      	movs	r2, #32
 800d01e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2200      	movs	r2, #0
 800d026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d02a:	2303      	movs	r3, #3
 800d02c:	e012      	b.n	800d054 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2220      	movs	r2, #32
 800d032:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2220      	movs	r2, #32
 800d03a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2200      	movs	r2, #0
 800d042:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2200      	movs	r2, #0
 800d048:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d052:	2300      	movs	r3, #0
}
 800d054:	4618      	mov	r0, r3
 800d056:	3758      	adds	r7, #88	@ 0x58
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}

0800d05c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	60f8      	str	r0, [r7, #12]
 800d064:	60b9      	str	r1, [r7, #8]
 800d066:	603b      	str	r3, [r7, #0]
 800d068:	4613      	mov	r3, r2
 800d06a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d06c:	e049      	b.n	800d102 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d074:	d045      	beq.n	800d102 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d076:	f7f6 ff87 	bl	8003f88 <HAL_GetTick>
 800d07a:	4602      	mov	r2, r0
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	1ad3      	subs	r3, r2, r3
 800d080:	69ba      	ldr	r2, [r7, #24]
 800d082:	429a      	cmp	r2, r3
 800d084:	d302      	bcc.n	800d08c <UART_WaitOnFlagUntilTimeout+0x30>
 800d086:	69bb      	ldr	r3, [r7, #24]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d101      	bne.n	800d090 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d08c:	2303      	movs	r3, #3
 800d08e:	e048      	b.n	800d122 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f003 0304 	and.w	r3, r3, #4
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d031      	beq.n	800d102 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	69db      	ldr	r3, [r3, #28]
 800d0a4:	f003 0308 	and.w	r3, r3, #8
 800d0a8:	2b08      	cmp	r3, #8
 800d0aa:	d110      	bne.n	800d0ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2208      	movs	r2, #8
 800d0b2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	f000 f95b 	bl	800d370 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2208      	movs	r2, #8
 800d0be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e029      	b.n	800d122 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	69db      	ldr	r3, [r3, #28]
 800d0d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d0d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d0dc:	d111      	bne.n	800d102 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d0e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f000 f941 	bl	800d370 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2220      	movs	r2, #32
 800d0f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d0fe:	2303      	movs	r3, #3
 800d100:	e00f      	b.n	800d122 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	69da      	ldr	r2, [r3, #28]
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	4013      	ands	r3, r2
 800d10c:	68ba      	ldr	r2, [r7, #8]
 800d10e:	429a      	cmp	r2, r3
 800d110:	bf0c      	ite	eq
 800d112:	2301      	moveq	r3, #1
 800d114:	2300      	movne	r3, #0
 800d116:	b2db      	uxtb	r3, r3
 800d118:	461a      	mov	r2, r3
 800d11a:	79fb      	ldrb	r3, [r7, #7]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d0a6      	beq.n	800d06e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d120:	2300      	movs	r3, #0
}
 800d122:	4618      	mov	r0, r3
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
	...

0800d12c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b0a3      	sub	sp, #140	@ 0x8c
 800d130:	af00      	add	r7, sp, #0
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	60b9      	str	r1, [r7, #8]
 800d136:	4613      	mov	r3, r2
 800d138:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	68ba      	ldr	r2, [r7, #8]
 800d13e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	88fa      	ldrh	r2, [r7, #6]
 800d144:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	88fa      	ldrh	r2, [r7, #6]
 800d14c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2200      	movs	r2, #0
 800d154:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	689b      	ldr	r3, [r3, #8]
 800d15a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d15e:	d10e      	bne.n	800d17e <UART_Start_Receive_IT+0x52>
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	691b      	ldr	r3, [r3, #16]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d105      	bne.n	800d174 <UART_Start_Receive_IT+0x48>
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800d16e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d172:	e02d      	b.n	800d1d0 <UART_Start_Receive_IT+0xa4>
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	22ff      	movs	r2, #255	@ 0xff
 800d178:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d17c:	e028      	b.n	800d1d0 <UART_Start_Receive_IT+0xa4>
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d10d      	bne.n	800d1a2 <UART_Start_Receive_IT+0x76>
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	691b      	ldr	r3, [r3, #16]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d104      	bne.n	800d198 <UART_Start_Receive_IT+0x6c>
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	22ff      	movs	r2, #255	@ 0xff
 800d192:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d196:	e01b      	b.n	800d1d0 <UART_Start_Receive_IT+0xa4>
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	227f      	movs	r2, #127	@ 0x7f
 800d19c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d1a0:	e016      	b.n	800d1d0 <UART_Start_Receive_IT+0xa4>
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	689b      	ldr	r3, [r3, #8]
 800d1a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1aa:	d10d      	bne.n	800d1c8 <UART_Start_Receive_IT+0x9c>
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	691b      	ldr	r3, [r3, #16]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d104      	bne.n	800d1be <UART_Start_Receive_IT+0x92>
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	227f      	movs	r2, #127	@ 0x7f
 800d1b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d1bc:	e008      	b.n	800d1d0 <UART_Start_Receive_IT+0xa4>
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	223f      	movs	r2, #63	@ 0x3f
 800d1c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d1c6:	e003      	b.n	800d1d0 <UART_Start_Receive_IT+0xa4>
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	2222      	movs	r2, #34	@ 0x22
 800d1dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	3308      	adds	r3, #8
 800d1e6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d1ea:	e853 3f00 	ldrex	r3, [r3]
 800d1ee:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d1f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d1f2:	f043 0301 	orr.w	r3, r3, #1
 800d1f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	3308      	adds	r3, #8
 800d200:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d204:	673a      	str	r2, [r7, #112]	@ 0x70
 800d206:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d208:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d20a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d20c:	e841 2300 	strex	r3, r2, [r1]
 800d210:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800d212:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d214:	2b00      	cmp	r3, #0
 800d216:	d1e3      	bne.n	800d1e0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d21c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d220:	d14f      	bne.n	800d2c2 <UART_Start_Receive_IT+0x196>
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d228:	88fa      	ldrh	r2, [r7, #6]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d349      	bcc.n	800d2c2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	689b      	ldr	r3, [r3, #8]
 800d232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d236:	d107      	bne.n	800d248 <UART_Start_Receive_IT+0x11c>
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	691b      	ldr	r3, [r3, #16]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d103      	bne.n	800d248 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	4a47      	ldr	r2, [pc, #284]	@ (800d360 <UART_Start_Receive_IT+0x234>)
 800d244:	675a      	str	r2, [r3, #116]	@ 0x74
 800d246:	e002      	b.n	800d24e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	4a46      	ldr	r2, [pc, #280]	@ (800d364 <UART_Start_Receive_IT+0x238>)
 800d24c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	691b      	ldr	r3, [r3, #16]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d01a      	beq.n	800d28c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d25c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d25e:	e853 3f00 	ldrex	r3, [r3]
 800d262:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d264:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d266:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d26a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	461a      	mov	r2, r3
 800d274:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d278:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d27a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d27c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d27e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d280:	e841 2300 	strex	r3, r2, [r1]
 800d284:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800d286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d1e4      	bne.n	800d256 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	3308      	adds	r3, #8
 800d292:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d296:	e853 3f00 	ldrex	r3, [r3]
 800d29a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d29e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d2a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	3308      	adds	r3, #8
 800d2aa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d2ac:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d2ae:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d2b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d2b4:	e841 2300 	strex	r3, r2, [r1]
 800d2b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d2ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1e5      	bne.n	800d28c <UART_Start_Receive_IT+0x160>
 800d2c0:	e046      	b.n	800d350 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	689b      	ldr	r3, [r3, #8]
 800d2c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d2ca:	d107      	bne.n	800d2dc <UART_Start_Receive_IT+0x1b0>
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	691b      	ldr	r3, [r3, #16]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d103      	bne.n	800d2dc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	4a24      	ldr	r2, [pc, #144]	@ (800d368 <UART_Start_Receive_IT+0x23c>)
 800d2d8:	675a      	str	r2, [r3, #116]	@ 0x74
 800d2da:	e002      	b.n	800d2e2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	4a23      	ldr	r2, [pc, #140]	@ (800d36c <UART_Start_Receive_IT+0x240>)
 800d2e0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	691b      	ldr	r3, [r3, #16]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d019      	beq.n	800d31e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2f2:	e853 3f00 	ldrex	r3, [r3]
 800d2f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2fa:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800d2fe:	677b      	str	r3, [r7, #116]	@ 0x74
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	461a      	mov	r2, r3
 800d306:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d308:	637b      	str	r3, [r7, #52]	@ 0x34
 800d30a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d30c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d30e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d310:	e841 2300 	strex	r3, r2, [r1]
 800d314:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d1e6      	bne.n	800d2ea <UART_Start_Receive_IT+0x1be>
 800d31c:	e018      	b.n	800d350 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	e853 3f00 	ldrex	r3, [r3]
 800d32a:	613b      	str	r3, [r7, #16]
   return(result);
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	f043 0320 	orr.w	r3, r3, #32
 800d332:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	461a      	mov	r2, r3
 800d33a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d33c:	623b      	str	r3, [r7, #32]
 800d33e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d340:	69f9      	ldr	r1, [r7, #28]
 800d342:	6a3a      	ldr	r2, [r7, #32]
 800d344:	e841 2300 	strex	r3, r2, [r1]
 800d348:	61bb      	str	r3, [r7, #24]
   return(result);
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d1e6      	bne.n	800d31e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d350:	2300      	movs	r3, #0
}
 800d352:	4618      	mov	r0, r3
 800d354:	378c      	adds	r7, #140	@ 0x8c
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr
 800d35e:	bf00      	nop
 800d360:	0800df1d 	.word	0x0800df1d
 800d364:	0800dbbd 	.word	0x0800dbbd
 800d368:	0800da05 	.word	0x0800da05
 800d36c:	0800d84d 	.word	0x0800d84d

0800d370 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d370:	b480      	push	{r7}
 800d372:	b095      	sub	sp, #84	@ 0x54
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d37e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d380:	e853 3f00 	ldrex	r3, [r3]
 800d384:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d388:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d38c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	461a      	mov	r2, r3
 800d394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d396:	643b      	str	r3, [r7, #64]	@ 0x40
 800d398:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d39a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d39c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d39e:	e841 2300 	strex	r3, r2, [r1]
 800d3a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d1e6      	bne.n	800d378 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	3308      	adds	r3, #8
 800d3b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3b2:	6a3b      	ldr	r3, [r7, #32]
 800d3b4:	e853 3f00 	ldrex	r3, [r3]
 800d3b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d3ba:	69fa      	ldr	r2, [r7, #28]
 800d3bc:	4b1e      	ldr	r3, [pc, #120]	@ (800d438 <UART_EndRxTransfer+0xc8>)
 800d3be:	4013      	ands	r3, r2
 800d3c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	3308      	adds	r3, #8
 800d3c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d3ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d3cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d3d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3d2:	e841 2300 	strex	r3, r2, [r1]
 800d3d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d1e5      	bne.n	800d3aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	d118      	bne.n	800d418 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	e853 3f00 	ldrex	r3, [r3]
 800d3f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	f023 0310 	bic.w	r3, r3, #16
 800d3fa:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	461a      	mov	r2, r3
 800d402:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d404:	61bb      	str	r3, [r7, #24]
 800d406:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d408:	6979      	ldr	r1, [r7, #20]
 800d40a:	69ba      	ldr	r2, [r7, #24]
 800d40c:	e841 2300 	strex	r3, r2, [r1]
 800d410:	613b      	str	r3, [r7, #16]
   return(result);
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d1e6      	bne.n	800d3e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2220      	movs	r2, #32
 800d41c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2200      	movs	r2, #0
 800d424:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2200      	movs	r2, #0
 800d42a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d42c:	bf00      	nop
 800d42e:	3754      	adds	r7, #84	@ 0x54
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr
 800d438:	effffffe 	.word	0xeffffffe

0800d43c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d448:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2200      	movs	r2, #0
 800d44e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2200      	movs	r2, #0
 800d456:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d45a:	68f8      	ldr	r0, [r7, #12]
 800d45c:	f7fe fe6c 	bl	800c138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d460:	bf00      	nop
 800d462:	3710      	adds	r7, #16
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d474:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2200      	movs	r2, #0
 800d47a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	220f      	movs	r2, #15
 800d484:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	699a      	ldr	r2, [r3, #24]
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f042 0208 	orr.w	r2, r2, #8
 800d494:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2220      	movs	r2, #32
 800d49a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800d4a4:	68f8      	ldr	r0, [r7, #12]
 800d4a6:	f7fe fe51 	bl	800c14c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4aa:	bf00      	nop
 800d4ac:	3710      	adds	r7, #16
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}

0800d4b2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d4b2:	b480      	push	{r7}
 800d4b4:	b08f      	sub	sp, #60	@ 0x3c
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d4c0:	2b21      	cmp	r3, #33	@ 0x21
 800d4c2:	d14c      	bne.n	800d55e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d132      	bne.n	800d536 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d6:	6a3b      	ldr	r3, [r7, #32]
 800d4d8:	e853 3f00 	ldrex	r3, [r3]
 800d4dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800d4de:	69fb      	ldr	r3, [r7, #28]
 800d4e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d4e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4f0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d4f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4f6:	e841 2300 	strex	r3, r2, [r1]
 800d4fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d1e6      	bne.n	800d4d0 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	e853 3f00 	ldrex	r3, [r3]
 800d50e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d516:	633b      	str	r3, [r7, #48]	@ 0x30
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	461a      	mov	r2, r3
 800d51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d520:	61bb      	str	r3, [r7, #24]
 800d522:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d524:	6979      	ldr	r1, [r7, #20]
 800d526:	69ba      	ldr	r2, [r7, #24]
 800d528:	e841 2300 	strex	r3, r2, [r1]
 800d52c:	613b      	str	r3, [r7, #16]
   return(result);
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d1e6      	bne.n	800d502 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d534:	e013      	b.n	800d55e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d53a:	781a      	ldrb	r2, [r3, #0]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d546:	1c5a      	adds	r2, r3, #1
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d552:	b29b      	uxth	r3, r3
 800d554:	3b01      	subs	r3, #1
 800d556:	b29a      	uxth	r2, r3
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800d55e:	bf00      	nop
 800d560:	373c      	adds	r7, #60	@ 0x3c
 800d562:	46bd      	mov	sp, r7
 800d564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d568:	4770      	bx	lr

0800d56a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d56a:	b480      	push	{r7}
 800d56c:	b091      	sub	sp, #68	@ 0x44
 800d56e:	af00      	add	r7, sp, #0
 800d570:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d578:	2b21      	cmp	r3, #33	@ 0x21
 800d57a:	d151      	bne.n	800d620 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d582:	b29b      	uxth	r3, r3
 800d584:	2b00      	cmp	r3, #0
 800d586:	d132      	bne.n	800d5ee <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d590:	e853 3f00 	ldrex	r3, [r3]
 800d594:	623b      	str	r3, [r7, #32]
   return(result);
 800d596:	6a3b      	ldr	r3, [r7, #32]
 800d598:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d59c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d5a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d5ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5ae:	e841 2300 	strex	r3, r2, [r1]
 800d5b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d1e6      	bne.n	800d588 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	e853 3f00 	ldrex	r3, [r3]
 800d5c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	461a      	mov	r2, r3
 800d5d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5d8:	61fb      	str	r3, [r7, #28]
 800d5da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5dc:	69b9      	ldr	r1, [r7, #24]
 800d5de:	69fa      	ldr	r2, [r7, #28]
 800d5e0:	e841 2300 	strex	r3, r2, [r1]
 800d5e4:	617b      	str	r3, [r7, #20]
   return(result);
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d1e6      	bne.n	800d5ba <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d5ec:	e018      	b.n	800d620 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d5f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5f6:	881b      	ldrh	r3, [r3, #0]
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d602:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d608:	1c9a      	adds	r2, r3, #2
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d614:	b29b      	uxth	r3, r3
 800d616:	3b01      	subs	r3, #1
 800d618:	b29a      	uxth	r2, r3
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800d620:	bf00      	nop
 800d622:	3744      	adds	r7, #68	@ 0x44
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr

0800d62c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b091      	sub	sp, #68	@ 0x44
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d63a:	2b21      	cmp	r3, #33	@ 0x21
 800d63c:	d160      	bne.n	800d700 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d644:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d646:	e057      	b.n	800d6f8 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d64e:	b29b      	uxth	r3, r3
 800d650:	2b00      	cmp	r3, #0
 800d652:	d133      	bne.n	800d6bc <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	3308      	adds	r3, #8
 800d65a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d65e:	e853 3f00 	ldrex	r3, [r3]
 800d662:	623b      	str	r3, [r7, #32]
   return(result);
 800d664:	6a3b      	ldr	r3, [r7, #32]
 800d666:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d66a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	3308      	adds	r3, #8
 800d672:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d674:	633a      	str	r2, [r7, #48]	@ 0x30
 800d676:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d678:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d67a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d67c:	e841 2300 	strex	r3, r2, [r1]
 800d680:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d684:	2b00      	cmp	r3, #0
 800d686:	d1e5      	bne.n	800d654 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	e853 3f00 	ldrex	r3, [r3]
 800d694:	60fb      	str	r3, [r7, #12]
   return(result);
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d69c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6a6:	61fb      	str	r3, [r7, #28]
 800d6a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6aa:	69b9      	ldr	r1, [r7, #24]
 800d6ac:	69fa      	ldr	r2, [r7, #28]
 800d6ae:	e841 2300 	strex	r3, r2, [r1]
 800d6b2:	617b      	str	r3, [r7, #20]
   return(result);
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d1e6      	bne.n	800d688 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800d6ba:	e021      	b.n	800d700 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	69db      	ldr	r3, [r3, #28]
 800d6c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d013      	beq.n	800d6f2 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6ce:	781a      	ldrb	r2, [r3, #0]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6da:	1c5a      	adds	r2, r3, #1
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	3b01      	subs	r3, #1
 800d6ea:	b29a      	uxth	r2, r3
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d6f2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d6f4:	3b01      	subs	r3, #1
 800d6f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d6f8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d1a4      	bne.n	800d648 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d6fe:	e7ff      	b.n	800d700 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800d700:	bf00      	nop
 800d702:	3744      	adds	r7, #68	@ 0x44
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr

0800d70c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b091      	sub	sp, #68	@ 0x44
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d71a:	2b21      	cmp	r3, #33	@ 0x21
 800d71c:	d165      	bne.n	800d7ea <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d724:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d726:	e05c      	b.n	800d7e2 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d72e:	b29b      	uxth	r3, r3
 800d730:	2b00      	cmp	r3, #0
 800d732:	d133      	bne.n	800d79c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	3308      	adds	r3, #8
 800d73a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d73c:	6a3b      	ldr	r3, [r7, #32]
 800d73e:	e853 3f00 	ldrex	r3, [r3]
 800d742:	61fb      	str	r3, [r7, #28]
   return(result);
 800d744:	69fb      	ldr	r3, [r7, #28]
 800d746:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d74a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	3308      	adds	r3, #8
 800d752:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d754:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d756:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d758:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d75a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d75c:	e841 2300 	strex	r3, r2, [r1]
 800d760:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d764:	2b00      	cmp	r3, #0
 800d766:	d1e5      	bne.n	800d734 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	e853 3f00 	ldrex	r3, [r3]
 800d774:	60bb      	str	r3, [r7, #8]
   return(result);
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d77c:	633b      	str	r3, [r7, #48]	@ 0x30
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	461a      	mov	r2, r3
 800d784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d786:	61bb      	str	r3, [r7, #24]
 800d788:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d78a:	6979      	ldr	r1, [r7, #20]
 800d78c:	69ba      	ldr	r2, [r7, #24]
 800d78e:	e841 2300 	strex	r3, r2, [r1]
 800d792:	613b      	str	r3, [r7, #16]
   return(result);
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d1e6      	bne.n	800d768 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800d79a:	e026      	b.n	800d7ea <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	69db      	ldr	r3, [r3, #28]
 800d7a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d018      	beq.n	800d7dc <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7ae:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7b2:	881b      	ldrh	r3, [r3, #0]
 800d7b4:	461a      	mov	r2, r3
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d7be:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7c4:	1c9a      	adds	r2, r3, #2
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	b29a      	uxth	r2, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d7dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d7de:	3b01      	subs	r3, #1
 800d7e0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d7e2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d19f      	bne.n	800d728 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d7e8:	e7ff      	b.n	800d7ea <UART_TxISR_16BIT_FIFOEN+0xde>
 800d7ea:	bf00      	nop
 800d7ec:	3744      	adds	r7, #68	@ 0x44
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr

0800d7f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d7f6:	b580      	push	{r7, lr}
 800d7f8:	b088      	sub	sp, #32
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	e853 3f00 	ldrex	r3, [r3]
 800d80a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d812:	61fb      	str	r3, [r7, #28]
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	461a      	mov	r2, r3
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	61bb      	str	r3, [r7, #24]
 800d81e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d820:	6979      	ldr	r1, [r7, #20]
 800d822:	69ba      	ldr	r2, [r7, #24]
 800d824:	e841 2300 	strex	r3, r2, [r1]
 800d828:	613b      	str	r3, [r7, #16]
   return(result);
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d1e6      	bne.n	800d7fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2220      	movs	r2, #32
 800d834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2200      	movs	r2, #0
 800d83c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f7f6 faaa 	bl	8003d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d844:	bf00      	nop
 800d846:	3720      	adds	r7, #32
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b09c      	sub	sp, #112	@ 0x70
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d85a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d864:	2b22      	cmp	r3, #34	@ 0x22
 800d866:	f040 80be 	bne.w	800d9e6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d870:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d874:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d878:	b2d9      	uxtb	r1, r3
 800d87a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d87e:	b2da      	uxtb	r2, r3
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d884:	400a      	ands	r2, r1
 800d886:	b2d2      	uxtb	r2, r2
 800d888:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d88e:	1c5a      	adds	r2, r3, #1
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	3b01      	subs	r3, #1
 800d89e:	b29a      	uxth	r2, r3
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	f040 80a1 	bne.w	800d9f6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8bc:	e853 3f00 	ldrex	r3, [r3]
 800d8c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d8c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d8c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d8d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d8d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d8d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d8da:	e841 2300 	strex	r3, r2, [r1]
 800d8de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d8e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d1e6      	bne.n	800d8b4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	3308      	adds	r3, #8
 800d8ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f0:	e853 3f00 	ldrex	r3, [r3]
 800d8f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d8f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8f8:	f023 0301 	bic.w	r3, r3, #1
 800d8fc:	667b      	str	r3, [r7, #100]	@ 0x64
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	3308      	adds	r3, #8
 800d904:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d906:	647a      	str	r2, [r7, #68]	@ 0x44
 800d908:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d90a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d90c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d90e:	e841 2300 	strex	r3, r2, [r1]
 800d912:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d916:	2b00      	cmp	r3, #0
 800d918:	d1e5      	bne.n	800d8e6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2220      	movs	r2, #32
 800d91e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2200      	movs	r2, #0
 800d926:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4a33      	ldr	r2, [pc, #204]	@ (800da00 <UART_RxISR_8BIT+0x1b4>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d01f      	beq.n	800d978 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	685b      	ldr	r3, [r3, #4]
 800d93e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d942:	2b00      	cmp	r3, #0
 800d944:	d018      	beq.n	800d978 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d94e:	e853 3f00 	ldrex	r3, [r3]
 800d952:	623b      	str	r3, [r7, #32]
   return(result);
 800d954:	6a3b      	ldr	r3, [r7, #32]
 800d956:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d95a:	663b      	str	r3, [r7, #96]	@ 0x60
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	461a      	mov	r2, r3
 800d962:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d964:	633b      	str	r3, [r7, #48]	@ 0x30
 800d966:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d968:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d96a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d96c:	e841 2300 	strex	r3, r2, [r1]
 800d970:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d974:	2b00      	cmp	r3, #0
 800d976:	d1e6      	bne.n	800d946 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d12e      	bne.n	800d9de <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	e853 3f00 	ldrex	r3, [r3]
 800d992:	60fb      	str	r3, [r7, #12]
   return(result);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f023 0310 	bic.w	r3, r3, #16
 800d99a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d9a4:	61fb      	str	r3, [r7, #28]
 800d9a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9a8:	69b9      	ldr	r1, [r7, #24]
 800d9aa:	69fa      	ldr	r2, [r7, #28]
 800d9ac:	e841 2300 	strex	r3, r2, [r1]
 800d9b0:	617b      	str	r3, [r7, #20]
   return(result);
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d1e6      	bne.n	800d986 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	69db      	ldr	r3, [r3, #28]
 800d9be:	f003 0310 	and.w	r3, r3, #16
 800d9c2:	2b10      	cmp	r3, #16
 800d9c4:	d103      	bne.n	800d9ce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2210      	movs	r2, #16
 800d9cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f7fe fbc2 	bl	800c160 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d9dc:	e00b      	b.n	800d9f6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f7f6 fa18 	bl	8003e14 <HAL_UART_RxCpltCallback>
}
 800d9e4:	e007      	b.n	800d9f6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	699a      	ldr	r2, [r3, #24]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f042 0208 	orr.w	r2, r2, #8
 800d9f4:	619a      	str	r2, [r3, #24]
}
 800d9f6:	bf00      	nop
 800d9f8:	3770      	adds	r7, #112	@ 0x70
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	58000c00 	.word	0x58000c00

0800da04 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b09c      	sub	sp, #112	@ 0x70
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800da12:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800da1c:	2b22      	cmp	r3, #34	@ 0x22
 800da1e:	f040 80be 	bne.w	800db9e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da28:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da30:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800da32:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800da36:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800da3a:	4013      	ands	r3, r2
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800da40:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da46:	1c9a      	adds	r2, r3, #2
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800da52:	b29b      	uxth	r3, r3
 800da54:	3b01      	subs	r3, #1
 800da56:	b29a      	uxth	r2, r3
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800da64:	b29b      	uxth	r3, r3
 800da66:	2b00      	cmp	r3, #0
 800da68:	f040 80a1 	bne.w	800dbae <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da74:	e853 3f00 	ldrex	r3, [r3]
 800da78:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800da7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da80:	667b      	str	r3, [r7, #100]	@ 0x64
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	461a      	mov	r2, r3
 800da88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da8a:	657b      	str	r3, [r7, #84]	@ 0x54
 800da8c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800da90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800da92:	e841 2300 	strex	r3, r2, [r1]
 800da96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800da98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d1e6      	bne.n	800da6c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	3308      	adds	r3, #8
 800daa4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800daa8:	e853 3f00 	ldrex	r3, [r3]
 800daac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800daae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dab0:	f023 0301 	bic.w	r3, r3, #1
 800dab4:	663b      	str	r3, [r7, #96]	@ 0x60
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	3308      	adds	r3, #8
 800dabc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dabe:	643a      	str	r2, [r7, #64]	@ 0x40
 800dac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dac2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dac4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dac6:	e841 2300 	strex	r3, r2, [r1]
 800daca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d1e5      	bne.n	800da9e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2220      	movs	r2, #32
 800dad6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4a33      	ldr	r2, [pc, #204]	@ (800dbb8 <UART_RxISR_16BIT+0x1b4>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d01f      	beq.n	800db30 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d018      	beq.n	800db30 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db04:	6a3b      	ldr	r3, [r7, #32]
 800db06:	e853 3f00 	ldrex	r3, [r3]
 800db0a:	61fb      	str	r3, [r7, #28]
   return(result);
 800db0c:	69fb      	ldr	r3, [r7, #28]
 800db0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800db12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	461a      	mov	r2, r3
 800db1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800db1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db1e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800db22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db24:	e841 2300 	strex	r3, r2, [r1]
 800db28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800db2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d1e6      	bne.n	800dafe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db34:	2b01      	cmp	r3, #1
 800db36:	d12e      	bne.n	800db96 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2200      	movs	r2, #0
 800db3c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	e853 3f00 	ldrex	r3, [r3]
 800db4a:	60bb      	str	r3, [r7, #8]
   return(result);
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	f023 0310 	bic.w	r3, r3, #16
 800db52:	65bb      	str	r3, [r7, #88]	@ 0x58
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	461a      	mov	r2, r3
 800db5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800db5c:	61bb      	str	r3, [r7, #24]
 800db5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db60:	6979      	ldr	r1, [r7, #20]
 800db62:	69ba      	ldr	r2, [r7, #24]
 800db64:	e841 2300 	strex	r3, r2, [r1]
 800db68:	613b      	str	r3, [r7, #16]
   return(result);
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d1e6      	bne.n	800db3e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	69db      	ldr	r3, [r3, #28]
 800db76:	f003 0310 	and.w	r3, r3, #16
 800db7a:	2b10      	cmp	r3, #16
 800db7c:	d103      	bne.n	800db86 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2210      	movs	r2, #16
 800db84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800db8c:	4619      	mov	r1, r3
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f7fe fae6 	bl	800c160 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800db94:	e00b      	b.n	800dbae <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f7f6 f93c 	bl	8003e14 <HAL_UART_RxCpltCallback>
}
 800db9c:	e007      	b.n	800dbae <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	699a      	ldr	r2, [r3, #24]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	f042 0208 	orr.w	r2, r2, #8
 800dbac:	619a      	str	r2, [r3, #24]
}
 800dbae:	bf00      	nop
 800dbb0:	3770      	adds	r7, #112	@ 0x70
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	58000c00 	.word	0x58000c00

0800dbbc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b0ac      	sub	sp, #176	@ 0xb0
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dbca:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	69db      	ldr	r3, [r3, #28]
 800dbd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	689b      	ldr	r3, [r3, #8]
 800dbe8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dbf2:	2b22      	cmp	r3, #34	@ 0x22
 800dbf4:	f040 8180 	bne.w	800def8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dbfe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dc02:	e123      	b.n	800de4c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc0a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dc0e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800dc12:	b2d9      	uxtb	r1, r3
 800dc14:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800dc18:	b2da      	uxtb	r2, r3
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc1e:	400a      	ands	r2, r1
 800dc20:	b2d2      	uxtb	r2, r2
 800dc22:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc28:	1c5a      	adds	r2, r3, #1
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dc34:	b29b      	uxth	r3, r3
 800dc36:	3b01      	subs	r3, #1
 800dc38:	b29a      	uxth	r2, r3
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	69db      	ldr	r3, [r3, #28]
 800dc46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dc4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc4e:	f003 0307 	and.w	r3, r3, #7
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d053      	beq.n	800dcfe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dc56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc5a:	f003 0301 	and.w	r3, r3, #1
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d011      	beq.n	800dc86 <UART_RxISR_8BIT_FIFOEN+0xca>
 800dc62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dc66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d00b      	beq.n	800dc86 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	2201      	movs	r2, #1
 800dc74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc7c:	f043 0201 	orr.w	r2, r3, #1
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc8a:	f003 0302 	and.w	r3, r3, #2
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d011      	beq.n	800dcb6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800dc92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dc96:	f003 0301 	and.w	r3, r3, #1
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d00b      	beq.n	800dcb6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	2202      	movs	r2, #2
 800dca4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dcac:	f043 0204 	orr.w	r2, r3, #4
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dcb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dcba:	f003 0304 	and.w	r3, r3, #4
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d011      	beq.n	800dce6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800dcc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dcc6:	f003 0301 	and.w	r3, r3, #1
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d00b      	beq.n	800dce6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	2204      	movs	r2, #4
 800dcd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dcdc:	f043 0202 	orr.w	r2, r3, #2
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d006      	beq.n	800dcfe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f7fe fa21 	bl	800c138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	f040 80a0 	bne.w	800de4c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dd14:	e853 3f00 	ldrex	r3, [r3]
 800dd18:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800dd1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	461a      	mov	r2, r3
 800dd2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dd2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dd30:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd32:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800dd34:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800dd36:	e841 2300 	strex	r3, r2, [r1]
 800dd3a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800dd3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d1e4      	bne.n	800dd0c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	3308      	adds	r3, #8
 800dd48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd4c:	e853 3f00 	ldrex	r3, [r3]
 800dd50:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800dd52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dd54:	4b6e      	ldr	r3, [pc, #440]	@ (800df10 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800dd56:	4013      	ands	r3, r2
 800dd58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	3308      	adds	r3, #8
 800dd62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800dd66:	66ba      	str	r2, [r7, #104]	@ 0x68
 800dd68:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd6a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800dd6c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800dd6e:	e841 2300 	strex	r3, r2, [r1]
 800dd72:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800dd74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d1e3      	bne.n	800dd42 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2220      	movs	r2, #32
 800dd7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2200      	movs	r2, #0
 800dd86:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4a60      	ldr	r2, [pc, #384]	@ (800df14 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d021      	beq.n	800dddc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d01a      	beq.n	800dddc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ddae:	e853 3f00 	ldrex	r3, [r3]
 800ddb2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ddb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ddba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ddc8:	657b      	str	r3, [r7, #84]	@ 0x54
 800ddca:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddcc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ddce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ddd0:	e841 2300 	strex	r3, r2, [r1]
 800ddd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ddd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d1e4      	bne.n	800dda6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	d130      	bne.n	800de46 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2200      	movs	r2, #0
 800dde8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddf2:	e853 3f00 	ldrex	r3, [r3]
 800ddf6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ddf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddfa:	f023 0310 	bic.w	r3, r3, #16
 800ddfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	461a      	mov	r2, r3
 800de08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de0c:	643b      	str	r3, [r7, #64]	@ 0x40
 800de0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800de12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800de14:	e841 2300 	strex	r3, r2, [r1]
 800de18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800de1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d1e4      	bne.n	800ddea <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	69db      	ldr	r3, [r3, #28]
 800de26:	f003 0310 	and.w	r3, r3, #16
 800de2a:	2b10      	cmp	r3, #16
 800de2c:	d103      	bne.n	800de36 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	2210      	movs	r2, #16
 800de34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800de3c:	4619      	mov	r1, r3
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f7fe f98e 	bl	800c160 <HAL_UARTEx_RxEventCallback>
 800de44:	e002      	b.n	800de4c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f7f5 ffe4 	bl	8003e14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800de4c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800de50:	2b00      	cmp	r3, #0
 800de52:	d006      	beq.n	800de62 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800de54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de58:	f003 0320 	and.w	r3, r3, #32
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	f47f aed1 	bne.w	800dc04 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800de68:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800de6c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800de70:	2b00      	cmp	r3, #0
 800de72:	d049      	beq.n	800df08 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800de7a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800de7e:	429a      	cmp	r2, r3
 800de80:	d242      	bcs.n	800df08 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	3308      	adds	r3, #8
 800de88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de8a:	6a3b      	ldr	r3, [r7, #32]
 800de8c:	e853 3f00 	ldrex	r3, [r3]
 800de90:	61fb      	str	r3, [r7, #28]
   return(result);
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800de98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	3308      	adds	r3, #8
 800dea2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800dea6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dea8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800deac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800deae:	e841 2300 	strex	r3, r2, [r1]
 800deb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800deb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d1e3      	bne.n	800de82 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	4a16      	ldr	r2, [pc, #88]	@ (800df18 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800debe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	e853 3f00 	ldrex	r3, [r3]
 800decc:	60bb      	str	r3, [r7, #8]
   return(result);
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	f043 0320 	orr.w	r3, r3, #32
 800ded4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	461a      	mov	r2, r3
 800dede:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dee2:	61bb      	str	r3, [r7, #24]
 800dee4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dee6:	6979      	ldr	r1, [r7, #20]
 800dee8:	69ba      	ldr	r2, [r7, #24]
 800deea:	e841 2300 	strex	r3, r2, [r1]
 800deee:	613b      	str	r3, [r7, #16]
   return(result);
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d1e4      	bne.n	800dec0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800def6:	e007      	b.n	800df08 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	699a      	ldr	r2, [r3, #24]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f042 0208 	orr.w	r2, r2, #8
 800df06:	619a      	str	r2, [r3, #24]
}
 800df08:	bf00      	nop
 800df0a:	37b0      	adds	r7, #176	@ 0xb0
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}
 800df10:	effffffe 	.word	0xeffffffe
 800df14:	58000c00 	.word	0x58000c00
 800df18:	0800d84d 	.word	0x0800d84d

0800df1c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b0ae      	sub	sp, #184	@ 0xb8
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800df2a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	69db      	ldr	r3, [r3, #28]
 800df34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	689b      	ldr	r3, [r3, #8]
 800df48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800df52:	2b22      	cmp	r3, #34	@ 0x22
 800df54:	f040 8184 	bne.w	800e260 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800df5e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800df62:	e127      	b.n	800e1b4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df6a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800df76:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800df7a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800df7e:	4013      	ands	r3, r2
 800df80:	b29a      	uxth	r2, r3
 800df82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800df86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df8c:	1c9a      	adds	r2, r3, #2
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800df98:	b29b      	uxth	r3, r3
 800df9a:	3b01      	subs	r3, #1
 800df9c:	b29a      	uxth	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	69db      	ldr	r3, [r3, #28]
 800dfaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dfae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dfb2:	f003 0307 	and.w	r3, r3, #7
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d053      	beq.n	800e062 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dfba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dfbe:	f003 0301 	and.w	r3, r3, #1
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d011      	beq.n	800dfea <UART_RxISR_16BIT_FIFOEN+0xce>
 800dfc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00b      	beq.n	800dfea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dfe0:	f043 0201 	orr.w	r2, r3, #1
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dfea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dfee:	f003 0302 	and.w	r3, r3, #2
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d011      	beq.n	800e01a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800dff6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dffa:	f003 0301 	and.w	r3, r3, #1
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d00b      	beq.n	800e01a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2202      	movs	r2, #2
 800e008:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e010:	f043 0204 	orr.w	r2, r3, #4
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e01a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e01e:	f003 0304 	and.w	r3, r3, #4
 800e022:	2b00      	cmp	r3, #0
 800e024:	d011      	beq.n	800e04a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e026:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e02a:	f003 0301 	and.w	r3, r3, #1
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d00b      	beq.n	800e04a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2204      	movs	r2, #4
 800e038:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e040:	f043 0202 	orr.w	r2, r3, #2
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e050:	2b00      	cmp	r3, #0
 800e052:	d006      	beq.n	800e062 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f7fe f86f 	bl	800c138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2200      	movs	r2, #0
 800e05e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e068:	b29b      	uxth	r3, r3
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	f040 80a2 	bne.w	800e1b4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e076:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e078:	e853 3f00 	ldrex	r3, [r3]
 800e07c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e07e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e084:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	461a      	mov	r2, r3
 800e08e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e092:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e096:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e098:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e09a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e09e:	e841 2300 	strex	r3, r2, [r1]
 800e0a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e0a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d1e2      	bne.n	800e070 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	3308      	adds	r3, #8
 800e0b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e0b4:	e853 3f00 	ldrex	r3, [r3]
 800e0b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e0ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e0bc:	4b6e      	ldr	r3, [pc, #440]	@ (800e278 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800e0be:	4013      	ands	r3, r2
 800e0c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	3308      	adds	r3, #8
 800e0ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e0ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e0d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e0d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e0d6:	e841 2300 	strex	r3, r2, [r1]
 800e0da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e0dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d1e3      	bne.n	800e0aa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2220      	movs	r2, #32
 800e0e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	4a60      	ldr	r2, [pc, #384]	@ (800e27c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800e0fc:	4293      	cmp	r3, r2
 800e0fe:	d021      	beq.n	800e144 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d01a      	beq.n	800e144 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e114:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e116:	e853 3f00 	ldrex	r3, [r3]
 800e11a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e11c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e11e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e122:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	461a      	mov	r2, r3
 800e12c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e130:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e132:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e134:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e136:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e138:	e841 2300 	strex	r3, r2, [r1]
 800e13c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e13e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e140:	2b00      	cmp	r3, #0
 800e142:	d1e4      	bne.n	800e10e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d130      	bne.n	800e1ae <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2200      	movs	r2, #0
 800e150:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e15a:	e853 3f00 	ldrex	r3, [r3]
 800e15e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e162:	f023 0310 	bic.w	r3, r3, #16
 800e166:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	461a      	mov	r2, r3
 800e170:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e174:	647b      	str	r3, [r7, #68]	@ 0x44
 800e176:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e178:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e17a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e17c:	e841 2300 	strex	r3, r2, [r1]
 800e180:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e184:	2b00      	cmp	r3, #0
 800e186:	d1e4      	bne.n	800e152 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	69db      	ldr	r3, [r3, #28]
 800e18e:	f003 0310 	and.w	r3, r3, #16
 800e192:	2b10      	cmp	r3, #16
 800e194:	d103      	bne.n	800e19e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2210      	movs	r2, #16
 800e19c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f7fd ffda 	bl	800c160 <HAL_UARTEx_RxEventCallback>
 800e1ac:	e002      	b.n	800e1b4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f7f5 fe30 	bl	8003e14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e1b4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d006      	beq.n	800e1ca <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800e1bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e1c0:	f003 0320 	and.w	r3, r3, #32
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	f47f aecd 	bne.w	800df64 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e1d0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e1d4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d049      	beq.n	800e270 <UART_RxISR_16BIT_FIFOEN+0x354>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e1e2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d242      	bcs.n	800e270 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	3308      	adds	r3, #8
 800e1f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1f4:	e853 3f00 	ldrex	r3, [r3]
 800e1f8:	623b      	str	r3, [r7, #32]
   return(result);
 800e1fa:	6a3b      	ldr	r3, [r7, #32]
 800e1fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e200:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	3308      	adds	r3, #8
 800e20a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e20e:	633a      	str	r2, [r7, #48]	@ 0x30
 800e210:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e212:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e216:	e841 2300 	strex	r3, r2, [r1]
 800e21a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d1e3      	bne.n	800e1ea <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	4a16      	ldr	r2, [pc, #88]	@ (800e280 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800e226:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	e853 3f00 	ldrex	r3, [r3]
 800e234:	60fb      	str	r3, [r7, #12]
   return(result);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	f043 0320 	orr.w	r3, r3, #32
 800e23c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	461a      	mov	r2, r3
 800e246:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e24a:	61fb      	str	r3, [r7, #28]
 800e24c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e24e:	69b9      	ldr	r1, [r7, #24]
 800e250:	69fa      	ldr	r2, [r7, #28]
 800e252:	e841 2300 	strex	r3, r2, [r1]
 800e256:	617b      	str	r3, [r7, #20]
   return(result);
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d1e4      	bne.n	800e228 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e25e:	e007      	b.n	800e270 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	699a      	ldr	r2, [r3, #24]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f042 0208 	orr.w	r2, r2, #8
 800e26e:	619a      	str	r2, [r3, #24]
}
 800e270:	bf00      	nop
 800e272:	37b8      	adds	r7, #184	@ 0xb8
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}
 800e278:	effffffe 	.word	0xeffffffe
 800e27c:	58000c00 	.word	0x58000c00
 800e280:	0800da05 	.word	0x0800da05

0800e284 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e284:	b480      	push	{r7}
 800e286:	b083      	sub	sp, #12
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e28c:	bf00      	nop
 800e28e:	370c      	adds	r7, #12
 800e290:	46bd      	mov	sp, r7
 800e292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e296:	4770      	bx	lr

0800e298 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e298:	b480      	push	{r7}
 800e29a:	b083      	sub	sp, #12
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e2a0:	bf00      	nop
 800e2a2:	370c      	adds	r7, #12
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr

0800e2ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b083      	sub	sp, #12
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e2b4:	bf00      	nop
 800e2b6:	370c      	adds	r7, #12
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2be:	4770      	bx	lr

0800e2c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b085      	sub	sp, #20
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e2ce:	2b01      	cmp	r3, #1
 800e2d0:	d101      	bne.n	800e2d6 <HAL_UARTEx_DisableFifoMode+0x16>
 800e2d2:	2302      	movs	r3, #2
 800e2d4:	e027      	b.n	800e326 <HAL_UARTEx_DisableFifoMode+0x66>
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2201      	movs	r2, #1
 800e2da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2224      	movs	r2, #36	@ 0x24
 800e2e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f022 0201 	bic.w	r2, r2, #1
 800e2fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e304:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2200      	movs	r2, #0
 800e30a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	68fa      	ldr	r2, [r7, #12]
 800e312:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2220      	movs	r2, #32
 800e318:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2200      	movs	r2, #0
 800e320:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e324:	2300      	movs	r3, #0
}
 800e326:	4618      	mov	r0, r3
 800e328:	3714      	adds	r7, #20
 800e32a:	46bd      	mov	sp, r7
 800e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e330:	4770      	bx	lr

0800e332 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e332:	b580      	push	{r7, lr}
 800e334:	b084      	sub	sp, #16
 800e336:	af00      	add	r7, sp, #0
 800e338:	6078      	str	r0, [r7, #4]
 800e33a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e342:	2b01      	cmp	r3, #1
 800e344:	d101      	bne.n	800e34a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e346:	2302      	movs	r3, #2
 800e348:	e02d      	b.n	800e3a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2201      	movs	r2, #1
 800e34e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2224      	movs	r2, #36	@ 0x24
 800e356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	681a      	ldr	r2, [r3, #0]
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f022 0201 	bic.w	r2, r2, #1
 800e370:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	689b      	ldr	r3, [r3, #8]
 800e378:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	683a      	ldr	r2, [r7, #0]
 800e382:	430a      	orrs	r2, r1
 800e384:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f000 f850 	bl	800e42c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	68fa      	ldr	r2, [r7, #12]
 800e392:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2220      	movs	r2, #32
 800e398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e3a4:	2300      	movs	r3, #0
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}

0800e3ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e3ae:	b580      	push	{r7, lr}
 800e3b0:	b084      	sub	sp, #16
 800e3b2:	af00      	add	r7, sp, #0
 800e3b4:	6078      	str	r0, [r7, #4]
 800e3b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e3be:	2b01      	cmp	r3, #1
 800e3c0:	d101      	bne.n	800e3c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e3c2:	2302      	movs	r3, #2
 800e3c4:	e02d      	b.n	800e422 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2224      	movs	r2, #36	@ 0x24
 800e3d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	681a      	ldr	r2, [r3, #0]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f022 0201 	bic.w	r2, r2, #1
 800e3ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	689b      	ldr	r3, [r3, #8]
 800e3f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	683a      	ldr	r2, [r7, #0]
 800e3fe:	430a      	orrs	r2, r1
 800e400:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 f812 	bl	800e42c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	68fa      	ldr	r2, [r7, #12]
 800e40e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2220      	movs	r2, #32
 800e414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2200      	movs	r2, #0
 800e41c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e420:	2300      	movs	r3, #0
}
 800e422:	4618      	mov	r0, r3
 800e424:	3710      	adds	r7, #16
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
	...

0800e42c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e42c:	b480      	push	{r7}
 800e42e:	b085      	sub	sp, #20
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d108      	bne.n	800e44e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2201      	movs	r2, #1
 800e440:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2201      	movs	r2, #1
 800e448:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e44c:	e031      	b.n	800e4b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e44e:	2310      	movs	r3, #16
 800e450:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e452:	2310      	movs	r3, #16
 800e454:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	689b      	ldr	r3, [r3, #8]
 800e45c:	0e5b      	lsrs	r3, r3, #25
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	f003 0307 	and.w	r3, r3, #7
 800e464:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	689b      	ldr	r3, [r3, #8]
 800e46c:	0f5b      	lsrs	r3, r3, #29
 800e46e:	b2db      	uxtb	r3, r3
 800e470:	f003 0307 	and.w	r3, r3, #7
 800e474:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e476:	7bbb      	ldrb	r3, [r7, #14]
 800e478:	7b3a      	ldrb	r2, [r7, #12]
 800e47a:	4911      	ldr	r1, [pc, #68]	@ (800e4c0 <UARTEx_SetNbDataToProcess+0x94>)
 800e47c:	5c8a      	ldrb	r2, [r1, r2]
 800e47e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e482:	7b3a      	ldrb	r2, [r7, #12]
 800e484:	490f      	ldr	r1, [pc, #60]	@ (800e4c4 <UARTEx_SetNbDataToProcess+0x98>)
 800e486:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e488:	fb93 f3f2 	sdiv	r3, r3, r2
 800e48c:	b29a      	uxth	r2, r3
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e494:	7bfb      	ldrb	r3, [r7, #15]
 800e496:	7b7a      	ldrb	r2, [r7, #13]
 800e498:	4909      	ldr	r1, [pc, #36]	@ (800e4c0 <UARTEx_SetNbDataToProcess+0x94>)
 800e49a:	5c8a      	ldrb	r2, [r1, r2]
 800e49c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e4a0:	7b7a      	ldrb	r2, [r7, #13]
 800e4a2:	4908      	ldr	r1, [pc, #32]	@ (800e4c4 <UARTEx_SetNbDataToProcess+0x98>)
 800e4a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e4a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800e4aa:	b29a      	uxth	r2, r3
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e4b2:	bf00      	nop
 800e4b4:	3714      	adds	r7, #20
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4bc:	4770      	bx	lr
 800e4be:	bf00      	nop
 800e4c0:	08018aa0 	.word	0x08018aa0
 800e4c4:	08018aa8 	.word	0x08018aa8

0800e4c8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e4c8:	b084      	sub	sp, #16
 800e4ca:	b480      	push	{r7}
 800e4cc:	b085      	sub	sp, #20
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
 800e4d2:	f107 001c 	add.w	r0, r7, #28
 800e4d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800e4de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800e4e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800e4e2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800e4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800e4e6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800e4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800e4ea:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800e4ee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800e4f0:	68fa      	ldr	r2, [r7, #12]
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	685a      	ldr	r2, [r3, #4]
 800e4fa:	4b07      	ldr	r3, [pc, #28]	@ (800e518 <SDMMC_Init+0x50>)
 800e4fc:	4013      	ands	r3, r2
 800e4fe:	68fa      	ldr	r2, [r7, #12]
 800e500:	431a      	orrs	r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e506:	2300      	movs	r3, #0
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3714      	adds	r7, #20
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	b004      	add	sp, #16
 800e514:	4770      	bx	lr
 800e516:	bf00      	nop
 800e518:	ffc02c00 	.word	0xffc02c00

0800e51c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b083      	sub	sp, #12
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	370c      	adds	r7, #12
 800e52e:	46bd      	mov	sp, r7
 800e530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e534:	4770      	bx	lr

0800e536 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800e536:	b480      	push	{r7}
 800e538:	b083      	sub	sp, #12
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
 800e53e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	681a      	ldr	r2, [r3, #0]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800e54a:	2300      	movs	r3, #0
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	370c      	adds	r7, #12
 800e550:	46bd      	mov	sp, r7
 800e552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e556:	4770      	bx	lr

0800e558 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800e558:	b480      	push	{r7}
 800e55a:	b083      	sub	sp, #12
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f043 0203 	orr.w	r2, r3, #3
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e56c:	2300      	movs	r3, #0
}
 800e56e:	4618      	mov	r0, r3
 800e570:	370c      	adds	r7, #12
 800e572:	46bd      	mov	sp, r7
 800e574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e578:	4770      	bx	lr

0800e57a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800e57a:	b480      	push	{r7}
 800e57c:	b083      	sub	sp, #12
 800e57e:	af00      	add	r7, sp, #0
 800e580:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f003 0303 	and.w	r3, r3, #3
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	370c      	adds	r7, #12
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	4770      	bx	lr
	...

0800e598 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e598:	b480      	push	{r7}
 800e59a:	b085      	sub	sp, #20
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	681a      	ldr	r2, [r3, #0]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e5b6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800e5bc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800e5c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	4313      	orrs	r3, r2
 800e5c8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	68da      	ldr	r2, [r3, #12]
 800e5ce:	4b06      	ldr	r3, [pc, #24]	@ (800e5e8 <SDMMC_SendCommand+0x50>)
 800e5d0:	4013      	ands	r3, r2
 800e5d2:	68fa      	ldr	r2, [r7, #12]
 800e5d4:	431a      	orrs	r2, r3
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e5da:	2300      	movs	r3, #0
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3714      	adds	r7, #20
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr
 800e5e8:	fffee0c0 	.word	0xfffee0c0

0800e5ec <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b083      	sub	sp, #12
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	691b      	ldr	r3, [r3, #16]
 800e5f8:	b2db      	uxtb	r3, r3
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	370c      	adds	r7, #12
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr

0800e606 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e606:	b480      	push	{r7}
 800e608:	b085      	sub	sp, #20
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	6078      	str	r0, [r7, #4]
 800e60e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	3314      	adds	r3, #20
 800e614:	461a      	mov	r2, r3
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	4413      	add	r3, r2
 800e61a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
}
 800e620:	4618      	mov	r0, r3
 800e622:	3714      	adds	r7, #20
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr

0800e62c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800e62c:	b480      	push	{r7}
 800e62e:	b085      	sub	sp, #20
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e636:	2300      	movs	r3, #0
 800e638:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	681a      	ldr	r2, [r3, #0]
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	685a      	ldr	r2, [r3, #4]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e652:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800e658:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800e65e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e660:	68fa      	ldr	r2, [r7, #12]
 800e662:	4313      	orrs	r3, r2
 800e664:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e66a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	431a      	orrs	r2, r3
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e676:	2300      	movs	r3, #0

}
 800e678:	4618      	mov	r0, r3
 800e67a:	3714      	adds	r7, #20
 800e67c:	46bd      	mov	sp, r7
 800e67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e682:	4770      	bx	lr

0800e684 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b088      	sub	sp, #32
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e692:	2310      	movs	r3, #16
 800e694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e696:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e69a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e69c:	2300      	movs	r3, #0
 800e69e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e6a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6a6:	f107 0308 	add.w	r3, r7, #8
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f7ff ff73 	bl	800e598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e6b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e6b6:	2110      	movs	r1, #16
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f000 fa5f 	bl	800eb7c <SDMMC_GetCmdResp1>
 800e6be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6c0:	69fb      	ldr	r3, [r7, #28]
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3720      	adds	r7, #32
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}

0800e6ca <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e6ca:	b580      	push	{r7, lr}
 800e6cc:	b088      	sub	sp, #32
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
 800e6d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e6d8:	2311      	movs	r3, #17
 800e6da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e6e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e6ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6ec:	f107 0308 	add.w	r3, r7, #8
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f7ff ff50 	bl	800e598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e6f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e6fc:	2111      	movs	r1, #17
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f000 fa3c 	bl	800eb7c <SDMMC_GetCmdResp1>
 800e704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e706:	69fb      	ldr	r3, [r7, #28]
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3720      	adds	r7, #32
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b088      	sub	sp, #32
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
 800e718:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e71e:	2312      	movs	r3, #18
 800e720:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e722:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e726:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e728:	2300      	movs	r3, #0
 800e72a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e72c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e730:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e732:	f107 0308 	add.w	r3, r7, #8
 800e736:	4619      	mov	r1, r3
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f7ff ff2d 	bl	800e598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e73e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e742:	2112      	movs	r1, #18
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f000 fa19 	bl	800eb7c <SDMMC_GetCmdResp1>
 800e74a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e74c:	69fb      	ldr	r3, [r7, #28]
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3720      	adds	r7, #32
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}

0800e756 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e756:	b580      	push	{r7, lr}
 800e758:	b088      	sub	sp, #32
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6078      	str	r0, [r7, #4]
 800e75e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e764:	2318      	movs	r3, #24
 800e766:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e768:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e76c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e76e:	2300      	movs	r3, #0
 800e770:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e772:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e776:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e778:	f107 0308 	add.w	r3, r7, #8
 800e77c:	4619      	mov	r1, r3
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f7ff ff0a 	bl	800e598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e784:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e788:	2118      	movs	r1, #24
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f000 f9f6 	bl	800eb7c <SDMMC_GetCmdResp1>
 800e790:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e792:	69fb      	ldr	r3, [r7, #28]
}
 800e794:	4618      	mov	r0, r3
 800e796:	3720      	adds	r7, #32
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b088      	sub	sp, #32
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e7aa:	2319      	movs	r3, #25
 800e7ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e7ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e7b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e7b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e7bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e7be:	f107 0308 	add.w	r3, r7, #8
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f7ff fee7 	bl	800e598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e7ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e7ce:	2119      	movs	r1, #25
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 f9d3 	bl	800eb7c <SDMMC_GetCmdResp1>
 800e7d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7d8:	69fb      	ldr	r3, [r7, #28]
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3720      	adds	r7, #32
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
	...

0800e7e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b088      	sub	sp, #32
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e7f0:	230c      	movs	r3, #12
 800e7f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e7f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e7f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e7fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e802:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	68db      	ldr	r3, [r3, #12]
 800e808:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	68db      	ldr	r3, [r3, #12]
 800e814:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e81c:	f107 0308 	add.w	r3, r7, #8
 800e820:	4619      	mov	r1, r3
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f7ff feb8 	bl	800e598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e828:	4a0b      	ldr	r2, [pc, #44]	@ (800e858 <SDMMC_CmdStopTransfer+0x74>)
 800e82a:	210c      	movs	r1, #12
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f000 f9a5 	bl	800eb7c <SDMMC_GetCmdResp1>
 800e832:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	68db      	ldr	r3, [r3, #12]
 800e838:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e840:	69fb      	ldr	r3, [r7, #28]
 800e842:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e846:	d101      	bne.n	800e84c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800e848:	2300      	movs	r3, #0
 800e84a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800e84c:	69fb      	ldr	r3, [r7, #28]
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3720      	adds	r7, #32
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	05f5e100 	.word	0x05f5e100

0800e85c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b088      	sub	sp, #32
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e86a:	2307      	movs	r3, #7
 800e86c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e86e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e872:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e874:	2300      	movs	r3, #0
 800e876:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e878:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e87c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e87e:	f107 0308 	add.w	r3, r7, #8
 800e882:	4619      	mov	r1, r3
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f7ff fe87 	bl	800e598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e88a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e88e:	2107      	movs	r1, #7
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f000 f973 	bl	800eb7c <SDMMC_GetCmdResp1>
 800e896:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e898:	69fb      	ldr	r3, [r7, #28]
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3720      	adds	r7, #32
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b088      	sub	sp, #32
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e8ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e8be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e8c0:	f107 0308 	add.w	r3, r7, #8
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f7ff fe66 	bl	800e598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f000 fb97 	bl	800f000 <SDMMC_GetCmdError>
 800e8d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8d4:	69fb      	ldr	r3, [r7, #28]
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3720      	adds	r7, #32
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}

0800e8de <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e8de:	b580      	push	{r7, lr}
 800e8e0:	b088      	sub	sp, #32
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e8e6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800e8ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e8ec:	2308      	movs	r3, #8
 800e8ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e8f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e8f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e8fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e8fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e900:	f107 0308 	add.w	r3, r7, #8
 800e904:	4619      	mov	r1, r3
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f7ff fe46 	bl	800e598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f000 fb29 	bl	800ef64 <SDMMC_GetCmdResp7>
 800e912:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e914:	69fb      	ldr	r3, [r7, #28]
}
 800e916:	4618      	mov	r0, r3
 800e918:	3720      	adds	r7, #32
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}

0800e91e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e91e:	b580      	push	{r7, lr}
 800e920:	b088      	sub	sp, #32
 800e922:	af00      	add	r7, sp, #0
 800e924:	6078      	str	r0, [r7, #4]
 800e926:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e92c:	2337      	movs	r3, #55	@ 0x37
 800e92e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e930:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e934:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e936:	2300      	movs	r3, #0
 800e938:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e93a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e93e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e940:	f107 0308 	add.w	r3, r7, #8
 800e944:	4619      	mov	r1, r3
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f7ff fe26 	bl	800e598 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e94c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e950:	2137      	movs	r1, #55	@ 0x37
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f000 f912 	bl	800eb7c <SDMMC_GetCmdResp1>
 800e958:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e95a:	69fb      	ldr	r3, [r7, #28]
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3720      	adds	r7, #32
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b088      	sub	sp, #32
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e972:	2329      	movs	r3, #41	@ 0x29
 800e974:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e976:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e97a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e97c:	2300      	movs	r3, #0
 800e97e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e980:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e984:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e986:	f107 0308 	add.w	r3, r7, #8
 800e98a:	4619      	mov	r1, r3
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f7ff fe03 	bl	800e598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f000 fa2e 	bl	800edf4 <SDMMC_GetCmdResp3>
 800e998:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e99a:	69fb      	ldr	r3, [r7, #28]
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3720      	adds	r7, #32
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b088      	sub	sp, #32
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e9b2:	2306      	movs	r3, #6
 800e9b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e9b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e9ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e9bc:	2300      	movs	r3, #0
 800e9be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e9c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e9c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e9c6:	f107 0308 	add.w	r3, r7, #8
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f7ff fde3 	bl	800e598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e9d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e9d6:	2106      	movs	r1, #6
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f000 f8cf 	bl	800eb7c <SDMMC_GetCmdResp1>
 800e9de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9e0:	69fb      	ldr	r3, [r7, #28]
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3720      	adds	r7, #32
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}

0800e9ea <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e9ea:	b580      	push	{r7, lr}
 800e9ec:	b088      	sub	sp, #32
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e9f6:	2333      	movs	r3, #51	@ 0x33
 800e9f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e9fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e9fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea00:	2300      	movs	r3, #0
 800ea02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ea08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea0a:	f107 0308 	add.w	r3, r7, #8
 800ea0e:	4619      	mov	r1, r3
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	f7ff fdc1 	bl	800e598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ea16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ea1a:	2133      	movs	r1, #51	@ 0x33
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f000 f8ad 	bl	800eb7c <SDMMC_GetCmdResp1>
 800ea22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea24:	69fb      	ldr	r3, [r7, #28]
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3720      	adds	r7, #32
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}

0800ea2e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ea2e:	b580      	push	{r7, lr}
 800ea30:	b088      	sub	sp, #32
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ea36:	2300      	movs	r3, #0
 800ea38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ea3a:	2302      	movs	r3, #2
 800ea3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ea3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ea42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea44:	2300      	movs	r3, #0
 800ea46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ea4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea4e:	f107 0308 	add.w	r3, r7, #8
 800ea52:	4619      	mov	r1, r3
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	f7ff fd9f 	bl	800e598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f000 f980 	bl	800ed60 <SDMMC_GetCmdResp2>
 800ea60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea62:	69fb      	ldr	r3, [r7, #28]
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3720      	adds	r7, #32
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b088      	sub	sp, #32
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ea7a:	2309      	movs	r3, #9
 800ea7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ea7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ea82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea84:	2300      	movs	r3, #0
 800ea86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ea8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea8e:	f107 0308 	add.w	r3, r7, #8
 800ea92:	4619      	mov	r1, r3
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f7ff fd7f 	bl	800e598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f000 f960 	bl	800ed60 <SDMMC_GetCmdResp2>
 800eaa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eaa2:	69fb      	ldr	r3, [r7, #28]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3720      	adds	r7, #32
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b088      	sub	sp, #32
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800eab6:	2300      	movs	r3, #0
 800eab8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800eaba:	2303      	movs	r3, #3
 800eabc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eabe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eac2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eac4:	2300      	movs	r3, #0
 800eac6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eac8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eacc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eace:	f107 0308 	add.w	r3, r7, #8
 800ead2:	4619      	mov	r1, r3
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f7ff fd5f 	bl	800e598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800eada:	683a      	ldr	r2, [r7, #0]
 800eadc:	2103      	movs	r1, #3
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f000 f9c8 	bl	800ee74 <SDMMC_GetCmdResp6>
 800eae4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eae6:	69fb      	ldr	r3, [r7, #28]
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3720      	adds	r7, #32
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b088      	sub	sp, #32
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800eafe:	230d      	movs	r3, #13
 800eb00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eb02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eb06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eb10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb12:	f107 0308 	add.w	r3, r7, #8
 800eb16:	4619      	mov	r1, r3
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f7ff fd3d 	bl	800e598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800eb1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb22:	210d      	movs	r1, #13
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 f829 	bl	800eb7c <SDMMC_GetCmdResp1>
 800eb2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb2c:	69fb      	ldr	r3, [r7, #28]
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3720      	adds	r7, #32
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}

0800eb36 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800eb36:	b580      	push	{r7, lr}
 800eb38:	b088      	sub	sp, #32
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800eb42:	230d      	movs	r3, #13
 800eb44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eb46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eb4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eb54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb56:	f107 0308 	add.w	r3, r7, #8
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f7ff fd1b 	bl	800e598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800eb62:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb66:	210d      	movs	r1, #13
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f000 f807 	bl	800eb7c <SDMMC_GetCmdResp1>
 800eb6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb70:	69fb      	ldr	r3, [r7, #28]
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3720      	adds	r7, #32
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
	...

0800eb7c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b088      	sub	sp, #32
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	60f8      	str	r0, [r7, #12]
 800eb84:	460b      	mov	r3, r1
 800eb86:	607a      	str	r2, [r7, #4]
 800eb88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800eb8a:	4b70      	ldr	r3, [pc, #448]	@ (800ed4c <SDMMC_GetCmdResp1+0x1d0>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	4a70      	ldr	r2, [pc, #448]	@ (800ed50 <SDMMC_GetCmdResp1+0x1d4>)
 800eb90:	fba2 2303 	umull	r2, r3, r2, r3
 800eb94:	0a5a      	lsrs	r2, r3, #9
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	fb02 f303 	mul.w	r3, r2, r3
 800eb9c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800eb9e:	69fb      	ldr	r3, [r7, #28]
 800eba0:	1e5a      	subs	r2, r3, #1
 800eba2:	61fa      	str	r2, [r7, #28]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d102      	bne.n	800ebae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eba8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ebac:	e0c9      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebb2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ebb4:	69ba      	ldr	r2, [r7, #24]
 800ebb6:	4b67      	ldr	r3, [pc, #412]	@ (800ed54 <SDMMC_GetCmdResp1+0x1d8>)
 800ebb8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d0ef      	beq.n	800eb9e <SDMMC_GetCmdResp1+0x22>
 800ebbe:	69bb      	ldr	r3, [r7, #24]
 800ebc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d1ea      	bne.n	800eb9e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebcc:	f003 0304 	and.w	r3, r3, #4
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d004      	beq.n	800ebde <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	2204      	movs	r2, #4
 800ebd8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ebda:	2304      	movs	r3, #4
 800ebdc:	e0b1      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebe2:	f003 0301 	and.w	r3, r3, #1
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d004      	beq.n	800ebf4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	2201      	movs	r2, #1
 800ebee:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	e0a6      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	4a58      	ldr	r2, [pc, #352]	@ (800ed58 <SDMMC_GetCmdResp1+0x1dc>)
 800ebf8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ebfa:	68f8      	ldr	r0, [r7, #12]
 800ebfc:	f7ff fcf6 	bl	800e5ec <SDMMC_GetCommandResponse>
 800ec00:	4603      	mov	r3, r0
 800ec02:	461a      	mov	r2, r3
 800ec04:	7afb      	ldrb	r3, [r7, #11]
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d001      	beq.n	800ec0e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	e099      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ec0e:	2100      	movs	r1, #0
 800ec10:	68f8      	ldr	r0, [r7, #12]
 800ec12:	f7ff fcf8 	bl	800e606 <SDMMC_GetResponse>
 800ec16:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ec18:	697a      	ldr	r2, [r7, #20]
 800ec1a:	4b50      	ldr	r3, [pc, #320]	@ (800ed5c <SDMMC_GetCmdResp1+0x1e0>)
 800ec1c:	4013      	ands	r3, r2
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d101      	bne.n	800ec26 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ec22:	2300      	movs	r3, #0
 800ec24:	e08d      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	da02      	bge.n	800ec32 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ec2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ec30:	e087      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d001      	beq.n	800ec40 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ec3c:	2340      	movs	r3, #64	@ 0x40
 800ec3e:	e080      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d001      	beq.n	800ec4e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ec4a:	2380      	movs	r3, #128	@ 0x80
 800ec4c:	e079      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d002      	beq.n	800ec5e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ec58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ec5c:	e071      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d002      	beq.n	800ec6e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ec68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ec6c:	e069      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d002      	beq.n	800ec7e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ec78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec7c:	e061      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d002      	beq.n	800ec8e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ec88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ec8c:	e059      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d002      	beq.n	800ec9e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ec98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ec9c:	e051      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d002      	beq.n	800ecae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eca8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ecac:	e049      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d002      	beq.n	800ecbe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ecb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ecbc:	e041      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d002      	beq.n	800ecce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ecc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eccc:	e039      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d002      	beq.n	800ecde <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ecd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ecdc:	e031      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d002      	beq.n	800ecee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ece8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ecec:	e029      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d002      	beq.n	800ecfe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ecf8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ecfc:	e021      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d002      	beq.n	800ed0e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ed08:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ed0c:	e019      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d002      	beq.n	800ed1e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ed18:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ed1c:	e011      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d002      	beq.n	800ed2e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ed28:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ed2c:	e009      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	f003 0308 	and.w	r3, r3, #8
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d002      	beq.n	800ed3e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ed38:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800ed3c:	e001      	b.n	800ed42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ed3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3720      	adds	r7, #32
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
 800ed4a:	bf00      	nop
 800ed4c:	24000000 	.word	0x24000000
 800ed50:	10624dd3 	.word	0x10624dd3
 800ed54:	00200045 	.word	0x00200045
 800ed58:	002000c5 	.word	0x002000c5
 800ed5c:	fdffe008 	.word	0xfdffe008

0800ed60 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b085      	sub	sp, #20
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ed68:	4b1f      	ldr	r3, [pc, #124]	@ (800ede8 <SDMMC_GetCmdResp2+0x88>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a1f      	ldr	r2, [pc, #124]	@ (800edec <SDMMC_GetCmdResp2+0x8c>)
 800ed6e:	fba2 2303 	umull	r2, r3, r2, r3
 800ed72:	0a5b      	lsrs	r3, r3, #9
 800ed74:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed78:	fb02 f303 	mul.w	r3, r2, r3
 800ed7c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	1e5a      	subs	r2, r3, #1
 800ed82:	60fa      	str	r2, [r7, #12]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d102      	bne.n	800ed8e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed88:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ed8c:	e026      	b.n	800eddc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed92:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d0ef      	beq.n	800ed7e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d1ea      	bne.n	800ed7e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edac:	f003 0304 	and.w	r3, r3, #4
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d004      	beq.n	800edbe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2204      	movs	r2, #4
 800edb8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800edba:	2304      	movs	r3, #4
 800edbc:	e00e      	b.n	800eddc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edc2:	f003 0301 	and.w	r3, r3, #1
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d004      	beq.n	800edd4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2201      	movs	r2, #1
 800edce:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800edd0:	2301      	movs	r3, #1
 800edd2:	e003      	b.n	800eddc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	4a06      	ldr	r2, [pc, #24]	@ (800edf0 <SDMMC_GetCmdResp2+0x90>)
 800edd8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800edda:	2300      	movs	r3, #0
}
 800eddc:	4618      	mov	r0, r3
 800edde:	3714      	adds	r7, #20
 800ede0:	46bd      	mov	sp, r7
 800ede2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede6:	4770      	bx	lr
 800ede8:	24000000 	.word	0x24000000
 800edec:	10624dd3 	.word	0x10624dd3
 800edf0:	002000c5 	.word	0x002000c5

0800edf4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b085      	sub	sp, #20
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800edfc:	4b1a      	ldr	r3, [pc, #104]	@ (800ee68 <SDMMC_GetCmdResp3+0x74>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4a1a      	ldr	r2, [pc, #104]	@ (800ee6c <SDMMC_GetCmdResp3+0x78>)
 800ee02:	fba2 2303 	umull	r2, r3, r2, r3
 800ee06:	0a5b      	lsrs	r3, r3, #9
 800ee08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee0c:	fb02 f303 	mul.w	r3, r2, r3
 800ee10:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	1e5a      	subs	r2, r3, #1
 800ee16:	60fa      	str	r2, [r7, #12]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d102      	bne.n	800ee22 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ee1c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ee20:	e01b      	b.n	800ee5a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee26:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d0ef      	beq.n	800ee12 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d1ea      	bne.n	800ee12 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee40:	f003 0304 	and.w	r3, r3, #4
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d004      	beq.n	800ee52 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2204      	movs	r2, #4
 800ee4c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ee4e:	2304      	movs	r3, #4
 800ee50:	e003      	b.n	800ee5a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	4a06      	ldr	r2, [pc, #24]	@ (800ee70 <SDMMC_GetCmdResp3+0x7c>)
 800ee56:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ee58:	2300      	movs	r3, #0
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3714      	adds	r7, #20
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee64:	4770      	bx	lr
 800ee66:	bf00      	nop
 800ee68:	24000000 	.word	0x24000000
 800ee6c:	10624dd3 	.word	0x10624dd3
 800ee70:	002000c5 	.word	0x002000c5

0800ee74 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b088      	sub	sp, #32
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	60f8      	str	r0, [r7, #12]
 800ee7c:	460b      	mov	r3, r1
 800ee7e:	607a      	str	r2, [r7, #4]
 800ee80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ee82:	4b35      	ldr	r3, [pc, #212]	@ (800ef58 <SDMMC_GetCmdResp6+0xe4>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	4a35      	ldr	r2, [pc, #212]	@ (800ef5c <SDMMC_GetCmdResp6+0xe8>)
 800ee88:	fba2 2303 	umull	r2, r3, r2, r3
 800ee8c:	0a5b      	lsrs	r3, r3, #9
 800ee8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee92:	fb02 f303 	mul.w	r3, r2, r3
 800ee96:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	1e5a      	subs	r2, r3, #1
 800ee9c:	61fa      	str	r2, [r7, #28]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d102      	bne.n	800eea8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eea2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800eea6:	e052      	b.n	800ef4e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eeac:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eeae:	69bb      	ldr	r3, [r7, #24]
 800eeb0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d0ef      	beq.n	800ee98 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800eeb8:	69bb      	ldr	r3, [r7, #24]
 800eeba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d1ea      	bne.n	800ee98 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eec6:	f003 0304 	and.w	r3, r3, #4
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d004      	beq.n	800eed8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	2204      	movs	r2, #4
 800eed2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eed4:	2304      	movs	r3, #4
 800eed6:	e03a      	b.n	800ef4e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eedc:	f003 0301 	and.w	r3, r3, #1
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d004      	beq.n	800eeee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	2201      	movs	r2, #1
 800eee8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eeea:	2301      	movs	r3, #1
 800eeec:	e02f      	b.n	800ef4e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800eeee:	68f8      	ldr	r0, [r7, #12]
 800eef0:	f7ff fb7c 	bl	800e5ec <SDMMC_GetCommandResponse>
 800eef4:	4603      	mov	r3, r0
 800eef6:	461a      	mov	r2, r3
 800eef8:	7afb      	ldrb	r3, [r7, #11]
 800eefa:	4293      	cmp	r3, r2
 800eefc:	d001      	beq.n	800ef02 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eefe:	2301      	movs	r3, #1
 800ef00:	e025      	b.n	800ef4e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	4a16      	ldr	r2, [pc, #88]	@ (800ef60 <SDMMC_GetCmdResp6+0xec>)
 800ef06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ef08:	2100      	movs	r1, #0
 800ef0a:	68f8      	ldr	r0, [r7, #12]
 800ef0c:	f7ff fb7b 	bl	800e606 <SDMMC_GetResponse>
 800ef10:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d106      	bne.n	800ef2a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800ef1c:	697b      	ldr	r3, [r7, #20]
 800ef1e:	0c1b      	lsrs	r3, r3, #16
 800ef20:	b29a      	uxth	r2, r3
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ef26:	2300      	movs	r3, #0
 800ef28:	e011      	b.n	800ef4e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d002      	beq.n	800ef3a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ef34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ef38:	e009      	b.n	800ef4e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d002      	beq.n	800ef4a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ef44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ef48:	e001      	b.n	800ef4e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ef4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3720      	adds	r7, #32
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	24000000 	.word	0x24000000
 800ef5c:	10624dd3 	.word	0x10624dd3
 800ef60:	002000c5 	.word	0x002000c5

0800ef64 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b085      	sub	sp, #20
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ef6c:	4b22      	ldr	r3, [pc, #136]	@ (800eff8 <SDMMC_GetCmdResp7+0x94>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4a22      	ldr	r2, [pc, #136]	@ (800effc <SDMMC_GetCmdResp7+0x98>)
 800ef72:	fba2 2303 	umull	r2, r3, r2, r3
 800ef76:	0a5b      	lsrs	r3, r3, #9
 800ef78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef7c:	fb02 f303 	mul.w	r3, r2, r3
 800ef80:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	1e5a      	subs	r2, r3, #1
 800ef86:	60fa      	str	r2, [r7, #12]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d102      	bne.n	800ef92 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ef8c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ef90:	e02c      	b.n	800efec <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef96:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d0ef      	beq.n	800ef82 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d1ea      	bne.n	800ef82 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efb0:	f003 0304 	and.w	r3, r3, #4
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d004      	beq.n	800efc2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2204      	movs	r2, #4
 800efbc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800efbe:	2304      	movs	r3, #4
 800efc0:	e014      	b.n	800efec <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efc6:	f003 0301 	and.w	r3, r3, #1
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d004      	beq.n	800efd8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2201      	movs	r2, #1
 800efd2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800efd4:	2301      	movs	r3, #1
 800efd6:	e009      	b.n	800efec <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d002      	beq.n	800efea <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2240      	movs	r2, #64	@ 0x40
 800efe8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800efea:	2300      	movs	r3, #0

}
 800efec:	4618      	mov	r0, r3
 800efee:	3714      	adds	r7, #20
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr
 800eff8:	24000000 	.word	0x24000000
 800effc:	10624dd3 	.word	0x10624dd3

0800f000 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f000:	b480      	push	{r7}
 800f002:	b085      	sub	sp, #20
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f008:	4b11      	ldr	r3, [pc, #68]	@ (800f050 <SDMMC_GetCmdError+0x50>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4a11      	ldr	r2, [pc, #68]	@ (800f054 <SDMMC_GetCmdError+0x54>)
 800f00e:	fba2 2303 	umull	r2, r3, r2, r3
 800f012:	0a5b      	lsrs	r3, r3, #9
 800f014:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f018:	fb02 f303 	mul.w	r3, r2, r3
 800f01c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	1e5a      	subs	r2, r3, #1
 800f022:	60fa      	str	r2, [r7, #12]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d102      	bne.n	800f02e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f028:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f02c:	e009      	b.n	800f042 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f036:	2b00      	cmp	r3, #0
 800f038:	d0f1      	beq.n	800f01e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	4a06      	ldr	r2, [pc, #24]	@ (800f058 <SDMMC_GetCmdError+0x58>)
 800f03e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800f040:	2300      	movs	r3, #0
}
 800f042:	4618      	mov	r0, r3
 800f044:	3714      	adds	r7, #20
 800f046:	46bd      	mov	sp, r7
 800f048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04c:	4770      	bx	lr
 800f04e:	bf00      	nop
 800f050:	24000000 	.word	0x24000000
 800f054:	10624dd3 	.word	0x10624dd3
 800f058:	002000c5 	.word	0x002000c5

0800f05c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f060:	4904      	ldr	r1, [pc, #16]	@ (800f074 <MX_FATFS_Init+0x18>)
 800f062:	4805      	ldr	r0, [pc, #20]	@ (800f078 <MX_FATFS_Init+0x1c>)
 800f064:	f003 f8d4 	bl	8012210 <FATFS_LinkDriver>
 800f068:	4603      	mov	r3, r0
 800f06a:	461a      	mov	r2, r3
 800f06c:	4b03      	ldr	r3, [pc, #12]	@ (800f07c <MX_FATFS_Init+0x20>)
 800f06e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f070:	bf00      	nop
 800f072:	bd80      	pop	{r7, pc}
 800f074:	24000a68 	.word	0x24000a68
 800f078:	08018ab0 	.word	0x08018ab0
 800f07c:	24000a64 	.word	0x24000a64

0800f080 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f080:	b480      	push	{r7}
 800f082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f084:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f086:	4618      	mov	r0, r3
 800f088:	46bd      	mov	sp, r7
 800f08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08e:	4770      	bx	lr

0800f090 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f096:	2300      	movs	r3, #0
 800f098:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f09a:	f000 f885 	bl	800f1a8 <BSP_SD_IsDetected>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	2b01      	cmp	r3, #1
 800f0a2:	d001      	beq.n	800f0a8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f0a4:	2302      	movs	r3, #2
 800f0a6:	e012      	b.n	800f0ce <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f0a8:	480b      	ldr	r0, [pc, #44]	@ (800f0d8 <BSP_SD_Init+0x48>)
 800f0aa:	f7f9 fdc5 	bl	8008c38 <HAL_SD_Init>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f0b2:	79fb      	ldrb	r3, [r7, #7]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d109      	bne.n	800f0cc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f0b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800f0bc:	4806      	ldr	r0, [pc, #24]	@ (800f0d8 <BSP_SD_Init+0x48>)
 800f0be:	f7fa fc7b 	bl	80099b8 <HAL_SD_ConfigWideBusOperation>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d001      	beq.n	800f0cc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f0cc:	79fb      	ldrb	r3, [r7, #7]
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3708      	adds	r7, #8
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	2400008c 	.word	0x2400008c

0800f0dc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b086      	sub	sp, #24
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	60f8      	str	r0, [r7, #12]
 800f0e4:	60b9      	str	r1, [r7, #8]
 800f0e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	68ba      	ldr	r2, [r7, #8]
 800f0f0:	68f9      	ldr	r1, [r7, #12]
 800f0f2:	4806      	ldr	r0, [pc, #24]	@ (800f10c <BSP_SD_ReadBlocks_DMA+0x30>)
 800f0f4:	f7f9 fec0 	bl	8008e78 <HAL_SD_ReadBlocks_DMA>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d001      	beq.n	800f102 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f0fe:	2301      	movs	r3, #1
 800f100:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f102:	7dfb      	ldrb	r3, [r7, #23]
}
 800f104:	4618      	mov	r0, r3
 800f106:	3718      	adds	r7, #24
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}
 800f10c:	2400008c 	.word	0x2400008c

0800f110 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b086      	sub	sp, #24
 800f114:	af00      	add	r7, sp, #0
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f11c:	2300      	movs	r3, #0
 800f11e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	68ba      	ldr	r2, [r7, #8]
 800f124:	68f9      	ldr	r1, [r7, #12]
 800f126:	4806      	ldr	r0, [pc, #24]	@ (800f140 <BSP_SD_WriteBlocks_DMA+0x30>)
 800f128:	f7f9 ff4e 	bl	8008fc8 <HAL_SD_WriteBlocks_DMA>
 800f12c:	4603      	mov	r3, r0
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d001      	beq.n	800f136 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f132:	2301      	movs	r3, #1
 800f134:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f136:	7dfb      	ldrb	r3, [r7, #23]
}
 800f138:	4618      	mov	r0, r3
 800f13a:	3718      	adds	r7, #24
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}
 800f140:	2400008c 	.word	0x2400008c

0800f144 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f148:	4805      	ldr	r0, [pc, #20]	@ (800f160 <BSP_SD_GetCardState+0x1c>)
 800f14a:	f7fa fd47 	bl	8009bdc <HAL_SD_GetCardState>
 800f14e:	4603      	mov	r3, r0
 800f150:	2b04      	cmp	r3, #4
 800f152:	bf14      	ite	ne
 800f154:	2301      	movne	r3, #1
 800f156:	2300      	moveq	r3, #0
 800f158:	b2db      	uxtb	r3, r3
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	2400008c 	.word	0x2400008c

0800f164 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b082      	sub	sp, #8
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f16c:	6879      	ldr	r1, [r7, #4]
 800f16e:	4803      	ldr	r0, [pc, #12]	@ (800f17c <BSP_SD_GetCardInfo+0x18>)
 800f170:	f7fa fbf6 	bl	8009960 <HAL_SD_GetCardInfo>
}
 800f174:	bf00      	nop
 800f176:	3708      	adds	r7, #8
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}
 800f17c:	2400008c 	.word	0x2400008c

0800f180 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b082      	sub	sp, #8
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800f188:	f000 f990 	bl	800f4ac <BSP_SD_WriteCpltCallback>
}
 800f18c:	bf00      	nop
 800f18e:	3708      	adds	r7, #8
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f19c:	f000 f998 	bl	800f4d0 <BSP_SD_ReadCpltCallback>
}
 800f1a0:	bf00      	nop
 800f1a2:	3708      	adds	r7, #8
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800f1b2:	79fb      	ldrb	r3, [r7, #7]
 800f1b4:	b2db      	uxtb	r3, r3
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	370c      	adds	r7, #12
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c0:	4770      	bx	lr

0800f1c2 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f1c2:	b580      	push	{r7, lr}
 800f1c4:	b084      	sub	sp, #16
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800f1ca:	f003 f927 	bl	801241c <osKernelGetTickCount>
 800f1ce:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800f1d0:	e006      	b.n	800f1e0 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f1d2:	f7ff ffb7 	bl	800f144 <BSP_SD_GetCardState>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d101      	bne.n	800f1e0 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	e009      	b.n	800f1f4 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800f1e0:	f003 f91c 	bl	801241c <osKernelGetTickCount>
 800f1e4:	4602      	mov	r2, r0
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	1ad3      	subs	r3, r2, r3
 800f1ea:	687a      	ldr	r2, [r7, #4]
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d8f0      	bhi.n	800f1d2 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f1f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3710      	adds	r7, #16
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b082      	sub	sp, #8
 800f200:	af00      	add	r7, sp, #0
 800f202:	4603      	mov	r3, r0
 800f204:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f206:	4b0b      	ldr	r3, [pc, #44]	@ (800f234 <SD_CheckStatus+0x38>)
 800f208:	2201      	movs	r2, #1
 800f20a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f20c:	f7ff ff9a 	bl	800f144 <BSP_SD_GetCardState>
 800f210:	4603      	mov	r3, r0
 800f212:	2b00      	cmp	r3, #0
 800f214:	d107      	bne.n	800f226 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f216:	4b07      	ldr	r3, [pc, #28]	@ (800f234 <SD_CheckStatus+0x38>)
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	f023 0301 	bic.w	r3, r3, #1
 800f220:	b2da      	uxtb	r2, r3
 800f222:	4b04      	ldr	r3, [pc, #16]	@ (800f234 <SD_CheckStatus+0x38>)
 800f224:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f226:	4b03      	ldr	r3, [pc, #12]	@ (800f234 <SD_CheckStatus+0x38>)
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	b2db      	uxtb	r3, r3
}
 800f22c:	4618      	mov	r0, r3
 800f22e:	3708      	adds	r7, #8
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}
 800f234:	2400000d 	.word	0x2400000d

0800f238 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	4603      	mov	r3, r0
 800f240:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f242:	4b1c      	ldr	r3, [pc, #112]	@ (800f2b4 <SD_initialize+0x7c>)
 800f244:	2201      	movs	r2, #1
 800f246:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800f248:	f003 f8a0 	bl	801238c <osKernelGetState>
 800f24c:	4603      	mov	r3, r0
 800f24e:	2b02      	cmp	r3, #2
 800f250:	d129      	bne.n	800f2a6 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800f252:	f7ff ff1d 	bl	800f090 <BSP_SD_Init>
 800f256:	4603      	mov	r3, r0
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d107      	bne.n	800f26c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800f25c:	79fb      	ldrb	r3, [r7, #7]
 800f25e:	4618      	mov	r0, r3
 800f260:	f7ff ffcc 	bl	800f1fc <SD_CheckStatus>
 800f264:	4603      	mov	r3, r0
 800f266:	461a      	mov	r2, r3
 800f268:	4b12      	ldr	r3, [pc, #72]	@ (800f2b4 <SD_initialize+0x7c>)
 800f26a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800f26c:	4b11      	ldr	r3, [pc, #68]	@ (800f2b4 <SD_initialize+0x7c>)
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	b2db      	uxtb	r3, r3
 800f272:	2b01      	cmp	r3, #1
 800f274:	d017      	beq.n	800f2a6 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800f276:	4b10      	ldr	r3, [pc, #64]	@ (800f2b8 <SD_initialize+0x80>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d107      	bne.n	800f28e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800f27e:	2200      	movs	r2, #0
 800f280:	2102      	movs	r1, #2
 800f282:	200a      	movs	r0, #10
 800f284:	f003 fada 	bl	801283c <osMessageQueueNew>
 800f288:	4603      	mov	r3, r0
 800f28a:	4a0b      	ldr	r2, [pc, #44]	@ (800f2b8 <SD_initialize+0x80>)
 800f28c:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800f28e:	4b0a      	ldr	r3, [pc, #40]	@ (800f2b8 <SD_initialize+0x80>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d107      	bne.n	800f2a6 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800f296:	4b07      	ldr	r3, [pc, #28]	@ (800f2b4 <SD_initialize+0x7c>)
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	b2db      	uxtb	r3, r3
 800f29c:	f043 0301 	orr.w	r3, r3, #1
 800f2a0:	b2da      	uxtb	r2, r3
 800f2a2:	4b04      	ldr	r3, [pc, #16]	@ (800f2b4 <SD_initialize+0x7c>)
 800f2a4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800f2a6:	4b03      	ldr	r3, [pc, #12]	@ (800f2b4 <SD_initialize+0x7c>)
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	b2db      	uxtb	r3, r3
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3708      	adds	r7, #8
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}
 800f2b4:	2400000d 	.word	0x2400000d
 800f2b8:	24000a6c 	.word	0x24000a6c

0800f2bc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f2c6:	79fb      	ldrb	r3, [r7, #7]
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7ff ff97 	bl	800f1fc <SD_CheckStatus>
 800f2ce:	4603      	mov	r3, r0
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3708      	adds	r7, #8
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}

0800f2d8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b088      	sub	sp, #32
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	60b9      	str	r1, [r7, #8]
 800f2e0:	607a      	str	r2, [r7, #4]
 800f2e2:	603b      	str	r3, [r7, #0]
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f2ec:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f2f0:	f7ff ff67 	bl	800f1c2 <SD_CheckStatusWithTimeout>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	da01      	bge.n	800f2fe <SD_read+0x26>
  {
    return res;
 800f2fa:	7ffb      	ldrb	r3, [r7, #31]
 800f2fc:	e02f      	b.n	800f35e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800f2fe:	683a      	ldr	r2, [r7, #0]
 800f300:	6879      	ldr	r1, [r7, #4]
 800f302:	68b8      	ldr	r0, [r7, #8]
 800f304:	f7ff feea 	bl	800f0dc <BSP_SD_ReadBlocks_DMA>
 800f308:	4603      	mov	r3, r0
 800f30a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800f30c:	7fbb      	ldrb	r3, [r7, #30]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d124      	bne.n	800f35c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f312:	4b15      	ldr	r3, [pc, #84]	@ (800f368 <SD_read+0x90>)
 800f314:	6818      	ldr	r0, [r3, #0]
 800f316:	f107 0112 	add.w	r1, r7, #18
 800f31a:	f247 5330 	movw	r3, #30000	@ 0x7530
 800f31e:	2200      	movs	r2, #0
 800f320:	f003 fb60 	bl	80129e4 <osMessageQueueGet>
 800f324:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800f326:	69bb      	ldr	r3, [r7, #24]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d117      	bne.n	800f35c <SD_read+0x84>
 800f32c:	8a7b      	ldrh	r3, [r7, #18]
 800f32e:	2b01      	cmp	r3, #1
 800f330:	d114      	bne.n	800f35c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800f332:	f003 f873 	bl	801241c <osKernelGetTickCount>
 800f336:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f338:	e007      	b.n	800f34a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f33a:	f7ff ff03 	bl	800f144 <BSP_SD_GetCardState>
 800f33e:	4603      	mov	r3, r0
 800f340:	2b00      	cmp	r3, #0
 800f342:	d102      	bne.n	800f34a <SD_read+0x72>
              {
                res = RES_OK;
 800f344:	2300      	movs	r3, #0
 800f346:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800f348:	e008      	b.n	800f35c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f34a:	f003 f867 	bl	801241c <osKernelGetTickCount>
 800f34e:	4602      	mov	r2, r0
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	1ad3      	subs	r3, r2, r3
 800f354:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f358:	4293      	cmp	r3, r2
 800f35a:	d9ee      	bls.n	800f33a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800f35c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f35e:	4618      	mov	r0, r3
 800f360:	3720      	adds	r7, #32
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}
 800f366:	bf00      	nop
 800f368:	24000a6c 	.word	0x24000a6c

0800f36c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b088      	sub	sp, #32
 800f370:	af00      	add	r7, sp, #0
 800f372:	60b9      	str	r1, [r7, #8]
 800f374:	607a      	str	r2, [r7, #4]
 800f376:	603b      	str	r3, [r7, #0]
 800f378:	4603      	mov	r3, r0
 800f37a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f37c:	2301      	movs	r3, #1
 800f37e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f380:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f384:	f7ff ff1d 	bl	800f1c2 <SD_CheckStatusWithTimeout>
 800f388:	4603      	mov	r3, r0
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	da01      	bge.n	800f392 <SD_write+0x26>
  {
    return res;
 800f38e:	7ffb      	ldrb	r3, [r7, #31]
 800f390:	e02d      	b.n	800f3ee <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f392:	683a      	ldr	r2, [r7, #0]
 800f394:	6879      	ldr	r1, [r7, #4]
 800f396:	68b8      	ldr	r0, [r7, #8]
 800f398:	f7ff feba 	bl	800f110 <BSP_SD_WriteBlocks_DMA>
 800f39c:	4603      	mov	r3, r0
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d124      	bne.n	800f3ec <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f3a2:	4b15      	ldr	r3, [pc, #84]	@ (800f3f8 <SD_write+0x8c>)
 800f3a4:	6818      	ldr	r0, [r3, #0]
 800f3a6:	f107 0112 	add.w	r1, r7, #18
 800f3aa:	f247 5330 	movw	r3, #30000	@ 0x7530
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	f003 fb18 	bl	80129e4 <osMessageQueueGet>
 800f3b4:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800f3b6:	69bb      	ldr	r3, [r7, #24]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d117      	bne.n	800f3ec <SD_write+0x80>
 800f3bc:	8a7b      	ldrh	r3, [r7, #18]
 800f3be:	2b02      	cmp	r3, #2
 800f3c0:	d114      	bne.n	800f3ec <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800f3c2:	f003 f82b 	bl	801241c <osKernelGetTickCount>
 800f3c6:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800f3c8:	e007      	b.n	800f3da <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f3ca:	f7ff febb 	bl	800f144 <BSP_SD_GetCardState>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d102      	bne.n	800f3da <SD_write+0x6e>
          {
            res = RES_OK;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	77fb      	strb	r3, [r7, #31]
            break;
 800f3d8:	e008      	b.n	800f3ec <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800f3da:	f003 f81f 	bl	801241c <osKernelGetTickCount>
 800f3de:	4602      	mov	r2, r0
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	1ad3      	subs	r3, r2, r3
 800f3e4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f3e8:	4293      	cmp	r3, r2
 800f3ea:	d9ee      	bls.n	800f3ca <SD_write+0x5e>
    }

  }
#endif

  return res;
 800f3ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3720      	adds	r7, #32
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	24000a6c 	.word	0x24000a6c

0800f3fc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b08c      	sub	sp, #48	@ 0x30
 800f400:	af00      	add	r7, sp, #0
 800f402:	4603      	mov	r3, r0
 800f404:	603a      	str	r2, [r7, #0]
 800f406:	71fb      	strb	r3, [r7, #7]
 800f408:	460b      	mov	r3, r1
 800f40a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f40c:	2301      	movs	r3, #1
 800f40e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f412:	4b25      	ldr	r3, [pc, #148]	@ (800f4a8 <SD_ioctl+0xac>)
 800f414:	781b      	ldrb	r3, [r3, #0]
 800f416:	b2db      	uxtb	r3, r3
 800f418:	f003 0301 	and.w	r3, r3, #1
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d001      	beq.n	800f424 <SD_ioctl+0x28>
 800f420:	2303      	movs	r3, #3
 800f422:	e03c      	b.n	800f49e <SD_ioctl+0xa2>

  switch (cmd)
 800f424:	79bb      	ldrb	r3, [r7, #6]
 800f426:	2b03      	cmp	r3, #3
 800f428:	d834      	bhi.n	800f494 <SD_ioctl+0x98>
 800f42a:	a201      	add	r2, pc, #4	@ (adr r2, 800f430 <SD_ioctl+0x34>)
 800f42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f430:	0800f441 	.word	0x0800f441
 800f434:	0800f449 	.word	0x0800f449
 800f438:	0800f461 	.word	0x0800f461
 800f43c:	0800f47b 	.word	0x0800f47b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f440:	2300      	movs	r3, #0
 800f442:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f446:	e028      	b.n	800f49a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f448:	f107 0308 	add.w	r3, r7, #8
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7ff fe89 	bl	800f164 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f452:	6a3a      	ldr	r2, [r7, #32]
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f458:	2300      	movs	r3, #0
 800f45a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f45e:	e01c      	b.n	800f49a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f460:	f107 0308 	add.w	r3, r7, #8
 800f464:	4618      	mov	r0, r3
 800f466:	f7ff fe7d 	bl	800f164 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f46c:	b29a      	uxth	r2, r3
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f472:	2300      	movs	r3, #0
 800f474:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f478:	e00f      	b.n	800f49a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f47a:	f107 0308 	add.w	r3, r7, #8
 800f47e:	4618      	mov	r0, r3
 800f480:	f7ff fe70 	bl	800f164 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f486:	0a5a      	lsrs	r2, r3, #9
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f48c:	2300      	movs	r3, #0
 800f48e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f492:	e002      	b.n	800f49a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f494:	2304      	movs	r3, #4
 800f496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f49a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3730      	adds	r7, #48	@ 0x30
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}
 800f4a6:	bf00      	nop
 800f4a8:	2400000d 	.word	0x2400000d

0800f4ac <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800f4b2:	2302      	movs	r3, #2
 800f4b4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800f4b6:	4b05      	ldr	r3, [pc, #20]	@ (800f4cc <BSP_SD_WriteCpltCallback+0x20>)
 800f4b8:	6818      	ldr	r0, [r3, #0]
 800f4ba:	1db9      	adds	r1, r7, #6
 800f4bc:	2300      	movs	r3, #0
 800f4be:	2200      	movs	r2, #0
 800f4c0:	f003 fa30 	bl	8012924 <osMessageQueuePut>
#endif
}
 800f4c4:	bf00      	nop
 800f4c6:	3708      	adds	r7, #8
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	24000a6c 	.word	0x24000a6c

0800f4d0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800f4da:	4b05      	ldr	r3, [pc, #20]	@ (800f4f0 <BSP_SD_ReadCpltCallback+0x20>)
 800f4dc:	6818      	ldr	r0, [r3, #0]
 800f4de:	1db9      	adds	r1, r7, #6
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	f003 fa1e 	bl	8012924 <osMessageQueuePut>
#endif
}
 800f4e8:	bf00      	nop
 800f4ea:	3708      	adds	r7, #8
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}
 800f4f0:	24000a6c 	.word	0x24000a6c

0800f4f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b084      	sub	sp, #16
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f4fe:	79fb      	ldrb	r3, [r7, #7]
 800f500:	4a08      	ldr	r2, [pc, #32]	@ (800f524 <disk_status+0x30>)
 800f502:	009b      	lsls	r3, r3, #2
 800f504:	4413      	add	r3, r2
 800f506:	685b      	ldr	r3, [r3, #4]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	79fa      	ldrb	r2, [r7, #7]
 800f50c:	4905      	ldr	r1, [pc, #20]	@ (800f524 <disk_status+0x30>)
 800f50e:	440a      	add	r2, r1
 800f510:	7a12      	ldrb	r2, [r2, #8]
 800f512:	4610      	mov	r0, r2
 800f514:	4798      	blx	r3
 800f516:	4603      	mov	r3, r0
 800f518:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3710      	adds	r7, #16
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}
 800f524:	24000a98 	.word	0x24000a98

0800f528 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b084      	sub	sp, #16
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	4603      	mov	r3, r0
 800f530:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f532:	2300      	movs	r3, #0
 800f534:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f536:	79fb      	ldrb	r3, [r7, #7]
 800f538:	4a0d      	ldr	r2, [pc, #52]	@ (800f570 <disk_initialize+0x48>)
 800f53a:	5cd3      	ldrb	r3, [r2, r3]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d111      	bne.n	800f564 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f540:	79fb      	ldrb	r3, [r7, #7]
 800f542:	4a0b      	ldr	r2, [pc, #44]	@ (800f570 <disk_initialize+0x48>)
 800f544:	2101      	movs	r1, #1
 800f546:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f548:	79fb      	ldrb	r3, [r7, #7]
 800f54a:	4a09      	ldr	r2, [pc, #36]	@ (800f570 <disk_initialize+0x48>)
 800f54c:	009b      	lsls	r3, r3, #2
 800f54e:	4413      	add	r3, r2
 800f550:	685b      	ldr	r3, [r3, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	79fa      	ldrb	r2, [r7, #7]
 800f556:	4906      	ldr	r1, [pc, #24]	@ (800f570 <disk_initialize+0x48>)
 800f558:	440a      	add	r2, r1
 800f55a:	7a12      	ldrb	r2, [r2, #8]
 800f55c:	4610      	mov	r0, r2
 800f55e:	4798      	blx	r3
 800f560:	4603      	mov	r3, r0
 800f562:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f564:	7bfb      	ldrb	r3, [r7, #15]
}
 800f566:	4618      	mov	r0, r3
 800f568:	3710      	adds	r7, #16
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
 800f56e:	bf00      	nop
 800f570:	24000a98 	.word	0x24000a98

0800f574 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f574:	b590      	push	{r4, r7, lr}
 800f576:	b087      	sub	sp, #28
 800f578:	af00      	add	r7, sp, #0
 800f57a:	60b9      	str	r1, [r7, #8]
 800f57c:	607a      	str	r2, [r7, #4]
 800f57e:	603b      	str	r3, [r7, #0]
 800f580:	4603      	mov	r3, r0
 800f582:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f584:	7bfb      	ldrb	r3, [r7, #15]
 800f586:	4a0a      	ldr	r2, [pc, #40]	@ (800f5b0 <disk_read+0x3c>)
 800f588:	009b      	lsls	r3, r3, #2
 800f58a:	4413      	add	r3, r2
 800f58c:	685b      	ldr	r3, [r3, #4]
 800f58e:	689c      	ldr	r4, [r3, #8]
 800f590:	7bfb      	ldrb	r3, [r7, #15]
 800f592:	4a07      	ldr	r2, [pc, #28]	@ (800f5b0 <disk_read+0x3c>)
 800f594:	4413      	add	r3, r2
 800f596:	7a18      	ldrb	r0, [r3, #8]
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	687a      	ldr	r2, [r7, #4]
 800f59c:	68b9      	ldr	r1, [r7, #8]
 800f59e:	47a0      	blx	r4
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	75fb      	strb	r3, [r7, #23]
  return res;
 800f5a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	371c      	adds	r7, #28
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd90      	pop	{r4, r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	24000a98 	.word	0x24000a98

0800f5b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f5b4:	b590      	push	{r4, r7, lr}
 800f5b6:	b087      	sub	sp, #28
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	60b9      	str	r1, [r7, #8]
 800f5bc:	607a      	str	r2, [r7, #4]
 800f5be:	603b      	str	r3, [r7, #0]
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f5c4:	7bfb      	ldrb	r3, [r7, #15]
 800f5c6:	4a0a      	ldr	r2, [pc, #40]	@ (800f5f0 <disk_write+0x3c>)
 800f5c8:	009b      	lsls	r3, r3, #2
 800f5ca:	4413      	add	r3, r2
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	68dc      	ldr	r4, [r3, #12]
 800f5d0:	7bfb      	ldrb	r3, [r7, #15]
 800f5d2:	4a07      	ldr	r2, [pc, #28]	@ (800f5f0 <disk_write+0x3c>)
 800f5d4:	4413      	add	r3, r2
 800f5d6:	7a18      	ldrb	r0, [r3, #8]
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	687a      	ldr	r2, [r7, #4]
 800f5dc:	68b9      	ldr	r1, [r7, #8]
 800f5de:	47a0      	blx	r4
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	75fb      	strb	r3, [r7, #23]
  return res;
 800f5e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	371c      	adds	r7, #28
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd90      	pop	{r4, r7, pc}
 800f5ee:	bf00      	nop
 800f5f0:	24000a98 	.word	0x24000a98

0800f5f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b084      	sub	sp, #16
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	603a      	str	r2, [r7, #0]
 800f5fe:	71fb      	strb	r3, [r7, #7]
 800f600:	460b      	mov	r3, r1
 800f602:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f604:	79fb      	ldrb	r3, [r7, #7]
 800f606:	4a09      	ldr	r2, [pc, #36]	@ (800f62c <disk_ioctl+0x38>)
 800f608:	009b      	lsls	r3, r3, #2
 800f60a:	4413      	add	r3, r2
 800f60c:	685b      	ldr	r3, [r3, #4]
 800f60e:	691b      	ldr	r3, [r3, #16]
 800f610:	79fa      	ldrb	r2, [r7, #7]
 800f612:	4906      	ldr	r1, [pc, #24]	@ (800f62c <disk_ioctl+0x38>)
 800f614:	440a      	add	r2, r1
 800f616:	7a10      	ldrb	r0, [r2, #8]
 800f618:	79b9      	ldrb	r1, [r7, #6]
 800f61a:	683a      	ldr	r2, [r7, #0]
 800f61c:	4798      	blx	r3
 800f61e:	4603      	mov	r3, r0
 800f620:	73fb      	strb	r3, [r7, #15]
  return res;
 800f622:	7bfb      	ldrb	r3, [r7, #15]
}
 800f624:	4618      	mov	r0, r3
 800f626:	3710      	adds	r7, #16
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}
 800f62c:	24000a98 	.word	0x24000a98

0800f630 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f630:	b480      	push	{r7}
 800f632:	b085      	sub	sp, #20
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	3301      	adds	r3, #1
 800f63c:	781b      	ldrb	r3, [r3, #0]
 800f63e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f640:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f644:	021b      	lsls	r3, r3, #8
 800f646:	b21a      	sxth	r2, r3
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	b21b      	sxth	r3, r3
 800f64e:	4313      	orrs	r3, r2
 800f650:	b21b      	sxth	r3, r3
 800f652:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f654:	89fb      	ldrh	r3, [r7, #14]
}
 800f656:	4618      	mov	r0, r3
 800f658:	3714      	adds	r7, #20
 800f65a:	46bd      	mov	sp, r7
 800f65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f660:	4770      	bx	lr

0800f662 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f662:	b480      	push	{r7}
 800f664:	b085      	sub	sp, #20
 800f666:	af00      	add	r7, sp, #0
 800f668:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	3303      	adds	r3, #3
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	021b      	lsls	r3, r3, #8
 800f676:	687a      	ldr	r2, [r7, #4]
 800f678:	3202      	adds	r2, #2
 800f67a:	7812      	ldrb	r2, [r2, #0]
 800f67c:	4313      	orrs	r3, r2
 800f67e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	021b      	lsls	r3, r3, #8
 800f684:	687a      	ldr	r2, [r7, #4]
 800f686:	3201      	adds	r2, #1
 800f688:	7812      	ldrb	r2, [r2, #0]
 800f68a:	4313      	orrs	r3, r2
 800f68c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	021b      	lsls	r3, r3, #8
 800f692:	687a      	ldr	r2, [r7, #4]
 800f694:	7812      	ldrb	r2, [r2, #0]
 800f696:	4313      	orrs	r3, r2
 800f698:	60fb      	str	r3, [r7, #12]
	return rv;
 800f69a:	68fb      	ldr	r3, [r7, #12]
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3714      	adds	r7, #20
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a6:	4770      	bx	lr

0800f6a8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b083      	sub	sp, #12
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
 800f6b0:	460b      	mov	r3, r1
 800f6b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	1c5a      	adds	r2, r3, #1
 800f6b8:	607a      	str	r2, [r7, #4]
 800f6ba:	887a      	ldrh	r2, [r7, #2]
 800f6bc:	b2d2      	uxtb	r2, r2
 800f6be:	701a      	strb	r2, [r3, #0]
 800f6c0:	887b      	ldrh	r3, [r7, #2]
 800f6c2:	0a1b      	lsrs	r3, r3, #8
 800f6c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	1c5a      	adds	r2, r3, #1
 800f6ca:	607a      	str	r2, [r7, #4]
 800f6cc:	887a      	ldrh	r2, [r7, #2]
 800f6ce:	b2d2      	uxtb	r2, r2
 800f6d0:	701a      	strb	r2, [r3, #0]
}
 800f6d2:	bf00      	nop
 800f6d4:	370c      	adds	r7, #12
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr

0800f6de <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f6de:	b480      	push	{r7}
 800f6e0:	b083      	sub	sp, #12
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	6078      	str	r0, [r7, #4]
 800f6e6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	1c5a      	adds	r2, r3, #1
 800f6ec:	607a      	str	r2, [r7, #4]
 800f6ee:	683a      	ldr	r2, [r7, #0]
 800f6f0:	b2d2      	uxtb	r2, r2
 800f6f2:	701a      	strb	r2, [r3, #0]
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	0a1b      	lsrs	r3, r3, #8
 800f6f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	1c5a      	adds	r2, r3, #1
 800f6fe:	607a      	str	r2, [r7, #4]
 800f700:	683a      	ldr	r2, [r7, #0]
 800f702:	b2d2      	uxtb	r2, r2
 800f704:	701a      	strb	r2, [r3, #0]
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	0a1b      	lsrs	r3, r3, #8
 800f70a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	1c5a      	adds	r2, r3, #1
 800f710:	607a      	str	r2, [r7, #4]
 800f712:	683a      	ldr	r2, [r7, #0]
 800f714:	b2d2      	uxtb	r2, r2
 800f716:	701a      	strb	r2, [r3, #0]
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	0a1b      	lsrs	r3, r3, #8
 800f71c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	1c5a      	adds	r2, r3, #1
 800f722:	607a      	str	r2, [r7, #4]
 800f724:	683a      	ldr	r2, [r7, #0]
 800f726:	b2d2      	uxtb	r2, r2
 800f728:	701a      	strb	r2, [r3, #0]
}
 800f72a:	bf00      	nop
 800f72c:	370c      	adds	r7, #12
 800f72e:	46bd      	mov	sp, r7
 800f730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f734:	4770      	bx	lr

0800f736 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f736:	b480      	push	{r7}
 800f738:	b087      	sub	sp, #28
 800f73a:	af00      	add	r7, sp, #0
 800f73c:	60f8      	str	r0, [r7, #12]
 800f73e:	60b9      	str	r1, [r7, #8]
 800f740:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d00d      	beq.n	800f76c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f750:	693a      	ldr	r2, [r7, #16]
 800f752:	1c53      	adds	r3, r2, #1
 800f754:	613b      	str	r3, [r7, #16]
 800f756:	697b      	ldr	r3, [r7, #20]
 800f758:	1c59      	adds	r1, r3, #1
 800f75a:	6179      	str	r1, [r7, #20]
 800f75c:	7812      	ldrb	r2, [r2, #0]
 800f75e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	3b01      	subs	r3, #1
 800f764:	607b      	str	r3, [r7, #4]
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d1f1      	bne.n	800f750 <mem_cpy+0x1a>
	}
}
 800f76c:	bf00      	nop
 800f76e:	371c      	adds	r7, #28
 800f770:	46bd      	mov	sp, r7
 800f772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f776:	4770      	bx	lr

0800f778 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f778:	b480      	push	{r7}
 800f77a:	b087      	sub	sp, #28
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	60b9      	str	r1, [r7, #8]
 800f782:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	1c5a      	adds	r2, r3, #1
 800f78c:	617a      	str	r2, [r7, #20]
 800f78e:	68ba      	ldr	r2, [r7, #8]
 800f790:	b2d2      	uxtb	r2, r2
 800f792:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	3b01      	subs	r3, #1
 800f798:	607b      	str	r3, [r7, #4]
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d1f3      	bne.n	800f788 <mem_set+0x10>
}
 800f7a0:	bf00      	nop
 800f7a2:	bf00      	nop
 800f7a4:	371c      	adds	r7, #28
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ac:	4770      	bx	lr

0800f7ae <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f7ae:	b480      	push	{r7}
 800f7b0:	b089      	sub	sp, #36	@ 0x24
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	60f8      	str	r0, [r7, #12]
 800f7b6:	60b9      	str	r1, [r7, #8]
 800f7b8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	61fb      	str	r3, [r7, #28]
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f7c6:	69fb      	ldr	r3, [r7, #28]
 800f7c8:	1c5a      	adds	r2, r3, #1
 800f7ca:	61fa      	str	r2, [r7, #28]
 800f7cc:	781b      	ldrb	r3, [r3, #0]
 800f7ce:	4619      	mov	r1, r3
 800f7d0:	69bb      	ldr	r3, [r7, #24]
 800f7d2:	1c5a      	adds	r2, r3, #1
 800f7d4:	61ba      	str	r2, [r7, #24]
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	1acb      	subs	r3, r1, r3
 800f7da:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	3b01      	subs	r3, #1
 800f7e0:	607b      	str	r3, [r7, #4]
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d002      	beq.n	800f7ee <mem_cmp+0x40>
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d0eb      	beq.n	800f7c6 <mem_cmp+0x18>

	return r;
 800f7ee:	697b      	ldr	r3, [r7, #20]
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3724      	adds	r7, #36	@ 0x24
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr

0800f7fc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f806:	e002      	b.n	800f80e <chk_chr+0x12>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	3301      	adds	r3, #1
 800f80c:	607b      	str	r3, [r7, #4]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	781b      	ldrb	r3, [r3, #0]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d005      	beq.n	800f822 <chk_chr+0x26>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	781b      	ldrb	r3, [r3, #0]
 800f81a:	461a      	mov	r2, r3
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	4293      	cmp	r3, r2
 800f820:	d1f2      	bne.n	800f808 <chk_chr+0xc>
	return *str;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	781b      	ldrb	r3, [r3, #0]
}
 800f826:	4618      	mov	r0, r3
 800f828:	370c      	adds	r7, #12
 800f82a:	46bd      	mov	sp, r7
 800f82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f830:	4770      	bx	lr

0800f832 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800f832:	b580      	push	{r7, lr}
 800f834:	b082      	sub	sp, #8
 800f836:	af00      	add	r7, sp, #0
 800f838:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d009      	beq.n	800f854 <lock_fs+0x22>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	68db      	ldr	r3, [r3, #12]
 800f844:	4618      	mov	r0, r3
 800f846:	f002 fd19 	bl	801227c <ff_req_grant>
 800f84a:	4603      	mov	r3, r0
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d001      	beq.n	800f854 <lock_fs+0x22>
 800f850:	2301      	movs	r3, #1
 800f852:	e000      	b.n	800f856 <lock_fs+0x24>
 800f854:	2300      	movs	r3, #0
}
 800f856:	4618      	mov	r0, r3
 800f858:	3708      	adds	r7, #8
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}

0800f85e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800f85e:	b580      	push	{r7, lr}
 800f860:	b082      	sub	sp, #8
 800f862:	af00      	add	r7, sp, #0
 800f864:	6078      	str	r0, [r7, #4]
 800f866:	460b      	mov	r3, r1
 800f868:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d00d      	beq.n	800f88c <unlock_fs+0x2e>
 800f870:	78fb      	ldrb	r3, [r7, #3]
 800f872:	2b0c      	cmp	r3, #12
 800f874:	d00a      	beq.n	800f88c <unlock_fs+0x2e>
 800f876:	78fb      	ldrb	r3, [r7, #3]
 800f878:	2b0b      	cmp	r3, #11
 800f87a:	d007      	beq.n	800f88c <unlock_fs+0x2e>
 800f87c:	78fb      	ldrb	r3, [r7, #3]
 800f87e:	2b0f      	cmp	r3, #15
 800f880:	d004      	beq.n	800f88c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	68db      	ldr	r3, [r3, #12]
 800f886:	4618      	mov	r0, r3
 800f888:	f002 fd0d 	bl	80122a6 <ff_rel_grant>
	}
}
 800f88c:	bf00      	nop
 800f88e:	3708      	adds	r7, #8
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f894:	b480      	push	{r7}
 800f896:	b085      	sub	sp, #20
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f89e:	2300      	movs	r3, #0
 800f8a0:	60bb      	str	r3, [r7, #8]
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	60fb      	str	r3, [r7, #12]
 800f8a6:	e029      	b.n	800f8fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f8a8:	4a27      	ldr	r2, [pc, #156]	@ (800f948 <chk_lock+0xb4>)
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	011b      	lsls	r3, r3, #4
 800f8ae:	4413      	add	r3, r2
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d01d      	beq.n	800f8f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f8b6:	4a24      	ldr	r2, [pc, #144]	@ (800f948 <chk_lock+0xb4>)
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	011b      	lsls	r3, r3, #4
 800f8bc:	4413      	add	r3, r2
 800f8be:	681a      	ldr	r2, [r3, #0]
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d116      	bne.n	800f8f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f8c8:	4a1f      	ldr	r2, [pc, #124]	@ (800f948 <chk_lock+0xb4>)
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	011b      	lsls	r3, r3, #4
 800f8ce:	4413      	add	r3, r2
 800f8d0:	3304      	adds	r3, #4
 800f8d2:	681a      	ldr	r2, [r3, #0]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d10c      	bne.n	800f8f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f8dc:	4a1a      	ldr	r2, [pc, #104]	@ (800f948 <chk_lock+0xb4>)
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	011b      	lsls	r3, r3, #4
 800f8e2:	4413      	add	r3, r2
 800f8e4:	3308      	adds	r3, #8
 800f8e6:	681a      	ldr	r2, [r3, #0]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d102      	bne.n	800f8f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f8f0:	e007      	b.n	800f902 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	3301      	adds	r3, #1
 800f8fa:	60fb      	str	r3, [r7, #12]
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	2b01      	cmp	r3, #1
 800f900:	d9d2      	bls.n	800f8a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2b02      	cmp	r3, #2
 800f906:	d109      	bne.n	800f91c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d102      	bne.n	800f914 <chk_lock+0x80>
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	2b02      	cmp	r3, #2
 800f912:	d101      	bne.n	800f918 <chk_lock+0x84>
 800f914:	2300      	movs	r3, #0
 800f916:	e010      	b.n	800f93a <chk_lock+0xa6>
 800f918:	2312      	movs	r3, #18
 800f91a:	e00e      	b.n	800f93a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d108      	bne.n	800f934 <chk_lock+0xa0>
 800f922:	4a09      	ldr	r2, [pc, #36]	@ (800f948 <chk_lock+0xb4>)
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	011b      	lsls	r3, r3, #4
 800f928:	4413      	add	r3, r2
 800f92a:	330c      	adds	r3, #12
 800f92c:	881b      	ldrh	r3, [r3, #0]
 800f92e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f932:	d101      	bne.n	800f938 <chk_lock+0xa4>
 800f934:	2310      	movs	r3, #16
 800f936:	e000      	b.n	800f93a <chk_lock+0xa6>
 800f938:	2300      	movs	r3, #0
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3714      	adds	r7, #20
 800f93e:	46bd      	mov	sp, r7
 800f940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f944:	4770      	bx	lr
 800f946:	bf00      	nop
 800f948:	24000a78 	.word	0x24000a78

0800f94c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f94c:	b480      	push	{r7}
 800f94e:	b083      	sub	sp, #12
 800f950:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f952:	2300      	movs	r3, #0
 800f954:	607b      	str	r3, [r7, #4]
 800f956:	e002      	b.n	800f95e <enq_lock+0x12>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	3301      	adds	r3, #1
 800f95c:	607b      	str	r3, [r7, #4]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2b01      	cmp	r3, #1
 800f962:	d806      	bhi.n	800f972 <enq_lock+0x26>
 800f964:	4a09      	ldr	r2, [pc, #36]	@ (800f98c <enq_lock+0x40>)
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	011b      	lsls	r3, r3, #4
 800f96a:	4413      	add	r3, r2
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d1f2      	bne.n	800f958 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2b02      	cmp	r3, #2
 800f976:	bf14      	ite	ne
 800f978:	2301      	movne	r3, #1
 800f97a:	2300      	moveq	r3, #0
 800f97c:	b2db      	uxtb	r3, r3
}
 800f97e:	4618      	mov	r0, r3
 800f980:	370c      	adds	r7, #12
 800f982:	46bd      	mov	sp, r7
 800f984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f988:	4770      	bx	lr
 800f98a:	bf00      	nop
 800f98c:	24000a78 	.word	0x24000a78

0800f990 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f990:	b480      	push	{r7}
 800f992:	b085      	sub	sp, #20
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f99a:	2300      	movs	r3, #0
 800f99c:	60fb      	str	r3, [r7, #12]
 800f99e:	e01f      	b.n	800f9e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f9a0:	4a41      	ldr	r2, [pc, #260]	@ (800faa8 <inc_lock+0x118>)
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	011b      	lsls	r3, r3, #4
 800f9a6:	4413      	add	r3, r2
 800f9a8:	681a      	ldr	r2, [r3, #0]
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d113      	bne.n	800f9da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f9b2:	4a3d      	ldr	r2, [pc, #244]	@ (800faa8 <inc_lock+0x118>)
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	011b      	lsls	r3, r3, #4
 800f9b8:	4413      	add	r3, r2
 800f9ba:	3304      	adds	r3, #4
 800f9bc:	681a      	ldr	r2, [r3, #0]
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d109      	bne.n	800f9da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f9c6:	4a38      	ldr	r2, [pc, #224]	@ (800faa8 <inc_lock+0x118>)
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	011b      	lsls	r3, r3, #4
 800f9cc:	4413      	add	r3, r2
 800f9ce:	3308      	adds	r3, #8
 800f9d0:	681a      	ldr	r2, [r3, #0]
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d006      	beq.n	800f9e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	3301      	adds	r3, #1
 800f9de:	60fb      	str	r3, [r7, #12]
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	d9dc      	bls.n	800f9a0 <inc_lock+0x10>
 800f9e6:	e000      	b.n	800f9ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f9e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	2b02      	cmp	r3, #2
 800f9ee:	d132      	bne.n	800fa56 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	60fb      	str	r3, [r7, #12]
 800f9f4:	e002      	b.n	800f9fc <inc_lock+0x6c>
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	60fb      	str	r3, [r7, #12]
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	2b01      	cmp	r3, #1
 800fa00:	d806      	bhi.n	800fa10 <inc_lock+0x80>
 800fa02:	4a29      	ldr	r2, [pc, #164]	@ (800faa8 <inc_lock+0x118>)
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	011b      	lsls	r3, r3, #4
 800fa08:	4413      	add	r3, r2
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d1f2      	bne.n	800f9f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2b02      	cmp	r3, #2
 800fa14:	d101      	bne.n	800fa1a <inc_lock+0x8a>
 800fa16:	2300      	movs	r3, #0
 800fa18:	e040      	b.n	800fa9c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681a      	ldr	r2, [r3, #0]
 800fa1e:	4922      	ldr	r1, [pc, #136]	@ (800faa8 <inc_lock+0x118>)
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	011b      	lsls	r3, r3, #4
 800fa24:	440b      	add	r3, r1
 800fa26:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	689a      	ldr	r2, [r3, #8]
 800fa2c:	491e      	ldr	r1, [pc, #120]	@ (800faa8 <inc_lock+0x118>)
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	011b      	lsls	r3, r3, #4
 800fa32:	440b      	add	r3, r1
 800fa34:	3304      	adds	r3, #4
 800fa36:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	695a      	ldr	r2, [r3, #20]
 800fa3c:	491a      	ldr	r1, [pc, #104]	@ (800faa8 <inc_lock+0x118>)
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	011b      	lsls	r3, r3, #4
 800fa42:	440b      	add	r3, r1
 800fa44:	3308      	adds	r3, #8
 800fa46:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fa48:	4a17      	ldr	r2, [pc, #92]	@ (800faa8 <inc_lock+0x118>)
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	011b      	lsls	r3, r3, #4
 800fa4e:	4413      	add	r3, r2
 800fa50:	330c      	adds	r3, #12
 800fa52:	2200      	movs	r2, #0
 800fa54:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d009      	beq.n	800fa70 <inc_lock+0xe0>
 800fa5c:	4a12      	ldr	r2, [pc, #72]	@ (800faa8 <inc_lock+0x118>)
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	011b      	lsls	r3, r3, #4
 800fa62:	4413      	add	r3, r2
 800fa64:	330c      	adds	r3, #12
 800fa66:	881b      	ldrh	r3, [r3, #0]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d001      	beq.n	800fa70 <inc_lock+0xe0>
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	e015      	b.n	800fa9c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d108      	bne.n	800fa88 <inc_lock+0xf8>
 800fa76:	4a0c      	ldr	r2, [pc, #48]	@ (800faa8 <inc_lock+0x118>)
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	011b      	lsls	r3, r3, #4
 800fa7c:	4413      	add	r3, r2
 800fa7e:	330c      	adds	r3, #12
 800fa80:	881b      	ldrh	r3, [r3, #0]
 800fa82:	3301      	adds	r3, #1
 800fa84:	b29a      	uxth	r2, r3
 800fa86:	e001      	b.n	800fa8c <inc_lock+0xfc>
 800fa88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fa8c:	4906      	ldr	r1, [pc, #24]	@ (800faa8 <inc_lock+0x118>)
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	011b      	lsls	r3, r3, #4
 800fa92:	440b      	add	r3, r1
 800fa94:	330c      	adds	r3, #12
 800fa96:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	3301      	adds	r3, #1
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3714      	adds	r7, #20
 800faa0:	46bd      	mov	sp, r7
 800faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa6:	4770      	bx	lr
 800faa8:	24000a78 	.word	0x24000a78

0800faac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800faac:	b480      	push	{r7}
 800faae:	b085      	sub	sp, #20
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	3b01      	subs	r3, #1
 800fab8:	607b      	str	r3, [r7, #4]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2b01      	cmp	r3, #1
 800fabe:	d825      	bhi.n	800fb0c <dec_lock+0x60>
		n = Files[i].ctr;
 800fac0:	4a17      	ldr	r2, [pc, #92]	@ (800fb20 <dec_lock+0x74>)
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	011b      	lsls	r3, r3, #4
 800fac6:	4413      	add	r3, r2
 800fac8:	330c      	adds	r3, #12
 800faca:	881b      	ldrh	r3, [r3, #0]
 800facc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800face:	89fb      	ldrh	r3, [r7, #14]
 800fad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fad4:	d101      	bne.n	800fada <dec_lock+0x2e>
 800fad6:	2300      	movs	r3, #0
 800fad8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fada:	89fb      	ldrh	r3, [r7, #14]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d002      	beq.n	800fae6 <dec_lock+0x3a>
 800fae0:	89fb      	ldrh	r3, [r7, #14]
 800fae2:	3b01      	subs	r3, #1
 800fae4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fae6:	4a0e      	ldr	r2, [pc, #56]	@ (800fb20 <dec_lock+0x74>)
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	011b      	lsls	r3, r3, #4
 800faec:	4413      	add	r3, r2
 800faee:	330c      	adds	r3, #12
 800faf0:	89fa      	ldrh	r2, [r7, #14]
 800faf2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800faf4:	89fb      	ldrh	r3, [r7, #14]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d105      	bne.n	800fb06 <dec_lock+0x5a>
 800fafa:	4a09      	ldr	r2, [pc, #36]	@ (800fb20 <dec_lock+0x74>)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	011b      	lsls	r3, r3, #4
 800fb00:	4413      	add	r3, r2
 800fb02:	2200      	movs	r2, #0
 800fb04:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fb06:	2300      	movs	r3, #0
 800fb08:	737b      	strb	r3, [r7, #13]
 800fb0a:	e001      	b.n	800fb10 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fb0c:	2302      	movs	r3, #2
 800fb0e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fb10:	7b7b      	ldrb	r3, [r7, #13]
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	3714      	adds	r7, #20
 800fb16:	46bd      	mov	sp, r7
 800fb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1c:	4770      	bx	lr
 800fb1e:	bf00      	nop
 800fb20:	24000a78 	.word	0x24000a78

0800fb24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fb24:	b480      	push	{r7}
 800fb26:	b085      	sub	sp, #20
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	60fb      	str	r3, [r7, #12]
 800fb30:	e010      	b.n	800fb54 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fb32:	4a0d      	ldr	r2, [pc, #52]	@ (800fb68 <clear_lock+0x44>)
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	011b      	lsls	r3, r3, #4
 800fb38:	4413      	add	r3, r2
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	687a      	ldr	r2, [r7, #4]
 800fb3e:	429a      	cmp	r2, r3
 800fb40:	d105      	bne.n	800fb4e <clear_lock+0x2a>
 800fb42:	4a09      	ldr	r2, [pc, #36]	@ (800fb68 <clear_lock+0x44>)
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	011b      	lsls	r3, r3, #4
 800fb48:	4413      	add	r3, r2
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	3301      	adds	r3, #1
 800fb52:	60fb      	str	r3, [r7, #12]
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	2b01      	cmp	r3, #1
 800fb58:	d9eb      	bls.n	800fb32 <clear_lock+0xe>
	}
}
 800fb5a:	bf00      	nop
 800fb5c:	bf00      	nop
 800fb5e:	3714      	adds	r7, #20
 800fb60:	46bd      	mov	sp, r7
 800fb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb66:	4770      	bx	lr
 800fb68:	24000a78 	.word	0x24000a78

0800fb6c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b086      	sub	sp, #24
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fb74:	2300      	movs	r3, #0
 800fb76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	78db      	ldrb	r3, [r3, #3]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d034      	beq.n	800fbea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb84:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	7858      	ldrb	r0, [r3, #1]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800fb90:	2301      	movs	r3, #1
 800fb92:	697a      	ldr	r2, [r7, #20]
 800fb94:	f7ff fd0e 	bl	800f5b4 <disk_write>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d002      	beq.n	800fba4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800fb9e:	2301      	movs	r3, #1
 800fba0:	73fb      	strb	r3, [r7, #15]
 800fba2:	e022      	b.n	800fbea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2200      	movs	r2, #0
 800fba8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbae:	697a      	ldr	r2, [r7, #20]
 800fbb0:	1ad2      	subs	r2, r2, r3
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	69db      	ldr	r3, [r3, #28]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d217      	bcs.n	800fbea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	789b      	ldrb	r3, [r3, #2]
 800fbbe:	613b      	str	r3, [r7, #16]
 800fbc0:	e010      	b.n	800fbe4 <sync_window+0x78>
					wsect += fs->fsize;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	69db      	ldr	r3, [r3, #28]
 800fbc6:	697a      	ldr	r2, [r7, #20]
 800fbc8:	4413      	add	r3, r2
 800fbca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	7858      	ldrb	r0, [r3, #1]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	697a      	ldr	r2, [r7, #20]
 800fbda:	f7ff fceb 	bl	800f5b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	3b01      	subs	r3, #1
 800fbe2:	613b      	str	r3, [r7, #16]
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	2b01      	cmp	r3, #1
 800fbe8:	d8eb      	bhi.n	800fbc2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fbea:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3718      	adds	r7, #24
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}

0800fbf4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b084      	sub	sp, #16
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
 800fbfc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc06:	683a      	ldr	r2, [r7, #0]
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d01b      	beq.n	800fc44 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f7ff ffad 	bl	800fb6c <sync_window>
 800fc12:	4603      	mov	r3, r0
 800fc14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fc16:	7bfb      	ldrb	r3, [r7, #15]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d113      	bne.n	800fc44 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	7858      	ldrb	r0, [r3, #1]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800fc26:	2301      	movs	r3, #1
 800fc28:	683a      	ldr	r2, [r7, #0]
 800fc2a:	f7ff fca3 	bl	800f574 <disk_read>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d004      	beq.n	800fc3e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fc34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fc38:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	683a      	ldr	r2, [r7, #0]
 800fc42:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800fc44:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	3710      	adds	r7, #16
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd80      	pop	{r7, pc}
	...

0800fc50 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b084      	sub	sp, #16
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f7ff ff87 	bl	800fb6c <sync_window>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fc62:	7bfb      	ldrb	r3, [r7, #15]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d158      	bne.n	800fd1a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	781b      	ldrb	r3, [r3, #0]
 800fc6c:	2b03      	cmp	r3, #3
 800fc6e:	d148      	bne.n	800fd02 <sync_fs+0xb2>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	791b      	ldrb	r3, [r3, #4]
 800fc74:	2b01      	cmp	r3, #1
 800fc76:	d144      	bne.n	800fd02 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	3334      	adds	r3, #52	@ 0x34
 800fc7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc80:	2100      	movs	r1, #0
 800fc82:	4618      	mov	r0, r3
 800fc84:	f7ff fd78 	bl	800f778 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	3334      	adds	r3, #52	@ 0x34
 800fc8c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fc90:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7ff fd07 	bl	800f6a8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	3334      	adds	r3, #52	@ 0x34
 800fc9e:	4921      	ldr	r1, [pc, #132]	@ (800fd24 <sync_fs+0xd4>)
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7ff fd1c 	bl	800f6de <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	3334      	adds	r3, #52	@ 0x34
 800fcaa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fcae:	491e      	ldr	r1, [pc, #120]	@ (800fd28 <sync_fs+0xd8>)
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7ff fd14 	bl	800f6de <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	3334      	adds	r3, #52	@ 0x34
 800fcba:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	695b      	ldr	r3, [r3, #20]
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	4610      	mov	r0, r2
 800fcc6:	f7ff fd0a 	bl	800f6de <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	3334      	adds	r3, #52	@ 0x34
 800fcce:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	691b      	ldr	r3, [r3, #16]
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	4610      	mov	r0, r2
 800fcda:	f7ff fd00 	bl	800f6de <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6a1b      	ldr	r3, [r3, #32]
 800fce2:	1c5a      	adds	r2, r3, #1
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	7858      	ldrb	r0, [r3, #1]
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	f7ff fc5c 	bl	800f5b4 <disk_write>
			fs->fsi_flag = 0;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	785b      	ldrb	r3, [r3, #1]
 800fd06:	2200      	movs	r2, #0
 800fd08:	2100      	movs	r1, #0
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7ff fc72 	bl	800f5f4 <disk_ioctl>
 800fd10:	4603      	mov	r3, r0
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d001      	beq.n	800fd1a <sync_fs+0xca>
 800fd16:	2301      	movs	r3, #1
 800fd18:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fd1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	3710      	adds	r7, #16
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}
 800fd24:	41615252 	.word	0x41615252
 800fd28:	61417272 	.word	0x61417272

0800fd2c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	b083      	sub	sp, #12
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	3b02      	subs	r3, #2
 800fd3a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	699b      	ldr	r3, [r3, #24]
 800fd40:	3b02      	subs	r3, #2
 800fd42:	683a      	ldr	r2, [r7, #0]
 800fd44:	429a      	cmp	r2, r3
 800fd46:	d301      	bcc.n	800fd4c <clust2sect+0x20>
 800fd48:	2300      	movs	r3, #0
 800fd4a:	e008      	b.n	800fd5e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	895b      	ldrh	r3, [r3, #10]
 800fd50:	461a      	mov	r2, r3
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	fb03 f202 	mul.w	r2, r3, r2
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd5c:	4413      	add	r3, r2
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	370c      	adds	r7, #12
 800fd62:	46bd      	mov	sp, r7
 800fd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd68:	4770      	bx	lr

0800fd6a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fd6a:	b580      	push	{r7, lr}
 800fd6c:	b086      	sub	sp, #24
 800fd6e:	af00      	add	r7, sp, #0
 800fd70:	6078      	str	r0, [r7, #4]
 800fd72:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	2b01      	cmp	r3, #1
 800fd7e:	d904      	bls.n	800fd8a <get_fat+0x20>
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	699b      	ldr	r3, [r3, #24]
 800fd84:	683a      	ldr	r2, [r7, #0]
 800fd86:	429a      	cmp	r2, r3
 800fd88:	d302      	bcc.n	800fd90 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	617b      	str	r3, [r7, #20]
 800fd8e:	e08e      	b.n	800feae <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fd90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fd94:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	781b      	ldrb	r3, [r3, #0]
 800fd9a:	2b03      	cmp	r3, #3
 800fd9c:	d061      	beq.n	800fe62 <get_fat+0xf8>
 800fd9e:	2b03      	cmp	r3, #3
 800fda0:	dc7b      	bgt.n	800fe9a <get_fat+0x130>
 800fda2:	2b01      	cmp	r3, #1
 800fda4:	d002      	beq.n	800fdac <get_fat+0x42>
 800fda6:	2b02      	cmp	r3, #2
 800fda8:	d041      	beq.n	800fe2e <get_fat+0xc4>
 800fdaa:	e076      	b.n	800fe9a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	60fb      	str	r3, [r7, #12]
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	085b      	lsrs	r3, r3, #1
 800fdb4:	68fa      	ldr	r2, [r7, #12]
 800fdb6:	4413      	add	r3, r2
 800fdb8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	0a5b      	lsrs	r3, r3, #9
 800fdc2:	4413      	add	r3, r2
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	6938      	ldr	r0, [r7, #16]
 800fdc8:	f7ff ff14 	bl	800fbf4 <move_window>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d166      	bne.n	800fea0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	1c5a      	adds	r2, r3, #1
 800fdd6:	60fa      	str	r2, [r7, #12]
 800fdd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fddc:	693a      	ldr	r2, [r7, #16]
 800fdde:	4413      	add	r3, r2
 800fde0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fde4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fde6:	693b      	ldr	r3, [r7, #16]
 800fde8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	0a5b      	lsrs	r3, r3, #9
 800fdee:	4413      	add	r3, r2
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	6938      	ldr	r0, [r7, #16]
 800fdf4:	f7ff fefe 	bl	800fbf4 <move_window>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d152      	bne.n	800fea4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe04:	693a      	ldr	r2, [r7, #16]
 800fe06:	4413      	add	r3, r2
 800fe08:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fe0c:	021b      	lsls	r3, r3, #8
 800fe0e:	68ba      	ldr	r2, [r7, #8]
 800fe10:	4313      	orrs	r3, r2
 800fe12:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	f003 0301 	and.w	r3, r3, #1
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d002      	beq.n	800fe24 <get_fat+0xba>
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	091b      	lsrs	r3, r3, #4
 800fe22:	e002      	b.n	800fe2a <get_fat+0xc0>
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fe2a:	617b      	str	r3, [r7, #20]
			break;
 800fe2c:	e03f      	b.n	800feae <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fe2e:	693b      	ldr	r3, [r7, #16]
 800fe30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	0a1b      	lsrs	r3, r3, #8
 800fe36:	4413      	add	r3, r2
 800fe38:	4619      	mov	r1, r3
 800fe3a:	6938      	ldr	r0, [r7, #16]
 800fe3c:	f7ff feda 	bl	800fbf4 <move_window>
 800fe40:	4603      	mov	r3, r0
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d130      	bne.n	800fea8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fe46:	693b      	ldr	r3, [r7, #16]
 800fe48:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	005b      	lsls	r3, r3, #1
 800fe50:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fe54:	4413      	add	r3, r2
 800fe56:	4618      	mov	r0, r3
 800fe58:	f7ff fbea 	bl	800f630 <ld_word>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	617b      	str	r3, [r7, #20]
			break;
 800fe60:	e025      	b.n	800feae <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	09db      	lsrs	r3, r3, #7
 800fe6a:	4413      	add	r3, r2
 800fe6c:	4619      	mov	r1, r3
 800fe6e:	6938      	ldr	r0, [r7, #16]
 800fe70:	f7ff fec0 	bl	800fbf4 <move_window>
 800fe74:	4603      	mov	r3, r0
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d118      	bne.n	800feac <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fe7a:	693b      	ldr	r3, [r7, #16]
 800fe7c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	009b      	lsls	r3, r3, #2
 800fe84:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fe88:	4413      	add	r3, r2
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f7ff fbe9 	bl	800f662 <ld_dword>
 800fe90:	4603      	mov	r3, r0
 800fe92:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800fe96:	617b      	str	r3, [r7, #20]
			break;
 800fe98:	e009      	b.n	800feae <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	617b      	str	r3, [r7, #20]
 800fe9e:	e006      	b.n	800feae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fea0:	bf00      	nop
 800fea2:	e004      	b.n	800feae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fea4:	bf00      	nop
 800fea6:	e002      	b.n	800feae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fea8:	bf00      	nop
 800feaa:	e000      	b.n	800feae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800feac:	bf00      	nop
		}
	}

	return val;
 800feae:	697b      	ldr	r3, [r7, #20]
}
 800feb0:	4618      	mov	r0, r3
 800feb2:	3718      	adds	r7, #24
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}

0800feb8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800feb8:	b590      	push	{r4, r7, lr}
 800feba:	b089      	sub	sp, #36	@ 0x24
 800febc:	af00      	add	r7, sp, #0
 800febe:	60f8      	str	r0, [r7, #12]
 800fec0:	60b9      	str	r1, [r7, #8]
 800fec2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fec4:	2302      	movs	r3, #2
 800fec6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	2b01      	cmp	r3, #1
 800fecc:	f240 80d9 	bls.w	8010082 <put_fat+0x1ca>
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	699b      	ldr	r3, [r3, #24]
 800fed4:	68ba      	ldr	r2, [r7, #8]
 800fed6:	429a      	cmp	r2, r3
 800fed8:	f080 80d3 	bcs.w	8010082 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	781b      	ldrb	r3, [r3, #0]
 800fee0:	2b03      	cmp	r3, #3
 800fee2:	f000 8096 	beq.w	8010012 <put_fat+0x15a>
 800fee6:	2b03      	cmp	r3, #3
 800fee8:	f300 80cb 	bgt.w	8010082 <put_fat+0x1ca>
 800feec:	2b01      	cmp	r3, #1
 800feee:	d002      	beq.n	800fef6 <put_fat+0x3e>
 800fef0:	2b02      	cmp	r3, #2
 800fef2:	d06e      	beq.n	800ffd2 <put_fat+0x11a>
 800fef4:	e0c5      	b.n	8010082 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	61bb      	str	r3, [r7, #24]
 800fefa:	69bb      	ldr	r3, [r7, #24]
 800fefc:	085b      	lsrs	r3, r3, #1
 800fefe:	69ba      	ldr	r2, [r7, #24]
 800ff00:	4413      	add	r3, r2
 800ff02:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ff08:	69bb      	ldr	r3, [r7, #24]
 800ff0a:	0a5b      	lsrs	r3, r3, #9
 800ff0c:	4413      	add	r3, r2
 800ff0e:	4619      	mov	r1, r3
 800ff10:	68f8      	ldr	r0, [r7, #12]
 800ff12:	f7ff fe6f 	bl	800fbf4 <move_window>
 800ff16:	4603      	mov	r3, r0
 800ff18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ff1a:	7ffb      	ldrb	r3, [r7, #31]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	f040 80a9 	bne.w	8010074 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ff28:	69bb      	ldr	r3, [r7, #24]
 800ff2a:	1c59      	adds	r1, r3, #1
 800ff2c:	61b9      	str	r1, [r7, #24]
 800ff2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff32:	4413      	add	r3, r2
 800ff34:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	f003 0301 	and.w	r3, r3, #1
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d00d      	beq.n	800ff5c <put_fat+0xa4>
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	781b      	ldrb	r3, [r3, #0]
 800ff44:	b25b      	sxtb	r3, r3
 800ff46:	f003 030f 	and.w	r3, r3, #15
 800ff4a:	b25a      	sxtb	r2, r3
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	b25b      	sxtb	r3, r3
 800ff50:	011b      	lsls	r3, r3, #4
 800ff52:	b25b      	sxtb	r3, r3
 800ff54:	4313      	orrs	r3, r2
 800ff56:	b25b      	sxtb	r3, r3
 800ff58:	b2db      	uxtb	r3, r3
 800ff5a:	e001      	b.n	800ff60 <put_fat+0xa8>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	b2db      	uxtb	r3, r3
 800ff60:	697a      	ldr	r2, [r7, #20]
 800ff62:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	2201      	movs	r2, #1
 800ff68:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ff6e:	69bb      	ldr	r3, [r7, #24]
 800ff70:	0a5b      	lsrs	r3, r3, #9
 800ff72:	4413      	add	r3, r2
 800ff74:	4619      	mov	r1, r3
 800ff76:	68f8      	ldr	r0, [r7, #12]
 800ff78:	f7ff fe3c 	bl	800fbf4 <move_window>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ff80:	7ffb      	ldrb	r3, [r7, #31]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d178      	bne.n	8010078 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ff8c:	69bb      	ldr	r3, [r7, #24]
 800ff8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff92:	4413      	add	r3, r2
 800ff94:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	f003 0301 	and.w	r3, r3, #1
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d003      	beq.n	800ffa8 <put_fat+0xf0>
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	091b      	lsrs	r3, r3, #4
 800ffa4:	b2db      	uxtb	r3, r3
 800ffa6:	e00e      	b.n	800ffc6 <put_fat+0x10e>
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	b25b      	sxtb	r3, r3
 800ffae:	f023 030f 	bic.w	r3, r3, #15
 800ffb2:	b25a      	sxtb	r2, r3
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	0a1b      	lsrs	r3, r3, #8
 800ffb8:	b25b      	sxtb	r3, r3
 800ffba:	f003 030f 	and.w	r3, r3, #15
 800ffbe:	b25b      	sxtb	r3, r3
 800ffc0:	4313      	orrs	r3, r2
 800ffc2:	b25b      	sxtb	r3, r3
 800ffc4:	b2db      	uxtb	r3, r3
 800ffc6:	697a      	ldr	r2, [r7, #20]
 800ffc8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	2201      	movs	r2, #1
 800ffce:	70da      	strb	r2, [r3, #3]
			break;
 800ffd0:	e057      	b.n	8010082 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	0a1b      	lsrs	r3, r3, #8
 800ffda:	4413      	add	r3, r2
 800ffdc:	4619      	mov	r1, r3
 800ffde:	68f8      	ldr	r0, [r7, #12]
 800ffe0:	f7ff fe08 	bl	800fbf4 <move_window>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ffe8:	7ffb      	ldrb	r3, [r7, #31]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d146      	bne.n	801007c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	005b      	lsls	r3, r3, #1
 800fff8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fffc:	4413      	add	r3, r2
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	b292      	uxth	r2, r2
 8010002:	4611      	mov	r1, r2
 8010004:	4618      	mov	r0, r3
 8010006:	f7ff fb4f 	bl	800f6a8 <st_word>
			fs->wflag = 1;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	2201      	movs	r2, #1
 801000e:	70da      	strb	r2, [r3, #3]
			break;
 8010010:	e037      	b.n	8010082 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	09db      	lsrs	r3, r3, #7
 801001a:	4413      	add	r3, r2
 801001c:	4619      	mov	r1, r3
 801001e:	68f8      	ldr	r0, [r7, #12]
 8010020:	f7ff fde8 	bl	800fbf4 <move_window>
 8010024:	4603      	mov	r3, r0
 8010026:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010028:	7ffb      	ldrb	r3, [r7, #31]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d128      	bne.n	8010080 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	009b      	lsls	r3, r3, #2
 801003e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010042:	4413      	add	r3, r2
 8010044:	4618      	mov	r0, r3
 8010046:	f7ff fb0c 	bl	800f662 <ld_dword>
 801004a:	4603      	mov	r3, r0
 801004c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8010050:	4323      	orrs	r3, r4
 8010052:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	009b      	lsls	r3, r3, #2
 801005e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010062:	4413      	add	r3, r2
 8010064:	6879      	ldr	r1, [r7, #4]
 8010066:	4618      	mov	r0, r3
 8010068:	f7ff fb39 	bl	800f6de <st_dword>
			fs->wflag = 1;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	2201      	movs	r2, #1
 8010070:	70da      	strb	r2, [r3, #3]
			break;
 8010072:	e006      	b.n	8010082 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010074:	bf00      	nop
 8010076:	e004      	b.n	8010082 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010078:	bf00      	nop
 801007a:	e002      	b.n	8010082 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801007c:	bf00      	nop
 801007e:	e000      	b.n	8010082 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010080:	bf00      	nop
		}
	}
	return res;
 8010082:	7ffb      	ldrb	r3, [r7, #31]
}
 8010084:	4618      	mov	r0, r3
 8010086:	3724      	adds	r7, #36	@ 0x24
 8010088:	46bd      	mov	sp, r7
 801008a:	bd90      	pop	{r4, r7, pc}

0801008c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b088      	sub	sp, #32
 8010090:	af00      	add	r7, sp, #0
 8010092:	60f8      	str	r0, [r7, #12]
 8010094:	60b9      	str	r1, [r7, #8]
 8010096:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010098:	2300      	movs	r3, #0
 801009a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	2b01      	cmp	r3, #1
 80100a6:	d904      	bls.n	80100b2 <remove_chain+0x26>
 80100a8:	69bb      	ldr	r3, [r7, #24]
 80100aa:	699b      	ldr	r3, [r3, #24]
 80100ac:	68ba      	ldr	r2, [r7, #8]
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d301      	bcc.n	80100b6 <remove_chain+0x2a>
 80100b2:	2302      	movs	r3, #2
 80100b4:	e04b      	b.n	801014e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d00c      	beq.n	80100d6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80100bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80100c0:	6879      	ldr	r1, [r7, #4]
 80100c2:	69b8      	ldr	r0, [r7, #24]
 80100c4:	f7ff fef8 	bl	800feb8 <put_fat>
 80100c8:	4603      	mov	r3, r0
 80100ca:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80100cc:	7ffb      	ldrb	r3, [r7, #31]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d001      	beq.n	80100d6 <remove_chain+0x4a>
 80100d2:	7ffb      	ldrb	r3, [r7, #31]
 80100d4:	e03b      	b.n	801014e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80100d6:	68b9      	ldr	r1, [r7, #8]
 80100d8:	68f8      	ldr	r0, [r7, #12]
 80100da:	f7ff fe46 	bl	800fd6a <get_fat>
 80100de:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d031      	beq.n	801014a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	2b01      	cmp	r3, #1
 80100ea:	d101      	bne.n	80100f0 <remove_chain+0x64>
 80100ec:	2302      	movs	r3, #2
 80100ee:	e02e      	b.n	801014e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80100f6:	d101      	bne.n	80100fc <remove_chain+0x70>
 80100f8:	2301      	movs	r3, #1
 80100fa:	e028      	b.n	801014e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80100fc:	2200      	movs	r2, #0
 80100fe:	68b9      	ldr	r1, [r7, #8]
 8010100:	69b8      	ldr	r0, [r7, #24]
 8010102:	f7ff fed9 	bl	800feb8 <put_fat>
 8010106:	4603      	mov	r3, r0
 8010108:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801010a:	7ffb      	ldrb	r3, [r7, #31]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d001      	beq.n	8010114 <remove_chain+0x88>
 8010110:	7ffb      	ldrb	r3, [r7, #31]
 8010112:	e01c      	b.n	801014e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010114:	69bb      	ldr	r3, [r7, #24]
 8010116:	695a      	ldr	r2, [r3, #20]
 8010118:	69bb      	ldr	r3, [r7, #24]
 801011a:	699b      	ldr	r3, [r3, #24]
 801011c:	3b02      	subs	r3, #2
 801011e:	429a      	cmp	r2, r3
 8010120:	d20b      	bcs.n	801013a <remove_chain+0xae>
			fs->free_clst++;
 8010122:	69bb      	ldr	r3, [r7, #24]
 8010124:	695b      	ldr	r3, [r3, #20]
 8010126:	1c5a      	adds	r2, r3, #1
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801012c:	69bb      	ldr	r3, [r7, #24]
 801012e:	791b      	ldrb	r3, [r3, #4]
 8010130:	f043 0301 	orr.w	r3, r3, #1
 8010134:	b2da      	uxtb	r2, r3
 8010136:	69bb      	ldr	r3, [r7, #24]
 8010138:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801013e:	69bb      	ldr	r3, [r7, #24]
 8010140:	699b      	ldr	r3, [r3, #24]
 8010142:	68ba      	ldr	r2, [r7, #8]
 8010144:	429a      	cmp	r2, r3
 8010146:	d3c6      	bcc.n	80100d6 <remove_chain+0x4a>
 8010148:	e000      	b.n	801014c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801014a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801014c:	2300      	movs	r3, #0
}
 801014e:	4618      	mov	r0, r3
 8010150:	3720      	adds	r7, #32
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}

08010156 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010156:	b580      	push	{r7, lr}
 8010158:	b088      	sub	sp, #32
 801015a:	af00      	add	r7, sp, #0
 801015c:	6078      	str	r0, [r7, #4]
 801015e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d10d      	bne.n	8010188 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	691b      	ldr	r3, [r3, #16]
 8010170:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010172:	69bb      	ldr	r3, [r7, #24]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d004      	beq.n	8010182 <create_chain+0x2c>
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	699b      	ldr	r3, [r3, #24]
 801017c:	69ba      	ldr	r2, [r7, #24]
 801017e:	429a      	cmp	r2, r3
 8010180:	d31b      	bcc.n	80101ba <create_chain+0x64>
 8010182:	2301      	movs	r3, #1
 8010184:	61bb      	str	r3, [r7, #24]
 8010186:	e018      	b.n	80101ba <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010188:	6839      	ldr	r1, [r7, #0]
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f7ff fded 	bl	800fd6a <get_fat>
 8010190:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	2b01      	cmp	r3, #1
 8010196:	d801      	bhi.n	801019c <create_chain+0x46>
 8010198:	2301      	movs	r3, #1
 801019a:	e070      	b.n	801027e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80101a2:	d101      	bne.n	80101a8 <create_chain+0x52>
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	e06a      	b.n	801027e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80101a8:	693b      	ldr	r3, [r7, #16]
 80101aa:	699b      	ldr	r3, [r3, #24]
 80101ac:	68fa      	ldr	r2, [r7, #12]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d201      	bcs.n	80101b6 <create_chain+0x60>
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	e063      	b.n	801027e <create_chain+0x128>
		scl = clst;
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80101ba:	69bb      	ldr	r3, [r7, #24]
 80101bc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80101be:	69fb      	ldr	r3, [r7, #28]
 80101c0:	3301      	adds	r3, #1
 80101c2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80101c4:	693b      	ldr	r3, [r7, #16]
 80101c6:	699b      	ldr	r3, [r3, #24]
 80101c8:	69fa      	ldr	r2, [r7, #28]
 80101ca:	429a      	cmp	r2, r3
 80101cc:	d307      	bcc.n	80101de <create_chain+0x88>
				ncl = 2;
 80101ce:	2302      	movs	r3, #2
 80101d0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80101d2:	69fa      	ldr	r2, [r7, #28]
 80101d4:	69bb      	ldr	r3, [r7, #24]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d901      	bls.n	80101de <create_chain+0x88>
 80101da:	2300      	movs	r3, #0
 80101dc:	e04f      	b.n	801027e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80101de:	69f9      	ldr	r1, [r7, #28]
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f7ff fdc2 	bl	800fd6a <get_fat>
 80101e6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d00e      	beq.n	801020c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	2b01      	cmp	r3, #1
 80101f2:	d003      	beq.n	80101fc <create_chain+0xa6>
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80101fa:	d101      	bne.n	8010200 <create_chain+0xaa>
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	e03e      	b.n	801027e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010200:	69fa      	ldr	r2, [r7, #28]
 8010202:	69bb      	ldr	r3, [r7, #24]
 8010204:	429a      	cmp	r2, r3
 8010206:	d1da      	bne.n	80101be <create_chain+0x68>
 8010208:	2300      	movs	r3, #0
 801020a:	e038      	b.n	801027e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801020c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801020e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010212:	69f9      	ldr	r1, [r7, #28]
 8010214:	6938      	ldr	r0, [r7, #16]
 8010216:	f7ff fe4f 	bl	800feb8 <put_fat>
 801021a:	4603      	mov	r3, r0
 801021c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801021e:	7dfb      	ldrb	r3, [r7, #23]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d109      	bne.n	8010238 <create_chain+0xe2>
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d006      	beq.n	8010238 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801022a:	69fa      	ldr	r2, [r7, #28]
 801022c:	6839      	ldr	r1, [r7, #0]
 801022e:	6938      	ldr	r0, [r7, #16]
 8010230:	f7ff fe42 	bl	800feb8 <put_fat>
 8010234:	4603      	mov	r3, r0
 8010236:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010238:	7dfb      	ldrb	r3, [r7, #23]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d116      	bne.n	801026c <create_chain+0x116>
		fs->last_clst = ncl;
 801023e:	693b      	ldr	r3, [r7, #16]
 8010240:	69fa      	ldr	r2, [r7, #28]
 8010242:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	695a      	ldr	r2, [r3, #20]
 8010248:	693b      	ldr	r3, [r7, #16]
 801024a:	699b      	ldr	r3, [r3, #24]
 801024c:	3b02      	subs	r3, #2
 801024e:	429a      	cmp	r2, r3
 8010250:	d804      	bhi.n	801025c <create_chain+0x106>
 8010252:	693b      	ldr	r3, [r7, #16]
 8010254:	695b      	ldr	r3, [r3, #20]
 8010256:	1e5a      	subs	r2, r3, #1
 8010258:	693b      	ldr	r3, [r7, #16]
 801025a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801025c:	693b      	ldr	r3, [r7, #16]
 801025e:	791b      	ldrb	r3, [r3, #4]
 8010260:	f043 0301 	orr.w	r3, r3, #1
 8010264:	b2da      	uxtb	r2, r3
 8010266:	693b      	ldr	r3, [r7, #16]
 8010268:	711a      	strb	r2, [r3, #4]
 801026a:	e007      	b.n	801027c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801026c:	7dfb      	ldrb	r3, [r7, #23]
 801026e:	2b01      	cmp	r3, #1
 8010270:	d102      	bne.n	8010278 <create_chain+0x122>
 8010272:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010276:	e000      	b.n	801027a <create_chain+0x124>
 8010278:	2301      	movs	r3, #1
 801027a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801027c:	69fb      	ldr	r3, [r7, #28]
}
 801027e:	4618      	mov	r0, r3
 8010280:	3720      	adds	r7, #32
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}

08010286 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010286:	b480      	push	{r7}
 8010288:	b087      	sub	sp, #28
 801028a:	af00      	add	r7, sp, #0
 801028c:	6078      	str	r0, [r7, #4]
 801028e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801029a:	3304      	adds	r3, #4
 801029c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	0a5b      	lsrs	r3, r3, #9
 80102a2:	68fa      	ldr	r2, [r7, #12]
 80102a4:	8952      	ldrh	r2, [r2, #10]
 80102a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80102aa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80102ac:	693b      	ldr	r3, [r7, #16]
 80102ae:	1d1a      	adds	r2, r3, #4
 80102b0:	613a      	str	r2, [r7, #16]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d101      	bne.n	80102c0 <clmt_clust+0x3a>
 80102bc:	2300      	movs	r3, #0
 80102be:	e010      	b.n	80102e2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80102c0:	697a      	ldr	r2, [r7, #20]
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d307      	bcc.n	80102d8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80102c8:	697a      	ldr	r2, [r7, #20]
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	1ad3      	subs	r3, r2, r3
 80102ce:	617b      	str	r3, [r7, #20]
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	3304      	adds	r3, #4
 80102d4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80102d6:	e7e9      	b.n	80102ac <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80102d8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80102da:	693b      	ldr	r3, [r7, #16]
 80102dc:	681a      	ldr	r2, [r3, #0]
 80102de:	697b      	ldr	r3, [r7, #20]
 80102e0:	4413      	add	r3, r2
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	371c      	adds	r7, #28
 80102e6:	46bd      	mov	sp, r7
 80102e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ec:	4770      	bx	lr

080102ee <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80102ee:	b580      	push	{r7, lr}
 80102f0:	b086      	sub	sp, #24
 80102f2:	af00      	add	r7, sp, #0
 80102f4:	6078      	str	r0, [r7, #4]
 80102f6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010304:	d204      	bcs.n	8010310 <dir_sdi+0x22>
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	f003 031f 	and.w	r3, r3, #31
 801030c:	2b00      	cmp	r3, #0
 801030e:	d001      	beq.n	8010314 <dir_sdi+0x26>
		return FR_INT_ERR;
 8010310:	2302      	movs	r3, #2
 8010312:	e063      	b.n	80103dc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	683a      	ldr	r2, [r7, #0]
 8010318:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	689b      	ldr	r3, [r3, #8]
 801031e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d106      	bne.n	8010334 <dir_sdi+0x46>
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	2b02      	cmp	r3, #2
 801032c:	d902      	bls.n	8010334 <dir_sdi+0x46>
		clst = fs->dirbase;
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010332:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d10c      	bne.n	8010354 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	095b      	lsrs	r3, r3, #5
 801033e:	693a      	ldr	r2, [r7, #16]
 8010340:	8912      	ldrh	r2, [r2, #8]
 8010342:	4293      	cmp	r3, r2
 8010344:	d301      	bcc.n	801034a <dir_sdi+0x5c>
 8010346:	2302      	movs	r3, #2
 8010348:	e048      	b.n	80103dc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	61da      	str	r2, [r3, #28]
 8010352:	e029      	b.n	80103a8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	895b      	ldrh	r3, [r3, #10]
 8010358:	025b      	lsls	r3, r3, #9
 801035a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801035c:	e019      	b.n	8010392 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6979      	ldr	r1, [r7, #20]
 8010362:	4618      	mov	r0, r3
 8010364:	f7ff fd01 	bl	800fd6a <get_fat>
 8010368:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010370:	d101      	bne.n	8010376 <dir_sdi+0x88>
 8010372:	2301      	movs	r3, #1
 8010374:	e032      	b.n	80103dc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	2b01      	cmp	r3, #1
 801037a:	d904      	bls.n	8010386 <dir_sdi+0x98>
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	699b      	ldr	r3, [r3, #24]
 8010380:	697a      	ldr	r2, [r7, #20]
 8010382:	429a      	cmp	r2, r3
 8010384:	d301      	bcc.n	801038a <dir_sdi+0x9c>
 8010386:	2302      	movs	r3, #2
 8010388:	e028      	b.n	80103dc <dir_sdi+0xee>
			ofs -= csz;
 801038a:	683a      	ldr	r2, [r7, #0]
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	1ad3      	subs	r3, r2, r3
 8010390:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010392:	683a      	ldr	r2, [r7, #0]
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	429a      	cmp	r2, r3
 8010398:	d2e1      	bcs.n	801035e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801039a:	6979      	ldr	r1, [r7, #20]
 801039c:	6938      	ldr	r0, [r7, #16]
 801039e:	f7ff fcc5 	bl	800fd2c <clust2sect>
 80103a2:	4602      	mov	r2, r0
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	697a      	ldr	r2, [r7, #20]
 80103ac:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	69db      	ldr	r3, [r3, #28]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d101      	bne.n	80103ba <dir_sdi+0xcc>
 80103b6:	2302      	movs	r3, #2
 80103b8:	e010      	b.n	80103dc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	69da      	ldr	r2, [r3, #28]
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	0a5b      	lsrs	r3, r3, #9
 80103c2:	441a      	add	r2, r3
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80103c8:	693b      	ldr	r3, [r7, #16]
 80103ca:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103d4:	441a      	add	r2, r3
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80103da:	2300      	movs	r3, #0
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3718      	adds	r7, #24
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}

080103e4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b086      	sub	sp, #24
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	695b      	ldr	r3, [r3, #20]
 80103f8:	3320      	adds	r3, #32
 80103fa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	69db      	ldr	r3, [r3, #28]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d003      	beq.n	801040c <dir_next+0x28>
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801040a:	d301      	bcc.n	8010410 <dir_next+0x2c>
 801040c:	2304      	movs	r3, #4
 801040e:	e0aa      	b.n	8010566 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010416:	2b00      	cmp	r3, #0
 8010418:	f040 8098 	bne.w	801054c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	69db      	ldr	r3, [r3, #28]
 8010420:	1c5a      	adds	r2, r3, #1
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	699b      	ldr	r3, [r3, #24]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d10b      	bne.n	8010446 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	095b      	lsrs	r3, r3, #5
 8010432:	68fa      	ldr	r2, [r7, #12]
 8010434:	8912      	ldrh	r2, [r2, #8]
 8010436:	4293      	cmp	r3, r2
 8010438:	f0c0 8088 	bcc.w	801054c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2200      	movs	r2, #0
 8010440:	61da      	str	r2, [r3, #28]
 8010442:	2304      	movs	r3, #4
 8010444:	e08f      	b.n	8010566 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010446:	68bb      	ldr	r3, [r7, #8]
 8010448:	0a5b      	lsrs	r3, r3, #9
 801044a:	68fa      	ldr	r2, [r7, #12]
 801044c:	8952      	ldrh	r2, [r2, #10]
 801044e:	3a01      	subs	r2, #1
 8010450:	4013      	ands	r3, r2
 8010452:	2b00      	cmp	r3, #0
 8010454:	d17a      	bne.n	801054c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	699b      	ldr	r3, [r3, #24]
 801045c:	4619      	mov	r1, r3
 801045e:	4610      	mov	r0, r2
 8010460:	f7ff fc83 	bl	800fd6a <get_fat>
 8010464:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010466:	697b      	ldr	r3, [r7, #20]
 8010468:	2b01      	cmp	r3, #1
 801046a:	d801      	bhi.n	8010470 <dir_next+0x8c>
 801046c:	2302      	movs	r3, #2
 801046e:	e07a      	b.n	8010566 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010476:	d101      	bne.n	801047c <dir_next+0x98>
 8010478:	2301      	movs	r3, #1
 801047a:	e074      	b.n	8010566 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	699b      	ldr	r3, [r3, #24]
 8010480:	697a      	ldr	r2, [r7, #20]
 8010482:	429a      	cmp	r2, r3
 8010484:	d358      	bcc.n	8010538 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d104      	bne.n	8010496 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2200      	movs	r2, #0
 8010490:	61da      	str	r2, [r3, #28]
 8010492:	2304      	movs	r3, #4
 8010494:	e067      	b.n	8010566 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010496:	687a      	ldr	r2, [r7, #4]
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	699b      	ldr	r3, [r3, #24]
 801049c:	4619      	mov	r1, r3
 801049e:	4610      	mov	r0, r2
 80104a0:	f7ff fe59 	bl	8010156 <create_chain>
 80104a4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d101      	bne.n	80104b0 <dir_next+0xcc>
 80104ac:	2307      	movs	r3, #7
 80104ae:	e05a      	b.n	8010566 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	2b01      	cmp	r3, #1
 80104b4:	d101      	bne.n	80104ba <dir_next+0xd6>
 80104b6:	2302      	movs	r3, #2
 80104b8:	e055      	b.n	8010566 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80104ba:	697b      	ldr	r3, [r7, #20]
 80104bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80104c0:	d101      	bne.n	80104c6 <dir_next+0xe2>
 80104c2:	2301      	movs	r3, #1
 80104c4:	e04f      	b.n	8010566 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80104c6:	68f8      	ldr	r0, [r7, #12]
 80104c8:	f7ff fb50 	bl	800fb6c <sync_window>
 80104cc:	4603      	mov	r3, r0
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d001      	beq.n	80104d6 <dir_next+0xf2>
 80104d2:	2301      	movs	r3, #1
 80104d4:	e047      	b.n	8010566 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	3334      	adds	r3, #52	@ 0x34
 80104da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80104de:	2100      	movs	r1, #0
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7ff f949 	bl	800f778 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80104e6:	2300      	movs	r3, #0
 80104e8:	613b      	str	r3, [r7, #16]
 80104ea:	6979      	ldr	r1, [r7, #20]
 80104ec:	68f8      	ldr	r0, [r7, #12]
 80104ee:	f7ff fc1d 	bl	800fd2c <clust2sect>
 80104f2:	4602      	mov	r2, r0
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80104f8:	e012      	b.n	8010520 <dir_next+0x13c>
						fs->wflag = 1;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	2201      	movs	r2, #1
 80104fe:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010500:	68f8      	ldr	r0, [r7, #12]
 8010502:	f7ff fb33 	bl	800fb6c <sync_window>
 8010506:	4603      	mov	r3, r0
 8010508:	2b00      	cmp	r3, #0
 801050a:	d001      	beq.n	8010510 <dir_next+0x12c>
 801050c:	2301      	movs	r3, #1
 801050e:	e02a      	b.n	8010566 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	3301      	adds	r3, #1
 8010514:	613b      	str	r3, [r7, #16]
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801051a:	1c5a      	adds	r2, r3, #1
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	631a      	str	r2, [r3, #48]	@ 0x30
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	895b      	ldrh	r3, [r3, #10]
 8010524:	461a      	mov	r2, r3
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	4293      	cmp	r3, r2
 801052a:	d3e6      	bcc.n	80104fa <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010530:	693b      	ldr	r3, [r7, #16]
 8010532:	1ad2      	subs	r2, r2, r3
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	697a      	ldr	r2, [r7, #20]
 801053c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801053e:	6979      	ldr	r1, [r7, #20]
 8010540:	68f8      	ldr	r0, [r7, #12]
 8010542:	f7ff fbf3 	bl	800fd2c <clust2sect>
 8010546:	4602      	mov	r2, r0
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	68ba      	ldr	r2, [r7, #8]
 8010550:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010558:	68bb      	ldr	r3, [r7, #8]
 801055a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801055e:	441a      	add	r2, r3
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010564:	2300      	movs	r3, #0
}
 8010566:	4618      	mov	r0, r3
 8010568:	3718      	adds	r7, #24
 801056a:	46bd      	mov	sp, r7
 801056c:	bd80      	pop	{r7, pc}

0801056e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801056e:	b580      	push	{r7, lr}
 8010570:	b086      	sub	sp, #24
 8010572:	af00      	add	r7, sp, #0
 8010574:	6078      	str	r0, [r7, #4]
 8010576:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801057e:	2100      	movs	r1, #0
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f7ff feb4 	bl	80102ee <dir_sdi>
 8010586:	4603      	mov	r3, r0
 8010588:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801058a:	7dfb      	ldrb	r3, [r7, #23]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d12b      	bne.n	80105e8 <dir_alloc+0x7a>
		n = 0;
 8010590:	2300      	movs	r3, #0
 8010592:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	69db      	ldr	r3, [r3, #28]
 8010598:	4619      	mov	r1, r3
 801059a:	68f8      	ldr	r0, [r7, #12]
 801059c:	f7ff fb2a 	bl	800fbf4 <move_window>
 80105a0:	4603      	mov	r3, r0
 80105a2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80105a4:	7dfb      	ldrb	r3, [r7, #23]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d11d      	bne.n	80105e6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6a1b      	ldr	r3, [r3, #32]
 80105ae:	781b      	ldrb	r3, [r3, #0]
 80105b0:	2be5      	cmp	r3, #229	@ 0xe5
 80105b2:	d004      	beq.n	80105be <dir_alloc+0x50>
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	6a1b      	ldr	r3, [r3, #32]
 80105b8:	781b      	ldrb	r3, [r3, #0]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d107      	bne.n	80105ce <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	3301      	adds	r3, #1
 80105c2:	613b      	str	r3, [r7, #16]
 80105c4:	693a      	ldr	r2, [r7, #16]
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d102      	bne.n	80105d2 <dir_alloc+0x64>
 80105cc:	e00c      	b.n	80105e8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80105ce:	2300      	movs	r3, #0
 80105d0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80105d2:	2101      	movs	r1, #1
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f7ff ff05 	bl	80103e4 <dir_next>
 80105da:	4603      	mov	r3, r0
 80105dc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80105de:	7dfb      	ldrb	r3, [r7, #23]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d0d7      	beq.n	8010594 <dir_alloc+0x26>
 80105e4:	e000      	b.n	80105e8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80105e6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80105e8:	7dfb      	ldrb	r3, [r7, #23]
 80105ea:	2b04      	cmp	r3, #4
 80105ec:	d101      	bne.n	80105f2 <dir_alloc+0x84>
 80105ee:	2307      	movs	r3, #7
 80105f0:	75fb      	strb	r3, [r7, #23]
	return res;
 80105f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3718      	adds	r7, #24
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b084      	sub	sp, #16
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	331a      	adds	r3, #26
 801060a:	4618      	mov	r0, r3
 801060c:	f7ff f810 	bl	800f630 <ld_word>
 8010610:	4603      	mov	r3, r0
 8010612:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	781b      	ldrb	r3, [r3, #0]
 8010618:	2b03      	cmp	r3, #3
 801061a:	d109      	bne.n	8010630 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	3314      	adds	r3, #20
 8010620:	4618      	mov	r0, r3
 8010622:	f7ff f805 	bl	800f630 <ld_word>
 8010626:	4603      	mov	r3, r0
 8010628:	041b      	lsls	r3, r3, #16
 801062a:	68fa      	ldr	r2, [r7, #12]
 801062c:	4313      	orrs	r3, r2
 801062e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010630:	68fb      	ldr	r3, [r7, #12]
}
 8010632:	4618      	mov	r0, r3
 8010634:	3710      	adds	r7, #16
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}

0801063a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801063a:	b580      	push	{r7, lr}
 801063c:	b084      	sub	sp, #16
 801063e:	af00      	add	r7, sp, #0
 8010640:	60f8      	str	r0, [r7, #12]
 8010642:	60b9      	str	r1, [r7, #8]
 8010644:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	331a      	adds	r3, #26
 801064a:	687a      	ldr	r2, [r7, #4]
 801064c:	b292      	uxth	r2, r2
 801064e:	4611      	mov	r1, r2
 8010650:	4618      	mov	r0, r3
 8010652:	f7ff f829 	bl	800f6a8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	781b      	ldrb	r3, [r3, #0]
 801065a:	2b03      	cmp	r3, #3
 801065c:	d109      	bne.n	8010672 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	f103 0214 	add.w	r2, r3, #20
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	0c1b      	lsrs	r3, r3, #16
 8010668:	b29b      	uxth	r3, r3
 801066a:	4619      	mov	r1, r3
 801066c:	4610      	mov	r0, r2
 801066e:	f7ff f81b 	bl	800f6a8 <st_word>
	}
}
 8010672:	bf00      	nop
 8010674:	3710      	adds	r7, #16
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}

0801067a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801067a:	b580      	push	{r7, lr}
 801067c:	b086      	sub	sp, #24
 801067e:	af00      	add	r7, sp, #0
 8010680:	6078      	str	r0, [r7, #4]
 8010682:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8010684:	2304      	movs	r3, #4
 8010686:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801068e:	e03c      	b.n	801070a <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	69db      	ldr	r3, [r3, #28]
 8010694:	4619      	mov	r1, r3
 8010696:	6938      	ldr	r0, [r7, #16]
 8010698:	f7ff faac 	bl	800fbf4 <move_window>
 801069c:	4603      	mov	r3, r0
 801069e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80106a0:	7dfb      	ldrb	r3, [r7, #23]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d136      	bne.n	8010714 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	6a1b      	ldr	r3, [r3, #32]
 80106aa:	781b      	ldrb	r3, [r3, #0]
 80106ac:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80106ae:	7bfb      	ldrb	r3, [r7, #15]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d102      	bne.n	80106ba <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80106b4:	2304      	movs	r3, #4
 80106b6:	75fb      	strb	r3, [r7, #23]
 80106b8:	e031      	b.n	801071e <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6a1b      	ldr	r3, [r3, #32]
 80106be:	330b      	adds	r3, #11
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80106c6:	73bb      	strb	r3, [r7, #14]
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	7bba      	ldrb	r2, [r7, #14]
 80106cc:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80106ce:	7bfb      	ldrb	r3, [r7, #15]
 80106d0:	2be5      	cmp	r3, #229	@ 0xe5
 80106d2:	d011      	beq.n	80106f8 <dir_read+0x7e>
 80106d4:	7bfb      	ldrb	r3, [r7, #15]
 80106d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80106d8:	d00e      	beq.n	80106f8 <dir_read+0x7e>
 80106da:	7bbb      	ldrb	r3, [r7, #14]
 80106dc:	2b0f      	cmp	r3, #15
 80106de:	d00b      	beq.n	80106f8 <dir_read+0x7e>
 80106e0:	7bbb      	ldrb	r3, [r7, #14]
 80106e2:	f023 0320 	bic.w	r3, r3, #32
 80106e6:	2b08      	cmp	r3, #8
 80106e8:	bf0c      	ite	eq
 80106ea:	2301      	moveq	r3, #1
 80106ec:	2300      	movne	r3, #0
 80106ee:	b2db      	uxtb	r3, r3
 80106f0:	461a      	mov	r2, r3
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	4293      	cmp	r3, r2
 80106f6:	d00f      	beq.n	8010718 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80106f8:	2100      	movs	r1, #0
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f7ff fe72 	bl	80103e4 <dir_next>
 8010700:	4603      	mov	r3, r0
 8010702:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010704:	7dfb      	ldrb	r3, [r7, #23]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d108      	bne.n	801071c <dir_read+0xa2>
	while (dp->sect) {
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	69db      	ldr	r3, [r3, #28]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d1be      	bne.n	8010690 <dir_read+0x16>
 8010712:	e004      	b.n	801071e <dir_read+0xa4>
		if (res != FR_OK) break;
 8010714:	bf00      	nop
 8010716:	e002      	b.n	801071e <dir_read+0xa4>
				break;
 8010718:	bf00      	nop
 801071a:	e000      	b.n	801071e <dir_read+0xa4>
		if (res != FR_OK) break;
 801071c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801071e:	7dfb      	ldrb	r3, [r7, #23]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d002      	beq.n	801072a <dir_read+0xb0>
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2200      	movs	r2, #0
 8010728:	61da      	str	r2, [r3, #28]
	return res;
 801072a:	7dfb      	ldrb	r3, [r7, #23]
}
 801072c:	4618      	mov	r0, r3
 801072e:	3718      	adds	r7, #24
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}

08010734 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b086      	sub	sp, #24
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010742:	2100      	movs	r1, #0
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f7ff fdd2 	bl	80102ee <dir_sdi>
 801074a:	4603      	mov	r3, r0
 801074c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801074e:	7dfb      	ldrb	r3, [r7, #23]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d001      	beq.n	8010758 <dir_find+0x24>
 8010754:	7dfb      	ldrb	r3, [r7, #23]
 8010756:	e03e      	b.n	80107d6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	69db      	ldr	r3, [r3, #28]
 801075c:	4619      	mov	r1, r3
 801075e:	6938      	ldr	r0, [r7, #16]
 8010760:	f7ff fa48 	bl	800fbf4 <move_window>
 8010764:	4603      	mov	r3, r0
 8010766:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010768:	7dfb      	ldrb	r3, [r7, #23]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d12f      	bne.n	80107ce <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6a1b      	ldr	r3, [r3, #32]
 8010772:	781b      	ldrb	r3, [r3, #0]
 8010774:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010776:	7bfb      	ldrb	r3, [r7, #15]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d102      	bne.n	8010782 <dir_find+0x4e>
 801077c:	2304      	movs	r3, #4
 801077e:	75fb      	strb	r3, [r7, #23]
 8010780:	e028      	b.n	80107d4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	6a1b      	ldr	r3, [r3, #32]
 8010786:	330b      	adds	r3, #11
 8010788:	781b      	ldrb	r3, [r3, #0]
 801078a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801078e:	b2da      	uxtb	r2, r3
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6a1b      	ldr	r3, [r3, #32]
 8010798:	330b      	adds	r3, #11
 801079a:	781b      	ldrb	r3, [r3, #0]
 801079c:	f003 0308 	and.w	r3, r3, #8
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d10a      	bne.n	80107ba <dir_find+0x86>
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6a18      	ldr	r0, [r3, #32]
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	3324      	adds	r3, #36	@ 0x24
 80107ac:	220b      	movs	r2, #11
 80107ae:	4619      	mov	r1, r3
 80107b0:	f7fe fffd 	bl	800f7ae <mem_cmp>
 80107b4:	4603      	mov	r3, r0
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d00b      	beq.n	80107d2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80107ba:	2100      	movs	r1, #0
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f7ff fe11 	bl	80103e4 <dir_next>
 80107c2:	4603      	mov	r3, r0
 80107c4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80107c6:	7dfb      	ldrb	r3, [r7, #23]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d0c5      	beq.n	8010758 <dir_find+0x24>
 80107cc:	e002      	b.n	80107d4 <dir_find+0xa0>
		if (res != FR_OK) break;
 80107ce:	bf00      	nop
 80107d0:	e000      	b.n	80107d4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80107d2:	bf00      	nop

	return res;
 80107d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	3718      	adds	r7, #24
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}

080107de <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80107de:	b580      	push	{r7, lr}
 80107e0:	b084      	sub	sp, #16
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80107ec:	2101      	movs	r1, #1
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	f7ff febd 	bl	801056e <dir_alloc>
 80107f4:	4603      	mov	r3, r0
 80107f6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80107f8:	7bfb      	ldrb	r3, [r7, #15]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d11c      	bne.n	8010838 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	69db      	ldr	r3, [r3, #28]
 8010802:	4619      	mov	r1, r3
 8010804:	68b8      	ldr	r0, [r7, #8]
 8010806:	f7ff f9f5 	bl	800fbf4 <move_window>
 801080a:	4603      	mov	r3, r0
 801080c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801080e:	7bfb      	ldrb	r3, [r7, #15]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d111      	bne.n	8010838 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	6a1b      	ldr	r3, [r3, #32]
 8010818:	2220      	movs	r2, #32
 801081a:	2100      	movs	r1, #0
 801081c:	4618      	mov	r0, r3
 801081e:	f7fe ffab 	bl	800f778 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	6a18      	ldr	r0, [r3, #32]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	3324      	adds	r3, #36	@ 0x24
 801082a:	220b      	movs	r2, #11
 801082c:	4619      	mov	r1, r3
 801082e:	f7fe ff82 	bl	800f736 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	2201      	movs	r2, #1
 8010836:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010838:	7bfb      	ldrb	r3, [r7, #15]
}
 801083a:	4618      	mov	r0, r3
 801083c:	3710      	adds	r7, #16
 801083e:	46bd      	mov	sp, r7
 8010840:	bd80      	pop	{r7, pc}

08010842 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8010842:	b580      	push	{r7, lr}
 8010844:	b086      	sub	sp, #24
 8010846:	af00      	add	r7, sp, #0
 8010848:	6078      	str	r0, [r7, #4]
 801084a:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	2200      	movs	r2, #0
 8010850:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	69db      	ldr	r3, [r3, #28]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d04f      	beq.n	80108fa <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 801085a:	2300      	movs	r3, #0
 801085c:	613b      	str	r3, [r7, #16]
 801085e:	693b      	ldr	r3, [r7, #16]
 8010860:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8010862:	e022      	b.n	80108aa <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	6a1a      	ldr	r2, [r3, #32]
 8010868:	697b      	ldr	r3, [r7, #20]
 801086a:	1c59      	adds	r1, r3, #1
 801086c:	6179      	str	r1, [r7, #20]
 801086e:	4413      	add	r3, r2
 8010870:	781b      	ldrb	r3, [r3, #0]
 8010872:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8010874:	7bfb      	ldrb	r3, [r7, #15]
 8010876:	2b20      	cmp	r3, #32
 8010878:	d016      	beq.n	80108a8 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801087a:	7bfb      	ldrb	r3, [r7, #15]
 801087c:	2b05      	cmp	r3, #5
 801087e:	d101      	bne.n	8010884 <get_fileinfo+0x42>
 8010880:	23e5      	movs	r3, #229	@ 0xe5
 8010882:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	2b09      	cmp	r3, #9
 8010888:	d106      	bne.n	8010898 <get_fileinfo+0x56>
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	1c5a      	adds	r2, r3, #1
 801088e:	613a      	str	r2, [r7, #16]
 8010890:	683a      	ldr	r2, [r7, #0]
 8010892:	4413      	add	r3, r2
 8010894:	222e      	movs	r2, #46	@ 0x2e
 8010896:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8010898:	693b      	ldr	r3, [r7, #16]
 801089a:	1c5a      	adds	r2, r3, #1
 801089c:	613a      	str	r2, [r7, #16]
 801089e:	683a      	ldr	r2, [r7, #0]
 80108a0:	4413      	add	r3, r2
 80108a2:	7bfa      	ldrb	r2, [r7, #15]
 80108a4:	725a      	strb	r2, [r3, #9]
 80108a6:	e000      	b.n	80108aa <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 80108a8:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	2b0a      	cmp	r3, #10
 80108ae:	d9d9      	bls.n	8010864 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80108b0:	683a      	ldr	r2, [r7, #0]
 80108b2:	693b      	ldr	r3, [r7, #16]
 80108b4:	4413      	add	r3, r2
 80108b6:	3309      	adds	r3, #9
 80108b8:	2200      	movs	r2, #0
 80108ba:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6a1b      	ldr	r3, [r3, #32]
 80108c0:	7ada      	ldrb	r2, [r3, #11]
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	6a1b      	ldr	r3, [r3, #32]
 80108ca:	331c      	adds	r3, #28
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7fe fec8 	bl	800f662 <ld_dword>
 80108d2:	4602      	mov	r2, r0
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6a1b      	ldr	r3, [r3, #32]
 80108dc:	3316      	adds	r3, #22
 80108de:	4618      	mov	r0, r3
 80108e0:	f7fe febf 	bl	800f662 <ld_dword>
 80108e4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	b29a      	uxth	r2, r3
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	80da      	strh	r2, [r3, #6]
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	0c1b      	lsrs	r3, r3, #16
 80108f2:	b29a      	uxth	r2, r3
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	809a      	strh	r2, [r3, #4]
 80108f8:	e000      	b.n	80108fc <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80108fa:	bf00      	nop
}
 80108fc:	3718      	adds	r7, #24
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}
	...

08010904 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b088      	sub	sp, #32
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	60fb      	str	r3, [r7, #12]
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	3324      	adds	r3, #36	@ 0x24
 8010918:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801091a:	220b      	movs	r2, #11
 801091c:	2120      	movs	r1, #32
 801091e:	68b8      	ldr	r0, [r7, #8]
 8010920:	f7fe ff2a 	bl	800f778 <mem_set>
	si = i = 0; ni = 8;
 8010924:	2300      	movs	r3, #0
 8010926:	613b      	str	r3, [r7, #16]
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	61fb      	str	r3, [r7, #28]
 801092c:	2308      	movs	r3, #8
 801092e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010930:	69fb      	ldr	r3, [r7, #28]
 8010932:	1c5a      	adds	r2, r3, #1
 8010934:	61fa      	str	r2, [r7, #28]
 8010936:	68fa      	ldr	r2, [r7, #12]
 8010938:	4413      	add	r3, r2
 801093a:	781b      	ldrb	r3, [r3, #0]
 801093c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801093e:	7efb      	ldrb	r3, [r7, #27]
 8010940:	2b20      	cmp	r3, #32
 8010942:	d94e      	bls.n	80109e2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010944:	7efb      	ldrb	r3, [r7, #27]
 8010946:	2b2f      	cmp	r3, #47	@ 0x2f
 8010948:	d006      	beq.n	8010958 <create_name+0x54>
 801094a:	7efb      	ldrb	r3, [r7, #27]
 801094c:	2b5c      	cmp	r3, #92	@ 0x5c
 801094e:	d110      	bne.n	8010972 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010950:	e002      	b.n	8010958 <create_name+0x54>
 8010952:	69fb      	ldr	r3, [r7, #28]
 8010954:	3301      	adds	r3, #1
 8010956:	61fb      	str	r3, [r7, #28]
 8010958:	68fa      	ldr	r2, [r7, #12]
 801095a:	69fb      	ldr	r3, [r7, #28]
 801095c:	4413      	add	r3, r2
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	2b2f      	cmp	r3, #47	@ 0x2f
 8010962:	d0f6      	beq.n	8010952 <create_name+0x4e>
 8010964:	68fa      	ldr	r2, [r7, #12]
 8010966:	69fb      	ldr	r3, [r7, #28]
 8010968:	4413      	add	r3, r2
 801096a:	781b      	ldrb	r3, [r3, #0]
 801096c:	2b5c      	cmp	r3, #92	@ 0x5c
 801096e:	d0f0      	beq.n	8010952 <create_name+0x4e>
			break;
 8010970:	e038      	b.n	80109e4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010972:	7efb      	ldrb	r3, [r7, #27]
 8010974:	2b2e      	cmp	r3, #46	@ 0x2e
 8010976:	d003      	beq.n	8010980 <create_name+0x7c>
 8010978:	693a      	ldr	r2, [r7, #16]
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	429a      	cmp	r2, r3
 801097e:	d30c      	bcc.n	801099a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010980:	697b      	ldr	r3, [r7, #20]
 8010982:	2b0b      	cmp	r3, #11
 8010984:	d002      	beq.n	801098c <create_name+0x88>
 8010986:	7efb      	ldrb	r3, [r7, #27]
 8010988:	2b2e      	cmp	r3, #46	@ 0x2e
 801098a:	d001      	beq.n	8010990 <create_name+0x8c>
 801098c:	2306      	movs	r3, #6
 801098e:	e044      	b.n	8010a1a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010990:	2308      	movs	r3, #8
 8010992:	613b      	str	r3, [r7, #16]
 8010994:	230b      	movs	r3, #11
 8010996:	617b      	str	r3, [r7, #20]
			continue;
 8010998:	e022      	b.n	80109e0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801099a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	da04      	bge.n	80109ac <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80109a2:	7efb      	ldrb	r3, [r7, #27]
 80109a4:	3b80      	subs	r3, #128	@ 0x80
 80109a6:	4a1f      	ldr	r2, [pc, #124]	@ (8010a24 <create_name+0x120>)
 80109a8:	5cd3      	ldrb	r3, [r2, r3]
 80109aa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80109ac:	7efb      	ldrb	r3, [r7, #27]
 80109ae:	4619      	mov	r1, r3
 80109b0:	481d      	ldr	r0, [pc, #116]	@ (8010a28 <create_name+0x124>)
 80109b2:	f7fe ff23 	bl	800f7fc <chk_chr>
 80109b6:	4603      	mov	r3, r0
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d001      	beq.n	80109c0 <create_name+0xbc>
 80109bc:	2306      	movs	r3, #6
 80109be:	e02c      	b.n	8010a1a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80109c0:	7efb      	ldrb	r3, [r7, #27]
 80109c2:	2b60      	cmp	r3, #96	@ 0x60
 80109c4:	d905      	bls.n	80109d2 <create_name+0xce>
 80109c6:	7efb      	ldrb	r3, [r7, #27]
 80109c8:	2b7a      	cmp	r3, #122	@ 0x7a
 80109ca:	d802      	bhi.n	80109d2 <create_name+0xce>
 80109cc:	7efb      	ldrb	r3, [r7, #27]
 80109ce:	3b20      	subs	r3, #32
 80109d0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80109d2:	693b      	ldr	r3, [r7, #16]
 80109d4:	1c5a      	adds	r2, r3, #1
 80109d6:	613a      	str	r2, [r7, #16]
 80109d8:	68ba      	ldr	r2, [r7, #8]
 80109da:	4413      	add	r3, r2
 80109dc:	7efa      	ldrb	r2, [r7, #27]
 80109de:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80109e0:	e7a6      	b.n	8010930 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80109e2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80109e4:	68fa      	ldr	r2, [r7, #12]
 80109e6:	69fb      	ldr	r3, [r7, #28]
 80109e8:	441a      	add	r2, r3
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80109ee:	693b      	ldr	r3, [r7, #16]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d101      	bne.n	80109f8 <create_name+0xf4>
 80109f4:	2306      	movs	r3, #6
 80109f6:	e010      	b.n	8010a1a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	781b      	ldrb	r3, [r3, #0]
 80109fc:	2be5      	cmp	r3, #229	@ 0xe5
 80109fe:	d102      	bne.n	8010a06 <create_name+0x102>
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	2205      	movs	r2, #5
 8010a04:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010a06:	7efb      	ldrb	r3, [r7, #27]
 8010a08:	2b20      	cmp	r3, #32
 8010a0a:	d801      	bhi.n	8010a10 <create_name+0x10c>
 8010a0c:	2204      	movs	r2, #4
 8010a0e:	e000      	b.n	8010a12 <create_name+0x10e>
 8010a10:	2200      	movs	r2, #0
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	330b      	adds	r3, #11
 8010a16:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010a18:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	3720      	adds	r7, #32
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}
 8010a22:	bf00      	nop
 8010a24:	08018ac4 	.word	0x08018ac4
 8010a28:	080188b4 	.word	0x080188b4

08010a2c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b086      	sub	sp, #24
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010a3a:	693b      	ldr	r3, [r7, #16]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010a40:	e002      	b.n	8010a48 <follow_path+0x1c>
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	3301      	adds	r3, #1
 8010a46:	603b      	str	r3, [r7, #0]
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8010a4e:	d0f8      	beq.n	8010a42 <follow_path+0x16>
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	781b      	ldrb	r3, [r3, #0]
 8010a54:	2b5c      	cmp	r3, #92	@ 0x5c
 8010a56:	d0f4      	beq.n	8010a42 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	781b      	ldrb	r3, [r3, #0]
 8010a62:	2b1f      	cmp	r3, #31
 8010a64:	d80a      	bhi.n	8010a7c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2280      	movs	r2, #128	@ 0x80
 8010a6a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8010a6e:	2100      	movs	r1, #0
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f7ff fc3c 	bl	80102ee <dir_sdi>
 8010a76:	4603      	mov	r3, r0
 8010a78:	75fb      	strb	r3, [r7, #23]
 8010a7a:	e043      	b.n	8010b04 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010a7c:	463b      	mov	r3, r7
 8010a7e:	4619      	mov	r1, r3
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f7ff ff3f 	bl	8010904 <create_name>
 8010a86:	4603      	mov	r3, r0
 8010a88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010a8a:	7dfb      	ldrb	r3, [r7, #23]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d134      	bne.n	8010afa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	f7ff fe4f 	bl	8010734 <dir_find>
 8010a96:	4603      	mov	r3, r0
 8010a98:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010aa0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010aa2:	7dfb      	ldrb	r3, [r7, #23]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d00a      	beq.n	8010abe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010aa8:	7dfb      	ldrb	r3, [r7, #23]
 8010aaa:	2b04      	cmp	r3, #4
 8010aac:	d127      	bne.n	8010afe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010aae:	7afb      	ldrb	r3, [r7, #11]
 8010ab0:	f003 0304 	and.w	r3, r3, #4
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d122      	bne.n	8010afe <follow_path+0xd2>
 8010ab8:	2305      	movs	r3, #5
 8010aba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010abc:	e01f      	b.n	8010afe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010abe:	7afb      	ldrb	r3, [r7, #11]
 8010ac0:	f003 0304 	and.w	r3, r3, #4
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d11c      	bne.n	8010b02 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010ac8:	693b      	ldr	r3, [r7, #16]
 8010aca:	799b      	ldrb	r3, [r3, #6]
 8010acc:	f003 0310 	and.w	r3, r3, #16
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d102      	bne.n	8010ada <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010ad4:	2305      	movs	r3, #5
 8010ad6:	75fb      	strb	r3, [r7, #23]
 8010ad8:	e014      	b.n	8010b04 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	695b      	ldr	r3, [r3, #20]
 8010ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ae8:	4413      	add	r3, r2
 8010aea:	4619      	mov	r1, r3
 8010aec:	68f8      	ldr	r0, [r7, #12]
 8010aee:	f7ff fd85 	bl	80105fc <ld_clust>
 8010af2:	4602      	mov	r2, r0
 8010af4:	693b      	ldr	r3, [r7, #16]
 8010af6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010af8:	e7c0      	b.n	8010a7c <follow_path+0x50>
			if (res != FR_OK) break;
 8010afa:	bf00      	nop
 8010afc:	e002      	b.n	8010b04 <follow_path+0xd8>
				break;
 8010afe:	bf00      	nop
 8010b00:	e000      	b.n	8010b04 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010b02:	bf00      	nop
			}
		}
	}

	return res;
 8010b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3718      	adds	r7, #24
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}

08010b0e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010b0e:	b480      	push	{r7}
 8010b10:	b087      	sub	sp, #28
 8010b12:	af00      	add	r7, sp, #0
 8010b14:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010b16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010b1a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d031      	beq.n	8010b88 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	617b      	str	r3, [r7, #20]
 8010b2a:	e002      	b.n	8010b32 <get_ldnumber+0x24>
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	3301      	adds	r3, #1
 8010b30:	617b      	str	r3, [r7, #20]
 8010b32:	697b      	ldr	r3, [r7, #20]
 8010b34:	781b      	ldrb	r3, [r3, #0]
 8010b36:	2b20      	cmp	r3, #32
 8010b38:	d903      	bls.n	8010b42 <get_ldnumber+0x34>
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	781b      	ldrb	r3, [r3, #0]
 8010b3e:	2b3a      	cmp	r3, #58	@ 0x3a
 8010b40:	d1f4      	bne.n	8010b2c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	781b      	ldrb	r3, [r3, #0]
 8010b46:	2b3a      	cmp	r3, #58	@ 0x3a
 8010b48:	d11c      	bne.n	8010b84 <get_ldnumber+0x76>
			tp = *path;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	1c5a      	adds	r2, r3, #1
 8010b54:	60fa      	str	r2, [r7, #12]
 8010b56:	781b      	ldrb	r3, [r3, #0]
 8010b58:	3b30      	subs	r3, #48	@ 0x30
 8010b5a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010b5c:	68bb      	ldr	r3, [r7, #8]
 8010b5e:	2b09      	cmp	r3, #9
 8010b60:	d80e      	bhi.n	8010b80 <get_ldnumber+0x72>
 8010b62:	68fa      	ldr	r2, [r7, #12]
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	429a      	cmp	r2, r3
 8010b68:	d10a      	bne.n	8010b80 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d107      	bne.n	8010b80 <get_ldnumber+0x72>
					vol = (int)i;
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	3301      	adds	r3, #1
 8010b78:	617b      	str	r3, [r7, #20]
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	697a      	ldr	r2, [r7, #20]
 8010b7e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	e002      	b.n	8010b8a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010b84:	2300      	movs	r3, #0
 8010b86:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010b88:	693b      	ldr	r3, [r7, #16]
}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	371c      	adds	r7, #28
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b94:	4770      	bx	lr
	...

08010b98 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b082      	sub	sp, #8
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	70da      	strb	r2, [r3, #3]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010bae:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010bb0:	6839      	ldr	r1, [r7, #0]
 8010bb2:	6878      	ldr	r0, [r7, #4]
 8010bb4:	f7ff f81e 	bl	800fbf4 <move_window>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d001      	beq.n	8010bc2 <check_fs+0x2a>
 8010bbe:	2304      	movs	r3, #4
 8010bc0:	e038      	b.n	8010c34 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	3334      	adds	r3, #52	@ 0x34
 8010bc6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f7fe fd30 	bl	800f630 <ld_word>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	461a      	mov	r2, r3
 8010bd4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	d001      	beq.n	8010be0 <check_fs+0x48>
 8010bdc:	2303      	movs	r3, #3
 8010bde:	e029      	b.n	8010c34 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010be6:	2be9      	cmp	r3, #233	@ 0xe9
 8010be8:	d009      	beq.n	8010bfe <check_fs+0x66>
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010bf0:	2beb      	cmp	r3, #235	@ 0xeb
 8010bf2:	d11e      	bne.n	8010c32 <check_fs+0x9a>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8010bfa:	2b90      	cmp	r3, #144	@ 0x90
 8010bfc:	d119      	bne.n	8010c32 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	3334      	adds	r3, #52	@ 0x34
 8010c02:	3336      	adds	r3, #54	@ 0x36
 8010c04:	4618      	mov	r0, r3
 8010c06:	f7fe fd2c 	bl	800f662 <ld_dword>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010c10:	4a0a      	ldr	r2, [pc, #40]	@ (8010c3c <check_fs+0xa4>)
 8010c12:	4293      	cmp	r3, r2
 8010c14:	d101      	bne.n	8010c1a <check_fs+0x82>
 8010c16:	2300      	movs	r3, #0
 8010c18:	e00c      	b.n	8010c34 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	3334      	adds	r3, #52	@ 0x34
 8010c1e:	3352      	adds	r3, #82	@ 0x52
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7fe fd1e 	bl	800f662 <ld_dword>
 8010c26:	4603      	mov	r3, r0
 8010c28:	4a05      	ldr	r2, [pc, #20]	@ (8010c40 <check_fs+0xa8>)
 8010c2a:	4293      	cmp	r3, r2
 8010c2c:	d101      	bne.n	8010c32 <check_fs+0x9a>
 8010c2e:	2300      	movs	r3, #0
 8010c30:	e000      	b.n	8010c34 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010c32:	2302      	movs	r3, #2
}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3708      	adds	r7, #8
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}
 8010c3c:	00544146 	.word	0x00544146
 8010c40:	33544146 	.word	0x33544146

08010c44 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b096      	sub	sp, #88	@ 0x58
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	60f8      	str	r0, [r7, #12]
 8010c4c:	60b9      	str	r1, [r7, #8]
 8010c4e:	4613      	mov	r3, r2
 8010c50:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	2200      	movs	r2, #0
 8010c56:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010c58:	68f8      	ldr	r0, [r7, #12]
 8010c5a:	f7ff ff58 	bl	8010b0e <get_ldnumber>
 8010c5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	da01      	bge.n	8010c6a <find_volume+0x26>
 8010c66:	230b      	movs	r3, #11
 8010c68:	e235      	b.n	80110d6 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010c6a:	4aa5      	ldr	r2, [pc, #660]	@ (8010f00 <find_volume+0x2bc>)
 8010c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c72:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d101      	bne.n	8010c7e <find_volume+0x3a>
 8010c7a:	230c      	movs	r3, #12
 8010c7c:	e22b      	b.n	80110d6 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8010c7e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010c80:	f7fe fdd7 	bl	800f832 <lock_fs>
 8010c84:	4603      	mov	r3, r0
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d101      	bne.n	8010c8e <find_volume+0x4a>
 8010c8a:	230f      	movs	r3, #15
 8010c8c:	e223      	b.n	80110d6 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8010c8e:	68bb      	ldr	r3, [r7, #8]
 8010c90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010c92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010c94:	79fb      	ldrb	r3, [r7, #7]
 8010c96:	f023 0301 	bic.w	r3, r3, #1
 8010c9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c9e:	781b      	ldrb	r3, [r3, #0]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d01a      	beq.n	8010cda <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ca6:	785b      	ldrb	r3, [r3, #1]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7fe fc23 	bl	800f4f4 <disk_status>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010cb4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010cb8:	f003 0301 	and.w	r3, r3, #1
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d10c      	bne.n	8010cda <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010cc0:	79fb      	ldrb	r3, [r7, #7]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d007      	beq.n	8010cd6 <find_volume+0x92>
 8010cc6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010cca:	f003 0304 	and.w	r3, r3, #4
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d001      	beq.n	8010cd6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010cd2:	230a      	movs	r3, #10
 8010cd4:	e1ff      	b.n	80110d6 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	e1fd      	b.n	80110d6 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cdc:	2200      	movs	r2, #0
 8010cde:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ce2:	b2da      	uxtb	r2, r3
 8010ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ce6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cea:	785b      	ldrb	r3, [r3, #1]
 8010cec:	4618      	mov	r0, r3
 8010cee:	f7fe fc1b 	bl	800f528 <disk_initialize>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010cf8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010cfc:	f003 0301 	and.w	r3, r3, #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d001      	beq.n	8010d08 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010d04:	2303      	movs	r3, #3
 8010d06:	e1e6      	b.n	80110d6 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010d08:	79fb      	ldrb	r3, [r7, #7]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d007      	beq.n	8010d1e <find_volume+0xda>
 8010d0e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010d12:	f003 0304 	and.w	r3, r3, #4
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d001      	beq.n	8010d1e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010d1a:	230a      	movs	r3, #10
 8010d1c:	e1db      	b.n	80110d6 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010d22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010d24:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010d26:	f7ff ff37 	bl	8010b98 <check_fs>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010d30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010d34:	2b02      	cmp	r3, #2
 8010d36:	d149      	bne.n	8010dcc <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010d38:	2300      	movs	r3, #0
 8010d3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d3c:	e01e      	b.n	8010d7c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d40:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d46:	011b      	lsls	r3, r3, #4
 8010d48:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010d4c:	4413      	add	r3, r2
 8010d4e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d52:	3304      	adds	r3, #4
 8010d54:	781b      	ldrb	r3, [r3, #0]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d006      	beq.n	8010d68 <find_volume+0x124>
 8010d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d5c:	3308      	adds	r3, #8
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7fe fc7f 	bl	800f662 <ld_dword>
 8010d64:	4602      	mov	r2, r0
 8010d66:	e000      	b.n	8010d6a <find_volume+0x126>
 8010d68:	2200      	movs	r2, #0
 8010d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d6c:	009b      	lsls	r3, r3, #2
 8010d6e:	3358      	adds	r3, #88	@ 0x58
 8010d70:	443b      	add	r3, r7
 8010d72:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d78:	3301      	adds	r3, #1
 8010d7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d7e:	2b03      	cmp	r3, #3
 8010d80:	d9dd      	bls.n	8010d3e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010d82:	2300      	movs	r3, #0
 8010d84:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8010d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d002      	beq.n	8010d92 <find_volume+0x14e>
 8010d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d8e:	3b01      	subs	r3, #1
 8010d90:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d94:	009b      	lsls	r3, r3, #2
 8010d96:	3358      	adds	r3, #88	@ 0x58
 8010d98:	443b      	add	r3, r7
 8010d9a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010d9e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010da0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d005      	beq.n	8010db2 <find_volume+0x16e>
 8010da6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010da8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010daa:	f7ff fef5 	bl	8010b98 <check_fs>
 8010dae:	4603      	mov	r3, r0
 8010db0:	e000      	b.n	8010db4 <find_volume+0x170>
 8010db2:	2303      	movs	r3, #3
 8010db4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010db8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010dbc:	2b01      	cmp	r3, #1
 8010dbe:	d905      	bls.n	8010dcc <find_volume+0x188>
 8010dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8010dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010dc8:	2b03      	cmp	r3, #3
 8010dca:	d9e2      	bls.n	8010d92 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010dcc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010dd0:	2b04      	cmp	r3, #4
 8010dd2:	d101      	bne.n	8010dd8 <find_volume+0x194>
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	e17e      	b.n	80110d6 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010dd8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010ddc:	2b01      	cmp	r3, #1
 8010dde:	d901      	bls.n	8010de4 <find_volume+0x1a0>
 8010de0:	230d      	movs	r3, #13
 8010de2:	e178      	b.n	80110d6 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010de6:	3334      	adds	r3, #52	@ 0x34
 8010de8:	330b      	adds	r3, #11
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7fe fc20 	bl	800f630 <ld_word>
 8010df0:	4603      	mov	r3, r0
 8010df2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010df6:	d001      	beq.n	8010dfc <find_volume+0x1b8>
 8010df8:	230d      	movs	r3, #13
 8010dfa:	e16c      	b.n	80110d6 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dfe:	3334      	adds	r3, #52	@ 0x34
 8010e00:	3316      	adds	r3, #22
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7fe fc14 	bl	800f630 <ld_word>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010e0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d106      	bne.n	8010e20 <find_volume+0x1dc>
 8010e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e14:	3334      	adds	r3, #52	@ 0x34
 8010e16:	3324      	adds	r3, #36	@ 0x24
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7fe fc22 	bl	800f662 <ld_dword>
 8010e1e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8010e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010e24:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e28:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8010e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e2e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e32:	789b      	ldrb	r3, [r3, #2]
 8010e34:	2b01      	cmp	r3, #1
 8010e36:	d005      	beq.n	8010e44 <find_volume+0x200>
 8010e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e3a:	789b      	ldrb	r3, [r3, #2]
 8010e3c:	2b02      	cmp	r3, #2
 8010e3e:	d001      	beq.n	8010e44 <find_volume+0x200>
 8010e40:	230d      	movs	r3, #13
 8010e42:	e148      	b.n	80110d6 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e46:	789b      	ldrb	r3, [r3, #2]
 8010e48:	461a      	mov	r2, r3
 8010e4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e4c:	fb02 f303 	mul.w	r3, r2, r3
 8010e50:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010e58:	461a      	mov	r2, r3
 8010e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e5c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e60:	895b      	ldrh	r3, [r3, #10]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d008      	beq.n	8010e78 <find_volume+0x234>
 8010e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e68:	895b      	ldrh	r3, [r3, #10]
 8010e6a:	461a      	mov	r2, r3
 8010e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e6e:	895b      	ldrh	r3, [r3, #10]
 8010e70:	3b01      	subs	r3, #1
 8010e72:	4013      	ands	r3, r2
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d001      	beq.n	8010e7c <find_volume+0x238>
 8010e78:	230d      	movs	r3, #13
 8010e7a:	e12c      	b.n	80110d6 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e7e:	3334      	adds	r3, #52	@ 0x34
 8010e80:	3311      	adds	r3, #17
 8010e82:	4618      	mov	r0, r3
 8010e84:	f7fe fbd4 	bl	800f630 <ld_word>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	461a      	mov	r2, r3
 8010e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e8e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e92:	891b      	ldrh	r3, [r3, #8]
 8010e94:	f003 030f 	and.w	r3, r3, #15
 8010e98:	b29b      	uxth	r3, r3
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d001      	beq.n	8010ea2 <find_volume+0x25e>
 8010e9e:	230d      	movs	r3, #13
 8010ea0:	e119      	b.n	80110d6 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ea4:	3334      	adds	r3, #52	@ 0x34
 8010ea6:	3313      	adds	r3, #19
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7fe fbc1 	bl	800f630 <ld_word>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010eb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d106      	bne.n	8010ec6 <find_volume+0x282>
 8010eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eba:	3334      	adds	r3, #52	@ 0x34
 8010ebc:	3320      	adds	r3, #32
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7fe fbcf 	bl	800f662 <ld_dword>
 8010ec4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ec8:	3334      	adds	r3, #52	@ 0x34
 8010eca:	330e      	adds	r3, #14
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f7fe fbaf 	bl	800f630 <ld_word>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010ed6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d101      	bne.n	8010ee0 <find_volume+0x29c>
 8010edc:	230d      	movs	r3, #13
 8010ede:	e0fa      	b.n	80110d6 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010ee0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010ee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ee4:	4413      	add	r3, r2
 8010ee6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ee8:	8912      	ldrh	r2, [r2, #8]
 8010eea:	0912      	lsrs	r2, r2, #4
 8010eec:	b292      	uxth	r2, r2
 8010eee:	4413      	add	r3, r2
 8010ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010ef2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d204      	bcs.n	8010f04 <find_volume+0x2c0>
 8010efa:	230d      	movs	r3, #13
 8010efc:	e0eb      	b.n	80110d6 <find_volume+0x492>
 8010efe:	bf00      	nop
 8010f00:	24000a70 	.word	0x24000a70
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010f04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f08:	1ad3      	subs	r3, r2, r3
 8010f0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f0c:	8952      	ldrh	r2, [r2, #10]
 8010f0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f12:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d101      	bne.n	8010f1e <find_volume+0x2da>
 8010f1a:	230d      	movs	r3, #13
 8010f1c:	e0db      	b.n	80110d6 <find_volume+0x492>
		fmt = FS_FAT32;
 8010f1e:	2303      	movs	r3, #3
 8010f20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f26:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010f2a:	4293      	cmp	r3, r2
 8010f2c:	d802      	bhi.n	8010f34 <find_volume+0x2f0>
 8010f2e:	2302      	movs	r3, #2
 8010f30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f36:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	d802      	bhi.n	8010f44 <find_volume+0x300>
 8010f3e:	2301      	movs	r3, #1
 8010f40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f46:	1c9a      	adds	r2, r3, #2
 8010f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f4a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010f50:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010f52:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010f54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f56:	441a      	add	r2, r3
 8010f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f5a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010f5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f60:	441a      	add	r2, r3
 8010f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f64:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8010f66:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010f6a:	2b03      	cmp	r3, #3
 8010f6c:	d11e      	bne.n	8010fac <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f70:	3334      	adds	r3, #52	@ 0x34
 8010f72:	332a      	adds	r3, #42	@ 0x2a
 8010f74:	4618      	mov	r0, r3
 8010f76:	f7fe fb5b 	bl	800f630 <ld_word>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d001      	beq.n	8010f84 <find_volume+0x340>
 8010f80:	230d      	movs	r3, #13
 8010f82:	e0a8      	b.n	80110d6 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f86:	891b      	ldrh	r3, [r3, #8]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d001      	beq.n	8010f90 <find_volume+0x34c>
 8010f8c:	230d      	movs	r3, #13
 8010f8e:	e0a2      	b.n	80110d6 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f92:	3334      	adds	r3, #52	@ 0x34
 8010f94:	332c      	adds	r3, #44	@ 0x2c
 8010f96:	4618      	mov	r0, r3
 8010f98:	f7fe fb63 	bl	800f662 <ld_dword>
 8010f9c:	4602      	mov	r2, r0
 8010f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fa0:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fa4:	699b      	ldr	r3, [r3, #24]
 8010fa6:	009b      	lsls	r3, r3, #2
 8010fa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8010faa:	e01f      	b.n	8010fec <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fae:	891b      	ldrh	r3, [r3, #8]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d101      	bne.n	8010fb8 <find_volume+0x374>
 8010fb4:	230d      	movs	r3, #13
 8010fb6:	e08e      	b.n	80110d6 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010fbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010fbe:	441a      	add	r2, r3
 8010fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fc2:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010fc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010fc8:	2b02      	cmp	r3, #2
 8010fca:	d103      	bne.n	8010fd4 <find_volume+0x390>
 8010fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fce:	699b      	ldr	r3, [r3, #24]
 8010fd0:	005b      	lsls	r3, r3, #1
 8010fd2:	e00a      	b.n	8010fea <find_volume+0x3a6>
 8010fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fd6:	699a      	ldr	r2, [r3, #24]
 8010fd8:	4613      	mov	r3, r2
 8010fda:	005b      	lsls	r3, r3, #1
 8010fdc:	4413      	add	r3, r2
 8010fde:	085a      	lsrs	r2, r3, #1
 8010fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fe2:	699b      	ldr	r3, [r3, #24]
 8010fe4:	f003 0301 	and.w	r3, r3, #1
 8010fe8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010fea:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fee:	69da      	ldr	r2, [r3, #28]
 8010ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ff2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8010ff6:	0a5b      	lsrs	r3, r3, #9
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d201      	bcs.n	8011000 <find_volume+0x3bc>
 8010ffc:	230d      	movs	r3, #13
 8010ffe:	e06a      	b.n	80110d6 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011002:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011006:	615a      	str	r2, [r3, #20]
 8011008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801100a:	695a      	ldr	r2, [r3, #20]
 801100c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801100e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8011010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011012:	2280      	movs	r2, #128	@ 0x80
 8011014:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011016:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801101a:	2b03      	cmp	r3, #3
 801101c:	d149      	bne.n	80110b2 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801101e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011020:	3334      	adds	r3, #52	@ 0x34
 8011022:	3330      	adds	r3, #48	@ 0x30
 8011024:	4618      	mov	r0, r3
 8011026:	f7fe fb03 	bl	800f630 <ld_word>
 801102a:	4603      	mov	r3, r0
 801102c:	2b01      	cmp	r3, #1
 801102e:	d140      	bne.n	80110b2 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011030:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011032:	3301      	adds	r3, #1
 8011034:	4619      	mov	r1, r3
 8011036:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011038:	f7fe fddc 	bl	800fbf4 <move_window>
 801103c:	4603      	mov	r3, r0
 801103e:	2b00      	cmp	r3, #0
 8011040:	d137      	bne.n	80110b2 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8011042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011044:	2200      	movs	r2, #0
 8011046:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801104a:	3334      	adds	r3, #52	@ 0x34
 801104c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011050:	4618      	mov	r0, r3
 8011052:	f7fe faed 	bl	800f630 <ld_word>
 8011056:	4603      	mov	r3, r0
 8011058:	461a      	mov	r2, r3
 801105a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801105e:	429a      	cmp	r2, r3
 8011060:	d127      	bne.n	80110b2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011064:	3334      	adds	r3, #52	@ 0x34
 8011066:	4618      	mov	r0, r3
 8011068:	f7fe fafb 	bl	800f662 <ld_dword>
 801106c:	4603      	mov	r3, r0
 801106e:	4a1c      	ldr	r2, [pc, #112]	@ (80110e0 <find_volume+0x49c>)
 8011070:	4293      	cmp	r3, r2
 8011072:	d11e      	bne.n	80110b2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011076:	3334      	adds	r3, #52	@ 0x34
 8011078:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801107c:	4618      	mov	r0, r3
 801107e:	f7fe faf0 	bl	800f662 <ld_dword>
 8011082:	4603      	mov	r3, r0
 8011084:	4a17      	ldr	r2, [pc, #92]	@ (80110e4 <find_volume+0x4a0>)
 8011086:	4293      	cmp	r3, r2
 8011088:	d113      	bne.n	80110b2 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801108a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801108c:	3334      	adds	r3, #52	@ 0x34
 801108e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8011092:	4618      	mov	r0, r3
 8011094:	f7fe fae5 	bl	800f662 <ld_dword>
 8011098:	4602      	mov	r2, r0
 801109a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801109c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801109e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110a0:	3334      	adds	r3, #52	@ 0x34
 80110a2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7fe fadb 	bl	800f662 <ld_dword>
 80110ac:	4602      	mov	r2, r0
 80110ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110b0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80110b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110b4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80110b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80110ba:	4b0b      	ldr	r3, [pc, #44]	@ (80110e8 <find_volume+0x4a4>)
 80110bc:	881b      	ldrh	r3, [r3, #0]
 80110be:	3301      	adds	r3, #1
 80110c0:	b29a      	uxth	r2, r3
 80110c2:	4b09      	ldr	r3, [pc, #36]	@ (80110e8 <find_volume+0x4a4>)
 80110c4:	801a      	strh	r2, [r3, #0]
 80110c6:	4b08      	ldr	r3, [pc, #32]	@ (80110e8 <find_volume+0x4a4>)
 80110c8:	881a      	ldrh	r2, [r3, #0]
 80110ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110cc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80110ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80110d0:	f7fe fd28 	bl	800fb24 <clear_lock>
#endif
	return FR_OK;
 80110d4:	2300      	movs	r3, #0
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	3758      	adds	r7, #88	@ 0x58
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}
 80110de:	bf00      	nop
 80110e0:	41615252 	.word	0x41615252
 80110e4:	61417272 	.word	0x61417272
 80110e8:	24000a74 	.word	0x24000a74

080110ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b084      	sub	sp, #16
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
 80110f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80110f6:	2309      	movs	r3, #9
 80110f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d02e      	beq.n	801115e <validate+0x72>
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d02a      	beq.n	801115e <validate+0x72>
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	781b      	ldrb	r3, [r3, #0]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d025      	beq.n	801115e <validate+0x72>
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	889a      	ldrh	r2, [r3, #4]
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	88db      	ldrh	r3, [r3, #6]
 801111c:	429a      	cmp	r2, r3
 801111e:	d11e      	bne.n	801115e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	4618      	mov	r0, r3
 8011126:	f7fe fb84 	bl	800f832 <lock_fs>
 801112a:	4603      	mov	r3, r0
 801112c:	2b00      	cmp	r3, #0
 801112e:	d014      	beq.n	801115a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	785b      	ldrb	r3, [r3, #1]
 8011136:	4618      	mov	r0, r3
 8011138:	f7fe f9dc 	bl	800f4f4 <disk_status>
 801113c:	4603      	mov	r3, r0
 801113e:	f003 0301 	and.w	r3, r3, #1
 8011142:	2b00      	cmp	r3, #0
 8011144:	d102      	bne.n	801114c <validate+0x60>
				res = FR_OK;
 8011146:	2300      	movs	r3, #0
 8011148:	73fb      	strb	r3, [r7, #15]
 801114a:	e008      	b.n	801115e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	2100      	movs	r1, #0
 8011152:	4618      	mov	r0, r3
 8011154:	f7fe fb83 	bl	800f85e <unlock_fs>
 8011158:	e001      	b.n	801115e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801115a:	230f      	movs	r3, #15
 801115c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801115e:	7bfb      	ldrb	r3, [r7, #15]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d102      	bne.n	801116a <validate+0x7e>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	e000      	b.n	801116c <validate+0x80>
 801116a:	2300      	movs	r3, #0
 801116c:	683a      	ldr	r2, [r7, #0]
 801116e:	6013      	str	r3, [r2, #0]
	return res;
 8011170:	7bfb      	ldrb	r3, [r7, #15]
}
 8011172:	4618      	mov	r0, r3
 8011174:	3710      	adds	r7, #16
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}
	...

0801117c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b088      	sub	sp, #32
 8011180:	af00      	add	r7, sp, #0
 8011182:	60f8      	str	r0, [r7, #12]
 8011184:	60b9      	str	r1, [r7, #8]
 8011186:	4613      	mov	r3, r2
 8011188:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801118e:	f107 0310 	add.w	r3, r7, #16
 8011192:	4618      	mov	r0, r3
 8011194:	f7ff fcbb 	bl	8010b0e <get_ldnumber>
 8011198:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801119a:	69fb      	ldr	r3, [r7, #28]
 801119c:	2b00      	cmp	r3, #0
 801119e:	da01      	bge.n	80111a4 <f_mount+0x28>
 80111a0:	230b      	movs	r3, #11
 80111a2:	e048      	b.n	8011236 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80111a4:	4a26      	ldr	r2, [pc, #152]	@ (8011240 <f_mount+0xc4>)
 80111a6:	69fb      	ldr	r3, [r7, #28]
 80111a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80111ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80111ae:	69bb      	ldr	r3, [r7, #24]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d00f      	beq.n	80111d4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80111b4:	69b8      	ldr	r0, [r7, #24]
 80111b6:	f7fe fcb5 	bl	800fb24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80111ba:	69bb      	ldr	r3, [r7, #24]
 80111bc:	68db      	ldr	r3, [r3, #12]
 80111be:	4618      	mov	r0, r3
 80111c0:	f001 f850 	bl	8012264 <ff_del_syncobj>
 80111c4:	4603      	mov	r3, r0
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d101      	bne.n	80111ce <f_mount+0x52>
 80111ca:	2302      	movs	r3, #2
 80111cc:	e033      	b.n	8011236 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80111ce:	69bb      	ldr	r3, [r7, #24]
 80111d0:	2200      	movs	r2, #0
 80111d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d00f      	beq.n	80111fa <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	2200      	movs	r2, #0
 80111de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80111e0:	69fb      	ldr	r3, [r7, #28]
 80111e2:	b2da      	uxtb	r2, r3
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	330c      	adds	r3, #12
 80111e8:	4619      	mov	r1, r3
 80111ea:	4610      	mov	r0, r2
 80111ec:	f001 f81f 	bl	801222e <ff_cre_syncobj>
 80111f0:	4603      	mov	r3, r0
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d101      	bne.n	80111fa <f_mount+0x7e>
 80111f6:	2302      	movs	r3, #2
 80111f8:	e01d      	b.n	8011236 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80111fa:	68fa      	ldr	r2, [r7, #12]
 80111fc:	4910      	ldr	r1, [pc, #64]	@ (8011240 <f_mount+0xc4>)
 80111fe:	69fb      	ldr	r3, [r7, #28]
 8011200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d002      	beq.n	8011210 <f_mount+0x94>
 801120a:	79fb      	ldrb	r3, [r7, #7]
 801120c:	2b01      	cmp	r3, #1
 801120e:	d001      	beq.n	8011214 <f_mount+0x98>
 8011210:	2300      	movs	r3, #0
 8011212:	e010      	b.n	8011236 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011214:	f107 010c 	add.w	r1, r7, #12
 8011218:	f107 0308 	add.w	r3, r7, #8
 801121c:	2200      	movs	r2, #0
 801121e:	4618      	mov	r0, r3
 8011220:	f7ff fd10 	bl	8010c44 <find_volume>
 8011224:	4603      	mov	r3, r0
 8011226:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	7dfa      	ldrb	r2, [r7, #23]
 801122c:	4611      	mov	r1, r2
 801122e:	4618      	mov	r0, r3
 8011230:	f7fe fb15 	bl	800f85e <unlock_fs>
 8011234:	7dfb      	ldrb	r3, [r7, #23]
}
 8011236:	4618      	mov	r0, r3
 8011238:	3720      	adds	r7, #32
 801123a:	46bd      	mov	sp, r7
 801123c:	bd80      	pop	{r7, pc}
 801123e:	bf00      	nop
 8011240:	24000a70 	.word	0x24000a70

08011244 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b098      	sub	sp, #96	@ 0x60
 8011248:	af00      	add	r7, sp, #0
 801124a:	60f8      	str	r0, [r7, #12]
 801124c:	60b9      	str	r1, [r7, #8]
 801124e:	4613      	mov	r3, r2
 8011250:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d101      	bne.n	801125c <f_open+0x18>
 8011258:	2309      	movs	r3, #9
 801125a:	e1b0      	b.n	80115be <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801125c:	79fb      	ldrb	r3, [r7, #7]
 801125e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011262:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011264:	79fa      	ldrb	r2, [r7, #7]
 8011266:	f107 0110 	add.w	r1, r7, #16
 801126a:	f107 0308 	add.w	r3, r7, #8
 801126e:	4618      	mov	r0, r3
 8011270:	f7ff fce8 	bl	8010c44 <find_volume>
 8011274:	4603      	mov	r3, r0
 8011276:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 801127a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801127e:	2b00      	cmp	r3, #0
 8011280:	f040 818d 	bne.w	801159e <f_open+0x35a>
		dj.obj.fs = fs;
 8011284:	693b      	ldr	r3, [r7, #16]
 8011286:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011288:	68ba      	ldr	r2, [r7, #8]
 801128a:	f107 0314 	add.w	r3, r7, #20
 801128e:	4611      	mov	r1, r2
 8011290:	4618      	mov	r0, r3
 8011292:	f7ff fbcb 	bl	8010a2c <follow_path>
 8011296:	4603      	mov	r3, r0
 8011298:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801129c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d118      	bne.n	80112d6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80112a4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80112a8:	b25b      	sxtb	r3, r3
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	da03      	bge.n	80112b6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80112ae:	2306      	movs	r3, #6
 80112b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80112b4:	e00f      	b.n	80112d6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80112b6:	79fb      	ldrb	r3, [r7, #7]
 80112b8:	2b01      	cmp	r3, #1
 80112ba:	bf8c      	ite	hi
 80112bc:	2301      	movhi	r3, #1
 80112be:	2300      	movls	r3, #0
 80112c0:	b2db      	uxtb	r3, r3
 80112c2:	461a      	mov	r2, r3
 80112c4:	f107 0314 	add.w	r3, r7, #20
 80112c8:	4611      	mov	r1, r2
 80112ca:	4618      	mov	r0, r3
 80112cc:	f7fe fae2 	bl	800f894 <chk_lock>
 80112d0:	4603      	mov	r3, r0
 80112d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80112d6:	79fb      	ldrb	r3, [r7, #7]
 80112d8:	f003 031c 	and.w	r3, r3, #28
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d07f      	beq.n	80113e0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80112e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d017      	beq.n	8011318 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80112e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80112ec:	2b04      	cmp	r3, #4
 80112ee:	d10e      	bne.n	801130e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80112f0:	f7fe fb2c 	bl	800f94c <enq_lock>
 80112f4:	4603      	mov	r3, r0
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d006      	beq.n	8011308 <f_open+0xc4>
 80112fa:	f107 0314 	add.w	r3, r7, #20
 80112fe:	4618      	mov	r0, r3
 8011300:	f7ff fa6d 	bl	80107de <dir_register>
 8011304:	4603      	mov	r3, r0
 8011306:	e000      	b.n	801130a <f_open+0xc6>
 8011308:	2312      	movs	r3, #18
 801130a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801130e:	79fb      	ldrb	r3, [r7, #7]
 8011310:	f043 0308 	orr.w	r3, r3, #8
 8011314:	71fb      	strb	r3, [r7, #7]
 8011316:	e010      	b.n	801133a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011318:	7ebb      	ldrb	r3, [r7, #26]
 801131a:	f003 0311 	and.w	r3, r3, #17
 801131e:	2b00      	cmp	r3, #0
 8011320:	d003      	beq.n	801132a <f_open+0xe6>
					res = FR_DENIED;
 8011322:	2307      	movs	r3, #7
 8011324:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011328:	e007      	b.n	801133a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801132a:	79fb      	ldrb	r3, [r7, #7]
 801132c:	f003 0304 	and.w	r3, r3, #4
 8011330:	2b00      	cmp	r3, #0
 8011332:	d002      	beq.n	801133a <f_open+0xf6>
 8011334:	2308      	movs	r3, #8
 8011336:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801133a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801133e:	2b00      	cmp	r3, #0
 8011340:	d168      	bne.n	8011414 <f_open+0x1d0>
 8011342:	79fb      	ldrb	r3, [r7, #7]
 8011344:	f003 0308 	and.w	r3, r3, #8
 8011348:	2b00      	cmp	r3, #0
 801134a:	d063      	beq.n	8011414 <f_open+0x1d0>
				dw = GET_FATTIME();
 801134c:	f7fd fe98 	bl	800f080 <get_fattime>
 8011350:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011354:	330e      	adds	r3, #14
 8011356:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011358:	4618      	mov	r0, r3
 801135a:	f7fe f9c0 	bl	800f6de <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801135e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011360:	3316      	adds	r3, #22
 8011362:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011364:	4618      	mov	r0, r3
 8011366:	f7fe f9ba 	bl	800f6de <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801136a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801136c:	330b      	adds	r3, #11
 801136e:	2220      	movs	r2, #32
 8011370:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011376:	4611      	mov	r1, r2
 8011378:	4618      	mov	r0, r3
 801137a:	f7ff f93f 	bl	80105fc <ld_clust>
 801137e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011384:	2200      	movs	r2, #0
 8011386:	4618      	mov	r0, r3
 8011388:	f7ff f957 	bl	801063a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801138c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801138e:	331c      	adds	r3, #28
 8011390:	2100      	movs	r1, #0
 8011392:	4618      	mov	r0, r3
 8011394:	f7fe f9a3 	bl	800f6de <st_dword>
					fs->wflag = 1;
 8011398:	693b      	ldr	r3, [r7, #16]
 801139a:	2201      	movs	r2, #1
 801139c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801139e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d037      	beq.n	8011414 <f_open+0x1d0>
						dw = fs->winsect;
 80113a4:	693b      	ldr	r3, [r7, #16]
 80113a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113a8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80113aa:	f107 0314 	add.w	r3, r7, #20
 80113ae:	2200      	movs	r2, #0
 80113b0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80113b2:	4618      	mov	r0, r3
 80113b4:	f7fe fe6a 	bl	801008c <remove_chain>
 80113b8:	4603      	mov	r3, r0
 80113ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80113be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d126      	bne.n	8011414 <f_open+0x1d0>
							res = move_window(fs, dw);
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7fe fc12 	bl	800fbf4 <move_window>
 80113d0:	4603      	mov	r3, r0
 80113d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80113d6:	693b      	ldr	r3, [r7, #16]
 80113d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80113da:	3a01      	subs	r2, #1
 80113dc:	611a      	str	r2, [r3, #16]
 80113de:	e019      	b.n	8011414 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80113e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d115      	bne.n	8011414 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80113e8:	7ebb      	ldrb	r3, [r7, #26]
 80113ea:	f003 0310 	and.w	r3, r3, #16
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d003      	beq.n	80113fa <f_open+0x1b6>
					res = FR_NO_FILE;
 80113f2:	2304      	movs	r3, #4
 80113f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80113f8:	e00c      	b.n	8011414 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80113fa:	79fb      	ldrb	r3, [r7, #7]
 80113fc:	f003 0302 	and.w	r3, r3, #2
 8011400:	2b00      	cmp	r3, #0
 8011402:	d007      	beq.n	8011414 <f_open+0x1d0>
 8011404:	7ebb      	ldrb	r3, [r7, #26]
 8011406:	f003 0301 	and.w	r3, r3, #1
 801140a:	2b00      	cmp	r3, #0
 801140c:	d002      	beq.n	8011414 <f_open+0x1d0>
						res = FR_DENIED;
 801140e:	2307      	movs	r3, #7
 8011410:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011414:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011418:	2b00      	cmp	r3, #0
 801141a:	d126      	bne.n	801146a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801141c:	79fb      	ldrb	r3, [r7, #7]
 801141e:	f003 0308 	and.w	r3, r3, #8
 8011422:	2b00      	cmp	r3, #0
 8011424:	d003      	beq.n	801142e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8011426:	79fb      	ldrb	r3, [r7, #7]
 8011428:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801142c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801142e:	693b      	ldr	r3, [r7, #16]
 8011430:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8011436:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801143c:	79fb      	ldrb	r3, [r7, #7]
 801143e:	2b01      	cmp	r3, #1
 8011440:	bf8c      	ite	hi
 8011442:	2301      	movhi	r3, #1
 8011444:	2300      	movls	r3, #0
 8011446:	b2db      	uxtb	r3, r3
 8011448:	461a      	mov	r2, r3
 801144a:	f107 0314 	add.w	r3, r7, #20
 801144e:	4611      	mov	r1, r2
 8011450:	4618      	mov	r0, r3
 8011452:	f7fe fa9d 	bl	800f990 <inc_lock>
 8011456:	4602      	mov	r2, r0
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	691b      	ldr	r3, [r3, #16]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d102      	bne.n	801146a <f_open+0x226>
 8011464:	2302      	movs	r3, #2
 8011466:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801146a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801146e:	2b00      	cmp	r3, #0
 8011470:	f040 8095 	bne.w	801159e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011474:	693b      	ldr	r3, [r7, #16]
 8011476:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011478:	4611      	mov	r1, r2
 801147a:	4618      	mov	r0, r3
 801147c:	f7ff f8be 	bl	80105fc <ld_clust>
 8011480:	4602      	mov	r2, r0
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011488:	331c      	adds	r3, #28
 801148a:	4618      	mov	r0, r3
 801148c:	f7fe f8e9 	bl	800f662 <ld_dword>
 8011490:	4602      	mov	r2, r0
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	2200      	movs	r2, #0
 801149a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801149c:	693a      	ldr	r2, [r7, #16]
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	88da      	ldrh	r2, [r3, #6]
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	79fa      	ldrb	r2, [r7, #7]
 80114ae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	2200      	movs	r2, #0
 80114b4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	2200      	movs	r2, #0
 80114ba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	2200      	movs	r2, #0
 80114c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	3330      	adds	r3, #48	@ 0x30
 80114c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80114ca:	2100      	movs	r1, #0
 80114cc:	4618      	mov	r0, r3
 80114ce:	f7fe f953 	bl	800f778 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80114d2:	79fb      	ldrb	r3, [r7, #7]
 80114d4:	f003 0320 	and.w	r3, r3, #32
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d060      	beq.n	801159e <f_open+0x35a>
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	68db      	ldr	r3, [r3, #12]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d05c      	beq.n	801159e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	68da      	ldr	r2, [r3, #12]
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80114ec:	693b      	ldr	r3, [r7, #16]
 80114ee:	895b      	ldrh	r3, [r3, #10]
 80114f0:	025b      	lsls	r3, r3, #9
 80114f2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	689b      	ldr	r3, [r3, #8]
 80114f8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	68db      	ldr	r3, [r3, #12]
 80114fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8011500:	e016      	b.n	8011530 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011506:	4618      	mov	r0, r3
 8011508:	f7fe fc2f 	bl	800fd6a <get_fat>
 801150c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801150e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011510:	2b01      	cmp	r3, #1
 8011512:	d802      	bhi.n	801151a <f_open+0x2d6>
 8011514:	2302      	movs	r3, #2
 8011516:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801151a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801151c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011520:	d102      	bne.n	8011528 <f_open+0x2e4>
 8011522:	2301      	movs	r3, #1
 8011524:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011528:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801152a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801152c:	1ad3      	subs	r3, r2, r3
 801152e:	657b      	str	r3, [r7, #84]	@ 0x54
 8011530:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011534:	2b00      	cmp	r3, #0
 8011536:	d103      	bne.n	8011540 <f_open+0x2fc>
 8011538:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801153a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801153c:	429a      	cmp	r2, r3
 801153e:	d8e0      	bhi.n	8011502 <f_open+0x2be>
				}
				fp->clust = clst;
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011544:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011546:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801154a:	2b00      	cmp	r3, #0
 801154c:	d127      	bne.n	801159e <f_open+0x35a>
 801154e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011554:	2b00      	cmp	r3, #0
 8011556:	d022      	beq.n	801159e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801155c:	4618      	mov	r0, r3
 801155e:	f7fe fbe5 	bl	800fd2c <clust2sect>
 8011562:	6478      	str	r0, [r7, #68]	@ 0x44
 8011564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011566:	2b00      	cmp	r3, #0
 8011568:	d103      	bne.n	8011572 <f_open+0x32e>
						res = FR_INT_ERR;
 801156a:	2302      	movs	r3, #2
 801156c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011570:	e015      	b.n	801159e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011574:	0a5a      	lsrs	r2, r3, #9
 8011576:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011578:	441a      	add	r2, r3
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801157e:	693b      	ldr	r3, [r7, #16]
 8011580:	7858      	ldrb	r0, [r3, #1]
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	6a1a      	ldr	r2, [r3, #32]
 801158c:	2301      	movs	r3, #1
 801158e:	f7fd fff1 	bl	800f574 <disk_read>
 8011592:	4603      	mov	r3, r0
 8011594:	2b00      	cmp	r3, #0
 8011596:	d002      	beq.n	801159e <f_open+0x35a>
 8011598:	2301      	movs	r3, #1
 801159a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801159e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d002      	beq.n	80115ac <f_open+0x368>
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	2200      	movs	r2, #0
 80115aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80115b2:	4611      	mov	r1, r2
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7fe f952 	bl	800f85e <unlock_fs>
 80115ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3760      	adds	r7, #96	@ 0x60
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}

080115c6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80115c6:	b580      	push	{r7, lr}
 80115c8:	b08c      	sub	sp, #48	@ 0x30
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	60f8      	str	r0, [r7, #12]
 80115ce:	60b9      	str	r1, [r7, #8]
 80115d0:	607a      	str	r2, [r7, #4]
 80115d2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80115d4:	68bb      	ldr	r3, [r7, #8]
 80115d6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	2200      	movs	r2, #0
 80115dc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	f107 0210 	add.w	r2, r7, #16
 80115e4:	4611      	mov	r1, r2
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7ff fd80 	bl	80110ec <validate>
 80115ec:	4603      	mov	r3, r0
 80115ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80115f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d107      	bne.n	801160a <f_write+0x44>
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	7d5b      	ldrb	r3, [r3, #21]
 80115fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011602:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011606:	2b00      	cmp	r3, #0
 8011608:	d009      	beq.n	801161e <f_write+0x58>
 801160a:	693b      	ldr	r3, [r7, #16]
 801160c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8011610:	4611      	mov	r1, r2
 8011612:	4618      	mov	r0, r3
 8011614:	f7fe f923 	bl	800f85e <unlock_fs>
 8011618:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801161c:	e173      	b.n	8011906 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	7d1b      	ldrb	r3, [r3, #20]
 8011622:	f003 0302 	and.w	r3, r3, #2
 8011626:	2b00      	cmp	r3, #0
 8011628:	d106      	bne.n	8011638 <f_write+0x72>
 801162a:	693b      	ldr	r3, [r7, #16]
 801162c:	2107      	movs	r1, #7
 801162e:	4618      	mov	r0, r3
 8011630:	f7fe f915 	bl	800f85e <unlock_fs>
 8011634:	2307      	movs	r3, #7
 8011636:	e166      	b.n	8011906 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	699a      	ldr	r2, [r3, #24]
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	441a      	add	r2, r3
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	699b      	ldr	r3, [r3, #24]
 8011644:	429a      	cmp	r2, r3
 8011646:	f080 814b 	bcs.w	80118e0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	699b      	ldr	r3, [r3, #24]
 801164e:	43db      	mvns	r3, r3
 8011650:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011652:	e145      	b.n	80118e0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	699b      	ldr	r3, [r3, #24]
 8011658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801165c:	2b00      	cmp	r3, #0
 801165e:	f040 8101 	bne.w	8011864 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	699b      	ldr	r3, [r3, #24]
 8011666:	0a5b      	lsrs	r3, r3, #9
 8011668:	693a      	ldr	r2, [r7, #16]
 801166a:	8952      	ldrh	r2, [r2, #10]
 801166c:	3a01      	subs	r2, #1
 801166e:	4013      	ands	r3, r2
 8011670:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011672:	69bb      	ldr	r3, [r7, #24]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d14d      	bne.n	8011714 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	699b      	ldr	r3, [r3, #24]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d10c      	bne.n	801169a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	689b      	ldr	r3, [r3, #8]
 8011684:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011688:	2b00      	cmp	r3, #0
 801168a:	d11a      	bne.n	80116c2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	2100      	movs	r1, #0
 8011690:	4618      	mov	r0, r3
 8011692:	f7fe fd60 	bl	8010156 <create_chain>
 8011696:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011698:	e013      	b.n	80116c2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d007      	beq.n	80116b2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	699b      	ldr	r3, [r3, #24]
 80116a6:	4619      	mov	r1, r3
 80116a8:	68f8      	ldr	r0, [r7, #12]
 80116aa:	f7fe fdec 	bl	8010286 <clmt_clust>
 80116ae:	62b8      	str	r0, [r7, #40]	@ 0x28
 80116b0:	e007      	b.n	80116c2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80116b2:	68fa      	ldr	r2, [r7, #12]
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	69db      	ldr	r3, [r3, #28]
 80116b8:	4619      	mov	r1, r3
 80116ba:	4610      	mov	r0, r2
 80116bc:	f7fe fd4b 	bl	8010156 <create_chain>
 80116c0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80116c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	f000 8110 	beq.w	80118ea <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80116ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116cc:	2b01      	cmp	r3, #1
 80116ce:	d109      	bne.n	80116e4 <f_write+0x11e>
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	2202      	movs	r2, #2
 80116d4:	755a      	strb	r2, [r3, #21]
 80116d6:	693b      	ldr	r3, [r7, #16]
 80116d8:	2102      	movs	r1, #2
 80116da:	4618      	mov	r0, r3
 80116dc:	f7fe f8bf 	bl	800f85e <unlock_fs>
 80116e0:	2302      	movs	r3, #2
 80116e2:	e110      	b.n	8011906 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80116e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80116ea:	d109      	bne.n	8011700 <f_write+0x13a>
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	2201      	movs	r2, #1
 80116f0:	755a      	strb	r2, [r3, #21]
 80116f2:	693b      	ldr	r3, [r7, #16]
 80116f4:	2101      	movs	r1, #1
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7fe f8b1 	bl	800f85e <unlock_fs>
 80116fc:	2301      	movs	r3, #1
 80116fe:	e102      	b.n	8011906 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011704:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	689b      	ldr	r3, [r3, #8]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d102      	bne.n	8011714 <f_write+0x14e>
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011712:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	7d1b      	ldrb	r3, [r3, #20]
 8011718:	b25b      	sxtb	r3, r3
 801171a:	2b00      	cmp	r3, #0
 801171c:	da1d      	bge.n	801175a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801171e:	693b      	ldr	r3, [r7, #16]
 8011720:	7858      	ldrb	r0, [r3, #1]
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	6a1a      	ldr	r2, [r3, #32]
 801172c:	2301      	movs	r3, #1
 801172e:	f7fd ff41 	bl	800f5b4 <disk_write>
 8011732:	4603      	mov	r3, r0
 8011734:	2b00      	cmp	r3, #0
 8011736:	d009      	beq.n	801174c <f_write+0x186>
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	2201      	movs	r2, #1
 801173c:	755a      	strb	r2, [r3, #21]
 801173e:	693b      	ldr	r3, [r7, #16]
 8011740:	2101      	movs	r1, #1
 8011742:	4618      	mov	r0, r3
 8011744:	f7fe f88b 	bl	800f85e <unlock_fs>
 8011748:	2301      	movs	r3, #1
 801174a:	e0dc      	b.n	8011906 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	7d1b      	ldrb	r3, [r3, #20]
 8011750:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011754:	b2da      	uxtb	r2, r3
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801175a:	693a      	ldr	r2, [r7, #16]
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	69db      	ldr	r3, [r3, #28]
 8011760:	4619      	mov	r1, r3
 8011762:	4610      	mov	r0, r2
 8011764:	f7fe fae2 	bl	800fd2c <clust2sect>
 8011768:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801176a:	697b      	ldr	r3, [r7, #20]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d109      	bne.n	8011784 <f_write+0x1be>
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	2202      	movs	r2, #2
 8011774:	755a      	strb	r2, [r3, #21]
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	2102      	movs	r1, #2
 801177a:	4618      	mov	r0, r3
 801177c:	f7fe f86f 	bl	800f85e <unlock_fs>
 8011780:	2302      	movs	r3, #2
 8011782:	e0c0      	b.n	8011906 <f_write+0x340>
			sect += csect;
 8011784:	697a      	ldr	r2, [r7, #20]
 8011786:	69bb      	ldr	r3, [r7, #24]
 8011788:	4413      	add	r3, r2
 801178a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	0a5b      	lsrs	r3, r3, #9
 8011790:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011792:	6a3b      	ldr	r3, [r7, #32]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d041      	beq.n	801181c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011798:	69ba      	ldr	r2, [r7, #24]
 801179a:	6a3b      	ldr	r3, [r7, #32]
 801179c:	4413      	add	r3, r2
 801179e:	693a      	ldr	r2, [r7, #16]
 80117a0:	8952      	ldrh	r2, [r2, #10]
 80117a2:	4293      	cmp	r3, r2
 80117a4:	d905      	bls.n	80117b2 <f_write+0x1ec>
					cc = fs->csize - csect;
 80117a6:	693b      	ldr	r3, [r7, #16]
 80117a8:	895b      	ldrh	r3, [r3, #10]
 80117aa:	461a      	mov	r2, r3
 80117ac:	69bb      	ldr	r3, [r7, #24]
 80117ae:	1ad3      	subs	r3, r2, r3
 80117b0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80117b2:	693b      	ldr	r3, [r7, #16]
 80117b4:	7858      	ldrb	r0, [r3, #1]
 80117b6:	6a3b      	ldr	r3, [r7, #32]
 80117b8:	697a      	ldr	r2, [r7, #20]
 80117ba:	69f9      	ldr	r1, [r7, #28]
 80117bc:	f7fd fefa 	bl	800f5b4 <disk_write>
 80117c0:	4603      	mov	r3, r0
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d009      	beq.n	80117da <f_write+0x214>
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	2201      	movs	r2, #1
 80117ca:	755a      	strb	r2, [r3, #21]
 80117cc:	693b      	ldr	r3, [r7, #16]
 80117ce:	2101      	movs	r1, #1
 80117d0:	4618      	mov	r0, r3
 80117d2:	f7fe f844 	bl	800f85e <unlock_fs>
 80117d6:	2301      	movs	r3, #1
 80117d8:	e095      	b.n	8011906 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	6a1a      	ldr	r2, [r3, #32]
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	1ad3      	subs	r3, r2, r3
 80117e2:	6a3a      	ldr	r2, [r7, #32]
 80117e4:	429a      	cmp	r2, r3
 80117e6:	d915      	bls.n	8011814 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	6a1a      	ldr	r2, [r3, #32]
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	1ad3      	subs	r3, r2, r3
 80117f6:	025b      	lsls	r3, r3, #9
 80117f8:	69fa      	ldr	r2, [r7, #28]
 80117fa:	4413      	add	r3, r2
 80117fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011800:	4619      	mov	r1, r3
 8011802:	f7fd ff98 	bl	800f736 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	7d1b      	ldrb	r3, [r3, #20]
 801180a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801180e:	b2da      	uxtb	r2, r3
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011814:	6a3b      	ldr	r3, [r7, #32]
 8011816:	025b      	lsls	r3, r3, #9
 8011818:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801181a:	e044      	b.n	80118a6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	6a1b      	ldr	r3, [r3, #32]
 8011820:	697a      	ldr	r2, [r7, #20]
 8011822:	429a      	cmp	r2, r3
 8011824:	d01b      	beq.n	801185e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	699a      	ldr	r2, [r3, #24]
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801182e:	429a      	cmp	r2, r3
 8011830:	d215      	bcs.n	801185e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011832:	693b      	ldr	r3, [r7, #16]
 8011834:	7858      	ldrb	r0, [r3, #1]
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801183c:	2301      	movs	r3, #1
 801183e:	697a      	ldr	r2, [r7, #20]
 8011840:	f7fd fe98 	bl	800f574 <disk_read>
 8011844:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011846:	2b00      	cmp	r3, #0
 8011848:	d009      	beq.n	801185e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	2201      	movs	r2, #1
 801184e:	755a      	strb	r2, [r3, #21]
 8011850:	693b      	ldr	r3, [r7, #16]
 8011852:	2101      	movs	r1, #1
 8011854:	4618      	mov	r0, r3
 8011856:	f7fe f802 	bl	800f85e <unlock_fs>
 801185a:	2301      	movs	r3, #1
 801185c:	e053      	b.n	8011906 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	697a      	ldr	r2, [r7, #20]
 8011862:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	699b      	ldr	r3, [r3, #24]
 8011868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801186c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8011870:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	429a      	cmp	r2, r3
 8011878:	d901      	bls.n	801187e <f_write+0x2b8>
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	699b      	ldr	r3, [r3, #24]
 8011888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801188c:	4413      	add	r3, r2
 801188e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011890:	69f9      	ldr	r1, [r7, #28]
 8011892:	4618      	mov	r0, r3
 8011894:	f7fd ff4f 	bl	800f736 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	7d1b      	ldrb	r3, [r3, #20]
 801189c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80118a0:	b2da      	uxtb	r2, r3
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80118a6:	69fa      	ldr	r2, [r7, #28]
 80118a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118aa:	4413      	add	r3, r2
 80118ac:	61fb      	str	r3, [r7, #28]
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	699a      	ldr	r2, [r3, #24]
 80118b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118b4:	441a      	add	r2, r3
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	619a      	str	r2, [r3, #24]
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	68da      	ldr	r2, [r3, #12]
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	699b      	ldr	r3, [r3, #24]
 80118c2:	429a      	cmp	r2, r3
 80118c4:	bf38      	it	cc
 80118c6:	461a      	movcc	r2, r3
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	60da      	str	r2, [r3, #12]
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	681a      	ldr	r2, [r3, #0]
 80118d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118d2:	441a      	add	r2, r3
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	601a      	str	r2, [r3, #0]
 80118d8:	687a      	ldr	r2, [r7, #4]
 80118da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118dc:	1ad3      	subs	r3, r2, r3
 80118de:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	f47f aeb6 	bne.w	8011654 <f_write+0x8e>
 80118e8:	e000      	b.n	80118ec <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80118ea:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	7d1b      	ldrb	r3, [r3, #20]
 80118f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80118f4:	b2da      	uxtb	r2, r3
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80118fa:	693b      	ldr	r3, [r7, #16]
 80118fc:	2100      	movs	r1, #0
 80118fe:	4618      	mov	r0, r3
 8011900:	f7fd ffad 	bl	800f85e <unlock_fs>
 8011904:	2300      	movs	r3, #0
}
 8011906:	4618      	mov	r0, r3
 8011908:	3730      	adds	r7, #48	@ 0x30
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}

0801190e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801190e:	b580      	push	{r7, lr}
 8011910:	b086      	sub	sp, #24
 8011912:	af00      	add	r7, sp, #0
 8011914:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	f107 0208 	add.w	r2, r7, #8
 801191c:	4611      	mov	r1, r2
 801191e:	4618      	mov	r0, r3
 8011920:	f7ff fbe4 	bl	80110ec <validate>
 8011924:	4603      	mov	r3, r0
 8011926:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011928:	7dfb      	ldrb	r3, [r7, #23]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d16d      	bne.n	8011a0a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	7d1b      	ldrb	r3, [r3, #20]
 8011932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011936:	2b00      	cmp	r3, #0
 8011938:	d067      	beq.n	8011a0a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	7d1b      	ldrb	r3, [r3, #20]
 801193e:	b25b      	sxtb	r3, r3
 8011940:	2b00      	cmp	r3, #0
 8011942:	da1a      	bge.n	801197a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011944:	68bb      	ldr	r3, [r7, #8]
 8011946:	7858      	ldrb	r0, [r3, #1]
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	6a1a      	ldr	r2, [r3, #32]
 8011952:	2301      	movs	r3, #1
 8011954:	f7fd fe2e 	bl	800f5b4 <disk_write>
 8011958:	4603      	mov	r3, r0
 801195a:	2b00      	cmp	r3, #0
 801195c:	d006      	beq.n	801196c <f_sync+0x5e>
 801195e:	68bb      	ldr	r3, [r7, #8]
 8011960:	2101      	movs	r1, #1
 8011962:	4618      	mov	r0, r3
 8011964:	f7fd ff7b 	bl	800f85e <unlock_fs>
 8011968:	2301      	movs	r3, #1
 801196a:	e055      	b.n	8011a18 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	7d1b      	ldrb	r3, [r3, #20]
 8011970:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011974:	b2da      	uxtb	r2, r3
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801197a:	f7fd fb81 	bl	800f080 <get_fattime>
 801197e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011980:	68ba      	ldr	r2, [r7, #8]
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011986:	4619      	mov	r1, r3
 8011988:	4610      	mov	r0, r2
 801198a:	f7fe f933 	bl	800fbf4 <move_window>
 801198e:	4603      	mov	r3, r0
 8011990:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011992:	7dfb      	ldrb	r3, [r7, #23]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d138      	bne.n	8011a0a <f_sync+0xfc>
					dir = fp->dir_ptr;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801199c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	330b      	adds	r3, #11
 80119a2:	781a      	ldrb	r2, [r3, #0]
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	330b      	adds	r3, #11
 80119a8:	f042 0220 	orr.w	r2, r2, #32
 80119ac:	b2d2      	uxtb	r2, r2
 80119ae:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6818      	ldr	r0, [r3, #0]
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	689b      	ldr	r3, [r3, #8]
 80119b8:	461a      	mov	r2, r3
 80119ba:	68f9      	ldr	r1, [r7, #12]
 80119bc:	f7fe fe3d 	bl	801063a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	f103 021c 	add.w	r2, r3, #28
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	68db      	ldr	r3, [r3, #12]
 80119ca:	4619      	mov	r1, r3
 80119cc:	4610      	mov	r0, r2
 80119ce:	f7fd fe86 	bl	800f6de <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	3316      	adds	r3, #22
 80119d6:	6939      	ldr	r1, [r7, #16]
 80119d8:	4618      	mov	r0, r3
 80119da:	f7fd fe80 	bl	800f6de <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	3312      	adds	r3, #18
 80119e2:	2100      	movs	r1, #0
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7fd fe5f 	bl	800f6a8 <st_word>
					fs->wflag = 1;
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	2201      	movs	r2, #1
 80119ee:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80119f0:	68bb      	ldr	r3, [r7, #8]
 80119f2:	4618      	mov	r0, r3
 80119f4:	f7fe f92c 	bl	800fc50 <sync_fs>
 80119f8:	4603      	mov	r3, r0
 80119fa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	7d1b      	ldrb	r3, [r3, #20]
 8011a00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011a04:	b2da      	uxtb	r2, r3
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011a0a:	68bb      	ldr	r3, [r7, #8]
 8011a0c:	7dfa      	ldrb	r2, [r7, #23]
 8011a0e:	4611      	mov	r1, r2
 8011a10:	4618      	mov	r0, r3
 8011a12:	f7fd ff24 	bl	800f85e <unlock_fs>
 8011a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3718      	adds	r7, #24
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}

08011a20 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b084      	sub	sp, #16
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f7ff ff70 	bl	801190e <f_sync>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011a32:	7bfb      	ldrb	r3, [r7, #15]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d11d      	bne.n	8011a74 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f107 0208 	add.w	r2, r7, #8
 8011a3e:	4611      	mov	r1, r2
 8011a40:	4618      	mov	r0, r3
 8011a42:	f7ff fb53 	bl	80110ec <validate>
 8011a46:	4603      	mov	r3, r0
 8011a48:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011a4a:	7bfb      	ldrb	r3, [r7, #15]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d111      	bne.n	8011a74 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	691b      	ldr	r3, [r3, #16]
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7fe f829 	bl	800faac <dec_lock>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011a5e:	7bfb      	ldrb	r3, [r7, #15]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d102      	bne.n	8011a6a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2200      	movs	r2, #0
 8011a68:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011a6a:	68bb      	ldr	r3, [r7, #8]
 8011a6c:	2100      	movs	r1, #0
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7fd fef5 	bl	800f85e <unlock_fs>
#endif
		}
	}
	return res;
 8011a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	3710      	adds	r7, #16
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}

08011a7e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011a7e:	b580      	push	{r7, lr}
 8011a80:	b086      	sub	sp, #24
 8011a82:	af00      	add	r7, sp, #0
 8011a84:	6078      	str	r0, [r7, #4]
 8011a86:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d101      	bne.n	8011a92 <f_opendir+0x14>
 8011a8e:	2309      	movs	r3, #9
 8011a90:	e06a      	b.n	8011b68 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8011a96:	f107 010c 	add.w	r1, r7, #12
 8011a9a:	463b      	mov	r3, r7
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7ff f8d0 	bl	8010c44 <find_volume>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011aa8:	7dfb      	ldrb	r3, [r7, #23]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d14f      	bne.n	8011b4e <f_opendir+0xd0>
		obj->fs = fs;
 8011aae:	68fa      	ldr	r2, [r7, #12]
 8011ab0:	693b      	ldr	r3, [r7, #16]
 8011ab2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	4619      	mov	r1, r3
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	f7fe ffb7 	bl	8010a2c <follow_path>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8011ac2:	7dfb      	ldrb	r3, [r7, #23]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d13d      	bne.n	8011b44 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011ace:	b25b      	sxtb	r3, r3
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	db12      	blt.n	8011afa <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8011ad4:	693b      	ldr	r3, [r7, #16]
 8011ad6:	799b      	ldrb	r3, [r3, #6]
 8011ad8:	f003 0310 	and.w	r3, r3, #16
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d00a      	beq.n	8011af6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011ae0:	68fa      	ldr	r2, [r7, #12]
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6a1b      	ldr	r3, [r3, #32]
 8011ae6:	4619      	mov	r1, r3
 8011ae8:	4610      	mov	r0, r2
 8011aea:	f7fe fd87 	bl	80105fc <ld_clust>
 8011aee:	4602      	mov	r2, r0
 8011af0:	693b      	ldr	r3, [r7, #16]
 8011af2:	609a      	str	r2, [r3, #8]
 8011af4:	e001      	b.n	8011afa <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8011af6:	2305      	movs	r3, #5
 8011af8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8011afa:	7dfb      	ldrb	r3, [r7, #23]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d121      	bne.n	8011b44 <f_opendir+0xc6>
				obj->id = fs->id;
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	88da      	ldrh	r2, [r3, #6]
 8011b04:	693b      	ldr	r3, [r7, #16]
 8011b06:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8011b08:	2100      	movs	r1, #0
 8011b0a:	6878      	ldr	r0, [r7, #4]
 8011b0c:	f7fe fbef 	bl	80102ee <dir_sdi>
 8011b10:	4603      	mov	r3, r0
 8011b12:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8011b14:	7dfb      	ldrb	r3, [r7, #23]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d114      	bne.n	8011b44 <f_opendir+0xc6>
					if (obj->sclust) {
 8011b1a:	693b      	ldr	r3, [r7, #16]
 8011b1c:	689b      	ldr	r3, [r3, #8]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d00d      	beq.n	8011b3e <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8011b22:	2100      	movs	r1, #0
 8011b24:	6878      	ldr	r0, [r7, #4]
 8011b26:	f7fd ff33 	bl	800f990 <inc_lock>
 8011b2a:	4602      	mov	r2, r0
 8011b2c:	693b      	ldr	r3, [r7, #16]
 8011b2e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	691b      	ldr	r3, [r3, #16]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d105      	bne.n	8011b44 <f_opendir+0xc6>
 8011b38:	2312      	movs	r3, #18
 8011b3a:	75fb      	strb	r3, [r7, #23]
 8011b3c:	e002      	b.n	8011b44 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8011b3e:	693b      	ldr	r3, [r7, #16]
 8011b40:	2200      	movs	r2, #0
 8011b42:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011b44:	7dfb      	ldrb	r3, [r7, #23]
 8011b46:	2b04      	cmp	r3, #4
 8011b48:	d101      	bne.n	8011b4e <f_opendir+0xd0>
 8011b4a:	2305      	movs	r3, #5
 8011b4c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8011b4e:	7dfb      	ldrb	r3, [r7, #23]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d002      	beq.n	8011b5a <f_opendir+0xdc>
 8011b54:	693b      	ldr	r3, [r7, #16]
 8011b56:	2200      	movs	r2, #0
 8011b58:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	7dfa      	ldrb	r2, [r7, #23]
 8011b5e:	4611      	mov	r1, r2
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7fd fe7c 	bl	800f85e <unlock_fs>
 8011b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b68:	4618      	mov	r0, r3
 8011b6a:	3718      	adds	r7, #24
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}

08011b70 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b084      	sub	sp, #16
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f107 0208 	add.w	r2, r7, #8
 8011b7e:	4611      	mov	r1, r2
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7ff fab3 	bl	80110ec <validate>
 8011b86:	4603      	mov	r3, r0
 8011b88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011b8a:	7bfb      	ldrb	r3, [r7, #15]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d115      	bne.n	8011bbc <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	691b      	ldr	r3, [r3, #16]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d006      	beq.n	8011ba6 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	691b      	ldr	r3, [r3, #16]
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f7fd ff85 	bl	800faac <dec_lock>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8011ba6:	7bfb      	ldrb	r3, [r7, #15]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d102      	bne.n	8011bb2 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	2100      	movs	r1, #0
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f7fd fe51 	bl	800f85e <unlock_fs>
#endif
	}
	return res;
 8011bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3710      	adds	r7, #16
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}

08011bc6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8011bc6:	b580      	push	{r7, lr}
 8011bc8:	b084      	sub	sp, #16
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	6078      	str	r0, [r7, #4]
 8011bce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f107 0208 	add.w	r2, r7, #8
 8011bd6:	4611      	mov	r1, r2
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f7ff fa87 	bl	80110ec <validate>
 8011bde:	4603      	mov	r3, r0
 8011be0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011be2:	7bfb      	ldrb	r3, [r7, #15]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d126      	bne.n	8011c36 <f_readdir+0x70>
		if (!fno) {
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d106      	bne.n	8011bfc <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8011bee:	2100      	movs	r1, #0
 8011bf0:	6878      	ldr	r0, [r7, #4]
 8011bf2:	f7fe fb7c 	bl	80102ee <dir_sdi>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	73fb      	strb	r3, [r7, #15]
 8011bfa:	e01c      	b.n	8011c36 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8011bfc:	2100      	movs	r1, #0
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f7fe fd3b 	bl	801067a <dir_read>
 8011c04:	4603      	mov	r3, r0
 8011c06:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8011c08:	7bfb      	ldrb	r3, [r7, #15]
 8011c0a:	2b04      	cmp	r3, #4
 8011c0c:	d101      	bne.n	8011c12 <f_readdir+0x4c>
 8011c0e:	2300      	movs	r3, #0
 8011c10:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8011c12:	7bfb      	ldrb	r3, [r7, #15]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d10e      	bne.n	8011c36 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8011c18:	6839      	ldr	r1, [r7, #0]
 8011c1a:	6878      	ldr	r0, [r7, #4]
 8011c1c:	f7fe fe11 	bl	8010842 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8011c20:	2100      	movs	r1, #0
 8011c22:	6878      	ldr	r0, [r7, #4]
 8011c24:	f7fe fbde 	bl	80103e4 <dir_next>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8011c2c:	7bfb      	ldrb	r3, [r7, #15]
 8011c2e:	2b04      	cmp	r3, #4
 8011c30:	d101      	bne.n	8011c36 <f_readdir+0x70>
 8011c32:	2300      	movs	r3, #0
 8011c34:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	7bfa      	ldrb	r2, [r7, #15]
 8011c3a:	4611      	mov	r1, r2
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7fd fe0e 	bl	800f85e <unlock_fs>
 8011c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c44:	4618      	mov	r0, r3
 8011c46:	3710      	adds	r7, #16
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}

08011c4c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b084      	sub	sp, #16
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
 8011c54:	460b      	mov	r3, r1
 8011c56:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8011c58:	78fb      	ldrb	r3, [r7, #3]
 8011c5a:	2b0a      	cmp	r3, #10
 8011c5c:	d103      	bne.n	8011c66 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8011c5e:	210d      	movs	r1, #13
 8011c60:	6878      	ldr	r0, [r7, #4]
 8011c62:	f7ff fff3 	bl	8011c4c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	685b      	ldr	r3, [r3, #4]
 8011c6a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	db25      	blt.n	8011cbe <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	1c5a      	adds	r2, r3, #1
 8011c76:	60fa      	str	r2, [r7, #12]
 8011c78:	687a      	ldr	r2, [r7, #4]
 8011c7a:	4413      	add	r3, r2
 8011c7c:	78fa      	ldrb	r2, [r7, #3]
 8011c7e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	2b3c      	cmp	r3, #60	@ 0x3c
 8011c84:	dd12      	ble.n	8011cac <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	6818      	ldr	r0, [r3, #0]
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f103 010c 	add.w	r1, r3, #12
 8011c90:	68fa      	ldr	r2, [r7, #12]
 8011c92:	f107 0308 	add.w	r3, r7, #8
 8011c96:	f7ff fc96 	bl	80115c6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8011c9a:	68ba      	ldr	r2, [r7, #8]
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	429a      	cmp	r2, r3
 8011ca0:	d101      	bne.n	8011ca6 <putc_bfd+0x5a>
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	e001      	b.n	8011caa <putc_bfd+0x5e>
 8011ca6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011caa:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	68fa      	ldr	r2, [r7, #12]
 8011cb0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	689b      	ldr	r3, [r3, #8]
 8011cb6:	1c5a      	adds	r2, r3, #1
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	609a      	str	r2, [r3, #8]
 8011cbc:	e000      	b.n	8011cc0 <putc_bfd+0x74>
	if (i < 0) return;
 8011cbe:	bf00      	nop
}
 8011cc0:	3710      	adds	r7, #16
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd80      	pop	{r7, pc}

08011cc6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8011cc6:	b580      	push	{r7, lr}
 8011cc8:	b084      	sub	sp, #16
 8011cca:	af00      	add	r7, sp, #0
 8011ccc:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	685b      	ldr	r3, [r3, #4]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	db16      	blt.n	8011d04 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	6818      	ldr	r0, [r3, #0]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	f103 010c 	add.w	r1, r3, #12
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	685b      	ldr	r3, [r3, #4]
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	f107 030c 	add.w	r3, r7, #12
 8011cea:	f7ff fc6c 	bl	80115c6 <f_write>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d107      	bne.n	8011d04 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	685b      	ldr	r3, [r3, #4]
 8011cf8:	68fa      	ldr	r2, [r7, #12]
 8011cfa:	4293      	cmp	r3, r2
 8011cfc:	d102      	bne.n	8011d04 <putc_flush+0x3e>
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	689b      	ldr	r3, [r3, #8]
 8011d02:	e001      	b.n	8011d08 <putc_flush+0x42>
	return EOF;
 8011d04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8011d08:	4618      	mov	r0, r3
 8011d0a:	3710      	adds	r7, #16
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}

08011d10 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8011d10:	b480      	push	{r7}
 8011d12:	b083      	sub	sp, #12
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
 8011d18:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	683a      	ldr	r2, [r7, #0]
 8011d1e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2200      	movs	r2, #0
 8011d24:	605a      	str	r2, [r3, #4]
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	685a      	ldr	r2, [r3, #4]
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	609a      	str	r2, [r3, #8]
}
 8011d2e:	bf00      	nop
 8011d30:	370c      	adds	r7, #12
 8011d32:	46bd      	mov	sp, r7
 8011d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d38:	4770      	bx	lr
	...

08011d3c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8011d3c:	b40e      	push	{r1, r2, r3}
 8011d3e:	b580      	push	{r7, lr}
 8011d40:	b0a7      	sub	sp, #156	@ 0x9c
 8011d42:	af00      	add	r7, sp, #0
 8011d44:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8011d46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011d4a:	6879      	ldr	r1, [r7, #4]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7ff ffdf 	bl	8011d10 <putc_init>

	va_start(arp, fmt);
 8011d52:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8011d56:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 8011d58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011d5c:	1c5a      	adds	r2, r3, #1
 8011d5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011d62:	781b      	ldrb	r3, [r3, #0]
 8011d64:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 8011d68:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	f000 81f2 	beq.w	8012156 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8011d72:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011d76:	2b25      	cmp	r3, #37	@ 0x25
 8011d78:	d008      	beq.n	8011d8c <f_printf+0x50>
			putc_bfd(&pb, c);
 8011d7a:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8011d7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011d82:	4611      	mov	r1, r2
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7ff ff61 	bl	8011c4c <putc_bfd>
			continue;
 8011d8a:	e1e3      	b.n	8012154 <f_printf+0x418>
		}
		w = f = 0;
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011d92:	2300      	movs	r3, #0
 8011d94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 8011d98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011d9c:	1c5a      	adds	r2, r3, #1
 8011d9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011da2:	781b      	ldrb	r3, [r3, #0]
 8011da4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8011da8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011dac:	2b30      	cmp	r3, #48	@ 0x30
 8011dae:	d10b      	bne.n	8011dc8 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8011db0:	2301      	movs	r3, #1
 8011db2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011db6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011dba:	1c5a      	adds	r2, r3, #1
 8011dbc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011dc0:	781b      	ldrb	r3, [r3, #0]
 8011dc2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8011dc6:	e024      	b.n	8011e12 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8011dc8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011dcc:	2b2d      	cmp	r3, #45	@ 0x2d
 8011dce:	d120      	bne.n	8011e12 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8011dd0:	2302      	movs	r3, #2
 8011dd2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011dd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011dda:	1c5a      	adds	r2, r3, #1
 8011ddc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011de0:	781b      	ldrb	r3, [r3, #0]
 8011de2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8011de6:	e014      	b.n	8011e12 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8011de8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011dec:	4613      	mov	r3, r2
 8011dee:	009b      	lsls	r3, r3, #2
 8011df0:	4413      	add	r3, r2
 8011df2:	005b      	lsls	r3, r3, #1
 8011df4:	461a      	mov	r2, r3
 8011df6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011dfa:	4413      	add	r3, r2
 8011dfc:	3b30      	subs	r3, #48	@ 0x30
 8011dfe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 8011e02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011e06:	1c5a      	adds	r2, r3, #1
 8011e08:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011e0c:	781b      	ldrb	r3, [r3, #0]
 8011e0e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 8011e12:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011e16:	2b2f      	cmp	r3, #47	@ 0x2f
 8011e18:	d903      	bls.n	8011e22 <f_printf+0xe6>
 8011e1a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011e1e:	2b39      	cmp	r3, #57	@ 0x39
 8011e20:	d9e2      	bls.n	8011de8 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8011e22:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011e26:	2b6c      	cmp	r3, #108	@ 0x6c
 8011e28:	d003      	beq.n	8011e32 <f_printf+0xf6>
 8011e2a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011e2e:	2b4c      	cmp	r3, #76	@ 0x4c
 8011e30:	d10d      	bne.n	8011e4e <f_printf+0x112>
			f |= 4; c = *fmt++;
 8011e32:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011e36:	f043 0304 	orr.w	r3, r3, #4
 8011e3a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011e3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011e42:	1c5a      	adds	r2, r3, #1
 8011e44:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011e48:	781b      	ldrb	r3, [r3, #0]
 8011e4a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 8011e4e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	f000 8181 	beq.w	801215a <f_printf+0x41e>
		d = c;
 8011e58:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011e5c:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 8011e60:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011e64:	2b60      	cmp	r3, #96	@ 0x60
 8011e66:	d908      	bls.n	8011e7a <f_printf+0x13e>
 8011e68:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011e6c:	2b7a      	cmp	r3, #122	@ 0x7a
 8011e6e:	d804      	bhi.n	8011e7a <f_printf+0x13e>
 8011e70:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011e74:	3b20      	subs	r3, #32
 8011e76:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 8011e7a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011e7e:	3b42      	subs	r3, #66	@ 0x42
 8011e80:	2b16      	cmp	r3, #22
 8011e82:	f200 8098 	bhi.w	8011fb6 <f_printf+0x27a>
 8011e86:	a201      	add	r2, pc, #4	@ (adr r2, 8011e8c <f_printf+0x150>)
 8011e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e8c:	08011f97 	.word	0x08011f97
 8011e90:	08011f7f 	.word	0x08011f7f
 8011e94:	08011fa7 	.word	0x08011fa7
 8011e98:	08011fb7 	.word	0x08011fb7
 8011e9c:	08011fb7 	.word	0x08011fb7
 8011ea0:	08011fb7 	.word	0x08011fb7
 8011ea4:	08011fb7 	.word	0x08011fb7
 8011ea8:	08011fb7 	.word	0x08011fb7
 8011eac:	08011fb7 	.word	0x08011fb7
 8011eb0:	08011fb7 	.word	0x08011fb7
 8011eb4:	08011fb7 	.word	0x08011fb7
 8011eb8:	08011fb7 	.word	0x08011fb7
 8011ebc:	08011fb7 	.word	0x08011fb7
 8011ec0:	08011f9f 	.word	0x08011f9f
 8011ec4:	08011fb7 	.word	0x08011fb7
 8011ec8:	08011fb7 	.word	0x08011fb7
 8011ecc:	08011fb7 	.word	0x08011fb7
 8011ed0:	08011ee9 	.word	0x08011ee9
 8011ed4:	08011fb7 	.word	0x08011fb7
 8011ed8:	08011fa7 	.word	0x08011fa7
 8011edc:	08011fb7 	.word	0x08011fb7
 8011ee0:	08011fb7 	.word	0x08011fb7
 8011ee4:	08011faf 	.word	0x08011faf
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8011ee8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011eea:	1d1a      	adds	r2, r3, #4
 8011eec:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011ef8:	e004      	b.n	8011f04 <f_printf+0x1c8>
 8011efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011efe:	3301      	adds	r3, #1
 8011f00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011f04:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011f0a:	4413      	add	r3, r2
 8011f0c:	781b      	ldrb	r3, [r3, #0]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d1f3      	bne.n	8011efa <f_printf+0x1be>
			if (!(f & 2)) {
 8011f12:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011f16:	f003 0302 	and.w	r3, r3, #2
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d11a      	bne.n	8011f54 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8011f1e:	e005      	b.n	8011f2c <f_printf+0x1f0>
 8011f20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011f24:	2120      	movs	r1, #32
 8011f26:	4618      	mov	r0, r3
 8011f28:	f7ff fe90 	bl	8011c4c <putc_bfd>
 8011f2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011f30:	1c5a      	adds	r2, r3, #1
 8011f32:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011f36:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011f3a:	429a      	cmp	r2, r3
 8011f3c:	d8f0      	bhi.n	8011f20 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8011f3e:	e009      	b.n	8011f54 <f_printf+0x218>
 8011f40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011f42:	1c5a      	adds	r2, r3, #1
 8011f44:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011f46:	781a      	ldrb	r2, [r3, #0]
 8011f48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011f4c:	4611      	mov	r1, r2
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f7ff fe7c 	bl	8011c4c <putc_bfd>
 8011f54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011f56:	781b      	ldrb	r3, [r3, #0]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d1f1      	bne.n	8011f40 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8011f5c:	e005      	b.n	8011f6a <f_printf+0x22e>
 8011f5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011f62:	2120      	movs	r1, #32
 8011f64:	4618      	mov	r0, r3
 8011f66:	f7ff fe71 	bl	8011c4c <putc_bfd>
 8011f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011f6e:	1c5a      	adds	r2, r3, #1
 8011f70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011f74:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	d8f0      	bhi.n	8011f5e <f_printf+0x222>
			continue;
 8011f7c:	e0ea      	b.n	8012154 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8011f7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011f80:	1d1a      	adds	r2, r3, #4
 8011f82:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	b2da      	uxtb	r2, r3
 8011f88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011f8c:	4611      	mov	r1, r2
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f7ff fe5c 	bl	8011c4c <putc_bfd>
 8011f94:	e0de      	b.n	8012154 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8011f96:	2302      	movs	r3, #2
 8011f98:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011f9c:	e014      	b.n	8011fc8 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8011f9e:	2308      	movs	r3, #8
 8011fa0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011fa4:	e010      	b.n	8011fc8 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8011fa6:	230a      	movs	r3, #10
 8011fa8:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011fac:	e00c      	b.n	8011fc8 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8011fae:	2310      	movs	r3, #16
 8011fb0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011fb4:	e008      	b.n	8011fc8 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8011fb6:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8011fba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011fbe:	4611      	mov	r1, r2
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f7ff fe43 	bl	8011c4c <putc_bfd>
 8011fc6:	e0c5      	b.n	8012154 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8011fc8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011fcc:	f003 0304 	and.w	r3, r3, #4
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d004      	beq.n	8011fde <f_printf+0x2a2>
 8011fd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011fd6:	1d1a      	adds	r2, r3, #4
 8011fd8:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	e00c      	b.n	8011ff8 <f_printf+0x2bc>
 8011fde:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011fe2:	2b44      	cmp	r3, #68	@ 0x44
 8011fe4:	d104      	bne.n	8011ff0 <f_printf+0x2b4>
 8011fe6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011fe8:	1d1a      	adds	r2, r3, #4
 8011fea:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	e003      	b.n	8011ff8 <f_printf+0x2bc>
 8011ff0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011ff2:	1d1a      	adds	r2, r3, #4
 8011ff4:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8011ffc:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012000:	2b44      	cmp	r3, #68	@ 0x44
 8012002:	d10e      	bne.n	8012022 <f_printf+0x2e6>
 8012004:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012008:	2b00      	cmp	r3, #0
 801200a:	da0a      	bge.n	8012022 <f_printf+0x2e6>
			v = 0 - v;
 801200c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012010:	425b      	negs	r3, r3
 8012012:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 8012016:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801201a:	f043 0308 	orr.w	r3, r3, #8
 801201e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 8012022:	2300      	movs	r3, #0
 8012024:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8012028:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 801202c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012030:	fbb3 f1f2 	udiv	r1, r3, r2
 8012034:	fb01 f202 	mul.w	r2, r1, r2
 8012038:	1a9b      	subs	r3, r3, r2
 801203a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 801203e:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8012042:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012046:	fbb2 f3f3 	udiv	r3, r2, r3
 801204a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 801204e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012052:	2b09      	cmp	r3, #9
 8012054:	d90b      	bls.n	801206e <f_printf+0x332>
 8012056:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801205a:	2b78      	cmp	r3, #120	@ 0x78
 801205c:	d101      	bne.n	8012062 <f_printf+0x326>
 801205e:	2227      	movs	r2, #39	@ 0x27
 8012060:	e000      	b.n	8012064 <f_printf+0x328>
 8012062:	2207      	movs	r2, #7
 8012064:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012068:	4413      	add	r3, r2
 801206a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 801206e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012072:	1c5a      	adds	r2, r3, #1
 8012074:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8012078:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 801207c:	3230      	adds	r2, #48	@ 0x30
 801207e:	b2d2      	uxtb	r2, r2
 8012080:	3398      	adds	r3, #152	@ 0x98
 8012082:	443b      	add	r3, r7
 8012084:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8012088:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801208c:	2b00      	cmp	r3, #0
 801208e:	d003      	beq.n	8012098 <f_printf+0x35c>
 8012090:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012094:	2b1f      	cmp	r3, #31
 8012096:	d9c7      	bls.n	8012028 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8012098:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801209c:	f003 0308 	and.w	r3, r3, #8
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d009      	beq.n	80120b8 <f_printf+0x37c>
 80120a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80120a8:	1c5a      	adds	r2, r3, #1
 80120aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80120ae:	3398      	adds	r3, #152	@ 0x98
 80120b0:	443b      	add	r3, r7
 80120b2:	222d      	movs	r2, #45	@ 0x2d
 80120b4:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80120b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80120bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80120c0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80120c4:	f003 0301 	and.w	r3, r3, #1
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d001      	beq.n	80120d0 <f_printf+0x394>
 80120cc:	2330      	movs	r3, #48	@ 0x30
 80120ce:	e000      	b.n	80120d2 <f_printf+0x396>
 80120d0:	2320      	movs	r3, #32
 80120d2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80120d6:	e007      	b.n	80120e8 <f_printf+0x3ac>
 80120d8:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80120dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80120e0:	4611      	mov	r1, r2
 80120e2:	4618      	mov	r0, r3
 80120e4:	f7ff fdb2 	bl	8011c4c <putc_bfd>
 80120e8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80120ec:	f003 0302 	and.w	r3, r3, #2
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d108      	bne.n	8012106 <f_printf+0x3ca>
 80120f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80120f8:	1c5a      	adds	r2, r3, #1
 80120fa:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80120fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012102:	429a      	cmp	r2, r3
 8012104:	d8e8      	bhi.n	80120d8 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8012106:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801210a:	3b01      	subs	r3, #1
 801210c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012110:	f107 020c 	add.w	r2, r7, #12
 8012114:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012118:	4413      	add	r3, r2
 801211a:	781a      	ldrb	r2, [r3, #0]
 801211c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012120:	4611      	mov	r1, r2
 8012122:	4618      	mov	r0, r3
 8012124:	f7ff fd92 	bl	8011c4c <putc_bfd>
		} while (i);
 8012128:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801212c:	2b00      	cmp	r3, #0
 801212e:	d1ea      	bne.n	8012106 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8012130:	e007      	b.n	8012142 <f_printf+0x406>
 8012132:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8012136:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801213a:	4611      	mov	r1, r2
 801213c:	4618      	mov	r0, r3
 801213e:	f7ff fd85 	bl	8011c4c <putc_bfd>
 8012142:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012146:	1c5a      	adds	r2, r3, #1
 8012148:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801214c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012150:	429a      	cmp	r2, r3
 8012152:	d8ee      	bhi.n	8012132 <f_printf+0x3f6>
		c = *fmt++;
 8012154:	e600      	b.n	8011d58 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8012156:	bf00      	nop
 8012158:	e000      	b.n	801215c <f_printf+0x420>
		if (!c) break;
 801215a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 801215c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012160:	4618      	mov	r0, r3
 8012162:	f7ff fdb0 	bl	8011cc6 <putc_flush>
 8012166:	4603      	mov	r3, r0
}
 8012168:	4618      	mov	r0, r3
 801216a:	379c      	adds	r7, #156	@ 0x9c
 801216c:	46bd      	mov	sp, r7
 801216e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012172:	b003      	add	sp, #12
 8012174:	4770      	bx	lr
 8012176:	bf00      	nop

08012178 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012178:	b480      	push	{r7}
 801217a:	b087      	sub	sp, #28
 801217c:	af00      	add	r7, sp, #0
 801217e:	60f8      	str	r0, [r7, #12]
 8012180:	60b9      	str	r1, [r7, #8]
 8012182:	4613      	mov	r3, r2
 8012184:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012186:	2301      	movs	r3, #1
 8012188:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801218a:	2300      	movs	r3, #0
 801218c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801218e:	4b1f      	ldr	r3, [pc, #124]	@ (801220c <FATFS_LinkDriverEx+0x94>)
 8012190:	7a5b      	ldrb	r3, [r3, #9]
 8012192:	b2db      	uxtb	r3, r3
 8012194:	2b00      	cmp	r3, #0
 8012196:	d131      	bne.n	80121fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012198:	4b1c      	ldr	r3, [pc, #112]	@ (801220c <FATFS_LinkDriverEx+0x94>)
 801219a:	7a5b      	ldrb	r3, [r3, #9]
 801219c:	b2db      	uxtb	r3, r3
 801219e:	461a      	mov	r2, r3
 80121a0:	4b1a      	ldr	r3, [pc, #104]	@ (801220c <FATFS_LinkDriverEx+0x94>)
 80121a2:	2100      	movs	r1, #0
 80121a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80121a6:	4b19      	ldr	r3, [pc, #100]	@ (801220c <FATFS_LinkDriverEx+0x94>)
 80121a8:	7a5b      	ldrb	r3, [r3, #9]
 80121aa:	b2db      	uxtb	r3, r3
 80121ac:	4a17      	ldr	r2, [pc, #92]	@ (801220c <FATFS_LinkDriverEx+0x94>)
 80121ae:	009b      	lsls	r3, r3, #2
 80121b0:	4413      	add	r3, r2
 80121b2:	68fa      	ldr	r2, [r7, #12]
 80121b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80121b6:	4b15      	ldr	r3, [pc, #84]	@ (801220c <FATFS_LinkDriverEx+0x94>)
 80121b8:	7a5b      	ldrb	r3, [r3, #9]
 80121ba:	b2db      	uxtb	r3, r3
 80121bc:	461a      	mov	r2, r3
 80121be:	4b13      	ldr	r3, [pc, #76]	@ (801220c <FATFS_LinkDriverEx+0x94>)
 80121c0:	4413      	add	r3, r2
 80121c2:	79fa      	ldrb	r2, [r7, #7]
 80121c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80121c6:	4b11      	ldr	r3, [pc, #68]	@ (801220c <FATFS_LinkDriverEx+0x94>)
 80121c8:	7a5b      	ldrb	r3, [r3, #9]
 80121ca:	b2db      	uxtb	r3, r3
 80121cc:	1c5a      	adds	r2, r3, #1
 80121ce:	b2d1      	uxtb	r1, r2
 80121d0:	4a0e      	ldr	r2, [pc, #56]	@ (801220c <FATFS_LinkDriverEx+0x94>)
 80121d2:	7251      	strb	r1, [r2, #9]
 80121d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80121d6:	7dbb      	ldrb	r3, [r7, #22]
 80121d8:	3330      	adds	r3, #48	@ 0x30
 80121da:	b2da      	uxtb	r2, r3
 80121dc:	68bb      	ldr	r3, [r7, #8]
 80121de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	3301      	adds	r3, #1
 80121e4:	223a      	movs	r2, #58	@ 0x3a
 80121e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	3302      	adds	r3, #2
 80121ec:	222f      	movs	r2, #47	@ 0x2f
 80121ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	3303      	adds	r3, #3
 80121f4:	2200      	movs	r2, #0
 80121f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80121f8:	2300      	movs	r3, #0
 80121fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80121fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80121fe:	4618      	mov	r0, r3
 8012200:	371c      	adds	r7, #28
 8012202:	46bd      	mov	sp, r7
 8012204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012208:	4770      	bx	lr
 801220a:	bf00      	nop
 801220c:	24000a98 	.word	0x24000a98

08012210 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b082      	sub	sp, #8
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
 8012218:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801221a:	2200      	movs	r2, #0
 801221c:	6839      	ldr	r1, [r7, #0]
 801221e:	6878      	ldr	r0, [r7, #4]
 8012220:	f7ff ffaa 	bl	8012178 <FATFS_LinkDriverEx>
 8012224:	4603      	mov	r3, r0
}
 8012226:	4618      	mov	r0, r3
 8012228:	3708      	adds	r7, #8
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}

0801222e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801222e:	b580      	push	{r7, lr}
 8012230:	b084      	sub	sp, #16
 8012232:	af00      	add	r7, sp, #0
 8012234:	4603      	mov	r3, r0
 8012236:	6039      	str	r1, [r7, #0]
 8012238:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801223a:	2200      	movs	r2, #0
 801223c:	2101      	movs	r1, #1
 801223e:	2001      	movs	r0, #1
 8012240:	f000 f9b9 	bl	80125b6 <osSemaphoreNew>
 8012244:	4602      	mov	r2, r0
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	2b00      	cmp	r3, #0
 8012250:	bf14      	ite	ne
 8012252:	2301      	movne	r3, #1
 8012254:	2300      	moveq	r3, #0
 8012256:	b2db      	uxtb	r3, r3
 8012258:	60fb      	str	r3, [r7, #12]

    return ret;
 801225a:	68fb      	ldr	r3, [r7, #12]
}
 801225c:	4618      	mov	r0, r3
 801225e:	3710      	adds	r7, #16
 8012260:	46bd      	mov	sp, r7
 8012262:	bd80      	pop	{r7, pc}

08012264 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b082      	sub	sp, #8
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801226c:	6878      	ldr	r0, [r7, #4]
 801226e:	f000 fac1 	bl	80127f4 <osSemaphoreDelete>
#endif
    return 1;
 8012272:	2301      	movs	r3, #1
}
 8012274:	4618      	mov	r0, r3
 8012276:	3708      	adds	r7, #8
 8012278:	46bd      	mov	sp, r7
 801227a:	bd80      	pop	{r7, pc}

0801227c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b084      	sub	sp, #16
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8012284:	2300      	movs	r3, #0
 8012286:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8012288:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f000 fa1b 	bl	80126c8 <osSemaphoreAcquire>
 8012292:	4603      	mov	r3, r0
 8012294:	2b00      	cmp	r3, #0
 8012296:	d101      	bne.n	801229c <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8012298:	2301      	movs	r3, #1
 801229a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801229c:	68fb      	ldr	r3, [r7, #12]
}
 801229e:	4618      	mov	r0, r3
 80122a0:	3710      	adds	r7, #16
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd80      	pop	{r7, pc}

080122a6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80122a6:	b580      	push	{r7, lr}
 80122a8:	b082      	sub	sp, #8
 80122aa:	af00      	add	r7, sp, #0
 80122ac:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80122ae:	6878      	ldr	r0, [r7, #4]
 80122b0:	f000 fa5c 	bl	801276c <osSemaphoreRelease>
#endif
}
 80122b4:	bf00      	nop
 80122b6:	3708      	adds	r7, #8
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}

080122bc <__NVIC_SetPriority>:
{
 80122bc:	b480      	push	{r7}
 80122be:	b083      	sub	sp, #12
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	4603      	mov	r3, r0
 80122c4:	6039      	str	r1, [r7, #0]
 80122c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80122c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	db0a      	blt.n	80122e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	b2da      	uxtb	r2, r3
 80122d4:	490c      	ldr	r1, [pc, #48]	@ (8012308 <__NVIC_SetPriority+0x4c>)
 80122d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80122da:	0112      	lsls	r2, r2, #4
 80122dc:	b2d2      	uxtb	r2, r2
 80122de:	440b      	add	r3, r1
 80122e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80122e4:	e00a      	b.n	80122fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	b2da      	uxtb	r2, r3
 80122ea:	4908      	ldr	r1, [pc, #32]	@ (801230c <__NVIC_SetPriority+0x50>)
 80122ec:	88fb      	ldrh	r3, [r7, #6]
 80122ee:	f003 030f 	and.w	r3, r3, #15
 80122f2:	3b04      	subs	r3, #4
 80122f4:	0112      	lsls	r2, r2, #4
 80122f6:	b2d2      	uxtb	r2, r2
 80122f8:	440b      	add	r3, r1
 80122fa:	761a      	strb	r2, [r3, #24]
}
 80122fc:	bf00      	nop
 80122fe:	370c      	adds	r7, #12
 8012300:	46bd      	mov	sp, r7
 8012302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012306:	4770      	bx	lr
 8012308:	e000e100 	.word	0xe000e100
 801230c:	e000ed00 	.word	0xe000ed00

08012310 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012310:	b580      	push	{r7, lr}
 8012312:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012314:	4b05      	ldr	r3, [pc, #20]	@ (801232c <SysTick_Handler+0x1c>)
 8012316:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012318:	f002 fdae 	bl	8014e78 <xTaskGetSchedulerState>
 801231c:	4603      	mov	r3, r0
 801231e:	2b01      	cmp	r3, #1
 8012320:	d001      	beq.n	8012326 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012322:	f003 ff31 	bl	8016188 <xPortSysTickHandler>
  }
}
 8012326:	bf00      	nop
 8012328:	bd80      	pop	{r7, pc}
 801232a:	bf00      	nop
 801232c:	e000e010 	.word	0xe000e010

08012330 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012330:	b580      	push	{r7, lr}
 8012332:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012334:	2100      	movs	r1, #0
 8012336:	f06f 0004 	mvn.w	r0, #4
 801233a:	f7ff ffbf 	bl	80122bc <__NVIC_SetPriority>
#endif
}
 801233e:	bf00      	nop
 8012340:	bd80      	pop	{r7, pc}
	...

08012344 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012344:	b480      	push	{r7}
 8012346:	b083      	sub	sp, #12
 8012348:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801234a:	f3ef 8305 	mrs	r3, IPSR
 801234e:	603b      	str	r3, [r7, #0]
  return(result);
 8012350:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012352:	2b00      	cmp	r3, #0
 8012354:	d003      	beq.n	801235e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012356:	f06f 0305 	mvn.w	r3, #5
 801235a:	607b      	str	r3, [r7, #4]
 801235c:	e00c      	b.n	8012378 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801235e:	4b0a      	ldr	r3, [pc, #40]	@ (8012388 <osKernelInitialize+0x44>)
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d105      	bne.n	8012372 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012366:	4b08      	ldr	r3, [pc, #32]	@ (8012388 <osKernelInitialize+0x44>)
 8012368:	2201      	movs	r2, #1
 801236a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801236c:	2300      	movs	r3, #0
 801236e:	607b      	str	r3, [r7, #4]
 8012370:	e002      	b.n	8012378 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012372:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012376:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012378:	687b      	ldr	r3, [r7, #4]
}
 801237a:	4618      	mov	r0, r3
 801237c:	370c      	adds	r7, #12
 801237e:	46bd      	mov	sp, r7
 8012380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012384:	4770      	bx	lr
 8012386:	bf00      	nop
 8012388:	24000aa4 	.word	0x24000aa4

0801238c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 801238c:	b580      	push	{r7, lr}
 801238e:	b082      	sub	sp, #8
 8012390:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8012392:	f002 fd71 	bl	8014e78 <xTaskGetSchedulerState>
 8012396:	4603      	mov	r3, r0
 8012398:	2b00      	cmp	r3, #0
 801239a:	d004      	beq.n	80123a6 <osKernelGetState+0x1a>
 801239c:	2b02      	cmp	r3, #2
 801239e:	d105      	bne.n	80123ac <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80123a0:	2302      	movs	r3, #2
 80123a2:	607b      	str	r3, [r7, #4]
      break;
 80123a4:	e00c      	b.n	80123c0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80123a6:	2303      	movs	r3, #3
 80123a8:	607b      	str	r3, [r7, #4]
      break;
 80123aa:	e009      	b.n	80123c0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80123ac:	4b07      	ldr	r3, [pc, #28]	@ (80123cc <osKernelGetState+0x40>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	2b01      	cmp	r3, #1
 80123b2:	d102      	bne.n	80123ba <osKernelGetState+0x2e>
        state = osKernelReady;
 80123b4:	2301      	movs	r3, #1
 80123b6:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80123b8:	e001      	b.n	80123be <osKernelGetState+0x32>
        state = osKernelInactive;
 80123ba:	2300      	movs	r3, #0
 80123bc:	607b      	str	r3, [r7, #4]
      break;
 80123be:	bf00      	nop
  }

  return (state);
 80123c0:	687b      	ldr	r3, [r7, #4]
}
 80123c2:	4618      	mov	r0, r3
 80123c4:	3708      	adds	r7, #8
 80123c6:	46bd      	mov	sp, r7
 80123c8:	bd80      	pop	{r7, pc}
 80123ca:	bf00      	nop
 80123cc:	24000aa4 	.word	0x24000aa4

080123d0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b082      	sub	sp, #8
 80123d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80123d6:	f3ef 8305 	mrs	r3, IPSR
 80123da:	603b      	str	r3, [r7, #0]
  return(result);
 80123dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d003      	beq.n	80123ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80123e2:	f06f 0305 	mvn.w	r3, #5
 80123e6:	607b      	str	r3, [r7, #4]
 80123e8:	e010      	b.n	801240c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80123ea:	4b0b      	ldr	r3, [pc, #44]	@ (8012418 <osKernelStart+0x48>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	2b01      	cmp	r3, #1
 80123f0:	d109      	bne.n	8012406 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80123f2:	f7ff ff9d 	bl	8012330 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80123f6:	4b08      	ldr	r3, [pc, #32]	@ (8012418 <osKernelStart+0x48>)
 80123f8:	2202      	movs	r2, #2
 80123fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80123fc:	f002 f814 	bl	8014428 <vTaskStartScheduler>
      stat = osOK;
 8012400:	2300      	movs	r3, #0
 8012402:	607b      	str	r3, [r7, #4]
 8012404:	e002      	b.n	801240c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012406:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801240a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801240c:	687b      	ldr	r3, [r7, #4]
}
 801240e:	4618      	mov	r0, r3
 8012410:	3708      	adds	r7, #8
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
 8012416:	bf00      	nop
 8012418:	24000aa4 	.word	0x24000aa4

0801241c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012422:	f3ef 8305 	mrs	r3, IPSR
 8012426:	603b      	str	r3, [r7, #0]
  return(result);
 8012428:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 801242a:	2b00      	cmp	r3, #0
 801242c:	d003      	beq.n	8012436 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 801242e:	f002 f927 	bl	8014680 <xTaskGetTickCountFromISR>
 8012432:	6078      	str	r0, [r7, #4]
 8012434:	e002      	b.n	801243c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8012436:	f002 f913 	bl	8014660 <xTaskGetTickCount>
 801243a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 801243c:	687b      	ldr	r3, [r7, #4]
}
 801243e:	4618      	mov	r0, r3
 8012440:	3708      	adds	r7, #8
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}

08012446 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012446:	b580      	push	{r7, lr}
 8012448:	b08e      	sub	sp, #56	@ 0x38
 801244a:	af04      	add	r7, sp, #16
 801244c:	60f8      	str	r0, [r7, #12]
 801244e:	60b9      	str	r1, [r7, #8]
 8012450:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012452:	2300      	movs	r3, #0
 8012454:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012456:	f3ef 8305 	mrs	r3, IPSR
 801245a:	617b      	str	r3, [r7, #20]
  return(result);
 801245c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801245e:	2b00      	cmp	r3, #0
 8012460:	d17e      	bne.n	8012560 <osThreadNew+0x11a>
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d07b      	beq.n	8012560 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012468:	2380      	movs	r3, #128	@ 0x80
 801246a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801246c:	2318      	movs	r3, #24
 801246e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012470:	2300      	movs	r3, #0
 8012472:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8012474:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012478:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d045      	beq.n	801250c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d002      	beq.n	801248e <osThreadNew+0x48>
        name = attr->name;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	699b      	ldr	r3, [r3, #24]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d002      	beq.n	801249c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	699b      	ldr	r3, [r3, #24]
 801249a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801249c:	69fb      	ldr	r3, [r7, #28]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d008      	beq.n	80124b4 <osThreadNew+0x6e>
 80124a2:	69fb      	ldr	r3, [r7, #28]
 80124a4:	2b38      	cmp	r3, #56	@ 0x38
 80124a6:	d805      	bhi.n	80124b4 <osThreadNew+0x6e>
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	685b      	ldr	r3, [r3, #4]
 80124ac:	f003 0301 	and.w	r3, r3, #1
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d001      	beq.n	80124b8 <osThreadNew+0x72>
        return (NULL);
 80124b4:	2300      	movs	r3, #0
 80124b6:	e054      	b.n	8012562 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	695b      	ldr	r3, [r3, #20]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d003      	beq.n	80124c8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	695b      	ldr	r3, [r3, #20]
 80124c4:	089b      	lsrs	r3, r3, #2
 80124c6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	689b      	ldr	r3, [r3, #8]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d00e      	beq.n	80124ee <osThreadNew+0xa8>
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	68db      	ldr	r3, [r3, #12]
 80124d4:	2ba7      	cmp	r3, #167	@ 0xa7
 80124d6:	d90a      	bls.n	80124ee <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d006      	beq.n	80124ee <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	695b      	ldr	r3, [r3, #20]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d002      	beq.n	80124ee <osThreadNew+0xa8>
        mem = 1;
 80124e8:	2301      	movs	r3, #1
 80124ea:	61bb      	str	r3, [r7, #24]
 80124ec:	e010      	b.n	8012510 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	689b      	ldr	r3, [r3, #8]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d10c      	bne.n	8012510 <osThreadNew+0xca>
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	68db      	ldr	r3, [r3, #12]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d108      	bne.n	8012510 <osThreadNew+0xca>
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	691b      	ldr	r3, [r3, #16]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d104      	bne.n	8012510 <osThreadNew+0xca>
          mem = 0;
 8012506:	2300      	movs	r3, #0
 8012508:	61bb      	str	r3, [r7, #24]
 801250a:	e001      	b.n	8012510 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801250c:	2300      	movs	r3, #0
 801250e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012510:	69bb      	ldr	r3, [r7, #24]
 8012512:	2b01      	cmp	r3, #1
 8012514:	d110      	bne.n	8012538 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801251a:	687a      	ldr	r2, [r7, #4]
 801251c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801251e:	9202      	str	r2, [sp, #8]
 8012520:	9301      	str	r3, [sp, #4]
 8012522:	69fb      	ldr	r3, [r7, #28]
 8012524:	9300      	str	r3, [sp, #0]
 8012526:	68bb      	ldr	r3, [r7, #8]
 8012528:	6a3a      	ldr	r2, [r7, #32]
 801252a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801252c:	68f8      	ldr	r0, [r7, #12]
 801252e:	f001 fd87 	bl	8014040 <xTaskCreateStatic>
 8012532:	4603      	mov	r3, r0
 8012534:	613b      	str	r3, [r7, #16]
 8012536:	e013      	b.n	8012560 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012538:	69bb      	ldr	r3, [r7, #24]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d110      	bne.n	8012560 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801253e:	6a3b      	ldr	r3, [r7, #32]
 8012540:	b29a      	uxth	r2, r3
 8012542:	f107 0310 	add.w	r3, r7, #16
 8012546:	9301      	str	r3, [sp, #4]
 8012548:	69fb      	ldr	r3, [r7, #28]
 801254a:	9300      	str	r3, [sp, #0]
 801254c:	68bb      	ldr	r3, [r7, #8]
 801254e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012550:	68f8      	ldr	r0, [r7, #12]
 8012552:	f001 fdd5 	bl	8014100 <xTaskCreate>
 8012556:	4603      	mov	r3, r0
 8012558:	2b01      	cmp	r3, #1
 801255a:	d001      	beq.n	8012560 <osThreadNew+0x11a>
            hTask = NULL;
 801255c:	2300      	movs	r3, #0
 801255e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012560:	693b      	ldr	r3, [r7, #16]
}
 8012562:	4618      	mov	r0, r3
 8012564:	3728      	adds	r7, #40	@ 0x28
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}

0801256a <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 801256a:	b580      	push	{r7, lr}
 801256c:	b082      	sub	sp, #8
 801256e:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8012570:	f002 fc72 	bl	8014e58 <xTaskGetCurrentTaskHandle>
 8012574:	6078      	str	r0, [r7, #4]

  return (id);
 8012576:	687b      	ldr	r3, [r7, #4]
}
 8012578:	4618      	mov	r0, r3
 801257a:	3708      	adds	r7, #8
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}

08012580 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012580:	b580      	push	{r7, lr}
 8012582:	b084      	sub	sp, #16
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012588:	f3ef 8305 	mrs	r3, IPSR
 801258c:	60bb      	str	r3, [r7, #8]
  return(result);
 801258e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012590:	2b00      	cmp	r3, #0
 8012592:	d003      	beq.n	801259c <osDelay+0x1c>
    stat = osErrorISR;
 8012594:	f06f 0305 	mvn.w	r3, #5
 8012598:	60fb      	str	r3, [r7, #12]
 801259a:	e007      	b.n	80125ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801259c:	2300      	movs	r3, #0
 801259e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d002      	beq.n	80125ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80125a6:	6878      	ldr	r0, [r7, #4]
 80125a8:	f001 ff08 	bl	80143bc <vTaskDelay>
    }
  }

  return (stat);
 80125ac:	68fb      	ldr	r3, [r7, #12]
}
 80125ae:	4618      	mov	r0, r3
 80125b0:	3710      	adds	r7, #16
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bd80      	pop	{r7, pc}

080125b6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80125b6:	b580      	push	{r7, lr}
 80125b8:	b08a      	sub	sp, #40	@ 0x28
 80125ba:	af02      	add	r7, sp, #8
 80125bc:	60f8      	str	r0, [r7, #12]
 80125be:	60b9      	str	r1, [r7, #8]
 80125c0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80125c2:	2300      	movs	r3, #0
 80125c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125c6:	f3ef 8305 	mrs	r3, IPSR
 80125ca:	613b      	str	r3, [r7, #16]
  return(result);
 80125cc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d175      	bne.n	80126be <osSemaphoreNew+0x108>
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d072      	beq.n	80126be <osSemaphoreNew+0x108>
 80125d8:	68ba      	ldr	r2, [r7, #8]
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	429a      	cmp	r2, r3
 80125de:	d86e      	bhi.n	80126be <osSemaphoreNew+0x108>
    mem = -1;
 80125e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80125e4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d015      	beq.n	8012618 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	689b      	ldr	r3, [r3, #8]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d006      	beq.n	8012602 <osSemaphoreNew+0x4c>
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	68db      	ldr	r3, [r3, #12]
 80125f8:	2b4f      	cmp	r3, #79	@ 0x4f
 80125fa:	d902      	bls.n	8012602 <osSemaphoreNew+0x4c>
        mem = 1;
 80125fc:	2301      	movs	r3, #1
 80125fe:	61bb      	str	r3, [r7, #24]
 8012600:	e00c      	b.n	801261c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	689b      	ldr	r3, [r3, #8]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d108      	bne.n	801261c <osSemaphoreNew+0x66>
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	68db      	ldr	r3, [r3, #12]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d104      	bne.n	801261c <osSemaphoreNew+0x66>
          mem = 0;
 8012612:	2300      	movs	r3, #0
 8012614:	61bb      	str	r3, [r7, #24]
 8012616:	e001      	b.n	801261c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8012618:	2300      	movs	r3, #0
 801261a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 801261c:	69bb      	ldr	r3, [r7, #24]
 801261e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012622:	d04c      	beq.n	80126be <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	2b01      	cmp	r3, #1
 8012628:	d128      	bne.n	801267c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801262a:	69bb      	ldr	r3, [r7, #24]
 801262c:	2b01      	cmp	r3, #1
 801262e:	d10a      	bne.n	8012646 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	689b      	ldr	r3, [r3, #8]
 8012634:	2203      	movs	r2, #3
 8012636:	9200      	str	r2, [sp, #0]
 8012638:	2200      	movs	r2, #0
 801263a:	2100      	movs	r1, #0
 801263c:	2001      	movs	r0, #1
 801263e:	f000 fd3d 	bl	80130bc <xQueueGenericCreateStatic>
 8012642:	61f8      	str	r0, [r7, #28]
 8012644:	e005      	b.n	8012652 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8012646:	2203      	movs	r2, #3
 8012648:	2100      	movs	r1, #0
 801264a:	2001      	movs	r0, #1
 801264c:	f000 fdb3 	bl	80131b6 <xQueueGenericCreate>
 8012650:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8012652:	69fb      	ldr	r3, [r7, #28]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d022      	beq.n	801269e <osSemaphoreNew+0xe8>
 8012658:	68bb      	ldr	r3, [r7, #8]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d01f      	beq.n	801269e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801265e:	2300      	movs	r3, #0
 8012660:	2200      	movs	r2, #0
 8012662:	2100      	movs	r1, #0
 8012664:	69f8      	ldr	r0, [r7, #28]
 8012666:	f000 fe73 	bl	8013350 <xQueueGenericSend>
 801266a:	4603      	mov	r3, r0
 801266c:	2b01      	cmp	r3, #1
 801266e:	d016      	beq.n	801269e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8012670:	69f8      	ldr	r0, [r7, #28]
 8012672:	f001 fb11 	bl	8013c98 <vQueueDelete>
            hSemaphore = NULL;
 8012676:	2300      	movs	r3, #0
 8012678:	61fb      	str	r3, [r7, #28]
 801267a:	e010      	b.n	801269e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 801267c:	69bb      	ldr	r3, [r7, #24]
 801267e:	2b01      	cmp	r3, #1
 8012680:	d108      	bne.n	8012694 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	689b      	ldr	r3, [r3, #8]
 8012686:	461a      	mov	r2, r3
 8012688:	68b9      	ldr	r1, [r7, #8]
 801268a:	68f8      	ldr	r0, [r7, #12]
 801268c:	f000 fdf1 	bl	8013272 <xQueueCreateCountingSemaphoreStatic>
 8012690:	61f8      	str	r0, [r7, #28]
 8012692:	e004      	b.n	801269e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8012694:	68b9      	ldr	r1, [r7, #8]
 8012696:	68f8      	ldr	r0, [r7, #12]
 8012698:	f000 fe24 	bl	80132e4 <xQueueCreateCountingSemaphore>
 801269c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801269e:	69fb      	ldr	r3, [r7, #28]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d00c      	beq.n	80126be <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d003      	beq.n	80126b2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	617b      	str	r3, [r7, #20]
 80126b0:	e001      	b.n	80126b6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80126b2:	2300      	movs	r3, #0
 80126b4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80126b6:	6979      	ldr	r1, [r7, #20]
 80126b8:	69f8      	ldr	r0, [r7, #28]
 80126ba:	f001 fc39 	bl	8013f30 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80126be:	69fb      	ldr	r3, [r7, #28]
}
 80126c0:	4618      	mov	r0, r3
 80126c2:	3720      	adds	r7, #32
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bd80      	pop	{r7, pc}

080126c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b086      	sub	sp, #24
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80126d6:	2300      	movs	r3, #0
 80126d8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80126da:	693b      	ldr	r3, [r7, #16]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d103      	bne.n	80126e8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80126e0:	f06f 0303 	mvn.w	r3, #3
 80126e4:	617b      	str	r3, [r7, #20]
 80126e6:	e039      	b.n	801275c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126e8:	f3ef 8305 	mrs	r3, IPSR
 80126ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80126ee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d022      	beq.n	801273a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d003      	beq.n	8012702 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80126fa:	f06f 0303 	mvn.w	r3, #3
 80126fe:	617b      	str	r3, [r7, #20]
 8012700:	e02c      	b.n	801275c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8012702:	2300      	movs	r3, #0
 8012704:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8012706:	f107 0308 	add.w	r3, r7, #8
 801270a:	461a      	mov	r2, r3
 801270c:	2100      	movs	r1, #0
 801270e:	6938      	ldr	r0, [r7, #16]
 8012710:	f001 fa40 	bl	8013b94 <xQueueReceiveFromISR>
 8012714:	4603      	mov	r3, r0
 8012716:	2b01      	cmp	r3, #1
 8012718:	d003      	beq.n	8012722 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801271a:	f06f 0302 	mvn.w	r3, #2
 801271e:	617b      	str	r3, [r7, #20]
 8012720:	e01c      	b.n	801275c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8012722:	68bb      	ldr	r3, [r7, #8]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d019      	beq.n	801275c <osSemaphoreAcquire+0x94>
 8012728:	4b0f      	ldr	r3, [pc, #60]	@ (8012768 <osSemaphoreAcquire+0xa0>)
 801272a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801272e:	601a      	str	r2, [r3, #0]
 8012730:	f3bf 8f4f 	dsb	sy
 8012734:	f3bf 8f6f 	isb	sy
 8012738:	e010      	b.n	801275c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801273a:	6839      	ldr	r1, [r7, #0]
 801273c:	6938      	ldr	r0, [r7, #16]
 801273e:	f001 f919 	bl	8013974 <xQueueSemaphoreTake>
 8012742:	4603      	mov	r3, r0
 8012744:	2b01      	cmp	r3, #1
 8012746:	d009      	beq.n	801275c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d003      	beq.n	8012756 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 801274e:	f06f 0301 	mvn.w	r3, #1
 8012752:	617b      	str	r3, [r7, #20]
 8012754:	e002      	b.n	801275c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8012756:	f06f 0302 	mvn.w	r3, #2
 801275a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 801275c:	697b      	ldr	r3, [r7, #20]
}
 801275e:	4618      	mov	r0, r3
 8012760:	3718      	adds	r7, #24
 8012762:	46bd      	mov	sp, r7
 8012764:	bd80      	pop	{r7, pc}
 8012766:	bf00      	nop
 8012768:	e000ed04 	.word	0xe000ed04

0801276c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801276c:	b580      	push	{r7, lr}
 801276e:	b086      	sub	sp, #24
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8012778:	2300      	movs	r3, #0
 801277a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801277c:	693b      	ldr	r3, [r7, #16]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d103      	bne.n	801278a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8012782:	f06f 0303 	mvn.w	r3, #3
 8012786:	617b      	str	r3, [r7, #20]
 8012788:	e02c      	b.n	80127e4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801278a:	f3ef 8305 	mrs	r3, IPSR
 801278e:	60fb      	str	r3, [r7, #12]
  return(result);
 8012790:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012792:	2b00      	cmp	r3, #0
 8012794:	d01a      	beq.n	80127cc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8012796:	2300      	movs	r3, #0
 8012798:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801279a:	f107 0308 	add.w	r3, r7, #8
 801279e:	4619      	mov	r1, r3
 80127a0:	6938      	ldr	r0, [r7, #16]
 80127a2:	f000 ff75 	bl	8013690 <xQueueGiveFromISR>
 80127a6:	4603      	mov	r3, r0
 80127a8:	2b01      	cmp	r3, #1
 80127aa:	d003      	beq.n	80127b4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80127ac:	f06f 0302 	mvn.w	r3, #2
 80127b0:	617b      	str	r3, [r7, #20]
 80127b2:	e017      	b.n	80127e4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d014      	beq.n	80127e4 <osSemaphoreRelease+0x78>
 80127ba:	4b0d      	ldr	r3, [pc, #52]	@ (80127f0 <osSemaphoreRelease+0x84>)
 80127bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80127c0:	601a      	str	r2, [r3, #0]
 80127c2:	f3bf 8f4f 	dsb	sy
 80127c6:	f3bf 8f6f 	isb	sy
 80127ca:	e00b      	b.n	80127e4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80127cc:	2300      	movs	r3, #0
 80127ce:	2200      	movs	r2, #0
 80127d0:	2100      	movs	r1, #0
 80127d2:	6938      	ldr	r0, [r7, #16]
 80127d4:	f000 fdbc 	bl	8013350 <xQueueGenericSend>
 80127d8:	4603      	mov	r3, r0
 80127da:	2b01      	cmp	r3, #1
 80127dc:	d002      	beq.n	80127e4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80127de:	f06f 0302 	mvn.w	r3, #2
 80127e2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80127e4:	697b      	ldr	r3, [r7, #20]
}
 80127e6:	4618      	mov	r0, r3
 80127e8:	3718      	adds	r7, #24
 80127ea:	46bd      	mov	sp, r7
 80127ec:	bd80      	pop	{r7, pc}
 80127ee:	bf00      	nop
 80127f0:	e000ed04 	.word	0xe000ed04

080127f4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b086      	sub	sp, #24
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012800:	f3ef 8305 	mrs	r3, IPSR
 8012804:	60fb      	str	r3, [r7, #12]
  return(result);
 8012806:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8012808:	2b00      	cmp	r3, #0
 801280a:	d003      	beq.n	8012814 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 801280c:	f06f 0305 	mvn.w	r3, #5
 8012810:	617b      	str	r3, [r7, #20]
 8012812:	e00e      	b.n	8012832 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8012814:	693b      	ldr	r3, [r7, #16]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d103      	bne.n	8012822 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 801281a:	f06f 0303 	mvn.w	r3, #3
 801281e:	617b      	str	r3, [r7, #20]
 8012820:	e007      	b.n	8012832 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8012822:	6938      	ldr	r0, [r7, #16]
 8012824:	f001 fbae 	bl	8013f84 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8012828:	2300      	movs	r3, #0
 801282a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 801282c:	6938      	ldr	r0, [r7, #16]
 801282e:	f001 fa33 	bl	8013c98 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8012832:	697b      	ldr	r3, [r7, #20]
}
 8012834:	4618      	mov	r0, r3
 8012836:	3718      	adds	r7, #24
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}

0801283c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801283c:	b580      	push	{r7, lr}
 801283e:	b08a      	sub	sp, #40	@ 0x28
 8012840:	af02      	add	r7, sp, #8
 8012842:	60f8      	str	r0, [r7, #12]
 8012844:	60b9      	str	r1, [r7, #8]
 8012846:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012848:	2300      	movs	r3, #0
 801284a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801284c:	f3ef 8305 	mrs	r3, IPSR
 8012850:	613b      	str	r3, [r7, #16]
  return(result);
 8012852:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012854:	2b00      	cmp	r3, #0
 8012856:	d15f      	bne.n	8012918 <osMessageQueueNew+0xdc>
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d05c      	beq.n	8012918 <osMessageQueueNew+0xdc>
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d059      	beq.n	8012918 <osMessageQueueNew+0xdc>
    mem = -1;
 8012864:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012868:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d029      	beq.n	80128c4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	689b      	ldr	r3, [r3, #8]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d012      	beq.n	801289e <osMessageQueueNew+0x62>
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	68db      	ldr	r3, [r3, #12]
 801287c:	2b4f      	cmp	r3, #79	@ 0x4f
 801287e:	d90e      	bls.n	801289e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012884:	2b00      	cmp	r3, #0
 8012886:	d00a      	beq.n	801289e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	695a      	ldr	r2, [r3, #20]
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	68b9      	ldr	r1, [r7, #8]
 8012890:	fb01 f303 	mul.w	r3, r1, r3
 8012894:	429a      	cmp	r2, r3
 8012896:	d302      	bcc.n	801289e <osMessageQueueNew+0x62>
        mem = 1;
 8012898:	2301      	movs	r3, #1
 801289a:	61bb      	str	r3, [r7, #24]
 801289c:	e014      	b.n	80128c8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	689b      	ldr	r3, [r3, #8]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d110      	bne.n	80128c8 <osMessageQueueNew+0x8c>
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	68db      	ldr	r3, [r3, #12]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d10c      	bne.n	80128c8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d108      	bne.n	80128c8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	695b      	ldr	r3, [r3, #20]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d104      	bne.n	80128c8 <osMessageQueueNew+0x8c>
          mem = 0;
 80128be:	2300      	movs	r3, #0
 80128c0:	61bb      	str	r3, [r7, #24]
 80128c2:	e001      	b.n	80128c8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80128c4:	2300      	movs	r3, #0
 80128c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80128c8:	69bb      	ldr	r3, [r7, #24]
 80128ca:	2b01      	cmp	r3, #1
 80128cc:	d10b      	bne.n	80128e6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	691a      	ldr	r2, [r3, #16]
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	689b      	ldr	r3, [r3, #8]
 80128d6:	2100      	movs	r1, #0
 80128d8:	9100      	str	r1, [sp, #0]
 80128da:	68b9      	ldr	r1, [r7, #8]
 80128dc:	68f8      	ldr	r0, [r7, #12]
 80128de:	f000 fbed 	bl	80130bc <xQueueGenericCreateStatic>
 80128e2:	61f8      	str	r0, [r7, #28]
 80128e4:	e008      	b.n	80128f8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80128e6:	69bb      	ldr	r3, [r7, #24]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d105      	bne.n	80128f8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80128ec:	2200      	movs	r2, #0
 80128ee:	68b9      	ldr	r1, [r7, #8]
 80128f0:	68f8      	ldr	r0, [r7, #12]
 80128f2:	f000 fc60 	bl	80131b6 <xQueueGenericCreate>
 80128f6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80128f8:	69fb      	ldr	r3, [r7, #28]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d00c      	beq.n	8012918 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d003      	beq.n	801290c <osMessageQueueNew+0xd0>
        name = attr->name;
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	617b      	str	r3, [r7, #20]
 801290a:	e001      	b.n	8012910 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801290c:	2300      	movs	r3, #0
 801290e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012910:	6979      	ldr	r1, [r7, #20]
 8012912:	69f8      	ldr	r0, [r7, #28]
 8012914:	f001 fb0c 	bl	8013f30 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012918:	69fb      	ldr	r3, [r7, #28]
}
 801291a:	4618      	mov	r0, r3
 801291c:	3720      	adds	r7, #32
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}
	...

08012924 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012924:	b580      	push	{r7, lr}
 8012926:	b088      	sub	sp, #32
 8012928:	af00      	add	r7, sp, #0
 801292a:	60f8      	str	r0, [r7, #12]
 801292c:	60b9      	str	r1, [r7, #8]
 801292e:	603b      	str	r3, [r7, #0]
 8012930:	4613      	mov	r3, r2
 8012932:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012938:	2300      	movs	r3, #0
 801293a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801293c:	f3ef 8305 	mrs	r3, IPSR
 8012940:	617b      	str	r3, [r7, #20]
  return(result);
 8012942:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012944:	2b00      	cmp	r3, #0
 8012946:	d028      	beq.n	801299a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012948:	69bb      	ldr	r3, [r7, #24]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d005      	beq.n	801295a <osMessageQueuePut+0x36>
 801294e:	68bb      	ldr	r3, [r7, #8]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d002      	beq.n	801295a <osMessageQueuePut+0x36>
 8012954:	683b      	ldr	r3, [r7, #0]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d003      	beq.n	8012962 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801295a:	f06f 0303 	mvn.w	r3, #3
 801295e:	61fb      	str	r3, [r7, #28]
 8012960:	e038      	b.n	80129d4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012962:	2300      	movs	r3, #0
 8012964:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012966:	f107 0210 	add.w	r2, r7, #16
 801296a:	2300      	movs	r3, #0
 801296c:	68b9      	ldr	r1, [r7, #8]
 801296e:	69b8      	ldr	r0, [r7, #24]
 8012970:	f000 fdf0 	bl	8013554 <xQueueGenericSendFromISR>
 8012974:	4603      	mov	r3, r0
 8012976:	2b01      	cmp	r3, #1
 8012978:	d003      	beq.n	8012982 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801297a:	f06f 0302 	mvn.w	r3, #2
 801297e:	61fb      	str	r3, [r7, #28]
 8012980:	e028      	b.n	80129d4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012982:	693b      	ldr	r3, [r7, #16]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d025      	beq.n	80129d4 <osMessageQueuePut+0xb0>
 8012988:	4b15      	ldr	r3, [pc, #84]	@ (80129e0 <osMessageQueuePut+0xbc>)
 801298a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801298e:	601a      	str	r2, [r3, #0]
 8012990:	f3bf 8f4f 	dsb	sy
 8012994:	f3bf 8f6f 	isb	sy
 8012998:	e01c      	b.n	80129d4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801299a:	69bb      	ldr	r3, [r7, #24]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d002      	beq.n	80129a6 <osMessageQueuePut+0x82>
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d103      	bne.n	80129ae <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80129a6:	f06f 0303 	mvn.w	r3, #3
 80129aa:	61fb      	str	r3, [r7, #28]
 80129ac:	e012      	b.n	80129d4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80129ae:	2300      	movs	r3, #0
 80129b0:	683a      	ldr	r2, [r7, #0]
 80129b2:	68b9      	ldr	r1, [r7, #8]
 80129b4:	69b8      	ldr	r0, [r7, #24]
 80129b6:	f000 fccb 	bl	8013350 <xQueueGenericSend>
 80129ba:	4603      	mov	r3, r0
 80129bc:	2b01      	cmp	r3, #1
 80129be:	d009      	beq.n	80129d4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80129c0:	683b      	ldr	r3, [r7, #0]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d003      	beq.n	80129ce <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80129c6:	f06f 0301 	mvn.w	r3, #1
 80129ca:	61fb      	str	r3, [r7, #28]
 80129cc:	e002      	b.n	80129d4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80129ce:	f06f 0302 	mvn.w	r3, #2
 80129d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80129d4:	69fb      	ldr	r3, [r7, #28]
}
 80129d6:	4618      	mov	r0, r3
 80129d8:	3720      	adds	r7, #32
 80129da:	46bd      	mov	sp, r7
 80129dc:	bd80      	pop	{r7, pc}
 80129de:	bf00      	nop
 80129e0:	e000ed04 	.word	0xe000ed04

080129e4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80129e4:	b580      	push	{r7, lr}
 80129e6:	b088      	sub	sp, #32
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	60f8      	str	r0, [r7, #12]
 80129ec:	60b9      	str	r1, [r7, #8]
 80129ee:	607a      	str	r2, [r7, #4]
 80129f0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80129f6:	2300      	movs	r3, #0
 80129f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129fa:	f3ef 8305 	mrs	r3, IPSR
 80129fe:	617b      	str	r3, [r7, #20]
  return(result);
 8012a00:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d028      	beq.n	8012a58 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012a06:	69bb      	ldr	r3, [r7, #24]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d005      	beq.n	8012a18 <osMessageQueueGet+0x34>
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d002      	beq.n	8012a18 <osMessageQueueGet+0x34>
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d003      	beq.n	8012a20 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8012a18:	f06f 0303 	mvn.w	r3, #3
 8012a1c:	61fb      	str	r3, [r7, #28]
 8012a1e:	e037      	b.n	8012a90 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8012a20:	2300      	movs	r3, #0
 8012a22:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012a24:	f107 0310 	add.w	r3, r7, #16
 8012a28:	461a      	mov	r2, r3
 8012a2a:	68b9      	ldr	r1, [r7, #8]
 8012a2c:	69b8      	ldr	r0, [r7, #24]
 8012a2e:	f001 f8b1 	bl	8013b94 <xQueueReceiveFromISR>
 8012a32:	4603      	mov	r3, r0
 8012a34:	2b01      	cmp	r3, #1
 8012a36:	d003      	beq.n	8012a40 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8012a38:	f06f 0302 	mvn.w	r3, #2
 8012a3c:	61fb      	str	r3, [r7, #28]
 8012a3e:	e027      	b.n	8012a90 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8012a40:	693b      	ldr	r3, [r7, #16]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d024      	beq.n	8012a90 <osMessageQueueGet+0xac>
 8012a46:	4b15      	ldr	r3, [pc, #84]	@ (8012a9c <osMessageQueueGet+0xb8>)
 8012a48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a4c:	601a      	str	r2, [r3, #0]
 8012a4e:	f3bf 8f4f 	dsb	sy
 8012a52:	f3bf 8f6f 	isb	sy
 8012a56:	e01b      	b.n	8012a90 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012a58:	69bb      	ldr	r3, [r7, #24]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d002      	beq.n	8012a64 <osMessageQueueGet+0x80>
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d103      	bne.n	8012a6c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012a64:	f06f 0303 	mvn.w	r3, #3
 8012a68:	61fb      	str	r3, [r7, #28]
 8012a6a:	e011      	b.n	8012a90 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012a6c:	683a      	ldr	r2, [r7, #0]
 8012a6e:	68b9      	ldr	r1, [r7, #8]
 8012a70:	69b8      	ldr	r0, [r7, #24]
 8012a72:	f000 fe9d 	bl	80137b0 <xQueueReceive>
 8012a76:	4603      	mov	r3, r0
 8012a78:	2b01      	cmp	r3, #1
 8012a7a:	d009      	beq.n	8012a90 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8012a7c:	683b      	ldr	r3, [r7, #0]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d003      	beq.n	8012a8a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8012a82:	f06f 0301 	mvn.w	r3, #1
 8012a86:	61fb      	str	r3, [r7, #28]
 8012a88:	e002      	b.n	8012a90 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8012a8a:	f06f 0302 	mvn.w	r3, #2
 8012a8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012a90:	69fb      	ldr	r3, [r7, #28]
}
 8012a92:	4618      	mov	r0, r3
 8012a94:	3720      	adds	r7, #32
 8012a96:	46bd      	mov	sp, r7
 8012a98:	bd80      	pop	{r7, pc}
 8012a9a:	bf00      	nop
 8012a9c:	e000ed04 	.word	0xe000ed04

08012aa0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012aa0:	b480      	push	{r7}
 8012aa2:	b085      	sub	sp, #20
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	60f8      	str	r0, [r7, #12]
 8012aa8:	60b9      	str	r1, [r7, #8]
 8012aaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	4a07      	ldr	r2, [pc, #28]	@ (8012acc <vApplicationGetIdleTaskMemory+0x2c>)
 8012ab0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012ab2:	68bb      	ldr	r3, [r7, #8]
 8012ab4:	4a06      	ldr	r2, [pc, #24]	@ (8012ad0 <vApplicationGetIdleTaskMemory+0x30>)
 8012ab6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	2280      	movs	r2, #128	@ 0x80
 8012abc:	601a      	str	r2, [r3, #0]
}
 8012abe:	bf00      	nop
 8012ac0:	3714      	adds	r7, #20
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac8:	4770      	bx	lr
 8012aca:	bf00      	nop
 8012acc:	24000aa8 	.word	0x24000aa8
 8012ad0:	24000b50 	.word	0x24000b50

08012ad4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012ad4:	b480      	push	{r7}
 8012ad6:	b085      	sub	sp, #20
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	60f8      	str	r0, [r7, #12]
 8012adc:	60b9      	str	r1, [r7, #8]
 8012ade:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	4a07      	ldr	r2, [pc, #28]	@ (8012b00 <vApplicationGetTimerTaskMemory+0x2c>)
 8012ae4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	4a06      	ldr	r2, [pc, #24]	@ (8012b04 <vApplicationGetTimerTaskMemory+0x30>)
 8012aea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012af2:	601a      	str	r2, [r3, #0]
}
 8012af4:	bf00      	nop
 8012af6:	3714      	adds	r7, #20
 8012af8:	46bd      	mov	sp, r7
 8012afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afe:	4770      	bx	lr
 8012b00:	24000d50 	.word	0x24000d50
 8012b04:	24000df8 	.word	0x24000df8

08012b08 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b082      	sub	sp, #8
 8012b0c:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8012b0e:	2020      	movs	r0, #32
 8012b10:	f003 fbcc 	bl	80162ac <pvPortMalloc>
 8012b14:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d00a      	beq.n	8012b32 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2200      	movs	r2, #0
 8012b20:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	3304      	adds	r3, #4
 8012b26:	4618      	mov	r0, r3
 8012b28:	f000 f9aa 	bl	8012e80 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	2200      	movs	r2, #0
 8012b30:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8012b32:	687b      	ldr	r3, [r7, #4]
	}
 8012b34:	4618      	mov	r0, r3
 8012b36:	3708      	adds	r7, #8
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}

08012b3c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b090      	sub	sp, #64	@ 0x40
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	60f8      	str	r0, [r7, #12]
 8012b44:	60b9      	str	r1, [r7, #8]
 8012b46:	607a      	str	r2, [r7, #4]
 8012b48:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8012b4e:	2300      	movs	r3, #0
 8012b50:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8012b52:	2300      	movs	r3, #0
 8012b54:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d10b      	bne.n	8012b74 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b60:	f383 8811 	msr	BASEPRI, r3
 8012b64:	f3bf 8f6f 	isb	sy
 8012b68:	f3bf 8f4f 	dsb	sy
 8012b6c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012b6e:	bf00      	nop
 8012b70:	bf00      	nop
 8012b72:	e7fd      	b.n	8012b70 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012b7a:	d30b      	bcc.n	8012b94 <xEventGroupWaitBits+0x58>
	__asm volatile
 8012b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b80:	f383 8811 	msr	BASEPRI, r3
 8012b84:	f3bf 8f6f 	isb	sy
 8012b88:	f3bf 8f4f 	dsb	sy
 8012b8c:	61fb      	str	r3, [r7, #28]
}
 8012b8e:	bf00      	nop
 8012b90:	bf00      	nop
 8012b92:	e7fd      	b.n	8012b90 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8012b94:	68bb      	ldr	r3, [r7, #8]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d10b      	bne.n	8012bb2 <xEventGroupWaitBits+0x76>
	__asm volatile
 8012b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b9e:	f383 8811 	msr	BASEPRI, r3
 8012ba2:	f3bf 8f6f 	isb	sy
 8012ba6:	f3bf 8f4f 	dsb	sy
 8012baa:	61bb      	str	r3, [r7, #24]
}
 8012bac:	bf00      	nop
 8012bae:	bf00      	nop
 8012bb0:	e7fd      	b.n	8012bae <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012bb2:	f002 f961 	bl	8014e78 <xTaskGetSchedulerState>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d102      	bne.n	8012bc2 <xEventGroupWaitBits+0x86>
 8012bbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d101      	bne.n	8012bc6 <xEventGroupWaitBits+0x8a>
 8012bc2:	2301      	movs	r3, #1
 8012bc4:	e000      	b.n	8012bc8 <xEventGroupWaitBits+0x8c>
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d10b      	bne.n	8012be4 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8012bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bd0:	f383 8811 	msr	BASEPRI, r3
 8012bd4:	f3bf 8f6f 	isb	sy
 8012bd8:	f3bf 8f4f 	dsb	sy
 8012bdc:	617b      	str	r3, [r7, #20]
}
 8012bde:	bf00      	nop
 8012be0:	bf00      	nop
 8012be2:	e7fd      	b.n	8012be0 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8012be4:	f001 fc90 	bl	8014508 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8012be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8012bee:	683a      	ldr	r2, [r7, #0]
 8012bf0:	68b9      	ldr	r1, [r7, #8]
 8012bf2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012bf4:	f000 f90d 	bl	8012e12 <prvTestWaitCondition>
 8012bf8:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8012bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d00e      	beq.n	8012c1e <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8012c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8012c04:	2300      	movs	r3, #0
 8012c06:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d028      	beq.n	8012c60 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c10:	681a      	ldr	r2, [r3, #0]
 8012c12:	68bb      	ldr	r3, [r7, #8]
 8012c14:	43db      	mvns	r3, r3
 8012c16:	401a      	ands	r2, r3
 8012c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c1a:	601a      	str	r2, [r3, #0]
 8012c1c:	e020      	b.n	8012c60 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8012c1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d104      	bne.n	8012c2e <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8012c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8012c28:	2301      	movs	r3, #1
 8012c2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8012c2c:	e018      	b.n	8012c60 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d003      	beq.n	8012c3c <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8012c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8012c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d003      	beq.n	8012c4a <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8012c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8012c48:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8012c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c4c:	1d18      	adds	r0, r3, #4
 8012c4e:	68ba      	ldr	r2, [r7, #8]
 8012c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c52:	4313      	orrs	r3, r2
 8012c54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012c56:	4619      	mov	r1, r3
 8012c58:	f001 fe6a 	bl	8014930 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8012c60:	f001 fc60 	bl	8014524 <xTaskResumeAll>
 8012c64:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8012c66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d031      	beq.n	8012cd0 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8012c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d107      	bne.n	8012c82 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8012c72:	4b1a      	ldr	r3, [pc, #104]	@ (8012cdc <xEventGroupWaitBits+0x1a0>)
 8012c74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c78:	601a      	str	r2, [r3, #0]
 8012c7a:	f3bf 8f4f 	dsb	sy
 8012c7e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8012c82:	f002 fa73 	bl	801516c <uxTaskResetEventItemValue>
 8012c86:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8012c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d11a      	bne.n	8012cc8 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8012c92:	f003 f9e9 	bl	8016068 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8012c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8012c9c:	683a      	ldr	r2, [r7, #0]
 8012c9e:	68b9      	ldr	r1, [r7, #8]
 8012ca0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012ca2:	f000 f8b6 	bl	8012e12 <prvTestWaitCondition>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d009      	beq.n	8012cc0 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d006      	beq.n	8012cc0 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012cb4:	681a      	ldr	r2, [r3, #0]
 8012cb6:	68bb      	ldr	r3, [r7, #8]
 8012cb8:	43db      	mvns	r3, r3
 8012cba:	401a      	ands	r2, r3
 8012cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012cbe:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8012cc0:	2301      	movs	r3, #1
 8012cc2:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8012cc4:	f003 fa02 	bl	80160cc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012cca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8012cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3740      	adds	r7, #64	@ 0x40
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd80      	pop	{r7, pc}
 8012cda:	bf00      	nop
 8012cdc:	e000ed04 	.word	0xe000ed04

08012ce0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b08e      	sub	sp, #56	@ 0x38
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
 8012ce8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8012cea:	2300      	movs	r3, #0
 8012cec:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d10b      	bne.n	8012d14 <xEventGroupSetBits+0x34>
	__asm volatile
 8012cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d00:	f383 8811 	msr	BASEPRI, r3
 8012d04:	f3bf 8f6f 	isb	sy
 8012d08:	f3bf 8f4f 	dsb	sy
 8012d0c:	613b      	str	r3, [r7, #16]
}
 8012d0e:	bf00      	nop
 8012d10:	bf00      	nop
 8012d12:	e7fd      	b.n	8012d10 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012d14:	683b      	ldr	r3, [r7, #0]
 8012d16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012d1a:	d30b      	bcc.n	8012d34 <xEventGroupSetBits+0x54>
	__asm volatile
 8012d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d20:	f383 8811 	msr	BASEPRI, r3
 8012d24:	f3bf 8f6f 	isb	sy
 8012d28:	f3bf 8f4f 	dsb	sy
 8012d2c:	60fb      	str	r3, [r7, #12]
}
 8012d2e:	bf00      	nop
 8012d30:	bf00      	nop
 8012d32:	e7fd      	b.n	8012d30 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8012d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d36:	3304      	adds	r3, #4
 8012d38:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d3c:	3308      	adds	r3, #8
 8012d3e:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8012d40:	f001 fbe2 	bl	8014508 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8012d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d46:	68db      	ldr	r3, [r3, #12]
 8012d48:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8012d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d4c:	681a      	ldr	r2, [r3, #0]
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	431a      	orrs	r2, r3
 8012d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d54:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8012d56:	e03c      	b.n	8012dd2 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8012d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d5a:	685b      	ldr	r3, [r3, #4]
 8012d5c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8012d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8012d64:	2300      	movs	r3, #0
 8012d66:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8012d68:	69bb      	ldr	r3, [r7, #24]
 8012d6a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8012d6e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012d70:	69bb      	ldr	r3, [r7, #24]
 8012d72:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012d76:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8012d78:	697b      	ldr	r3, [r7, #20]
 8012d7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d108      	bne.n	8012d94 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8012d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d84:	681a      	ldr	r2, [r3, #0]
 8012d86:	69bb      	ldr	r3, [r7, #24]
 8012d88:	4013      	ands	r3, r2
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d00b      	beq.n	8012da6 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8012d8e:	2301      	movs	r3, #1
 8012d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012d92:	e008      	b.n	8012da6 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8012d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d96:	681a      	ldr	r2, [r3, #0]
 8012d98:	69bb      	ldr	r3, [r7, #24]
 8012d9a:	4013      	ands	r3, r2
 8012d9c:	69ba      	ldr	r2, [r7, #24]
 8012d9e:	429a      	cmp	r2, r3
 8012da0:	d101      	bne.n	8012da6 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8012da2:	2301      	movs	r3, #1
 8012da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8012da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d010      	beq.n	8012dce <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8012dac:	697b      	ldr	r3, [r7, #20]
 8012dae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d003      	beq.n	8012dbe <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8012db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012db8:	69bb      	ldr	r3, [r7, #24]
 8012dba:	4313      	orrs	r3, r2
 8012dbc:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8012dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8012dc6:	4619      	mov	r1, r3
 8012dc8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8012dca:	f001 fe7f 	bl	8014acc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8012dce:	69fb      	ldr	r3, [r7, #28]
 8012dd0:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8012dd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012dd4:	6a3b      	ldr	r3, [r7, #32]
 8012dd6:	429a      	cmp	r2, r3
 8012dd8:	d1be      	bne.n	8012d58 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8012dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ddc:	681a      	ldr	r2, [r3, #0]
 8012dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012de0:	43db      	mvns	r3, r3
 8012de2:	401a      	ands	r2, r3
 8012de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012de6:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8012de8:	f001 fb9c 	bl	8014524 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8012dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dee:	681b      	ldr	r3, [r3, #0]
}
 8012df0:	4618      	mov	r0, r3
 8012df2:	3738      	adds	r7, #56	@ 0x38
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}

08012df8 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	b082      	sub	sp, #8
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
 8012e00:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8012e02:	6839      	ldr	r1, [r7, #0]
 8012e04:	6878      	ldr	r0, [r7, #4]
 8012e06:	f7ff ff6b 	bl	8012ce0 <xEventGroupSetBits>
}
 8012e0a:	bf00      	nop
 8012e0c:	3708      	adds	r7, #8
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	bd80      	pop	{r7, pc}

08012e12 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8012e12:	b480      	push	{r7}
 8012e14:	b087      	sub	sp, #28
 8012e16:	af00      	add	r7, sp, #0
 8012e18:	60f8      	str	r0, [r7, #12]
 8012e1a:	60b9      	str	r1, [r7, #8]
 8012e1c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8012e1e:	2300      	movs	r3, #0
 8012e20:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d107      	bne.n	8012e38 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8012e28:	68fa      	ldr	r2, [r7, #12]
 8012e2a:	68bb      	ldr	r3, [r7, #8]
 8012e2c:	4013      	ands	r3, r2
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d00a      	beq.n	8012e48 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012e32:	2301      	movs	r3, #1
 8012e34:	617b      	str	r3, [r7, #20]
 8012e36:	e007      	b.n	8012e48 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8012e38:	68fa      	ldr	r2, [r7, #12]
 8012e3a:	68bb      	ldr	r3, [r7, #8]
 8012e3c:	4013      	ands	r3, r2
 8012e3e:	68ba      	ldr	r2, [r7, #8]
 8012e40:	429a      	cmp	r2, r3
 8012e42:	d101      	bne.n	8012e48 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012e44:	2301      	movs	r3, #1
 8012e46:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8012e48:	697b      	ldr	r3, [r7, #20]
}
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	371c      	adds	r7, #28
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e54:	4770      	bx	lr
	...

08012e58 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b086      	sub	sp, #24
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	60f8      	str	r0, [r7, #12]
 8012e60:	60b9      	str	r1, [r7, #8]
 8012e62:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	68ba      	ldr	r2, [r7, #8]
 8012e68:	68f9      	ldr	r1, [r7, #12]
 8012e6a:	4804      	ldr	r0, [pc, #16]	@ (8012e7c <xEventGroupSetBitsFromISR+0x24>)
 8012e6c:	f002 ffaa 	bl	8015dc4 <xTimerPendFunctionCallFromISR>
 8012e70:	6178      	str	r0, [r7, #20]

		return xReturn;
 8012e72:	697b      	ldr	r3, [r7, #20]
	}
 8012e74:	4618      	mov	r0, r3
 8012e76:	3718      	adds	r7, #24
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}
 8012e7c:	08012df9 	.word	0x08012df9

08012e80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012e80:	b480      	push	{r7}
 8012e82:	b083      	sub	sp, #12
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f103 0208 	add.w	r2, r3, #8
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012e98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	f103 0208 	add.w	r2, r3, #8
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	f103 0208 	add.w	r2, r3, #8
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012eb4:	bf00      	nop
 8012eb6:	370c      	adds	r7, #12
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ebe:	4770      	bx	lr

08012ec0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012ec0:	b480      	push	{r7}
 8012ec2:	b083      	sub	sp, #12
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2200      	movs	r2, #0
 8012ecc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012ece:	bf00      	nop
 8012ed0:	370c      	adds	r7, #12
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed8:	4770      	bx	lr

08012eda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012eda:	b480      	push	{r7}
 8012edc:	b085      	sub	sp, #20
 8012ede:	af00      	add	r7, sp, #0
 8012ee0:	6078      	str	r0, [r7, #4]
 8012ee2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	685b      	ldr	r3, [r3, #4]
 8012ee8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	68fa      	ldr	r2, [r7, #12]
 8012eee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	689a      	ldr	r2, [r3, #8]
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	689b      	ldr	r3, [r3, #8]
 8012efc:	683a      	ldr	r2, [r7, #0]
 8012efe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	683a      	ldr	r2, [r7, #0]
 8012f04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	687a      	ldr	r2, [r7, #4]
 8012f0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	1c5a      	adds	r2, r3, #1
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	601a      	str	r2, [r3, #0]
}
 8012f16:	bf00      	nop
 8012f18:	3714      	adds	r7, #20
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f20:	4770      	bx	lr

08012f22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012f22:	b480      	push	{r7}
 8012f24:	b085      	sub	sp, #20
 8012f26:	af00      	add	r7, sp, #0
 8012f28:	6078      	str	r0, [r7, #4]
 8012f2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012f32:	68bb      	ldr	r3, [r7, #8]
 8012f34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012f38:	d103      	bne.n	8012f42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	691b      	ldr	r3, [r3, #16]
 8012f3e:	60fb      	str	r3, [r7, #12]
 8012f40:	e00c      	b.n	8012f5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	3308      	adds	r3, #8
 8012f46:	60fb      	str	r3, [r7, #12]
 8012f48:	e002      	b.n	8012f50 <vListInsert+0x2e>
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	685b      	ldr	r3, [r3, #4]
 8012f4e:	60fb      	str	r3, [r7, #12]
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	685b      	ldr	r3, [r3, #4]
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	68ba      	ldr	r2, [r7, #8]
 8012f58:	429a      	cmp	r2, r3
 8012f5a:	d2f6      	bcs.n	8012f4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	685a      	ldr	r2, [r3, #4]
 8012f60:	683b      	ldr	r3, [r7, #0]
 8012f62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012f64:	683b      	ldr	r3, [r7, #0]
 8012f66:	685b      	ldr	r3, [r3, #4]
 8012f68:	683a      	ldr	r2, [r7, #0]
 8012f6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	68fa      	ldr	r2, [r7, #12]
 8012f70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	683a      	ldr	r2, [r7, #0]
 8012f76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012f78:	683b      	ldr	r3, [r7, #0]
 8012f7a:	687a      	ldr	r2, [r7, #4]
 8012f7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	1c5a      	adds	r2, r3, #1
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	601a      	str	r2, [r3, #0]
}
 8012f88:	bf00      	nop
 8012f8a:	3714      	adds	r7, #20
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f92:	4770      	bx	lr

08012f94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012f94:	b480      	push	{r7}
 8012f96:	b085      	sub	sp, #20
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	691b      	ldr	r3, [r3, #16]
 8012fa0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	685b      	ldr	r3, [r3, #4]
 8012fa6:	687a      	ldr	r2, [r7, #4]
 8012fa8:	6892      	ldr	r2, [r2, #8]
 8012faa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	689b      	ldr	r3, [r3, #8]
 8012fb0:	687a      	ldr	r2, [r7, #4]
 8012fb2:	6852      	ldr	r2, [r2, #4]
 8012fb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	685b      	ldr	r3, [r3, #4]
 8012fba:	687a      	ldr	r2, [r7, #4]
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d103      	bne.n	8012fc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	689a      	ldr	r2, [r3, #8]
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2200      	movs	r2, #0
 8012fcc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	1e5a      	subs	r2, r3, #1
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	681b      	ldr	r3, [r3, #0]
}
 8012fdc:	4618      	mov	r0, r3
 8012fde:	3714      	adds	r7, #20
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe6:	4770      	bx	lr

08012fe8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b084      	sub	sp, #16
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
 8012ff0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d10b      	bne.n	8013014 <xQueueGenericReset+0x2c>
	__asm volatile
 8012ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013000:	f383 8811 	msr	BASEPRI, r3
 8013004:	f3bf 8f6f 	isb	sy
 8013008:	f3bf 8f4f 	dsb	sy
 801300c:	60bb      	str	r3, [r7, #8]
}
 801300e:	bf00      	nop
 8013010:	bf00      	nop
 8013012:	e7fd      	b.n	8013010 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013014:	f003 f828 	bl	8016068 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	681a      	ldr	r2, [r3, #0]
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013020:	68f9      	ldr	r1, [r7, #12]
 8013022:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013024:	fb01 f303 	mul.w	r3, r1, r3
 8013028:	441a      	add	r2, r3
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	2200      	movs	r2, #0
 8013032:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	681a      	ldr	r2, [r3, #0]
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	681a      	ldr	r2, [r3, #0]
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013044:	3b01      	subs	r3, #1
 8013046:	68f9      	ldr	r1, [r7, #12]
 8013048:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801304a:	fb01 f303 	mul.w	r3, r1, r3
 801304e:	441a      	add	r2, r3
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	22ff      	movs	r2, #255	@ 0xff
 8013058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	22ff      	movs	r2, #255	@ 0xff
 8013060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d114      	bne.n	8013094 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	691b      	ldr	r3, [r3, #16]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d01a      	beq.n	80130a8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	3310      	adds	r3, #16
 8013076:	4618      	mov	r0, r3
 8013078:	f001 fcc4 	bl	8014a04 <xTaskRemoveFromEventList>
 801307c:	4603      	mov	r3, r0
 801307e:	2b00      	cmp	r3, #0
 8013080:	d012      	beq.n	80130a8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013082:	4b0d      	ldr	r3, [pc, #52]	@ (80130b8 <xQueueGenericReset+0xd0>)
 8013084:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013088:	601a      	str	r2, [r3, #0]
 801308a:	f3bf 8f4f 	dsb	sy
 801308e:	f3bf 8f6f 	isb	sy
 8013092:	e009      	b.n	80130a8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	3310      	adds	r3, #16
 8013098:	4618      	mov	r0, r3
 801309a:	f7ff fef1 	bl	8012e80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	3324      	adds	r3, #36	@ 0x24
 80130a2:	4618      	mov	r0, r3
 80130a4:	f7ff feec 	bl	8012e80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80130a8:	f003 f810 	bl	80160cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80130ac:	2301      	movs	r3, #1
}
 80130ae:	4618      	mov	r0, r3
 80130b0:	3710      	adds	r7, #16
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}
 80130b6:	bf00      	nop
 80130b8:	e000ed04 	.word	0xe000ed04

080130bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b08e      	sub	sp, #56	@ 0x38
 80130c0:	af02      	add	r7, sp, #8
 80130c2:	60f8      	str	r0, [r7, #12]
 80130c4:	60b9      	str	r1, [r7, #8]
 80130c6:	607a      	str	r2, [r7, #4]
 80130c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d10b      	bne.n	80130e8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80130d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130d4:	f383 8811 	msr	BASEPRI, r3
 80130d8:	f3bf 8f6f 	isb	sy
 80130dc:	f3bf 8f4f 	dsb	sy
 80130e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80130e2:	bf00      	nop
 80130e4:	bf00      	nop
 80130e6:	e7fd      	b.n	80130e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80130e8:	683b      	ldr	r3, [r7, #0]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d10b      	bne.n	8013106 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80130ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130f2:	f383 8811 	msr	BASEPRI, r3
 80130f6:	f3bf 8f6f 	isb	sy
 80130fa:	f3bf 8f4f 	dsb	sy
 80130fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013100:	bf00      	nop
 8013102:	bf00      	nop
 8013104:	e7fd      	b.n	8013102 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d002      	beq.n	8013112 <xQueueGenericCreateStatic+0x56>
 801310c:	68bb      	ldr	r3, [r7, #8]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d001      	beq.n	8013116 <xQueueGenericCreateStatic+0x5a>
 8013112:	2301      	movs	r3, #1
 8013114:	e000      	b.n	8013118 <xQueueGenericCreateStatic+0x5c>
 8013116:	2300      	movs	r3, #0
 8013118:	2b00      	cmp	r3, #0
 801311a:	d10b      	bne.n	8013134 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 801311c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013120:	f383 8811 	msr	BASEPRI, r3
 8013124:	f3bf 8f6f 	isb	sy
 8013128:	f3bf 8f4f 	dsb	sy
 801312c:	623b      	str	r3, [r7, #32]
}
 801312e:	bf00      	nop
 8013130:	bf00      	nop
 8013132:	e7fd      	b.n	8013130 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d102      	bne.n	8013140 <xQueueGenericCreateStatic+0x84>
 801313a:	68bb      	ldr	r3, [r7, #8]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d101      	bne.n	8013144 <xQueueGenericCreateStatic+0x88>
 8013140:	2301      	movs	r3, #1
 8013142:	e000      	b.n	8013146 <xQueueGenericCreateStatic+0x8a>
 8013144:	2300      	movs	r3, #0
 8013146:	2b00      	cmp	r3, #0
 8013148:	d10b      	bne.n	8013162 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801314a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801314e:	f383 8811 	msr	BASEPRI, r3
 8013152:	f3bf 8f6f 	isb	sy
 8013156:	f3bf 8f4f 	dsb	sy
 801315a:	61fb      	str	r3, [r7, #28]
}
 801315c:	bf00      	nop
 801315e:	bf00      	nop
 8013160:	e7fd      	b.n	801315e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013162:	2350      	movs	r3, #80	@ 0x50
 8013164:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013166:	697b      	ldr	r3, [r7, #20]
 8013168:	2b50      	cmp	r3, #80	@ 0x50
 801316a:	d00b      	beq.n	8013184 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 801316c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013170:	f383 8811 	msr	BASEPRI, r3
 8013174:	f3bf 8f6f 	isb	sy
 8013178:	f3bf 8f4f 	dsb	sy
 801317c:	61bb      	str	r3, [r7, #24]
}
 801317e:	bf00      	nop
 8013180:	bf00      	nop
 8013182:	e7fd      	b.n	8013180 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013184:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801318a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801318c:	2b00      	cmp	r3, #0
 801318e:	d00d      	beq.n	80131ac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013192:	2201      	movs	r2, #1
 8013194:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013198:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801319c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801319e:	9300      	str	r3, [sp, #0]
 80131a0:	4613      	mov	r3, r2
 80131a2:	687a      	ldr	r2, [r7, #4]
 80131a4:	68b9      	ldr	r1, [r7, #8]
 80131a6:	68f8      	ldr	r0, [r7, #12]
 80131a8:	f000 f840 	bl	801322c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80131ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80131ae:	4618      	mov	r0, r3
 80131b0:	3730      	adds	r7, #48	@ 0x30
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}

080131b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80131b6:	b580      	push	{r7, lr}
 80131b8:	b08a      	sub	sp, #40	@ 0x28
 80131ba:	af02      	add	r7, sp, #8
 80131bc:	60f8      	str	r0, [r7, #12]
 80131be:	60b9      	str	r1, [r7, #8]
 80131c0:	4613      	mov	r3, r2
 80131c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d10b      	bne.n	80131e2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80131ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131ce:	f383 8811 	msr	BASEPRI, r3
 80131d2:	f3bf 8f6f 	isb	sy
 80131d6:	f3bf 8f4f 	dsb	sy
 80131da:	613b      	str	r3, [r7, #16]
}
 80131dc:	bf00      	nop
 80131de:	bf00      	nop
 80131e0:	e7fd      	b.n	80131de <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	68ba      	ldr	r2, [r7, #8]
 80131e6:	fb02 f303 	mul.w	r3, r2, r3
 80131ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80131ec:	69fb      	ldr	r3, [r7, #28]
 80131ee:	3350      	adds	r3, #80	@ 0x50
 80131f0:	4618      	mov	r0, r3
 80131f2:	f003 f85b 	bl	80162ac <pvPortMalloc>
 80131f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80131f8:	69bb      	ldr	r3, [r7, #24]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d011      	beq.n	8013222 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80131fe:	69bb      	ldr	r3, [r7, #24]
 8013200:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013202:	697b      	ldr	r3, [r7, #20]
 8013204:	3350      	adds	r3, #80	@ 0x50
 8013206:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013208:	69bb      	ldr	r3, [r7, #24]
 801320a:	2200      	movs	r2, #0
 801320c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013210:	79fa      	ldrb	r2, [r7, #7]
 8013212:	69bb      	ldr	r3, [r7, #24]
 8013214:	9300      	str	r3, [sp, #0]
 8013216:	4613      	mov	r3, r2
 8013218:	697a      	ldr	r2, [r7, #20]
 801321a:	68b9      	ldr	r1, [r7, #8]
 801321c:	68f8      	ldr	r0, [r7, #12]
 801321e:	f000 f805 	bl	801322c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013222:	69bb      	ldr	r3, [r7, #24]
	}
 8013224:	4618      	mov	r0, r3
 8013226:	3720      	adds	r7, #32
 8013228:	46bd      	mov	sp, r7
 801322a:	bd80      	pop	{r7, pc}

0801322c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b084      	sub	sp, #16
 8013230:	af00      	add	r7, sp, #0
 8013232:	60f8      	str	r0, [r7, #12]
 8013234:	60b9      	str	r1, [r7, #8]
 8013236:	607a      	str	r2, [r7, #4]
 8013238:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d103      	bne.n	8013248 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013240:	69bb      	ldr	r3, [r7, #24]
 8013242:	69ba      	ldr	r2, [r7, #24]
 8013244:	601a      	str	r2, [r3, #0]
 8013246:	e002      	b.n	801324e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013248:	69bb      	ldr	r3, [r7, #24]
 801324a:	687a      	ldr	r2, [r7, #4]
 801324c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801324e:	69bb      	ldr	r3, [r7, #24]
 8013250:	68fa      	ldr	r2, [r7, #12]
 8013252:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013254:	69bb      	ldr	r3, [r7, #24]
 8013256:	68ba      	ldr	r2, [r7, #8]
 8013258:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801325a:	2101      	movs	r1, #1
 801325c:	69b8      	ldr	r0, [r7, #24]
 801325e:	f7ff fec3 	bl	8012fe8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013262:	69bb      	ldr	r3, [r7, #24]
 8013264:	78fa      	ldrb	r2, [r7, #3]
 8013266:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801326a:	bf00      	nop
 801326c:	3710      	adds	r7, #16
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}

08013272 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8013272:	b580      	push	{r7, lr}
 8013274:	b08a      	sub	sp, #40	@ 0x28
 8013276:	af02      	add	r7, sp, #8
 8013278:	60f8      	str	r0, [r7, #12]
 801327a:	60b9      	str	r1, [r7, #8]
 801327c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d10b      	bne.n	801329c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8013284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013288:	f383 8811 	msr	BASEPRI, r3
 801328c:	f3bf 8f6f 	isb	sy
 8013290:	f3bf 8f4f 	dsb	sy
 8013294:	61bb      	str	r3, [r7, #24]
}
 8013296:	bf00      	nop
 8013298:	bf00      	nop
 801329a:	e7fd      	b.n	8013298 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801329c:	68ba      	ldr	r2, [r7, #8]
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	429a      	cmp	r2, r3
 80132a2:	d90b      	bls.n	80132bc <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80132a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132a8:	f383 8811 	msr	BASEPRI, r3
 80132ac:	f3bf 8f6f 	isb	sy
 80132b0:	f3bf 8f4f 	dsb	sy
 80132b4:	617b      	str	r3, [r7, #20]
}
 80132b6:	bf00      	nop
 80132b8:	bf00      	nop
 80132ba:	e7fd      	b.n	80132b8 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80132bc:	2302      	movs	r3, #2
 80132be:	9300      	str	r3, [sp, #0]
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	2200      	movs	r2, #0
 80132c4:	2100      	movs	r1, #0
 80132c6:	68f8      	ldr	r0, [r7, #12]
 80132c8:	f7ff fef8 	bl	80130bc <xQueueGenericCreateStatic>
 80132cc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80132ce:	69fb      	ldr	r3, [r7, #28]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d002      	beq.n	80132da <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80132d4:	69fb      	ldr	r3, [r7, #28]
 80132d6:	68ba      	ldr	r2, [r7, #8]
 80132d8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80132da:	69fb      	ldr	r3, [r7, #28]
	}
 80132dc:	4618      	mov	r0, r3
 80132de:	3720      	adds	r7, #32
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}

080132e4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b086      	sub	sp, #24
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
 80132ec:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d10b      	bne.n	801330c <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80132f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132f8:	f383 8811 	msr	BASEPRI, r3
 80132fc:	f3bf 8f6f 	isb	sy
 8013300:	f3bf 8f4f 	dsb	sy
 8013304:	613b      	str	r3, [r7, #16]
}
 8013306:	bf00      	nop
 8013308:	bf00      	nop
 801330a:	e7fd      	b.n	8013308 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801330c:	683a      	ldr	r2, [r7, #0]
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	429a      	cmp	r2, r3
 8013312:	d90b      	bls.n	801332c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8013314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013318:	f383 8811 	msr	BASEPRI, r3
 801331c:	f3bf 8f6f 	isb	sy
 8013320:	f3bf 8f4f 	dsb	sy
 8013324:	60fb      	str	r3, [r7, #12]
}
 8013326:	bf00      	nop
 8013328:	bf00      	nop
 801332a:	e7fd      	b.n	8013328 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801332c:	2202      	movs	r2, #2
 801332e:	2100      	movs	r1, #0
 8013330:	6878      	ldr	r0, [r7, #4]
 8013332:	f7ff ff40 	bl	80131b6 <xQueueGenericCreate>
 8013336:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d002      	beq.n	8013344 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	683a      	ldr	r2, [r7, #0]
 8013342:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013344:	697b      	ldr	r3, [r7, #20]
	}
 8013346:	4618      	mov	r0, r3
 8013348:	3718      	adds	r7, #24
 801334a:	46bd      	mov	sp, r7
 801334c:	bd80      	pop	{r7, pc}
	...

08013350 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b08e      	sub	sp, #56	@ 0x38
 8013354:	af00      	add	r7, sp, #0
 8013356:	60f8      	str	r0, [r7, #12]
 8013358:	60b9      	str	r1, [r7, #8]
 801335a:	607a      	str	r2, [r7, #4]
 801335c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801335e:	2300      	movs	r3, #0
 8013360:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013368:	2b00      	cmp	r3, #0
 801336a:	d10b      	bne.n	8013384 <xQueueGenericSend+0x34>
	__asm volatile
 801336c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013370:	f383 8811 	msr	BASEPRI, r3
 8013374:	f3bf 8f6f 	isb	sy
 8013378:	f3bf 8f4f 	dsb	sy
 801337c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801337e:	bf00      	nop
 8013380:	bf00      	nop
 8013382:	e7fd      	b.n	8013380 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d103      	bne.n	8013392 <xQueueGenericSend+0x42>
 801338a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801338c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801338e:	2b00      	cmp	r3, #0
 8013390:	d101      	bne.n	8013396 <xQueueGenericSend+0x46>
 8013392:	2301      	movs	r3, #1
 8013394:	e000      	b.n	8013398 <xQueueGenericSend+0x48>
 8013396:	2300      	movs	r3, #0
 8013398:	2b00      	cmp	r3, #0
 801339a:	d10b      	bne.n	80133b4 <xQueueGenericSend+0x64>
	__asm volatile
 801339c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133a0:	f383 8811 	msr	BASEPRI, r3
 80133a4:	f3bf 8f6f 	isb	sy
 80133a8:	f3bf 8f4f 	dsb	sy
 80133ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80133ae:	bf00      	nop
 80133b0:	bf00      	nop
 80133b2:	e7fd      	b.n	80133b0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80133b4:	683b      	ldr	r3, [r7, #0]
 80133b6:	2b02      	cmp	r3, #2
 80133b8:	d103      	bne.n	80133c2 <xQueueGenericSend+0x72>
 80133ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80133be:	2b01      	cmp	r3, #1
 80133c0:	d101      	bne.n	80133c6 <xQueueGenericSend+0x76>
 80133c2:	2301      	movs	r3, #1
 80133c4:	e000      	b.n	80133c8 <xQueueGenericSend+0x78>
 80133c6:	2300      	movs	r3, #0
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d10b      	bne.n	80133e4 <xQueueGenericSend+0x94>
	__asm volatile
 80133cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133d0:	f383 8811 	msr	BASEPRI, r3
 80133d4:	f3bf 8f6f 	isb	sy
 80133d8:	f3bf 8f4f 	dsb	sy
 80133dc:	623b      	str	r3, [r7, #32]
}
 80133de:	bf00      	nop
 80133e0:	bf00      	nop
 80133e2:	e7fd      	b.n	80133e0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80133e4:	f001 fd48 	bl	8014e78 <xTaskGetSchedulerState>
 80133e8:	4603      	mov	r3, r0
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d102      	bne.n	80133f4 <xQueueGenericSend+0xa4>
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d101      	bne.n	80133f8 <xQueueGenericSend+0xa8>
 80133f4:	2301      	movs	r3, #1
 80133f6:	e000      	b.n	80133fa <xQueueGenericSend+0xaa>
 80133f8:	2300      	movs	r3, #0
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d10b      	bne.n	8013416 <xQueueGenericSend+0xc6>
	__asm volatile
 80133fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013402:	f383 8811 	msr	BASEPRI, r3
 8013406:	f3bf 8f6f 	isb	sy
 801340a:	f3bf 8f4f 	dsb	sy
 801340e:	61fb      	str	r3, [r7, #28]
}
 8013410:	bf00      	nop
 8013412:	bf00      	nop
 8013414:	e7fd      	b.n	8013412 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013416:	f002 fe27 	bl	8016068 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801341a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801341c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801341e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013422:	429a      	cmp	r2, r3
 8013424:	d302      	bcc.n	801342c <xQueueGenericSend+0xdc>
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	2b02      	cmp	r3, #2
 801342a:	d129      	bne.n	8013480 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801342c:	683a      	ldr	r2, [r7, #0]
 801342e:	68b9      	ldr	r1, [r7, #8]
 8013430:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013432:	f000 fc6d 	bl	8013d10 <prvCopyDataToQueue>
 8013436:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801343c:	2b00      	cmp	r3, #0
 801343e:	d010      	beq.n	8013462 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013442:	3324      	adds	r3, #36	@ 0x24
 8013444:	4618      	mov	r0, r3
 8013446:	f001 fadd 	bl	8014a04 <xTaskRemoveFromEventList>
 801344a:	4603      	mov	r3, r0
 801344c:	2b00      	cmp	r3, #0
 801344e:	d013      	beq.n	8013478 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013450:	4b3f      	ldr	r3, [pc, #252]	@ (8013550 <xQueueGenericSend+0x200>)
 8013452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013456:	601a      	str	r2, [r3, #0]
 8013458:	f3bf 8f4f 	dsb	sy
 801345c:	f3bf 8f6f 	isb	sy
 8013460:	e00a      	b.n	8013478 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013464:	2b00      	cmp	r3, #0
 8013466:	d007      	beq.n	8013478 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013468:	4b39      	ldr	r3, [pc, #228]	@ (8013550 <xQueueGenericSend+0x200>)
 801346a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801346e:	601a      	str	r2, [r3, #0]
 8013470:	f3bf 8f4f 	dsb	sy
 8013474:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013478:	f002 fe28 	bl	80160cc <vPortExitCritical>
				return pdPASS;
 801347c:	2301      	movs	r3, #1
 801347e:	e063      	b.n	8013548 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d103      	bne.n	801348e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013486:	f002 fe21 	bl	80160cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801348a:	2300      	movs	r3, #0
 801348c:	e05c      	b.n	8013548 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801348e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013490:	2b00      	cmp	r3, #0
 8013492:	d106      	bne.n	80134a2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013494:	f107 0314 	add.w	r3, r7, #20
 8013498:	4618      	mov	r0, r3
 801349a:	f001 fb7b 	bl	8014b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801349e:	2301      	movs	r3, #1
 80134a0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80134a2:	f002 fe13 	bl	80160cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80134a6:	f001 f82f 	bl	8014508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80134aa:	f002 fddd 	bl	8016068 <vPortEnterCritical>
 80134ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80134b4:	b25b      	sxtb	r3, r3
 80134b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80134ba:	d103      	bne.n	80134c4 <xQueueGenericSend+0x174>
 80134bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134be:	2200      	movs	r2, #0
 80134c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80134c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80134ca:	b25b      	sxtb	r3, r3
 80134cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80134d0:	d103      	bne.n	80134da <xQueueGenericSend+0x18a>
 80134d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134d4:	2200      	movs	r2, #0
 80134d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80134da:	f002 fdf7 	bl	80160cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80134de:	1d3a      	adds	r2, r7, #4
 80134e0:	f107 0314 	add.w	r3, r7, #20
 80134e4:	4611      	mov	r1, r2
 80134e6:	4618      	mov	r0, r3
 80134e8:	f001 fb6a 	bl	8014bc0 <xTaskCheckForTimeOut>
 80134ec:	4603      	mov	r3, r0
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d124      	bne.n	801353c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80134f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80134f4:	f000 fd04 	bl	8013f00 <prvIsQueueFull>
 80134f8:	4603      	mov	r3, r0
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d018      	beq.n	8013530 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80134fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013500:	3310      	adds	r3, #16
 8013502:	687a      	ldr	r2, [r7, #4]
 8013504:	4611      	mov	r1, r2
 8013506:	4618      	mov	r0, r3
 8013508:	f001 f9ec 	bl	80148e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801350c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801350e:	f000 fc8f 	bl	8013e30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013512:	f001 f807 	bl	8014524 <xTaskResumeAll>
 8013516:	4603      	mov	r3, r0
 8013518:	2b00      	cmp	r3, #0
 801351a:	f47f af7c 	bne.w	8013416 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801351e:	4b0c      	ldr	r3, [pc, #48]	@ (8013550 <xQueueGenericSend+0x200>)
 8013520:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013524:	601a      	str	r2, [r3, #0]
 8013526:	f3bf 8f4f 	dsb	sy
 801352a:	f3bf 8f6f 	isb	sy
 801352e:	e772      	b.n	8013416 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013530:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013532:	f000 fc7d 	bl	8013e30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013536:	f000 fff5 	bl	8014524 <xTaskResumeAll>
 801353a:	e76c      	b.n	8013416 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801353c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801353e:	f000 fc77 	bl	8013e30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013542:	f000 ffef 	bl	8014524 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013546:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013548:	4618      	mov	r0, r3
 801354a:	3738      	adds	r7, #56	@ 0x38
 801354c:	46bd      	mov	sp, r7
 801354e:	bd80      	pop	{r7, pc}
 8013550:	e000ed04 	.word	0xe000ed04

08013554 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b090      	sub	sp, #64	@ 0x40
 8013558:	af00      	add	r7, sp, #0
 801355a:	60f8      	str	r0, [r7, #12]
 801355c:	60b9      	str	r1, [r7, #8]
 801355e:	607a      	str	r2, [r7, #4]
 8013560:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8013566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013568:	2b00      	cmp	r3, #0
 801356a:	d10b      	bne.n	8013584 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 801356c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013570:	f383 8811 	msr	BASEPRI, r3
 8013574:	f3bf 8f6f 	isb	sy
 8013578:	f3bf 8f4f 	dsb	sy
 801357c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801357e:	bf00      	nop
 8013580:	bf00      	nop
 8013582:	e7fd      	b.n	8013580 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013584:	68bb      	ldr	r3, [r7, #8]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d103      	bne.n	8013592 <xQueueGenericSendFromISR+0x3e>
 801358a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801358c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801358e:	2b00      	cmp	r3, #0
 8013590:	d101      	bne.n	8013596 <xQueueGenericSendFromISR+0x42>
 8013592:	2301      	movs	r3, #1
 8013594:	e000      	b.n	8013598 <xQueueGenericSendFromISR+0x44>
 8013596:	2300      	movs	r3, #0
 8013598:	2b00      	cmp	r3, #0
 801359a:	d10b      	bne.n	80135b4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 801359c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135a0:	f383 8811 	msr	BASEPRI, r3
 80135a4:	f3bf 8f6f 	isb	sy
 80135a8:	f3bf 8f4f 	dsb	sy
 80135ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80135ae:	bf00      	nop
 80135b0:	bf00      	nop
 80135b2:	e7fd      	b.n	80135b0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	2b02      	cmp	r3, #2
 80135b8:	d103      	bne.n	80135c2 <xQueueGenericSendFromISR+0x6e>
 80135ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80135be:	2b01      	cmp	r3, #1
 80135c0:	d101      	bne.n	80135c6 <xQueueGenericSendFromISR+0x72>
 80135c2:	2301      	movs	r3, #1
 80135c4:	e000      	b.n	80135c8 <xQueueGenericSendFromISR+0x74>
 80135c6:	2300      	movs	r3, #0
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d10b      	bne.n	80135e4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80135cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135d0:	f383 8811 	msr	BASEPRI, r3
 80135d4:	f3bf 8f6f 	isb	sy
 80135d8:	f3bf 8f4f 	dsb	sy
 80135dc:	623b      	str	r3, [r7, #32]
}
 80135de:	bf00      	nop
 80135e0:	bf00      	nop
 80135e2:	e7fd      	b.n	80135e0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80135e4:	f002 fe20 	bl	8016228 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80135e8:	f3ef 8211 	mrs	r2, BASEPRI
 80135ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135f0:	f383 8811 	msr	BASEPRI, r3
 80135f4:	f3bf 8f6f 	isb	sy
 80135f8:	f3bf 8f4f 	dsb	sy
 80135fc:	61fa      	str	r2, [r7, #28]
 80135fe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013600:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013602:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013606:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801360a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801360c:	429a      	cmp	r2, r3
 801360e:	d302      	bcc.n	8013616 <xQueueGenericSendFromISR+0xc2>
 8013610:	683b      	ldr	r3, [r7, #0]
 8013612:	2b02      	cmp	r3, #2
 8013614:	d12f      	bne.n	8013676 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013618:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801361c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013624:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013626:	683a      	ldr	r2, [r7, #0]
 8013628:	68b9      	ldr	r1, [r7, #8]
 801362a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801362c:	f000 fb70 	bl	8013d10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013630:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8013634:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013638:	d112      	bne.n	8013660 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801363a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801363c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801363e:	2b00      	cmp	r3, #0
 8013640:	d016      	beq.n	8013670 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013644:	3324      	adds	r3, #36	@ 0x24
 8013646:	4618      	mov	r0, r3
 8013648:	f001 f9dc 	bl	8014a04 <xTaskRemoveFromEventList>
 801364c:	4603      	mov	r3, r0
 801364e:	2b00      	cmp	r3, #0
 8013650:	d00e      	beq.n	8013670 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d00b      	beq.n	8013670 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	2201      	movs	r2, #1
 801365c:	601a      	str	r2, [r3, #0]
 801365e:	e007      	b.n	8013670 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013660:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013664:	3301      	adds	r3, #1
 8013666:	b2db      	uxtb	r3, r3
 8013668:	b25a      	sxtb	r2, r3
 801366a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801366c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013670:	2301      	movs	r3, #1
 8013672:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8013674:	e001      	b.n	801367a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013676:	2300      	movs	r3, #0
 8013678:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801367a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801367c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013684:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013688:	4618      	mov	r0, r3
 801368a:	3740      	adds	r7, #64	@ 0x40
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}

08013690 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b08e      	sub	sp, #56	@ 0x38
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
 8013698:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801369e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d10b      	bne.n	80136bc <xQueueGiveFromISR+0x2c>
	__asm volatile
 80136a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136a8:	f383 8811 	msr	BASEPRI, r3
 80136ac:	f3bf 8f6f 	isb	sy
 80136b0:	f3bf 8f4f 	dsb	sy
 80136b4:	623b      	str	r3, [r7, #32]
}
 80136b6:	bf00      	nop
 80136b8:	bf00      	nop
 80136ba:	e7fd      	b.n	80136b8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80136bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d00b      	beq.n	80136dc <xQueueGiveFromISR+0x4c>
	__asm volatile
 80136c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136c8:	f383 8811 	msr	BASEPRI, r3
 80136cc:	f3bf 8f6f 	isb	sy
 80136d0:	f3bf 8f4f 	dsb	sy
 80136d4:	61fb      	str	r3, [r7, #28]
}
 80136d6:	bf00      	nop
 80136d8:	bf00      	nop
 80136da:	e7fd      	b.n	80136d8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80136dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d103      	bne.n	80136ec <xQueueGiveFromISR+0x5c>
 80136e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136e6:	689b      	ldr	r3, [r3, #8]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d101      	bne.n	80136f0 <xQueueGiveFromISR+0x60>
 80136ec:	2301      	movs	r3, #1
 80136ee:	e000      	b.n	80136f2 <xQueueGiveFromISR+0x62>
 80136f0:	2300      	movs	r3, #0
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d10b      	bne.n	801370e <xQueueGiveFromISR+0x7e>
	__asm volatile
 80136f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136fa:	f383 8811 	msr	BASEPRI, r3
 80136fe:	f3bf 8f6f 	isb	sy
 8013702:	f3bf 8f4f 	dsb	sy
 8013706:	61bb      	str	r3, [r7, #24]
}
 8013708:	bf00      	nop
 801370a:	bf00      	nop
 801370c:	e7fd      	b.n	801370a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801370e:	f002 fd8b 	bl	8016228 <vPortValidateInterruptPriority>
	__asm volatile
 8013712:	f3ef 8211 	mrs	r2, BASEPRI
 8013716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801371a:	f383 8811 	msr	BASEPRI, r3
 801371e:	f3bf 8f6f 	isb	sy
 8013722:	f3bf 8f4f 	dsb	sy
 8013726:	617a      	str	r2, [r7, #20]
 8013728:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801372a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801372c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801372e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013732:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013738:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801373a:	429a      	cmp	r2, r3
 801373c:	d22b      	bcs.n	8013796 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801373e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013740:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013744:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801374a:	1c5a      	adds	r2, r3, #1
 801374c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801374e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013750:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013754:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013758:	d112      	bne.n	8013780 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801375a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801375e:	2b00      	cmp	r3, #0
 8013760:	d016      	beq.n	8013790 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013764:	3324      	adds	r3, #36	@ 0x24
 8013766:	4618      	mov	r0, r3
 8013768:	f001 f94c 	bl	8014a04 <xTaskRemoveFromEventList>
 801376c:	4603      	mov	r3, r0
 801376e:	2b00      	cmp	r3, #0
 8013770:	d00e      	beq.n	8013790 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013772:	683b      	ldr	r3, [r7, #0]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d00b      	beq.n	8013790 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	2201      	movs	r2, #1
 801377c:	601a      	str	r2, [r3, #0]
 801377e:	e007      	b.n	8013790 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013780:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013784:	3301      	adds	r3, #1
 8013786:	b2db      	uxtb	r3, r3
 8013788:	b25a      	sxtb	r2, r3
 801378a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801378c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013790:	2301      	movs	r3, #1
 8013792:	637b      	str	r3, [r7, #52]	@ 0x34
 8013794:	e001      	b.n	801379a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013796:	2300      	movs	r3, #0
 8013798:	637b      	str	r3, [r7, #52]	@ 0x34
 801379a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801379c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	f383 8811 	msr	BASEPRI, r3
}
 80137a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80137a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80137a8:	4618      	mov	r0, r3
 80137aa:	3738      	adds	r7, #56	@ 0x38
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}

080137b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b08c      	sub	sp, #48	@ 0x30
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	60f8      	str	r0, [r7, #12]
 80137b8:	60b9      	str	r1, [r7, #8]
 80137ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80137bc:	2300      	movs	r3, #0
 80137be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80137c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d10b      	bne.n	80137e2 <xQueueReceive+0x32>
	__asm volatile
 80137ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137ce:	f383 8811 	msr	BASEPRI, r3
 80137d2:	f3bf 8f6f 	isb	sy
 80137d6:	f3bf 8f4f 	dsb	sy
 80137da:	623b      	str	r3, [r7, #32]
}
 80137dc:	bf00      	nop
 80137de:	bf00      	nop
 80137e0:	e7fd      	b.n	80137de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d103      	bne.n	80137f0 <xQueueReceive+0x40>
 80137e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d101      	bne.n	80137f4 <xQueueReceive+0x44>
 80137f0:	2301      	movs	r3, #1
 80137f2:	e000      	b.n	80137f6 <xQueueReceive+0x46>
 80137f4:	2300      	movs	r3, #0
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d10b      	bne.n	8013812 <xQueueReceive+0x62>
	__asm volatile
 80137fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137fe:	f383 8811 	msr	BASEPRI, r3
 8013802:	f3bf 8f6f 	isb	sy
 8013806:	f3bf 8f4f 	dsb	sy
 801380a:	61fb      	str	r3, [r7, #28]
}
 801380c:	bf00      	nop
 801380e:	bf00      	nop
 8013810:	e7fd      	b.n	801380e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013812:	f001 fb31 	bl	8014e78 <xTaskGetSchedulerState>
 8013816:	4603      	mov	r3, r0
 8013818:	2b00      	cmp	r3, #0
 801381a:	d102      	bne.n	8013822 <xQueueReceive+0x72>
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d101      	bne.n	8013826 <xQueueReceive+0x76>
 8013822:	2301      	movs	r3, #1
 8013824:	e000      	b.n	8013828 <xQueueReceive+0x78>
 8013826:	2300      	movs	r3, #0
 8013828:	2b00      	cmp	r3, #0
 801382a:	d10b      	bne.n	8013844 <xQueueReceive+0x94>
	__asm volatile
 801382c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013830:	f383 8811 	msr	BASEPRI, r3
 8013834:	f3bf 8f6f 	isb	sy
 8013838:	f3bf 8f4f 	dsb	sy
 801383c:	61bb      	str	r3, [r7, #24]
}
 801383e:	bf00      	nop
 8013840:	bf00      	nop
 8013842:	e7fd      	b.n	8013840 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013844:	f002 fc10 	bl	8016068 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801384a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801384c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013850:	2b00      	cmp	r3, #0
 8013852:	d01f      	beq.n	8013894 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013854:	68b9      	ldr	r1, [r7, #8]
 8013856:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013858:	f000 fac4 	bl	8013de4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801385c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801385e:	1e5a      	subs	r2, r3, #1
 8013860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013862:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013866:	691b      	ldr	r3, [r3, #16]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d00f      	beq.n	801388c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801386c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801386e:	3310      	adds	r3, #16
 8013870:	4618      	mov	r0, r3
 8013872:	f001 f8c7 	bl	8014a04 <xTaskRemoveFromEventList>
 8013876:	4603      	mov	r3, r0
 8013878:	2b00      	cmp	r3, #0
 801387a:	d007      	beq.n	801388c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801387c:	4b3c      	ldr	r3, [pc, #240]	@ (8013970 <xQueueReceive+0x1c0>)
 801387e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013882:	601a      	str	r2, [r3, #0]
 8013884:	f3bf 8f4f 	dsb	sy
 8013888:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801388c:	f002 fc1e 	bl	80160cc <vPortExitCritical>
				return pdPASS;
 8013890:	2301      	movs	r3, #1
 8013892:	e069      	b.n	8013968 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d103      	bne.n	80138a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801389a:	f002 fc17 	bl	80160cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801389e:	2300      	movs	r3, #0
 80138a0:	e062      	b.n	8013968 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80138a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d106      	bne.n	80138b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80138a8:	f107 0310 	add.w	r3, r7, #16
 80138ac:	4618      	mov	r0, r3
 80138ae:	f001 f971 	bl	8014b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80138b2:	2301      	movs	r3, #1
 80138b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80138b6:	f002 fc09 	bl	80160cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80138ba:	f000 fe25 	bl	8014508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80138be:	f002 fbd3 	bl	8016068 <vPortEnterCritical>
 80138c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80138c8:	b25b      	sxtb	r3, r3
 80138ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80138ce:	d103      	bne.n	80138d8 <xQueueReceive+0x128>
 80138d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138d2:	2200      	movs	r2, #0
 80138d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80138d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80138de:	b25b      	sxtb	r3, r3
 80138e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80138e4:	d103      	bne.n	80138ee <xQueueReceive+0x13e>
 80138e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138e8:	2200      	movs	r2, #0
 80138ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80138ee:	f002 fbed 	bl	80160cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80138f2:	1d3a      	adds	r2, r7, #4
 80138f4:	f107 0310 	add.w	r3, r7, #16
 80138f8:	4611      	mov	r1, r2
 80138fa:	4618      	mov	r0, r3
 80138fc:	f001 f960 	bl	8014bc0 <xTaskCheckForTimeOut>
 8013900:	4603      	mov	r3, r0
 8013902:	2b00      	cmp	r3, #0
 8013904:	d123      	bne.n	801394e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013908:	f000 fae4 	bl	8013ed4 <prvIsQueueEmpty>
 801390c:	4603      	mov	r3, r0
 801390e:	2b00      	cmp	r3, #0
 8013910:	d017      	beq.n	8013942 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013914:	3324      	adds	r3, #36	@ 0x24
 8013916:	687a      	ldr	r2, [r7, #4]
 8013918:	4611      	mov	r1, r2
 801391a:	4618      	mov	r0, r3
 801391c:	f000 ffe2 	bl	80148e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013920:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013922:	f000 fa85 	bl	8013e30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013926:	f000 fdfd 	bl	8014524 <xTaskResumeAll>
 801392a:	4603      	mov	r3, r0
 801392c:	2b00      	cmp	r3, #0
 801392e:	d189      	bne.n	8013844 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8013930:	4b0f      	ldr	r3, [pc, #60]	@ (8013970 <xQueueReceive+0x1c0>)
 8013932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013936:	601a      	str	r2, [r3, #0]
 8013938:	f3bf 8f4f 	dsb	sy
 801393c:	f3bf 8f6f 	isb	sy
 8013940:	e780      	b.n	8013844 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013944:	f000 fa74 	bl	8013e30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013948:	f000 fdec 	bl	8014524 <xTaskResumeAll>
 801394c:	e77a      	b.n	8013844 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801394e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013950:	f000 fa6e 	bl	8013e30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013954:	f000 fde6 	bl	8014524 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013958:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801395a:	f000 fabb 	bl	8013ed4 <prvIsQueueEmpty>
 801395e:	4603      	mov	r3, r0
 8013960:	2b00      	cmp	r3, #0
 8013962:	f43f af6f 	beq.w	8013844 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013966:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013968:	4618      	mov	r0, r3
 801396a:	3730      	adds	r7, #48	@ 0x30
 801396c:	46bd      	mov	sp, r7
 801396e:	bd80      	pop	{r7, pc}
 8013970:	e000ed04 	.word	0xe000ed04

08013974 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b08e      	sub	sp, #56	@ 0x38
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
 801397c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801397e:	2300      	movs	r3, #0
 8013980:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013986:	2300      	movs	r3, #0
 8013988:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801398a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801398c:	2b00      	cmp	r3, #0
 801398e:	d10b      	bne.n	80139a8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8013990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013994:	f383 8811 	msr	BASEPRI, r3
 8013998:	f3bf 8f6f 	isb	sy
 801399c:	f3bf 8f4f 	dsb	sy
 80139a0:	623b      	str	r3, [r7, #32]
}
 80139a2:	bf00      	nop
 80139a4:	bf00      	nop
 80139a6:	e7fd      	b.n	80139a4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80139a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d00b      	beq.n	80139c8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80139b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139b4:	f383 8811 	msr	BASEPRI, r3
 80139b8:	f3bf 8f6f 	isb	sy
 80139bc:	f3bf 8f4f 	dsb	sy
 80139c0:	61fb      	str	r3, [r7, #28]
}
 80139c2:	bf00      	nop
 80139c4:	bf00      	nop
 80139c6:	e7fd      	b.n	80139c4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80139c8:	f001 fa56 	bl	8014e78 <xTaskGetSchedulerState>
 80139cc:	4603      	mov	r3, r0
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d102      	bne.n	80139d8 <xQueueSemaphoreTake+0x64>
 80139d2:	683b      	ldr	r3, [r7, #0]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d101      	bne.n	80139dc <xQueueSemaphoreTake+0x68>
 80139d8:	2301      	movs	r3, #1
 80139da:	e000      	b.n	80139de <xQueueSemaphoreTake+0x6a>
 80139dc:	2300      	movs	r3, #0
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d10b      	bne.n	80139fa <xQueueSemaphoreTake+0x86>
	__asm volatile
 80139e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139e6:	f383 8811 	msr	BASEPRI, r3
 80139ea:	f3bf 8f6f 	isb	sy
 80139ee:	f3bf 8f4f 	dsb	sy
 80139f2:	61bb      	str	r3, [r7, #24]
}
 80139f4:	bf00      	nop
 80139f6:	bf00      	nop
 80139f8:	e7fd      	b.n	80139f6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80139fa:	f002 fb35 	bl	8016068 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80139fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a02:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d024      	beq.n	8013a54 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a0c:	1e5a      	subs	r2, r3, #1
 8013a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a10:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d104      	bne.n	8013a24 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013a1a:	f001 fbbf 	bl	801519c <pvTaskIncrementMutexHeldCount>
 8013a1e:	4602      	mov	r2, r0
 8013a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a22:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a26:	691b      	ldr	r3, [r3, #16]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d00f      	beq.n	8013a4c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a2e:	3310      	adds	r3, #16
 8013a30:	4618      	mov	r0, r3
 8013a32:	f000 ffe7 	bl	8014a04 <xTaskRemoveFromEventList>
 8013a36:	4603      	mov	r3, r0
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d007      	beq.n	8013a4c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013a3c:	4b54      	ldr	r3, [pc, #336]	@ (8013b90 <xQueueSemaphoreTake+0x21c>)
 8013a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a42:	601a      	str	r2, [r3, #0]
 8013a44:	f3bf 8f4f 	dsb	sy
 8013a48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013a4c:	f002 fb3e 	bl	80160cc <vPortExitCritical>
				return pdPASS;
 8013a50:	2301      	movs	r3, #1
 8013a52:	e098      	b.n	8013b86 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013a54:	683b      	ldr	r3, [r7, #0]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d112      	bne.n	8013a80 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d00b      	beq.n	8013a78 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8013a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a64:	f383 8811 	msr	BASEPRI, r3
 8013a68:	f3bf 8f6f 	isb	sy
 8013a6c:	f3bf 8f4f 	dsb	sy
 8013a70:	617b      	str	r3, [r7, #20]
}
 8013a72:	bf00      	nop
 8013a74:	bf00      	nop
 8013a76:	e7fd      	b.n	8013a74 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013a78:	f002 fb28 	bl	80160cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	e082      	b.n	8013b86 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d106      	bne.n	8013a94 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013a86:	f107 030c 	add.w	r3, r7, #12
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	f001 f882 	bl	8014b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013a90:	2301      	movs	r3, #1
 8013a92:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013a94:	f002 fb1a 	bl	80160cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013a98:	f000 fd36 	bl	8014508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013a9c:	f002 fae4 	bl	8016068 <vPortEnterCritical>
 8013aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013aa6:	b25b      	sxtb	r3, r3
 8013aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013aac:	d103      	bne.n	8013ab6 <xQueueSemaphoreTake+0x142>
 8013aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013abc:	b25b      	sxtb	r3, r3
 8013abe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013ac2:	d103      	bne.n	8013acc <xQueueSemaphoreTake+0x158>
 8013ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013acc:	f002 fafe 	bl	80160cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013ad0:	463a      	mov	r2, r7
 8013ad2:	f107 030c 	add.w	r3, r7, #12
 8013ad6:	4611      	mov	r1, r2
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f001 f871 	bl	8014bc0 <xTaskCheckForTimeOut>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d132      	bne.n	8013b4a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013ae4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013ae6:	f000 f9f5 	bl	8013ed4 <prvIsQueueEmpty>
 8013aea:	4603      	mov	r3, r0
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d026      	beq.n	8013b3e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d109      	bne.n	8013b0c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8013af8:	f002 fab6 	bl	8016068 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013afe:	689b      	ldr	r3, [r3, #8]
 8013b00:	4618      	mov	r0, r3
 8013b02:	f001 f9d7 	bl	8014eb4 <xTaskPriorityInherit>
 8013b06:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8013b08:	f002 fae0 	bl	80160cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b0e:	3324      	adds	r3, #36	@ 0x24
 8013b10:	683a      	ldr	r2, [r7, #0]
 8013b12:	4611      	mov	r1, r2
 8013b14:	4618      	mov	r0, r3
 8013b16:	f000 fee5 	bl	80148e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013b1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013b1c:	f000 f988 	bl	8013e30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013b20:	f000 fd00 	bl	8014524 <xTaskResumeAll>
 8013b24:	4603      	mov	r3, r0
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	f47f af67 	bne.w	80139fa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8013b2c:	4b18      	ldr	r3, [pc, #96]	@ (8013b90 <xQueueSemaphoreTake+0x21c>)
 8013b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013b32:	601a      	str	r2, [r3, #0]
 8013b34:	f3bf 8f4f 	dsb	sy
 8013b38:	f3bf 8f6f 	isb	sy
 8013b3c:	e75d      	b.n	80139fa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013b3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013b40:	f000 f976 	bl	8013e30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013b44:	f000 fcee 	bl	8014524 <xTaskResumeAll>
 8013b48:	e757      	b.n	80139fa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013b4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013b4c:	f000 f970 	bl	8013e30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013b50:	f000 fce8 	bl	8014524 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013b54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013b56:	f000 f9bd 	bl	8013ed4 <prvIsQueueEmpty>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	f43f af4c 	beq.w	80139fa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d00d      	beq.n	8013b84 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8013b68:	f002 fa7e 	bl	8016068 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013b6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013b6e:	f000 f8b7 	bl	8013ce0 <prvGetDisinheritPriorityAfterTimeout>
 8013b72:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b76:	689b      	ldr	r3, [r3, #8]
 8013b78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f001 fa72 	bl	8015064 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013b80:	f002 faa4 	bl	80160cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013b84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013b86:	4618      	mov	r0, r3
 8013b88:	3738      	adds	r7, #56	@ 0x38
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd80      	pop	{r7, pc}
 8013b8e:	bf00      	nop
 8013b90:	e000ed04 	.word	0xe000ed04

08013b94 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b08e      	sub	sp, #56	@ 0x38
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	60f8      	str	r0, [r7, #12]
 8013b9c:	60b9      	str	r1, [r7, #8]
 8013b9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d10b      	bne.n	8013bc2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8013baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bae:	f383 8811 	msr	BASEPRI, r3
 8013bb2:	f3bf 8f6f 	isb	sy
 8013bb6:	f3bf 8f4f 	dsb	sy
 8013bba:	623b      	str	r3, [r7, #32]
}
 8013bbc:	bf00      	nop
 8013bbe:	bf00      	nop
 8013bc0:	e7fd      	b.n	8013bbe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013bc2:	68bb      	ldr	r3, [r7, #8]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d103      	bne.n	8013bd0 <xQueueReceiveFromISR+0x3c>
 8013bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d101      	bne.n	8013bd4 <xQueueReceiveFromISR+0x40>
 8013bd0:	2301      	movs	r3, #1
 8013bd2:	e000      	b.n	8013bd6 <xQueueReceiveFromISR+0x42>
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d10b      	bne.n	8013bf2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8013bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bde:	f383 8811 	msr	BASEPRI, r3
 8013be2:	f3bf 8f6f 	isb	sy
 8013be6:	f3bf 8f4f 	dsb	sy
 8013bea:	61fb      	str	r3, [r7, #28]
}
 8013bec:	bf00      	nop
 8013bee:	bf00      	nop
 8013bf0:	e7fd      	b.n	8013bee <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013bf2:	f002 fb19 	bl	8016228 <vPortValidateInterruptPriority>
	__asm volatile
 8013bf6:	f3ef 8211 	mrs	r2, BASEPRI
 8013bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bfe:	f383 8811 	msr	BASEPRI, r3
 8013c02:	f3bf 8f6f 	isb	sy
 8013c06:	f3bf 8f4f 	dsb	sy
 8013c0a:	61ba      	str	r2, [r7, #24]
 8013c0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013c0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c16:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d02f      	beq.n	8013c7e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013c24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013c28:	68b9      	ldr	r1, [r7, #8]
 8013c2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013c2c:	f000 f8da 	bl	8013de4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c32:	1e5a      	subs	r2, r3, #1
 8013c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c36:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013c38:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013c40:	d112      	bne.n	8013c68 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c44:	691b      	ldr	r3, [r3, #16]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d016      	beq.n	8013c78 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c4c:	3310      	adds	r3, #16
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f000 fed8 	bl	8014a04 <xTaskRemoveFromEventList>
 8013c54:	4603      	mov	r3, r0
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d00e      	beq.n	8013c78 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d00b      	beq.n	8013c78 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2201      	movs	r2, #1
 8013c64:	601a      	str	r2, [r3, #0]
 8013c66:	e007      	b.n	8013c78 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013c68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013c6c:	3301      	adds	r3, #1
 8013c6e:	b2db      	uxtb	r3, r3
 8013c70:	b25a      	sxtb	r2, r3
 8013c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8013c78:	2301      	movs	r3, #1
 8013c7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8013c7c:	e001      	b.n	8013c82 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8013c7e:	2300      	movs	r3, #0
 8013c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8013c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c84:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013c86:	693b      	ldr	r3, [r7, #16]
 8013c88:	f383 8811 	msr	BASEPRI, r3
}
 8013c8c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013c90:	4618      	mov	r0, r3
 8013c92:	3738      	adds	r7, #56	@ 0x38
 8013c94:	46bd      	mov	sp, r7
 8013c96:	bd80      	pop	{r7, pc}

08013c98 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b084      	sub	sp, #16
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d10b      	bne.n	8013cc2 <vQueueDelete+0x2a>
	__asm volatile
 8013caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cae:	f383 8811 	msr	BASEPRI, r3
 8013cb2:	f3bf 8f6f 	isb	sy
 8013cb6:	f3bf 8f4f 	dsb	sy
 8013cba:	60bb      	str	r3, [r7, #8]
}
 8013cbc:	bf00      	nop
 8013cbe:	bf00      	nop
 8013cc0:	e7fd      	b.n	8013cbe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013cc2:	68f8      	ldr	r0, [r7, #12]
 8013cc4:	f000 f95e 	bl	8013f84 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d102      	bne.n	8013cd8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8013cd2:	68f8      	ldr	r0, [r7, #12]
 8013cd4:	f002 fbb8 	bl	8016448 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013cd8:	bf00      	nop
 8013cda:	3710      	adds	r7, #16
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bd80      	pop	{r7, pc}

08013ce0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013ce0:	b480      	push	{r7}
 8013ce2:	b085      	sub	sp, #20
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d006      	beq.n	8013cfe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8013cfa:	60fb      	str	r3, [r7, #12]
 8013cfc:	e001      	b.n	8013d02 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013cfe:	2300      	movs	r3, #0
 8013d00:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013d02:	68fb      	ldr	r3, [r7, #12]
	}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3714      	adds	r7, #20
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0e:	4770      	bx	lr

08013d10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b086      	sub	sp, #24
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	60f8      	str	r0, [r7, #12]
 8013d18:	60b9      	str	r1, [r7, #8]
 8013d1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d10d      	bne.n	8013d4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d14d      	bne.n	8013dd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	689b      	ldr	r3, [r3, #8]
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f001 f922 	bl	8014f84 <xTaskPriorityDisinherit>
 8013d40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	2200      	movs	r2, #0
 8013d46:	609a      	str	r2, [r3, #8]
 8013d48:	e043      	b.n	8013dd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d119      	bne.n	8013d84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	6858      	ldr	r0, [r3, #4]
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d58:	461a      	mov	r2, r3
 8013d5a:	68b9      	ldr	r1, [r7, #8]
 8013d5c:	f003 f993 	bl	8017086 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	685a      	ldr	r2, [r3, #4]
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d68:	441a      	add	r2, r3
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	685a      	ldr	r2, [r3, #4]
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	689b      	ldr	r3, [r3, #8]
 8013d76:	429a      	cmp	r2, r3
 8013d78:	d32b      	bcc.n	8013dd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	681a      	ldr	r2, [r3, #0]
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	605a      	str	r2, [r3, #4]
 8013d82:	e026      	b.n	8013dd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	68d8      	ldr	r0, [r3, #12]
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d8c:	461a      	mov	r2, r3
 8013d8e:	68b9      	ldr	r1, [r7, #8]
 8013d90:	f003 f979 	bl	8017086 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	68da      	ldr	r2, [r3, #12]
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d9c:	425b      	negs	r3, r3
 8013d9e:	441a      	add	r2, r3
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	68da      	ldr	r2, [r3, #12]
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	429a      	cmp	r2, r3
 8013dae:	d207      	bcs.n	8013dc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	689a      	ldr	r2, [r3, #8]
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013db8:	425b      	negs	r3, r3
 8013dba:	441a      	add	r2, r3
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	2b02      	cmp	r3, #2
 8013dc4:	d105      	bne.n	8013dd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013dc6:	693b      	ldr	r3, [r7, #16]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d002      	beq.n	8013dd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013dcc:	693b      	ldr	r3, [r7, #16]
 8013dce:	3b01      	subs	r3, #1
 8013dd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013dd2:	693b      	ldr	r3, [r7, #16]
 8013dd4:	1c5a      	adds	r2, r3, #1
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013dda:	697b      	ldr	r3, [r7, #20]
}
 8013ddc:	4618      	mov	r0, r3
 8013dde:	3718      	adds	r7, #24
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd80      	pop	{r7, pc}

08013de4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b082      	sub	sp, #8
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
 8013dec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d018      	beq.n	8013e28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	68da      	ldr	r2, [r3, #12]
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013dfe:	441a      	add	r2, r3
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	68da      	ldr	r2, [r3, #12]
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	689b      	ldr	r3, [r3, #8]
 8013e0c:	429a      	cmp	r2, r3
 8013e0e:	d303      	bcc.n	8013e18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	681a      	ldr	r2, [r3, #0]
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	68d9      	ldr	r1, [r3, #12]
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e20:	461a      	mov	r2, r3
 8013e22:	6838      	ldr	r0, [r7, #0]
 8013e24:	f003 f92f 	bl	8017086 <memcpy>
	}
}
 8013e28:	bf00      	nop
 8013e2a:	3708      	adds	r7, #8
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}

08013e30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b084      	sub	sp, #16
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013e38:	f002 f916 	bl	8016068 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013e42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013e44:	e011      	b.n	8013e6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d012      	beq.n	8013e74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	3324      	adds	r3, #36	@ 0x24
 8013e52:	4618      	mov	r0, r3
 8013e54:	f000 fdd6 	bl	8014a04 <xTaskRemoveFromEventList>
 8013e58:	4603      	mov	r3, r0
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d001      	beq.n	8013e62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013e5e:	f000 ff13 	bl	8014c88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013e62:	7bfb      	ldrb	r3, [r7, #15]
 8013e64:	3b01      	subs	r3, #1
 8013e66:	b2db      	uxtb	r3, r3
 8013e68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	dce9      	bgt.n	8013e46 <prvUnlockQueue+0x16>
 8013e72:	e000      	b.n	8013e76 <prvUnlockQueue+0x46>
					break;
 8013e74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	22ff      	movs	r2, #255	@ 0xff
 8013e7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013e7e:	f002 f925 	bl	80160cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013e82:	f002 f8f1 	bl	8016068 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013e8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013e8e:	e011      	b.n	8013eb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	691b      	ldr	r3, [r3, #16]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d012      	beq.n	8013ebe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	3310      	adds	r3, #16
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	f000 fdb1 	bl	8014a04 <xTaskRemoveFromEventList>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d001      	beq.n	8013eac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013ea8:	f000 feee 	bl	8014c88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013eac:	7bbb      	ldrb	r3, [r7, #14]
 8013eae:	3b01      	subs	r3, #1
 8013eb0:	b2db      	uxtb	r3, r3
 8013eb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013eb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	dce9      	bgt.n	8013e90 <prvUnlockQueue+0x60>
 8013ebc:	e000      	b.n	8013ec0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013ebe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	22ff      	movs	r2, #255	@ 0xff
 8013ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013ec8:	f002 f900 	bl	80160cc <vPortExitCritical>
}
 8013ecc:	bf00      	nop
 8013ece:	3710      	adds	r7, #16
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}

08013ed4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b084      	sub	sp, #16
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013edc:	f002 f8c4 	bl	8016068 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d102      	bne.n	8013eee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013ee8:	2301      	movs	r3, #1
 8013eea:	60fb      	str	r3, [r7, #12]
 8013eec:	e001      	b.n	8013ef2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013ef2:	f002 f8eb 	bl	80160cc <vPortExitCritical>

	return xReturn;
 8013ef6:	68fb      	ldr	r3, [r7, #12]
}
 8013ef8:	4618      	mov	r0, r3
 8013efa:	3710      	adds	r7, #16
 8013efc:	46bd      	mov	sp, r7
 8013efe:	bd80      	pop	{r7, pc}

08013f00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013f00:	b580      	push	{r7, lr}
 8013f02:	b084      	sub	sp, #16
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013f08:	f002 f8ae 	bl	8016068 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013f14:	429a      	cmp	r2, r3
 8013f16:	d102      	bne.n	8013f1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013f18:	2301      	movs	r3, #1
 8013f1a:	60fb      	str	r3, [r7, #12]
 8013f1c:	e001      	b.n	8013f22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013f22:	f002 f8d3 	bl	80160cc <vPortExitCritical>

	return xReturn;
 8013f26:	68fb      	ldr	r3, [r7, #12]
}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	3710      	adds	r7, #16
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}

08013f30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013f30:	b480      	push	{r7}
 8013f32:	b085      	sub	sp, #20
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
 8013f38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	60fb      	str	r3, [r7, #12]
 8013f3e:	e014      	b.n	8013f6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013f40:	4a0f      	ldr	r2, [pc, #60]	@ (8013f80 <vQueueAddToRegistry+0x50>)
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d10b      	bne.n	8013f64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013f4c:	490c      	ldr	r1, [pc, #48]	@ (8013f80 <vQueueAddToRegistry+0x50>)
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	683a      	ldr	r2, [r7, #0]
 8013f52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013f56:	4a0a      	ldr	r2, [pc, #40]	@ (8013f80 <vQueueAddToRegistry+0x50>)
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	00db      	lsls	r3, r3, #3
 8013f5c:	4413      	add	r3, r2
 8013f5e:	687a      	ldr	r2, [r7, #4]
 8013f60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013f62:	e006      	b.n	8013f72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	3301      	adds	r3, #1
 8013f68:	60fb      	str	r3, [r7, #12]
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	2b07      	cmp	r3, #7
 8013f6e:	d9e7      	bls.n	8013f40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013f70:	bf00      	nop
 8013f72:	bf00      	nop
 8013f74:	3714      	adds	r7, #20
 8013f76:	46bd      	mov	sp, r7
 8013f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f7c:	4770      	bx	lr
 8013f7e:	bf00      	nop
 8013f80:	240011f8 	.word	0x240011f8

08013f84 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013f84:	b480      	push	{r7}
 8013f86:	b085      	sub	sp, #20
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	60fb      	str	r3, [r7, #12]
 8013f90:	e016      	b.n	8013fc0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013f92:	4a10      	ldr	r2, [pc, #64]	@ (8013fd4 <vQueueUnregisterQueue+0x50>)
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	00db      	lsls	r3, r3, #3
 8013f98:	4413      	add	r3, r2
 8013f9a:	685b      	ldr	r3, [r3, #4]
 8013f9c:	687a      	ldr	r2, [r7, #4]
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d10b      	bne.n	8013fba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013fa2:	4a0c      	ldr	r2, [pc, #48]	@ (8013fd4 <vQueueUnregisterQueue+0x50>)
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	2100      	movs	r1, #0
 8013fa8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013fac:	4a09      	ldr	r2, [pc, #36]	@ (8013fd4 <vQueueUnregisterQueue+0x50>)
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	00db      	lsls	r3, r3, #3
 8013fb2:	4413      	add	r3, r2
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	605a      	str	r2, [r3, #4]
				break;
 8013fb8:	e006      	b.n	8013fc8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	3301      	adds	r3, #1
 8013fbe:	60fb      	str	r3, [r7, #12]
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	2b07      	cmp	r3, #7
 8013fc4:	d9e5      	bls.n	8013f92 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013fc6:	bf00      	nop
 8013fc8:	bf00      	nop
 8013fca:	3714      	adds	r7, #20
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd2:	4770      	bx	lr
 8013fd4:	240011f8 	.word	0x240011f8

08013fd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b086      	sub	sp, #24
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	60f8      	str	r0, [r7, #12]
 8013fe0:	60b9      	str	r1, [r7, #8]
 8013fe2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013fe8:	f002 f83e 	bl	8016068 <vPortEnterCritical>
 8013fec:	697b      	ldr	r3, [r7, #20]
 8013fee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013ff2:	b25b      	sxtb	r3, r3
 8013ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013ff8:	d103      	bne.n	8014002 <vQueueWaitForMessageRestricted+0x2a>
 8013ffa:	697b      	ldr	r3, [r7, #20]
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014002:	697b      	ldr	r3, [r7, #20]
 8014004:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014008:	b25b      	sxtb	r3, r3
 801400a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801400e:	d103      	bne.n	8014018 <vQueueWaitForMessageRestricted+0x40>
 8014010:	697b      	ldr	r3, [r7, #20]
 8014012:	2200      	movs	r2, #0
 8014014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014018:	f002 f858 	bl	80160cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801401c:	697b      	ldr	r3, [r7, #20]
 801401e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014020:	2b00      	cmp	r3, #0
 8014022:	d106      	bne.n	8014032 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014024:	697b      	ldr	r3, [r7, #20]
 8014026:	3324      	adds	r3, #36	@ 0x24
 8014028:	687a      	ldr	r2, [r7, #4]
 801402a:	68b9      	ldr	r1, [r7, #8]
 801402c:	4618      	mov	r0, r3
 801402e:	f000 fcbd 	bl	80149ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014032:	6978      	ldr	r0, [r7, #20]
 8014034:	f7ff fefc 	bl	8013e30 <prvUnlockQueue>
	}
 8014038:	bf00      	nop
 801403a:	3718      	adds	r7, #24
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}

08014040 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014040:	b580      	push	{r7, lr}
 8014042:	b08e      	sub	sp, #56	@ 0x38
 8014044:	af04      	add	r7, sp, #16
 8014046:	60f8      	str	r0, [r7, #12]
 8014048:	60b9      	str	r1, [r7, #8]
 801404a:	607a      	str	r2, [r7, #4]
 801404c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801404e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014050:	2b00      	cmp	r3, #0
 8014052:	d10b      	bne.n	801406c <xTaskCreateStatic+0x2c>
	__asm volatile
 8014054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014058:	f383 8811 	msr	BASEPRI, r3
 801405c:	f3bf 8f6f 	isb	sy
 8014060:	f3bf 8f4f 	dsb	sy
 8014064:	623b      	str	r3, [r7, #32]
}
 8014066:	bf00      	nop
 8014068:	bf00      	nop
 801406a:	e7fd      	b.n	8014068 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801406c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801406e:	2b00      	cmp	r3, #0
 8014070:	d10b      	bne.n	801408a <xTaskCreateStatic+0x4a>
	__asm volatile
 8014072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014076:	f383 8811 	msr	BASEPRI, r3
 801407a:	f3bf 8f6f 	isb	sy
 801407e:	f3bf 8f4f 	dsb	sy
 8014082:	61fb      	str	r3, [r7, #28]
}
 8014084:	bf00      	nop
 8014086:	bf00      	nop
 8014088:	e7fd      	b.n	8014086 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801408a:	23a8      	movs	r3, #168	@ 0xa8
 801408c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801408e:	693b      	ldr	r3, [r7, #16]
 8014090:	2ba8      	cmp	r3, #168	@ 0xa8
 8014092:	d00b      	beq.n	80140ac <xTaskCreateStatic+0x6c>
	__asm volatile
 8014094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014098:	f383 8811 	msr	BASEPRI, r3
 801409c:	f3bf 8f6f 	isb	sy
 80140a0:	f3bf 8f4f 	dsb	sy
 80140a4:	61bb      	str	r3, [r7, #24]
}
 80140a6:	bf00      	nop
 80140a8:	bf00      	nop
 80140aa:	e7fd      	b.n	80140a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80140ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80140ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d01e      	beq.n	80140f2 <xTaskCreateStatic+0xb2>
 80140b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d01b      	beq.n	80140f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80140ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80140be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80140c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80140c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140c6:	2202      	movs	r2, #2
 80140c8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80140cc:	2300      	movs	r3, #0
 80140ce:	9303      	str	r3, [sp, #12]
 80140d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140d2:	9302      	str	r3, [sp, #8]
 80140d4:	f107 0314 	add.w	r3, r7, #20
 80140d8:	9301      	str	r3, [sp, #4]
 80140da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140dc:	9300      	str	r3, [sp, #0]
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	687a      	ldr	r2, [r7, #4]
 80140e2:	68b9      	ldr	r1, [r7, #8]
 80140e4:	68f8      	ldr	r0, [r7, #12]
 80140e6:	f000 f851 	bl	801418c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80140ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80140ec:	f000 f8f6 	bl	80142dc <prvAddNewTaskToReadyList>
 80140f0:	e001      	b.n	80140f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80140f2:	2300      	movs	r3, #0
 80140f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80140f6:	697b      	ldr	r3, [r7, #20]
	}
 80140f8:	4618      	mov	r0, r3
 80140fa:	3728      	adds	r7, #40	@ 0x28
 80140fc:	46bd      	mov	sp, r7
 80140fe:	bd80      	pop	{r7, pc}

08014100 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014100:	b580      	push	{r7, lr}
 8014102:	b08c      	sub	sp, #48	@ 0x30
 8014104:	af04      	add	r7, sp, #16
 8014106:	60f8      	str	r0, [r7, #12]
 8014108:	60b9      	str	r1, [r7, #8]
 801410a:	603b      	str	r3, [r7, #0]
 801410c:	4613      	mov	r3, r2
 801410e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014110:	88fb      	ldrh	r3, [r7, #6]
 8014112:	009b      	lsls	r3, r3, #2
 8014114:	4618      	mov	r0, r3
 8014116:	f002 f8c9 	bl	80162ac <pvPortMalloc>
 801411a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801411c:	697b      	ldr	r3, [r7, #20]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d00e      	beq.n	8014140 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014122:	20a8      	movs	r0, #168	@ 0xa8
 8014124:	f002 f8c2 	bl	80162ac <pvPortMalloc>
 8014128:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801412a:	69fb      	ldr	r3, [r7, #28]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d003      	beq.n	8014138 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014130:	69fb      	ldr	r3, [r7, #28]
 8014132:	697a      	ldr	r2, [r7, #20]
 8014134:	631a      	str	r2, [r3, #48]	@ 0x30
 8014136:	e005      	b.n	8014144 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014138:	6978      	ldr	r0, [r7, #20]
 801413a:	f002 f985 	bl	8016448 <vPortFree>
 801413e:	e001      	b.n	8014144 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014140:	2300      	movs	r3, #0
 8014142:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014144:	69fb      	ldr	r3, [r7, #28]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d017      	beq.n	801417a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801414a:	69fb      	ldr	r3, [r7, #28]
 801414c:	2200      	movs	r2, #0
 801414e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014152:	88fa      	ldrh	r2, [r7, #6]
 8014154:	2300      	movs	r3, #0
 8014156:	9303      	str	r3, [sp, #12]
 8014158:	69fb      	ldr	r3, [r7, #28]
 801415a:	9302      	str	r3, [sp, #8]
 801415c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801415e:	9301      	str	r3, [sp, #4]
 8014160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014162:	9300      	str	r3, [sp, #0]
 8014164:	683b      	ldr	r3, [r7, #0]
 8014166:	68b9      	ldr	r1, [r7, #8]
 8014168:	68f8      	ldr	r0, [r7, #12]
 801416a:	f000 f80f 	bl	801418c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801416e:	69f8      	ldr	r0, [r7, #28]
 8014170:	f000 f8b4 	bl	80142dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014174:	2301      	movs	r3, #1
 8014176:	61bb      	str	r3, [r7, #24]
 8014178:	e002      	b.n	8014180 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801417a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801417e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014180:	69bb      	ldr	r3, [r7, #24]
	}
 8014182:	4618      	mov	r0, r3
 8014184:	3720      	adds	r7, #32
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}
	...

0801418c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b088      	sub	sp, #32
 8014190:	af00      	add	r7, sp, #0
 8014192:	60f8      	str	r0, [r7, #12]
 8014194:	60b9      	str	r1, [r7, #8]
 8014196:	607a      	str	r2, [r7, #4]
 8014198:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801419a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801419c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	009b      	lsls	r3, r3, #2
 80141a2:	461a      	mov	r2, r3
 80141a4:	21a5      	movs	r1, #165	@ 0xa5
 80141a6:	f002 fe49 	bl	8016e3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80141aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80141ae:	6879      	ldr	r1, [r7, #4]
 80141b0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80141b4:	440b      	add	r3, r1
 80141b6:	009b      	lsls	r3, r3, #2
 80141b8:	4413      	add	r3, r2
 80141ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80141bc:	69bb      	ldr	r3, [r7, #24]
 80141be:	f023 0307 	bic.w	r3, r3, #7
 80141c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80141c4:	69bb      	ldr	r3, [r7, #24]
 80141c6:	f003 0307 	and.w	r3, r3, #7
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d00b      	beq.n	80141e6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80141ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141d2:	f383 8811 	msr	BASEPRI, r3
 80141d6:	f3bf 8f6f 	isb	sy
 80141da:	f3bf 8f4f 	dsb	sy
 80141de:	617b      	str	r3, [r7, #20]
}
 80141e0:	bf00      	nop
 80141e2:	bf00      	nop
 80141e4:	e7fd      	b.n	80141e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80141e6:	68bb      	ldr	r3, [r7, #8]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d01f      	beq.n	801422c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80141ec:	2300      	movs	r3, #0
 80141ee:	61fb      	str	r3, [r7, #28]
 80141f0:	e012      	b.n	8014218 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80141f2:	68ba      	ldr	r2, [r7, #8]
 80141f4:	69fb      	ldr	r3, [r7, #28]
 80141f6:	4413      	add	r3, r2
 80141f8:	7819      	ldrb	r1, [r3, #0]
 80141fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80141fc:	69fb      	ldr	r3, [r7, #28]
 80141fe:	4413      	add	r3, r2
 8014200:	3334      	adds	r3, #52	@ 0x34
 8014202:	460a      	mov	r2, r1
 8014204:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014206:	68ba      	ldr	r2, [r7, #8]
 8014208:	69fb      	ldr	r3, [r7, #28]
 801420a:	4413      	add	r3, r2
 801420c:	781b      	ldrb	r3, [r3, #0]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d006      	beq.n	8014220 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014212:	69fb      	ldr	r3, [r7, #28]
 8014214:	3301      	adds	r3, #1
 8014216:	61fb      	str	r3, [r7, #28]
 8014218:	69fb      	ldr	r3, [r7, #28]
 801421a:	2b0f      	cmp	r3, #15
 801421c:	d9e9      	bls.n	80141f2 <prvInitialiseNewTask+0x66>
 801421e:	e000      	b.n	8014222 <prvInitialiseNewTask+0x96>
			{
				break;
 8014220:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014224:	2200      	movs	r2, #0
 8014226:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801422a:	e003      	b.n	8014234 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801422c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801422e:	2200      	movs	r2, #0
 8014230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014236:	2b37      	cmp	r3, #55	@ 0x37
 8014238:	d901      	bls.n	801423e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801423a:	2337      	movs	r3, #55	@ 0x37
 801423c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801423e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014240:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014242:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014246:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014248:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801424a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801424c:	2200      	movs	r2, #0
 801424e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014252:	3304      	adds	r3, #4
 8014254:	4618      	mov	r0, r3
 8014256:	f7fe fe33 	bl	8012ec0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801425a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801425c:	3318      	adds	r3, #24
 801425e:	4618      	mov	r0, r3
 8014260:	f7fe fe2e 	bl	8012ec0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014268:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801426a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801426c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014272:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014278:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801427a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801427c:	2200      	movs	r2, #0
 801427e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014284:	2200      	movs	r2, #0
 8014286:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801428a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801428c:	3354      	adds	r3, #84	@ 0x54
 801428e:	224c      	movs	r2, #76	@ 0x4c
 8014290:	2100      	movs	r1, #0
 8014292:	4618      	mov	r0, r3
 8014294:	f002 fdd2 	bl	8016e3c <memset>
 8014298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801429a:	4a0d      	ldr	r2, [pc, #52]	@ (80142d0 <prvInitialiseNewTask+0x144>)
 801429c:	659a      	str	r2, [r3, #88]	@ 0x58
 801429e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142a0:	4a0c      	ldr	r2, [pc, #48]	@ (80142d4 <prvInitialiseNewTask+0x148>)
 80142a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80142a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142a6:	4a0c      	ldr	r2, [pc, #48]	@ (80142d8 <prvInitialiseNewTask+0x14c>)
 80142a8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80142aa:	683a      	ldr	r2, [r7, #0]
 80142ac:	68f9      	ldr	r1, [r7, #12]
 80142ae:	69b8      	ldr	r0, [r7, #24]
 80142b0:	f001 fda8 	bl	8015e04 <pxPortInitialiseStack>
 80142b4:	4602      	mov	r2, r0
 80142b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80142ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d002      	beq.n	80142c6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80142c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80142c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80142c6:	bf00      	nop
 80142c8:	3720      	adds	r7, #32
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}
 80142ce:	bf00      	nop
 80142d0:	24005494 	.word	0x24005494
 80142d4:	240054fc 	.word	0x240054fc
 80142d8:	24005564 	.word	0x24005564

080142dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b082      	sub	sp, #8
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80142e4:	f001 fec0 	bl	8016068 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80142e8:	4b2d      	ldr	r3, [pc, #180]	@ (80143a0 <prvAddNewTaskToReadyList+0xc4>)
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	3301      	adds	r3, #1
 80142ee:	4a2c      	ldr	r2, [pc, #176]	@ (80143a0 <prvAddNewTaskToReadyList+0xc4>)
 80142f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80142f2:	4b2c      	ldr	r3, [pc, #176]	@ (80143a4 <prvAddNewTaskToReadyList+0xc8>)
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d109      	bne.n	801430e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80142fa:	4a2a      	ldr	r2, [pc, #168]	@ (80143a4 <prvAddNewTaskToReadyList+0xc8>)
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014300:	4b27      	ldr	r3, [pc, #156]	@ (80143a0 <prvAddNewTaskToReadyList+0xc4>)
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	2b01      	cmp	r3, #1
 8014306:	d110      	bne.n	801432a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014308:	f000 fce2 	bl	8014cd0 <prvInitialiseTaskLists>
 801430c:	e00d      	b.n	801432a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801430e:	4b26      	ldr	r3, [pc, #152]	@ (80143a8 <prvAddNewTaskToReadyList+0xcc>)
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d109      	bne.n	801432a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014316:	4b23      	ldr	r3, [pc, #140]	@ (80143a4 <prvAddNewTaskToReadyList+0xc8>)
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014320:	429a      	cmp	r2, r3
 8014322:	d802      	bhi.n	801432a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014324:	4a1f      	ldr	r2, [pc, #124]	@ (80143a4 <prvAddNewTaskToReadyList+0xc8>)
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801432a:	4b20      	ldr	r3, [pc, #128]	@ (80143ac <prvAddNewTaskToReadyList+0xd0>)
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	3301      	adds	r3, #1
 8014330:	4a1e      	ldr	r2, [pc, #120]	@ (80143ac <prvAddNewTaskToReadyList+0xd0>)
 8014332:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014334:	4b1d      	ldr	r3, [pc, #116]	@ (80143ac <prvAddNewTaskToReadyList+0xd0>)
 8014336:	681a      	ldr	r2, [r3, #0]
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014340:	4b1b      	ldr	r3, [pc, #108]	@ (80143b0 <prvAddNewTaskToReadyList+0xd4>)
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	429a      	cmp	r2, r3
 8014346:	d903      	bls.n	8014350 <prvAddNewTaskToReadyList+0x74>
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801434c:	4a18      	ldr	r2, [pc, #96]	@ (80143b0 <prvAddNewTaskToReadyList+0xd4>)
 801434e:	6013      	str	r3, [r2, #0]
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014354:	4613      	mov	r3, r2
 8014356:	009b      	lsls	r3, r3, #2
 8014358:	4413      	add	r3, r2
 801435a:	009b      	lsls	r3, r3, #2
 801435c:	4a15      	ldr	r2, [pc, #84]	@ (80143b4 <prvAddNewTaskToReadyList+0xd8>)
 801435e:	441a      	add	r2, r3
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	3304      	adds	r3, #4
 8014364:	4619      	mov	r1, r3
 8014366:	4610      	mov	r0, r2
 8014368:	f7fe fdb7 	bl	8012eda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801436c:	f001 feae 	bl	80160cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014370:	4b0d      	ldr	r3, [pc, #52]	@ (80143a8 <prvAddNewTaskToReadyList+0xcc>)
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d00e      	beq.n	8014396 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014378:	4b0a      	ldr	r3, [pc, #40]	@ (80143a4 <prvAddNewTaskToReadyList+0xc8>)
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014382:	429a      	cmp	r2, r3
 8014384:	d207      	bcs.n	8014396 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014386:	4b0c      	ldr	r3, [pc, #48]	@ (80143b8 <prvAddNewTaskToReadyList+0xdc>)
 8014388:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801438c:	601a      	str	r2, [r3, #0]
 801438e:	f3bf 8f4f 	dsb	sy
 8014392:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014396:	bf00      	nop
 8014398:	3708      	adds	r7, #8
 801439a:	46bd      	mov	sp, r7
 801439c:	bd80      	pop	{r7, pc}
 801439e:	bf00      	nop
 80143a0:	2400170c 	.word	0x2400170c
 80143a4:	24001238 	.word	0x24001238
 80143a8:	24001718 	.word	0x24001718
 80143ac:	24001728 	.word	0x24001728
 80143b0:	24001714 	.word	0x24001714
 80143b4:	2400123c 	.word	0x2400123c
 80143b8:	e000ed04 	.word	0xe000ed04

080143bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b084      	sub	sp, #16
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80143c4:	2300      	movs	r3, #0
 80143c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d018      	beq.n	8014400 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80143ce:	4b14      	ldr	r3, [pc, #80]	@ (8014420 <vTaskDelay+0x64>)
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d00b      	beq.n	80143ee <vTaskDelay+0x32>
	__asm volatile
 80143d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143da:	f383 8811 	msr	BASEPRI, r3
 80143de:	f3bf 8f6f 	isb	sy
 80143e2:	f3bf 8f4f 	dsb	sy
 80143e6:	60bb      	str	r3, [r7, #8]
}
 80143e8:	bf00      	nop
 80143ea:	bf00      	nop
 80143ec:	e7fd      	b.n	80143ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80143ee:	f000 f88b 	bl	8014508 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80143f2:	2100      	movs	r1, #0
 80143f4:	6878      	ldr	r0, [r7, #4]
 80143f6:	f001 f8d9 	bl	80155ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80143fa:	f000 f893 	bl	8014524 <xTaskResumeAll>
 80143fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d107      	bne.n	8014416 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8014406:	4b07      	ldr	r3, [pc, #28]	@ (8014424 <vTaskDelay+0x68>)
 8014408:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801440c:	601a      	str	r2, [r3, #0]
 801440e:	f3bf 8f4f 	dsb	sy
 8014412:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014416:	bf00      	nop
 8014418:	3710      	adds	r7, #16
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}
 801441e:	bf00      	nop
 8014420:	24001734 	.word	0x24001734
 8014424:	e000ed04 	.word	0xe000ed04

08014428 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b08a      	sub	sp, #40	@ 0x28
 801442c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801442e:	2300      	movs	r3, #0
 8014430:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014432:	2300      	movs	r3, #0
 8014434:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014436:	463a      	mov	r2, r7
 8014438:	1d39      	adds	r1, r7, #4
 801443a:	f107 0308 	add.w	r3, r7, #8
 801443e:	4618      	mov	r0, r3
 8014440:	f7fe fb2e 	bl	8012aa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014444:	6839      	ldr	r1, [r7, #0]
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	68ba      	ldr	r2, [r7, #8]
 801444a:	9202      	str	r2, [sp, #8]
 801444c:	9301      	str	r3, [sp, #4]
 801444e:	2300      	movs	r3, #0
 8014450:	9300      	str	r3, [sp, #0]
 8014452:	2300      	movs	r3, #0
 8014454:	460a      	mov	r2, r1
 8014456:	4924      	ldr	r1, [pc, #144]	@ (80144e8 <vTaskStartScheduler+0xc0>)
 8014458:	4824      	ldr	r0, [pc, #144]	@ (80144ec <vTaskStartScheduler+0xc4>)
 801445a:	f7ff fdf1 	bl	8014040 <xTaskCreateStatic>
 801445e:	4603      	mov	r3, r0
 8014460:	4a23      	ldr	r2, [pc, #140]	@ (80144f0 <vTaskStartScheduler+0xc8>)
 8014462:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014464:	4b22      	ldr	r3, [pc, #136]	@ (80144f0 <vTaskStartScheduler+0xc8>)
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d002      	beq.n	8014472 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801446c:	2301      	movs	r3, #1
 801446e:	617b      	str	r3, [r7, #20]
 8014470:	e001      	b.n	8014476 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014472:	2300      	movs	r3, #0
 8014474:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014476:	697b      	ldr	r3, [r7, #20]
 8014478:	2b01      	cmp	r3, #1
 801447a:	d102      	bne.n	8014482 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801447c:	f001 f8ea 	bl	8015654 <xTimerCreateTimerTask>
 8014480:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014482:	697b      	ldr	r3, [r7, #20]
 8014484:	2b01      	cmp	r3, #1
 8014486:	d11b      	bne.n	80144c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8014488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801448c:	f383 8811 	msr	BASEPRI, r3
 8014490:	f3bf 8f6f 	isb	sy
 8014494:	f3bf 8f4f 	dsb	sy
 8014498:	613b      	str	r3, [r7, #16]
}
 801449a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801449c:	4b15      	ldr	r3, [pc, #84]	@ (80144f4 <vTaskStartScheduler+0xcc>)
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	3354      	adds	r3, #84	@ 0x54
 80144a2:	4a15      	ldr	r2, [pc, #84]	@ (80144f8 <vTaskStartScheduler+0xd0>)
 80144a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80144a6:	4b15      	ldr	r3, [pc, #84]	@ (80144fc <vTaskStartScheduler+0xd4>)
 80144a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80144ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80144ae:	4b14      	ldr	r3, [pc, #80]	@ (8014500 <vTaskStartScheduler+0xd8>)
 80144b0:	2201      	movs	r2, #1
 80144b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80144b4:	4b13      	ldr	r3, [pc, #76]	@ (8014504 <vTaskStartScheduler+0xdc>)
 80144b6:	2200      	movs	r2, #0
 80144b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80144ba:	f001 fd31 	bl	8015f20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80144be:	e00f      	b.n	80144e0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80144c0:	697b      	ldr	r3, [r7, #20]
 80144c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80144c6:	d10b      	bne.n	80144e0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80144c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144cc:	f383 8811 	msr	BASEPRI, r3
 80144d0:	f3bf 8f6f 	isb	sy
 80144d4:	f3bf 8f4f 	dsb	sy
 80144d8:	60fb      	str	r3, [r7, #12]
}
 80144da:	bf00      	nop
 80144dc:	bf00      	nop
 80144de:	e7fd      	b.n	80144dc <vTaskStartScheduler+0xb4>
}
 80144e0:	bf00      	nop
 80144e2:	3718      	adds	r7, #24
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}
 80144e8:	080188f8 	.word	0x080188f8
 80144ec:	08014ca1 	.word	0x08014ca1
 80144f0:	24001730 	.word	0x24001730
 80144f4:	24001238 	.word	0x24001238
 80144f8:	24000020 	.word	0x24000020
 80144fc:	2400172c 	.word	0x2400172c
 8014500:	24001718 	.word	0x24001718
 8014504:	24001710 	.word	0x24001710

08014508 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014508:	b480      	push	{r7}
 801450a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801450c:	4b04      	ldr	r3, [pc, #16]	@ (8014520 <vTaskSuspendAll+0x18>)
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	3301      	adds	r3, #1
 8014512:	4a03      	ldr	r2, [pc, #12]	@ (8014520 <vTaskSuspendAll+0x18>)
 8014514:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014516:	bf00      	nop
 8014518:	46bd      	mov	sp, r7
 801451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451e:	4770      	bx	lr
 8014520:	24001734 	.word	0x24001734

08014524 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b084      	sub	sp, #16
 8014528:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801452a:	2300      	movs	r3, #0
 801452c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801452e:	2300      	movs	r3, #0
 8014530:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014532:	4b42      	ldr	r3, [pc, #264]	@ (801463c <xTaskResumeAll+0x118>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d10b      	bne.n	8014552 <xTaskResumeAll+0x2e>
	__asm volatile
 801453a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801453e:	f383 8811 	msr	BASEPRI, r3
 8014542:	f3bf 8f6f 	isb	sy
 8014546:	f3bf 8f4f 	dsb	sy
 801454a:	603b      	str	r3, [r7, #0]
}
 801454c:	bf00      	nop
 801454e:	bf00      	nop
 8014550:	e7fd      	b.n	801454e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014552:	f001 fd89 	bl	8016068 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014556:	4b39      	ldr	r3, [pc, #228]	@ (801463c <xTaskResumeAll+0x118>)
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	3b01      	subs	r3, #1
 801455c:	4a37      	ldr	r2, [pc, #220]	@ (801463c <xTaskResumeAll+0x118>)
 801455e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014560:	4b36      	ldr	r3, [pc, #216]	@ (801463c <xTaskResumeAll+0x118>)
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d162      	bne.n	801462e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014568:	4b35      	ldr	r3, [pc, #212]	@ (8014640 <xTaskResumeAll+0x11c>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d05e      	beq.n	801462e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014570:	e02f      	b.n	80145d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014572:	4b34      	ldr	r3, [pc, #208]	@ (8014644 <xTaskResumeAll+0x120>)
 8014574:	68db      	ldr	r3, [r3, #12]
 8014576:	68db      	ldr	r3, [r3, #12]
 8014578:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	3318      	adds	r3, #24
 801457e:	4618      	mov	r0, r3
 8014580:	f7fe fd08 	bl	8012f94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	3304      	adds	r3, #4
 8014588:	4618      	mov	r0, r3
 801458a:	f7fe fd03 	bl	8012f94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014592:	4b2d      	ldr	r3, [pc, #180]	@ (8014648 <xTaskResumeAll+0x124>)
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	429a      	cmp	r2, r3
 8014598:	d903      	bls.n	80145a2 <xTaskResumeAll+0x7e>
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801459e:	4a2a      	ldr	r2, [pc, #168]	@ (8014648 <xTaskResumeAll+0x124>)
 80145a0:	6013      	str	r3, [r2, #0]
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80145a6:	4613      	mov	r3, r2
 80145a8:	009b      	lsls	r3, r3, #2
 80145aa:	4413      	add	r3, r2
 80145ac:	009b      	lsls	r3, r3, #2
 80145ae:	4a27      	ldr	r2, [pc, #156]	@ (801464c <xTaskResumeAll+0x128>)
 80145b0:	441a      	add	r2, r3
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	3304      	adds	r3, #4
 80145b6:	4619      	mov	r1, r3
 80145b8:	4610      	mov	r0, r2
 80145ba:	f7fe fc8e 	bl	8012eda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80145c2:	4b23      	ldr	r3, [pc, #140]	@ (8014650 <xTaskResumeAll+0x12c>)
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145c8:	429a      	cmp	r2, r3
 80145ca:	d302      	bcc.n	80145d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80145cc:	4b21      	ldr	r3, [pc, #132]	@ (8014654 <xTaskResumeAll+0x130>)
 80145ce:	2201      	movs	r2, #1
 80145d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80145d2:	4b1c      	ldr	r3, [pc, #112]	@ (8014644 <xTaskResumeAll+0x120>)
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d1cb      	bne.n	8014572 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d001      	beq.n	80145e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80145e0:	f000 fc1a 	bl	8014e18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80145e4:	4b1c      	ldr	r3, [pc, #112]	@ (8014658 <xTaskResumeAll+0x134>)
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d010      	beq.n	8014612 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80145f0:	f000 f858 	bl	80146a4 <xTaskIncrementTick>
 80145f4:	4603      	mov	r3, r0
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d002      	beq.n	8014600 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80145fa:	4b16      	ldr	r3, [pc, #88]	@ (8014654 <xTaskResumeAll+0x130>)
 80145fc:	2201      	movs	r2, #1
 80145fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	3b01      	subs	r3, #1
 8014604:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d1f1      	bne.n	80145f0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 801460c:	4b12      	ldr	r3, [pc, #72]	@ (8014658 <xTaskResumeAll+0x134>)
 801460e:	2200      	movs	r2, #0
 8014610:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014612:	4b10      	ldr	r3, [pc, #64]	@ (8014654 <xTaskResumeAll+0x130>)
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d009      	beq.n	801462e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801461a:	2301      	movs	r3, #1
 801461c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801461e:	4b0f      	ldr	r3, [pc, #60]	@ (801465c <xTaskResumeAll+0x138>)
 8014620:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014624:	601a      	str	r2, [r3, #0]
 8014626:	f3bf 8f4f 	dsb	sy
 801462a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801462e:	f001 fd4d 	bl	80160cc <vPortExitCritical>

	return xAlreadyYielded;
 8014632:	68bb      	ldr	r3, [r7, #8]
}
 8014634:	4618      	mov	r0, r3
 8014636:	3710      	adds	r7, #16
 8014638:	46bd      	mov	sp, r7
 801463a:	bd80      	pop	{r7, pc}
 801463c:	24001734 	.word	0x24001734
 8014640:	2400170c 	.word	0x2400170c
 8014644:	240016cc 	.word	0x240016cc
 8014648:	24001714 	.word	0x24001714
 801464c:	2400123c 	.word	0x2400123c
 8014650:	24001238 	.word	0x24001238
 8014654:	24001720 	.word	0x24001720
 8014658:	2400171c 	.word	0x2400171c
 801465c:	e000ed04 	.word	0xe000ed04

08014660 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014660:	b480      	push	{r7}
 8014662:	b083      	sub	sp, #12
 8014664:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014666:	4b05      	ldr	r3, [pc, #20]	@ (801467c <xTaskGetTickCount+0x1c>)
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801466c:	687b      	ldr	r3, [r7, #4]
}
 801466e:	4618      	mov	r0, r3
 8014670:	370c      	adds	r7, #12
 8014672:	46bd      	mov	sp, r7
 8014674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014678:	4770      	bx	lr
 801467a:	bf00      	nop
 801467c:	24001710 	.word	0x24001710

08014680 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b082      	sub	sp, #8
 8014684:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014686:	f001 fdcf 	bl	8016228 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801468a:	2300      	movs	r3, #0
 801468c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801468e:	4b04      	ldr	r3, [pc, #16]	@ (80146a0 <xTaskGetTickCountFromISR+0x20>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014694:	683b      	ldr	r3, [r7, #0]
}
 8014696:	4618      	mov	r0, r3
 8014698:	3708      	adds	r7, #8
 801469a:	46bd      	mov	sp, r7
 801469c:	bd80      	pop	{r7, pc}
 801469e:	bf00      	nop
 80146a0:	24001710 	.word	0x24001710

080146a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b086      	sub	sp, #24
 80146a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80146aa:	2300      	movs	r3, #0
 80146ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80146ae:	4b4f      	ldr	r3, [pc, #316]	@ (80147ec <xTaskIncrementTick+0x148>)
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	f040 8090 	bne.w	80147d8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80146b8:	4b4d      	ldr	r3, [pc, #308]	@ (80147f0 <xTaskIncrementTick+0x14c>)
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	3301      	adds	r3, #1
 80146be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80146c0:	4a4b      	ldr	r2, [pc, #300]	@ (80147f0 <xTaskIncrementTick+0x14c>)
 80146c2:	693b      	ldr	r3, [r7, #16]
 80146c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80146c6:	693b      	ldr	r3, [r7, #16]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d121      	bne.n	8014710 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80146cc:	4b49      	ldr	r3, [pc, #292]	@ (80147f4 <xTaskIncrementTick+0x150>)
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d00b      	beq.n	80146ee <xTaskIncrementTick+0x4a>
	__asm volatile
 80146d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146da:	f383 8811 	msr	BASEPRI, r3
 80146de:	f3bf 8f6f 	isb	sy
 80146e2:	f3bf 8f4f 	dsb	sy
 80146e6:	603b      	str	r3, [r7, #0]
}
 80146e8:	bf00      	nop
 80146ea:	bf00      	nop
 80146ec:	e7fd      	b.n	80146ea <xTaskIncrementTick+0x46>
 80146ee:	4b41      	ldr	r3, [pc, #260]	@ (80147f4 <xTaskIncrementTick+0x150>)
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	60fb      	str	r3, [r7, #12]
 80146f4:	4b40      	ldr	r3, [pc, #256]	@ (80147f8 <xTaskIncrementTick+0x154>)
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	4a3e      	ldr	r2, [pc, #248]	@ (80147f4 <xTaskIncrementTick+0x150>)
 80146fa:	6013      	str	r3, [r2, #0]
 80146fc:	4a3e      	ldr	r2, [pc, #248]	@ (80147f8 <xTaskIncrementTick+0x154>)
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	6013      	str	r3, [r2, #0]
 8014702:	4b3e      	ldr	r3, [pc, #248]	@ (80147fc <xTaskIncrementTick+0x158>)
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	3301      	adds	r3, #1
 8014708:	4a3c      	ldr	r2, [pc, #240]	@ (80147fc <xTaskIncrementTick+0x158>)
 801470a:	6013      	str	r3, [r2, #0]
 801470c:	f000 fb84 	bl	8014e18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014710:	4b3b      	ldr	r3, [pc, #236]	@ (8014800 <xTaskIncrementTick+0x15c>)
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	693a      	ldr	r2, [r7, #16]
 8014716:	429a      	cmp	r2, r3
 8014718:	d349      	bcc.n	80147ae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801471a:	4b36      	ldr	r3, [pc, #216]	@ (80147f4 <xTaskIncrementTick+0x150>)
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d104      	bne.n	801472e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014724:	4b36      	ldr	r3, [pc, #216]	@ (8014800 <xTaskIncrementTick+0x15c>)
 8014726:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801472a:	601a      	str	r2, [r3, #0]
					break;
 801472c:	e03f      	b.n	80147ae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801472e:	4b31      	ldr	r3, [pc, #196]	@ (80147f4 <xTaskIncrementTick+0x150>)
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	68db      	ldr	r3, [r3, #12]
 8014734:	68db      	ldr	r3, [r3, #12]
 8014736:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014738:	68bb      	ldr	r3, [r7, #8]
 801473a:	685b      	ldr	r3, [r3, #4]
 801473c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801473e:	693a      	ldr	r2, [r7, #16]
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	429a      	cmp	r2, r3
 8014744:	d203      	bcs.n	801474e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014746:	4a2e      	ldr	r2, [pc, #184]	@ (8014800 <xTaskIncrementTick+0x15c>)
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801474c:	e02f      	b.n	80147ae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	3304      	adds	r3, #4
 8014752:	4618      	mov	r0, r3
 8014754:	f7fe fc1e 	bl	8012f94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014758:	68bb      	ldr	r3, [r7, #8]
 801475a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801475c:	2b00      	cmp	r3, #0
 801475e:	d004      	beq.n	801476a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014760:	68bb      	ldr	r3, [r7, #8]
 8014762:	3318      	adds	r3, #24
 8014764:	4618      	mov	r0, r3
 8014766:	f7fe fc15 	bl	8012f94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801476a:	68bb      	ldr	r3, [r7, #8]
 801476c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801476e:	4b25      	ldr	r3, [pc, #148]	@ (8014804 <xTaskIncrementTick+0x160>)
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	429a      	cmp	r2, r3
 8014774:	d903      	bls.n	801477e <xTaskIncrementTick+0xda>
 8014776:	68bb      	ldr	r3, [r7, #8]
 8014778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801477a:	4a22      	ldr	r2, [pc, #136]	@ (8014804 <xTaskIncrementTick+0x160>)
 801477c:	6013      	str	r3, [r2, #0]
 801477e:	68bb      	ldr	r3, [r7, #8]
 8014780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014782:	4613      	mov	r3, r2
 8014784:	009b      	lsls	r3, r3, #2
 8014786:	4413      	add	r3, r2
 8014788:	009b      	lsls	r3, r3, #2
 801478a:	4a1f      	ldr	r2, [pc, #124]	@ (8014808 <xTaskIncrementTick+0x164>)
 801478c:	441a      	add	r2, r3
 801478e:	68bb      	ldr	r3, [r7, #8]
 8014790:	3304      	adds	r3, #4
 8014792:	4619      	mov	r1, r3
 8014794:	4610      	mov	r0, r2
 8014796:	f7fe fba0 	bl	8012eda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801479a:	68bb      	ldr	r3, [r7, #8]
 801479c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801479e:	4b1b      	ldr	r3, [pc, #108]	@ (801480c <xTaskIncrementTick+0x168>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147a4:	429a      	cmp	r2, r3
 80147a6:	d3b8      	bcc.n	801471a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80147a8:	2301      	movs	r3, #1
 80147aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80147ac:	e7b5      	b.n	801471a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80147ae:	4b17      	ldr	r3, [pc, #92]	@ (801480c <xTaskIncrementTick+0x168>)
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147b4:	4914      	ldr	r1, [pc, #80]	@ (8014808 <xTaskIncrementTick+0x164>)
 80147b6:	4613      	mov	r3, r2
 80147b8:	009b      	lsls	r3, r3, #2
 80147ba:	4413      	add	r3, r2
 80147bc:	009b      	lsls	r3, r3, #2
 80147be:	440b      	add	r3, r1
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	2b01      	cmp	r3, #1
 80147c4:	d901      	bls.n	80147ca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80147c6:	2301      	movs	r3, #1
 80147c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80147ca:	4b11      	ldr	r3, [pc, #68]	@ (8014810 <xTaskIncrementTick+0x16c>)
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d007      	beq.n	80147e2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80147d2:	2301      	movs	r3, #1
 80147d4:	617b      	str	r3, [r7, #20]
 80147d6:	e004      	b.n	80147e2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80147d8:	4b0e      	ldr	r3, [pc, #56]	@ (8014814 <xTaskIncrementTick+0x170>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	3301      	adds	r3, #1
 80147de:	4a0d      	ldr	r2, [pc, #52]	@ (8014814 <xTaskIncrementTick+0x170>)
 80147e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80147e2:	697b      	ldr	r3, [r7, #20]
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	3718      	adds	r7, #24
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}
 80147ec:	24001734 	.word	0x24001734
 80147f0:	24001710 	.word	0x24001710
 80147f4:	240016c4 	.word	0x240016c4
 80147f8:	240016c8 	.word	0x240016c8
 80147fc:	24001724 	.word	0x24001724
 8014800:	2400172c 	.word	0x2400172c
 8014804:	24001714 	.word	0x24001714
 8014808:	2400123c 	.word	0x2400123c
 801480c:	24001238 	.word	0x24001238
 8014810:	24001720 	.word	0x24001720
 8014814:	2400171c 	.word	0x2400171c

08014818 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014818:	b480      	push	{r7}
 801481a:	b085      	sub	sp, #20
 801481c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801481e:	4b2b      	ldr	r3, [pc, #172]	@ (80148cc <vTaskSwitchContext+0xb4>)
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d003      	beq.n	801482e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014826:	4b2a      	ldr	r3, [pc, #168]	@ (80148d0 <vTaskSwitchContext+0xb8>)
 8014828:	2201      	movs	r2, #1
 801482a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801482c:	e047      	b.n	80148be <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 801482e:	4b28      	ldr	r3, [pc, #160]	@ (80148d0 <vTaskSwitchContext+0xb8>)
 8014830:	2200      	movs	r2, #0
 8014832:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014834:	4b27      	ldr	r3, [pc, #156]	@ (80148d4 <vTaskSwitchContext+0xbc>)
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	60fb      	str	r3, [r7, #12]
 801483a:	e011      	b.n	8014860 <vTaskSwitchContext+0x48>
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d10b      	bne.n	801485a <vTaskSwitchContext+0x42>
	__asm volatile
 8014842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014846:	f383 8811 	msr	BASEPRI, r3
 801484a:	f3bf 8f6f 	isb	sy
 801484e:	f3bf 8f4f 	dsb	sy
 8014852:	607b      	str	r3, [r7, #4]
}
 8014854:	bf00      	nop
 8014856:	bf00      	nop
 8014858:	e7fd      	b.n	8014856 <vTaskSwitchContext+0x3e>
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	3b01      	subs	r3, #1
 801485e:	60fb      	str	r3, [r7, #12]
 8014860:	491d      	ldr	r1, [pc, #116]	@ (80148d8 <vTaskSwitchContext+0xc0>)
 8014862:	68fa      	ldr	r2, [r7, #12]
 8014864:	4613      	mov	r3, r2
 8014866:	009b      	lsls	r3, r3, #2
 8014868:	4413      	add	r3, r2
 801486a:	009b      	lsls	r3, r3, #2
 801486c:	440b      	add	r3, r1
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d0e3      	beq.n	801483c <vTaskSwitchContext+0x24>
 8014874:	68fa      	ldr	r2, [r7, #12]
 8014876:	4613      	mov	r3, r2
 8014878:	009b      	lsls	r3, r3, #2
 801487a:	4413      	add	r3, r2
 801487c:	009b      	lsls	r3, r3, #2
 801487e:	4a16      	ldr	r2, [pc, #88]	@ (80148d8 <vTaskSwitchContext+0xc0>)
 8014880:	4413      	add	r3, r2
 8014882:	60bb      	str	r3, [r7, #8]
 8014884:	68bb      	ldr	r3, [r7, #8]
 8014886:	685b      	ldr	r3, [r3, #4]
 8014888:	685a      	ldr	r2, [r3, #4]
 801488a:	68bb      	ldr	r3, [r7, #8]
 801488c:	605a      	str	r2, [r3, #4]
 801488e:	68bb      	ldr	r3, [r7, #8]
 8014890:	685a      	ldr	r2, [r3, #4]
 8014892:	68bb      	ldr	r3, [r7, #8]
 8014894:	3308      	adds	r3, #8
 8014896:	429a      	cmp	r2, r3
 8014898:	d104      	bne.n	80148a4 <vTaskSwitchContext+0x8c>
 801489a:	68bb      	ldr	r3, [r7, #8]
 801489c:	685b      	ldr	r3, [r3, #4]
 801489e:	685a      	ldr	r2, [r3, #4]
 80148a0:	68bb      	ldr	r3, [r7, #8]
 80148a2:	605a      	str	r2, [r3, #4]
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	685b      	ldr	r3, [r3, #4]
 80148a8:	68db      	ldr	r3, [r3, #12]
 80148aa:	4a0c      	ldr	r2, [pc, #48]	@ (80148dc <vTaskSwitchContext+0xc4>)
 80148ac:	6013      	str	r3, [r2, #0]
 80148ae:	4a09      	ldr	r2, [pc, #36]	@ (80148d4 <vTaskSwitchContext+0xbc>)
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80148b4:	4b09      	ldr	r3, [pc, #36]	@ (80148dc <vTaskSwitchContext+0xc4>)
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	3354      	adds	r3, #84	@ 0x54
 80148ba:	4a09      	ldr	r2, [pc, #36]	@ (80148e0 <vTaskSwitchContext+0xc8>)
 80148bc:	6013      	str	r3, [r2, #0]
}
 80148be:	bf00      	nop
 80148c0:	3714      	adds	r7, #20
 80148c2:	46bd      	mov	sp, r7
 80148c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c8:	4770      	bx	lr
 80148ca:	bf00      	nop
 80148cc:	24001734 	.word	0x24001734
 80148d0:	24001720 	.word	0x24001720
 80148d4:	24001714 	.word	0x24001714
 80148d8:	2400123c 	.word	0x2400123c
 80148dc:	24001238 	.word	0x24001238
 80148e0:	24000020 	.word	0x24000020

080148e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b084      	sub	sp, #16
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
 80148ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d10b      	bne.n	801490c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80148f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148f8:	f383 8811 	msr	BASEPRI, r3
 80148fc:	f3bf 8f6f 	isb	sy
 8014900:	f3bf 8f4f 	dsb	sy
 8014904:	60fb      	str	r3, [r7, #12]
}
 8014906:	bf00      	nop
 8014908:	bf00      	nop
 801490a:	e7fd      	b.n	8014908 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801490c:	4b07      	ldr	r3, [pc, #28]	@ (801492c <vTaskPlaceOnEventList+0x48>)
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	3318      	adds	r3, #24
 8014912:	4619      	mov	r1, r3
 8014914:	6878      	ldr	r0, [r7, #4]
 8014916:	f7fe fb04 	bl	8012f22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801491a:	2101      	movs	r1, #1
 801491c:	6838      	ldr	r0, [r7, #0]
 801491e:	f000 fe45 	bl	80155ac <prvAddCurrentTaskToDelayedList>
}
 8014922:	bf00      	nop
 8014924:	3710      	adds	r7, #16
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}
 801492a:	bf00      	nop
 801492c:	24001238 	.word	0x24001238

08014930 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b086      	sub	sp, #24
 8014934:	af00      	add	r7, sp, #0
 8014936:	60f8      	str	r0, [r7, #12]
 8014938:	60b9      	str	r1, [r7, #8]
 801493a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d10b      	bne.n	801495a <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8014942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014946:	f383 8811 	msr	BASEPRI, r3
 801494a:	f3bf 8f6f 	isb	sy
 801494e:	f3bf 8f4f 	dsb	sy
 8014952:	617b      	str	r3, [r7, #20]
}
 8014954:	bf00      	nop
 8014956:	bf00      	nop
 8014958:	e7fd      	b.n	8014956 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801495a:	4b12      	ldr	r3, [pc, #72]	@ (80149a4 <vTaskPlaceOnUnorderedEventList+0x74>)
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d10b      	bne.n	801497a <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8014962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014966:	f383 8811 	msr	BASEPRI, r3
 801496a:	f3bf 8f6f 	isb	sy
 801496e:	f3bf 8f4f 	dsb	sy
 8014972:	613b      	str	r3, [r7, #16]
}
 8014974:	bf00      	nop
 8014976:	bf00      	nop
 8014978:	e7fd      	b.n	8014976 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801497a:	4b0b      	ldr	r3, [pc, #44]	@ (80149a8 <vTaskPlaceOnUnorderedEventList+0x78>)
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	68ba      	ldr	r2, [r7, #8]
 8014980:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8014984:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014986:	4b08      	ldr	r3, [pc, #32]	@ (80149a8 <vTaskPlaceOnUnorderedEventList+0x78>)
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	3318      	adds	r3, #24
 801498c:	4619      	mov	r1, r3
 801498e:	68f8      	ldr	r0, [r7, #12]
 8014990:	f7fe faa3 	bl	8012eda <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014994:	2101      	movs	r1, #1
 8014996:	6878      	ldr	r0, [r7, #4]
 8014998:	f000 fe08 	bl	80155ac <prvAddCurrentTaskToDelayedList>
}
 801499c:	bf00      	nop
 801499e:	3718      	adds	r7, #24
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd80      	pop	{r7, pc}
 80149a4:	24001734 	.word	0x24001734
 80149a8:	24001238 	.word	0x24001238

080149ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b086      	sub	sp, #24
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	60f8      	str	r0, [r7, #12]
 80149b4:	60b9      	str	r1, [r7, #8]
 80149b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d10b      	bne.n	80149d6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80149be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149c2:	f383 8811 	msr	BASEPRI, r3
 80149c6:	f3bf 8f6f 	isb	sy
 80149ca:	f3bf 8f4f 	dsb	sy
 80149ce:	617b      	str	r3, [r7, #20]
}
 80149d0:	bf00      	nop
 80149d2:	bf00      	nop
 80149d4:	e7fd      	b.n	80149d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80149d6:	4b0a      	ldr	r3, [pc, #40]	@ (8014a00 <vTaskPlaceOnEventListRestricted+0x54>)
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	3318      	adds	r3, #24
 80149dc:	4619      	mov	r1, r3
 80149de:	68f8      	ldr	r0, [r7, #12]
 80149e0:	f7fe fa7b 	bl	8012eda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d002      	beq.n	80149f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80149ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80149ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80149f0:	6879      	ldr	r1, [r7, #4]
 80149f2:	68b8      	ldr	r0, [r7, #8]
 80149f4:	f000 fdda 	bl	80155ac <prvAddCurrentTaskToDelayedList>
	}
 80149f8:	bf00      	nop
 80149fa:	3718      	adds	r7, #24
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd80      	pop	{r7, pc}
 8014a00:	24001238 	.word	0x24001238

08014a04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b086      	sub	sp, #24
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	68db      	ldr	r3, [r3, #12]
 8014a10:	68db      	ldr	r3, [r3, #12]
 8014a12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014a14:	693b      	ldr	r3, [r7, #16]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d10b      	bne.n	8014a32 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8014a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a1e:	f383 8811 	msr	BASEPRI, r3
 8014a22:	f3bf 8f6f 	isb	sy
 8014a26:	f3bf 8f4f 	dsb	sy
 8014a2a:	60fb      	str	r3, [r7, #12]
}
 8014a2c:	bf00      	nop
 8014a2e:	bf00      	nop
 8014a30:	e7fd      	b.n	8014a2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014a32:	693b      	ldr	r3, [r7, #16]
 8014a34:	3318      	adds	r3, #24
 8014a36:	4618      	mov	r0, r3
 8014a38:	f7fe faac 	bl	8012f94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8014ab4 <xTaskRemoveFromEventList+0xb0>)
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d11d      	bne.n	8014a80 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014a44:	693b      	ldr	r3, [r7, #16]
 8014a46:	3304      	adds	r3, #4
 8014a48:	4618      	mov	r0, r3
 8014a4a:	f7fe faa3 	bl	8012f94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014a4e:	693b      	ldr	r3, [r7, #16]
 8014a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a52:	4b19      	ldr	r3, [pc, #100]	@ (8014ab8 <xTaskRemoveFromEventList+0xb4>)
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	429a      	cmp	r2, r3
 8014a58:	d903      	bls.n	8014a62 <xTaskRemoveFromEventList+0x5e>
 8014a5a:	693b      	ldr	r3, [r7, #16]
 8014a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a5e:	4a16      	ldr	r2, [pc, #88]	@ (8014ab8 <xTaskRemoveFromEventList+0xb4>)
 8014a60:	6013      	str	r3, [r2, #0]
 8014a62:	693b      	ldr	r3, [r7, #16]
 8014a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a66:	4613      	mov	r3, r2
 8014a68:	009b      	lsls	r3, r3, #2
 8014a6a:	4413      	add	r3, r2
 8014a6c:	009b      	lsls	r3, r3, #2
 8014a6e:	4a13      	ldr	r2, [pc, #76]	@ (8014abc <xTaskRemoveFromEventList+0xb8>)
 8014a70:	441a      	add	r2, r3
 8014a72:	693b      	ldr	r3, [r7, #16]
 8014a74:	3304      	adds	r3, #4
 8014a76:	4619      	mov	r1, r3
 8014a78:	4610      	mov	r0, r2
 8014a7a:	f7fe fa2e 	bl	8012eda <vListInsertEnd>
 8014a7e:	e005      	b.n	8014a8c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014a80:	693b      	ldr	r3, [r7, #16]
 8014a82:	3318      	adds	r3, #24
 8014a84:	4619      	mov	r1, r3
 8014a86:	480e      	ldr	r0, [pc, #56]	@ (8014ac0 <xTaskRemoveFromEventList+0xbc>)
 8014a88:	f7fe fa27 	bl	8012eda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014a8c:	693b      	ldr	r3, [r7, #16]
 8014a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a90:	4b0c      	ldr	r3, [pc, #48]	@ (8014ac4 <xTaskRemoveFromEventList+0xc0>)
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d905      	bls.n	8014aa6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014a9a:	2301      	movs	r3, #1
 8014a9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8014ac8 <xTaskRemoveFromEventList+0xc4>)
 8014aa0:	2201      	movs	r2, #1
 8014aa2:	601a      	str	r2, [r3, #0]
 8014aa4:	e001      	b.n	8014aaa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014aaa:	697b      	ldr	r3, [r7, #20]
}
 8014aac:	4618      	mov	r0, r3
 8014aae:	3718      	adds	r7, #24
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}
 8014ab4:	24001734 	.word	0x24001734
 8014ab8:	24001714 	.word	0x24001714
 8014abc:	2400123c 	.word	0x2400123c
 8014ac0:	240016cc 	.word	0x240016cc
 8014ac4:	24001238 	.word	0x24001238
 8014ac8:	24001720 	.word	0x24001720

08014acc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b086      	sub	sp, #24
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
 8014ad4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8014b80 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d10b      	bne.n	8014af6 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8014ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ae2:	f383 8811 	msr	BASEPRI, r3
 8014ae6:	f3bf 8f6f 	isb	sy
 8014aea:	f3bf 8f4f 	dsb	sy
 8014aee:	613b      	str	r3, [r7, #16]
}
 8014af0:	bf00      	nop
 8014af2:	bf00      	nop
 8014af4:	e7fd      	b.n	8014af2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014af6:	683b      	ldr	r3, [r7, #0]
 8014af8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	68db      	ldr	r3, [r3, #12]
 8014b04:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014b06:	697b      	ldr	r3, [r7, #20]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d10b      	bne.n	8014b24 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8014b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b10:	f383 8811 	msr	BASEPRI, r3
 8014b14:	f3bf 8f6f 	isb	sy
 8014b18:	f3bf 8f4f 	dsb	sy
 8014b1c:	60fb      	str	r3, [r7, #12]
}
 8014b1e:	bf00      	nop
 8014b20:	bf00      	nop
 8014b22:	e7fd      	b.n	8014b20 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8014b24:	6878      	ldr	r0, [r7, #4]
 8014b26:	f7fe fa35 	bl	8012f94 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014b2a:	697b      	ldr	r3, [r7, #20]
 8014b2c:	3304      	adds	r3, #4
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f7fe fa30 	bl	8012f94 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014b34:	697b      	ldr	r3, [r7, #20]
 8014b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b38:	4b12      	ldr	r3, [pc, #72]	@ (8014b84 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	429a      	cmp	r2, r3
 8014b3e:	d903      	bls.n	8014b48 <vTaskRemoveFromUnorderedEventList+0x7c>
 8014b40:	697b      	ldr	r3, [r7, #20]
 8014b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b44:	4a0f      	ldr	r2, [pc, #60]	@ (8014b84 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014b46:	6013      	str	r3, [r2, #0]
 8014b48:	697b      	ldr	r3, [r7, #20]
 8014b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b4c:	4613      	mov	r3, r2
 8014b4e:	009b      	lsls	r3, r3, #2
 8014b50:	4413      	add	r3, r2
 8014b52:	009b      	lsls	r3, r3, #2
 8014b54:	4a0c      	ldr	r2, [pc, #48]	@ (8014b88 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014b56:	441a      	add	r2, r3
 8014b58:	697b      	ldr	r3, [r7, #20]
 8014b5a:	3304      	adds	r3, #4
 8014b5c:	4619      	mov	r1, r3
 8014b5e:	4610      	mov	r0, r2
 8014b60:	f7fe f9bb 	bl	8012eda <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014b64:	697b      	ldr	r3, [r7, #20]
 8014b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b68:	4b08      	ldr	r3, [pc, #32]	@ (8014b8c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b6e:	429a      	cmp	r2, r3
 8014b70:	d902      	bls.n	8014b78 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014b72:	4b07      	ldr	r3, [pc, #28]	@ (8014b90 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8014b74:	2201      	movs	r2, #1
 8014b76:	601a      	str	r2, [r3, #0]
	}
}
 8014b78:	bf00      	nop
 8014b7a:	3718      	adds	r7, #24
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	bd80      	pop	{r7, pc}
 8014b80:	24001734 	.word	0x24001734
 8014b84:	24001714 	.word	0x24001714
 8014b88:	2400123c 	.word	0x2400123c
 8014b8c:	24001238 	.word	0x24001238
 8014b90:	24001720 	.word	0x24001720

08014b94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014b94:	b480      	push	{r7}
 8014b96:	b083      	sub	sp, #12
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014b9c:	4b06      	ldr	r3, [pc, #24]	@ (8014bb8 <vTaskInternalSetTimeOutState+0x24>)
 8014b9e:	681a      	ldr	r2, [r3, #0]
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014ba4:	4b05      	ldr	r3, [pc, #20]	@ (8014bbc <vTaskInternalSetTimeOutState+0x28>)
 8014ba6:	681a      	ldr	r2, [r3, #0]
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	605a      	str	r2, [r3, #4]
}
 8014bac:	bf00      	nop
 8014bae:	370c      	adds	r7, #12
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb6:	4770      	bx	lr
 8014bb8:	24001724 	.word	0x24001724
 8014bbc:	24001710 	.word	0x24001710

08014bc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b088      	sub	sp, #32
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
 8014bc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d10b      	bne.n	8014be8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8014bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bd4:	f383 8811 	msr	BASEPRI, r3
 8014bd8:	f3bf 8f6f 	isb	sy
 8014bdc:	f3bf 8f4f 	dsb	sy
 8014be0:	613b      	str	r3, [r7, #16]
}
 8014be2:	bf00      	nop
 8014be4:	bf00      	nop
 8014be6:	e7fd      	b.n	8014be4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014be8:	683b      	ldr	r3, [r7, #0]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d10b      	bne.n	8014c06 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8014bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bf2:	f383 8811 	msr	BASEPRI, r3
 8014bf6:	f3bf 8f6f 	isb	sy
 8014bfa:	f3bf 8f4f 	dsb	sy
 8014bfe:	60fb      	str	r3, [r7, #12]
}
 8014c00:	bf00      	nop
 8014c02:	bf00      	nop
 8014c04:	e7fd      	b.n	8014c02 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8014c06:	f001 fa2f 	bl	8016068 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8014c80 <xTaskCheckForTimeOut+0xc0>)
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	685b      	ldr	r3, [r3, #4]
 8014c14:	69ba      	ldr	r2, [r7, #24]
 8014c16:	1ad3      	subs	r3, r2, r3
 8014c18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014c1a:	683b      	ldr	r3, [r7, #0]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014c22:	d102      	bne.n	8014c2a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014c24:	2300      	movs	r3, #0
 8014c26:	61fb      	str	r3, [r7, #28]
 8014c28:	e023      	b.n	8014c72 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	681a      	ldr	r2, [r3, #0]
 8014c2e:	4b15      	ldr	r3, [pc, #84]	@ (8014c84 <xTaskCheckForTimeOut+0xc4>)
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	429a      	cmp	r2, r3
 8014c34:	d007      	beq.n	8014c46 <xTaskCheckForTimeOut+0x86>
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	685b      	ldr	r3, [r3, #4]
 8014c3a:	69ba      	ldr	r2, [r7, #24]
 8014c3c:	429a      	cmp	r2, r3
 8014c3e:	d302      	bcc.n	8014c46 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014c40:	2301      	movs	r3, #1
 8014c42:	61fb      	str	r3, [r7, #28]
 8014c44:	e015      	b.n	8014c72 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014c46:	683b      	ldr	r3, [r7, #0]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	697a      	ldr	r2, [r7, #20]
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	d20b      	bcs.n	8014c68 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014c50:	683b      	ldr	r3, [r7, #0]
 8014c52:	681a      	ldr	r2, [r3, #0]
 8014c54:	697b      	ldr	r3, [r7, #20]
 8014c56:	1ad2      	subs	r2, r2, r3
 8014c58:	683b      	ldr	r3, [r7, #0]
 8014c5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014c5c:	6878      	ldr	r0, [r7, #4]
 8014c5e:	f7ff ff99 	bl	8014b94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014c62:	2300      	movs	r3, #0
 8014c64:	61fb      	str	r3, [r7, #28]
 8014c66:	e004      	b.n	8014c72 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014c68:	683b      	ldr	r3, [r7, #0]
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014c6e:	2301      	movs	r3, #1
 8014c70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014c72:	f001 fa2b 	bl	80160cc <vPortExitCritical>

	return xReturn;
 8014c76:	69fb      	ldr	r3, [r7, #28]
}
 8014c78:	4618      	mov	r0, r3
 8014c7a:	3720      	adds	r7, #32
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	bd80      	pop	{r7, pc}
 8014c80:	24001710 	.word	0x24001710
 8014c84:	24001724 	.word	0x24001724

08014c88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014c88:	b480      	push	{r7}
 8014c8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014c8c:	4b03      	ldr	r3, [pc, #12]	@ (8014c9c <vTaskMissedYield+0x14>)
 8014c8e:	2201      	movs	r2, #1
 8014c90:	601a      	str	r2, [r3, #0]
}
 8014c92:	bf00      	nop
 8014c94:	46bd      	mov	sp, r7
 8014c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9a:	4770      	bx	lr
 8014c9c:	24001720 	.word	0x24001720

08014ca0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b082      	sub	sp, #8
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014ca8:	f000 f852 	bl	8014d50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014cac:	4b06      	ldr	r3, [pc, #24]	@ (8014cc8 <prvIdleTask+0x28>)
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	2b01      	cmp	r3, #1
 8014cb2:	d9f9      	bls.n	8014ca8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014cb4:	4b05      	ldr	r3, [pc, #20]	@ (8014ccc <prvIdleTask+0x2c>)
 8014cb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014cba:	601a      	str	r2, [r3, #0]
 8014cbc:	f3bf 8f4f 	dsb	sy
 8014cc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014cc4:	e7f0      	b.n	8014ca8 <prvIdleTask+0x8>
 8014cc6:	bf00      	nop
 8014cc8:	2400123c 	.word	0x2400123c
 8014ccc:	e000ed04 	.word	0xe000ed04

08014cd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b082      	sub	sp, #8
 8014cd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	607b      	str	r3, [r7, #4]
 8014cda:	e00c      	b.n	8014cf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014cdc:	687a      	ldr	r2, [r7, #4]
 8014cde:	4613      	mov	r3, r2
 8014ce0:	009b      	lsls	r3, r3, #2
 8014ce2:	4413      	add	r3, r2
 8014ce4:	009b      	lsls	r3, r3, #2
 8014ce6:	4a12      	ldr	r2, [pc, #72]	@ (8014d30 <prvInitialiseTaskLists+0x60>)
 8014ce8:	4413      	add	r3, r2
 8014cea:	4618      	mov	r0, r3
 8014cec:	f7fe f8c8 	bl	8012e80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	3301      	adds	r3, #1
 8014cf4:	607b      	str	r3, [r7, #4]
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	2b37      	cmp	r3, #55	@ 0x37
 8014cfa:	d9ef      	bls.n	8014cdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014cfc:	480d      	ldr	r0, [pc, #52]	@ (8014d34 <prvInitialiseTaskLists+0x64>)
 8014cfe:	f7fe f8bf 	bl	8012e80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014d02:	480d      	ldr	r0, [pc, #52]	@ (8014d38 <prvInitialiseTaskLists+0x68>)
 8014d04:	f7fe f8bc 	bl	8012e80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014d08:	480c      	ldr	r0, [pc, #48]	@ (8014d3c <prvInitialiseTaskLists+0x6c>)
 8014d0a:	f7fe f8b9 	bl	8012e80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014d0e:	480c      	ldr	r0, [pc, #48]	@ (8014d40 <prvInitialiseTaskLists+0x70>)
 8014d10:	f7fe f8b6 	bl	8012e80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014d14:	480b      	ldr	r0, [pc, #44]	@ (8014d44 <prvInitialiseTaskLists+0x74>)
 8014d16:	f7fe f8b3 	bl	8012e80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8014d48 <prvInitialiseTaskLists+0x78>)
 8014d1c:	4a05      	ldr	r2, [pc, #20]	@ (8014d34 <prvInitialiseTaskLists+0x64>)
 8014d1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014d20:	4b0a      	ldr	r3, [pc, #40]	@ (8014d4c <prvInitialiseTaskLists+0x7c>)
 8014d22:	4a05      	ldr	r2, [pc, #20]	@ (8014d38 <prvInitialiseTaskLists+0x68>)
 8014d24:	601a      	str	r2, [r3, #0]
}
 8014d26:	bf00      	nop
 8014d28:	3708      	adds	r7, #8
 8014d2a:	46bd      	mov	sp, r7
 8014d2c:	bd80      	pop	{r7, pc}
 8014d2e:	bf00      	nop
 8014d30:	2400123c 	.word	0x2400123c
 8014d34:	2400169c 	.word	0x2400169c
 8014d38:	240016b0 	.word	0x240016b0
 8014d3c:	240016cc 	.word	0x240016cc
 8014d40:	240016e0 	.word	0x240016e0
 8014d44:	240016f8 	.word	0x240016f8
 8014d48:	240016c4 	.word	0x240016c4
 8014d4c:	240016c8 	.word	0x240016c8

08014d50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b082      	sub	sp, #8
 8014d54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014d56:	e019      	b.n	8014d8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014d58:	f001 f986 	bl	8016068 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d5c:	4b10      	ldr	r3, [pc, #64]	@ (8014da0 <prvCheckTasksWaitingTermination+0x50>)
 8014d5e:	68db      	ldr	r3, [r3, #12]
 8014d60:	68db      	ldr	r3, [r3, #12]
 8014d62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	3304      	adds	r3, #4
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f7fe f913 	bl	8012f94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8014da4 <prvCheckTasksWaitingTermination+0x54>)
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	3b01      	subs	r3, #1
 8014d74:	4a0b      	ldr	r2, [pc, #44]	@ (8014da4 <prvCheckTasksWaitingTermination+0x54>)
 8014d76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014d78:	4b0b      	ldr	r3, [pc, #44]	@ (8014da8 <prvCheckTasksWaitingTermination+0x58>)
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	3b01      	subs	r3, #1
 8014d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8014da8 <prvCheckTasksWaitingTermination+0x58>)
 8014d80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014d82:	f001 f9a3 	bl	80160cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014d86:	6878      	ldr	r0, [r7, #4]
 8014d88:	f000 f810 	bl	8014dac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014d8c:	4b06      	ldr	r3, [pc, #24]	@ (8014da8 <prvCheckTasksWaitingTermination+0x58>)
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d1e1      	bne.n	8014d58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014d94:	bf00      	nop
 8014d96:	bf00      	nop
 8014d98:	3708      	adds	r7, #8
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	bd80      	pop	{r7, pc}
 8014d9e:	bf00      	nop
 8014da0:	240016e0 	.word	0x240016e0
 8014da4:	2400170c 	.word	0x2400170c
 8014da8:	240016f4 	.word	0x240016f4

08014dac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b084      	sub	sp, #16
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	3354      	adds	r3, #84	@ 0x54
 8014db8:	4618      	mov	r0, r3
 8014dba:	f002 f893 	bl	8016ee4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d108      	bne.n	8014dda <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014dcc:	4618      	mov	r0, r3
 8014dce:	f001 fb3b 	bl	8016448 <vPortFree>
				vPortFree( pxTCB );
 8014dd2:	6878      	ldr	r0, [r7, #4]
 8014dd4:	f001 fb38 	bl	8016448 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014dd8:	e019      	b.n	8014e0e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014de0:	2b01      	cmp	r3, #1
 8014de2:	d103      	bne.n	8014dec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014de4:	6878      	ldr	r0, [r7, #4]
 8014de6:	f001 fb2f 	bl	8016448 <vPortFree>
	}
 8014dea:	e010      	b.n	8014e0e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014df2:	2b02      	cmp	r3, #2
 8014df4:	d00b      	beq.n	8014e0e <prvDeleteTCB+0x62>
	__asm volatile
 8014df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014dfa:	f383 8811 	msr	BASEPRI, r3
 8014dfe:	f3bf 8f6f 	isb	sy
 8014e02:	f3bf 8f4f 	dsb	sy
 8014e06:	60fb      	str	r3, [r7, #12]
}
 8014e08:	bf00      	nop
 8014e0a:	bf00      	nop
 8014e0c:	e7fd      	b.n	8014e0a <prvDeleteTCB+0x5e>
	}
 8014e0e:	bf00      	nop
 8014e10:	3710      	adds	r7, #16
 8014e12:	46bd      	mov	sp, r7
 8014e14:	bd80      	pop	{r7, pc}
	...

08014e18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014e18:	b480      	push	{r7}
 8014e1a:	b083      	sub	sp, #12
 8014e1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8014e50 <prvResetNextTaskUnblockTime+0x38>)
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d104      	bne.n	8014e32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014e28:	4b0a      	ldr	r3, [pc, #40]	@ (8014e54 <prvResetNextTaskUnblockTime+0x3c>)
 8014e2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014e2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014e30:	e008      	b.n	8014e44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e32:	4b07      	ldr	r3, [pc, #28]	@ (8014e50 <prvResetNextTaskUnblockTime+0x38>)
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	68db      	ldr	r3, [r3, #12]
 8014e38:	68db      	ldr	r3, [r3, #12]
 8014e3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	685b      	ldr	r3, [r3, #4]
 8014e40:	4a04      	ldr	r2, [pc, #16]	@ (8014e54 <prvResetNextTaskUnblockTime+0x3c>)
 8014e42:	6013      	str	r3, [r2, #0]
}
 8014e44:	bf00      	nop
 8014e46:	370c      	adds	r7, #12
 8014e48:	46bd      	mov	sp, r7
 8014e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e4e:	4770      	bx	lr
 8014e50:	240016c4 	.word	0x240016c4
 8014e54:	2400172c 	.word	0x2400172c

08014e58 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8014e58:	b480      	push	{r7}
 8014e5a:	b083      	sub	sp, #12
 8014e5c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8014e5e:	4b05      	ldr	r3, [pc, #20]	@ (8014e74 <xTaskGetCurrentTaskHandle+0x1c>)
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	607b      	str	r3, [r7, #4]

		return xReturn;
 8014e64:	687b      	ldr	r3, [r7, #4]
	}
 8014e66:	4618      	mov	r0, r3
 8014e68:	370c      	adds	r7, #12
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e70:	4770      	bx	lr
 8014e72:	bf00      	nop
 8014e74:	24001238 	.word	0x24001238

08014e78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014e78:	b480      	push	{r7}
 8014e7a:	b083      	sub	sp, #12
 8014e7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8014eac <xTaskGetSchedulerState+0x34>)
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d102      	bne.n	8014e8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014e86:	2301      	movs	r3, #1
 8014e88:	607b      	str	r3, [r7, #4]
 8014e8a:	e008      	b.n	8014e9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014e8c:	4b08      	ldr	r3, [pc, #32]	@ (8014eb0 <xTaskGetSchedulerState+0x38>)
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d102      	bne.n	8014e9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014e94:	2302      	movs	r3, #2
 8014e96:	607b      	str	r3, [r7, #4]
 8014e98:	e001      	b.n	8014e9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014e9e:	687b      	ldr	r3, [r7, #4]
	}
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	370c      	adds	r7, #12
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eaa:	4770      	bx	lr
 8014eac:	24001718 	.word	0x24001718
 8014eb0:	24001734 	.word	0x24001734

08014eb4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b084      	sub	sp, #16
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d051      	beq.n	8014f6e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014eca:	68bb      	ldr	r3, [r7, #8]
 8014ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ece:	4b2a      	ldr	r3, [pc, #168]	@ (8014f78 <xTaskPriorityInherit+0xc4>)
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ed4:	429a      	cmp	r2, r3
 8014ed6:	d241      	bcs.n	8014f5c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014ed8:	68bb      	ldr	r3, [r7, #8]
 8014eda:	699b      	ldr	r3, [r3, #24]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	db06      	blt.n	8014eee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014ee0:	4b25      	ldr	r3, [pc, #148]	@ (8014f78 <xTaskPriorityInherit+0xc4>)
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ee6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014eea:	68bb      	ldr	r3, [r7, #8]
 8014eec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014eee:	68bb      	ldr	r3, [r7, #8]
 8014ef0:	6959      	ldr	r1, [r3, #20]
 8014ef2:	68bb      	ldr	r3, [r7, #8]
 8014ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ef6:	4613      	mov	r3, r2
 8014ef8:	009b      	lsls	r3, r3, #2
 8014efa:	4413      	add	r3, r2
 8014efc:	009b      	lsls	r3, r3, #2
 8014efe:	4a1f      	ldr	r2, [pc, #124]	@ (8014f7c <xTaskPriorityInherit+0xc8>)
 8014f00:	4413      	add	r3, r2
 8014f02:	4299      	cmp	r1, r3
 8014f04:	d122      	bne.n	8014f4c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014f06:	68bb      	ldr	r3, [r7, #8]
 8014f08:	3304      	adds	r3, #4
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	f7fe f842 	bl	8012f94 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014f10:	4b19      	ldr	r3, [pc, #100]	@ (8014f78 <xTaskPriorityInherit+0xc4>)
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014f1a:	68bb      	ldr	r3, [r7, #8]
 8014f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f1e:	4b18      	ldr	r3, [pc, #96]	@ (8014f80 <xTaskPriorityInherit+0xcc>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	429a      	cmp	r2, r3
 8014f24:	d903      	bls.n	8014f2e <xTaskPriorityInherit+0x7a>
 8014f26:	68bb      	ldr	r3, [r7, #8]
 8014f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f2a:	4a15      	ldr	r2, [pc, #84]	@ (8014f80 <xTaskPriorityInherit+0xcc>)
 8014f2c:	6013      	str	r3, [r2, #0]
 8014f2e:	68bb      	ldr	r3, [r7, #8]
 8014f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f32:	4613      	mov	r3, r2
 8014f34:	009b      	lsls	r3, r3, #2
 8014f36:	4413      	add	r3, r2
 8014f38:	009b      	lsls	r3, r3, #2
 8014f3a:	4a10      	ldr	r2, [pc, #64]	@ (8014f7c <xTaskPriorityInherit+0xc8>)
 8014f3c:	441a      	add	r2, r3
 8014f3e:	68bb      	ldr	r3, [r7, #8]
 8014f40:	3304      	adds	r3, #4
 8014f42:	4619      	mov	r1, r3
 8014f44:	4610      	mov	r0, r2
 8014f46:	f7fd ffc8 	bl	8012eda <vListInsertEnd>
 8014f4a:	e004      	b.n	8014f56 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8014f78 <xTaskPriorityInherit+0xc4>)
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f52:	68bb      	ldr	r3, [r7, #8]
 8014f54:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014f56:	2301      	movs	r3, #1
 8014f58:	60fb      	str	r3, [r7, #12]
 8014f5a:	e008      	b.n	8014f6e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014f5c:	68bb      	ldr	r3, [r7, #8]
 8014f5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014f60:	4b05      	ldr	r3, [pc, #20]	@ (8014f78 <xTaskPriorityInherit+0xc4>)
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f66:	429a      	cmp	r2, r3
 8014f68:	d201      	bcs.n	8014f6e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014f6a:	2301      	movs	r3, #1
 8014f6c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014f6e:	68fb      	ldr	r3, [r7, #12]
	}
 8014f70:	4618      	mov	r0, r3
 8014f72:	3710      	adds	r7, #16
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}
 8014f78:	24001238 	.word	0x24001238
 8014f7c:	2400123c 	.word	0x2400123c
 8014f80:	24001714 	.word	0x24001714

08014f84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b086      	sub	sp, #24
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014f90:	2300      	movs	r3, #0
 8014f92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d058      	beq.n	801504c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8015058 <xTaskPriorityDisinherit+0xd4>)
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	693a      	ldr	r2, [r7, #16]
 8014fa0:	429a      	cmp	r2, r3
 8014fa2:	d00b      	beq.n	8014fbc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8014fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fa8:	f383 8811 	msr	BASEPRI, r3
 8014fac:	f3bf 8f6f 	isb	sy
 8014fb0:	f3bf 8f4f 	dsb	sy
 8014fb4:	60fb      	str	r3, [r7, #12]
}
 8014fb6:	bf00      	nop
 8014fb8:	bf00      	nop
 8014fba:	e7fd      	b.n	8014fb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014fbc:	693b      	ldr	r3, [r7, #16]
 8014fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d10b      	bne.n	8014fdc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8014fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fc8:	f383 8811 	msr	BASEPRI, r3
 8014fcc:	f3bf 8f6f 	isb	sy
 8014fd0:	f3bf 8f4f 	dsb	sy
 8014fd4:	60bb      	str	r3, [r7, #8]
}
 8014fd6:	bf00      	nop
 8014fd8:	bf00      	nop
 8014fda:	e7fd      	b.n	8014fd8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8014fdc:	693b      	ldr	r3, [r7, #16]
 8014fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014fe0:	1e5a      	subs	r2, r3, #1
 8014fe2:	693b      	ldr	r3, [r7, #16]
 8014fe4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014fe6:	693b      	ldr	r3, [r7, #16]
 8014fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014fea:	693b      	ldr	r3, [r7, #16]
 8014fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014fee:	429a      	cmp	r2, r3
 8014ff0:	d02c      	beq.n	801504c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014ff2:	693b      	ldr	r3, [r7, #16]
 8014ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d128      	bne.n	801504c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014ffa:	693b      	ldr	r3, [r7, #16]
 8014ffc:	3304      	adds	r3, #4
 8014ffe:	4618      	mov	r0, r3
 8015000:	f7fd ffc8 	bl	8012f94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015004:	693b      	ldr	r3, [r7, #16]
 8015006:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015008:	693b      	ldr	r3, [r7, #16]
 801500a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801500c:	693b      	ldr	r3, [r7, #16]
 801500e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015010:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015014:	693b      	ldr	r3, [r7, #16]
 8015016:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015018:	693b      	ldr	r3, [r7, #16]
 801501a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801501c:	4b0f      	ldr	r3, [pc, #60]	@ (801505c <xTaskPriorityDisinherit+0xd8>)
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	429a      	cmp	r2, r3
 8015022:	d903      	bls.n	801502c <xTaskPriorityDisinherit+0xa8>
 8015024:	693b      	ldr	r3, [r7, #16]
 8015026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015028:	4a0c      	ldr	r2, [pc, #48]	@ (801505c <xTaskPriorityDisinherit+0xd8>)
 801502a:	6013      	str	r3, [r2, #0]
 801502c:	693b      	ldr	r3, [r7, #16]
 801502e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015030:	4613      	mov	r3, r2
 8015032:	009b      	lsls	r3, r3, #2
 8015034:	4413      	add	r3, r2
 8015036:	009b      	lsls	r3, r3, #2
 8015038:	4a09      	ldr	r2, [pc, #36]	@ (8015060 <xTaskPriorityDisinherit+0xdc>)
 801503a:	441a      	add	r2, r3
 801503c:	693b      	ldr	r3, [r7, #16]
 801503e:	3304      	adds	r3, #4
 8015040:	4619      	mov	r1, r3
 8015042:	4610      	mov	r0, r2
 8015044:	f7fd ff49 	bl	8012eda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015048:	2301      	movs	r3, #1
 801504a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801504c:	697b      	ldr	r3, [r7, #20]
	}
 801504e:	4618      	mov	r0, r3
 8015050:	3718      	adds	r7, #24
 8015052:	46bd      	mov	sp, r7
 8015054:	bd80      	pop	{r7, pc}
 8015056:	bf00      	nop
 8015058:	24001238 	.word	0x24001238
 801505c:	24001714 	.word	0x24001714
 8015060:	2400123c 	.word	0x2400123c

08015064 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015064:	b580      	push	{r7, lr}
 8015066:	b088      	sub	sp, #32
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
 801506c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015072:	2301      	movs	r3, #1
 8015074:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d06c      	beq.n	8015156 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801507c:	69bb      	ldr	r3, [r7, #24]
 801507e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015080:	2b00      	cmp	r3, #0
 8015082:	d10b      	bne.n	801509c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8015084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015088:	f383 8811 	msr	BASEPRI, r3
 801508c:	f3bf 8f6f 	isb	sy
 8015090:	f3bf 8f4f 	dsb	sy
 8015094:	60fb      	str	r3, [r7, #12]
}
 8015096:	bf00      	nop
 8015098:	bf00      	nop
 801509a:	e7fd      	b.n	8015098 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801509c:	69bb      	ldr	r3, [r7, #24]
 801509e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80150a0:	683a      	ldr	r2, [r7, #0]
 80150a2:	429a      	cmp	r2, r3
 80150a4:	d902      	bls.n	80150ac <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80150a6:	683b      	ldr	r3, [r7, #0]
 80150a8:	61fb      	str	r3, [r7, #28]
 80150aa:	e002      	b.n	80150b2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80150ac:	69bb      	ldr	r3, [r7, #24]
 80150ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80150b0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80150b2:	69bb      	ldr	r3, [r7, #24]
 80150b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150b6:	69fa      	ldr	r2, [r7, #28]
 80150b8:	429a      	cmp	r2, r3
 80150ba:	d04c      	beq.n	8015156 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80150bc:	69bb      	ldr	r3, [r7, #24]
 80150be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80150c0:	697a      	ldr	r2, [r7, #20]
 80150c2:	429a      	cmp	r2, r3
 80150c4:	d147      	bne.n	8015156 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80150c6:	4b26      	ldr	r3, [pc, #152]	@ (8015160 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	69ba      	ldr	r2, [r7, #24]
 80150cc:	429a      	cmp	r2, r3
 80150ce:	d10b      	bne.n	80150e8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80150d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150d4:	f383 8811 	msr	BASEPRI, r3
 80150d8:	f3bf 8f6f 	isb	sy
 80150dc:	f3bf 8f4f 	dsb	sy
 80150e0:	60bb      	str	r3, [r7, #8]
}
 80150e2:	bf00      	nop
 80150e4:	bf00      	nop
 80150e6:	e7fd      	b.n	80150e4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80150e8:	69bb      	ldr	r3, [r7, #24]
 80150ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80150ee:	69bb      	ldr	r3, [r7, #24]
 80150f0:	69fa      	ldr	r2, [r7, #28]
 80150f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80150f4:	69bb      	ldr	r3, [r7, #24]
 80150f6:	699b      	ldr	r3, [r3, #24]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	db04      	blt.n	8015106 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80150fc:	69fb      	ldr	r3, [r7, #28]
 80150fe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015102:	69bb      	ldr	r3, [r7, #24]
 8015104:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015106:	69bb      	ldr	r3, [r7, #24]
 8015108:	6959      	ldr	r1, [r3, #20]
 801510a:	693a      	ldr	r2, [r7, #16]
 801510c:	4613      	mov	r3, r2
 801510e:	009b      	lsls	r3, r3, #2
 8015110:	4413      	add	r3, r2
 8015112:	009b      	lsls	r3, r3, #2
 8015114:	4a13      	ldr	r2, [pc, #76]	@ (8015164 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015116:	4413      	add	r3, r2
 8015118:	4299      	cmp	r1, r3
 801511a:	d11c      	bne.n	8015156 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801511c:	69bb      	ldr	r3, [r7, #24]
 801511e:	3304      	adds	r3, #4
 8015120:	4618      	mov	r0, r3
 8015122:	f7fd ff37 	bl	8012f94 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015126:	69bb      	ldr	r3, [r7, #24]
 8015128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801512a:	4b0f      	ldr	r3, [pc, #60]	@ (8015168 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	429a      	cmp	r2, r3
 8015130:	d903      	bls.n	801513a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8015132:	69bb      	ldr	r3, [r7, #24]
 8015134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015136:	4a0c      	ldr	r2, [pc, #48]	@ (8015168 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8015138:	6013      	str	r3, [r2, #0]
 801513a:	69bb      	ldr	r3, [r7, #24]
 801513c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801513e:	4613      	mov	r3, r2
 8015140:	009b      	lsls	r3, r3, #2
 8015142:	4413      	add	r3, r2
 8015144:	009b      	lsls	r3, r3, #2
 8015146:	4a07      	ldr	r2, [pc, #28]	@ (8015164 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015148:	441a      	add	r2, r3
 801514a:	69bb      	ldr	r3, [r7, #24]
 801514c:	3304      	adds	r3, #4
 801514e:	4619      	mov	r1, r3
 8015150:	4610      	mov	r0, r2
 8015152:	f7fd fec2 	bl	8012eda <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015156:	bf00      	nop
 8015158:	3720      	adds	r7, #32
 801515a:	46bd      	mov	sp, r7
 801515c:	bd80      	pop	{r7, pc}
 801515e:	bf00      	nop
 8015160:	24001238 	.word	0x24001238
 8015164:	2400123c 	.word	0x2400123c
 8015168:	24001714 	.word	0x24001714

0801516c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801516c:	b480      	push	{r7}
 801516e:	b083      	sub	sp, #12
 8015170:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015172:	4b09      	ldr	r3, [pc, #36]	@ (8015198 <uxTaskResetEventItemValue+0x2c>)
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	699b      	ldr	r3, [r3, #24]
 8015178:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801517a:	4b07      	ldr	r3, [pc, #28]	@ (8015198 <uxTaskResetEventItemValue+0x2c>)
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015180:	4b05      	ldr	r3, [pc, #20]	@ (8015198 <uxTaskResetEventItemValue+0x2c>)
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8015188:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801518a:	687b      	ldr	r3, [r7, #4]
}
 801518c:	4618      	mov	r0, r3
 801518e:	370c      	adds	r7, #12
 8015190:	46bd      	mov	sp, r7
 8015192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015196:	4770      	bx	lr
 8015198:	24001238 	.word	0x24001238

0801519c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801519c:	b480      	push	{r7}
 801519e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80151a0:	4b07      	ldr	r3, [pc, #28]	@ (80151c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d004      	beq.n	80151b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80151a8:	4b05      	ldr	r3, [pc, #20]	@ (80151c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80151ae:	3201      	adds	r2, #1
 80151b0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80151b2:	4b03      	ldr	r3, [pc, #12]	@ (80151c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80151b4:	681b      	ldr	r3, [r3, #0]
	}
 80151b6:	4618      	mov	r0, r3
 80151b8:	46bd      	mov	sp, r7
 80151ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151be:	4770      	bx	lr
 80151c0:	24001238 	.word	0x24001238

080151c4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b084      	sub	sp, #16
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
 80151cc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80151ce:	f000 ff4b 	bl	8016068 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80151d2:	4b20      	ldr	r3, [pc, #128]	@ (8015254 <ulTaskNotifyTake+0x90>)
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d113      	bne.n	8015206 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80151de:	4b1d      	ldr	r3, [pc, #116]	@ (8015254 <ulTaskNotifyTake+0x90>)
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	2201      	movs	r2, #1
 80151e4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80151e8:	683b      	ldr	r3, [r7, #0]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d00b      	beq.n	8015206 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80151ee:	2101      	movs	r1, #1
 80151f0:	6838      	ldr	r0, [r7, #0]
 80151f2:	f000 f9db 	bl	80155ac <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80151f6:	4b18      	ldr	r3, [pc, #96]	@ (8015258 <ulTaskNotifyTake+0x94>)
 80151f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80151fc:	601a      	str	r2, [r3, #0]
 80151fe:	f3bf 8f4f 	dsb	sy
 8015202:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8015206:	f000 ff61 	bl	80160cc <vPortExitCritical>

		taskENTER_CRITICAL();
 801520a:	f000 ff2d 	bl	8016068 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801520e:	4b11      	ldr	r3, [pc, #68]	@ (8015254 <ulTaskNotifyTake+0x90>)
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015216:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d00e      	beq.n	801523c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d005      	beq.n	8015230 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8015224:	4b0b      	ldr	r3, [pc, #44]	@ (8015254 <ulTaskNotifyTake+0x90>)
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	2200      	movs	r2, #0
 801522a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 801522e:	e005      	b.n	801523c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8015230:	4b08      	ldr	r3, [pc, #32]	@ (8015254 <ulTaskNotifyTake+0x90>)
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	68fa      	ldr	r2, [r7, #12]
 8015236:	3a01      	subs	r2, #1
 8015238:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801523c:	4b05      	ldr	r3, [pc, #20]	@ (8015254 <ulTaskNotifyTake+0x90>)
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	2200      	movs	r2, #0
 8015242:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8015246:	f000 ff41 	bl	80160cc <vPortExitCritical>

		return ulReturn;
 801524a:	68fb      	ldr	r3, [r7, #12]
	}
 801524c:	4618      	mov	r0, r3
 801524e:	3710      	adds	r7, #16
 8015250:	46bd      	mov	sp, r7
 8015252:	bd80      	pop	{r7, pc}
 8015254:	24001238 	.word	0x24001238
 8015258:	e000ed04 	.word	0xe000ed04

0801525c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801525c:	b580      	push	{r7, lr}
 801525e:	b08a      	sub	sp, #40	@ 0x28
 8015260:	af00      	add	r7, sp, #0
 8015262:	60f8      	str	r0, [r7, #12]
 8015264:	60b9      	str	r1, [r7, #8]
 8015266:	603b      	str	r3, [r7, #0]
 8015268:	4613      	mov	r3, r2
 801526a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801526c:	2301      	movs	r3, #1
 801526e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d10b      	bne.n	801528e <xTaskGenericNotify+0x32>
	__asm volatile
 8015276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801527a:	f383 8811 	msr	BASEPRI, r3
 801527e:	f3bf 8f6f 	isb	sy
 8015282:	f3bf 8f4f 	dsb	sy
 8015286:	61bb      	str	r3, [r7, #24]
}
 8015288:	bf00      	nop
 801528a:	bf00      	nop
 801528c:	e7fd      	b.n	801528a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8015292:	f000 fee9 	bl	8016068 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8015296:	683b      	ldr	r3, [r7, #0]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d004      	beq.n	80152a6 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801529c:	6a3b      	ldr	r3, [r7, #32]
 801529e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80152a2:	683b      	ldr	r3, [r7, #0]
 80152a4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80152a6:	6a3b      	ldr	r3, [r7, #32]
 80152a8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80152ac:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80152ae:	6a3b      	ldr	r3, [r7, #32]
 80152b0:	2202      	movs	r2, #2
 80152b2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80152b6:	79fb      	ldrb	r3, [r7, #7]
 80152b8:	2b04      	cmp	r3, #4
 80152ba:	d82e      	bhi.n	801531a <xTaskGenericNotify+0xbe>
 80152bc:	a201      	add	r2, pc, #4	@ (adr r2, 80152c4 <xTaskGenericNotify+0x68>)
 80152be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152c2:	bf00      	nop
 80152c4:	0801533f 	.word	0x0801533f
 80152c8:	080152d9 	.word	0x080152d9
 80152cc:	080152eb 	.word	0x080152eb
 80152d0:	080152fb 	.word	0x080152fb
 80152d4:	08015305 	.word	0x08015305
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80152d8:	6a3b      	ldr	r3, [r7, #32]
 80152da:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80152de:	68bb      	ldr	r3, [r7, #8]
 80152e0:	431a      	orrs	r2, r3
 80152e2:	6a3b      	ldr	r3, [r7, #32]
 80152e4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80152e8:	e02c      	b.n	8015344 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80152ea:	6a3b      	ldr	r3, [r7, #32]
 80152ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80152f0:	1c5a      	adds	r2, r3, #1
 80152f2:	6a3b      	ldr	r3, [r7, #32]
 80152f4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80152f8:	e024      	b.n	8015344 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80152fa:	6a3b      	ldr	r3, [r7, #32]
 80152fc:	68ba      	ldr	r2, [r7, #8]
 80152fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015302:	e01f      	b.n	8015344 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8015304:	7ffb      	ldrb	r3, [r7, #31]
 8015306:	2b02      	cmp	r3, #2
 8015308:	d004      	beq.n	8015314 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801530a:	6a3b      	ldr	r3, [r7, #32]
 801530c:	68ba      	ldr	r2, [r7, #8]
 801530e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8015312:	e017      	b.n	8015344 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8015314:	2300      	movs	r3, #0
 8015316:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8015318:	e014      	b.n	8015344 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801531a:	6a3b      	ldr	r3, [r7, #32]
 801531c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015320:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015324:	d00d      	beq.n	8015342 <xTaskGenericNotify+0xe6>
	__asm volatile
 8015326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801532a:	f383 8811 	msr	BASEPRI, r3
 801532e:	f3bf 8f6f 	isb	sy
 8015332:	f3bf 8f4f 	dsb	sy
 8015336:	617b      	str	r3, [r7, #20]
}
 8015338:	bf00      	nop
 801533a:	bf00      	nop
 801533c:	e7fd      	b.n	801533a <xTaskGenericNotify+0xde>
					break;
 801533e:	bf00      	nop
 8015340:	e000      	b.n	8015344 <xTaskGenericNotify+0xe8>

					break;
 8015342:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015344:	7ffb      	ldrb	r3, [r7, #31]
 8015346:	2b01      	cmp	r3, #1
 8015348:	d13b      	bne.n	80153c2 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801534a:	6a3b      	ldr	r3, [r7, #32]
 801534c:	3304      	adds	r3, #4
 801534e:	4618      	mov	r0, r3
 8015350:	f7fd fe20 	bl	8012f94 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8015354:	6a3b      	ldr	r3, [r7, #32]
 8015356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015358:	4b1d      	ldr	r3, [pc, #116]	@ (80153d0 <xTaskGenericNotify+0x174>)
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	429a      	cmp	r2, r3
 801535e:	d903      	bls.n	8015368 <xTaskGenericNotify+0x10c>
 8015360:	6a3b      	ldr	r3, [r7, #32]
 8015362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015364:	4a1a      	ldr	r2, [pc, #104]	@ (80153d0 <xTaskGenericNotify+0x174>)
 8015366:	6013      	str	r3, [r2, #0]
 8015368:	6a3b      	ldr	r3, [r7, #32]
 801536a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801536c:	4613      	mov	r3, r2
 801536e:	009b      	lsls	r3, r3, #2
 8015370:	4413      	add	r3, r2
 8015372:	009b      	lsls	r3, r3, #2
 8015374:	4a17      	ldr	r2, [pc, #92]	@ (80153d4 <xTaskGenericNotify+0x178>)
 8015376:	441a      	add	r2, r3
 8015378:	6a3b      	ldr	r3, [r7, #32]
 801537a:	3304      	adds	r3, #4
 801537c:	4619      	mov	r1, r3
 801537e:	4610      	mov	r0, r2
 8015380:	f7fd fdab 	bl	8012eda <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8015384:	6a3b      	ldr	r3, [r7, #32]
 8015386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015388:	2b00      	cmp	r3, #0
 801538a:	d00b      	beq.n	80153a4 <xTaskGenericNotify+0x148>
	__asm volatile
 801538c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015390:	f383 8811 	msr	BASEPRI, r3
 8015394:	f3bf 8f6f 	isb	sy
 8015398:	f3bf 8f4f 	dsb	sy
 801539c:	613b      	str	r3, [r7, #16]
}
 801539e:	bf00      	nop
 80153a0:	bf00      	nop
 80153a2:	e7fd      	b.n	80153a0 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80153a4:	6a3b      	ldr	r3, [r7, #32]
 80153a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80153a8:	4b0b      	ldr	r3, [pc, #44]	@ (80153d8 <xTaskGenericNotify+0x17c>)
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80153ae:	429a      	cmp	r2, r3
 80153b0:	d907      	bls.n	80153c2 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80153b2:	4b0a      	ldr	r3, [pc, #40]	@ (80153dc <xTaskGenericNotify+0x180>)
 80153b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80153b8:	601a      	str	r2, [r3, #0]
 80153ba:	f3bf 8f4f 	dsb	sy
 80153be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80153c2:	f000 fe83 	bl	80160cc <vPortExitCritical>

		return xReturn;
 80153c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80153c8:	4618      	mov	r0, r3
 80153ca:	3728      	adds	r7, #40	@ 0x28
 80153cc:	46bd      	mov	sp, r7
 80153ce:	bd80      	pop	{r7, pc}
 80153d0:	24001714 	.word	0x24001714
 80153d4:	2400123c 	.word	0x2400123c
 80153d8:	24001238 	.word	0x24001238
 80153dc:	e000ed04 	.word	0xe000ed04

080153e0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b08e      	sub	sp, #56	@ 0x38
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	60f8      	str	r0, [r7, #12]
 80153e8:	60b9      	str	r1, [r7, #8]
 80153ea:	603b      	str	r3, [r7, #0]
 80153ec:	4613      	mov	r3, r2
 80153ee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80153f0:	2301      	movs	r3, #1
 80153f2:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d10b      	bne.n	8015412 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80153fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153fe:	f383 8811 	msr	BASEPRI, r3
 8015402:	f3bf 8f6f 	isb	sy
 8015406:	f3bf 8f4f 	dsb	sy
 801540a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801540c:	bf00      	nop
 801540e:	bf00      	nop
 8015410:	e7fd      	b.n	801540e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015412:	f000 ff09 	bl	8016228 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 801541a:	f3ef 8211 	mrs	r2, BASEPRI
 801541e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015422:	f383 8811 	msr	BASEPRI, r3
 8015426:	f3bf 8f6f 	isb	sy
 801542a:	f3bf 8f4f 	dsb	sy
 801542e:	623a      	str	r2, [r7, #32]
 8015430:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8015432:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015434:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8015436:	683b      	ldr	r3, [r7, #0]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d004      	beq.n	8015446 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801543c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801543e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015442:	683b      	ldr	r3, [r7, #0]
 8015444:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015448:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801544c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015452:	2202      	movs	r2, #2
 8015454:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8015458:	79fb      	ldrb	r3, [r7, #7]
 801545a:	2b04      	cmp	r3, #4
 801545c:	d82e      	bhi.n	80154bc <xTaskGenericNotifyFromISR+0xdc>
 801545e:	a201      	add	r2, pc, #4	@ (adr r2, 8015464 <xTaskGenericNotifyFromISR+0x84>)
 8015460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015464:	080154e1 	.word	0x080154e1
 8015468:	08015479 	.word	0x08015479
 801546c:	0801548b 	.word	0x0801548b
 8015470:	0801549b 	.word	0x0801549b
 8015474:	080154a5 	.word	0x080154a5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8015478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801547a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801547e:	68bb      	ldr	r3, [r7, #8]
 8015480:	431a      	orrs	r2, r3
 8015482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015484:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015488:	e02d      	b.n	80154e6 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801548a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801548c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015490:	1c5a      	adds	r2, r3, #1
 8015492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015494:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015498:	e025      	b.n	80154e6 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801549a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801549c:	68ba      	ldr	r2, [r7, #8]
 801549e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80154a2:	e020      	b.n	80154e6 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80154a4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80154a8:	2b02      	cmp	r3, #2
 80154aa:	d004      	beq.n	80154b6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80154ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154ae:	68ba      	ldr	r2, [r7, #8]
 80154b0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80154b4:	e017      	b.n	80154e6 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 80154b6:	2300      	movs	r3, #0
 80154b8:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80154ba:	e014      	b.n	80154e6 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80154bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80154c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80154c6:	d00d      	beq.n	80154e4 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 80154c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154cc:	f383 8811 	msr	BASEPRI, r3
 80154d0:	f3bf 8f6f 	isb	sy
 80154d4:	f3bf 8f4f 	dsb	sy
 80154d8:	61bb      	str	r3, [r7, #24]
}
 80154da:	bf00      	nop
 80154dc:	bf00      	nop
 80154de:	e7fd      	b.n	80154dc <xTaskGenericNotifyFromISR+0xfc>
					break;
 80154e0:	bf00      	nop
 80154e2:	e000      	b.n	80154e6 <xTaskGenericNotifyFromISR+0x106>
					break;
 80154e4:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80154e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80154ea:	2b01      	cmp	r3, #1
 80154ec:	d147      	bne.n	801557e <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80154ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d00b      	beq.n	801550e <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 80154f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154fa:	f383 8811 	msr	BASEPRI, r3
 80154fe:	f3bf 8f6f 	isb	sy
 8015502:	f3bf 8f4f 	dsb	sy
 8015506:	617b      	str	r3, [r7, #20]
}
 8015508:	bf00      	nop
 801550a:	bf00      	nop
 801550c:	e7fd      	b.n	801550a <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801550e:	4b21      	ldr	r3, [pc, #132]	@ (8015594 <xTaskGenericNotifyFromISR+0x1b4>)
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d11d      	bne.n	8015552 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015518:	3304      	adds	r3, #4
 801551a:	4618      	mov	r0, r3
 801551c:	f7fd fd3a 	bl	8012f94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015524:	4b1c      	ldr	r3, [pc, #112]	@ (8015598 <xTaskGenericNotifyFromISR+0x1b8>)
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	429a      	cmp	r2, r3
 801552a:	d903      	bls.n	8015534 <xTaskGenericNotifyFromISR+0x154>
 801552c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801552e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015530:	4a19      	ldr	r2, [pc, #100]	@ (8015598 <xTaskGenericNotifyFromISR+0x1b8>)
 8015532:	6013      	str	r3, [r2, #0]
 8015534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015538:	4613      	mov	r3, r2
 801553a:	009b      	lsls	r3, r3, #2
 801553c:	4413      	add	r3, r2
 801553e:	009b      	lsls	r3, r3, #2
 8015540:	4a16      	ldr	r2, [pc, #88]	@ (801559c <xTaskGenericNotifyFromISR+0x1bc>)
 8015542:	441a      	add	r2, r3
 8015544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015546:	3304      	adds	r3, #4
 8015548:	4619      	mov	r1, r3
 801554a:	4610      	mov	r0, r2
 801554c:	f7fd fcc5 	bl	8012eda <vListInsertEnd>
 8015550:	e005      	b.n	801555e <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8015552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015554:	3318      	adds	r3, #24
 8015556:	4619      	mov	r1, r3
 8015558:	4811      	ldr	r0, [pc, #68]	@ (80155a0 <xTaskGenericNotifyFromISR+0x1c0>)
 801555a:	f7fd fcbe 	bl	8012eda <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015562:	4b10      	ldr	r3, [pc, #64]	@ (80155a4 <xTaskGenericNotifyFromISR+0x1c4>)
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015568:	429a      	cmp	r2, r3
 801556a:	d908      	bls.n	801557e <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801556c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801556e:	2b00      	cmp	r3, #0
 8015570:	d002      	beq.n	8015578 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8015572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015574:	2201      	movs	r2, #1
 8015576:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8015578:	4b0b      	ldr	r3, [pc, #44]	@ (80155a8 <xTaskGenericNotifyFromISR+0x1c8>)
 801557a:	2201      	movs	r2, #1
 801557c:	601a      	str	r2, [r3, #0]
 801557e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015580:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015582:	693b      	ldr	r3, [r7, #16]
 8015584:	f383 8811 	msr	BASEPRI, r3
}
 8015588:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801558a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 801558c:	4618      	mov	r0, r3
 801558e:	3738      	adds	r7, #56	@ 0x38
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}
 8015594:	24001734 	.word	0x24001734
 8015598:	24001714 	.word	0x24001714
 801559c:	2400123c 	.word	0x2400123c
 80155a0:	240016cc 	.word	0x240016cc
 80155a4:	24001238 	.word	0x24001238
 80155a8:	24001720 	.word	0x24001720

080155ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b084      	sub	sp, #16
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
 80155b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80155b6:	4b21      	ldr	r3, [pc, #132]	@ (801563c <prvAddCurrentTaskToDelayedList+0x90>)
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80155bc:	4b20      	ldr	r3, [pc, #128]	@ (8015640 <prvAddCurrentTaskToDelayedList+0x94>)
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	3304      	adds	r3, #4
 80155c2:	4618      	mov	r0, r3
 80155c4:	f7fd fce6 	bl	8012f94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80155ce:	d10a      	bne.n	80155e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80155d0:	683b      	ldr	r3, [r7, #0]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d007      	beq.n	80155e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80155d6:	4b1a      	ldr	r3, [pc, #104]	@ (8015640 <prvAddCurrentTaskToDelayedList+0x94>)
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	3304      	adds	r3, #4
 80155dc:	4619      	mov	r1, r3
 80155de:	4819      	ldr	r0, [pc, #100]	@ (8015644 <prvAddCurrentTaskToDelayedList+0x98>)
 80155e0:	f7fd fc7b 	bl	8012eda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80155e4:	e026      	b.n	8015634 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80155e6:	68fa      	ldr	r2, [r7, #12]
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	4413      	add	r3, r2
 80155ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80155ee:	4b14      	ldr	r3, [pc, #80]	@ (8015640 <prvAddCurrentTaskToDelayedList+0x94>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	68ba      	ldr	r2, [r7, #8]
 80155f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80155f6:	68ba      	ldr	r2, [r7, #8]
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	429a      	cmp	r2, r3
 80155fc:	d209      	bcs.n	8015612 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80155fe:	4b12      	ldr	r3, [pc, #72]	@ (8015648 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015600:	681a      	ldr	r2, [r3, #0]
 8015602:	4b0f      	ldr	r3, [pc, #60]	@ (8015640 <prvAddCurrentTaskToDelayedList+0x94>)
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	3304      	adds	r3, #4
 8015608:	4619      	mov	r1, r3
 801560a:	4610      	mov	r0, r2
 801560c:	f7fd fc89 	bl	8012f22 <vListInsert>
}
 8015610:	e010      	b.n	8015634 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015612:	4b0e      	ldr	r3, [pc, #56]	@ (801564c <prvAddCurrentTaskToDelayedList+0xa0>)
 8015614:	681a      	ldr	r2, [r3, #0]
 8015616:	4b0a      	ldr	r3, [pc, #40]	@ (8015640 <prvAddCurrentTaskToDelayedList+0x94>)
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	3304      	adds	r3, #4
 801561c:	4619      	mov	r1, r3
 801561e:	4610      	mov	r0, r2
 8015620:	f7fd fc7f 	bl	8012f22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015624:	4b0a      	ldr	r3, [pc, #40]	@ (8015650 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	68ba      	ldr	r2, [r7, #8]
 801562a:	429a      	cmp	r2, r3
 801562c:	d202      	bcs.n	8015634 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801562e:	4a08      	ldr	r2, [pc, #32]	@ (8015650 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015630:	68bb      	ldr	r3, [r7, #8]
 8015632:	6013      	str	r3, [r2, #0]
}
 8015634:	bf00      	nop
 8015636:	3710      	adds	r7, #16
 8015638:	46bd      	mov	sp, r7
 801563a:	bd80      	pop	{r7, pc}
 801563c:	24001710 	.word	0x24001710
 8015640:	24001238 	.word	0x24001238
 8015644:	240016f8 	.word	0x240016f8
 8015648:	240016c8 	.word	0x240016c8
 801564c:	240016c4 	.word	0x240016c4
 8015650:	2400172c 	.word	0x2400172c

08015654 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b08a      	sub	sp, #40	@ 0x28
 8015658:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801565a:	2300      	movs	r3, #0
 801565c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801565e:	f000 fb71 	bl	8015d44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015662:	4b1d      	ldr	r3, [pc, #116]	@ (80156d8 <xTimerCreateTimerTask+0x84>)
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d021      	beq.n	80156ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801566a:	2300      	movs	r3, #0
 801566c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801566e:	2300      	movs	r3, #0
 8015670:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015672:	1d3a      	adds	r2, r7, #4
 8015674:	f107 0108 	add.w	r1, r7, #8
 8015678:	f107 030c 	add.w	r3, r7, #12
 801567c:	4618      	mov	r0, r3
 801567e:	f7fd fa29 	bl	8012ad4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015682:	6879      	ldr	r1, [r7, #4]
 8015684:	68bb      	ldr	r3, [r7, #8]
 8015686:	68fa      	ldr	r2, [r7, #12]
 8015688:	9202      	str	r2, [sp, #8]
 801568a:	9301      	str	r3, [sp, #4]
 801568c:	2302      	movs	r3, #2
 801568e:	9300      	str	r3, [sp, #0]
 8015690:	2300      	movs	r3, #0
 8015692:	460a      	mov	r2, r1
 8015694:	4911      	ldr	r1, [pc, #68]	@ (80156dc <xTimerCreateTimerTask+0x88>)
 8015696:	4812      	ldr	r0, [pc, #72]	@ (80156e0 <xTimerCreateTimerTask+0x8c>)
 8015698:	f7fe fcd2 	bl	8014040 <xTaskCreateStatic>
 801569c:	4603      	mov	r3, r0
 801569e:	4a11      	ldr	r2, [pc, #68]	@ (80156e4 <xTimerCreateTimerTask+0x90>)
 80156a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80156a2:	4b10      	ldr	r3, [pc, #64]	@ (80156e4 <xTimerCreateTimerTask+0x90>)
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d001      	beq.n	80156ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80156aa:	2301      	movs	r3, #1
 80156ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80156ae:	697b      	ldr	r3, [r7, #20]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d10b      	bne.n	80156cc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80156b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156b8:	f383 8811 	msr	BASEPRI, r3
 80156bc:	f3bf 8f6f 	isb	sy
 80156c0:	f3bf 8f4f 	dsb	sy
 80156c4:	613b      	str	r3, [r7, #16]
}
 80156c6:	bf00      	nop
 80156c8:	bf00      	nop
 80156ca:	e7fd      	b.n	80156c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80156cc:	697b      	ldr	r3, [r7, #20]
}
 80156ce:	4618      	mov	r0, r3
 80156d0:	3718      	adds	r7, #24
 80156d2:	46bd      	mov	sp, r7
 80156d4:	bd80      	pop	{r7, pc}
 80156d6:	bf00      	nop
 80156d8:	24001768 	.word	0x24001768
 80156dc:	08018900 	.word	0x08018900
 80156e0:	080158dd 	.word	0x080158dd
 80156e4:	2400176c 	.word	0x2400176c

080156e8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b088      	sub	sp, #32
 80156ec:	af02      	add	r7, sp, #8
 80156ee:	60f8      	str	r0, [r7, #12]
 80156f0:	60b9      	str	r1, [r7, #8]
 80156f2:	607a      	str	r2, [r7, #4]
 80156f4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80156f6:	202c      	movs	r0, #44	@ 0x2c
 80156f8:	f000 fdd8 	bl	80162ac <pvPortMalloc>
 80156fc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80156fe:	697b      	ldr	r3, [r7, #20]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d00d      	beq.n	8015720 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8015704:	697b      	ldr	r3, [r7, #20]
 8015706:	2200      	movs	r2, #0
 8015708:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801570c:	697b      	ldr	r3, [r7, #20]
 801570e:	9301      	str	r3, [sp, #4]
 8015710:	6a3b      	ldr	r3, [r7, #32]
 8015712:	9300      	str	r3, [sp, #0]
 8015714:	683b      	ldr	r3, [r7, #0]
 8015716:	687a      	ldr	r2, [r7, #4]
 8015718:	68b9      	ldr	r1, [r7, #8]
 801571a:	68f8      	ldr	r0, [r7, #12]
 801571c:	f000 f805 	bl	801572a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8015720:	697b      	ldr	r3, [r7, #20]
	}
 8015722:	4618      	mov	r0, r3
 8015724:	3718      	adds	r7, #24
 8015726:	46bd      	mov	sp, r7
 8015728:	bd80      	pop	{r7, pc}

0801572a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801572a:	b580      	push	{r7, lr}
 801572c:	b086      	sub	sp, #24
 801572e:	af00      	add	r7, sp, #0
 8015730:	60f8      	str	r0, [r7, #12]
 8015732:	60b9      	str	r1, [r7, #8]
 8015734:	607a      	str	r2, [r7, #4]
 8015736:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8015738:	68bb      	ldr	r3, [r7, #8]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d10b      	bne.n	8015756 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 801573e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015742:	f383 8811 	msr	BASEPRI, r3
 8015746:	f3bf 8f6f 	isb	sy
 801574a:	f3bf 8f4f 	dsb	sy
 801574e:	617b      	str	r3, [r7, #20]
}
 8015750:	bf00      	nop
 8015752:	bf00      	nop
 8015754:	e7fd      	b.n	8015752 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8015756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015758:	2b00      	cmp	r3, #0
 801575a:	d01e      	beq.n	801579a <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801575c:	f000 faf2 	bl	8015d44 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8015760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015762:	68fa      	ldr	r2, [r7, #12]
 8015764:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8015766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015768:	68ba      	ldr	r2, [r7, #8]
 801576a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801576c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801576e:	683a      	ldr	r2, [r7, #0]
 8015770:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8015772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015774:	6a3a      	ldr	r2, [r7, #32]
 8015776:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8015778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801577a:	3304      	adds	r3, #4
 801577c:	4618      	mov	r0, r3
 801577e:	f7fd fb9f 	bl	8012ec0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d008      	beq.n	801579a <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8015788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801578a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801578e:	f043 0304 	orr.w	r3, r3, #4
 8015792:	b2da      	uxtb	r2, r3
 8015794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015796:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 801579a:	bf00      	nop
 801579c:	3718      	adds	r7, #24
 801579e:	46bd      	mov	sp, r7
 80157a0:	bd80      	pop	{r7, pc}
	...

080157a4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b08a      	sub	sp, #40	@ 0x28
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	60f8      	str	r0, [r7, #12]
 80157ac:	60b9      	str	r1, [r7, #8]
 80157ae:	607a      	str	r2, [r7, #4]
 80157b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80157b2:	2300      	movs	r3, #0
 80157b4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d10b      	bne.n	80157d4 <xTimerGenericCommand+0x30>
	__asm volatile
 80157bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157c0:	f383 8811 	msr	BASEPRI, r3
 80157c4:	f3bf 8f6f 	isb	sy
 80157c8:	f3bf 8f4f 	dsb	sy
 80157cc:	623b      	str	r3, [r7, #32]
}
 80157ce:	bf00      	nop
 80157d0:	bf00      	nop
 80157d2:	e7fd      	b.n	80157d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80157d4:	4b19      	ldr	r3, [pc, #100]	@ (801583c <xTimerGenericCommand+0x98>)
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d02a      	beq.n	8015832 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80157dc:	68bb      	ldr	r3, [r7, #8]
 80157de:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80157e8:	68bb      	ldr	r3, [r7, #8]
 80157ea:	2b05      	cmp	r3, #5
 80157ec:	dc18      	bgt.n	8015820 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80157ee:	f7ff fb43 	bl	8014e78 <xTaskGetSchedulerState>
 80157f2:	4603      	mov	r3, r0
 80157f4:	2b02      	cmp	r3, #2
 80157f6:	d109      	bne.n	801580c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80157f8:	4b10      	ldr	r3, [pc, #64]	@ (801583c <xTimerGenericCommand+0x98>)
 80157fa:	6818      	ldr	r0, [r3, #0]
 80157fc:	f107 0110 	add.w	r1, r7, #16
 8015800:	2300      	movs	r3, #0
 8015802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015804:	f7fd fda4 	bl	8013350 <xQueueGenericSend>
 8015808:	6278      	str	r0, [r7, #36]	@ 0x24
 801580a:	e012      	b.n	8015832 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801580c:	4b0b      	ldr	r3, [pc, #44]	@ (801583c <xTimerGenericCommand+0x98>)
 801580e:	6818      	ldr	r0, [r3, #0]
 8015810:	f107 0110 	add.w	r1, r7, #16
 8015814:	2300      	movs	r3, #0
 8015816:	2200      	movs	r2, #0
 8015818:	f7fd fd9a 	bl	8013350 <xQueueGenericSend>
 801581c:	6278      	str	r0, [r7, #36]	@ 0x24
 801581e:	e008      	b.n	8015832 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015820:	4b06      	ldr	r3, [pc, #24]	@ (801583c <xTimerGenericCommand+0x98>)
 8015822:	6818      	ldr	r0, [r3, #0]
 8015824:	f107 0110 	add.w	r1, r7, #16
 8015828:	2300      	movs	r3, #0
 801582a:	683a      	ldr	r2, [r7, #0]
 801582c:	f7fd fe92 	bl	8013554 <xQueueGenericSendFromISR>
 8015830:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015834:	4618      	mov	r0, r3
 8015836:	3728      	adds	r7, #40	@ 0x28
 8015838:	46bd      	mov	sp, r7
 801583a:	bd80      	pop	{r7, pc}
 801583c:	24001768 	.word	0x24001768

08015840 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015840:	b580      	push	{r7, lr}
 8015842:	b088      	sub	sp, #32
 8015844:	af02      	add	r7, sp, #8
 8015846:	6078      	str	r0, [r7, #4]
 8015848:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801584a:	4b23      	ldr	r3, [pc, #140]	@ (80158d8 <prvProcessExpiredTimer+0x98>)
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	68db      	ldr	r3, [r3, #12]
 8015850:	68db      	ldr	r3, [r3, #12]
 8015852:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015854:	697b      	ldr	r3, [r7, #20]
 8015856:	3304      	adds	r3, #4
 8015858:	4618      	mov	r0, r3
 801585a:	f7fd fb9b 	bl	8012f94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801585e:	697b      	ldr	r3, [r7, #20]
 8015860:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015864:	f003 0304 	and.w	r3, r3, #4
 8015868:	2b00      	cmp	r3, #0
 801586a:	d023      	beq.n	80158b4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801586c:	697b      	ldr	r3, [r7, #20]
 801586e:	699a      	ldr	r2, [r3, #24]
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	18d1      	adds	r1, r2, r3
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	683a      	ldr	r2, [r7, #0]
 8015878:	6978      	ldr	r0, [r7, #20]
 801587a:	f000 f8d5 	bl	8015a28 <prvInsertTimerInActiveList>
 801587e:	4603      	mov	r3, r0
 8015880:	2b00      	cmp	r3, #0
 8015882:	d020      	beq.n	80158c6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015884:	2300      	movs	r3, #0
 8015886:	9300      	str	r3, [sp, #0]
 8015888:	2300      	movs	r3, #0
 801588a:	687a      	ldr	r2, [r7, #4]
 801588c:	2100      	movs	r1, #0
 801588e:	6978      	ldr	r0, [r7, #20]
 8015890:	f7ff ff88 	bl	80157a4 <xTimerGenericCommand>
 8015894:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015896:	693b      	ldr	r3, [r7, #16]
 8015898:	2b00      	cmp	r3, #0
 801589a:	d114      	bne.n	80158c6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 801589c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158a0:	f383 8811 	msr	BASEPRI, r3
 80158a4:	f3bf 8f6f 	isb	sy
 80158a8:	f3bf 8f4f 	dsb	sy
 80158ac:	60fb      	str	r3, [r7, #12]
}
 80158ae:	bf00      	nop
 80158b0:	bf00      	nop
 80158b2:	e7fd      	b.n	80158b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80158b4:	697b      	ldr	r3, [r7, #20]
 80158b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80158ba:	f023 0301 	bic.w	r3, r3, #1
 80158be:	b2da      	uxtb	r2, r3
 80158c0:	697b      	ldr	r3, [r7, #20]
 80158c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80158c6:	697b      	ldr	r3, [r7, #20]
 80158c8:	6a1b      	ldr	r3, [r3, #32]
 80158ca:	6978      	ldr	r0, [r7, #20]
 80158cc:	4798      	blx	r3
}
 80158ce:	bf00      	nop
 80158d0:	3718      	adds	r7, #24
 80158d2:	46bd      	mov	sp, r7
 80158d4:	bd80      	pop	{r7, pc}
 80158d6:	bf00      	nop
 80158d8:	24001760 	.word	0x24001760

080158dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b084      	sub	sp, #16
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80158e4:	f107 0308 	add.w	r3, r7, #8
 80158e8:	4618      	mov	r0, r3
 80158ea:	f000 f859 	bl	80159a0 <prvGetNextExpireTime>
 80158ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80158f0:	68bb      	ldr	r3, [r7, #8]
 80158f2:	4619      	mov	r1, r3
 80158f4:	68f8      	ldr	r0, [r7, #12]
 80158f6:	f000 f805 	bl	8015904 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80158fa:	f000 f8d7 	bl	8015aac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80158fe:	bf00      	nop
 8015900:	e7f0      	b.n	80158e4 <prvTimerTask+0x8>
	...

08015904 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015904:	b580      	push	{r7, lr}
 8015906:	b084      	sub	sp, #16
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]
 801590c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801590e:	f7fe fdfb 	bl	8014508 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015912:	f107 0308 	add.w	r3, r7, #8
 8015916:	4618      	mov	r0, r3
 8015918:	f000 f866 	bl	80159e8 <prvSampleTimeNow>
 801591c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801591e:	68bb      	ldr	r3, [r7, #8]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d130      	bne.n	8015986 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015924:	683b      	ldr	r3, [r7, #0]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d10a      	bne.n	8015940 <prvProcessTimerOrBlockTask+0x3c>
 801592a:	687a      	ldr	r2, [r7, #4]
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	429a      	cmp	r2, r3
 8015930:	d806      	bhi.n	8015940 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015932:	f7fe fdf7 	bl	8014524 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015936:	68f9      	ldr	r1, [r7, #12]
 8015938:	6878      	ldr	r0, [r7, #4]
 801593a:	f7ff ff81 	bl	8015840 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801593e:	e024      	b.n	801598a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d008      	beq.n	8015958 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015946:	4b13      	ldr	r3, [pc, #76]	@ (8015994 <prvProcessTimerOrBlockTask+0x90>)
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d101      	bne.n	8015954 <prvProcessTimerOrBlockTask+0x50>
 8015950:	2301      	movs	r3, #1
 8015952:	e000      	b.n	8015956 <prvProcessTimerOrBlockTask+0x52>
 8015954:	2300      	movs	r3, #0
 8015956:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015958:	4b0f      	ldr	r3, [pc, #60]	@ (8015998 <prvProcessTimerOrBlockTask+0x94>)
 801595a:	6818      	ldr	r0, [r3, #0]
 801595c:	687a      	ldr	r2, [r7, #4]
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	1ad3      	subs	r3, r2, r3
 8015962:	683a      	ldr	r2, [r7, #0]
 8015964:	4619      	mov	r1, r3
 8015966:	f7fe fb37 	bl	8013fd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801596a:	f7fe fddb 	bl	8014524 <xTaskResumeAll>
 801596e:	4603      	mov	r3, r0
 8015970:	2b00      	cmp	r3, #0
 8015972:	d10a      	bne.n	801598a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015974:	4b09      	ldr	r3, [pc, #36]	@ (801599c <prvProcessTimerOrBlockTask+0x98>)
 8015976:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801597a:	601a      	str	r2, [r3, #0]
 801597c:	f3bf 8f4f 	dsb	sy
 8015980:	f3bf 8f6f 	isb	sy
}
 8015984:	e001      	b.n	801598a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015986:	f7fe fdcd 	bl	8014524 <xTaskResumeAll>
}
 801598a:	bf00      	nop
 801598c:	3710      	adds	r7, #16
 801598e:	46bd      	mov	sp, r7
 8015990:	bd80      	pop	{r7, pc}
 8015992:	bf00      	nop
 8015994:	24001764 	.word	0x24001764
 8015998:	24001768 	.word	0x24001768
 801599c:	e000ed04 	.word	0xe000ed04

080159a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80159a0:	b480      	push	{r7}
 80159a2:	b085      	sub	sp, #20
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80159a8:	4b0e      	ldr	r3, [pc, #56]	@ (80159e4 <prvGetNextExpireTime+0x44>)
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d101      	bne.n	80159b6 <prvGetNextExpireTime+0x16>
 80159b2:	2201      	movs	r2, #1
 80159b4:	e000      	b.n	80159b8 <prvGetNextExpireTime+0x18>
 80159b6:	2200      	movs	r2, #0
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d105      	bne.n	80159d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80159c4:	4b07      	ldr	r3, [pc, #28]	@ (80159e4 <prvGetNextExpireTime+0x44>)
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	68db      	ldr	r3, [r3, #12]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	60fb      	str	r3, [r7, #12]
 80159ce:	e001      	b.n	80159d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80159d0:	2300      	movs	r3, #0
 80159d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80159d4:	68fb      	ldr	r3, [r7, #12]
}
 80159d6:	4618      	mov	r0, r3
 80159d8:	3714      	adds	r7, #20
 80159da:	46bd      	mov	sp, r7
 80159dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e0:	4770      	bx	lr
 80159e2:	bf00      	nop
 80159e4:	24001760 	.word	0x24001760

080159e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b084      	sub	sp, #16
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80159f0:	f7fe fe36 	bl	8014660 <xTaskGetTickCount>
 80159f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80159f6:	4b0b      	ldr	r3, [pc, #44]	@ (8015a24 <prvSampleTimeNow+0x3c>)
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	68fa      	ldr	r2, [r7, #12]
 80159fc:	429a      	cmp	r2, r3
 80159fe:	d205      	bcs.n	8015a0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015a00:	f000 f93a 	bl	8015c78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	2201      	movs	r2, #1
 8015a08:	601a      	str	r2, [r3, #0]
 8015a0a:	e002      	b.n	8015a12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	2200      	movs	r2, #0
 8015a10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015a12:	4a04      	ldr	r2, [pc, #16]	@ (8015a24 <prvSampleTimeNow+0x3c>)
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015a18:	68fb      	ldr	r3, [r7, #12]
}
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	3710      	adds	r7, #16
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	bd80      	pop	{r7, pc}
 8015a22:	bf00      	nop
 8015a24:	24001770 	.word	0x24001770

08015a28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b086      	sub	sp, #24
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	60f8      	str	r0, [r7, #12]
 8015a30:	60b9      	str	r1, [r7, #8]
 8015a32:	607a      	str	r2, [r7, #4]
 8015a34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015a36:	2300      	movs	r3, #0
 8015a38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	68ba      	ldr	r2, [r7, #8]
 8015a3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	68fa      	ldr	r2, [r7, #12]
 8015a44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015a46:	68ba      	ldr	r2, [r7, #8]
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	429a      	cmp	r2, r3
 8015a4c:	d812      	bhi.n	8015a74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a4e:	687a      	ldr	r2, [r7, #4]
 8015a50:	683b      	ldr	r3, [r7, #0]
 8015a52:	1ad2      	subs	r2, r2, r3
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	699b      	ldr	r3, [r3, #24]
 8015a58:	429a      	cmp	r2, r3
 8015a5a:	d302      	bcc.n	8015a62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015a5c:	2301      	movs	r3, #1
 8015a5e:	617b      	str	r3, [r7, #20]
 8015a60:	e01b      	b.n	8015a9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015a62:	4b10      	ldr	r3, [pc, #64]	@ (8015aa4 <prvInsertTimerInActiveList+0x7c>)
 8015a64:	681a      	ldr	r2, [r3, #0]
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	3304      	adds	r3, #4
 8015a6a:	4619      	mov	r1, r3
 8015a6c:	4610      	mov	r0, r2
 8015a6e:	f7fd fa58 	bl	8012f22 <vListInsert>
 8015a72:	e012      	b.n	8015a9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015a74:	687a      	ldr	r2, [r7, #4]
 8015a76:	683b      	ldr	r3, [r7, #0]
 8015a78:	429a      	cmp	r2, r3
 8015a7a:	d206      	bcs.n	8015a8a <prvInsertTimerInActiveList+0x62>
 8015a7c:	68ba      	ldr	r2, [r7, #8]
 8015a7e:	683b      	ldr	r3, [r7, #0]
 8015a80:	429a      	cmp	r2, r3
 8015a82:	d302      	bcc.n	8015a8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015a84:	2301      	movs	r3, #1
 8015a86:	617b      	str	r3, [r7, #20]
 8015a88:	e007      	b.n	8015a9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015a8a:	4b07      	ldr	r3, [pc, #28]	@ (8015aa8 <prvInsertTimerInActiveList+0x80>)
 8015a8c:	681a      	ldr	r2, [r3, #0]
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	3304      	adds	r3, #4
 8015a92:	4619      	mov	r1, r3
 8015a94:	4610      	mov	r0, r2
 8015a96:	f7fd fa44 	bl	8012f22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015a9a:	697b      	ldr	r3, [r7, #20]
}
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	3718      	adds	r7, #24
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd80      	pop	{r7, pc}
 8015aa4:	24001764 	.word	0x24001764
 8015aa8:	24001760 	.word	0x24001760

08015aac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	b08e      	sub	sp, #56	@ 0x38
 8015ab0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015ab2:	e0ce      	b.n	8015c52 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	da19      	bge.n	8015aee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015aba:	1d3b      	adds	r3, r7, #4
 8015abc:	3304      	adds	r3, #4
 8015abe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d10b      	bne.n	8015ade <prvProcessReceivedCommands+0x32>
	__asm volatile
 8015ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015aca:	f383 8811 	msr	BASEPRI, r3
 8015ace:	f3bf 8f6f 	isb	sy
 8015ad2:	f3bf 8f4f 	dsb	sy
 8015ad6:	61fb      	str	r3, [r7, #28]
}
 8015ad8:	bf00      	nop
 8015ada:	bf00      	nop
 8015adc:	e7fd      	b.n	8015ada <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015ae4:	6850      	ldr	r0, [r2, #4]
 8015ae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015ae8:	6892      	ldr	r2, [r2, #8]
 8015aea:	4611      	mov	r1, r2
 8015aec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	f2c0 80ae 	blt.w	8015c52 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015afc:	695b      	ldr	r3, [r3, #20]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d004      	beq.n	8015b0c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b04:	3304      	adds	r3, #4
 8015b06:	4618      	mov	r0, r3
 8015b08:	f7fd fa44 	bl	8012f94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015b0c:	463b      	mov	r3, r7
 8015b0e:	4618      	mov	r0, r3
 8015b10:	f7ff ff6a 	bl	80159e8 <prvSampleTimeNow>
 8015b14:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	2b09      	cmp	r3, #9
 8015b1a:	f200 8097 	bhi.w	8015c4c <prvProcessReceivedCommands+0x1a0>
 8015b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8015b24 <prvProcessReceivedCommands+0x78>)
 8015b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b24:	08015b4d 	.word	0x08015b4d
 8015b28:	08015b4d 	.word	0x08015b4d
 8015b2c:	08015b4d 	.word	0x08015b4d
 8015b30:	08015bc3 	.word	0x08015bc3
 8015b34:	08015bd7 	.word	0x08015bd7
 8015b38:	08015c23 	.word	0x08015c23
 8015b3c:	08015b4d 	.word	0x08015b4d
 8015b40:	08015b4d 	.word	0x08015b4d
 8015b44:	08015bc3 	.word	0x08015bc3
 8015b48:	08015bd7 	.word	0x08015bd7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015b52:	f043 0301 	orr.w	r3, r3, #1
 8015b56:	b2da      	uxtb	r2, r3
 8015b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015b5e:	68ba      	ldr	r2, [r7, #8]
 8015b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b62:	699b      	ldr	r3, [r3, #24]
 8015b64:	18d1      	adds	r1, r2, r3
 8015b66:	68bb      	ldr	r3, [r7, #8]
 8015b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015b6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015b6c:	f7ff ff5c 	bl	8015a28 <prvInsertTimerInActiveList>
 8015b70:	4603      	mov	r3, r0
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d06c      	beq.n	8015c50 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b78:	6a1b      	ldr	r3, [r3, #32]
 8015b7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015b7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015b84:	f003 0304 	and.w	r3, r3, #4
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d061      	beq.n	8015c50 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015b8c:	68ba      	ldr	r2, [r7, #8]
 8015b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b90:	699b      	ldr	r3, [r3, #24]
 8015b92:	441a      	add	r2, r3
 8015b94:	2300      	movs	r3, #0
 8015b96:	9300      	str	r3, [sp, #0]
 8015b98:	2300      	movs	r3, #0
 8015b9a:	2100      	movs	r1, #0
 8015b9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015b9e:	f7ff fe01 	bl	80157a4 <xTimerGenericCommand>
 8015ba2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015ba4:	6a3b      	ldr	r3, [r7, #32]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d152      	bne.n	8015c50 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8015baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bae:	f383 8811 	msr	BASEPRI, r3
 8015bb2:	f3bf 8f6f 	isb	sy
 8015bb6:	f3bf 8f4f 	dsb	sy
 8015bba:	61bb      	str	r3, [r7, #24]
}
 8015bbc:	bf00      	nop
 8015bbe:	bf00      	nop
 8015bc0:	e7fd      	b.n	8015bbe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015bc8:	f023 0301 	bic.w	r3, r3, #1
 8015bcc:	b2da      	uxtb	r2, r3
 8015bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8015bd4:	e03d      	b.n	8015c52 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015bdc:	f043 0301 	orr.w	r3, r3, #1
 8015be0:	b2da      	uxtb	r2, r3
 8015be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015be4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015be8:	68ba      	ldr	r2, [r7, #8]
 8015bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bf0:	699b      	ldr	r3, [r3, #24]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d10b      	bne.n	8015c0e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8015bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bfa:	f383 8811 	msr	BASEPRI, r3
 8015bfe:	f3bf 8f6f 	isb	sy
 8015c02:	f3bf 8f4f 	dsb	sy
 8015c06:	617b      	str	r3, [r7, #20]
}
 8015c08:	bf00      	nop
 8015c0a:	bf00      	nop
 8015c0c:	e7fd      	b.n	8015c0a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c10:	699a      	ldr	r2, [r3, #24]
 8015c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c14:	18d1      	adds	r1, r2, r3
 8015c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015c1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015c1c:	f7ff ff04 	bl	8015a28 <prvInsertTimerInActiveList>
					break;
 8015c20:	e017      	b.n	8015c52 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015c28:	f003 0302 	and.w	r3, r3, #2
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d103      	bne.n	8015c38 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8015c30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015c32:	f000 fc09 	bl	8016448 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015c36:	e00c      	b.n	8015c52 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015c3e:	f023 0301 	bic.w	r3, r3, #1
 8015c42:	b2da      	uxtb	r2, r3
 8015c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8015c4a:	e002      	b.n	8015c52 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8015c4c:	bf00      	nop
 8015c4e:	e000      	b.n	8015c52 <prvProcessReceivedCommands+0x1a6>
					break;
 8015c50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015c52:	4b08      	ldr	r3, [pc, #32]	@ (8015c74 <prvProcessReceivedCommands+0x1c8>)
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	1d39      	adds	r1, r7, #4
 8015c58:	2200      	movs	r2, #0
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	f7fd fda8 	bl	80137b0 <xQueueReceive>
 8015c60:	4603      	mov	r3, r0
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	f47f af26 	bne.w	8015ab4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8015c68:	bf00      	nop
 8015c6a:	bf00      	nop
 8015c6c:	3730      	adds	r7, #48	@ 0x30
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	bd80      	pop	{r7, pc}
 8015c72:	bf00      	nop
 8015c74:	24001768 	.word	0x24001768

08015c78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b088      	sub	sp, #32
 8015c7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015c7e:	e049      	b.n	8015d14 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015c80:	4b2e      	ldr	r3, [pc, #184]	@ (8015d3c <prvSwitchTimerLists+0xc4>)
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	68db      	ldr	r3, [r3, #12]
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8015d3c <prvSwitchTimerLists+0xc4>)
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	68db      	ldr	r3, [r3, #12]
 8015c90:	68db      	ldr	r3, [r3, #12]
 8015c92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	3304      	adds	r3, #4
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f7fd f97b 	bl	8012f94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	6a1b      	ldr	r3, [r3, #32]
 8015ca2:	68f8      	ldr	r0, [r7, #12]
 8015ca4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015cac:	f003 0304 	and.w	r3, r3, #4
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d02f      	beq.n	8015d14 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	699b      	ldr	r3, [r3, #24]
 8015cb8:	693a      	ldr	r2, [r7, #16]
 8015cba:	4413      	add	r3, r2
 8015cbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015cbe:	68ba      	ldr	r2, [r7, #8]
 8015cc0:	693b      	ldr	r3, [r7, #16]
 8015cc2:	429a      	cmp	r2, r3
 8015cc4:	d90e      	bls.n	8015ce4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	68ba      	ldr	r2, [r7, #8]
 8015cca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	68fa      	ldr	r2, [r7, #12]
 8015cd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8015d3c <prvSwitchTimerLists+0xc4>)
 8015cd4:	681a      	ldr	r2, [r3, #0]
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	3304      	adds	r3, #4
 8015cda:	4619      	mov	r1, r3
 8015cdc:	4610      	mov	r0, r2
 8015cde:	f7fd f920 	bl	8012f22 <vListInsert>
 8015ce2:	e017      	b.n	8015d14 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	9300      	str	r3, [sp, #0]
 8015ce8:	2300      	movs	r3, #0
 8015cea:	693a      	ldr	r2, [r7, #16]
 8015cec:	2100      	movs	r1, #0
 8015cee:	68f8      	ldr	r0, [r7, #12]
 8015cf0:	f7ff fd58 	bl	80157a4 <xTimerGenericCommand>
 8015cf4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d10b      	bne.n	8015d14 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8015cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d00:	f383 8811 	msr	BASEPRI, r3
 8015d04:	f3bf 8f6f 	isb	sy
 8015d08:	f3bf 8f4f 	dsb	sy
 8015d0c:	603b      	str	r3, [r7, #0]
}
 8015d0e:	bf00      	nop
 8015d10:	bf00      	nop
 8015d12:	e7fd      	b.n	8015d10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015d14:	4b09      	ldr	r3, [pc, #36]	@ (8015d3c <prvSwitchTimerLists+0xc4>)
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d1b0      	bne.n	8015c80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015d1e:	4b07      	ldr	r3, [pc, #28]	@ (8015d3c <prvSwitchTimerLists+0xc4>)
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015d24:	4b06      	ldr	r3, [pc, #24]	@ (8015d40 <prvSwitchTimerLists+0xc8>)
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	4a04      	ldr	r2, [pc, #16]	@ (8015d3c <prvSwitchTimerLists+0xc4>)
 8015d2a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015d2c:	4a04      	ldr	r2, [pc, #16]	@ (8015d40 <prvSwitchTimerLists+0xc8>)
 8015d2e:	697b      	ldr	r3, [r7, #20]
 8015d30:	6013      	str	r3, [r2, #0]
}
 8015d32:	bf00      	nop
 8015d34:	3718      	adds	r7, #24
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bd80      	pop	{r7, pc}
 8015d3a:	bf00      	nop
 8015d3c:	24001760 	.word	0x24001760
 8015d40:	24001764 	.word	0x24001764

08015d44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b082      	sub	sp, #8
 8015d48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015d4a:	f000 f98d 	bl	8016068 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015d4e:	4b15      	ldr	r3, [pc, #84]	@ (8015da4 <prvCheckForValidListAndQueue+0x60>)
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d120      	bne.n	8015d98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015d56:	4814      	ldr	r0, [pc, #80]	@ (8015da8 <prvCheckForValidListAndQueue+0x64>)
 8015d58:	f7fd f892 	bl	8012e80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015d5c:	4813      	ldr	r0, [pc, #76]	@ (8015dac <prvCheckForValidListAndQueue+0x68>)
 8015d5e:	f7fd f88f 	bl	8012e80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015d62:	4b13      	ldr	r3, [pc, #76]	@ (8015db0 <prvCheckForValidListAndQueue+0x6c>)
 8015d64:	4a10      	ldr	r2, [pc, #64]	@ (8015da8 <prvCheckForValidListAndQueue+0x64>)
 8015d66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015d68:	4b12      	ldr	r3, [pc, #72]	@ (8015db4 <prvCheckForValidListAndQueue+0x70>)
 8015d6a:	4a10      	ldr	r2, [pc, #64]	@ (8015dac <prvCheckForValidListAndQueue+0x68>)
 8015d6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015d6e:	2300      	movs	r3, #0
 8015d70:	9300      	str	r3, [sp, #0]
 8015d72:	4b11      	ldr	r3, [pc, #68]	@ (8015db8 <prvCheckForValidListAndQueue+0x74>)
 8015d74:	4a11      	ldr	r2, [pc, #68]	@ (8015dbc <prvCheckForValidListAndQueue+0x78>)
 8015d76:	2110      	movs	r1, #16
 8015d78:	200a      	movs	r0, #10
 8015d7a:	f7fd f99f 	bl	80130bc <xQueueGenericCreateStatic>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	4a08      	ldr	r2, [pc, #32]	@ (8015da4 <prvCheckForValidListAndQueue+0x60>)
 8015d82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015d84:	4b07      	ldr	r3, [pc, #28]	@ (8015da4 <prvCheckForValidListAndQueue+0x60>)
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d005      	beq.n	8015d98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015d8c:	4b05      	ldr	r3, [pc, #20]	@ (8015da4 <prvCheckForValidListAndQueue+0x60>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	490b      	ldr	r1, [pc, #44]	@ (8015dc0 <prvCheckForValidListAndQueue+0x7c>)
 8015d92:	4618      	mov	r0, r3
 8015d94:	f7fe f8cc 	bl	8013f30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015d98:	f000 f998 	bl	80160cc <vPortExitCritical>
}
 8015d9c:	bf00      	nop
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	bd80      	pop	{r7, pc}
 8015da2:	bf00      	nop
 8015da4:	24001768 	.word	0x24001768
 8015da8:	24001738 	.word	0x24001738
 8015dac:	2400174c 	.word	0x2400174c
 8015db0:	24001760 	.word	0x24001760
 8015db4:	24001764 	.word	0x24001764
 8015db8:	24001814 	.word	0x24001814
 8015dbc:	24001774 	.word	0x24001774
 8015dc0:	08018908 	.word	0x08018908

08015dc4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015dc4:	b580      	push	{r7, lr}
 8015dc6:	b08a      	sub	sp, #40	@ 0x28
 8015dc8:	af00      	add	r7, sp, #0
 8015dca:	60f8      	str	r0, [r7, #12]
 8015dcc:	60b9      	str	r1, [r7, #8]
 8015dce:	607a      	str	r2, [r7, #4]
 8015dd0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8015dd2:	f06f 0301 	mvn.w	r3, #1
 8015dd6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015ddc:	68bb      	ldr	r3, [r7, #8]
 8015dde:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015de4:	4b06      	ldr	r3, [pc, #24]	@ (8015e00 <xTimerPendFunctionCallFromISR+0x3c>)
 8015de6:	6818      	ldr	r0, [r3, #0]
 8015de8:	f107 0114 	add.w	r1, r7, #20
 8015dec:	2300      	movs	r3, #0
 8015dee:	683a      	ldr	r2, [r7, #0]
 8015df0:	f7fd fbb0 	bl	8013554 <xQueueGenericSendFromISR>
 8015df4:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8015df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8015df8:	4618      	mov	r0, r3
 8015dfa:	3728      	adds	r7, #40	@ 0x28
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	bd80      	pop	{r7, pc}
 8015e00:	24001768 	.word	0x24001768

08015e04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015e04:	b480      	push	{r7}
 8015e06:	b085      	sub	sp, #20
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	60f8      	str	r0, [r7, #12]
 8015e0c:	60b9      	str	r1, [r7, #8]
 8015e0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	3b04      	subs	r3, #4
 8015e14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8015e1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	3b04      	subs	r3, #4
 8015e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015e24:	68bb      	ldr	r3, [r7, #8]
 8015e26:	f023 0201 	bic.w	r2, r3, #1
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	3b04      	subs	r3, #4
 8015e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015e34:	4a0c      	ldr	r2, [pc, #48]	@ (8015e68 <pxPortInitialiseStack+0x64>)
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	3b14      	subs	r3, #20
 8015e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015e40:	687a      	ldr	r2, [r7, #4]
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	3b04      	subs	r3, #4
 8015e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	f06f 0202 	mvn.w	r2, #2
 8015e52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	3b20      	subs	r3, #32
 8015e58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015e5a:	68fb      	ldr	r3, [r7, #12]
}
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	3714      	adds	r7, #20
 8015e60:	46bd      	mov	sp, r7
 8015e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e66:	4770      	bx	lr
 8015e68:	08015e6d 	.word	0x08015e6d

08015e6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015e6c:	b480      	push	{r7}
 8015e6e:	b085      	sub	sp, #20
 8015e70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015e72:	2300      	movs	r3, #0
 8015e74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015e76:	4b13      	ldr	r3, [pc, #76]	@ (8015ec4 <prvTaskExitError+0x58>)
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015e7e:	d00b      	beq.n	8015e98 <prvTaskExitError+0x2c>
	__asm volatile
 8015e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e84:	f383 8811 	msr	BASEPRI, r3
 8015e88:	f3bf 8f6f 	isb	sy
 8015e8c:	f3bf 8f4f 	dsb	sy
 8015e90:	60fb      	str	r3, [r7, #12]
}
 8015e92:	bf00      	nop
 8015e94:	bf00      	nop
 8015e96:	e7fd      	b.n	8015e94 <prvTaskExitError+0x28>
	__asm volatile
 8015e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e9c:	f383 8811 	msr	BASEPRI, r3
 8015ea0:	f3bf 8f6f 	isb	sy
 8015ea4:	f3bf 8f4f 	dsb	sy
 8015ea8:	60bb      	str	r3, [r7, #8]
}
 8015eaa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015eac:	bf00      	nop
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d0fc      	beq.n	8015eae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015eb4:	bf00      	nop
 8015eb6:	bf00      	nop
 8015eb8:	3714      	adds	r7, #20
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec0:	4770      	bx	lr
 8015ec2:	bf00      	nop
 8015ec4:	24000010 	.word	0x24000010
	...

08015ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015ed0:	4b07      	ldr	r3, [pc, #28]	@ (8015ef0 <pxCurrentTCBConst2>)
 8015ed2:	6819      	ldr	r1, [r3, #0]
 8015ed4:	6808      	ldr	r0, [r1, #0]
 8015ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eda:	f380 8809 	msr	PSP, r0
 8015ede:	f3bf 8f6f 	isb	sy
 8015ee2:	f04f 0000 	mov.w	r0, #0
 8015ee6:	f380 8811 	msr	BASEPRI, r0
 8015eea:	4770      	bx	lr
 8015eec:	f3af 8000 	nop.w

08015ef0 <pxCurrentTCBConst2>:
 8015ef0:	24001238 	.word	0x24001238
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015ef4:	bf00      	nop
 8015ef6:	bf00      	nop

08015ef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015ef8:	4808      	ldr	r0, [pc, #32]	@ (8015f1c <prvPortStartFirstTask+0x24>)
 8015efa:	6800      	ldr	r0, [r0, #0]
 8015efc:	6800      	ldr	r0, [r0, #0]
 8015efe:	f380 8808 	msr	MSP, r0
 8015f02:	f04f 0000 	mov.w	r0, #0
 8015f06:	f380 8814 	msr	CONTROL, r0
 8015f0a:	b662      	cpsie	i
 8015f0c:	b661      	cpsie	f
 8015f0e:	f3bf 8f4f 	dsb	sy
 8015f12:	f3bf 8f6f 	isb	sy
 8015f16:	df00      	svc	0
 8015f18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015f1a:	bf00      	nop
 8015f1c:	e000ed08 	.word	0xe000ed08

08015f20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b086      	sub	sp, #24
 8015f24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015f26:	4b47      	ldr	r3, [pc, #284]	@ (8016044 <xPortStartScheduler+0x124>)
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	4a47      	ldr	r2, [pc, #284]	@ (8016048 <xPortStartScheduler+0x128>)
 8015f2c:	4293      	cmp	r3, r2
 8015f2e:	d10b      	bne.n	8015f48 <xPortStartScheduler+0x28>
	__asm volatile
 8015f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f34:	f383 8811 	msr	BASEPRI, r3
 8015f38:	f3bf 8f6f 	isb	sy
 8015f3c:	f3bf 8f4f 	dsb	sy
 8015f40:	60fb      	str	r3, [r7, #12]
}
 8015f42:	bf00      	nop
 8015f44:	bf00      	nop
 8015f46:	e7fd      	b.n	8015f44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015f48:	4b3e      	ldr	r3, [pc, #248]	@ (8016044 <xPortStartScheduler+0x124>)
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	4a3f      	ldr	r2, [pc, #252]	@ (801604c <xPortStartScheduler+0x12c>)
 8015f4e:	4293      	cmp	r3, r2
 8015f50:	d10b      	bne.n	8015f6a <xPortStartScheduler+0x4a>
	__asm volatile
 8015f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f56:	f383 8811 	msr	BASEPRI, r3
 8015f5a:	f3bf 8f6f 	isb	sy
 8015f5e:	f3bf 8f4f 	dsb	sy
 8015f62:	613b      	str	r3, [r7, #16]
}
 8015f64:	bf00      	nop
 8015f66:	bf00      	nop
 8015f68:	e7fd      	b.n	8015f66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015f6a:	4b39      	ldr	r3, [pc, #228]	@ (8016050 <xPortStartScheduler+0x130>)
 8015f6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015f6e:	697b      	ldr	r3, [r7, #20]
 8015f70:	781b      	ldrb	r3, [r3, #0]
 8015f72:	b2db      	uxtb	r3, r3
 8015f74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015f76:	697b      	ldr	r3, [r7, #20]
 8015f78:	22ff      	movs	r2, #255	@ 0xff
 8015f7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015f7c:	697b      	ldr	r3, [r7, #20]
 8015f7e:	781b      	ldrb	r3, [r3, #0]
 8015f80:	b2db      	uxtb	r3, r3
 8015f82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015f84:	78fb      	ldrb	r3, [r7, #3]
 8015f86:	b2db      	uxtb	r3, r3
 8015f88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8015f8c:	b2da      	uxtb	r2, r3
 8015f8e:	4b31      	ldr	r3, [pc, #196]	@ (8016054 <xPortStartScheduler+0x134>)
 8015f90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015f92:	4b31      	ldr	r3, [pc, #196]	@ (8016058 <xPortStartScheduler+0x138>)
 8015f94:	2207      	movs	r2, #7
 8015f96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015f98:	e009      	b.n	8015fae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8015f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8016058 <xPortStartScheduler+0x138>)
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	3b01      	subs	r3, #1
 8015fa0:	4a2d      	ldr	r2, [pc, #180]	@ (8016058 <xPortStartScheduler+0x138>)
 8015fa2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015fa4:	78fb      	ldrb	r3, [r7, #3]
 8015fa6:	b2db      	uxtb	r3, r3
 8015fa8:	005b      	lsls	r3, r3, #1
 8015faa:	b2db      	uxtb	r3, r3
 8015fac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015fae:	78fb      	ldrb	r3, [r7, #3]
 8015fb0:	b2db      	uxtb	r3, r3
 8015fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015fb6:	2b80      	cmp	r3, #128	@ 0x80
 8015fb8:	d0ef      	beq.n	8015f9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015fba:	4b27      	ldr	r3, [pc, #156]	@ (8016058 <xPortStartScheduler+0x138>)
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	f1c3 0307 	rsb	r3, r3, #7
 8015fc2:	2b04      	cmp	r3, #4
 8015fc4:	d00b      	beq.n	8015fde <xPortStartScheduler+0xbe>
	__asm volatile
 8015fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fca:	f383 8811 	msr	BASEPRI, r3
 8015fce:	f3bf 8f6f 	isb	sy
 8015fd2:	f3bf 8f4f 	dsb	sy
 8015fd6:	60bb      	str	r3, [r7, #8]
}
 8015fd8:	bf00      	nop
 8015fda:	bf00      	nop
 8015fdc:	e7fd      	b.n	8015fda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015fde:	4b1e      	ldr	r3, [pc, #120]	@ (8016058 <xPortStartScheduler+0x138>)
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	021b      	lsls	r3, r3, #8
 8015fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8016058 <xPortStartScheduler+0x138>)
 8015fe6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8016058 <xPortStartScheduler+0x138>)
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015ff0:	4a19      	ldr	r2, [pc, #100]	@ (8016058 <xPortStartScheduler+0x138>)
 8015ff2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	b2da      	uxtb	r2, r3
 8015ff8:	697b      	ldr	r3, [r7, #20]
 8015ffa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015ffc:	4b17      	ldr	r3, [pc, #92]	@ (801605c <xPortStartScheduler+0x13c>)
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	4a16      	ldr	r2, [pc, #88]	@ (801605c <xPortStartScheduler+0x13c>)
 8016002:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016006:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016008:	4b14      	ldr	r3, [pc, #80]	@ (801605c <xPortStartScheduler+0x13c>)
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	4a13      	ldr	r2, [pc, #76]	@ (801605c <xPortStartScheduler+0x13c>)
 801600e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016012:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016014:	f000 f8da 	bl	80161cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016018:	4b11      	ldr	r3, [pc, #68]	@ (8016060 <xPortStartScheduler+0x140>)
 801601a:	2200      	movs	r2, #0
 801601c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801601e:	f000 f8f9 	bl	8016214 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016022:	4b10      	ldr	r3, [pc, #64]	@ (8016064 <xPortStartScheduler+0x144>)
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	4a0f      	ldr	r2, [pc, #60]	@ (8016064 <xPortStartScheduler+0x144>)
 8016028:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801602c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801602e:	f7ff ff63 	bl	8015ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016032:	f7fe fbf1 	bl	8014818 <vTaskSwitchContext>
	prvTaskExitError();
 8016036:	f7ff ff19 	bl	8015e6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801603a:	2300      	movs	r3, #0
}
 801603c:	4618      	mov	r0, r3
 801603e:	3718      	adds	r7, #24
 8016040:	46bd      	mov	sp, r7
 8016042:	bd80      	pop	{r7, pc}
 8016044:	e000ed00 	.word	0xe000ed00
 8016048:	410fc271 	.word	0x410fc271
 801604c:	410fc270 	.word	0x410fc270
 8016050:	e000e400 	.word	0xe000e400
 8016054:	24001864 	.word	0x24001864
 8016058:	24001868 	.word	0x24001868
 801605c:	e000ed20 	.word	0xe000ed20
 8016060:	24000010 	.word	0x24000010
 8016064:	e000ef34 	.word	0xe000ef34

08016068 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016068:	b480      	push	{r7}
 801606a:	b083      	sub	sp, #12
 801606c:	af00      	add	r7, sp, #0
	__asm volatile
 801606e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016072:	f383 8811 	msr	BASEPRI, r3
 8016076:	f3bf 8f6f 	isb	sy
 801607a:	f3bf 8f4f 	dsb	sy
 801607e:	607b      	str	r3, [r7, #4]
}
 8016080:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016082:	4b10      	ldr	r3, [pc, #64]	@ (80160c4 <vPortEnterCritical+0x5c>)
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	3301      	adds	r3, #1
 8016088:	4a0e      	ldr	r2, [pc, #56]	@ (80160c4 <vPortEnterCritical+0x5c>)
 801608a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801608c:	4b0d      	ldr	r3, [pc, #52]	@ (80160c4 <vPortEnterCritical+0x5c>)
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	2b01      	cmp	r3, #1
 8016092:	d110      	bne.n	80160b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016094:	4b0c      	ldr	r3, [pc, #48]	@ (80160c8 <vPortEnterCritical+0x60>)
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	b2db      	uxtb	r3, r3
 801609a:	2b00      	cmp	r3, #0
 801609c:	d00b      	beq.n	80160b6 <vPortEnterCritical+0x4e>
	__asm volatile
 801609e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160a2:	f383 8811 	msr	BASEPRI, r3
 80160a6:	f3bf 8f6f 	isb	sy
 80160aa:	f3bf 8f4f 	dsb	sy
 80160ae:	603b      	str	r3, [r7, #0]
}
 80160b0:	bf00      	nop
 80160b2:	bf00      	nop
 80160b4:	e7fd      	b.n	80160b2 <vPortEnterCritical+0x4a>
	}
}
 80160b6:	bf00      	nop
 80160b8:	370c      	adds	r7, #12
 80160ba:	46bd      	mov	sp, r7
 80160bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c0:	4770      	bx	lr
 80160c2:	bf00      	nop
 80160c4:	24000010 	.word	0x24000010
 80160c8:	e000ed04 	.word	0xe000ed04

080160cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80160cc:	b480      	push	{r7}
 80160ce:	b083      	sub	sp, #12
 80160d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80160d2:	4b12      	ldr	r3, [pc, #72]	@ (801611c <vPortExitCritical+0x50>)
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d10b      	bne.n	80160f2 <vPortExitCritical+0x26>
	__asm volatile
 80160da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160de:	f383 8811 	msr	BASEPRI, r3
 80160e2:	f3bf 8f6f 	isb	sy
 80160e6:	f3bf 8f4f 	dsb	sy
 80160ea:	607b      	str	r3, [r7, #4]
}
 80160ec:	bf00      	nop
 80160ee:	bf00      	nop
 80160f0:	e7fd      	b.n	80160ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80160f2:	4b0a      	ldr	r3, [pc, #40]	@ (801611c <vPortExitCritical+0x50>)
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	3b01      	subs	r3, #1
 80160f8:	4a08      	ldr	r2, [pc, #32]	@ (801611c <vPortExitCritical+0x50>)
 80160fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80160fc:	4b07      	ldr	r3, [pc, #28]	@ (801611c <vPortExitCritical+0x50>)
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d105      	bne.n	8016110 <vPortExitCritical+0x44>
 8016104:	2300      	movs	r3, #0
 8016106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016108:	683b      	ldr	r3, [r7, #0]
 801610a:	f383 8811 	msr	BASEPRI, r3
}
 801610e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016110:	bf00      	nop
 8016112:	370c      	adds	r7, #12
 8016114:	46bd      	mov	sp, r7
 8016116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611a:	4770      	bx	lr
 801611c:	24000010 	.word	0x24000010

08016120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016120:	f3ef 8009 	mrs	r0, PSP
 8016124:	f3bf 8f6f 	isb	sy
 8016128:	4b15      	ldr	r3, [pc, #84]	@ (8016180 <pxCurrentTCBConst>)
 801612a:	681a      	ldr	r2, [r3, #0]
 801612c:	f01e 0f10 	tst.w	lr, #16
 8016130:	bf08      	it	eq
 8016132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801613a:	6010      	str	r0, [r2, #0]
 801613c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016140:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016144:	f380 8811 	msr	BASEPRI, r0
 8016148:	f3bf 8f4f 	dsb	sy
 801614c:	f3bf 8f6f 	isb	sy
 8016150:	f7fe fb62 	bl	8014818 <vTaskSwitchContext>
 8016154:	f04f 0000 	mov.w	r0, #0
 8016158:	f380 8811 	msr	BASEPRI, r0
 801615c:	bc09      	pop	{r0, r3}
 801615e:	6819      	ldr	r1, [r3, #0]
 8016160:	6808      	ldr	r0, [r1, #0]
 8016162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016166:	f01e 0f10 	tst.w	lr, #16
 801616a:	bf08      	it	eq
 801616c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016170:	f380 8809 	msr	PSP, r0
 8016174:	f3bf 8f6f 	isb	sy
 8016178:	4770      	bx	lr
 801617a:	bf00      	nop
 801617c:	f3af 8000 	nop.w

08016180 <pxCurrentTCBConst>:
 8016180:	24001238 	.word	0x24001238
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016184:	bf00      	nop
 8016186:	bf00      	nop

08016188 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b082      	sub	sp, #8
 801618c:	af00      	add	r7, sp, #0
	__asm volatile
 801618e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016192:	f383 8811 	msr	BASEPRI, r3
 8016196:	f3bf 8f6f 	isb	sy
 801619a:	f3bf 8f4f 	dsb	sy
 801619e:	607b      	str	r3, [r7, #4]
}
 80161a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80161a2:	f7fe fa7f 	bl	80146a4 <xTaskIncrementTick>
 80161a6:	4603      	mov	r3, r0
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d003      	beq.n	80161b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80161ac:	4b06      	ldr	r3, [pc, #24]	@ (80161c8 <xPortSysTickHandler+0x40>)
 80161ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80161b2:	601a      	str	r2, [r3, #0]
 80161b4:	2300      	movs	r3, #0
 80161b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80161b8:	683b      	ldr	r3, [r7, #0]
 80161ba:	f383 8811 	msr	BASEPRI, r3
}
 80161be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80161c0:	bf00      	nop
 80161c2:	3708      	adds	r7, #8
 80161c4:	46bd      	mov	sp, r7
 80161c6:	bd80      	pop	{r7, pc}
 80161c8:	e000ed04 	.word	0xe000ed04

080161cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80161cc:	b480      	push	{r7}
 80161ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80161d0:	4b0b      	ldr	r3, [pc, #44]	@ (8016200 <vPortSetupTimerInterrupt+0x34>)
 80161d2:	2200      	movs	r2, #0
 80161d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80161d6:	4b0b      	ldr	r3, [pc, #44]	@ (8016204 <vPortSetupTimerInterrupt+0x38>)
 80161d8:	2200      	movs	r2, #0
 80161da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80161dc:	4b0a      	ldr	r3, [pc, #40]	@ (8016208 <vPortSetupTimerInterrupt+0x3c>)
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	4a0a      	ldr	r2, [pc, #40]	@ (801620c <vPortSetupTimerInterrupt+0x40>)
 80161e2:	fba2 2303 	umull	r2, r3, r2, r3
 80161e6:	099b      	lsrs	r3, r3, #6
 80161e8:	4a09      	ldr	r2, [pc, #36]	@ (8016210 <vPortSetupTimerInterrupt+0x44>)
 80161ea:	3b01      	subs	r3, #1
 80161ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80161ee:	4b04      	ldr	r3, [pc, #16]	@ (8016200 <vPortSetupTimerInterrupt+0x34>)
 80161f0:	2207      	movs	r2, #7
 80161f2:	601a      	str	r2, [r3, #0]
}
 80161f4:	bf00      	nop
 80161f6:	46bd      	mov	sp, r7
 80161f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161fc:	4770      	bx	lr
 80161fe:	bf00      	nop
 8016200:	e000e010 	.word	0xe000e010
 8016204:	e000e018 	.word	0xe000e018
 8016208:	24000000 	.word	0x24000000
 801620c:	10624dd3 	.word	0x10624dd3
 8016210:	e000e014 	.word	0xe000e014

08016214 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016214:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8016224 <vPortEnableVFP+0x10>
 8016218:	6801      	ldr	r1, [r0, #0]
 801621a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801621e:	6001      	str	r1, [r0, #0]
 8016220:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016222:	bf00      	nop
 8016224:	e000ed88 	.word	0xe000ed88

08016228 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016228:	b480      	push	{r7}
 801622a:	b085      	sub	sp, #20
 801622c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801622e:	f3ef 8305 	mrs	r3, IPSR
 8016232:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	2b0f      	cmp	r3, #15
 8016238:	d915      	bls.n	8016266 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801623a:	4a18      	ldr	r2, [pc, #96]	@ (801629c <vPortValidateInterruptPriority+0x74>)
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	4413      	add	r3, r2
 8016240:	781b      	ldrb	r3, [r3, #0]
 8016242:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016244:	4b16      	ldr	r3, [pc, #88]	@ (80162a0 <vPortValidateInterruptPriority+0x78>)
 8016246:	781b      	ldrb	r3, [r3, #0]
 8016248:	7afa      	ldrb	r2, [r7, #11]
 801624a:	429a      	cmp	r2, r3
 801624c:	d20b      	bcs.n	8016266 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801624e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016252:	f383 8811 	msr	BASEPRI, r3
 8016256:	f3bf 8f6f 	isb	sy
 801625a:	f3bf 8f4f 	dsb	sy
 801625e:	607b      	str	r3, [r7, #4]
}
 8016260:	bf00      	nop
 8016262:	bf00      	nop
 8016264:	e7fd      	b.n	8016262 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016266:	4b0f      	ldr	r3, [pc, #60]	@ (80162a4 <vPortValidateInterruptPriority+0x7c>)
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801626e:	4b0e      	ldr	r3, [pc, #56]	@ (80162a8 <vPortValidateInterruptPriority+0x80>)
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	429a      	cmp	r2, r3
 8016274:	d90b      	bls.n	801628e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8016276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801627a:	f383 8811 	msr	BASEPRI, r3
 801627e:	f3bf 8f6f 	isb	sy
 8016282:	f3bf 8f4f 	dsb	sy
 8016286:	603b      	str	r3, [r7, #0]
}
 8016288:	bf00      	nop
 801628a:	bf00      	nop
 801628c:	e7fd      	b.n	801628a <vPortValidateInterruptPriority+0x62>
	}
 801628e:	bf00      	nop
 8016290:	3714      	adds	r7, #20
 8016292:	46bd      	mov	sp, r7
 8016294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016298:	4770      	bx	lr
 801629a:	bf00      	nop
 801629c:	e000e3f0 	.word	0xe000e3f0
 80162a0:	24001864 	.word	0x24001864
 80162a4:	e000ed0c 	.word	0xe000ed0c
 80162a8:	24001868 	.word	0x24001868

080162ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b08a      	sub	sp, #40	@ 0x28
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80162b4:	2300      	movs	r3, #0
 80162b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80162b8:	f7fe f926 	bl	8014508 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80162bc:	4b5c      	ldr	r3, [pc, #368]	@ (8016430 <pvPortMalloc+0x184>)
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d101      	bne.n	80162c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80162c4:	f000 f924 	bl	8016510 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80162c8:	4b5a      	ldr	r3, [pc, #360]	@ (8016434 <pvPortMalloc+0x188>)
 80162ca:	681a      	ldr	r2, [r3, #0]
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	4013      	ands	r3, r2
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	f040 8095 	bne.w	8016400 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d01e      	beq.n	801631a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80162dc:	2208      	movs	r2, #8
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	4413      	add	r3, r2
 80162e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	f003 0307 	and.w	r3, r3, #7
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d015      	beq.n	801631a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	f023 0307 	bic.w	r3, r3, #7
 80162f4:	3308      	adds	r3, #8
 80162f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	f003 0307 	and.w	r3, r3, #7
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d00b      	beq.n	801631a <pvPortMalloc+0x6e>
	__asm volatile
 8016302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016306:	f383 8811 	msr	BASEPRI, r3
 801630a:	f3bf 8f6f 	isb	sy
 801630e:	f3bf 8f4f 	dsb	sy
 8016312:	617b      	str	r3, [r7, #20]
}
 8016314:	bf00      	nop
 8016316:	bf00      	nop
 8016318:	e7fd      	b.n	8016316 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d06f      	beq.n	8016400 <pvPortMalloc+0x154>
 8016320:	4b45      	ldr	r3, [pc, #276]	@ (8016438 <pvPortMalloc+0x18c>)
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	687a      	ldr	r2, [r7, #4]
 8016326:	429a      	cmp	r2, r3
 8016328:	d86a      	bhi.n	8016400 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801632a:	4b44      	ldr	r3, [pc, #272]	@ (801643c <pvPortMalloc+0x190>)
 801632c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801632e:	4b43      	ldr	r3, [pc, #268]	@ (801643c <pvPortMalloc+0x190>)
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016334:	e004      	b.n	8016340 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016338:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801633a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016342:	685b      	ldr	r3, [r3, #4]
 8016344:	687a      	ldr	r2, [r7, #4]
 8016346:	429a      	cmp	r2, r3
 8016348:	d903      	bls.n	8016352 <pvPortMalloc+0xa6>
 801634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d1f1      	bne.n	8016336 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016352:	4b37      	ldr	r3, [pc, #220]	@ (8016430 <pvPortMalloc+0x184>)
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016358:	429a      	cmp	r2, r3
 801635a:	d051      	beq.n	8016400 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801635c:	6a3b      	ldr	r3, [r7, #32]
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	2208      	movs	r2, #8
 8016362:	4413      	add	r3, r2
 8016364:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016368:	681a      	ldr	r2, [r3, #0]
 801636a:	6a3b      	ldr	r3, [r7, #32]
 801636c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016370:	685a      	ldr	r2, [r3, #4]
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	1ad2      	subs	r2, r2, r3
 8016376:	2308      	movs	r3, #8
 8016378:	005b      	lsls	r3, r3, #1
 801637a:	429a      	cmp	r2, r3
 801637c:	d920      	bls.n	80163c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801637e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	4413      	add	r3, r2
 8016384:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016386:	69bb      	ldr	r3, [r7, #24]
 8016388:	f003 0307 	and.w	r3, r3, #7
 801638c:	2b00      	cmp	r3, #0
 801638e:	d00b      	beq.n	80163a8 <pvPortMalloc+0xfc>
	__asm volatile
 8016390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016394:	f383 8811 	msr	BASEPRI, r3
 8016398:	f3bf 8f6f 	isb	sy
 801639c:	f3bf 8f4f 	dsb	sy
 80163a0:	613b      	str	r3, [r7, #16]
}
 80163a2:	bf00      	nop
 80163a4:	bf00      	nop
 80163a6:	e7fd      	b.n	80163a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80163a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163aa:	685a      	ldr	r2, [r3, #4]
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	1ad2      	subs	r2, r2, r3
 80163b0:	69bb      	ldr	r3, [r7, #24]
 80163b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80163b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163b6:	687a      	ldr	r2, [r7, #4]
 80163b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80163ba:	69b8      	ldr	r0, [r7, #24]
 80163bc:	f000 f90a 	bl	80165d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80163c0:	4b1d      	ldr	r3, [pc, #116]	@ (8016438 <pvPortMalloc+0x18c>)
 80163c2:	681a      	ldr	r2, [r3, #0]
 80163c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163c6:	685b      	ldr	r3, [r3, #4]
 80163c8:	1ad3      	subs	r3, r2, r3
 80163ca:	4a1b      	ldr	r2, [pc, #108]	@ (8016438 <pvPortMalloc+0x18c>)
 80163cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80163ce:	4b1a      	ldr	r3, [pc, #104]	@ (8016438 <pvPortMalloc+0x18c>)
 80163d0:	681a      	ldr	r2, [r3, #0]
 80163d2:	4b1b      	ldr	r3, [pc, #108]	@ (8016440 <pvPortMalloc+0x194>)
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	429a      	cmp	r2, r3
 80163d8:	d203      	bcs.n	80163e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80163da:	4b17      	ldr	r3, [pc, #92]	@ (8016438 <pvPortMalloc+0x18c>)
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	4a18      	ldr	r2, [pc, #96]	@ (8016440 <pvPortMalloc+0x194>)
 80163e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80163e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163e4:	685a      	ldr	r2, [r3, #4]
 80163e6:	4b13      	ldr	r3, [pc, #76]	@ (8016434 <pvPortMalloc+0x188>)
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	431a      	orrs	r2, r3
 80163ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80163f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163f2:	2200      	movs	r2, #0
 80163f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80163f6:	4b13      	ldr	r3, [pc, #76]	@ (8016444 <pvPortMalloc+0x198>)
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	3301      	adds	r3, #1
 80163fc:	4a11      	ldr	r2, [pc, #68]	@ (8016444 <pvPortMalloc+0x198>)
 80163fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016400:	f7fe f890 	bl	8014524 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016404:	69fb      	ldr	r3, [r7, #28]
 8016406:	f003 0307 	and.w	r3, r3, #7
 801640a:	2b00      	cmp	r3, #0
 801640c:	d00b      	beq.n	8016426 <pvPortMalloc+0x17a>
	__asm volatile
 801640e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016412:	f383 8811 	msr	BASEPRI, r3
 8016416:	f3bf 8f6f 	isb	sy
 801641a:	f3bf 8f4f 	dsb	sy
 801641e:	60fb      	str	r3, [r7, #12]
}
 8016420:	bf00      	nop
 8016422:	bf00      	nop
 8016424:	e7fd      	b.n	8016422 <pvPortMalloc+0x176>
	return pvReturn;
 8016426:	69fb      	ldr	r3, [r7, #28]
}
 8016428:	4618      	mov	r0, r3
 801642a:	3728      	adds	r7, #40	@ 0x28
 801642c:	46bd      	mov	sp, r7
 801642e:	bd80      	pop	{r7, pc}
 8016430:	24005474 	.word	0x24005474
 8016434:	24005488 	.word	0x24005488
 8016438:	24005478 	.word	0x24005478
 801643c:	2400546c 	.word	0x2400546c
 8016440:	2400547c 	.word	0x2400547c
 8016444:	24005480 	.word	0x24005480

08016448 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b086      	sub	sp, #24
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d04f      	beq.n	80164fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801645a:	2308      	movs	r3, #8
 801645c:	425b      	negs	r3, r3
 801645e:	697a      	ldr	r2, [r7, #20]
 8016460:	4413      	add	r3, r2
 8016462:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016464:	697b      	ldr	r3, [r7, #20]
 8016466:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016468:	693b      	ldr	r3, [r7, #16]
 801646a:	685a      	ldr	r2, [r3, #4]
 801646c:	4b25      	ldr	r3, [pc, #148]	@ (8016504 <vPortFree+0xbc>)
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	4013      	ands	r3, r2
 8016472:	2b00      	cmp	r3, #0
 8016474:	d10b      	bne.n	801648e <vPortFree+0x46>
	__asm volatile
 8016476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801647a:	f383 8811 	msr	BASEPRI, r3
 801647e:	f3bf 8f6f 	isb	sy
 8016482:	f3bf 8f4f 	dsb	sy
 8016486:	60fb      	str	r3, [r7, #12]
}
 8016488:	bf00      	nop
 801648a:	bf00      	nop
 801648c:	e7fd      	b.n	801648a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801648e:	693b      	ldr	r3, [r7, #16]
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d00b      	beq.n	80164ae <vPortFree+0x66>
	__asm volatile
 8016496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801649a:	f383 8811 	msr	BASEPRI, r3
 801649e:	f3bf 8f6f 	isb	sy
 80164a2:	f3bf 8f4f 	dsb	sy
 80164a6:	60bb      	str	r3, [r7, #8]
}
 80164a8:	bf00      	nop
 80164aa:	bf00      	nop
 80164ac:	e7fd      	b.n	80164aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80164ae:	693b      	ldr	r3, [r7, #16]
 80164b0:	685a      	ldr	r2, [r3, #4]
 80164b2:	4b14      	ldr	r3, [pc, #80]	@ (8016504 <vPortFree+0xbc>)
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	4013      	ands	r3, r2
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d01e      	beq.n	80164fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80164bc:	693b      	ldr	r3, [r7, #16]
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d11a      	bne.n	80164fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80164c4:	693b      	ldr	r3, [r7, #16]
 80164c6:	685a      	ldr	r2, [r3, #4]
 80164c8:	4b0e      	ldr	r3, [pc, #56]	@ (8016504 <vPortFree+0xbc>)
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	43db      	mvns	r3, r3
 80164ce:	401a      	ands	r2, r3
 80164d0:	693b      	ldr	r3, [r7, #16]
 80164d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80164d4:	f7fe f818 	bl	8014508 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80164d8:	693b      	ldr	r3, [r7, #16]
 80164da:	685a      	ldr	r2, [r3, #4]
 80164dc:	4b0a      	ldr	r3, [pc, #40]	@ (8016508 <vPortFree+0xc0>)
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	4413      	add	r3, r2
 80164e2:	4a09      	ldr	r2, [pc, #36]	@ (8016508 <vPortFree+0xc0>)
 80164e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80164e6:	6938      	ldr	r0, [r7, #16]
 80164e8:	f000 f874 	bl	80165d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80164ec:	4b07      	ldr	r3, [pc, #28]	@ (801650c <vPortFree+0xc4>)
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	3301      	adds	r3, #1
 80164f2:	4a06      	ldr	r2, [pc, #24]	@ (801650c <vPortFree+0xc4>)
 80164f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80164f6:	f7fe f815 	bl	8014524 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80164fa:	bf00      	nop
 80164fc:	3718      	adds	r7, #24
 80164fe:	46bd      	mov	sp, r7
 8016500:	bd80      	pop	{r7, pc}
 8016502:	bf00      	nop
 8016504:	24005488 	.word	0x24005488
 8016508:	24005478 	.word	0x24005478
 801650c:	24005484 	.word	0x24005484

08016510 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016510:	b480      	push	{r7}
 8016512:	b085      	sub	sp, #20
 8016514:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016516:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801651a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801651c:	4b27      	ldr	r3, [pc, #156]	@ (80165bc <prvHeapInit+0xac>)
 801651e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	f003 0307 	and.w	r3, r3, #7
 8016526:	2b00      	cmp	r3, #0
 8016528:	d00c      	beq.n	8016544 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	3307      	adds	r3, #7
 801652e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	f023 0307 	bic.w	r3, r3, #7
 8016536:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016538:	68ba      	ldr	r2, [r7, #8]
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	1ad3      	subs	r3, r2, r3
 801653e:	4a1f      	ldr	r2, [pc, #124]	@ (80165bc <prvHeapInit+0xac>)
 8016540:	4413      	add	r3, r2
 8016542:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016548:	4a1d      	ldr	r2, [pc, #116]	@ (80165c0 <prvHeapInit+0xb0>)
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801654e:	4b1c      	ldr	r3, [pc, #112]	@ (80165c0 <prvHeapInit+0xb0>)
 8016550:	2200      	movs	r2, #0
 8016552:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	68ba      	ldr	r2, [r7, #8]
 8016558:	4413      	add	r3, r2
 801655a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801655c:	2208      	movs	r2, #8
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	1a9b      	subs	r3, r3, r2
 8016562:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	f023 0307 	bic.w	r3, r3, #7
 801656a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	4a15      	ldr	r2, [pc, #84]	@ (80165c4 <prvHeapInit+0xb4>)
 8016570:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016572:	4b14      	ldr	r3, [pc, #80]	@ (80165c4 <prvHeapInit+0xb4>)
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	2200      	movs	r2, #0
 8016578:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801657a:	4b12      	ldr	r3, [pc, #72]	@ (80165c4 <prvHeapInit+0xb4>)
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	2200      	movs	r2, #0
 8016580:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016586:	683b      	ldr	r3, [r7, #0]
 8016588:	68fa      	ldr	r2, [r7, #12]
 801658a:	1ad2      	subs	r2, r2, r3
 801658c:	683b      	ldr	r3, [r7, #0]
 801658e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016590:	4b0c      	ldr	r3, [pc, #48]	@ (80165c4 <prvHeapInit+0xb4>)
 8016592:	681a      	ldr	r2, [r3, #0]
 8016594:	683b      	ldr	r3, [r7, #0]
 8016596:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016598:	683b      	ldr	r3, [r7, #0]
 801659a:	685b      	ldr	r3, [r3, #4]
 801659c:	4a0a      	ldr	r2, [pc, #40]	@ (80165c8 <prvHeapInit+0xb8>)
 801659e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80165a0:	683b      	ldr	r3, [r7, #0]
 80165a2:	685b      	ldr	r3, [r3, #4]
 80165a4:	4a09      	ldr	r2, [pc, #36]	@ (80165cc <prvHeapInit+0xbc>)
 80165a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80165a8:	4b09      	ldr	r3, [pc, #36]	@ (80165d0 <prvHeapInit+0xc0>)
 80165aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80165ae:	601a      	str	r2, [r3, #0]
}
 80165b0:	bf00      	nop
 80165b2:	3714      	adds	r7, #20
 80165b4:	46bd      	mov	sp, r7
 80165b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ba:	4770      	bx	lr
 80165bc:	2400186c 	.word	0x2400186c
 80165c0:	2400546c 	.word	0x2400546c
 80165c4:	24005474 	.word	0x24005474
 80165c8:	2400547c 	.word	0x2400547c
 80165cc:	24005478 	.word	0x24005478
 80165d0:	24005488 	.word	0x24005488

080165d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80165d4:	b480      	push	{r7}
 80165d6:	b085      	sub	sp, #20
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80165dc:	4b28      	ldr	r3, [pc, #160]	@ (8016680 <prvInsertBlockIntoFreeList+0xac>)
 80165de:	60fb      	str	r3, [r7, #12]
 80165e0:	e002      	b.n	80165e8 <prvInsertBlockIntoFreeList+0x14>
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	60fb      	str	r3, [r7, #12]
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	687a      	ldr	r2, [r7, #4]
 80165ee:	429a      	cmp	r2, r3
 80165f0:	d8f7      	bhi.n	80165e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	685b      	ldr	r3, [r3, #4]
 80165fa:	68ba      	ldr	r2, [r7, #8]
 80165fc:	4413      	add	r3, r2
 80165fe:	687a      	ldr	r2, [r7, #4]
 8016600:	429a      	cmp	r2, r3
 8016602:	d108      	bne.n	8016616 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	685a      	ldr	r2, [r3, #4]
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	685b      	ldr	r3, [r3, #4]
 801660c:	441a      	add	r2, r3
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	685b      	ldr	r3, [r3, #4]
 801661e:	68ba      	ldr	r2, [r7, #8]
 8016620:	441a      	add	r2, r3
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	429a      	cmp	r2, r3
 8016628:	d118      	bne.n	801665c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	681a      	ldr	r2, [r3, #0]
 801662e:	4b15      	ldr	r3, [pc, #84]	@ (8016684 <prvInsertBlockIntoFreeList+0xb0>)
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	429a      	cmp	r2, r3
 8016634:	d00d      	beq.n	8016652 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	685a      	ldr	r2, [r3, #4]
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	685b      	ldr	r3, [r3, #4]
 8016640:	441a      	add	r2, r3
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	681a      	ldr	r2, [r3, #0]
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	601a      	str	r2, [r3, #0]
 8016650:	e008      	b.n	8016664 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016652:	4b0c      	ldr	r3, [pc, #48]	@ (8016684 <prvInsertBlockIntoFreeList+0xb0>)
 8016654:	681a      	ldr	r2, [r3, #0]
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	601a      	str	r2, [r3, #0]
 801665a:	e003      	b.n	8016664 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	681a      	ldr	r2, [r3, #0]
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016664:	68fa      	ldr	r2, [r7, #12]
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	429a      	cmp	r2, r3
 801666a:	d002      	beq.n	8016672 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	687a      	ldr	r2, [r7, #4]
 8016670:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016672:	bf00      	nop
 8016674:	3714      	adds	r7, #20
 8016676:	46bd      	mov	sp, r7
 8016678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667c:	4770      	bx	lr
 801667e:	bf00      	nop
 8016680:	2400546c 	.word	0x2400546c
 8016684:	24005474 	.word	0x24005474

08016688 <_ZdlPvj>:
 8016688:	f000 b800 	b.w	801668c <_ZdlPv>

0801668c <_ZdlPv>:
 801668c:	f000 b808 	b.w	80166a0 <free>

08016690 <malloc>:
 8016690:	4b02      	ldr	r3, [pc, #8]	@ (801669c <malloc+0xc>)
 8016692:	4601      	mov	r1, r0
 8016694:	6818      	ldr	r0, [r3, #0]
 8016696:	f000 b82d 	b.w	80166f4 <_malloc_r>
 801669a:	bf00      	nop
 801669c:	24000020 	.word	0x24000020

080166a0 <free>:
 80166a0:	4b02      	ldr	r3, [pc, #8]	@ (80166ac <free+0xc>)
 80166a2:	4601      	mov	r1, r0
 80166a4:	6818      	ldr	r0, [r3, #0]
 80166a6:	f000 bcfd 	b.w	80170a4 <_free_r>
 80166aa:	bf00      	nop
 80166ac:	24000020 	.word	0x24000020

080166b0 <sbrk_aligned>:
 80166b0:	b570      	push	{r4, r5, r6, lr}
 80166b2:	4e0f      	ldr	r6, [pc, #60]	@ (80166f0 <sbrk_aligned+0x40>)
 80166b4:	460c      	mov	r4, r1
 80166b6:	6831      	ldr	r1, [r6, #0]
 80166b8:	4605      	mov	r5, r0
 80166ba:	b911      	cbnz	r1, 80166c2 <sbrk_aligned+0x12>
 80166bc:	f000 fc94 	bl	8016fe8 <_sbrk_r>
 80166c0:	6030      	str	r0, [r6, #0]
 80166c2:	4621      	mov	r1, r4
 80166c4:	4628      	mov	r0, r5
 80166c6:	f000 fc8f 	bl	8016fe8 <_sbrk_r>
 80166ca:	1c43      	adds	r3, r0, #1
 80166cc:	d103      	bne.n	80166d6 <sbrk_aligned+0x26>
 80166ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80166d2:	4620      	mov	r0, r4
 80166d4:	bd70      	pop	{r4, r5, r6, pc}
 80166d6:	1cc4      	adds	r4, r0, #3
 80166d8:	f024 0403 	bic.w	r4, r4, #3
 80166dc:	42a0      	cmp	r0, r4
 80166de:	d0f8      	beq.n	80166d2 <sbrk_aligned+0x22>
 80166e0:	1a21      	subs	r1, r4, r0
 80166e2:	4628      	mov	r0, r5
 80166e4:	f000 fc80 	bl	8016fe8 <_sbrk_r>
 80166e8:	3001      	adds	r0, #1
 80166ea:	d1f2      	bne.n	80166d2 <sbrk_aligned+0x22>
 80166ec:	e7ef      	b.n	80166ce <sbrk_aligned+0x1e>
 80166ee:	bf00      	nop
 80166f0:	2400548c 	.word	0x2400548c

080166f4 <_malloc_r>:
 80166f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80166f8:	1ccd      	adds	r5, r1, #3
 80166fa:	f025 0503 	bic.w	r5, r5, #3
 80166fe:	3508      	adds	r5, #8
 8016700:	2d0c      	cmp	r5, #12
 8016702:	bf38      	it	cc
 8016704:	250c      	movcc	r5, #12
 8016706:	2d00      	cmp	r5, #0
 8016708:	4606      	mov	r6, r0
 801670a:	db01      	blt.n	8016710 <_malloc_r+0x1c>
 801670c:	42a9      	cmp	r1, r5
 801670e:	d904      	bls.n	801671a <_malloc_r+0x26>
 8016710:	230c      	movs	r3, #12
 8016712:	6033      	str	r3, [r6, #0]
 8016714:	2000      	movs	r0, #0
 8016716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801671a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80167f0 <_malloc_r+0xfc>
 801671e:	f000 f869 	bl	80167f4 <__malloc_lock>
 8016722:	f8d8 3000 	ldr.w	r3, [r8]
 8016726:	461c      	mov	r4, r3
 8016728:	bb44      	cbnz	r4, 801677c <_malloc_r+0x88>
 801672a:	4629      	mov	r1, r5
 801672c:	4630      	mov	r0, r6
 801672e:	f7ff ffbf 	bl	80166b0 <sbrk_aligned>
 8016732:	1c43      	adds	r3, r0, #1
 8016734:	4604      	mov	r4, r0
 8016736:	d158      	bne.n	80167ea <_malloc_r+0xf6>
 8016738:	f8d8 4000 	ldr.w	r4, [r8]
 801673c:	4627      	mov	r7, r4
 801673e:	2f00      	cmp	r7, #0
 8016740:	d143      	bne.n	80167ca <_malloc_r+0xd6>
 8016742:	2c00      	cmp	r4, #0
 8016744:	d04b      	beq.n	80167de <_malloc_r+0xea>
 8016746:	6823      	ldr	r3, [r4, #0]
 8016748:	4639      	mov	r1, r7
 801674a:	4630      	mov	r0, r6
 801674c:	eb04 0903 	add.w	r9, r4, r3
 8016750:	f000 fc4a 	bl	8016fe8 <_sbrk_r>
 8016754:	4581      	cmp	r9, r0
 8016756:	d142      	bne.n	80167de <_malloc_r+0xea>
 8016758:	6821      	ldr	r1, [r4, #0]
 801675a:	1a6d      	subs	r5, r5, r1
 801675c:	4629      	mov	r1, r5
 801675e:	4630      	mov	r0, r6
 8016760:	f7ff ffa6 	bl	80166b0 <sbrk_aligned>
 8016764:	3001      	adds	r0, #1
 8016766:	d03a      	beq.n	80167de <_malloc_r+0xea>
 8016768:	6823      	ldr	r3, [r4, #0]
 801676a:	442b      	add	r3, r5
 801676c:	6023      	str	r3, [r4, #0]
 801676e:	f8d8 3000 	ldr.w	r3, [r8]
 8016772:	685a      	ldr	r2, [r3, #4]
 8016774:	bb62      	cbnz	r2, 80167d0 <_malloc_r+0xdc>
 8016776:	f8c8 7000 	str.w	r7, [r8]
 801677a:	e00f      	b.n	801679c <_malloc_r+0xa8>
 801677c:	6822      	ldr	r2, [r4, #0]
 801677e:	1b52      	subs	r2, r2, r5
 8016780:	d420      	bmi.n	80167c4 <_malloc_r+0xd0>
 8016782:	2a0b      	cmp	r2, #11
 8016784:	d917      	bls.n	80167b6 <_malloc_r+0xc2>
 8016786:	1961      	adds	r1, r4, r5
 8016788:	42a3      	cmp	r3, r4
 801678a:	6025      	str	r5, [r4, #0]
 801678c:	bf18      	it	ne
 801678e:	6059      	strne	r1, [r3, #4]
 8016790:	6863      	ldr	r3, [r4, #4]
 8016792:	bf08      	it	eq
 8016794:	f8c8 1000 	streq.w	r1, [r8]
 8016798:	5162      	str	r2, [r4, r5]
 801679a:	604b      	str	r3, [r1, #4]
 801679c:	4630      	mov	r0, r6
 801679e:	f000 f82f 	bl	8016800 <__malloc_unlock>
 80167a2:	f104 000b 	add.w	r0, r4, #11
 80167a6:	1d23      	adds	r3, r4, #4
 80167a8:	f020 0007 	bic.w	r0, r0, #7
 80167ac:	1ac2      	subs	r2, r0, r3
 80167ae:	bf1c      	itt	ne
 80167b0:	1a1b      	subne	r3, r3, r0
 80167b2:	50a3      	strne	r3, [r4, r2]
 80167b4:	e7af      	b.n	8016716 <_malloc_r+0x22>
 80167b6:	6862      	ldr	r2, [r4, #4]
 80167b8:	42a3      	cmp	r3, r4
 80167ba:	bf0c      	ite	eq
 80167bc:	f8c8 2000 	streq.w	r2, [r8]
 80167c0:	605a      	strne	r2, [r3, #4]
 80167c2:	e7eb      	b.n	801679c <_malloc_r+0xa8>
 80167c4:	4623      	mov	r3, r4
 80167c6:	6864      	ldr	r4, [r4, #4]
 80167c8:	e7ae      	b.n	8016728 <_malloc_r+0x34>
 80167ca:	463c      	mov	r4, r7
 80167cc:	687f      	ldr	r7, [r7, #4]
 80167ce:	e7b6      	b.n	801673e <_malloc_r+0x4a>
 80167d0:	461a      	mov	r2, r3
 80167d2:	685b      	ldr	r3, [r3, #4]
 80167d4:	42a3      	cmp	r3, r4
 80167d6:	d1fb      	bne.n	80167d0 <_malloc_r+0xdc>
 80167d8:	2300      	movs	r3, #0
 80167da:	6053      	str	r3, [r2, #4]
 80167dc:	e7de      	b.n	801679c <_malloc_r+0xa8>
 80167de:	230c      	movs	r3, #12
 80167e0:	6033      	str	r3, [r6, #0]
 80167e2:	4630      	mov	r0, r6
 80167e4:	f000 f80c 	bl	8016800 <__malloc_unlock>
 80167e8:	e794      	b.n	8016714 <_malloc_r+0x20>
 80167ea:	6005      	str	r5, [r0, #0]
 80167ec:	e7d6      	b.n	801679c <_malloc_r+0xa8>
 80167ee:	bf00      	nop
 80167f0:	24005490 	.word	0x24005490

080167f4 <__malloc_lock>:
 80167f4:	4801      	ldr	r0, [pc, #4]	@ (80167fc <__malloc_lock+0x8>)
 80167f6:	f000 bc44 	b.w	8017082 <__retarget_lock_acquire_recursive>
 80167fa:	bf00      	nop
 80167fc:	240055d4 	.word	0x240055d4

08016800 <__malloc_unlock>:
 8016800:	4801      	ldr	r0, [pc, #4]	@ (8016808 <__malloc_unlock+0x8>)
 8016802:	f000 bc3f 	b.w	8017084 <__retarget_lock_release_recursive>
 8016806:	bf00      	nop
 8016808:	240055d4 	.word	0x240055d4

0801680c <tolower>:
 801680c:	4b03      	ldr	r3, [pc, #12]	@ (801681c <tolower+0x10>)
 801680e:	5c1b      	ldrb	r3, [r3, r0]
 8016810:	f003 0303 	and.w	r3, r3, #3
 8016814:	2b01      	cmp	r3, #1
 8016816:	bf08      	it	eq
 8016818:	3020      	addeq	r0, #32
 801681a:	4770      	bx	lr
 801681c:	08018b45 	.word	0x08018b45

08016820 <std>:
 8016820:	2300      	movs	r3, #0
 8016822:	b510      	push	{r4, lr}
 8016824:	4604      	mov	r4, r0
 8016826:	e9c0 3300 	strd	r3, r3, [r0]
 801682a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801682e:	6083      	str	r3, [r0, #8]
 8016830:	8181      	strh	r1, [r0, #12]
 8016832:	6643      	str	r3, [r0, #100]	@ 0x64
 8016834:	81c2      	strh	r2, [r0, #14]
 8016836:	6183      	str	r3, [r0, #24]
 8016838:	4619      	mov	r1, r3
 801683a:	2208      	movs	r2, #8
 801683c:	305c      	adds	r0, #92	@ 0x5c
 801683e:	f000 fafd 	bl	8016e3c <memset>
 8016842:	4b0d      	ldr	r3, [pc, #52]	@ (8016878 <std+0x58>)
 8016844:	6263      	str	r3, [r4, #36]	@ 0x24
 8016846:	4b0d      	ldr	r3, [pc, #52]	@ (801687c <std+0x5c>)
 8016848:	62a3      	str	r3, [r4, #40]	@ 0x28
 801684a:	4b0d      	ldr	r3, [pc, #52]	@ (8016880 <std+0x60>)
 801684c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801684e:	4b0d      	ldr	r3, [pc, #52]	@ (8016884 <std+0x64>)
 8016850:	6323      	str	r3, [r4, #48]	@ 0x30
 8016852:	4b0d      	ldr	r3, [pc, #52]	@ (8016888 <std+0x68>)
 8016854:	6224      	str	r4, [r4, #32]
 8016856:	429c      	cmp	r4, r3
 8016858:	d006      	beq.n	8016868 <std+0x48>
 801685a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801685e:	4294      	cmp	r4, r2
 8016860:	d002      	beq.n	8016868 <std+0x48>
 8016862:	33d0      	adds	r3, #208	@ 0xd0
 8016864:	429c      	cmp	r4, r3
 8016866:	d105      	bne.n	8016874 <std+0x54>
 8016868:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801686c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016870:	f000 bc06 	b.w	8017080 <__retarget_lock_init_recursive>
 8016874:	bd10      	pop	{r4, pc}
 8016876:	bf00      	nop
 8016878:	08016c89 	.word	0x08016c89
 801687c:	08016caf 	.word	0x08016caf
 8016880:	08016ce7 	.word	0x08016ce7
 8016884:	08016d0b 	.word	0x08016d0b
 8016888:	24005494 	.word	0x24005494

0801688c <stdio_exit_handler>:
 801688c:	4a02      	ldr	r2, [pc, #8]	@ (8016898 <stdio_exit_handler+0xc>)
 801688e:	4903      	ldr	r1, [pc, #12]	@ (801689c <stdio_exit_handler+0x10>)
 8016890:	4803      	ldr	r0, [pc, #12]	@ (80168a0 <stdio_exit_handler+0x14>)
 8016892:	f000 b869 	b.w	8016968 <_fwalk_sglue>
 8016896:	bf00      	nop
 8016898:	24000014 	.word	0x24000014
 801689c:	080180c9 	.word	0x080180c9
 80168a0:	24000024 	.word	0x24000024

080168a4 <cleanup_stdio>:
 80168a4:	6841      	ldr	r1, [r0, #4]
 80168a6:	4b0c      	ldr	r3, [pc, #48]	@ (80168d8 <cleanup_stdio+0x34>)
 80168a8:	4299      	cmp	r1, r3
 80168aa:	b510      	push	{r4, lr}
 80168ac:	4604      	mov	r4, r0
 80168ae:	d001      	beq.n	80168b4 <cleanup_stdio+0x10>
 80168b0:	f001 fc0a 	bl	80180c8 <_fflush_r>
 80168b4:	68a1      	ldr	r1, [r4, #8]
 80168b6:	4b09      	ldr	r3, [pc, #36]	@ (80168dc <cleanup_stdio+0x38>)
 80168b8:	4299      	cmp	r1, r3
 80168ba:	d002      	beq.n	80168c2 <cleanup_stdio+0x1e>
 80168bc:	4620      	mov	r0, r4
 80168be:	f001 fc03 	bl	80180c8 <_fflush_r>
 80168c2:	68e1      	ldr	r1, [r4, #12]
 80168c4:	4b06      	ldr	r3, [pc, #24]	@ (80168e0 <cleanup_stdio+0x3c>)
 80168c6:	4299      	cmp	r1, r3
 80168c8:	d004      	beq.n	80168d4 <cleanup_stdio+0x30>
 80168ca:	4620      	mov	r0, r4
 80168cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168d0:	f001 bbfa 	b.w	80180c8 <_fflush_r>
 80168d4:	bd10      	pop	{r4, pc}
 80168d6:	bf00      	nop
 80168d8:	24005494 	.word	0x24005494
 80168dc:	240054fc 	.word	0x240054fc
 80168e0:	24005564 	.word	0x24005564

080168e4 <global_stdio_init.part.0>:
 80168e4:	b510      	push	{r4, lr}
 80168e6:	4b0b      	ldr	r3, [pc, #44]	@ (8016914 <global_stdio_init.part.0+0x30>)
 80168e8:	4c0b      	ldr	r4, [pc, #44]	@ (8016918 <global_stdio_init.part.0+0x34>)
 80168ea:	4a0c      	ldr	r2, [pc, #48]	@ (801691c <global_stdio_init.part.0+0x38>)
 80168ec:	601a      	str	r2, [r3, #0]
 80168ee:	4620      	mov	r0, r4
 80168f0:	2200      	movs	r2, #0
 80168f2:	2104      	movs	r1, #4
 80168f4:	f7ff ff94 	bl	8016820 <std>
 80168f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80168fc:	2201      	movs	r2, #1
 80168fe:	2109      	movs	r1, #9
 8016900:	f7ff ff8e 	bl	8016820 <std>
 8016904:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016908:	2202      	movs	r2, #2
 801690a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801690e:	2112      	movs	r1, #18
 8016910:	f7ff bf86 	b.w	8016820 <std>
 8016914:	240055cc 	.word	0x240055cc
 8016918:	24005494 	.word	0x24005494
 801691c:	0801688d 	.word	0x0801688d

08016920 <__sfp_lock_acquire>:
 8016920:	4801      	ldr	r0, [pc, #4]	@ (8016928 <__sfp_lock_acquire+0x8>)
 8016922:	f000 bbae 	b.w	8017082 <__retarget_lock_acquire_recursive>
 8016926:	bf00      	nop
 8016928:	240055d5 	.word	0x240055d5

0801692c <__sfp_lock_release>:
 801692c:	4801      	ldr	r0, [pc, #4]	@ (8016934 <__sfp_lock_release+0x8>)
 801692e:	f000 bba9 	b.w	8017084 <__retarget_lock_release_recursive>
 8016932:	bf00      	nop
 8016934:	240055d5 	.word	0x240055d5

08016938 <__sinit>:
 8016938:	b510      	push	{r4, lr}
 801693a:	4604      	mov	r4, r0
 801693c:	f7ff fff0 	bl	8016920 <__sfp_lock_acquire>
 8016940:	6a23      	ldr	r3, [r4, #32]
 8016942:	b11b      	cbz	r3, 801694c <__sinit+0x14>
 8016944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016948:	f7ff bff0 	b.w	801692c <__sfp_lock_release>
 801694c:	4b04      	ldr	r3, [pc, #16]	@ (8016960 <__sinit+0x28>)
 801694e:	6223      	str	r3, [r4, #32]
 8016950:	4b04      	ldr	r3, [pc, #16]	@ (8016964 <__sinit+0x2c>)
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d1f5      	bne.n	8016944 <__sinit+0xc>
 8016958:	f7ff ffc4 	bl	80168e4 <global_stdio_init.part.0>
 801695c:	e7f2      	b.n	8016944 <__sinit+0xc>
 801695e:	bf00      	nop
 8016960:	080168a5 	.word	0x080168a5
 8016964:	240055cc 	.word	0x240055cc

08016968 <_fwalk_sglue>:
 8016968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801696c:	4607      	mov	r7, r0
 801696e:	4688      	mov	r8, r1
 8016970:	4614      	mov	r4, r2
 8016972:	2600      	movs	r6, #0
 8016974:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016978:	f1b9 0901 	subs.w	r9, r9, #1
 801697c:	d505      	bpl.n	801698a <_fwalk_sglue+0x22>
 801697e:	6824      	ldr	r4, [r4, #0]
 8016980:	2c00      	cmp	r4, #0
 8016982:	d1f7      	bne.n	8016974 <_fwalk_sglue+0xc>
 8016984:	4630      	mov	r0, r6
 8016986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801698a:	89ab      	ldrh	r3, [r5, #12]
 801698c:	2b01      	cmp	r3, #1
 801698e:	d907      	bls.n	80169a0 <_fwalk_sglue+0x38>
 8016990:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016994:	3301      	adds	r3, #1
 8016996:	d003      	beq.n	80169a0 <_fwalk_sglue+0x38>
 8016998:	4629      	mov	r1, r5
 801699a:	4638      	mov	r0, r7
 801699c:	47c0      	blx	r8
 801699e:	4306      	orrs	r6, r0
 80169a0:	3568      	adds	r5, #104	@ 0x68
 80169a2:	e7e9      	b.n	8016978 <_fwalk_sglue+0x10>

080169a4 <iprintf>:
 80169a4:	b40f      	push	{r0, r1, r2, r3}
 80169a6:	b507      	push	{r0, r1, r2, lr}
 80169a8:	4906      	ldr	r1, [pc, #24]	@ (80169c4 <iprintf+0x20>)
 80169aa:	ab04      	add	r3, sp, #16
 80169ac:	6808      	ldr	r0, [r1, #0]
 80169ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80169b2:	6881      	ldr	r1, [r0, #8]
 80169b4:	9301      	str	r3, [sp, #4]
 80169b6:	f000 ff11 	bl	80177dc <_vfiprintf_r>
 80169ba:	b003      	add	sp, #12
 80169bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80169c0:	b004      	add	sp, #16
 80169c2:	4770      	bx	lr
 80169c4:	24000020 	.word	0x24000020

080169c8 <_puts_r>:
 80169c8:	6a03      	ldr	r3, [r0, #32]
 80169ca:	b570      	push	{r4, r5, r6, lr}
 80169cc:	6884      	ldr	r4, [r0, #8]
 80169ce:	4605      	mov	r5, r0
 80169d0:	460e      	mov	r6, r1
 80169d2:	b90b      	cbnz	r3, 80169d8 <_puts_r+0x10>
 80169d4:	f7ff ffb0 	bl	8016938 <__sinit>
 80169d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80169da:	07db      	lsls	r3, r3, #31
 80169dc:	d405      	bmi.n	80169ea <_puts_r+0x22>
 80169de:	89a3      	ldrh	r3, [r4, #12]
 80169e0:	0598      	lsls	r0, r3, #22
 80169e2:	d402      	bmi.n	80169ea <_puts_r+0x22>
 80169e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80169e6:	f000 fb4c 	bl	8017082 <__retarget_lock_acquire_recursive>
 80169ea:	89a3      	ldrh	r3, [r4, #12]
 80169ec:	0719      	lsls	r1, r3, #28
 80169ee:	d502      	bpl.n	80169f6 <_puts_r+0x2e>
 80169f0:	6923      	ldr	r3, [r4, #16]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d135      	bne.n	8016a62 <_puts_r+0x9a>
 80169f6:	4621      	mov	r1, r4
 80169f8:	4628      	mov	r0, r5
 80169fa:	f000 f9c9 	bl	8016d90 <__swsetup_r>
 80169fe:	b380      	cbz	r0, 8016a62 <_puts_r+0x9a>
 8016a00:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8016a04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016a06:	07da      	lsls	r2, r3, #31
 8016a08:	d405      	bmi.n	8016a16 <_puts_r+0x4e>
 8016a0a:	89a3      	ldrh	r3, [r4, #12]
 8016a0c:	059b      	lsls	r3, r3, #22
 8016a0e:	d402      	bmi.n	8016a16 <_puts_r+0x4e>
 8016a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016a12:	f000 fb37 	bl	8017084 <__retarget_lock_release_recursive>
 8016a16:	4628      	mov	r0, r5
 8016a18:	bd70      	pop	{r4, r5, r6, pc}
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	da04      	bge.n	8016a28 <_puts_r+0x60>
 8016a1e:	69a2      	ldr	r2, [r4, #24]
 8016a20:	429a      	cmp	r2, r3
 8016a22:	dc17      	bgt.n	8016a54 <_puts_r+0x8c>
 8016a24:	290a      	cmp	r1, #10
 8016a26:	d015      	beq.n	8016a54 <_puts_r+0x8c>
 8016a28:	6823      	ldr	r3, [r4, #0]
 8016a2a:	1c5a      	adds	r2, r3, #1
 8016a2c:	6022      	str	r2, [r4, #0]
 8016a2e:	7019      	strb	r1, [r3, #0]
 8016a30:	68a3      	ldr	r3, [r4, #8]
 8016a32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016a36:	3b01      	subs	r3, #1
 8016a38:	60a3      	str	r3, [r4, #8]
 8016a3a:	2900      	cmp	r1, #0
 8016a3c:	d1ed      	bne.n	8016a1a <_puts_r+0x52>
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	da11      	bge.n	8016a66 <_puts_r+0x9e>
 8016a42:	4622      	mov	r2, r4
 8016a44:	210a      	movs	r1, #10
 8016a46:	4628      	mov	r0, r5
 8016a48:	f000 f963 	bl	8016d12 <__swbuf_r>
 8016a4c:	3001      	adds	r0, #1
 8016a4e:	d0d7      	beq.n	8016a00 <_puts_r+0x38>
 8016a50:	250a      	movs	r5, #10
 8016a52:	e7d7      	b.n	8016a04 <_puts_r+0x3c>
 8016a54:	4622      	mov	r2, r4
 8016a56:	4628      	mov	r0, r5
 8016a58:	f000 f95b 	bl	8016d12 <__swbuf_r>
 8016a5c:	3001      	adds	r0, #1
 8016a5e:	d1e7      	bne.n	8016a30 <_puts_r+0x68>
 8016a60:	e7ce      	b.n	8016a00 <_puts_r+0x38>
 8016a62:	3e01      	subs	r6, #1
 8016a64:	e7e4      	b.n	8016a30 <_puts_r+0x68>
 8016a66:	6823      	ldr	r3, [r4, #0]
 8016a68:	1c5a      	adds	r2, r3, #1
 8016a6a:	6022      	str	r2, [r4, #0]
 8016a6c:	220a      	movs	r2, #10
 8016a6e:	701a      	strb	r2, [r3, #0]
 8016a70:	e7ee      	b.n	8016a50 <_puts_r+0x88>
	...

08016a74 <puts>:
 8016a74:	4b02      	ldr	r3, [pc, #8]	@ (8016a80 <puts+0xc>)
 8016a76:	4601      	mov	r1, r0
 8016a78:	6818      	ldr	r0, [r3, #0]
 8016a7a:	f7ff bfa5 	b.w	80169c8 <_puts_r>
 8016a7e:	bf00      	nop
 8016a80:	24000020 	.word	0x24000020

08016a84 <setvbuf>:
 8016a84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016a88:	461d      	mov	r5, r3
 8016a8a:	4b57      	ldr	r3, [pc, #348]	@ (8016be8 <setvbuf+0x164>)
 8016a8c:	681f      	ldr	r7, [r3, #0]
 8016a8e:	4604      	mov	r4, r0
 8016a90:	460e      	mov	r6, r1
 8016a92:	4690      	mov	r8, r2
 8016a94:	b127      	cbz	r7, 8016aa0 <setvbuf+0x1c>
 8016a96:	6a3b      	ldr	r3, [r7, #32]
 8016a98:	b913      	cbnz	r3, 8016aa0 <setvbuf+0x1c>
 8016a9a:	4638      	mov	r0, r7
 8016a9c:	f7ff ff4c 	bl	8016938 <__sinit>
 8016aa0:	f1b8 0f02 	cmp.w	r8, #2
 8016aa4:	d006      	beq.n	8016ab4 <setvbuf+0x30>
 8016aa6:	f1b8 0f01 	cmp.w	r8, #1
 8016aaa:	f200 809a 	bhi.w	8016be2 <setvbuf+0x15e>
 8016aae:	2d00      	cmp	r5, #0
 8016ab0:	f2c0 8097 	blt.w	8016be2 <setvbuf+0x15e>
 8016ab4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016ab6:	07d9      	lsls	r1, r3, #31
 8016ab8:	d405      	bmi.n	8016ac6 <setvbuf+0x42>
 8016aba:	89a3      	ldrh	r3, [r4, #12]
 8016abc:	059a      	lsls	r2, r3, #22
 8016abe:	d402      	bmi.n	8016ac6 <setvbuf+0x42>
 8016ac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016ac2:	f000 fade 	bl	8017082 <__retarget_lock_acquire_recursive>
 8016ac6:	4621      	mov	r1, r4
 8016ac8:	4638      	mov	r0, r7
 8016aca:	f001 fafd 	bl	80180c8 <_fflush_r>
 8016ace:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016ad0:	b141      	cbz	r1, 8016ae4 <setvbuf+0x60>
 8016ad2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016ad6:	4299      	cmp	r1, r3
 8016ad8:	d002      	beq.n	8016ae0 <setvbuf+0x5c>
 8016ada:	4638      	mov	r0, r7
 8016adc:	f000 fae2 	bl	80170a4 <_free_r>
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	6363      	str	r3, [r4, #52]	@ 0x34
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	61a3      	str	r3, [r4, #24]
 8016ae8:	6063      	str	r3, [r4, #4]
 8016aea:	89a3      	ldrh	r3, [r4, #12]
 8016aec:	061b      	lsls	r3, r3, #24
 8016aee:	d503      	bpl.n	8016af8 <setvbuf+0x74>
 8016af0:	6921      	ldr	r1, [r4, #16]
 8016af2:	4638      	mov	r0, r7
 8016af4:	f000 fad6 	bl	80170a4 <_free_r>
 8016af8:	89a3      	ldrh	r3, [r4, #12]
 8016afa:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8016afe:	f023 0303 	bic.w	r3, r3, #3
 8016b02:	f1b8 0f02 	cmp.w	r8, #2
 8016b06:	81a3      	strh	r3, [r4, #12]
 8016b08:	d061      	beq.n	8016bce <setvbuf+0x14a>
 8016b0a:	ab01      	add	r3, sp, #4
 8016b0c:	466a      	mov	r2, sp
 8016b0e:	4621      	mov	r1, r4
 8016b10:	4638      	mov	r0, r7
 8016b12:	f001 fb01 	bl	8018118 <__swhatbuf_r>
 8016b16:	89a3      	ldrh	r3, [r4, #12]
 8016b18:	4318      	orrs	r0, r3
 8016b1a:	81a0      	strh	r0, [r4, #12]
 8016b1c:	bb2d      	cbnz	r5, 8016b6a <setvbuf+0xe6>
 8016b1e:	9d00      	ldr	r5, [sp, #0]
 8016b20:	4628      	mov	r0, r5
 8016b22:	f7ff fdb5 	bl	8016690 <malloc>
 8016b26:	4606      	mov	r6, r0
 8016b28:	2800      	cmp	r0, #0
 8016b2a:	d152      	bne.n	8016bd2 <setvbuf+0x14e>
 8016b2c:	f8dd 9000 	ldr.w	r9, [sp]
 8016b30:	45a9      	cmp	r9, r5
 8016b32:	d140      	bne.n	8016bb6 <setvbuf+0x132>
 8016b34:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8016b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b3c:	f043 0202 	orr.w	r2, r3, #2
 8016b40:	81a2      	strh	r2, [r4, #12]
 8016b42:	2200      	movs	r2, #0
 8016b44:	60a2      	str	r2, [r4, #8]
 8016b46:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8016b4a:	6022      	str	r2, [r4, #0]
 8016b4c:	6122      	str	r2, [r4, #16]
 8016b4e:	2201      	movs	r2, #1
 8016b50:	6162      	str	r2, [r4, #20]
 8016b52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016b54:	07d6      	lsls	r6, r2, #31
 8016b56:	d404      	bmi.n	8016b62 <setvbuf+0xde>
 8016b58:	0598      	lsls	r0, r3, #22
 8016b5a:	d402      	bmi.n	8016b62 <setvbuf+0xde>
 8016b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016b5e:	f000 fa91 	bl	8017084 <__retarget_lock_release_recursive>
 8016b62:	4628      	mov	r0, r5
 8016b64:	b003      	add	sp, #12
 8016b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b6a:	2e00      	cmp	r6, #0
 8016b6c:	d0d8      	beq.n	8016b20 <setvbuf+0x9c>
 8016b6e:	6a3b      	ldr	r3, [r7, #32]
 8016b70:	b913      	cbnz	r3, 8016b78 <setvbuf+0xf4>
 8016b72:	4638      	mov	r0, r7
 8016b74:	f7ff fee0 	bl	8016938 <__sinit>
 8016b78:	f1b8 0f01 	cmp.w	r8, #1
 8016b7c:	bf08      	it	eq
 8016b7e:	89a3      	ldrheq	r3, [r4, #12]
 8016b80:	6026      	str	r6, [r4, #0]
 8016b82:	bf04      	itt	eq
 8016b84:	f043 0301 	orreq.w	r3, r3, #1
 8016b88:	81a3      	strheq	r3, [r4, #12]
 8016b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b8e:	f013 0208 	ands.w	r2, r3, #8
 8016b92:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8016b96:	d01e      	beq.n	8016bd6 <setvbuf+0x152>
 8016b98:	07d9      	lsls	r1, r3, #31
 8016b9a:	bf41      	itttt	mi
 8016b9c:	2200      	movmi	r2, #0
 8016b9e:	426d      	negmi	r5, r5
 8016ba0:	60a2      	strmi	r2, [r4, #8]
 8016ba2:	61a5      	strmi	r5, [r4, #24]
 8016ba4:	bf58      	it	pl
 8016ba6:	60a5      	strpl	r5, [r4, #8]
 8016ba8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016baa:	07d2      	lsls	r2, r2, #31
 8016bac:	d401      	bmi.n	8016bb2 <setvbuf+0x12e>
 8016bae:	059b      	lsls	r3, r3, #22
 8016bb0:	d513      	bpl.n	8016bda <setvbuf+0x156>
 8016bb2:	2500      	movs	r5, #0
 8016bb4:	e7d5      	b.n	8016b62 <setvbuf+0xde>
 8016bb6:	4648      	mov	r0, r9
 8016bb8:	f7ff fd6a 	bl	8016690 <malloc>
 8016bbc:	4606      	mov	r6, r0
 8016bbe:	2800      	cmp	r0, #0
 8016bc0:	d0b8      	beq.n	8016b34 <setvbuf+0xb0>
 8016bc2:	89a3      	ldrh	r3, [r4, #12]
 8016bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016bc8:	81a3      	strh	r3, [r4, #12]
 8016bca:	464d      	mov	r5, r9
 8016bcc:	e7cf      	b.n	8016b6e <setvbuf+0xea>
 8016bce:	2500      	movs	r5, #0
 8016bd0:	e7b2      	b.n	8016b38 <setvbuf+0xb4>
 8016bd2:	46a9      	mov	r9, r5
 8016bd4:	e7f5      	b.n	8016bc2 <setvbuf+0x13e>
 8016bd6:	60a2      	str	r2, [r4, #8]
 8016bd8:	e7e6      	b.n	8016ba8 <setvbuf+0x124>
 8016bda:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016bdc:	f000 fa52 	bl	8017084 <__retarget_lock_release_recursive>
 8016be0:	e7e7      	b.n	8016bb2 <setvbuf+0x12e>
 8016be2:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8016be6:	e7bc      	b.n	8016b62 <setvbuf+0xde>
 8016be8:	24000020 	.word	0x24000020

08016bec <siprintf>:
 8016bec:	b40e      	push	{r1, r2, r3}
 8016bee:	b510      	push	{r4, lr}
 8016bf0:	b09d      	sub	sp, #116	@ 0x74
 8016bf2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8016bf4:	9002      	str	r0, [sp, #8]
 8016bf6:	9006      	str	r0, [sp, #24]
 8016bf8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016bfc:	480a      	ldr	r0, [pc, #40]	@ (8016c28 <siprintf+0x3c>)
 8016bfe:	9107      	str	r1, [sp, #28]
 8016c00:	9104      	str	r1, [sp, #16]
 8016c02:	490a      	ldr	r1, [pc, #40]	@ (8016c2c <siprintf+0x40>)
 8016c04:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c08:	9105      	str	r1, [sp, #20]
 8016c0a:	2400      	movs	r4, #0
 8016c0c:	a902      	add	r1, sp, #8
 8016c0e:	6800      	ldr	r0, [r0, #0]
 8016c10:	9301      	str	r3, [sp, #4]
 8016c12:	941b      	str	r4, [sp, #108]	@ 0x6c
 8016c14:	f000 faec 	bl	80171f0 <_svfiprintf_r>
 8016c18:	9b02      	ldr	r3, [sp, #8]
 8016c1a:	701c      	strb	r4, [r3, #0]
 8016c1c:	b01d      	add	sp, #116	@ 0x74
 8016c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c22:	b003      	add	sp, #12
 8016c24:	4770      	bx	lr
 8016c26:	bf00      	nop
 8016c28:	24000020 	.word	0x24000020
 8016c2c:	ffff0208 	.word	0xffff0208

08016c30 <siscanf>:
 8016c30:	b40e      	push	{r1, r2, r3}
 8016c32:	b570      	push	{r4, r5, r6, lr}
 8016c34:	b09d      	sub	sp, #116	@ 0x74
 8016c36:	ac21      	add	r4, sp, #132	@ 0x84
 8016c38:	2500      	movs	r5, #0
 8016c3a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8016c3e:	f854 6b04 	ldr.w	r6, [r4], #4
 8016c42:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016c46:	951b      	str	r5, [sp, #108]	@ 0x6c
 8016c48:	9002      	str	r0, [sp, #8]
 8016c4a:	9006      	str	r0, [sp, #24]
 8016c4c:	f7e9 fb48 	bl	80002e0 <strlen>
 8016c50:	4b0b      	ldr	r3, [pc, #44]	@ (8016c80 <siscanf+0x50>)
 8016c52:	9003      	str	r0, [sp, #12]
 8016c54:	9007      	str	r0, [sp, #28]
 8016c56:	480b      	ldr	r0, [pc, #44]	@ (8016c84 <siscanf+0x54>)
 8016c58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016c5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016c5e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016c62:	4632      	mov	r2, r6
 8016c64:	4623      	mov	r3, r4
 8016c66:	a902      	add	r1, sp, #8
 8016c68:	6800      	ldr	r0, [r0, #0]
 8016c6a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8016c6c:	9514      	str	r5, [sp, #80]	@ 0x50
 8016c6e:	9401      	str	r4, [sp, #4]
 8016c70:	f000 fc14 	bl	801749c <__ssvfiscanf_r>
 8016c74:	b01d      	add	sp, #116	@ 0x74
 8016c76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c7a:	b003      	add	sp, #12
 8016c7c:	4770      	bx	lr
 8016c7e:	bf00      	nop
 8016c80:	08016cab 	.word	0x08016cab
 8016c84:	24000020 	.word	0x24000020

08016c88 <__sread>:
 8016c88:	b510      	push	{r4, lr}
 8016c8a:	460c      	mov	r4, r1
 8016c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c90:	f000 f998 	bl	8016fc4 <_read_r>
 8016c94:	2800      	cmp	r0, #0
 8016c96:	bfab      	itete	ge
 8016c98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016c9a:	89a3      	ldrhlt	r3, [r4, #12]
 8016c9c:	181b      	addge	r3, r3, r0
 8016c9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016ca2:	bfac      	ite	ge
 8016ca4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016ca6:	81a3      	strhlt	r3, [r4, #12]
 8016ca8:	bd10      	pop	{r4, pc}

08016caa <__seofread>:
 8016caa:	2000      	movs	r0, #0
 8016cac:	4770      	bx	lr

08016cae <__swrite>:
 8016cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cb2:	461f      	mov	r7, r3
 8016cb4:	898b      	ldrh	r3, [r1, #12]
 8016cb6:	05db      	lsls	r3, r3, #23
 8016cb8:	4605      	mov	r5, r0
 8016cba:	460c      	mov	r4, r1
 8016cbc:	4616      	mov	r6, r2
 8016cbe:	d505      	bpl.n	8016ccc <__swrite+0x1e>
 8016cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cc4:	2302      	movs	r3, #2
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	f000 f96a 	bl	8016fa0 <_lseek_r>
 8016ccc:	89a3      	ldrh	r3, [r4, #12]
 8016cce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016cd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016cd6:	81a3      	strh	r3, [r4, #12]
 8016cd8:	4632      	mov	r2, r6
 8016cda:	463b      	mov	r3, r7
 8016cdc:	4628      	mov	r0, r5
 8016cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ce2:	f000 b991 	b.w	8017008 <_write_r>

08016ce6 <__sseek>:
 8016ce6:	b510      	push	{r4, lr}
 8016ce8:	460c      	mov	r4, r1
 8016cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cee:	f000 f957 	bl	8016fa0 <_lseek_r>
 8016cf2:	1c43      	adds	r3, r0, #1
 8016cf4:	89a3      	ldrh	r3, [r4, #12]
 8016cf6:	bf15      	itete	ne
 8016cf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016cfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016cfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016d02:	81a3      	strheq	r3, [r4, #12]
 8016d04:	bf18      	it	ne
 8016d06:	81a3      	strhne	r3, [r4, #12]
 8016d08:	bd10      	pop	{r4, pc}

08016d0a <__sclose>:
 8016d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d0e:	f000 b8d9 	b.w	8016ec4 <_close_r>

08016d12 <__swbuf_r>:
 8016d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d14:	460e      	mov	r6, r1
 8016d16:	4614      	mov	r4, r2
 8016d18:	4605      	mov	r5, r0
 8016d1a:	b118      	cbz	r0, 8016d24 <__swbuf_r+0x12>
 8016d1c:	6a03      	ldr	r3, [r0, #32]
 8016d1e:	b90b      	cbnz	r3, 8016d24 <__swbuf_r+0x12>
 8016d20:	f7ff fe0a 	bl	8016938 <__sinit>
 8016d24:	69a3      	ldr	r3, [r4, #24]
 8016d26:	60a3      	str	r3, [r4, #8]
 8016d28:	89a3      	ldrh	r3, [r4, #12]
 8016d2a:	071a      	lsls	r2, r3, #28
 8016d2c:	d501      	bpl.n	8016d32 <__swbuf_r+0x20>
 8016d2e:	6923      	ldr	r3, [r4, #16]
 8016d30:	b943      	cbnz	r3, 8016d44 <__swbuf_r+0x32>
 8016d32:	4621      	mov	r1, r4
 8016d34:	4628      	mov	r0, r5
 8016d36:	f000 f82b 	bl	8016d90 <__swsetup_r>
 8016d3a:	b118      	cbz	r0, 8016d44 <__swbuf_r+0x32>
 8016d3c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016d40:	4638      	mov	r0, r7
 8016d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d44:	6823      	ldr	r3, [r4, #0]
 8016d46:	6922      	ldr	r2, [r4, #16]
 8016d48:	1a98      	subs	r0, r3, r2
 8016d4a:	6963      	ldr	r3, [r4, #20]
 8016d4c:	b2f6      	uxtb	r6, r6
 8016d4e:	4283      	cmp	r3, r0
 8016d50:	4637      	mov	r7, r6
 8016d52:	dc05      	bgt.n	8016d60 <__swbuf_r+0x4e>
 8016d54:	4621      	mov	r1, r4
 8016d56:	4628      	mov	r0, r5
 8016d58:	f001 f9b6 	bl	80180c8 <_fflush_r>
 8016d5c:	2800      	cmp	r0, #0
 8016d5e:	d1ed      	bne.n	8016d3c <__swbuf_r+0x2a>
 8016d60:	68a3      	ldr	r3, [r4, #8]
 8016d62:	3b01      	subs	r3, #1
 8016d64:	60a3      	str	r3, [r4, #8]
 8016d66:	6823      	ldr	r3, [r4, #0]
 8016d68:	1c5a      	adds	r2, r3, #1
 8016d6a:	6022      	str	r2, [r4, #0]
 8016d6c:	701e      	strb	r6, [r3, #0]
 8016d6e:	6962      	ldr	r2, [r4, #20]
 8016d70:	1c43      	adds	r3, r0, #1
 8016d72:	429a      	cmp	r2, r3
 8016d74:	d004      	beq.n	8016d80 <__swbuf_r+0x6e>
 8016d76:	89a3      	ldrh	r3, [r4, #12]
 8016d78:	07db      	lsls	r3, r3, #31
 8016d7a:	d5e1      	bpl.n	8016d40 <__swbuf_r+0x2e>
 8016d7c:	2e0a      	cmp	r6, #10
 8016d7e:	d1df      	bne.n	8016d40 <__swbuf_r+0x2e>
 8016d80:	4621      	mov	r1, r4
 8016d82:	4628      	mov	r0, r5
 8016d84:	f001 f9a0 	bl	80180c8 <_fflush_r>
 8016d88:	2800      	cmp	r0, #0
 8016d8a:	d0d9      	beq.n	8016d40 <__swbuf_r+0x2e>
 8016d8c:	e7d6      	b.n	8016d3c <__swbuf_r+0x2a>
	...

08016d90 <__swsetup_r>:
 8016d90:	b538      	push	{r3, r4, r5, lr}
 8016d92:	4b29      	ldr	r3, [pc, #164]	@ (8016e38 <__swsetup_r+0xa8>)
 8016d94:	4605      	mov	r5, r0
 8016d96:	6818      	ldr	r0, [r3, #0]
 8016d98:	460c      	mov	r4, r1
 8016d9a:	b118      	cbz	r0, 8016da4 <__swsetup_r+0x14>
 8016d9c:	6a03      	ldr	r3, [r0, #32]
 8016d9e:	b90b      	cbnz	r3, 8016da4 <__swsetup_r+0x14>
 8016da0:	f7ff fdca 	bl	8016938 <__sinit>
 8016da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016da8:	0719      	lsls	r1, r3, #28
 8016daa:	d422      	bmi.n	8016df2 <__swsetup_r+0x62>
 8016dac:	06da      	lsls	r2, r3, #27
 8016dae:	d407      	bmi.n	8016dc0 <__swsetup_r+0x30>
 8016db0:	2209      	movs	r2, #9
 8016db2:	602a      	str	r2, [r5, #0]
 8016db4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016db8:	81a3      	strh	r3, [r4, #12]
 8016dba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016dbe:	e033      	b.n	8016e28 <__swsetup_r+0x98>
 8016dc0:	0758      	lsls	r0, r3, #29
 8016dc2:	d512      	bpl.n	8016dea <__swsetup_r+0x5a>
 8016dc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016dc6:	b141      	cbz	r1, 8016dda <__swsetup_r+0x4a>
 8016dc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016dcc:	4299      	cmp	r1, r3
 8016dce:	d002      	beq.n	8016dd6 <__swsetup_r+0x46>
 8016dd0:	4628      	mov	r0, r5
 8016dd2:	f000 f967 	bl	80170a4 <_free_r>
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8016dda:	89a3      	ldrh	r3, [r4, #12]
 8016ddc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016de0:	81a3      	strh	r3, [r4, #12]
 8016de2:	2300      	movs	r3, #0
 8016de4:	6063      	str	r3, [r4, #4]
 8016de6:	6923      	ldr	r3, [r4, #16]
 8016de8:	6023      	str	r3, [r4, #0]
 8016dea:	89a3      	ldrh	r3, [r4, #12]
 8016dec:	f043 0308 	orr.w	r3, r3, #8
 8016df0:	81a3      	strh	r3, [r4, #12]
 8016df2:	6923      	ldr	r3, [r4, #16]
 8016df4:	b94b      	cbnz	r3, 8016e0a <__swsetup_r+0x7a>
 8016df6:	89a3      	ldrh	r3, [r4, #12]
 8016df8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016e00:	d003      	beq.n	8016e0a <__swsetup_r+0x7a>
 8016e02:	4621      	mov	r1, r4
 8016e04:	4628      	mov	r0, r5
 8016e06:	f001 f9ad 	bl	8018164 <__smakebuf_r>
 8016e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e0e:	f013 0201 	ands.w	r2, r3, #1
 8016e12:	d00a      	beq.n	8016e2a <__swsetup_r+0x9a>
 8016e14:	2200      	movs	r2, #0
 8016e16:	60a2      	str	r2, [r4, #8]
 8016e18:	6962      	ldr	r2, [r4, #20]
 8016e1a:	4252      	negs	r2, r2
 8016e1c:	61a2      	str	r2, [r4, #24]
 8016e1e:	6922      	ldr	r2, [r4, #16]
 8016e20:	b942      	cbnz	r2, 8016e34 <__swsetup_r+0xa4>
 8016e22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016e26:	d1c5      	bne.n	8016db4 <__swsetup_r+0x24>
 8016e28:	bd38      	pop	{r3, r4, r5, pc}
 8016e2a:	0799      	lsls	r1, r3, #30
 8016e2c:	bf58      	it	pl
 8016e2e:	6962      	ldrpl	r2, [r4, #20]
 8016e30:	60a2      	str	r2, [r4, #8]
 8016e32:	e7f4      	b.n	8016e1e <__swsetup_r+0x8e>
 8016e34:	2000      	movs	r0, #0
 8016e36:	e7f7      	b.n	8016e28 <__swsetup_r+0x98>
 8016e38:	24000020 	.word	0x24000020

08016e3c <memset>:
 8016e3c:	4402      	add	r2, r0
 8016e3e:	4603      	mov	r3, r0
 8016e40:	4293      	cmp	r3, r2
 8016e42:	d100      	bne.n	8016e46 <memset+0xa>
 8016e44:	4770      	bx	lr
 8016e46:	f803 1b01 	strb.w	r1, [r3], #1
 8016e4a:	e7f9      	b.n	8016e40 <memset+0x4>

08016e4c <strncmp>:
 8016e4c:	b510      	push	{r4, lr}
 8016e4e:	b16a      	cbz	r2, 8016e6c <strncmp+0x20>
 8016e50:	3901      	subs	r1, #1
 8016e52:	1884      	adds	r4, r0, r2
 8016e54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016e58:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016e5c:	429a      	cmp	r2, r3
 8016e5e:	d103      	bne.n	8016e68 <strncmp+0x1c>
 8016e60:	42a0      	cmp	r0, r4
 8016e62:	d001      	beq.n	8016e68 <strncmp+0x1c>
 8016e64:	2a00      	cmp	r2, #0
 8016e66:	d1f5      	bne.n	8016e54 <strncmp+0x8>
 8016e68:	1ad0      	subs	r0, r2, r3
 8016e6a:	bd10      	pop	{r4, pc}
 8016e6c:	4610      	mov	r0, r2
 8016e6e:	e7fc      	b.n	8016e6a <strncmp+0x1e>

08016e70 <strncpy>:
 8016e70:	b510      	push	{r4, lr}
 8016e72:	3901      	subs	r1, #1
 8016e74:	4603      	mov	r3, r0
 8016e76:	b132      	cbz	r2, 8016e86 <strncpy+0x16>
 8016e78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016e7c:	f803 4b01 	strb.w	r4, [r3], #1
 8016e80:	3a01      	subs	r2, #1
 8016e82:	2c00      	cmp	r4, #0
 8016e84:	d1f7      	bne.n	8016e76 <strncpy+0x6>
 8016e86:	441a      	add	r2, r3
 8016e88:	2100      	movs	r1, #0
 8016e8a:	4293      	cmp	r3, r2
 8016e8c:	d100      	bne.n	8016e90 <strncpy+0x20>
 8016e8e:	bd10      	pop	{r4, pc}
 8016e90:	f803 1b01 	strb.w	r1, [r3], #1
 8016e94:	e7f9      	b.n	8016e8a <strncpy+0x1a>

08016e96 <strstr>:
 8016e96:	780a      	ldrb	r2, [r1, #0]
 8016e98:	b570      	push	{r4, r5, r6, lr}
 8016e9a:	b96a      	cbnz	r2, 8016eb8 <strstr+0x22>
 8016e9c:	bd70      	pop	{r4, r5, r6, pc}
 8016e9e:	429a      	cmp	r2, r3
 8016ea0:	d109      	bne.n	8016eb6 <strstr+0x20>
 8016ea2:	460c      	mov	r4, r1
 8016ea4:	4605      	mov	r5, r0
 8016ea6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d0f6      	beq.n	8016e9c <strstr+0x6>
 8016eae:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016eb2:	429e      	cmp	r6, r3
 8016eb4:	d0f7      	beq.n	8016ea6 <strstr+0x10>
 8016eb6:	3001      	adds	r0, #1
 8016eb8:	7803      	ldrb	r3, [r0, #0]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d1ef      	bne.n	8016e9e <strstr+0x8>
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	e7ec      	b.n	8016e9c <strstr+0x6>
	...

08016ec4 <_close_r>:
 8016ec4:	b538      	push	{r3, r4, r5, lr}
 8016ec6:	4d06      	ldr	r5, [pc, #24]	@ (8016ee0 <_close_r+0x1c>)
 8016ec8:	2300      	movs	r3, #0
 8016eca:	4604      	mov	r4, r0
 8016ecc:	4608      	mov	r0, r1
 8016ece:	602b      	str	r3, [r5, #0]
 8016ed0:	f7ea fb1c 	bl	800150c <_close>
 8016ed4:	1c43      	adds	r3, r0, #1
 8016ed6:	d102      	bne.n	8016ede <_close_r+0x1a>
 8016ed8:	682b      	ldr	r3, [r5, #0]
 8016eda:	b103      	cbz	r3, 8016ede <_close_r+0x1a>
 8016edc:	6023      	str	r3, [r4, #0]
 8016ede:	bd38      	pop	{r3, r4, r5, pc}
 8016ee0:	240055d0 	.word	0x240055d0

08016ee4 <_reclaim_reent>:
 8016ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8016f9c <_reclaim_reent+0xb8>)
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	4283      	cmp	r3, r0
 8016eea:	b570      	push	{r4, r5, r6, lr}
 8016eec:	4604      	mov	r4, r0
 8016eee:	d053      	beq.n	8016f98 <_reclaim_reent+0xb4>
 8016ef0:	69c3      	ldr	r3, [r0, #28]
 8016ef2:	b31b      	cbz	r3, 8016f3c <_reclaim_reent+0x58>
 8016ef4:	68db      	ldr	r3, [r3, #12]
 8016ef6:	b163      	cbz	r3, 8016f12 <_reclaim_reent+0x2e>
 8016ef8:	2500      	movs	r5, #0
 8016efa:	69e3      	ldr	r3, [r4, #28]
 8016efc:	68db      	ldr	r3, [r3, #12]
 8016efe:	5959      	ldr	r1, [r3, r5]
 8016f00:	b9b1      	cbnz	r1, 8016f30 <_reclaim_reent+0x4c>
 8016f02:	3504      	adds	r5, #4
 8016f04:	2d80      	cmp	r5, #128	@ 0x80
 8016f06:	d1f8      	bne.n	8016efa <_reclaim_reent+0x16>
 8016f08:	69e3      	ldr	r3, [r4, #28]
 8016f0a:	4620      	mov	r0, r4
 8016f0c:	68d9      	ldr	r1, [r3, #12]
 8016f0e:	f000 f8c9 	bl	80170a4 <_free_r>
 8016f12:	69e3      	ldr	r3, [r4, #28]
 8016f14:	6819      	ldr	r1, [r3, #0]
 8016f16:	b111      	cbz	r1, 8016f1e <_reclaim_reent+0x3a>
 8016f18:	4620      	mov	r0, r4
 8016f1a:	f000 f8c3 	bl	80170a4 <_free_r>
 8016f1e:	69e3      	ldr	r3, [r4, #28]
 8016f20:	689d      	ldr	r5, [r3, #8]
 8016f22:	b15d      	cbz	r5, 8016f3c <_reclaim_reent+0x58>
 8016f24:	4629      	mov	r1, r5
 8016f26:	4620      	mov	r0, r4
 8016f28:	682d      	ldr	r5, [r5, #0]
 8016f2a:	f000 f8bb 	bl	80170a4 <_free_r>
 8016f2e:	e7f8      	b.n	8016f22 <_reclaim_reent+0x3e>
 8016f30:	680e      	ldr	r6, [r1, #0]
 8016f32:	4620      	mov	r0, r4
 8016f34:	f000 f8b6 	bl	80170a4 <_free_r>
 8016f38:	4631      	mov	r1, r6
 8016f3a:	e7e1      	b.n	8016f00 <_reclaim_reent+0x1c>
 8016f3c:	6961      	ldr	r1, [r4, #20]
 8016f3e:	b111      	cbz	r1, 8016f46 <_reclaim_reent+0x62>
 8016f40:	4620      	mov	r0, r4
 8016f42:	f000 f8af 	bl	80170a4 <_free_r>
 8016f46:	69e1      	ldr	r1, [r4, #28]
 8016f48:	b111      	cbz	r1, 8016f50 <_reclaim_reent+0x6c>
 8016f4a:	4620      	mov	r0, r4
 8016f4c:	f000 f8aa 	bl	80170a4 <_free_r>
 8016f50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016f52:	b111      	cbz	r1, 8016f5a <_reclaim_reent+0x76>
 8016f54:	4620      	mov	r0, r4
 8016f56:	f000 f8a5 	bl	80170a4 <_free_r>
 8016f5a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016f5c:	b111      	cbz	r1, 8016f64 <_reclaim_reent+0x80>
 8016f5e:	4620      	mov	r0, r4
 8016f60:	f000 f8a0 	bl	80170a4 <_free_r>
 8016f64:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8016f66:	b111      	cbz	r1, 8016f6e <_reclaim_reent+0x8a>
 8016f68:	4620      	mov	r0, r4
 8016f6a:	f000 f89b 	bl	80170a4 <_free_r>
 8016f6e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8016f70:	b111      	cbz	r1, 8016f78 <_reclaim_reent+0x94>
 8016f72:	4620      	mov	r0, r4
 8016f74:	f000 f896 	bl	80170a4 <_free_r>
 8016f78:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8016f7a:	b111      	cbz	r1, 8016f82 <_reclaim_reent+0x9e>
 8016f7c:	4620      	mov	r0, r4
 8016f7e:	f000 f891 	bl	80170a4 <_free_r>
 8016f82:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8016f84:	b111      	cbz	r1, 8016f8c <_reclaim_reent+0xa8>
 8016f86:	4620      	mov	r0, r4
 8016f88:	f000 f88c 	bl	80170a4 <_free_r>
 8016f8c:	6a23      	ldr	r3, [r4, #32]
 8016f8e:	b11b      	cbz	r3, 8016f98 <_reclaim_reent+0xb4>
 8016f90:	4620      	mov	r0, r4
 8016f92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f96:	4718      	bx	r3
 8016f98:	bd70      	pop	{r4, r5, r6, pc}
 8016f9a:	bf00      	nop
 8016f9c:	24000020 	.word	0x24000020

08016fa0 <_lseek_r>:
 8016fa0:	b538      	push	{r3, r4, r5, lr}
 8016fa2:	4d07      	ldr	r5, [pc, #28]	@ (8016fc0 <_lseek_r+0x20>)
 8016fa4:	4604      	mov	r4, r0
 8016fa6:	4608      	mov	r0, r1
 8016fa8:	4611      	mov	r1, r2
 8016faa:	2200      	movs	r2, #0
 8016fac:	602a      	str	r2, [r5, #0]
 8016fae:	461a      	mov	r2, r3
 8016fb0:	f7ea fac3 	bl	800153a <_lseek>
 8016fb4:	1c43      	adds	r3, r0, #1
 8016fb6:	d102      	bne.n	8016fbe <_lseek_r+0x1e>
 8016fb8:	682b      	ldr	r3, [r5, #0]
 8016fba:	b103      	cbz	r3, 8016fbe <_lseek_r+0x1e>
 8016fbc:	6023      	str	r3, [r4, #0]
 8016fbe:	bd38      	pop	{r3, r4, r5, pc}
 8016fc0:	240055d0 	.word	0x240055d0

08016fc4 <_read_r>:
 8016fc4:	b538      	push	{r3, r4, r5, lr}
 8016fc6:	4d07      	ldr	r5, [pc, #28]	@ (8016fe4 <_read_r+0x20>)
 8016fc8:	4604      	mov	r4, r0
 8016fca:	4608      	mov	r0, r1
 8016fcc:	4611      	mov	r1, r2
 8016fce:	2200      	movs	r2, #0
 8016fd0:	602a      	str	r2, [r5, #0]
 8016fd2:	461a      	mov	r2, r3
 8016fd4:	f7ea fac2 	bl	800155c <_read>
 8016fd8:	1c43      	adds	r3, r0, #1
 8016fda:	d102      	bne.n	8016fe2 <_read_r+0x1e>
 8016fdc:	682b      	ldr	r3, [r5, #0]
 8016fde:	b103      	cbz	r3, 8016fe2 <_read_r+0x1e>
 8016fe0:	6023      	str	r3, [r4, #0]
 8016fe2:	bd38      	pop	{r3, r4, r5, pc}
 8016fe4:	240055d0 	.word	0x240055d0

08016fe8 <_sbrk_r>:
 8016fe8:	b538      	push	{r3, r4, r5, lr}
 8016fea:	4d06      	ldr	r5, [pc, #24]	@ (8017004 <_sbrk_r+0x1c>)
 8016fec:	2300      	movs	r3, #0
 8016fee:	4604      	mov	r4, r0
 8016ff0:	4608      	mov	r0, r1
 8016ff2:	602b      	str	r3, [r5, #0]
 8016ff4:	f7ea fd38 	bl	8001a68 <_sbrk>
 8016ff8:	1c43      	adds	r3, r0, #1
 8016ffa:	d102      	bne.n	8017002 <_sbrk_r+0x1a>
 8016ffc:	682b      	ldr	r3, [r5, #0]
 8016ffe:	b103      	cbz	r3, 8017002 <_sbrk_r+0x1a>
 8017000:	6023      	str	r3, [r4, #0]
 8017002:	bd38      	pop	{r3, r4, r5, pc}
 8017004:	240055d0 	.word	0x240055d0

08017008 <_write_r>:
 8017008:	b538      	push	{r3, r4, r5, lr}
 801700a:	4d07      	ldr	r5, [pc, #28]	@ (8017028 <_write_r+0x20>)
 801700c:	4604      	mov	r4, r0
 801700e:	4608      	mov	r0, r1
 8017010:	4611      	mov	r1, r2
 8017012:	2200      	movs	r2, #0
 8017014:	602a      	str	r2, [r5, #0]
 8017016:	461a      	mov	r2, r3
 8017018:	f7ea fa4c 	bl	80014b4 <_write>
 801701c:	1c43      	adds	r3, r0, #1
 801701e:	d102      	bne.n	8017026 <_write_r+0x1e>
 8017020:	682b      	ldr	r3, [r5, #0]
 8017022:	b103      	cbz	r3, 8017026 <_write_r+0x1e>
 8017024:	6023      	str	r3, [r4, #0]
 8017026:	bd38      	pop	{r3, r4, r5, pc}
 8017028:	240055d0 	.word	0x240055d0

0801702c <__errno>:
 801702c:	4b01      	ldr	r3, [pc, #4]	@ (8017034 <__errno+0x8>)
 801702e:	6818      	ldr	r0, [r3, #0]
 8017030:	4770      	bx	lr
 8017032:	bf00      	nop
 8017034:	24000020 	.word	0x24000020

08017038 <__libc_init_array>:
 8017038:	b570      	push	{r4, r5, r6, lr}
 801703a:	4d0d      	ldr	r5, [pc, #52]	@ (8017070 <__libc_init_array+0x38>)
 801703c:	4c0d      	ldr	r4, [pc, #52]	@ (8017074 <__libc_init_array+0x3c>)
 801703e:	1b64      	subs	r4, r4, r5
 8017040:	10a4      	asrs	r4, r4, #2
 8017042:	2600      	movs	r6, #0
 8017044:	42a6      	cmp	r6, r4
 8017046:	d109      	bne.n	801705c <__libc_init_array+0x24>
 8017048:	4d0b      	ldr	r5, [pc, #44]	@ (8017078 <__libc_init_array+0x40>)
 801704a:	4c0c      	ldr	r4, [pc, #48]	@ (801707c <__libc_init_array+0x44>)
 801704c:	f001 fa98 	bl	8018580 <_init>
 8017050:	1b64      	subs	r4, r4, r5
 8017052:	10a4      	asrs	r4, r4, #2
 8017054:	2600      	movs	r6, #0
 8017056:	42a6      	cmp	r6, r4
 8017058:	d105      	bne.n	8017066 <__libc_init_array+0x2e>
 801705a:	bd70      	pop	{r4, r5, r6, pc}
 801705c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017060:	4798      	blx	r3
 8017062:	3601      	adds	r6, #1
 8017064:	e7ee      	b.n	8017044 <__libc_init_array+0xc>
 8017066:	f855 3b04 	ldr.w	r3, [r5], #4
 801706a:	4798      	blx	r3
 801706c:	3601      	adds	r6, #1
 801706e:	e7f2      	b.n	8017056 <__libc_init_array+0x1e>
 8017070:	08018c9c 	.word	0x08018c9c
 8017074:	08018c9c 	.word	0x08018c9c
 8017078:	08018c9c 	.word	0x08018c9c
 801707c:	08018ca4 	.word	0x08018ca4

08017080 <__retarget_lock_init_recursive>:
 8017080:	4770      	bx	lr

08017082 <__retarget_lock_acquire_recursive>:
 8017082:	4770      	bx	lr

08017084 <__retarget_lock_release_recursive>:
 8017084:	4770      	bx	lr

08017086 <memcpy>:
 8017086:	440a      	add	r2, r1
 8017088:	4291      	cmp	r1, r2
 801708a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801708e:	d100      	bne.n	8017092 <memcpy+0xc>
 8017090:	4770      	bx	lr
 8017092:	b510      	push	{r4, lr}
 8017094:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017098:	f803 4f01 	strb.w	r4, [r3, #1]!
 801709c:	4291      	cmp	r1, r2
 801709e:	d1f9      	bne.n	8017094 <memcpy+0xe>
 80170a0:	bd10      	pop	{r4, pc}
	...

080170a4 <_free_r>:
 80170a4:	b538      	push	{r3, r4, r5, lr}
 80170a6:	4605      	mov	r5, r0
 80170a8:	2900      	cmp	r1, #0
 80170aa:	d041      	beq.n	8017130 <_free_r+0x8c>
 80170ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80170b0:	1f0c      	subs	r4, r1, #4
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	bfb8      	it	lt
 80170b6:	18e4      	addlt	r4, r4, r3
 80170b8:	f7ff fb9c 	bl	80167f4 <__malloc_lock>
 80170bc:	4a1d      	ldr	r2, [pc, #116]	@ (8017134 <_free_r+0x90>)
 80170be:	6813      	ldr	r3, [r2, #0]
 80170c0:	b933      	cbnz	r3, 80170d0 <_free_r+0x2c>
 80170c2:	6063      	str	r3, [r4, #4]
 80170c4:	6014      	str	r4, [r2, #0]
 80170c6:	4628      	mov	r0, r5
 80170c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80170cc:	f7ff bb98 	b.w	8016800 <__malloc_unlock>
 80170d0:	42a3      	cmp	r3, r4
 80170d2:	d908      	bls.n	80170e6 <_free_r+0x42>
 80170d4:	6820      	ldr	r0, [r4, #0]
 80170d6:	1821      	adds	r1, r4, r0
 80170d8:	428b      	cmp	r3, r1
 80170da:	bf01      	itttt	eq
 80170dc:	6819      	ldreq	r1, [r3, #0]
 80170de:	685b      	ldreq	r3, [r3, #4]
 80170e0:	1809      	addeq	r1, r1, r0
 80170e2:	6021      	streq	r1, [r4, #0]
 80170e4:	e7ed      	b.n	80170c2 <_free_r+0x1e>
 80170e6:	461a      	mov	r2, r3
 80170e8:	685b      	ldr	r3, [r3, #4]
 80170ea:	b10b      	cbz	r3, 80170f0 <_free_r+0x4c>
 80170ec:	42a3      	cmp	r3, r4
 80170ee:	d9fa      	bls.n	80170e6 <_free_r+0x42>
 80170f0:	6811      	ldr	r1, [r2, #0]
 80170f2:	1850      	adds	r0, r2, r1
 80170f4:	42a0      	cmp	r0, r4
 80170f6:	d10b      	bne.n	8017110 <_free_r+0x6c>
 80170f8:	6820      	ldr	r0, [r4, #0]
 80170fa:	4401      	add	r1, r0
 80170fc:	1850      	adds	r0, r2, r1
 80170fe:	4283      	cmp	r3, r0
 8017100:	6011      	str	r1, [r2, #0]
 8017102:	d1e0      	bne.n	80170c6 <_free_r+0x22>
 8017104:	6818      	ldr	r0, [r3, #0]
 8017106:	685b      	ldr	r3, [r3, #4]
 8017108:	6053      	str	r3, [r2, #4]
 801710a:	4408      	add	r0, r1
 801710c:	6010      	str	r0, [r2, #0]
 801710e:	e7da      	b.n	80170c6 <_free_r+0x22>
 8017110:	d902      	bls.n	8017118 <_free_r+0x74>
 8017112:	230c      	movs	r3, #12
 8017114:	602b      	str	r3, [r5, #0]
 8017116:	e7d6      	b.n	80170c6 <_free_r+0x22>
 8017118:	6820      	ldr	r0, [r4, #0]
 801711a:	1821      	adds	r1, r4, r0
 801711c:	428b      	cmp	r3, r1
 801711e:	bf04      	itt	eq
 8017120:	6819      	ldreq	r1, [r3, #0]
 8017122:	685b      	ldreq	r3, [r3, #4]
 8017124:	6063      	str	r3, [r4, #4]
 8017126:	bf04      	itt	eq
 8017128:	1809      	addeq	r1, r1, r0
 801712a:	6021      	streq	r1, [r4, #0]
 801712c:	6054      	str	r4, [r2, #4]
 801712e:	e7ca      	b.n	80170c6 <_free_r+0x22>
 8017130:	bd38      	pop	{r3, r4, r5, pc}
 8017132:	bf00      	nop
 8017134:	24005490 	.word	0x24005490

08017138 <__ssputs_r>:
 8017138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801713c:	688e      	ldr	r6, [r1, #8]
 801713e:	461f      	mov	r7, r3
 8017140:	42be      	cmp	r6, r7
 8017142:	680b      	ldr	r3, [r1, #0]
 8017144:	4682      	mov	sl, r0
 8017146:	460c      	mov	r4, r1
 8017148:	4690      	mov	r8, r2
 801714a:	d82d      	bhi.n	80171a8 <__ssputs_r+0x70>
 801714c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017150:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017154:	d026      	beq.n	80171a4 <__ssputs_r+0x6c>
 8017156:	6965      	ldr	r5, [r4, #20]
 8017158:	6909      	ldr	r1, [r1, #16]
 801715a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801715e:	eba3 0901 	sub.w	r9, r3, r1
 8017162:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017166:	1c7b      	adds	r3, r7, #1
 8017168:	444b      	add	r3, r9
 801716a:	106d      	asrs	r5, r5, #1
 801716c:	429d      	cmp	r5, r3
 801716e:	bf38      	it	cc
 8017170:	461d      	movcc	r5, r3
 8017172:	0553      	lsls	r3, r2, #21
 8017174:	d527      	bpl.n	80171c6 <__ssputs_r+0x8e>
 8017176:	4629      	mov	r1, r5
 8017178:	f7ff fabc 	bl	80166f4 <_malloc_r>
 801717c:	4606      	mov	r6, r0
 801717e:	b360      	cbz	r0, 80171da <__ssputs_r+0xa2>
 8017180:	6921      	ldr	r1, [r4, #16]
 8017182:	464a      	mov	r2, r9
 8017184:	f7ff ff7f 	bl	8017086 <memcpy>
 8017188:	89a3      	ldrh	r3, [r4, #12]
 801718a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801718e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017192:	81a3      	strh	r3, [r4, #12]
 8017194:	6126      	str	r6, [r4, #16]
 8017196:	6165      	str	r5, [r4, #20]
 8017198:	444e      	add	r6, r9
 801719a:	eba5 0509 	sub.w	r5, r5, r9
 801719e:	6026      	str	r6, [r4, #0]
 80171a0:	60a5      	str	r5, [r4, #8]
 80171a2:	463e      	mov	r6, r7
 80171a4:	42be      	cmp	r6, r7
 80171a6:	d900      	bls.n	80171aa <__ssputs_r+0x72>
 80171a8:	463e      	mov	r6, r7
 80171aa:	6820      	ldr	r0, [r4, #0]
 80171ac:	4632      	mov	r2, r6
 80171ae:	4641      	mov	r1, r8
 80171b0:	f001 f887 	bl	80182c2 <memmove>
 80171b4:	68a3      	ldr	r3, [r4, #8]
 80171b6:	1b9b      	subs	r3, r3, r6
 80171b8:	60a3      	str	r3, [r4, #8]
 80171ba:	6823      	ldr	r3, [r4, #0]
 80171bc:	4433      	add	r3, r6
 80171be:	6023      	str	r3, [r4, #0]
 80171c0:	2000      	movs	r0, #0
 80171c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171c6:	462a      	mov	r2, r5
 80171c8:	f001 f8b8 	bl	801833c <_realloc_r>
 80171cc:	4606      	mov	r6, r0
 80171ce:	2800      	cmp	r0, #0
 80171d0:	d1e0      	bne.n	8017194 <__ssputs_r+0x5c>
 80171d2:	6921      	ldr	r1, [r4, #16]
 80171d4:	4650      	mov	r0, sl
 80171d6:	f7ff ff65 	bl	80170a4 <_free_r>
 80171da:	230c      	movs	r3, #12
 80171dc:	f8ca 3000 	str.w	r3, [sl]
 80171e0:	89a3      	ldrh	r3, [r4, #12]
 80171e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80171e6:	81a3      	strh	r3, [r4, #12]
 80171e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80171ec:	e7e9      	b.n	80171c2 <__ssputs_r+0x8a>
	...

080171f0 <_svfiprintf_r>:
 80171f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171f4:	4698      	mov	r8, r3
 80171f6:	898b      	ldrh	r3, [r1, #12]
 80171f8:	061b      	lsls	r3, r3, #24
 80171fa:	b09d      	sub	sp, #116	@ 0x74
 80171fc:	4607      	mov	r7, r0
 80171fe:	460d      	mov	r5, r1
 8017200:	4614      	mov	r4, r2
 8017202:	d510      	bpl.n	8017226 <_svfiprintf_r+0x36>
 8017204:	690b      	ldr	r3, [r1, #16]
 8017206:	b973      	cbnz	r3, 8017226 <_svfiprintf_r+0x36>
 8017208:	2140      	movs	r1, #64	@ 0x40
 801720a:	f7ff fa73 	bl	80166f4 <_malloc_r>
 801720e:	6028      	str	r0, [r5, #0]
 8017210:	6128      	str	r0, [r5, #16]
 8017212:	b930      	cbnz	r0, 8017222 <_svfiprintf_r+0x32>
 8017214:	230c      	movs	r3, #12
 8017216:	603b      	str	r3, [r7, #0]
 8017218:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801721c:	b01d      	add	sp, #116	@ 0x74
 801721e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017222:	2340      	movs	r3, #64	@ 0x40
 8017224:	616b      	str	r3, [r5, #20]
 8017226:	2300      	movs	r3, #0
 8017228:	9309      	str	r3, [sp, #36]	@ 0x24
 801722a:	2320      	movs	r3, #32
 801722c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017230:	f8cd 800c 	str.w	r8, [sp, #12]
 8017234:	2330      	movs	r3, #48	@ 0x30
 8017236:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80173d4 <_svfiprintf_r+0x1e4>
 801723a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801723e:	f04f 0901 	mov.w	r9, #1
 8017242:	4623      	mov	r3, r4
 8017244:	469a      	mov	sl, r3
 8017246:	f813 2b01 	ldrb.w	r2, [r3], #1
 801724a:	b10a      	cbz	r2, 8017250 <_svfiprintf_r+0x60>
 801724c:	2a25      	cmp	r2, #37	@ 0x25
 801724e:	d1f9      	bne.n	8017244 <_svfiprintf_r+0x54>
 8017250:	ebba 0b04 	subs.w	fp, sl, r4
 8017254:	d00b      	beq.n	801726e <_svfiprintf_r+0x7e>
 8017256:	465b      	mov	r3, fp
 8017258:	4622      	mov	r2, r4
 801725a:	4629      	mov	r1, r5
 801725c:	4638      	mov	r0, r7
 801725e:	f7ff ff6b 	bl	8017138 <__ssputs_r>
 8017262:	3001      	adds	r0, #1
 8017264:	f000 80a7 	beq.w	80173b6 <_svfiprintf_r+0x1c6>
 8017268:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801726a:	445a      	add	r2, fp
 801726c:	9209      	str	r2, [sp, #36]	@ 0x24
 801726e:	f89a 3000 	ldrb.w	r3, [sl]
 8017272:	2b00      	cmp	r3, #0
 8017274:	f000 809f 	beq.w	80173b6 <_svfiprintf_r+0x1c6>
 8017278:	2300      	movs	r3, #0
 801727a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801727e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017282:	f10a 0a01 	add.w	sl, sl, #1
 8017286:	9304      	str	r3, [sp, #16]
 8017288:	9307      	str	r3, [sp, #28]
 801728a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801728e:	931a      	str	r3, [sp, #104]	@ 0x68
 8017290:	4654      	mov	r4, sl
 8017292:	2205      	movs	r2, #5
 8017294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017298:	484e      	ldr	r0, [pc, #312]	@ (80173d4 <_svfiprintf_r+0x1e4>)
 801729a:	f7e9 f829 	bl	80002f0 <memchr>
 801729e:	9a04      	ldr	r2, [sp, #16]
 80172a0:	b9d8      	cbnz	r0, 80172da <_svfiprintf_r+0xea>
 80172a2:	06d0      	lsls	r0, r2, #27
 80172a4:	bf44      	itt	mi
 80172a6:	2320      	movmi	r3, #32
 80172a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80172ac:	0711      	lsls	r1, r2, #28
 80172ae:	bf44      	itt	mi
 80172b0:	232b      	movmi	r3, #43	@ 0x2b
 80172b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80172b6:	f89a 3000 	ldrb.w	r3, [sl]
 80172ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80172bc:	d015      	beq.n	80172ea <_svfiprintf_r+0xfa>
 80172be:	9a07      	ldr	r2, [sp, #28]
 80172c0:	4654      	mov	r4, sl
 80172c2:	2000      	movs	r0, #0
 80172c4:	f04f 0c0a 	mov.w	ip, #10
 80172c8:	4621      	mov	r1, r4
 80172ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80172ce:	3b30      	subs	r3, #48	@ 0x30
 80172d0:	2b09      	cmp	r3, #9
 80172d2:	d94b      	bls.n	801736c <_svfiprintf_r+0x17c>
 80172d4:	b1b0      	cbz	r0, 8017304 <_svfiprintf_r+0x114>
 80172d6:	9207      	str	r2, [sp, #28]
 80172d8:	e014      	b.n	8017304 <_svfiprintf_r+0x114>
 80172da:	eba0 0308 	sub.w	r3, r0, r8
 80172de:	fa09 f303 	lsl.w	r3, r9, r3
 80172e2:	4313      	orrs	r3, r2
 80172e4:	9304      	str	r3, [sp, #16]
 80172e6:	46a2      	mov	sl, r4
 80172e8:	e7d2      	b.n	8017290 <_svfiprintf_r+0xa0>
 80172ea:	9b03      	ldr	r3, [sp, #12]
 80172ec:	1d19      	adds	r1, r3, #4
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	9103      	str	r1, [sp, #12]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	bfbb      	ittet	lt
 80172f6:	425b      	neglt	r3, r3
 80172f8:	f042 0202 	orrlt.w	r2, r2, #2
 80172fc:	9307      	strge	r3, [sp, #28]
 80172fe:	9307      	strlt	r3, [sp, #28]
 8017300:	bfb8      	it	lt
 8017302:	9204      	strlt	r2, [sp, #16]
 8017304:	7823      	ldrb	r3, [r4, #0]
 8017306:	2b2e      	cmp	r3, #46	@ 0x2e
 8017308:	d10a      	bne.n	8017320 <_svfiprintf_r+0x130>
 801730a:	7863      	ldrb	r3, [r4, #1]
 801730c:	2b2a      	cmp	r3, #42	@ 0x2a
 801730e:	d132      	bne.n	8017376 <_svfiprintf_r+0x186>
 8017310:	9b03      	ldr	r3, [sp, #12]
 8017312:	1d1a      	adds	r2, r3, #4
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	9203      	str	r2, [sp, #12]
 8017318:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801731c:	3402      	adds	r4, #2
 801731e:	9305      	str	r3, [sp, #20]
 8017320:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80173e4 <_svfiprintf_r+0x1f4>
 8017324:	7821      	ldrb	r1, [r4, #0]
 8017326:	2203      	movs	r2, #3
 8017328:	4650      	mov	r0, sl
 801732a:	f7e8 ffe1 	bl	80002f0 <memchr>
 801732e:	b138      	cbz	r0, 8017340 <_svfiprintf_r+0x150>
 8017330:	9b04      	ldr	r3, [sp, #16]
 8017332:	eba0 000a 	sub.w	r0, r0, sl
 8017336:	2240      	movs	r2, #64	@ 0x40
 8017338:	4082      	lsls	r2, r0
 801733a:	4313      	orrs	r3, r2
 801733c:	3401      	adds	r4, #1
 801733e:	9304      	str	r3, [sp, #16]
 8017340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017344:	4824      	ldr	r0, [pc, #144]	@ (80173d8 <_svfiprintf_r+0x1e8>)
 8017346:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801734a:	2206      	movs	r2, #6
 801734c:	f7e8 ffd0 	bl	80002f0 <memchr>
 8017350:	2800      	cmp	r0, #0
 8017352:	d036      	beq.n	80173c2 <_svfiprintf_r+0x1d2>
 8017354:	4b21      	ldr	r3, [pc, #132]	@ (80173dc <_svfiprintf_r+0x1ec>)
 8017356:	bb1b      	cbnz	r3, 80173a0 <_svfiprintf_r+0x1b0>
 8017358:	9b03      	ldr	r3, [sp, #12]
 801735a:	3307      	adds	r3, #7
 801735c:	f023 0307 	bic.w	r3, r3, #7
 8017360:	3308      	adds	r3, #8
 8017362:	9303      	str	r3, [sp, #12]
 8017364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017366:	4433      	add	r3, r6
 8017368:	9309      	str	r3, [sp, #36]	@ 0x24
 801736a:	e76a      	b.n	8017242 <_svfiprintf_r+0x52>
 801736c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017370:	460c      	mov	r4, r1
 8017372:	2001      	movs	r0, #1
 8017374:	e7a8      	b.n	80172c8 <_svfiprintf_r+0xd8>
 8017376:	2300      	movs	r3, #0
 8017378:	3401      	adds	r4, #1
 801737a:	9305      	str	r3, [sp, #20]
 801737c:	4619      	mov	r1, r3
 801737e:	f04f 0c0a 	mov.w	ip, #10
 8017382:	4620      	mov	r0, r4
 8017384:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017388:	3a30      	subs	r2, #48	@ 0x30
 801738a:	2a09      	cmp	r2, #9
 801738c:	d903      	bls.n	8017396 <_svfiprintf_r+0x1a6>
 801738e:	2b00      	cmp	r3, #0
 8017390:	d0c6      	beq.n	8017320 <_svfiprintf_r+0x130>
 8017392:	9105      	str	r1, [sp, #20]
 8017394:	e7c4      	b.n	8017320 <_svfiprintf_r+0x130>
 8017396:	fb0c 2101 	mla	r1, ip, r1, r2
 801739a:	4604      	mov	r4, r0
 801739c:	2301      	movs	r3, #1
 801739e:	e7f0      	b.n	8017382 <_svfiprintf_r+0x192>
 80173a0:	ab03      	add	r3, sp, #12
 80173a2:	9300      	str	r3, [sp, #0]
 80173a4:	462a      	mov	r2, r5
 80173a6:	4b0e      	ldr	r3, [pc, #56]	@ (80173e0 <_svfiprintf_r+0x1f0>)
 80173a8:	a904      	add	r1, sp, #16
 80173aa:	4638      	mov	r0, r7
 80173ac:	f3af 8000 	nop.w
 80173b0:	1c42      	adds	r2, r0, #1
 80173b2:	4606      	mov	r6, r0
 80173b4:	d1d6      	bne.n	8017364 <_svfiprintf_r+0x174>
 80173b6:	89ab      	ldrh	r3, [r5, #12]
 80173b8:	065b      	lsls	r3, r3, #25
 80173ba:	f53f af2d 	bmi.w	8017218 <_svfiprintf_r+0x28>
 80173be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80173c0:	e72c      	b.n	801721c <_svfiprintf_r+0x2c>
 80173c2:	ab03      	add	r3, sp, #12
 80173c4:	9300      	str	r3, [sp, #0]
 80173c6:	462a      	mov	r2, r5
 80173c8:	4b05      	ldr	r3, [pc, #20]	@ (80173e0 <_svfiprintf_r+0x1f0>)
 80173ca:	a904      	add	r1, sp, #16
 80173cc:	4638      	mov	r0, r7
 80173ce:	f000 fb8b 	bl	8017ae8 <_printf_i>
 80173d2:	e7ed      	b.n	80173b0 <_svfiprintf_r+0x1c0>
 80173d4:	08018c45 	.word	0x08018c45
 80173d8:	08018c4f 	.word	0x08018c4f
 80173dc:	00000000 	.word	0x00000000
 80173e0:	08017139 	.word	0x08017139
 80173e4:	08018c4b 	.word	0x08018c4b

080173e8 <_sungetc_r>:
 80173e8:	b538      	push	{r3, r4, r5, lr}
 80173ea:	1c4b      	adds	r3, r1, #1
 80173ec:	4614      	mov	r4, r2
 80173ee:	d103      	bne.n	80173f8 <_sungetc_r+0x10>
 80173f0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80173f4:	4628      	mov	r0, r5
 80173f6:	bd38      	pop	{r3, r4, r5, pc}
 80173f8:	8993      	ldrh	r3, [r2, #12]
 80173fa:	f023 0320 	bic.w	r3, r3, #32
 80173fe:	8193      	strh	r3, [r2, #12]
 8017400:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017402:	6852      	ldr	r2, [r2, #4]
 8017404:	b2cd      	uxtb	r5, r1
 8017406:	b18b      	cbz	r3, 801742c <_sungetc_r+0x44>
 8017408:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801740a:	4293      	cmp	r3, r2
 801740c:	dd08      	ble.n	8017420 <_sungetc_r+0x38>
 801740e:	6823      	ldr	r3, [r4, #0]
 8017410:	1e5a      	subs	r2, r3, #1
 8017412:	6022      	str	r2, [r4, #0]
 8017414:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017418:	6863      	ldr	r3, [r4, #4]
 801741a:	3301      	adds	r3, #1
 801741c:	6063      	str	r3, [r4, #4]
 801741e:	e7e9      	b.n	80173f4 <_sungetc_r+0xc>
 8017420:	4621      	mov	r1, r4
 8017422:	f000 ff14 	bl	801824e <__submore>
 8017426:	2800      	cmp	r0, #0
 8017428:	d0f1      	beq.n	801740e <_sungetc_r+0x26>
 801742a:	e7e1      	b.n	80173f0 <_sungetc_r+0x8>
 801742c:	6921      	ldr	r1, [r4, #16]
 801742e:	6823      	ldr	r3, [r4, #0]
 8017430:	b151      	cbz	r1, 8017448 <_sungetc_r+0x60>
 8017432:	4299      	cmp	r1, r3
 8017434:	d208      	bcs.n	8017448 <_sungetc_r+0x60>
 8017436:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801743a:	42a9      	cmp	r1, r5
 801743c:	d104      	bne.n	8017448 <_sungetc_r+0x60>
 801743e:	3b01      	subs	r3, #1
 8017440:	3201      	adds	r2, #1
 8017442:	6023      	str	r3, [r4, #0]
 8017444:	6062      	str	r2, [r4, #4]
 8017446:	e7d5      	b.n	80173f4 <_sungetc_r+0xc>
 8017448:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801744c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017450:	6363      	str	r3, [r4, #52]	@ 0x34
 8017452:	2303      	movs	r3, #3
 8017454:	63a3      	str	r3, [r4, #56]	@ 0x38
 8017456:	4623      	mov	r3, r4
 8017458:	f803 5f46 	strb.w	r5, [r3, #70]!
 801745c:	6023      	str	r3, [r4, #0]
 801745e:	2301      	movs	r3, #1
 8017460:	e7dc      	b.n	801741c <_sungetc_r+0x34>

08017462 <__ssrefill_r>:
 8017462:	b510      	push	{r4, lr}
 8017464:	460c      	mov	r4, r1
 8017466:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8017468:	b169      	cbz	r1, 8017486 <__ssrefill_r+0x24>
 801746a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801746e:	4299      	cmp	r1, r3
 8017470:	d001      	beq.n	8017476 <__ssrefill_r+0x14>
 8017472:	f7ff fe17 	bl	80170a4 <_free_r>
 8017476:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017478:	6063      	str	r3, [r4, #4]
 801747a:	2000      	movs	r0, #0
 801747c:	6360      	str	r0, [r4, #52]	@ 0x34
 801747e:	b113      	cbz	r3, 8017486 <__ssrefill_r+0x24>
 8017480:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8017482:	6023      	str	r3, [r4, #0]
 8017484:	bd10      	pop	{r4, pc}
 8017486:	6923      	ldr	r3, [r4, #16]
 8017488:	6023      	str	r3, [r4, #0]
 801748a:	2300      	movs	r3, #0
 801748c:	6063      	str	r3, [r4, #4]
 801748e:	89a3      	ldrh	r3, [r4, #12]
 8017490:	f043 0320 	orr.w	r3, r3, #32
 8017494:	81a3      	strh	r3, [r4, #12]
 8017496:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801749a:	e7f3      	b.n	8017484 <__ssrefill_r+0x22>

0801749c <__ssvfiscanf_r>:
 801749c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174a0:	460c      	mov	r4, r1
 80174a2:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80174a6:	2100      	movs	r1, #0
 80174a8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80174ac:	49a6      	ldr	r1, [pc, #664]	@ (8017748 <__ssvfiscanf_r+0x2ac>)
 80174ae:	91a0      	str	r1, [sp, #640]	@ 0x280
 80174b0:	f10d 0804 	add.w	r8, sp, #4
 80174b4:	49a5      	ldr	r1, [pc, #660]	@ (801774c <__ssvfiscanf_r+0x2b0>)
 80174b6:	4fa6      	ldr	r7, [pc, #664]	@ (8017750 <__ssvfiscanf_r+0x2b4>)
 80174b8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80174bc:	4606      	mov	r6, r0
 80174be:	91a1      	str	r1, [sp, #644]	@ 0x284
 80174c0:	9300      	str	r3, [sp, #0]
 80174c2:	f892 9000 	ldrb.w	r9, [r2]
 80174c6:	f1b9 0f00 	cmp.w	r9, #0
 80174ca:	f000 8158 	beq.w	801777e <__ssvfiscanf_r+0x2e2>
 80174ce:	f817 3009 	ldrb.w	r3, [r7, r9]
 80174d2:	f013 0308 	ands.w	r3, r3, #8
 80174d6:	f102 0501 	add.w	r5, r2, #1
 80174da:	d019      	beq.n	8017510 <__ssvfiscanf_r+0x74>
 80174dc:	6863      	ldr	r3, [r4, #4]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	dd0f      	ble.n	8017502 <__ssvfiscanf_r+0x66>
 80174e2:	6823      	ldr	r3, [r4, #0]
 80174e4:	781a      	ldrb	r2, [r3, #0]
 80174e6:	5cba      	ldrb	r2, [r7, r2]
 80174e8:	0712      	lsls	r2, r2, #28
 80174ea:	d401      	bmi.n	80174f0 <__ssvfiscanf_r+0x54>
 80174ec:	462a      	mov	r2, r5
 80174ee:	e7e8      	b.n	80174c2 <__ssvfiscanf_r+0x26>
 80174f0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80174f2:	3201      	adds	r2, #1
 80174f4:	9245      	str	r2, [sp, #276]	@ 0x114
 80174f6:	6862      	ldr	r2, [r4, #4]
 80174f8:	3301      	adds	r3, #1
 80174fa:	3a01      	subs	r2, #1
 80174fc:	6062      	str	r2, [r4, #4]
 80174fe:	6023      	str	r3, [r4, #0]
 8017500:	e7ec      	b.n	80174dc <__ssvfiscanf_r+0x40>
 8017502:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017504:	4621      	mov	r1, r4
 8017506:	4630      	mov	r0, r6
 8017508:	4798      	blx	r3
 801750a:	2800      	cmp	r0, #0
 801750c:	d0e9      	beq.n	80174e2 <__ssvfiscanf_r+0x46>
 801750e:	e7ed      	b.n	80174ec <__ssvfiscanf_r+0x50>
 8017510:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8017514:	f040 8085 	bne.w	8017622 <__ssvfiscanf_r+0x186>
 8017518:	9341      	str	r3, [sp, #260]	@ 0x104
 801751a:	9343      	str	r3, [sp, #268]	@ 0x10c
 801751c:	7853      	ldrb	r3, [r2, #1]
 801751e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017520:	bf02      	ittt	eq
 8017522:	2310      	moveq	r3, #16
 8017524:	1c95      	addeq	r5, r2, #2
 8017526:	9341      	streq	r3, [sp, #260]	@ 0x104
 8017528:	220a      	movs	r2, #10
 801752a:	46aa      	mov	sl, r5
 801752c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017530:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8017534:	2b09      	cmp	r3, #9
 8017536:	d91e      	bls.n	8017576 <__ssvfiscanf_r+0xda>
 8017538:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8017754 <__ssvfiscanf_r+0x2b8>
 801753c:	2203      	movs	r2, #3
 801753e:	4658      	mov	r0, fp
 8017540:	f7e8 fed6 	bl	80002f0 <memchr>
 8017544:	b138      	cbz	r0, 8017556 <__ssvfiscanf_r+0xba>
 8017546:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8017548:	eba0 000b 	sub.w	r0, r0, fp
 801754c:	2301      	movs	r3, #1
 801754e:	4083      	lsls	r3, r0
 8017550:	4313      	orrs	r3, r2
 8017552:	9341      	str	r3, [sp, #260]	@ 0x104
 8017554:	4655      	mov	r5, sl
 8017556:	f815 3b01 	ldrb.w	r3, [r5], #1
 801755a:	2b78      	cmp	r3, #120	@ 0x78
 801755c:	d806      	bhi.n	801756c <__ssvfiscanf_r+0xd0>
 801755e:	2b57      	cmp	r3, #87	@ 0x57
 8017560:	d810      	bhi.n	8017584 <__ssvfiscanf_r+0xe8>
 8017562:	2b25      	cmp	r3, #37	@ 0x25
 8017564:	d05d      	beq.n	8017622 <__ssvfiscanf_r+0x186>
 8017566:	d857      	bhi.n	8017618 <__ssvfiscanf_r+0x17c>
 8017568:	2b00      	cmp	r3, #0
 801756a:	d075      	beq.n	8017658 <__ssvfiscanf_r+0x1bc>
 801756c:	2303      	movs	r3, #3
 801756e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8017570:	230a      	movs	r3, #10
 8017572:	9342      	str	r3, [sp, #264]	@ 0x108
 8017574:	e088      	b.n	8017688 <__ssvfiscanf_r+0x1ec>
 8017576:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8017578:	fb02 1103 	mla	r1, r2, r3, r1
 801757c:	3930      	subs	r1, #48	@ 0x30
 801757e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8017580:	4655      	mov	r5, sl
 8017582:	e7d2      	b.n	801752a <__ssvfiscanf_r+0x8e>
 8017584:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8017588:	2a20      	cmp	r2, #32
 801758a:	d8ef      	bhi.n	801756c <__ssvfiscanf_r+0xd0>
 801758c:	a101      	add	r1, pc, #4	@ (adr r1, 8017594 <__ssvfiscanf_r+0xf8>)
 801758e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017592:	bf00      	nop
 8017594:	08017667 	.word	0x08017667
 8017598:	0801756d 	.word	0x0801756d
 801759c:	0801756d 	.word	0x0801756d
 80175a0:	080176c1 	.word	0x080176c1
 80175a4:	0801756d 	.word	0x0801756d
 80175a8:	0801756d 	.word	0x0801756d
 80175ac:	0801756d 	.word	0x0801756d
 80175b0:	0801756d 	.word	0x0801756d
 80175b4:	0801756d 	.word	0x0801756d
 80175b8:	0801756d 	.word	0x0801756d
 80175bc:	0801756d 	.word	0x0801756d
 80175c0:	080176d7 	.word	0x080176d7
 80175c4:	080176bd 	.word	0x080176bd
 80175c8:	0801761f 	.word	0x0801761f
 80175cc:	0801761f 	.word	0x0801761f
 80175d0:	0801761f 	.word	0x0801761f
 80175d4:	0801756d 	.word	0x0801756d
 80175d8:	08017679 	.word	0x08017679
 80175dc:	0801756d 	.word	0x0801756d
 80175e0:	0801756d 	.word	0x0801756d
 80175e4:	0801756d 	.word	0x0801756d
 80175e8:	0801756d 	.word	0x0801756d
 80175ec:	080176e7 	.word	0x080176e7
 80175f0:	08017681 	.word	0x08017681
 80175f4:	0801765f 	.word	0x0801765f
 80175f8:	0801756d 	.word	0x0801756d
 80175fc:	0801756d 	.word	0x0801756d
 8017600:	080176e3 	.word	0x080176e3
 8017604:	0801756d 	.word	0x0801756d
 8017608:	080176bd 	.word	0x080176bd
 801760c:	0801756d 	.word	0x0801756d
 8017610:	0801756d 	.word	0x0801756d
 8017614:	08017667 	.word	0x08017667
 8017618:	3b45      	subs	r3, #69	@ 0x45
 801761a:	2b02      	cmp	r3, #2
 801761c:	d8a6      	bhi.n	801756c <__ssvfiscanf_r+0xd0>
 801761e:	2305      	movs	r3, #5
 8017620:	e031      	b.n	8017686 <__ssvfiscanf_r+0x1ea>
 8017622:	6863      	ldr	r3, [r4, #4]
 8017624:	2b00      	cmp	r3, #0
 8017626:	dd0d      	ble.n	8017644 <__ssvfiscanf_r+0x1a8>
 8017628:	6823      	ldr	r3, [r4, #0]
 801762a:	781a      	ldrb	r2, [r3, #0]
 801762c:	454a      	cmp	r2, r9
 801762e:	f040 80a6 	bne.w	801777e <__ssvfiscanf_r+0x2e2>
 8017632:	3301      	adds	r3, #1
 8017634:	6862      	ldr	r2, [r4, #4]
 8017636:	6023      	str	r3, [r4, #0]
 8017638:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801763a:	3a01      	subs	r2, #1
 801763c:	3301      	adds	r3, #1
 801763e:	6062      	str	r2, [r4, #4]
 8017640:	9345      	str	r3, [sp, #276]	@ 0x114
 8017642:	e753      	b.n	80174ec <__ssvfiscanf_r+0x50>
 8017644:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017646:	4621      	mov	r1, r4
 8017648:	4630      	mov	r0, r6
 801764a:	4798      	blx	r3
 801764c:	2800      	cmp	r0, #0
 801764e:	d0eb      	beq.n	8017628 <__ssvfiscanf_r+0x18c>
 8017650:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8017652:	2800      	cmp	r0, #0
 8017654:	f040 808b 	bne.w	801776e <__ssvfiscanf_r+0x2d2>
 8017658:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801765c:	e08b      	b.n	8017776 <__ssvfiscanf_r+0x2da>
 801765e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8017660:	f042 0220 	orr.w	r2, r2, #32
 8017664:	9241      	str	r2, [sp, #260]	@ 0x104
 8017666:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8017668:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801766c:	9241      	str	r2, [sp, #260]	@ 0x104
 801766e:	2210      	movs	r2, #16
 8017670:	2b6e      	cmp	r3, #110	@ 0x6e
 8017672:	9242      	str	r2, [sp, #264]	@ 0x108
 8017674:	d902      	bls.n	801767c <__ssvfiscanf_r+0x1e0>
 8017676:	e005      	b.n	8017684 <__ssvfiscanf_r+0x1e8>
 8017678:	2300      	movs	r3, #0
 801767a:	9342      	str	r3, [sp, #264]	@ 0x108
 801767c:	2303      	movs	r3, #3
 801767e:	e002      	b.n	8017686 <__ssvfiscanf_r+0x1ea>
 8017680:	2308      	movs	r3, #8
 8017682:	9342      	str	r3, [sp, #264]	@ 0x108
 8017684:	2304      	movs	r3, #4
 8017686:	9347      	str	r3, [sp, #284]	@ 0x11c
 8017688:	6863      	ldr	r3, [r4, #4]
 801768a:	2b00      	cmp	r3, #0
 801768c:	dd39      	ble.n	8017702 <__ssvfiscanf_r+0x266>
 801768e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8017690:	0659      	lsls	r1, r3, #25
 8017692:	d404      	bmi.n	801769e <__ssvfiscanf_r+0x202>
 8017694:	6823      	ldr	r3, [r4, #0]
 8017696:	781a      	ldrb	r2, [r3, #0]
 8017698:	5cba      	ldrb	r2, [r7, r2]
 801769a:	0712      	lsls	r2, r2, #28
 801769c:	d438      	bmi.n	8017710 <__ssvfiscanf_r+0x274>
 801769e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80176a0:	2b02      	cmp	r3, #2
 80176a2:	dc47      	bgt.n	8017734 <__ssvfiscanf_r+0x298>
 80176a4:	466b      	mov	r3, sp
 80176a6:	4622      	mov	r2, r4
 80176a8:	a941      	add	r1, sp, #260	@ 0x104
 80176aa:	4630      	mov	r0, r6
 80176ac:	f000 fb3a 	bl	8017d24 <_scanf_chars>
 80176b0:	2801      	cmp	r0, #1
 80176b2:	d064      	beq.n	801777e <__ssvfiscanf_r+0x2e2>
 80176b4:	2802      	cmp	r0, #2
 80176b6:	f47f af19 	bne.w	80174ec <__ssvfiscanf_r+0x50>
 80176ba:	e7c9      	b.n	8017650 <__ssvfiscanf_r+0x1b4>
 80176bc:	220a      	movs	r2, #10
 80176be:	e7d7      	b.n	8017670 <__ssvfiscanf_r+0x1d4>
 80176c0:	4629      	mov	r1, r5
 80176c2:	4640      	mov	r0, r8
 80176c4:	f000 fd8a 	bl	80181dc <__sccl>
 80176c8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80176ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80176ce:	9341      	str	r3, [sp, #260]	@ 0x104
 80176d0:	4605      	mov	r5, r0
 80176d2:	2301      	movs	r3, #1
 80176d4:	e7d7      	b.n	8017686 <__ssvfiscanf_r+0x1ea>
 80176d6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80176d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80176dc:	9341      	str	r3, [sp, #260]	@ 0x104
 80176de:	2300      	movs	r3, #0
 80176e0:	e7d1      	b.n	8017686 <__ssvfiscanf_r+0x1ea>
 80176e2:	2302      	movs	r3, #2
 80176e4:	e7cf      	b.n	8017686 <__ssvfiscanf_r+0x1ea>
 80176e6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80176e8:	06c3      	lsls	r3, r0, #27
 80176ea:	f53f aeff 	bmi.w	80174ec <__ssvfiscanf_r+0x50>
 80176ee:	9b00      	ldr	r3, [sp, #0]
 80176f0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80176f2:	1d19      	adds	r1, r3, #4
 80176f4:	9100      	str	r1, [sp, #0]
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	07c0      	lsls	r0, r0, #31
 80176fa:	bf4c      	ite	mi
 80176fc:	801a      	strhmi	r2, [r3, #0]
 80176fe:	601a      	strpl	r2, [r3, #0]
 8017700:	e6f4      	b.n	80174ec <__ssvfiscanf_r+0x50>
 8017702:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017704:	4621      	mov	r1, r4
 8017706:	4630      	mov	r0, r6
 8017708:	4798      	blx	r3
 801770a:	2800      	cmp	r0, #0
 801770c:	d0bf      	beq.n	801768e <__ssvfiscanf_r+0x1f2>
 801770e:	e79f      	b.n	8017650 <__ssvfiscanf_r+0x1b4>
 8017710:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8017712:	3201      	adds	r2, #1
 8017714:	9245      	str	r2, [sp, #276]	@ 0x114
 8017716:	6862      	ldr	r2, [r4, #4]
 8017718:	3a01      	subs	r2, #1
 801771a:	2a00      	cmp	r2, #0
 801771c:	6062      	str	r2, [r4, #4]
 801771e:	dd02      	ble.n	8017726 <__ssvfiscanf_r+0x28a>
 8017720:	3301      	adds	r3, #1
 8017722:	6023      	str	r3, [r4, #0]
 8017724:	e7b6      	b.n	8017694 <__ssvfiscanf_r+0x1f8>
 8017726:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017728:	4621      	mov	r1, r4
 801772a:	4630      	mov	r0, r6
 801772c:	4798      	blx	r3
 801772e:	2800      	cmp	r0, #0
 8017730:	d0b0      	beq.n	8017694 <__ssvfiscanf_r+0x1f8>
 8017732:	e78d      	b.n	8017650 <__ssvfiscanf_r+0x1b4>
 8017734:	2b04      	cmp	r3, #4
 8017736:	dc0f      	bgt.n	8017758 <__ssvfiscanf_r+0x2bc>
 8017738:	466b      	mov	r3, sp
 801773a:	4622      	mov	r2, r4
 801773c:	a941      	add	r1, sp, #260	@ 0x104
 801773e:	4630      	mov	r0, r6
 8017740:	f000 fb4a 	bl	8017dd8 <_scanf_i>
 8017744:	e7b4      	b.n	80176b0 <__ssvfiscanf_r+0x214>
 8017746:	bf00      	nop
 8017748:	080173e9 	.word	0x080173e9
 801774c:	08017463 	.word	0x08017463
 8017750:	08018b45 	.word	0x08018b45
 8017754:	08018c4b 	.word	0x08018c4b
 8017758:	4b0a      	ldr	r3, [pc, #40]	@ (8017784 <__ssvfiscanf_r+0x2e8>)
 801775a:	2b00      	cmp	r3, #0
 801775c:	f43f aec6 	beq.w	80174ec <__ssvfiscanf_r+0x50>
 8017760:	466b      	mov	r3, sp
 8017762:	4622      	mov	r2, r4
 8017764:	a941      	add	r1, sp, #260	@ 0x104
 8017766:	4630      	mov	r0, r6
 8017768:	f3af 8000 	nop.w
 801776c:	e7a0      	b.n	80176b0 <__ssvfiscanf_r+0x214>
 801776e:	89a3      	ldrh	r3, [r4, #12]
 8017770:	065b      	lsls	r3, r3, #25
 8017772:	f53f af71 	bmi.w	8017658 <__ssvfiscanf_r+0x1bc>
 8017776:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801777a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801777e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8017780:	e7f9      	b.n	8017776 <__ssvfiscanf_r+0x2da>
 8017782:	bf00      	nop
 8017784:	00000000 	.word	0x00000000

08017788 <__sfputc_r>:
 8017788:	6893      	ldr	r3, [r2, #8]
 801778a:	3b01      	subs	r3, #1
 801778c:	2b00      	cmp	r3, #0
 801778e:	b410      	push	{r4}
 8017790:	6093      	str	r3, [r2, #8]
 8017792:	da08      	bge.n	80177a6 <__sfputc_r+0x1e>
 8017794:	6994      	ldr	r4, [r2, #24]
 8017796:	42a3      	cmp	r3, r4
 8017798:	db01      	blt.n	801779e <__sfputc_r+0x16>
 801779a:	290a      	cmp	r1, #10
 801779c:	d103      	bne.n	80177a6 <__sfputc_r+0x1e>
 801779e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177a2:	f7ff bab6 	b.w	8016d12 <__swbuf_r>
 80177a6:	6813      	ldr	r3, [r2, #0]
 80177a8:	1c58      	adds	r0, r3, #1
 80177aa:	6010      	str	r0, [r2, #0]
 80177ac:	7019      	strb	r1, [r3, #0]
 80177ae:	4608      	mov	r0, r1
 80177b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177b4:	4770      	bx	lr

080177b6 <__sfputs_r>:
 80177b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177b8:	4606      	mov	r6, r0
 80177ba:	460f      	mov	r7, r1
 80177bc:	4614      	mov	r4, r2
 80177be:	18d5      	adds	r5, r2, r3
 80177c0:	42ac      	cmp	r4, r5
 80177c2:	d101      	bne.n	80177c8 <__sfputs_r+0x12>
 80177c4:	2000      	movs	r0, #0
 80177c6:	e007      	b.n	80177d8 <__sfputs_r+0x22>
 80177c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177cc:	463a      	mov	r2, r7
 80177ce:	4630      	mov	r0, r6
 80177d0:	f7ff ffda 	bl	8017788 <__sfputc_r>
 80177d4:	1c43      	adds	r3, r0, #1
 80177d6:	d1f3      	bne.n	80177c0 <__sfputs_r+0xa>
 80177d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080177dc <_vfiprintf_r>:
 80177dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177e0:	460d      	mov	r5, r1
 80177e2:	b09d      	sub	sp, #116	@ 0x74
 80177e4:	4614      	mov	r4, r2
 80177e6:	4698      	mov	r8, r3
 80177e8:	4606      	mov	r6, r0
 80177ea:	b118      	cbz	r0, 80177f4 <_vfiprintf_r+0x18>
 80177ec:	6a03      	ldr	r3, [r0, #32]
 80177ee:	b90b      	cbnz	r3, 80177f4 <_vfiprintf_r+0x18>
 80177f0:	f7ff f8a2 	bl	8016938 <__sinit>
 80177f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80177f6:	07d9      	lsls	r1, r3, #31
 80177f8:	d405      	bmi.n	8017806 <_vfiprintf_r+0x2a>
 80177fa:	89ab      	ldrh	r3, [r5, #12]
 80177fc:	059a      	lsls	r2, r3, #22
 80177fe:	d402      	bmi.n	8017806 <_vfiprintf_r+0x2a>
 8017800:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017802:	f7ff fc3e 	bl	8017082 <__retarget_lock_acquire_recursive>
 8017806:	89ab      	ldrh	r3, [r5, #12]
 8017808:	071b      	lsls	r3, r3, #28
 801780a:	d501      	bpl.n	8017810 <_vfiprintf_r+0x34>
 801780c:	692b      	ldr	r3, [r5, #16]
 801780e:	b99b      	cbnz	r3, 8017838 <_vfiprintf_r+0x5c>
 8017810:	4629      	mov	r1, r5
 8017812:	4630      	mov	r0, r6
 8017814:	f7ff fabc 	bl	8016d90 <__swsetup_r>
 8017818:	b170      	cbz	r0, 8017838 <_vfiprintf_r+0x5c>
 801781a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801781c:	07dc      	lsls	r4, r3, #31
 801781e:	d504      	bpl.n	801782a <_vfiprintf_r+0x4e>
 8017820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017824:	b01d      	add	sp, #116	@ 0x74
 8017826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801782a:	89ab      	ldrh	r3, [r5, #12]
 801782c:	0598      	lsls	r0, r3, #22
 801782e:	d4f7      	bmi.n	8017820 <_vfiprintf_r+0x44>
 8017830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017832:	f7ff fc27 	bl	8017084 <__retarget_lock_release_recursive>
 8017836:	e7f3      	b.n	8017820 <_vfiprintf_r+0x44>
 8017838:	2300      	movs	r3, #0
 801783a:	9309      	str	r3, [sp, #36]	@ 0x24
 801783c:	2320      	movs	r3, #32
 801783e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017842:	f8cd 800c 	str.w	r8, [sp, #12]
 8017846:	2330      	movs	r3, #48	@ 0x30
 8017848:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80179f8 <_vfiprintf_r+0x21c>
 801784c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017850:	f04f 0901 	mov.w	r9, #1
 8017854:	4623      	mov	r3, r4
 8017856:	469a      	mov	sl, r3
 8017858:	f813 2b01 	ldrb.w	r2, [r3], #1
 801785c:	b10a      	cbz	r2, 8017862 <_vfiprintf_r+0x86>
 801785e:	2a25      	cmp	r2, #37	@ 0x25
 8017860:	d1f9      	bne.n	8017856 <_vfiprintf_r+0x7a>
 8017862:	ebba 0b04 	subs.w	fp, sl, r4
 8017866:	d00b      	beq.n	8017880 <_vfiprintf_r+0xa4>
 8017868:	465b      	mov	r3, fp
 801786a:	4622      	mov	r2, r4
 801786c:	4629      	mov	r1, r5
 801786e:	4630      	mov	r0, r6
 8017870:	f7ff ffa1 	bl	80177b6 <__sfputs_r>
 8017874:	3001      	adds	r0, #1
 8017876:	f000 80a7 	beq.w	80179c8 <_vfiprintf_r+0x1ec>
 801787a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801787c:	445a      	add	r2, fp
 801787e:	9209      	str	r2, [sp, #36]	@ 0x24
 8017880:	f89a 3000 	ldrb.w	r3, [sl]
 8017884:	2b00      	cmp	r3, #0
 8017886:	f000 809f 	beq.w	80179c8 <_vfiprintf_r+0x1ec>
 801788a:	2300      	movs	r3, #0
 801788c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017890:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017894:	f10a 0a01 	add.w	sl, sl, #1
 8017898:	9304      	str	r3, [sp, #16]
 801789a:	9307      	str	r3, [sp, #28]
 801789c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80178a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80178a2:	4654      	mov	r4, sl
 80178a4:	2205      	movs	r2, #5
 80178a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178aa:	4853      	ldr	r0, [pc, #332]	@ (80179f8 <_vfiprintf_r+0x21c>)
 80178ac:	f7e8 fd20 	bl	80002f0 <memchr>
 80178b0:	9a04      	ldr	r2, [sp, #16]
 80178b2:	b9d8      	cbnz	r0, 80178ec <_vfiprintf_r+0x110>
 80178b4:	06d1      	lsls	r1, r2, #27
 80178b6:	bf44      	itt	mi
 80178b8:	2320      	movmi	r3, #32
 80178ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80178be:	0713      	lsls	r3, r2, #28
 80178c0:	bf44      	itt	mi
 80178c2:	232b      	movmi	r3, #43	@ 0x2b
 80178c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80178c8:	f89a 3000 	ldrb.w	r3, [sl]
 80178cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80178ce:	d015      	beq.n	80178fc <_vfiprintf_r+0x120>
 80178d0:	9a07      	ldr	r2, [sp, #28]
 80178d2:	4654      	mov	r4, sl
 80178d4:	2000      	movs	r0, #0
 80178d6:	f04f 0c0a 	mov.w	ip, #10
 80178da:	4621      	mov	r1, r4
 80178dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80178e0:	3b30      	subs	r3, #48	@ 0x30
 80178e2:	2b09      	cmp	r3, #9
 80178e4:	d94b      	bls.n	801797e <_vfiprintf_r+0x1a2>
 80178e6:	b1b0      	cbz	r0, 8017916 <_vfiprintf_r+0x13a>
 80178e8:	9207      	str	r2, [sp, #28]
 80178ea:	e014      	b.n	8017916 <_vfiprintf_r+0x13a>
 80178ec:	eba0 0308 	sub.w	r3, r0, r8
 80178f0:	fa09 f303 	lsl.w	r3, r9, r3
 80178f4:	4313      	orrs	r3, r2
 80178f6:	9304      	str	r3, [sp, #16]
 80178f8:	46a2      	mov	sl, r4
 80178fa:	e7d2      	b.n	80178a2 <_vfiprintf_r+0xc6>
 80178fc:	9b03      	ldr	r3, [sp, #12]
 80178fe:	1d19      	adds	r1, r3, #4
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	9103      	str	r1, [sp, #12]
 8017904:	2b00      	cmp	r3, #0
 8017906:	bfbb      	ittet	lt
 8017908:	425b      	neglt	r3, r3
 801790a:	f042 0202 	orrlt.w	r2, r2, #2
 801790e:	9307      	strge	r3, [sp, #28]
 8017910:	9307      	strlt	r3, [sp, #28]
 8017912:	bfb8      	it	lt
 8017914:	9204      	strlt	r2, [sp, #16]
 8017916:	7823      	ldrb	r3, [r4, #0]
 8017918:	2b2e      	cmp	r3, #46	@ 0x2e
 801791a:	d10a      	bne.n	8017932 <_vfiprintf_r+0x156>
 801791c:	7863      	ldrb	r3, [r4, #1]
 801791e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017920:	d132      	bne.n	8017988 <_vfiprintf_r+0x1ac>
 8017922:	9b03      	ldr	r3, [sp, #12]
 8017924:	1d1a      	adds	r2, r3, #4
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	9203      	str	r2, [sp, #12]
 801792a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801792e:	3402      	adds	r4, #2
 8017930:	9305      	str	r3, [sp, #20]
 8017932:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017a08 <_vfiprintf_r+0x22c>
 8017936:	7821      	ldrb	r1, [r4, #0]
 8017938:	2203      	movs	r2, #3
 801793a:	4650      	mov	r0, sl
 801793c:	f7e8 fcd8 	bl	80002f0 <memchr>
 8017940:	b138      	cbz	r0, 8017952 <_vfiprintf_r+0x176>
 8017942:	9b04      	ldr	r3, [sp, #16]
 8017944:	eba0 000a 	sub.w	r0, r0, sl
 8017948:	2240      	movs	r2, #64	@ 0x40
 801794a:	4082      	lsls	r2, r0
 801794c:	4313      	orrs	r3, r2
 801794e:	3401      	adds	r4, #1
 8017950:	9304      	str	r3, [sp, #16]
 8017952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017956:	4829      	ldr	r0, [pc, #164]	@ (80179fc <_vfiprintf_r+0x220>)
 8017958:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801795c:	2206      	movs	r2, #6
 801795e:	f7e8 fcc7 	bl	80002f0 <memchr>
 8017962:	2800      	cmp	r0, #0
 8017964:	d03f      	beq.n	80179e6 <_vfiprintf_r+0x20a>
 8017966:	4b26      	ldr	r3, [pc, #152]	@ (8017a00 <_vfiprintf_r+0x224>)
 8017968:	bb1b      	cbnz	r3, 80179b2 <_vfiprintf_r+0x1d6>
 801796a:	9b03      	ldr	r3, [sp, #12]
 801796c:	3307      	adds	r3, #7
 801796e:	f023 0307 	bic.w	r3, r3, #7
 8017972:	3308      	adds	r3, #8
 8017974:	9303      	str	r3, [sp, #12]
 8017976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017978:	443b      	add	r3, r7
 801797a:	9309      	str	r3, [sp, #36]	@ 0x24
 801797c:	e76a      	b.n	8017854 <_vfiprintf_r+0x78>
 801797e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017982:	460c      	mov	r4, r1
 8017984:	2001      	movs	r0, #1
 8017986:	e7a8      	b.n	80178da <_vfiprintf_r+0xfe>
 8017988:	2300      	movs	r3, #0
 801798a:	3401      	adds	r4, #1
 801798c:	9305      	str	r3, [sp, #20]
 801798e:	4619      	mov	r1, r3
 8017990:	f04f 0c0a 	mov.w	ip, #10
 8017994:	4620      	mov	r0, r4
 8017996:	f810 2b01 	ldrb.w	r2, [r0], #1
 801799a:	3a30      	subs	r2, #48	@ 0x30
 801799c:	2a09      	cmp	r2, #9
 801799e:	d903      	bls.n	80179a8 <_vfiprintf_r+0x1cc>
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d0c6      	beq.n	8017932 <_vfiprintf_r+0x156>
 80179a4:	9105      	str	r1, [sp, #20]
 80179a6:	e7c4      	b.n	8017932 <_vfiprintf_r+0x156>
 80179a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80179ac:	4604      	mov	r4, r0
 80179ae:	2301      	movs	r3, #1
 80179b0:	e7f0      	b.n	8017994 <_vfiprintf_r+0x1b8>
 80179b2:	ab03      	add	r3, sp, #12
 80179b4:	9300      	str	r3, [sp, #0]
 80179b6:	462a      	mov	r2, r5
 80179b8:	4b12      	ldr	r3, [pc, #72]	@ (8017a04 <_vfiprintf_r+0x228>)
 80179ba:	a904      	add	r1, sp, #16
 80179bc:	4630      	mov	r0, r6
 80179be:	f3af 8000 	nop.w
 80179c2:	4607      	mov	r7, r0
 80179c4:	1c78      	adds	r0, r7, #1
 80179c6:	d1d6      	bne.n	8017976 <_vfiprintf_r+0x19a>
 80179c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80179ca:	07d9      	lsls	r1, r3, #31
 80179cc:	d405      	bmi.n	80179da <_vfiprintf_r+0x1fe>
 80179ce:	89ab      	ldrh	r3, [r5, #12]
 80179d0:	059a      	lsls	r2, r3, #22
 80179d2:	d402      	bmi.n	80179da <_vfiprintf_r+0x1fe>
 80179d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80179d6:	f7ff fb55 	bl	8017084 <__retarget_lock_release_recursive>
 80179da:	89ab      	ldrh	r3, [r5, #12]
 80179dc:	065b      	lsls	r3, r3, #25
 80179de:	f53f af1f 	bmi.w	8017820 <_vfiprintf_r+0x44>
 80179e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80179e4:	e71e      	b.n	8017824 <_vfiprintf_r+0x48>
 80179e6:	ab03      	add	r3, sp, #12
 80179e8:	9300      	str	r3, [sp, #0]
 80179ea:	462a      	mov	r2, r5
 80179ec:	4b05      	ldr	r3, [pc, #20]	@ (8017a04 <_vfiprintf_r+0x228>)
 80179ee:	a904      	add	r1, sp, #16
 80179f0:	4630      	mov	r0, r6
 80179f2:	f000 f879 	bl	8017ae8 <_printf_i>
 80179f6:	e7e4      	b.n	80179c2 <_vfiprintf_r+0x1e6>
 80179f8:	08018c45 	.word	0x08018c45
 80179fc:	08018c4f 	.word	0x08018c4f
 8017a00:	00000000 	.word	0x00000000
 8017a04:	080177b7 	.word	0x080177b7
 8017a08:	08018c4b 	.word	0x08018c4b

08017a0c <_printf_common>:
 8017a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a10:	4616      	mov	r6, r2
 8017a12:	4698      	mov	r8, r3
 8017a14:	688a      	ldr	r2, [r1, #8]
 8017a16:	690b      	ldr	r3, [r1, #16]
 8017a18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017a1c:	4293      	cmp	r3, r2
 8017a1e:	bfb8      	it	lt
 8017a20:	4613      	movlt	r3, r2
 8017a22:	6033      	str	r3, [r6, #0]
 8017a24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017a28:	4607      	mov	r7, r0
 8017a2a:	460c      	mov	r4, r1
 8017a2c:	b10a      	cbz	r2, 8017a32 <_printf_common+0x26>
 8017a2e:	3301      	adds	r3, #1
 8017a30:	6033      	str	r3, [r6, #0]
 8017a32:	6823      	ldr	r3, [r4, #0]
 8017a34:	0699      	lsls	r1, r3, #26
 8017a36:	bf42      	ittt	mi
 8017a38:	6833      	ldrmi	r3, [r6, #0]
 8017a3a:	3302      	addmi	r3, #2
 8017a3c:	6033      	strmi	r3, [r6, #0]
 8017a3e:	6825      	ldr	r5, [r4, #0]
 8017a40:	f015 0506 	ands.w	r5, r5, #6
 8017a44:	d106      	bne.n	8017a54 <_printf_common+0x48>
 8017a46:	f104 0a19 	add.w	sl, r4, #25
 8017a4a:	68e3      	ldr	r3, [r4, #12]
 8017a4c:	6832      	ldr	r2, [r6, #0]
 8017a4e:	1a9b      	subs	r3, r3, r2
 8017a50:	42ab      	cmp	r3, r5
 8017a52:	dc26      	bgt.n	8017aa2 <_printf_common+0x96>
 8017a54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017a58:	6822      	ldr	r2, [r4, #0]
 8017a5a:	3b00      	subs	r3, #0
 8017a5c:	bf18      	it	ne
 8017a5e:	2301      	movne	r3, #1
 8017a60:	0692      	lsls	r2, r2, #26
 8017a62:	d42b      	bmi.n	8017abc <_printf_common+0xb0>
 8017a64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017a68:	4641      	mov	r1, r8
 8017a6a:	4638      	mov	r0, r7
 8017a6c:	47c8      	blx	r9
 8017a6e:	3001      	adds	r0, #1
 8017a70:	d01e      	beq.n	8017ab0 <_printf_common+0xa4>
 8017a72:	6823      	ldr	r3, [r4, #0]
 8017a74:	6922      	ldr	r2, [r4, #16]
 8017a76:	f003 0306 	and.w	r3, r3, #6
 8017a7a:	2b04      	cmp	r3, #4
 8017a7c:	bf02      	ittt	eq
 8017a7e:	68e5      	ldreq	r5, [r4, #12]
 8017a80:	6833      	ldreq	r3, [r6, #0]
 8017a82:	1aed      	subeq	r5, r5, r3
 8017a84:	68a3      	ldr	r3, [r4, #8]
 8017a86:	bf0c      	ite	eq
 8017a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017a8c:	2500      	movne	r5, #0
 8017a8e:	4293      	cmp	r3, r2
 8017a90:	bfc4      	itt	gt
 8017a92:	1a9b      	subgt	r3, r3, r2
 8017a94:	18ed      	addgt	r5, r5, r3
 8017a96:	2600      	movs	r6, #0
 8017a98:	341a      	adds	r4, #26
 8017a9a:	42b5      	cmp	r5, r6
 8017a9c:	d11a      	bne.n	8017ad4 <_printf_common+0xc8>
 8017a9e:	2000      	movs	r0, #0
 8017aa0:	e008      	b.n	8017ab4 <_printf_common+0xa8>
 8017aa2:	2301      	movs	r3, #1
 8017aa4:	4652      	mov	r2, sl
 8017aa6:	4641      	mov	r1, r8
 8017aa8:	4638      	mov	r0, r7
 8017aaa:	47c8      	blx	r9
 8017aac:	3001      	adds	r0, #1
 8017aae:	d103      	bne.n	8017ab8 <_printf_common+0xac>
 8017ab0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ab8:	3501      	adds	r5, #1
 8017aba:	e7c6      	b.n	8017a4a <_printf_common+0x3e>
 8017abc:	18e1      	adds	r1, r4, r3
 8017abe:	1c5a      	adds	r2, r3, #1
 8017ac0:	2030      	movs	r0, #48	@ 0x30
 8017ac2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017ac6:	4422      	add	r2, r4
 8017ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017acc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017ad0:	3302      	adds	r3, #2
 8017ad2:	e7c7      	b.n	8017a64 <_printf_common+0x58>
 8017ad4:	2301      	movs	r3, #1
 8017ad6:	4622      	mov	r2, r4
 8017ad8:	4641      	mov	r1, r8
 8017ada:	4638      	mov	r0, r7
 8017adc:	47c8      	blx	r9
 8017ade:	3001      	adds	r0, #1
 8017ae0:	d0e6      	beq.n	8017ab0 <_printf_common+0xa4>
 8017ae2:	3601      	adds	r6, #1
 8017ae4:	e7d9      	b.n	8017a9a <_printf_common+0x8e>
	...

08017ae8 <_printf_i>:
 8017ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017aec:	7e0f      	ldrb	r7, [r1, #24]
 8017aee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017af0:	2f78      	cmp	r7, #120	@ 0x78
 8017af2:	4691      	mov	r9, r2
 8017af4:	4680      	mov	r8, r0
 8017af6:	460c      	mov	r4, r1
 8017af8:	469a      	mov	sl, r3
 8017afa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017afe:	d807      	bhi.n	8017b10 <_printf_i+0x28>
 8017b00:	2f62      	cmp	r7, #98	@ 0x62
 8017b02:	d80a      	bhi.n	8017b1a <_printf_i+0x32>
 8017b04:	2f00      	cmp	r7, #0
 8017b06:	f000 80d1 	beq.w	8017cac <_printf_i+0x1c4>
 8017b0a:	2f58      	cmp	r7, #88	@ 0x58
 8017b0c:	f000 80b8 	beq.w	8017c80 <_printf_i+0x198>
 8017b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017b14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017b18:	e03a      	b.n	8017b90 <_printf_i+0xa8>
 8017b1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017b1e:	2b15      	cmp	r3, #21
 8017b20:	d8f6      	bhi.n	8017b10 <_printf_i+0x28>
 8017b22:	a101      	add	r1, pc, #4	@ (adr r1, 8017b28 <_printf_i+0x40>)
 8017b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017b28:	08017b81 	.word	0x08017b81
 8017b2c:	08017b95 	.word	0x08017b95
 8017b30:	08017b11 	.word	0x08017b11
 8017b34:	08017b11 	.word	0x08017b11
 8017b38:	08017b11 	.word	0x08017b11
 8017b3c:	08017b11 	.word	0x08017b11
 8017b40:	08017b95 	.word	0x08017b95
 8017b44:	08017b11 	.word	0x08017b11
 8017b48:	08017b11 	.word	0x08017b11
 8017b4c:	08017b11 	.word	0x08017b11
 8017b50:	08017b11 	.word	0x08017b11
 8017b54:	08017c93 	.word	0x08017c93
 8017b58:	08017bbf 	.word	0x08017bbf
 8017b5c:	08017c4d 	.word	0x08017c4d
 8017b60:	08017b11 	.word	0x08017b11
 8017b64:	08017b11 	.word	0x08017b11
 8017b68:	08017cb5 	.word	0x08017cb5
 8017b6c:	08017b11 	.word	0x08017b11
 8017b70:	08017bbf 	.word	0x08017bbf
 8017b74:	08017b11 	.word	0x08017b11
 8017b78:	08017b11 	.word	0x08017b11
 8017b7c:	08017c55 	.word	0x08017c55
 8017b80:	6833      	ldr	r3, [r6, #0]
 8017b82:	1d1a      	adds	r2, r3, #4
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	6032      	str	r2, [r6, #0]
 8017b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017b8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017b90:	2301      	movs	r3, #1
 8017b92:	e09c      	b.n	8017cce <_printf_i+0x1e6>
 8017b94:	6833      	ldr	r3, [r6, #0]
 8017b96:	6820      	ldr	r0, [r4, #0]
 8017b98:	1d19      	adds	r1, r3, #4
 8017b9a:	6031      	str	r1, [r6, #0]
 8017b9c:	0606      	lsls	r6, r0, #24
 8017b9e:	d501      	bpl.n	8017ba4 <_printf_i+0xbc>
 8017ba0:	681d      	ldr	r5, [r3, #0]
 8017ba2:	e003      	b.n	8017bac <_printf_i+0xc4>
 8017ba4:	0645      	lsls	r5, r0, #25
 8017ba6:	d5fb      	bpl.n	8017ba0 <_printf_i+0xb8>
 8017ba8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017bac:	2d00      	cmp	r5, #0
 8017bae:	da03      	bge.n	8017bb8 <_printf_i+0xd0>
 8017bb0:	232d      	movs	r3, #45	@ 0x2d
 8017bb2:	426d      	negs	r5, r5
 8017bb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017bb8:	4858      	ldr	r0, [pc, #352]	@ (8017d1c <_printf_i+0x234>)
 8017bba:	230a      	movs	r3, #10
 8017bbc:	e011      	b.n	8017be2 <_printf_i+0xfa>
 8017bbe:	6821      	ldr	r1, [r4, #0]
 8017bc0:	6833      	ldr	r3, [r6, #0]
 8017bc2:	0608      	lsls	r0, r1, #24
 8017bc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8017bc8:	d402      	bmi.n	8017bd0 <_printf_i+0xe8>
 8017bca:	0649      	lsls	r1, r1, #25
 8017bcc:	bf48      	it	mi
 8017bce:	b2ad      	uxthmi	r5, r5
 8017bd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8017bd2:	4852      	ldr	r0, [pc, #328]	@ (8017d1c <_printf_i+0x234>)
 8017bd4:	6033      	str	r3, [r6, #0]
 8017bd6:	bf14      	ite	ne
 8017bd8:	230a      	movne	r3, #10
 8017bda:	2308      	moveq	r3, #8
 8017bdc:	2100      	movs	r1, #0
 8017bde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017be2:	6866      	ldr	r6, [r4, #4]
 8017be4:	60a6      	str	r6, [r4, #8]
 8017be6:	2e00      	cmp	r6, #0
 8017be8:	db05      	blt.n	8017bf6 <_printf_i+0x10e>
 8017bea:	6821      	ldr	r1, [r4, #0]
 8017bec:	432e      	orrs	r6, r5
 8017bee:	f021 0104 	bic.w	r1, r1, #4
 8017bf2:	6021      	str	r1, [r4, #0]
 8017bf4:	d04b      	beq.n	8017c8e <_printf_i+0x1a6>
 8017bf6:	4616      	mov	r6, r2
 8017bf8:	fbb5 f1f3 	udiv	r1, r5, r3
 8017bfc:	fb03 5711 	mls	r7, r3, r1, r5
 8017c00:	5dc7      	ldrb	r7, [r0, r7]
 8017c02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017c06:	462f      	mov	r7, r5
 8017c08:	42bb      	cmp	r3, r7
 8017c0a:	460d      	mov	r5, r1
 8017c0c:	d9f4      	bls.n	8017bf8 <_printf_i+0x110>
 8017c0e:	2b08      	cmp	r3, #8
 8017c10:	d10b      	bne.n	8017c2a <_printf_i+0x142>
 8017c12:	6823      	ldr	r3, [r4, #0]
 8017c14:	07df      	lsls	r7, r3, #31
 8017c16:	d508      	bpl.n	8017c2a <_printf_i+0x142>
 8017c18:	6923      	ldr	r3, [r4, #16]
 8017c1a:	6861      	ldr	r1, [r4, #4]
 8017c1c:	4299      	cmp	r1, r3
 8017c1e:	bfde      	ittt	le
 8017c20:	2330      	movle	r3, #48	@ 0x30
 8017c22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017c26:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8017c2a:	1b92      	subs	r2, r2, r6
 8017c2c:	6122      	str	r2, [r4, #16]
 8017c2e:	f8cd a000 	str.w	sl, [sp]
 8017c32:	464b      	mov	r3, r9
 8017c34:	aa03      	add	r2, sp, #12
 8017c36:	4621      	mov	r1, r4
 8017c38:	4640      	mov	r0, r8
 8017c3a:	f7ff fee7 	bl	8017a0c <_printf_common>
 8017c3e:	3001      	adds	r0, #1
 8017c40:	d14a      	bne.n	8017cd8 <_printf_i+0x1f0>
 8017c42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017c46:	b004      	add	sp, #16
 8017c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c4c:	6823      	ldr	r3, [r4, #0]
 8017c4e:	f043 0320 	orr.w	r3, r3, #32
 8017c52:	6023      	str	r3, [r4, #0]
 8017c54:	4832      	ldr	r0, [pc, #200]	@ (8017d20 <_printf_i+0x238>)
 8017c56:	2778      	movs	r7, #120	@ 0x78
 8017c58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017c5c:	6823      	ldr	r3, [r4, #0]
 8017c5e:	6831      	ldr	r1, [r6, #0]
 8017c60:	061f      	lsls	r7, r3, #24
 8017c62:	f851 5b04 	ldr.w	r5, [r1], #4
 8017c66:	d402      	bmi.n	8017c6e <_printf_i+0x186>
 8017c68:	065f      	lsls	r7, r3, #25
 8017c6a:	bf48      	it	mi
 8017c6c:	b2ad      	uxthmi	r5, r5
 8017c6e:	6031      	str	r1, [r6, #0]
 8017c70:	07d9      	lsls	r1, r3, #31
 8017c72:	bf44      	itt	mi
 8017c74:	f043 0320 	orrmi.w	r3, r3, #32
 8017c78:	6023      	strmi	r3, [r4, #0]
 8017c7a:	b11d      	cbz	r5, 8017c84 <_printf_i+0x19c>
 8017c7c:	2310      	movs	r3, #16
 8017c7e:	e7ad      	b.n	8017bdc <_printf_i+0xf4>
 8017c80:	4826      	ldr	r0, [pc, #152]	@ (8017d1c <_printf_i+0x234>)
 8017c82:	e7e9      	b.n	8017c58 <_printf_i+0x170>
 8017c84:	6823      	ldr	r3, [r4, #0]
 8017c86:	f023 0320 	bic.w	r3, r3, #32
 8017c8a:	6023      	str	r3, [r4, #0]
 8017c8c:	e7f6      	b.n	8017c7c <_printf_i+0x194>
 8017c8e:	4616      	mov	r6, r2
 8017c90:	e7bd      	b.n	8017c0e <_printf_i+0x126>
 8017c92:	6833      	ldr	r3, [r6, #0]
 8017c94:	6825      	ldr	r5, [r4, #0]
 8017c96:	6961      	ldr	r1, [r4, #20]
 8017c98:	1d18      	adds	r0, r3, #4
 8017c9a:	6030      	str	r0, [r6, #0]
 8017c9c:	062e      	lsls	r6, r5, #24
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	d501      	bpl.n	8017ca6 <_printf_i+0x1be>
 8017ca2:	6019      	str	r1, [r3, #0]
 8017ca4:	e002      	b.n	8017cac <_printf_i+0x1c4>
 8017ca6:	0668      	lsls	r0, r5, #25
 8017ca8:	d5fb      	bpl.n	8017ca2 <_printf_i+0x1ba>
 8017caa:	8019      	strh	r1, [r3, #0]
 8017cac:	2300      	movs	r3, #0
 8017cae:	6123      	str	r3, [r4, #16]
 8017cb0:	4616      	mov	r6, r2
 8017cb2:	e7bc      	b.n	8017c2e <_printf_i+0x146>
 8017cb4:	6833      	ldr	r3, [r6, #0]
 8017cb6:	1d1a      	adds	r2, r3, #4
 8017cb8:	6032      	str	r2, [r6, #0]
 8017cba:	681e      	ldr	r6, [r3, #0]
 8017cbc:	6862      	ldr	r2, [r4, #4]
 8017cbe:	2100      	movs	r1, #0
 8017cc0:	4630      	mov	r0, r6
 8017cc2:	f7e8 fb15 	bl	80002f0 <memchr>
 8017cc6:	b108      	cbz	r0, 8017ccc <_printf_i+0x1e4>
 8017cc8:	1b80      	subs	r0, r0, r6
 8017cca:	6060      	str	r0, [r4, #4]
 8017ccc:	6863      	ldr	r3, [r4, #4]
 8017cce:	6123      	str	r3, [r4, #16]
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017cd6:	e7aa      	b.n	8017c2e <_printf_i+0x146>
 8017cd8:	6923      	ldr	r3, [r4, #16]
 8017cda:	4632      	mov	r2, r6
 8017cdc:	4649      	mov	r1, r9
 8017cde:	4640      	mov	r0, r8
 8017ce0:	47d0      	blx	sl
 8017ce2:	3001      	adds	r0, #1
 8017ce4:	d0ad      	beq.n	8017c42 <_printf_i+0x15a>
 8017ce6:	6823      	ldr	r3, [r4, #0]
 8017ce8:	079b      	lsls	r3, r3, #30
 8017cea:	d413      	bmi.n	8017d14 <_printf_i+0x22c>
 8017cec:	68e0      	ldr	r0, [r4, #12]
 8017cee:	9b03      	ldr	r3, [sp, #12]
 8017cf0:	4298      	cmp	r0, r3
 8017cf2:	bfb8      	it	lt
 8017cf4:	4618      	movlt	r0, r3
 8017cf6:	e7a6      	b.n	8017c46 <_printf_i+0x15e>
 8017cf8:	2301      	movs	r3, #1
 8017cfa:	4632      	mov	r2, r6
 8017cfc:	4649      	mov	r1, r9
 8017cfe:	4640      	mov	r0, r8
 8017d00:	47d0      	blx	sl
 8017d02:	3001      	adds	r0, #1
 8017d04:	d09d      	beq.n	8017c42 <_printf_i+0x15a>
 8017d06:	3501      	adds	r5, #1
 8017d08:	68e3      	ldr	r3, [r4, #12]
 8017d0a:	9903      	ldr	r1, [sp, #12]
 8017d0c:	1a5b      	subs	r3, r3, r1
 8017d0e:	42ab      	cmp	r3, r5
 8017d10:	dcf2      	bgt.n	8017cf8 <_printf_i+0x210>
 8017d12:	e7eb      	b.n	8017cec <_printf_i+0x204>
 8017d14:	2500      	movs	r5, #0
 8017d16:	f104 0619 	add.w	r6, r4, #25
 8017d1a:	e7f5      	b.n	8017d08 <_printf_i+0x220>
 8017d1c:	08018c56 	.word	0x08018c56
 8017d20:	08018c67 	.word	0x08018c67

08017d24 <_scanf_chars>:
 8017d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d28:	4615      	mov	r5, r2
 8017d2a:	688a      	ldr	r2, [r1, #8]
 8017d2c:	4680      	mov	r8, r0
 8017d2e:	460c      	mov	r4, r1
 8017d30:	b932      	cbnz	r2, 8017d40 <_scanf_chars+0x1c>
 8017d32:	698a      	ldr	r2, [r1, #24]
 8017d34:	2a00      	cmp	r2, #0
 8017d36:	bf14      	ite	ne
 8017d38:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8017d3c:	2201      	moveq	r2, #1
 8017d3e:	608a      	str	r2, [r1, #8]
 8017d40:	6822      	ldr	r2, [r4, #0]
 8017d42:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8017dd4 <_scanf_chars+0xb0>
 8017d46:	06d1      	lsls	r1, r2, #27
 8017d48:	bf5f      	itttt	pl
 8017d4a:	681a      	ldrpl	r2, [r3, #0]
 8017d4c:	1d11      	addpl	r1, r2, #4
 8017d4e:	6019      	strpl	r1, [r3, #0]
 8017d50:	6816      	ldrpl	r6, [r2, #0]
 8017d52:	2700      	movs	r7, #0
 8017d54:	69a0      	ldr	r0, [r4, #24]
 8017d56:	b188      	cbz	r0, 8017d7c <_scanf_chars+0x58>
 8017d58:	2801      	cmp	r0, #1
 8017d5a:	d107      	bne.n	8017d6c <_scanf_chars+0x48>
 8017d5c:	682b      	ldr	r3, [r5, #0]
 8017d5e:	781a      	ldrb	r2, [r3, #0]
 8017d60:	6963      	ldr	r3, [r4, #20]
 8017d62:	5c9b      	ldrb	r3, [r3, r2]
 8017d64:	b953      	cbnz	r3, 8017d7c <_scanf_chars+0x58>
 8017d66:	2f00      	cmp	r7, #0
 8017d68:	d031      	beq.n	8017dce <_scanf_chars+0xaa>
 8017d6a:	e022      	b.n	8017db2 <_scanf_chars+0x8e>
 8017d6c:	2802      	cmp	r0, #2
 8017d6e:	d120      	bne.n	8017db2 <_scanf_chars+0x8e>
 8017d70:	682b      	ldr	r3, [r5, #0]
 8017d72:	781b      	ldrb	r3, [r3, #0]
 8017d74:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017d78:	071b      	lsls	r3, r3, #28
 8017d7a:	d41a      	bmi.n	8017db2 <_scanf_chars+0x8e>
 8017d7c:	6823      	ldr	r3, [r4, #0]
 8017d7e:	06da      	lsls	r2, r3, #27
 8017d80:	bf5e      	ittt	pl
 8017d82:	682b      	ldrpl	r3, [r5, #0]
 8017d84:	781b      	ldrbpl	r3, [r3, #0]
 8017d86:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017d8a:	682a      	ldr	r2, [r5, #0]
 8017d8c:	686b      	ldr	r3, [r5, #4]
 8017d8e:	3201      	adds	r2, #1
 8017d90:	602a      	str	r2, [r5, #0]
 8017d92:	68a2      	ldr	r2, [r4, #8]
 8017d94:	3b01      	subs	r3, #1
 8017d96:	3a01      	subs	r2, #1
 8017d98:	606b      	str	r3, [r5, #4]
 8017d9a:	3701      	adds	r7, #1
 8017d9c:	60a2      	str	r2, [r4, #8]
 8017d9e:	b142      	cbz	r2, 8017db2 <_scanf_chars+0x8e>
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	dcd7      	bgt.n	8017d54 <_scanf_chars+0x30>
 8017da4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017da8:	4629      	mov	r1, r5
 8017daa:	4640      	mov	r0, r8
 8017dac:	4798      	blx	r3
 8017dae:	2800      	cmp	r0, #0
 8017db0:	d0d0      	beq.n	8017d54 <_scanf_chars+0x30>
 8017db2:	6823      	ldr	r3, [r4, #0]
 8017db4:	f013 0310 	ands.w	r3, r3, #16
 8017db8:	d105      	bne.n	8017dc6 <_scanf_chars+0xa2>
 8017dba:	68e2      	ldr	r2, [r4, #12]
 8017dbc:	3201      	adds	r2, #1
 8017dbe:	60e2      	str	r2, [r4, #12]
 8017dc0:	69a2      	ldr	r2, [r4, #24]
 8017dc2:	b102      	cbz	r2, 8017dc6 <_scanf_chars+0xa2>
 8017dc4:	7033      	strb	r3, [r6, #0]
 8017dc6:	6923      	ldr	r3, [r4, #16]
 8017dc8:	443b      	add	r3, r7
 8017dca:	6123      	str	r3, [r4, #16]
 8017dcc:	2000      	movs	r0, #0
 8017dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017dd2:	bf00      	nop
 8017dd4:	08018b45 	.word	0x08018b45

08017dd8 <_scanf_i>:
 8017dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ddc:	4698      	mov	r8, r3
 8017dde:	4b74      	ldr	r3, [pc, #464]	@ (8017fb0 <_scanf_i+0x1d8>)
 8017de0:	460c      	mov	r4, r1
 8017de2:	4682      	mov	sl, r0
 8017de4:	4616      	mov	r6, r2
 8017de6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017dea:	b087      	sub	sp, #28
 8017dec:	ab03      	add	r3, sp, #12
 8017dee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017df2:	4b70      	ldr	r3, [pc, #448]	@ (8017fb4 <_scanf_i+0x1dc>)
 8017df4:	69a1      	ldr	r1, [r4, #24]
 8017df6:	4a70      	ldr	r2, [pc, #448]	@ (8017fb8 <_scanf_i+0x1e0>)
 8017df8:	2903      	cmp	r1, #3
 8017dfa:	bf08      	it	eq
 8017dfc:	461a      	moveq	r2, r3
 8017dfe:	68a3      	ldr	r3, [r4, #8]
 8017e00:	9201      	str	r2, [sp, #4]
 8017e02:	1e5a      	subs	r2, r3, #1
 8017e04:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8017e08:	bf88      	it	hi
 8017e0a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8017e0e:	4627      	mov	r7, r4
 8017e10:	bf82      	ittt	hi
 8017e12:	eb03 0905 	addhi.w	r9, r3, r5
 8017e16:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8017e1a:	60a3      	strhi	r3, [r4, #8]
 8017e1c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017e20:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8017e24:	bf98      	it	ls
 8017e26:	f04f 0900 	movls.w	r9, #0
 8017e2a:	6023      	str	r3, [r4, #0]
 8017e2c:	463d      	mov	r5, r7
 8017e2e:	f04f 0b00 	mov.w	fp, #0
 8017e32:	6831      	ldr	r1, [r6, #0]
 8017e34:	ab03      	add	r3, sp, #12
 8017e36:	7809      	ldrb	r1, [r1, #0]
 8017e38:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017e3c:	2202      	movs	r2, #2
 8017e3e:	f7e8 fa57 	bl	80002f0 <memchr>
 8017e42:	b328      	cbz	r0, 8017e90 <_scanf_i+0xb8>
 8017e44:	f1bb 0f01 	cmp.w	fp, #1
 8017e48:	d159      	bne.n	8017efe <_scanf_i+0x126>
 8017e4a:	6862      	ldr	r2, [r4, #4]
 8017e4c:	b92a      	cbnz	r2, 8017e5a <_scanf_i+0x82>
 8017e4e:	6822      	ldr	r2, [r4, #0]
 8017e50:	2108      	movs	r1, #8
 8017e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017e56:	6061      	str	r1, [r4, #4]
 8017e58:	6022      	str	r2, [r4, #0]
 8017e5a:	6822      	ldr	r2, [r4, #0]
 8017e5c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8017e60:	6022      	str	r2, [r4, #0]
 8017e62:	68a2      	ldr	r2, [r4, #8]
 8017e64:	1e51      	subs	r1, r2, #1
 8017e66:	60a1      	str	r1, [r4, #8]
 8017e68:	b192      	cbz	r2, 8017e90 <_scanf_i+0xb8>
 8017e6a:	6832      	ldr	r2, [r6, #0]
 8017e6c:	1c51      	adds	r1, r2, #1
 8017e6e:	6031      	str	r1, [r6, #0]
 8017e70:	7812      	ldrb	r2, [r2, #0]
 8017e72:	f805 2b01 	strb.w	r2, [r5], #1
 8017e76:	6872      	ldr	r2, [r6, #4]
 8017e78:	3a01      	subs	r2, #1
 8017e7a:	2a00      	cmp	r2, #0
 8017e7c:	6072      	str	r2, [r6, #4]
 8017e7e:	dc07      	bgt.n	8017e90 <_scanf_i+0xb8>
 8017e80:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8017e84:	4631      	mov	r1, r6
 8017e86:	4650      	mov	r0, sl
 8017e88:	4790      	blx	r2
 8017e8a:	2800      	cmp	r0, #0
 8017e8c:	f040 8085 	bne.w	8017f9a <_scanf_i+0x1c2>
 8017e90:	f10b 0b01 	add.w	fp, fp, #1
 8017e94:	f1bb 0f03 	cmp.w	fp, #3
 8017e98:	d1cb      	bne.n	8017e32 <_scanf_i+0x5a>
 8017e9a:	6863      	ldr	r3, [r4, #4]
 8017e9c:	b90b      	cbnz	r3, 8017ea2 <_scanf_i+0xca>
 8017e9e:	230a      	movs	r3, #10
 8017ea0:	6063      	str	r3, [r4, #4]
 8017ea2:	6863      	ldr	r3, [r4, #4]
 8017ea4:	4945      	ldr	r1, [pc, #276]	@ (8017fbc <_scanf_i+0x1e4>)
 8017ea6:	6960      	ldr	r0, [r4, #20]
 8017ea8:	1ac9      	subs	r1, r1, r3
 8017eaa:	f000 f997 	bl	80181dc <__sccl>
 8017eae:	f04f 0b00 	mov.w	fp, #0
 8017eb2:	68a3      	ldr	r3, [r4, #8]
 8017eb4:	6822      	ldr	r2, [r4, #0]
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d03d      	beq.n	8017f36 <_scanf_i+0x15e>
 8017eba:	6831      	ldr	r1, [r6, #0]
 8017ebc:	6960      	ldr	r0, [r4, #20]
 8017ebe:	f891 c000 	ldrb.w	ip, [r1]
 8017ec2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017ec6:	2800      	cmp	r0, #0
 8017ec8:	d035      	beq.n	8017f36 <_scanf_i+0x15e>
 8017eca:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8017ece:	d124      	bne.n	8017f1a <_scanf_i+0x142>
 8017ed0:	0510      	lsls	r0, r2, #20
 8017ed2:	d522      	bpl.n	8017f1a <_scanf_i+0x142>
 8017ed4:	f10b 0b01 	add.w	fp, fp, #1
 8017ed8:	f1b9 0f00 	cmp.w	r9, #0
 8017edc:	d003      	beq.n	8017ee6 <_scanf_i+0x10e>
 8017ede:	3301      	adds	r3, #1
 8017ee0:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8017ee4:	60a3      	str	r3, [r4, #8]
 8017ee6:	6873      	ldr	r3, [r6, #4]
 8017ee8:	3b01      	subs	r3, #1
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	6073      	str	r3, [r6, #4]
 8017eee:	dd1b      	ble.n	8017f28 <_scanf_i+0x150>
 8017ef0:	6833      	ldr	r3, [r6, #0]
 8017ef2:	3301      	adds	r3, #1
 8017ef4:	6033      	str	r3, [r6, #0]
 8017ef6:	68a3      	ldr	r3, [r4, #8]
 8017ef8:	3b01      	subs	r3, #1
 8017efa:	60a3      	str	r3, [r4, #8]
 8017efc:	e7d9      	b.n	8017eb2 <_scanf_i+0xda>
 8017efe:	f1bb 0f02 	cmp.w	fp, #2
 8017f02:	d1ae      	bne.n	8017e62 <_scanf_i+0x8a>
 8017f04:	6822      	ldr	r2, [r4, #0]
 8017f06:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8017f0a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8017f0e:	d1c4      	bne.n	8017e9a <_scanf_i+0xc2>
 8017f10:	2110      	movs	r1, #16
 8017f12:	6061      	str	r1, [r4, #4]
 8017f14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8017f18:	e7a2      	b.n	8017e60 <_scanf_i+0x88>
 8017f1a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8017f1e:	6022      	str	r2, [r4, #0]
 8017f20:	780b      	ldrb	r3, [r1, #0]
 8017f22:	f805 3b01 	strb.w	r3, [r5], #1
 8017f26:	e7de      	b.n	8017ee6 <_scanf_i+0x10e>
 8017f28:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017f2c:	4631      	mov	r1, r6
 8017f2e:	4650      	mov	r0, sl
 8017f30:	4798      	blx	r3
 8017f32:	2800      	cmp	r0, #0
 8017f34:	d0df      	beq.n	8017ef6 <_scanf_i+0x11e>
 8017f36:	6823      	ldr	r3, [r4, #0]
 8017f38:	05d9      	lsls	r1, r3, #23
 8017f3a:	d50d      	bpl.n	8017f58 <_scanf_i+0x180>
 8017f3c:	42bd      	cmp	r5, r7
 8017f3e:	d909      	bls.n	8017f54 <_scanf_i+0x17c>
 8017f40:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017f44:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017f48:	4632      	mov	r2, r6
 8017f4a:	4650      	mov	r0, sl
 8017f4c:	4798      	blx	r3
 8017f4e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8017f52:	464d      	mov	r5, r9
 8017f54:	42bd      	cmp	r5, r7
 8017f56:	d028      	beq.n	8017faa <_scanf_i+0x1d2>
 8017f58:	6822      	ldr	r2, [r4, #0]
 8017f5a:	f012 0210 	ands.w	r2, r2, #16
 8017f5e:	d113      	bne.n	8017f88 <_scanf_i+0x1b0>
 8017f60:	702a      	strb	r2, [r5, #0]
 8017f62:	6863      	ldr	r3, [r4, #4]
 8017f64:	9e01      	ldr	r6, [sp, #4]
 8017f66:	4639      	mov	r1, r7
 8017f68:	4650      	mov	r0, sl
 8017f6a:	47b0      	blx	r6
 8017f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8017f70:	6821      	ldr	r1, [r4, #0]
 8017f72:	1d1a      	adds	r2, r3, #4
 8017f74:	f8c8 2000 	str.w	r2, [r8]
 8017f78:	f011 0f20 	tst.w	r1, #32
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	d00f      	beq.n	8017fa0 <_scanf_i+0x1c8>
 8017f80:	6018      	str	r0, [r3, #0]
 8017f82:	68e3      	ldr	r3, [r4, #12]
 8017f84:	3301      	adds	r3, #1
 8017f86:	60e3      	str	r3, [r4, #12]
 8017f88:	6923      	ldr	r3, [r4, #16]
 8017f8a:	1bed      	subs	r5, r5, r7
 8017f8c:	445d      	add	r5, fp
 8017f8e:	442b      	add	r3, r5
 8017f90:	6123      	str	r3, [r4, #16]
 8017f92:	2000      	movs	r0, #0
 8017f94:	b007      	add	sp, #28
 8017f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f9a:	f04f 0b00 	mov.w	fp, #0
 8017f9e:	e7ca      	b.n	8017f36 <_scanf_i+0x15e>
 8017fa0:	07ca      	lsls	r2, r1, #31
 8017fa2:	bf4c      	ite	mi
 8017fa4:	8018      	strhmi	r0, [r3, #0]
 8017fa6:	6018      	strpl	r0, [r3, #0]
 8017fa8:	e7eb      	b.n	8017f82 <_scanf_i+0x1aa>
 8017faa:	2001      	movs	r0, #1
 8017fac:	e7f2      	b.n	8017f94 <_scanf_i+0x1bc>
 8017fae:	bf00      	nop
 8017fb0:	08018910 	.word	0x08018910
 8017fb4:	0801848d 	.word	0x0801848d
 8017fb8:	0801856d 	.word	0x0801856d
 8017fbc:	08018c88 	.word	0x08018c88

08017fc0 <__sflush_r>:
 8017fc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fc8:	0716      	lsls	r6, r2, #28
 8017fca:	4605      	mov	r5, r0
 8017fcc:	460c      	mov	r4, r1
 8017fce:	d454      	bmi.n	801807a <__sflush_r+0xba>
 8017fd0:	684b      	ldr	r3, [r1, #4]
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	dc02      	bgt.n	8017fdc <__sflush_r+0x1c>
 8017fd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	dd48      	ble.n	801806e <__sflush_r+0xae>
 8017fdc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017fde:	2e00      	cmp	r6, #0
 8017fe0:	d045      	beq.n	801806e <__sflush_r+0xae>
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017fe8:	682f      	ldr	r7, [r5, #0]
 8017fea:	6a21      	ldr	r1, [r4, #32]
 8017fec:	602b      	str	r3, [r5, #0]
 8017fee:	d030      	beq.n	8018052 <__sflush_r+0x92>
 8017ff0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017ff2:	89a3      	ldrh	r3, [r4, #12]
 8017ff4:	0759      	lsls	r1, r3, #29
 8017ff6:	d505      	bpl.n	8018004 <__sflush_r+0x44>
 8017ff8:	6863      	ldr	r3, [r4, #4]
 8017ffa:	1ad2      	subs	r2, r2, r3
 8017ffc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017ffe:	b10b      	cbz	r3, 8018004 <__sflush_r+0x44>
 8018000:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018002:	1ad2      	subs	r2, r2, r3
 8018004:	2300      	movs	r3, #0
 8018006:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018008:	6a21      	ldr	r1, [r4, #32]
 801800a:	4628      	mov	r0, r5
 801800c:	47b0      	blx	r6
 801800e:	1c43      	adds	r3, r0, #1
 8018010:	89a3      	ldrh	r3, [r4, #12]
 8018012:	d106      	bne.n	8018022 <__sflush_r+0x62>
 8018014:	6829      	ldr	r1, [r5, #0]
 8018016:	291d      	cmp	r1, #29
 8018018:	d82b      	bhi.n	8018072 <__sflush_r+0xb2>
 801801a:	4a2a      	ldr	r2, [pc, #168]	@ (80180c4 <__sflush_r+0x104>)
 801801c:	40ca      	lsrs	r2, r1
 801801e:	07d6      	lsls	r6, r2, #31
 8018020:	d527      	bpl.n	8018072 <__sflush_r+0xb2>
 8018022:	2200      	movs	r2, #0
 8018024:	6062      	str	r2, [r4, #4]
 8018026:	04d9      	lsls	r1, r3, #19
 8018028:	6922      	ldr	r2, [r4, #16]
 801802a:	6022      	str	r2, [r4, #0]
 801802c:	d504      	bpl.n	8018038 <__sflush_r+0x78>
 801802e:	1c42      	adds	r2, r0, #1
 8018030:	d101      	bne.n	8018036 <__sflush_r+0x76>
 8018032:	682b      	ldr	r3, [r5, #0]
 8018034:	b903      	cbnz	r3, 8018038 <__sflush_r+0x78>
 8018036:	6560      	str	r0, [r4, #84]	@ 0x54
 8018038:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801803a:	602f      	str	r7, [r5, #0]
 801803c:	b1b9      	cbz	r1, 801806e <__sflush_r+0xae>
 801803e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018042:	4299      	cmp	r1, r3
 8018044:	d002      	beq.n	801804c <__sflush_r+0x8c>
 8018046:	4628      	mov	r0, r5
 8018048:	f7ff f82c 	bl	80170a4 <_free_r>
 801804c:	2300      	movs	r3, #0
 801804e:	6363      	str	r3, [r4, #52]	@ 0x34
 8018050:	e00d      	b.n	801806e <__sflush_r+0xae>
 8018052:	2301      	movs	r3, #1
 8018054:	4628      	mov	r0, r5
 8018056:	47b0      	blx	r6
 8018058:	4602      	mov	r2, r0
 801805a:	1c50      	adds	r0, r2, #1
 801805c:	d1c9      	bne.n	8017ff2 <__sflush_r+0x32>
 801805e:	682b      	ldr	r3, [r5, #0]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d0c6      	beq.n	8017ff2 <__sflush_r+0x32>
 8018064:	2b1d      	cmp	r3, #29
 8018066:	d001      	beq.n	801806c <__sflush_r+0xac>
 8018068:	2b16      	cmp	r3, #22
 801806a:	d11e      	bne.n	80180aa <__sflush_r+0xea>
 801806c:	602f      	str	r7, [r5, #0]
 801806e:	2000      	movs	r0, #0
 8018070:	e022      	b.n	80180b8 <__sflush_r+0xf8>
 8018072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018076:	b21b      	sxth	r3, r3
 8018078:	e01b      	b.n	80180b2 <__sflush_r+0xf2>
 801807a:	690f      	ldr	r7, [r1, #16]
 801807c:	2f00      	cmp	r7, #0
 801807e:	d0f6      	beq.n	801806e <__sflush_r+0xae>
 8018080:	0793      	lsls	r3, r2, #30
 8018082:	680e      	ldr	r6, [r1, #0]
 8018084:	bf08      	it	eq
 8018086:	694b      	ldreq	r3, [r1, #20]
 8018088:	600f      	str	r7, [r1, #0]
 801808a:	bf18      	it	ne
 801808c:	2300      	movne	r3, #0
 801808e:	eba6 0807 	sub.w	r8, r6, r7
 8018092:	608b      	str	r3, [r1, #8]
 8018094:	f1b8 0f00 	cmp.w	r8, #0
 8018098:	dde9      	ble.n	801806e <__sflush_r+0xae>
 801809a:	6a21      	ldr	r1, [r4, #32]
 801809c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801809e:	4643      	mov	r3, r8
 80180a0:	463a      	mov	r2, r7
 80180a2:	4628      	mov	r0, r5
 80180a4:	47b0      	blx	r6
 80180a6:	2800      	cmp	r0, #0
 80180a8:	dc08      	bgt.n	80180bc <__sflush_r+0xfc>
 80180aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80180b2:	81a3      	strh	r3, [r4, #12]
 80180b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80180b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180bc:	4407      	add	r7, r0
 80180be:	eba8 0800 	sub.w	r8, r8, r0
 80180c2:	e7e7      	b.n	8018094 <__sflush_r+0xd4>
 80180c4:	20400001 	.word	0x20400001

080180c8 <_fflush_r>:
 80180c8:	b538      	push	{r3, r4, r5, lr}
 80180ca:	690b      	ldr	r3, [r1, #16]
 80180cc:	4605      	mov	r5, r0
 80180ce:	460c      	mov	r4, r1
 80180d0:	b913      	cbnz	r3, 80180d8 <_fflush_r+0x10>
 80180d2:	2500      	movs	r5, #0
 80180d4:	4628      	mov	r0, r5
 80180d6:	bd38      	pop	{r3, r4, r5, pc}
 80180d8:	b118      	cbz	r0, 80180e2 <_fflush_r+0x1a>
 80180da:	6a03      	ldr	r3, [r0, #32]
 80180dc:	b90b      	cbnz	r3, 80180e2 <_fflush_r+0x1a>
 80180de:	f7fe fc2b 	bl	8016938 <__sinit>
 80180e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d0f3      	beq.n	80180d2 <_fflush_r+0xa>
 80180ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80180ec:	07d0      	lsls	r0, r2, #31
 80180ee:	d404      	bmi.n	80180fa <_fflush_r+0x32>
 80180f0:	0599      	lsls	r1, r3, #22
 80180f2:	d402      	bmi.n	80180fa <_fflush_r+0x32>
 80180f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80180f6:	f7fe ffc4 	bl	8017082 <__retarget_lock_acquire_recursive>
 80180fa:	4628      	mov	r0, r5
 80180fc:	4621      	mov	r1, r4
 80180fe:	f7ff ff5f 	bl	8017fc0 <__sflush_r>
 8018102:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018104:	07da      	lsls	r2, r3, #31
 8018106:	4605      	mov	r5, r0
 8018108:	d4e4      	bmi.n	80180d4 <_fflush_r+0xc>
 801810a:	89a3      	ldrh	r3, [r4, #12]
 801810c:	059b      	lsls	r3, r3, #22
 801810e:	d4e1      	bmi.n	80180d4 <_fflush_r+0xc>
 8018110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018112:	f7fe ffb7 	bl	8017084 <__retarget_lock_release_recursive>
 8018116:	e7dd      	b.n	80180d4 <_fflush_r+0xc>

08018118 <__swhatbuf_r>:
 8018118:	b570      	push	{r4, r5, r6, lr}
 801811a:	460c      	mov	r4, r1
 801811c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018120:	2900      	cmp	r1, #0
 8018122:	b096      	sub	sp, #88	@ 0x58
 8018124:	4615      	mov	r5, r2
 8018126:	461e      	mov	r6, r3
 8018128:	da0d      	bge.n	8018146 <__swhatbuf_r+0x2e>
 801812a:	89a3      	ldrh	r3, [r4, #12]
 801812c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018130:	f04f 0100 	mov.w	r1, #0
 8018134:	bf14      	ite	ne
 8018136:	2340      	movne	r3, #64	@ 0x40
 8018138:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801813c:	2000      	movs	r0, #0
 801813e:	6031      	str	r1, [r6, #0]
 8018140:	602b      	str	r3, [r5, #0]
 8018142:	b016      	add	sp, #88	@ 0x58
 8018144:	bd70      	pop	{r4, r5, r6, pc}
 8018146:	466a      	mov	r2, sp
 8018148:	f000 f8d6 	bl	80182f8 <_fstat_r>
 801814c:	2800      	cmp	r0, #0
 801814e:	dbec      	blt.n	801812a <__swhatbuf_r+0x12>
 8018150:	9901      	ldr	r1, [sp, #4]
 8018152:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018156:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801815a:	4259      	negs	r1, r3
 801815c:	4159      	adcs	r1, r3
 801815e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018162:	e7eb      	b.n	801813c <__swhatbuf_r+0x24>

08018164 <__smakebuf_r>:
 8018164:	898b      	ldrh	r3, [r1, #12]
 8018166:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018168:	079d      	lsls	r5, r3, #30
 801816a:	4606      	mov	r6, r0
 801816c:	460c      	mov	r4, r1
 801816e:	d507      	bpl.n	8018180 <__smakebuf_r+0x1c>
 8018170:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018174:	6023      	str	r3, [r4, #0]
 8018176:	6123      	str	r3, [r4, #16]
 8018178:	2301      	movs	r3, #1
 801817a:	6163      	str	r3, [r4, #20]
 801817c:	b003      	add	sp, #12
 801817e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018180:	ab01      	add	r3, sp, #4
 8018182:	466a      	mov	r2, sp
 8018184:	f7ff ffc8 	bl	8018118 <__swhatbuf_r>
 8018188:	9f00      	ldr	r7, [sp, #0]
 801818a:	4605      	mov	r5, r0
 801818c:	4639      	mov	r1, r7
 801818e:	4630      	mov	r0, r6
 8018190:	f7fe fab0 	bl	80166f4 <_malloc_r>
 8018194:	b948      	cbnz	r0, 80181aa <__smakebuf_r+0x46>
 8018196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801819a:	059a      	lsls	r2, r3, #22
 801819c:	d4ee      	bmi.n	801817c <__smakebuf_r+0x18>
 801819e:	f023 0303 	bic.w	r3, r3, #3
 80181a2:	f043 0302 	orr.w	r3, r3, #2
 80181a6:	81a3      	strh	r3, [r4, #12]
 80181a8:	e7e2      	b.n	8018170 <__smakebuf_r+0xc>
 80181aa:	89a3      	ldrh	r3, [r4, #12]
 80181ac:	6020      	str	r0, [r4, #0]
 80181ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80181b2:	81a3      	strh	r3, [r4, #12]
 80181b4:	9b01      	ldr	r3, [sp, #4]
 80181b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80181ba:	b15b      	cbz	r3, 80181d4 <__smakebuf_r+0x70>
 80181bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80181c0:	4630      	mov	r0, r6
 80181c2:	f000 f8ab 	bl	801831c <_isatty_r>
 80181c6:	b128      	cbz	r0, 80181d4 <__smakebuf_r+0x70>
 80181c8:	89a3      	ldrh	r3, [r4, #12]
 80181ca:	f023 0303 	bic.w	r3, r3, #3
 80181ce:	f043 0301 	orr.w	r3, r3, #1
 80181d2:	81a3      	strh	r3, [r4, #12]
 80181d4:	89a3      	ldrh	r3, [r4, #12]
 80181d6:	431d      	orrs	r5, r3
 80181d8:	81a5      	strh	r5, [r4, #12]
 80181da:	e7cf      	b.n	801817c <__smakebuf_r+0x18>

080181dc <__sccl>:
 80181dc:	b570      	push	{r4, r5, r6, lr}
 80181de:	780b      	ldrb	r3, [r1, #0]
 80181e0:	4604      	mov	r4, r0
 80181e2:	2b5e      	cmp	r3, #94	@ 0x5e
 80181e4:	bf0b      	itete	eq
 80181e6:	784b      	ldrbeq	r3, [r1, #1]
 80181e8:	1c4a      	addne	r2, r1, #1
 80181ea:	1c8a      	addeq	r2, r1, #2
 80181ec:	2100      	movne	r1, #0
 80181ee:	bf08      	it	eq
 80181f0:	2101      	moveq	r1, #1
 80181f2:	3801      	subs	r0, #1
 80181f4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80181f8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80181fc:	42a8      	cmp	r0, r5
 80181fe:	d1fb      	bne.n	80181f8 <__sccl+0x1c>
 8018200:	b90b      	cbnz	r3, 8018206 <__sccl+0x2a>
 8018202:	1e50      	subs	r0, r2, #1
 8018204:	bd70      	pop	{r4, r5, r6, pc}
 8018206:	f081 0101 	eor.w	r1, r1, #1
 801820a:	54e1      	strb	r1, [r4, r3]
 801820c:	4610      	mov	r0, r2
 801820e:	4602      	mov	r2, r0
 8018210:	f812 5b01 	ldrb.w	r5, [r2], #1
 8018214:	2d2d      	cmp	r5, #45	@ 0x2d
 8018216:	d005      	beq.n	8018224 <__sccl+0x48>
 8018218:	2d5d      	cmp	r5, #93	@ 0x5d
 801821a:	d016      	beq.n	801824a <__sccl+0x6e>
 801821c:	2d00      	cmp	r5, #0
 801821e:	d0f1      	beq.n	8018204 <__sccl+0x28>
 8018220:	462b      	mov	r3, r5
 8018222:	e7f2      	b.n	801820a <__sccl+0x2e>
 8018224:	7846      	ldrb	r6, [r0, #1]
 8018226:	2e5d      	cmp	r6, #93	@ 0x5d
 8018228:	d0fa      	beq.n	8018220 <__sccl+0x44>
 801822a:	42b3      	cmp	r3, r6
 801822c:	dcf8      	bgt.n	8018220 <__sccl+0x44>
 801822e:	3002      	adds	r0, #2
 8018230:	461a      	mov	r2, r3
 8018232:	3201      	adds	r2, #1
 8018234:	4296      	cmp	r6, r2
 8018236:	54a1      	strb	r1, [r4, r2]
 8018238:	dcfb      	bgt.n	8018232 <__sccl+0x56>
 801823a:	1af2      	subs	r2, r6, r3
 801823c:	3a01      	subs	r2, #1
 801823e:	1c5d      	adds	r5, r3, #1
 8018240:	42b3      	cmp	r3, r6
 8018242:	bfa8      	it	ge
 8018244:	2200      	movge	r2, #0
 8018246:	18ab      	adds	r3, r5, r2
 8018248:	e7e1      	b.n	801820e <__sccl+0x32>
 801824a:	4610      	mov	r0, r2
 801824c:	e7da      	b.n	8018204 <__sccl+0x28>

0801824e <__submore>:
 801824e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018252:	460c      	mov	r4, r1
 8018254:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8018256:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801825a:	4299      	cmp	r1, r3
 801825c:	d11d      	bne.n	801829a <__submore+0x4c>
 801825e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8018262:	f7fe fa47 	bl	80166f4 <_malloc_r>
 8018266:	b918      	cbnz	r0, 8018270 <__submore+0x22>
 8018268:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801826c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018274:	63a3      	str	r3, [r4, #56]	@ 0x38
 8018276:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801827a:	6360      	str	r0, [r4, #52]	@ 0x34
 801827c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8018280:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8018284:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8018288:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801828c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8018290:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8018294:	6020      	str	r0, [r4, #0]
 8018296:	2000      	movs	r0, #0
 8018298:	e7e8      	b.n	801826c <__submore+0x1e>
 801829a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801829c:	0077      	lsls	r7, r6, #1
 801829e:	463a      	mov	r2, r7
 80182a0:	f000 f84c 	bl	801833c <_realloc_r>
 80182a4:	4605      	mov	r5, r0
 80182a6:	2800      	cmp	r0, #0
 80182a8:	d0de      	beq.n	8018268 <__submore+0x1a>
 80182aa:	eb00 0806 	add.w	r8, r0, r6
 80182ae:	4601      	mov	r1, r0
 80182b0:	4632      	mov	r2, r6
 80182b2:	4640      	mov	r0, r8
 80182b4:	f7fe fee7 	bl	8017086 <memcpy>
 80182b8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80182bc:	f8c4 8000 	str.w	r8, [r4]
 80182c0:	e7e9      	b.n	8018296 <__submore+0x48>

080182c2 <memmove>:
 80182c2:	4288      	cmp	r0, r1
 80182c4:	b510      	push	{r4, lr}
 80182c6:	eb01 0402 	add.w	r4, r1, r2
 80182ca:	d902      	bls.n	80182d2 <memmove+0x10>
 80182cc:	4284      	cmp	r4, r0
 80182ce:	4623      	mov	r3, r4
 80182d0:	d807      	bhi.n	80182e2 <memmove+0x20>
 80182d2:	1e43      	subs	r3, r0, #1
 80182d4:	42a1      	cmp	r1, r4
 80182d6:	d008      	beq.n	80182ea <memmove+0x28>
 80182d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80182dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80182e0:	e7f8      	b.n	80182d4 <memmove+0x12>
 80182e2:	4402      	add	r2, r0
 80182e4:	4601      	mov	r1, r0
 80182e6:	428a      	cmp	r2, r1
 80182e8:	d100      	bne.n	80182ec <memmove+0x2a>
 80182ea:	bd10      	pop	{r4, pc}
 80182ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80182f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80182f4:	e7f7      	b.n	80182e6 <memmove+0x24>
	...

080182f8 <_fstat_r>:
 80182f8:	b538      	push	{r3, r4, r5, lr}
 80182fa:	4d07      	ldr	r5, [pc, #28]	@ (8018318 <_fstat_r+0x20>)
 80182fc:	2300      	movs	r3, #0
 80182fe:	4604      	mov	r4, r0
 8018300:	4608      	mov	r0, r1
 8018302:	4611      	mov	r1, r2
 8018304:	602b      	str	r3, [r5, #0]
 8018306:	f7e9 f951 	bl	80015ac <_fstat>
 801830a:	1c43      	adds	r3, r0, #1
 801830c:	d102      	bne.n	8018314 <_fstat_r+0x1c>
 801830e:	682b      	ldr	r3, [r5, #0]
 8018310:	b103      	cbz	r3, 8018314 <_fstat_r+0x1c>
 8018312:	6023      	str	r3, [r4, #0]
 8018314:	bd38      	pop	{r3, r4, r5, pc}
 8018316:	bf00      	nop
 8018318:	240055d0 	.word	0x240055d0

0801831c <_isatty_r>:
 801831c:	b538      	push	{r3, r4, r5, lr}
 801831e:	4d06      	ldr	r5, [pc, #24]	@ (8018338 <_isatty_r+0x1c>)
 8018320:	2300      	movs	r3, #0
 8018322:	4604      	mov	r4, r0
 8018324:	4608      	mov	r0, r1
 8018326:	602b      	str	r3, [r5, #0]
 8018328:	f7e9 f8ae 	bl	8001488 <_isatty>
 801832c:	1c43      	adds	r3, r0, #1
 801832e:	d102      	bne.n	8018336 <_isatty_r+0x1a>
 8018330:	682b      	ldr	r3, [r5, #0]
 8018332:	b103      	cbz	r3, 8018336 <_isatty_r+0x1a>
 8018334:	6023      	str	r3, [r4, #0]
 8018336:	bd38      	pop	{r3, r4, r5, pc}
 8018338:	240055d0 	.word	0x240055d0

0801833c <_realloc_r>:
 801833c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018340:	4607      	mov	r7, r0
 8018342:	4614      	mov	r4, r2
 8018344:	460d      	mov	r5, r1
 8018346:	b921      	cbnz	r1, 8018352 <_realloc_r+0x16>
 8018348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801834c:	4611      	mov	r1, r2
 801834e:	f7fe b9d1 	b.w	80166f4 <_malloc_r>
 8018352:	b92a      	cbnz	r2, 8018360 <_realloc_r+0x24>
 8018354:	f7fe fea6 	bl	80170a4 <_free_r>
 8018358:	4625      	mov	r5, r4
 801835a:	4628      	mov	r0, r5
 801835c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018360:	f000 f906 	bl	8018570 <_malloc_usable_size_r>
 8018364:	4284      	cmp	r4, r0
 8018366:	4606      	mov	r6, r0
 8018368:	d802      	bhi.n	8018370 <_realloc_r+0x34>
 801836a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801836e:	d8f4      	bhi.n	801835a <_realloc_r+0x1e>
 8018370:	4621      	mov	r1, r4
 8018372:	4638      	mov	r0, r7
 8018374:	f7fe f9be 	bl	80166f4 <_malloc_r>
 8018378:	4680      	mov	r8, r0
 801837a:	b908      	cbnz	r0, 8018380 <_realloc_r+0x44>
 801837c:	4645      	mov	r5, r8
 801837e:	e7ec      	b.n	801835a <_realloc_r+0x1e>
 8018380:	42b4      	cmp	r4, r6
 8018382:	4622      	mov	r2, r4
 8018384:	4629      	mov	r1, r5
 8018386:	bf28      	it	cs
 8018388:	4632      	movcs	r2, r6
 801838a:	f7fe fe7c 	bl	8017086 <memcpy>
 801838e:	4629      	mov	r1, r5
 8018390:	4638      	mov	r0, r7
 8018392:	f7fe fe87 	bl	80170a4 <_free_r>
 8018396:	e7f1      	b.n	801837c <_realloc_r+0x40>

08018398 <_strtol_l.isra.0>:
 8018398:	2b24      	cmp	r3, #36	@ 0x24
 801839a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801839e:	4686      	mov	lr, r0
 80183a0:	4690      	mov	r8, r2
 80183a2:	d801      	bhi.n	80183a8 <_strtol_l.isra.0+0x10>
 80183a4:	2b01      	cmp	r3, #1
 80183a6:	d106      	bne.n	80183b6 <_strtol_l.isra.0+0x1e>
 80183a8:	f7fe fe40 	bl	801702c <__errno>
 80183ac:	2316      	movs	r3, #22
 80183ae:	6003      	str	r3, [r0, #0]
 80183b0:	2000      	movs	r0, #0
 80183b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183b6:	4834      	ldr	r0, [pc, #208]	@ (8018488 <_strtol_l.isra.0+0xf0>)
 80183b8:	460d      	mov	r5, r1
 80183ba:	462a      	mov	r2, r5
 80183bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80183c0:	5d06      	ldrb	r6, [r0, r4]
 80183c2:	f016 0608 	ands.w	r6, r6, #8
 80183c6:	d1f8      	bne.n	80183ba <_strtol_l.isra.0+0x22>
 80183c8:	2c2d      	cmp	r4, #45	@ 0x2d
 80183ca:	d110      	bne.n	80183ee <_strtol_l.isra.0+0x56>
 80183cc:	782c      	ldrb	r4, [r5, #0]
 80183ce:	2601      	movs	r6, #1
 80183d0:	1c95      	adds	r5, r2, #2
 80183d2:	f033 0210 	bics.w	r2, r3, #16
 80183d6:	d115      	bne.n	8018404 <_strtol_l.isra.0+0x6c>
 80183d8:	2c30      	cmp	r4, #48	@ 0x30
 80183da:	d10d      	bne.n	80183f8 <_strtol_l.isra.0+0x60>
 80183dc:	782a      	ldrb	r2, [r5, #0]
 80183de:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80183e2:	2a58      	cmp	r2, #88	@ 0x58
 80183e4:	d108      	bne.n	80183f8 <_strtol_l.isra.0+0x60>
 80183e6:	786c      	ldrb	r4, [r5, #1]
 80183e8:	3502      	adds	r5, #2
 80183ea:	2310      	movs	r3, #16
 80183ec:	e00a      	b.n	8018404 <_strtol_l.isra.0+0x6c>
 80183ee:	2c2b      	cmp	r4, #43	@ 0x2b
 80183f0:	bf04      	itt	eq
 80183f2:	782c      	ldrbeq	r4, [r5, #0]
 80183f4:	1c95      	addeq	r5, r2, #2
 80183f6:	e7ec      	b.n	80183d2 <_strtol_l.isra.0+0x3a>
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d1f6      	bne.n	80183ea <_strtol_l.isra.0+0x52>
 80183fc:	2c30      	cmp	r4, #48	@ 0x30
 80183fe:	bf14      	ite	ne
 8018400:	230a      	movne	r3, #10
 8018402:	2308      	moveq	r3, #8
 8018404:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8018408:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801840c:	2200      	movs	r2, #0
 801840e:	fbbc f9f3 	udiv	r9, ip, r3
 8018412:	4610      	mov	r0, r2
 8018414:	fb03 ca19 	mls	sl, r3, r9, ip
 8018418:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801841c:	2f09      	cmp	r7, #9
 801841e:	d80f      	bhi.n	8018440 <_strtol_l.isra.0+0xa8>
 8018420:	463c      	mov	r4, r7
 8018422:	42a3      	cmp	r3, r4
 8018424:	dd1b      	ble.n	801845e <_strtol_l.isra.0+0xc6>
 8018426:	1c57      	adds	r7, r2, #1
 8018428:	d007      	beq.n	801843a <_strtol_l.isra.0+0xa2>
 801842a:	4581      	cmp	r9, r0
 801842c:	d314      	bcc.n	8018458 <_strtol_l.isra.0+0xc0>
 801842e:	d101      	bne.n	8018434 <_strtol_l.isra.0+0x9c>
 8018430:	45a2      	cmp	sl, r4
 8018432:	db11      	blt.n	8018458 <_strtol_l.isra.0+0xc0>
 8018434:	fb00 4003 	mla	r0, r0, r3, r4
 8018438:	2201      	movs	r2, #1
 801843a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801843e:	e7eb      	b.n	8018418 <_strtol_l.isra.0+0x80>
 8018440:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8018444:	2f19      	cmp	r7, #25
 8018446:	d801      	bhi.n	801844c <_strtol_l.isra.0+0xb4>
 8018448:	3c37      	subs	r4, #55	@ 0x37
 801844a:	e7ea      	b.n	8018422 <_strtol_l.isra.0+0x8a>
 801844c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8018450:	2f19      	cmp	r7, #25
 8018452:	d804      	bhi.n	801845e <_strtol_l.isra.0+0xc6>
 8018454:	3c57      	subs	r4, #87	@ 0x57
 8018456:	e7e4      	b.n	8018422 <_strtol_l.isra.0+0x8a>
 8018458:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801845c:	e7ed      	b.n	801843a <_strtol_l.isra.0+0xa2>
 801845e:	1c53      	adds	r3, r2, #1
 8018460:	d108      	bne.n	8018474 <_strtol_l.isra.0+0xdc>
 8018462:	2322      	movs	r3, #34	@ 0x22
 8018464:	f8ce 3000 	str.w	r3, [lr]
 8018468:	4660      	mov	r0, ip
 801846a:	f1b8 0f00 	cmp.w	r8, #0
 801846e:	d0a0      	beq.n	80183b2 <_strtol_l.isra.0+0x1a>
 8018470:	1e69      	subs	r1, r5, #1
 8018472:	e006      	b.n	8018482 <_strtol_l.isra.0+0xea>
 8018474:	b106      	cbz	r6, 8018478 <_strtol_l.isra.0+0xe0>
 8018476:	4240      	negs	r0, r0
 8018478:	f1b8 0f00 	cmp.w	r8, #0
 801847c:	d099      	beq.n	80183b2 <_strtol_l.isra.0+0x1a>
 801847e:	2a00      	cmp	r2, #0
 8018480:	d1f6      	bne.n	8018470 <_strtol_l.isra.0+0xd8>
 8018482:	f8c8 1000 	str.w	r1, [r8]
 8018486:	e794      	b.n	80183b2 <_strtol_l.isra.0+0x1a>
 8018488:	08018b45 	.word	0x08018b45

0801848c <_strtol_r>:
 801848c:	f7ff bf84 	b.w	8018398 <_strtol_l.isra.0>

08018490 <_strtoul_l.isra.0>:
 8018490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018494:	4e34      	ldr	r6, [pc, #208]	@ (8018568 <_strtoul_l.isra.0+0xd8>)
 8018496:	4686      	mov	lr, r0
 8018498:	460d      	mov	r5, r1
 801849a:	4628      	mov	r0, r5
 801849c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80184a0:	5d37      	ldrb	r7, [r6, r4]
 80184a2:	f017 0708 	ands.w	r7, r7, #8
 80184a6:	d1f8      	bne.n	801849a <_strtoul_l.isra.0+0xa>
 80184a8:	2c2d      	cmp	r4, #45	@ 0x2d
 80184aa:	d110      	bne.n	80184ce <_strtoul_l.isra.0+0x3e>
 80184ac:	782c      	ldrb	r4, [r5, #0]
 80184ae:	2701      	movs	r7, #1
 80184b0:	1c85      	adds	r5, r0, #2
 80184b2:	f033 0010 	bics.w	r0, r3, #16
 80184b6:	d115      	bne.n	80184e4 <_strtoul_l.isra.0+0x54>
 80184b8:	2c30      	cmp	r4, #48	@ 0x30
 80184ba:	d10d      	bne.n	80184d8 <_strtoul_l.isra.0+0x48>
 80184bc:	7828      	ldrb	r0, [r5, #0]
 80184be:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80184c2:	2858      	cmp	r0, #88	@ 0x58
 80184c4:	d108      	bne.n	80184d8 <_strtoul_l.isra.0+0x48>
 80184c6:	786c      	ldrb	r4, [r5, #1]
 80184c8:	3502      	adds	r5, #2
 80184ca:	2310      	movs	r3, #16
 80184cc:	e00a      	b.n	80184e4 <_strtoul_l.isra.0+0x54>
 80184ce:	2c2b      	cmp	r4, #43	@ 0x2b
 80184d0:	bf04      	itt	eq
 80184d2:	782c      	ldrbeq	r4, [r5, #0]
 80184d4:	1c85      	addeq	r5, r0, #2
 80184d6:	e7ec      	b.n	80184b2 <_strtoul_l.isra.0+0x22>
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d1f6      	bne.n	80184ca <_strtoul_l.isra.0+0x3a>
 80184dc:	2c30      	cmp	r4, #48	@ 0x30
 80184de:	bf14      	ite	ne
 80184e0:	230a      	movne	r3, #10
 80184e2:	2308      	moveq	r3, #8
 80184e4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80184e8:	2600      	movs	r6, #0
 80184ea:	fbb8 f8f3 	udiv	r8, r8, r3
 80184ee:	fb03 f908 	mul.w	r9, r3, r8
 80184f2:	ea6f 0909 	mvn.w	r9, r9
 80184f6:	4630      	mov	r0, r6
 80184f8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80184fc:	f1bc 0f09 	cmp.w	ip, #9
 8018500:	d810      	bhi.n	8018524 <_strtoul_l.isra.0+0x94>
 8018502:	4664      	mov	r4, ip
 8018504:	42a3      	cmp	r3, r4
 8018506:	dd1e      	ble.n	8018546 <_strtoul_l.isra.0+0xb6>
 8018508:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801850c:	d007      	beq.n	801851e <_strtoul_l.isra.0+0x8e>
 801850e:	4580      	cmp	r8, r0
 8018510:	d316      	bcc.n	8018540 <_strtoul_l.isra.0+0xb0>
 8018512:	d101      	bne.n	8018518 <_strtoul_l.isra.0+0x88>
 8018514:	45a1      	cmp	r9, r4
 8018516:	db13      	blt.n	8018540 <_strtoul_l.isra.0+0xb0>
 8018518:	fb00 4003 	mla	r0, r0, r3, r4
 801851c:	2601      	movs	r6, #1
 801851e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018522:	e7e9      	b.n	80184f8 <_strtoul_l.isra.0+0x68>
 8018524:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8018528:	f1bc 0f19 	cmp.w	ip, #25
 801852c:	d801      	bhi.n	8018532 <_strtoul_l.isra.0+0xa2>
 801852e:	3c37      	subs	r4, #55	@ 0x37
 8018530:	e7e8      	b.n	8018504 <_strtoul_l.isra.0+0x74>
 8018532:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8018536:	f1bc 0f19 	cmp.w	ip, #25
 801853a:	d804      	bhi.n	8018546 <_strtoul_l.isra.0+0xb6>
 801853c:	3c57      	subs	r4, #87	@ 0x57
 801853e:	e7e1      	b.n	8018504 <_strtoul_l.isra.0+0x74>
 8018540:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8018544:	e7eb      	b.n	801851e <_strtoul_l.isra.0+0x8e>
 8018546:	1c73      	adds	r3, r6, #1
 8018548:	d106      	bne.n	8018558 <_strtoul_l.isra.0+0xc8>
 801854a:	2322      	movs	r3, #34	@ 0x22
 801854c:	f8ce 3000 	str.w	r3, [lr]
 8018550:	4630      	mov	r0, r6
 8018552:	b932      	cbnz	r2, 8018562 <_strtoul_l.isra.0+0xd2>
 8018554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018558:	b107      	cbz	r7, 801855c <_strtoul_l.isra.0+0xcc>
 801855a:	4240      	negs	r0, r0
 801855c:	2a00      	cmp	r2, #0
 801855e:	d0f9      	beq.n	8018554 <_strtoul_l.isra.0+0xc4>
 8018560:	b106      	cbz	r6, 8018564 <_strtoul_l.isra.0+0xd4>
 8018562:	1e69      	subs	r1, r5, #1
 8018564:	6011      	str	r1, [r2, #0]
 8018566:	e7f5      	b.n	8018554 <_strtoul_l.isra.0+0xc4>
 8018568:	08018b45 	.word	0x08018b45

0801856c <_strtoul_r>:
 801856c:	f7ff bf90 	b.w	8018490 <_strtoul_l.isra.0>

08018570 <_malloc_usable_size_r>:
 8018570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018574:	1f18      	subs	r0, r3, #4
 8018576:	2b00      	cmp	r3, #0
 8018578:	bfbc      	itt	lt
 801857a:	580b      	ldrlt	r3, [r1, r0]
 801857c:	18c0      	addlt	r0, r0, r3
 801857e:	4770      	bx	lr

08018580 <_init>:
 8018580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018582:	bf00      	nop
 8018584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018586:	bc08      	pop	{r3}
 8018588:	469e      	mov	lr, r3
 801858a:	4770      	bx	lr

0801858c <_fini>:
 801858c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801858e:	bf00      	nop
 8018590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018592:	bc08      	pop	{r3}
 8018594:	469e      	mov	lr, r3
 8018596:	4770      	bx	lr
